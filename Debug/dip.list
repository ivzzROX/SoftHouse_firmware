
dip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b610  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800b7a0  0800b7a0  0001b7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bd88  0800bd88  0001bd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bd90  0800bd90  0001bd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bd94  0800bd94  0001bd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000228  20000000  0800bd98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020228  2**0
                  CONTENTS
  8 .bss          000190fc  20000228  20000228  00020228  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20019324  20019324  00020228  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002af28  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006493  00000000  00000000  0004b180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001e90  00000000  00000000  00051618  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001bf0  00000000  00000000  000534a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000fb85  00000000  00000000  00055098  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008d19  00000000  00000000  00064c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006d936  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000087bc  00000000  00000000  0006d9b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b788 	.word	0x0800b788

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	0800b788 	.word	0x0800b788

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <t_trigger_update>:
#include <stdio.h>

//TODO: Refactor triggers and delay, common bodies and different incoming conditions

static uint8_t t_trigger_update(OP_ROOT* root, uint16_t root_n, T_TR* ttr, uint16_t state)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b087      	sub	sp, #28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	607a      	str	r2, [r7, #4]
 80005ba:	461a      	mov	r2, r3
 80005bc:	460b      	mov	r3, r1
 80005be:	817b      	strh	r3, [r7, #10]
 80005c0:	4613      	mov	r3, r2
 80005c2:	813b      	strh	r3, [r7, #8]
	if(ttr->root_id == -1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f993 3000 	ldrsb.w	r3, [r3]
 80005ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ce:	d114      	bne.n	80005fa <t_trigger_update+0x4a>
	{
		if(ttr->prev_root_value == 0
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	789b      	ldrb	r3, [r3, #2]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d109      	bne.n	80005ec <t_trigger_update+0x3c>
		&& state == 1)
 80005d8:	893b      	ldrh	r3, [r7, #8]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d106      	bne.n	80005ec <t_trigger_update+0x3c>
		{
			ttr->value ^= 1;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	785b      	ldrb	r3, [r3, #1]
 80005e2:	f083 0301 	eor.w	r3, r3, #1
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	705a      	strb	r2, [r3, #1]
		}
		ttr->prev_root_value = state;
 80005ec:	893b      	ldrh	r3, [r7, #8]
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	709a      	strb	r2, [r3, #2]
		return ttr->value;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	785b      	ldrb	r3, [r3, #1]
 80005f8:	e031      	b.n	800065e <t_trigger_update+0xae>
	}

	for(uint16_t i = 0; i < root_n; ++i)
 80005fa:	2300      	movs	r3, #0
 80005fc:	82fb      	strh	r3, [r7, #22]
 80005fe:	e029      	b.n	8000654 <t_trigger_update+0xa4>
	{
		if(root[i].id == ttr->root_id)
 8000600:	8afb      	ldrh	r3, [r7, #22]
 8000602:	011b      	lsls	r3, r3, #4
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	4413      	add	r3, r2
 8000608:	7adb      	ldrb	r3, [r3, #11]
 800060a:	461a      	mov	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f993 3000 	ldrsb.w	r3, [r3]
 8000612:	429a      	cmp	r2, r3
 8000614:	d11b      	bne.n	800064e <t_trigger_update+0x9e>
		{
			if(ttr->prev_root_value == 0
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	789b      	ldrb	r3, [r3, #2]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d10d      	bne.n	800063a <t_trigger_update+0x8a>
			&& root[i].result == 1)
 800061e:	8afb      	ldrh	r3, [r7, #22]
 8000620:	011b      	lsls	r3, r3, #4
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	4413      	add	r3, r2
 8000626:	7b1b      	ldrb	r3, [r3, #12]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d106      	bne.n	800063a <t_trigger_update+0x8a>
			{
				ttr->value ^= 1;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	785b      	ldrb	r3, [r3, #1]
 8000630:	f083 0301 	eor.w	r3, r3, #1
 8000634:	b2da      	uxtb	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	705a      	strb	r2, [r3, #1]
			}
			ttr->prev_root_value = root[i].result;
 800063a:	8afb      	ldrh	r3, [r7, #22]
 800063c:	011b      	lsls	r3, r3, #4
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	4413      	add	r3, r2
 8000642:	7b1a      	ldrb	r2, [r3, #12]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	709a      	strb	r2, [r3, #2]
			return ttr->value;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	e007      	b.n	800065e <t_trigger_update+0xae>
	for(uint16_t i = 0; i < root_n; ++i)
 800064e:	8afb      	ldrh	r3, [r7, #22]
 8000650:	3301      	adds	r3, #1
 8000652:	82fb      	strh	r3, [r7, #22]
 8000654:	8afa      	ldrh	r2, [r7, #22]
 8000656:	897b      	ldrh	r3, [r7, #10]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3d1      	bcc.n	8000600 <t_trigger_update+0x50>
		}
	}
	return 0;
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	371c      	adds	r7, #28
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <rs_trigger_update>:

static uint8_t rs_trigger_update(OP_ROOT* root, uint16_t root_n, RS_TR* rstr, uint16_t state)
{
 800066a:	b480      	push	{r7}
 800066c:	b087      	sub	sp, #28
 800066e:	af00      	add	r7, sp, #0
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	607a      	str	r2, [r7, #4]
 8000674:	461a      	mov	r2, r3
 8000676:	460b      	mov	r3, r1
 8000678:	817b      	strh	r3, [r7, #10]
 800067a:	4613      	mov	r3, r2
 800067c:	813b      	strh	r3, [r7, #8]
	uint8_t temp = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	75fb      	strb	r3, [r7, #23]
	for(uint16_t i = 0; i < root_n; ++i)
 8000682:	2300      	movs	r3, #0
 8000684:	82bb      	strh	r3, [r7, #20]
 8000686:	e04b      	b.n	8000720 <rs_trigger_update+0xb6>
	{
		temp = rstr->value;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	789b      	ldrb	r3, [r3, #2]
 800068c:	75fb      	strb	r3, [r7, #23]
		if(root[i].id == rstr->root_id_s)
 800068e:	8abb      	ldrh	r3, [r7, #20]
 8000690:	011b      	lsls	r3, r3, #4
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	4413      	add	r3, r2
 8000696:	7adb      	ldrb	r3, [r3, #11]
 8000698:	461a      	mov	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f993 3000 	ldrsb.w	r3, [r3]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d117      	bne.n	80006d4 <rs_trigger_update+0x6a>
		{
			if(rstr->prev_root_s_value == 0
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	78db      	ldrb	r3, [r3, #3]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d109      	bne.n	80006c0 <rs_trigger_update+0x56>
			&& root[i].result == 1)
 80006ac:	8abb      	ldrh	r3, [r7, #20]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	7b1b      	ldrb	r3, [r3, #12]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d102      	bne.n	80006c0 <rs_trigger_update+0x56>
			{
				rstr->value = 1;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2201      	movs	r2, #1
 80006be:	709a      	strb	r2, [r3, #2]
			}
			rstr->prev_root_s_value = root[i].result;
 80006c0:	8abb      	ldrh	r3, [r7, #20]
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	7b1a      	ldrb	r2, [r3, #12]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	70da      	strb	r2, [r3, #3]
			temp = rstr->value;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	789b      	ldrb	r3, [r3, #2]
 80006d2:	75fb      	strb	r3, [r7, #23]
		}
		if(root[i].id == rstr->root_id_r)
 80006d4:	8abb      	ldrh	r3, [r7, #20]
 80006d6:	011b      	lsls	r3, r3, #4
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	7adb      	ldrb	r3, [r3, #11]
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d117      	bne.n	800071a <rs_trigger_update+0xb0>
		{
			if(rstr->prev_root_r_value == 0
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d109      	bne.n	8000706 <rs_trigger_update+0x9c>
			&& root[i].result == 1)
 80006f2:	8abb      	ldrh	r3, [r7, #20]
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	4413      	add	r3, r2
 80006fa:	7b1b      	ldrb	r3, [r3, #12]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d102      	bne.n	8000706 <rs_trigger_update+0x9c>
			{
				rstr->value = 0;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	709a      	strb	r2, [r3, #2]
			}
			rstr->prev_root_r_value = root[i].result;
 8000706:	8abb      	ldrh	r3, [r7, #20]
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	4413      	add	r3, r2
 800070e:	7b1a      	ldrb	r2, [r3, #12]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	711a      	strb	r2, [r3, #4]
			temp = rstr->value;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	789b      	ldrb	r3, [r3, #2]
 8000718:	75fb      	strb	r3, [r7, #23]
	for(uint16_t i = 0; i < root_n; ++i)
 800071a:	8abb      	ldrh	r3, [r7, #20]
 800071c:	3301      	adds	r3, #1
 800071e:	82bb      	strh	r3, [r7, #20]
 8000720:	8aba      	ldrh	r2, [r7, #20]
 8000722:	897b      	ldrh	r3, [r7, #10]
 8000724:	429a      	cmp	r2, r3
 8000726:	d3af      	bcc.n	8000688 <rs_trigger_update+0x1e>
		}
	}
	return temp;
 8000728:	7dfb      	ldrb	r3, [r7, #23]
}
 800072a:	4618      	mov	r0, r3
 800072c:	371c      	adds	r7, #28
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <counter_update>:

static uint8_t counter_update(OP_ROOT* root, uint16_t root_n, CNTR* cntr, uint16_t value, uint16_t state)
{
 8000736:	b480      	push	{r7}
 8000738:	b087      	sub	sp, #28
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	607a      	str	r2, [r7, #4]
 8000740:	461a      	mov	r2, r3
 8000742:	460b      	mov	r3, r1
 8000744:	817b      	strh	r3, [r7, #10]
 8000746:	4613      	mov	r3, r2
 8000748:	813b      	strh	r3, [r7, #8]
	uint8_t temp = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	75fb      	strb	r3, [r7, #23]

	if( cntr->root_id == -1 )
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f993 3000 	ldrsb.w	r3, [r3]
 8000754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000758:	d126      	bne.n	80007a8 <counter_update+0x72>
	{
		if( cntr->prev_root_value == 0
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	791b      	ldrb	r3, [r3, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d11c      	bne.n	800079c <counter_update+0x66>
		&& state == 1 )
 8000762:	8c3b      	ldrh	r3, [r7, #32]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d119      	bne.n	800079c <counter_update+0x66>
		{
			cntr->value++;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	885b      	ldrh	r3, [r3, #2]
 800076c:	3301      	adds	r3, #1
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	805a      	strh	r2, [r3, #2]

			if( cntr->value ==  value )
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	885b      	ldrh	r3, [r3, #2]
 8000778:	893a      	ldrh	r2, [r7, #8]
 800077a:	429a      	cmp	r2, r3
 800077c:	d104      	bne.n	8000788 <counter_update+0x52>
			{
				cntr->value = 0;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	805a      	strh	r2, [r3, #2]
				temp = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	75fb      	strb	r3, [r7, #23]
			}

			if( cntr->value > value )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	885b      	ldrh	r3, [r3, #2]
 800078c:	893a      	ldrh	r2, [r7, #8]
 800078e:	429a      	cmp	r2, r3
 8000790:	d204      	bcs.n	800079c <counter_update+0x66>
			{
				cntr->value = 0;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2200      	movs	r2, #0
 8000796:	805a      	strh	r2, [r3, #2]
				temp = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	75fb      	strb	r3, [r7, #23]
			}
		}
		cntr->prev_root_value = state;
 800079c:	8c3b      	ldrh	r3, [r7, #32]
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	711a      	strb	r2, [r3, #4]
		return temp;
 80007a4:	7dfb      	ldrb	r3, [r7, #23]
 80007a6:	e043      	b.n	8000830 <counter_update+0xfa>
	}

	for(uint16_t i = 0; i < root_n; ++i)
 80007a8:	2300      	movs	r3, #0
 80007aa:	82bb      	strh	r3, [r7, #20]
 80007ac:	e03b      	b.n	8000826 <counter_update+0xf0>
	{
		if( cntr->root_id == root[i].id )
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f993 3000 	ldrsb.w	r3, [r3]
 80007b4:	4619      	mov	r1, r3
 80007b6:	8abb      	ldrh	r3, [r7, #20]
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	4413      	add	r3, r2
 80007be:	7adb      	ldrb	r3, [r3, #11]
 80007c0:	4299      	cmp	r1, r3
 80007c2:	d12d      	bne.n	8000820 <counter_update+0xea>
		{
			if( cntr->prev_root_value == 0
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	791b      	ldrb	r3, [r3, #4]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d120      	bne.n	800080e <counter_update+0xd8>
			&& root[i].result == 1 )
 80007cc:	8abb      	ldrh	r3, [r7, #20]
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	4413      	add	r3, r2
 80007d4:	7b1b      	ldrb	r3, [r3, #12]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d119      	bne.n	800080e <counter_update+0xd8>
			{
				cntr->value++;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	885b      	ldrh	r3, [r3, #2]
 80007de:	3301      	adds	r3, #1
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	805a      	strh	r2, [r3, #2]

				if( cntr->value ==  value )
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	885b      	ldrh	r3, [r3, #2]
 80007ea:	893a      	ldrh	r2, [r7, #8]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d104      	bne.n	80007fa <counter_update+0xc4>
				{
					cntr->value = 0;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	805a      	strh	r2, [r3, #2]
					temp = 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	75fb      	strb	r3, [r7, #23]
				}

				if( cntr->value > value )
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	885b      	ldrh	r3, [r3, #2]
 80007fe:	893a      	ldrh	r2, [r7, #8]
 8000800:	429a      	cmp	r2, r3
 8000802:	d204      	bcs.n	800080e <counter_update+0xd8>
				{
					cntr->value = 0;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	805a      	strh	r2, [r3, #2]
					temp = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	75fb      	strb	r3, [r7, #23]
				}
			}
			cntr->prev_root_value = root[i].result;
 800080e:	8abb      	ldrh	r3, [r7, #20]
 8000810:	011b      	lsls	r3, r3, #4
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	4413      	add	r3, r2
 8000816:	7b1a      	ldrb	r2, [r3, #12]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	711a      	strb	r2, [r3, #4]
			return temp;
 800081c:	7dfb      	ldrb	r3, [r7, #23]
 800081e:	e007      	b.n	8000830 <counter_update+0xfa>
	for(uint16_t i = 0; i < root_n; ++i)
 8000820:	8abb      	ldrh	r3, [r7, #20]
 8000822:	3301      	adds	r3, #1
 8000824:	82bb      	strh	r3, [r7, #20]
 8000826:	8aba      	ldrh	r2, [r7, #20]
 8000828:	897b      	ldrh	r3, [r7, #10]
 800082a:	429a      	cmp	r2, r3
 800082c:	d3bf      	bcc.n	80007ae <counter_update+0x78>
		}
	}

	return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	371c      	adds	r7, #28
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <delay_update>:

static uint8_t delay_update(OP_ROOT* root, uint16_t root_n, DL* delay, uint16_t state)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b090      	sub	sp, #64	; 0x40
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	817b      	strh	r3, [r7, #10]
 800084c:	4613      	mov	r3, r2
 800084e:	813b      	strh	r3, [r7, #8]
	uint8_t temp = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	time_t utime = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
	struct tm time;

	if( delay->root_id == -1 )
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f993 3000 	ldrsb.w	r3, [r3]
 8000860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000864:	d12e      	bne.n	80008c4 <delay_update+0x88>
	{
		get_cur_time(&time);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fd56 	bl	800231c <get_cur_time>
		utime = mktime(&time);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4618      	mov	r0, r3
 8000876:	f009 f987 	bl	8009b88 <mktime>
 800087a:	63b8      	str	r0, [r7, #56]	; 0x38

		if(delay->prev_root_value == 0
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7a1b      	ldrb	r3, [r3, #8]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d109      	bne.n	8000898 <delay_update+0x5c>
		&& state == 1)
 8000884:	893b      	ldrh	r3, [r7, #8]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d106      	bne.n	8000898 <delay_update+0x5c>
		{
			delay->finish_time = utime + delay->value;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	885b      	ldrh	r3, [r3, #2]
 800088e:	461a      	mov	r2, r3
 8000890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000892:	441a      	add	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	605a      	str	r2, [r3, #4]
		}

		if(utime >= delay->finish_time && delay->finish_time > 0)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800089e:	429a      	cmp	r2, r3
 80008a0:	dc09      	bgt.n	80008b6 <delay_update+0x7a>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	dd05      	ble.n	80008b6 <delay_update+0x7a>
		{
			temp = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			delay->finish_time = 0;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]
		}

		delay->prev_root_value = state;
 80008b6:	893b      	ldrh	r3, [r7, #8]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	721a      	strb	r2, [r3, #8]
		return temp;
 80008be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80008c2:	e04b      	b.n	800095c <delay_update+0x120>
	}

	for(uint16_t i = 0; i < root_n; ++i)
 80008c4:	2300      	movs	r3, #0
 80008c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80008c8:	e043      	b.n	8000952 <delay_update+0x116>
	{
		if( root[i].id == delay->root_id )
 80008ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	7adb      	ldrb	r3, [r3, #11]
 80008d4:	461a      	mov	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f993 3000 	ldrsb.w	r3, [r3]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d135      	bne.n	800094c <delay_update+0x110>
		{
			get_cur_time(&time);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fd19 	bl	800231c <get_cur_time>
			utime = mktime(&time);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4618      	mov	r0, r3
 80008f0:	f009 f94a 	bl	8009b88 <mktime>
 80008f4:	63b8      	str	r0, [r7, #56]	; 0x38

			if(delay->prev_root_value == 0
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	7a1b      	ldrb	r3, [r3, #8]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10d      	bne.n	800091a <delay_update+0xde>
			&& root[i].result == 1)
 80008fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000900:	011b      	lsls	r3, r3, #4
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	4413      	add	r3, r2
 8000906:	7b1b      	ldrb	r3, [r3, #12]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d106      	bne.n	800091a <delay_update+0xde>
			{
				delay->finish_time = utime + delay->value;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	885b      	ldrh	r3, [r3, #2]
 8000910:	461a      	mov	r2, r3
 8000912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000914:	441a      	add	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	605a      	str	r2, [r3, #4]
			}

			if(utime >= delay->finish_time && delay->finish_time > 0)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000920:	429a      	cmp	r2, r3
 8000922:	dc09      	bgt.n	8000938 <delay_update+0xfc>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	2b00      	cmp	r3, #0
 800092a:	dd05      	ble.n	8000938 <delay_update+0xfc>
			{
				temp = 1;
 800092c:	2301      	movs	r3, #1
 800092e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				delay->finish_time = 0;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
			}

			delay->prev_root_value = root[i].result;
 8000938:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800093a:	011b      	lsls	r3, r3, #4
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	7b1a      	ldrb	r2, [r3, #12]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	721a      	strb	r2, [r3, #8]
			return temp;
 8000946:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800094a:	e007      	b.n	800095c <delay_update+0x120>
	for(uint16_t i = 0; i < root_n; ++i)
 800094c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800094e:	3301      	adds	r3, #1
 8000950:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000952:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000954:	897b      	ldrh	r3, [r7, #10]
 8000956:	429a      	cmp	r2, r3
 8000958:	d3b7      	bcc.n	80008ca <delay_update+0x8e>
		}
	}
	return 0;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3740      	adds	r7, #64	; 0x40
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <update_type_state>:

static uint8_t update_type_state(OP_ROOT* root, uint16_t root_n, uint16_t curr_root_n)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	807b      	strh	r3, [r7, #2]
 8000970:	4613      	mov	r3, r2
 8000972:	803b      	strh	r3, [r7, #0]
	for (uint16_t op = 0; op < root[curr_root_n].operation_n; ++op)
 8000974:	2300      	movs	r3, #0
 8000976:	81fb      	strh	r3, [r7, #14]
 8000978:	e03c      	b.n	80009f4 <update_type_state+0x90>
	{
		OP* op_arr = (OP*)root[curr_root_n].operation;
 800097a:	883b      	ldrh	r3, [r7, #0]
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	60bb      	str	r3, [r7, #8]
		if (op_arr[op].type == STATE)
 8000986:	89fa      	ldrh	r2, [r7, #14]
 8000988:	4613      	mov	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4413      	add	r3, r2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	461a      	mov	r2, r3
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	4413      	add	r3, r2
 8000996:	7c5b      	ldrb	r3, [r3, #17]
 8000998:	2b0b      	cmp	r3, #11
 800099a:	d128      	bne.n	80009ee <update_type_state+0x8a>
		{
			for (uint16_t n = 0; n < root_n; ++n)
 800099c:	2300      	movs	r3, #0
 800099e:	81bb      	strh	r3, [r7, #12]
 80009a0:	e021      	b.n	80009e6 <update_type_state+0x82>
			{
				if (op_arr[op].root_id == root[n].id)
 80009a2:	89fa      	ldrh	r2, [r7, #14]
 80009a4:	4613      	mov	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	461a      	mov	r2, r3
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	89bb      	ldrh	r3, [r7, #12]
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	440b      	add	r3, r1
 80009bc:	7adb      	ldrb	r3, [r3, #11]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d10e      	bne.n	80009e0 <update_type_state+0x7c>
				{
					op_arr[op].trigger_value = root[n].result;
 80009c2:	89fa      	ldrh	r2, [r7, #14]
 80009c4:	4613      	mov	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	461a      	mov	r2, r3
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	4413      	add	r3, r2
 80009d2:	89ba      	ldrh	r2, [r7, #12]
 80009d4:	0112      	lsls	r2, r2, #4
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	440a      	add	r2, r1
 80009da:	7b12      	ldrb	r2, [r2, #12]
 80009dc:	60da      	str	r2, [r3, #12]
					break;
 80009de:	e006      	b.n	80009ee <update_type_state+0x8a>
			for (uint16_t n = 0; n < root_n; ++n)
 80009e0:	89bb      	ldrh	r3, [r7, #12]
 80009e2:	3301      	adds	r3, #1
 80009e4:	81bb      	strh	r3, [r7, #12]
 80009e6:	89ba      	ldrh	r2, [r7, #12]
 80009e8:	887b      	ldrh	r3, [r7, #2]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d3d9      	bcc.n	80009a2 <update_type_state+0x3e>
	for (uint16_t op = 0; op < root[curr_root_n].operation_n; ++op)
 80009ee:	89fb      	ldrh	r3, [r7, #14]
 80009f0:	3301      	adds	r3, #1
 80009f2:	81fb      	strh	r3, [r7, #14]
 80009f4:	883b      	ldrh	r3, [r7, #0]
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	4413      	add	r3, r2
 80009fc:	889b      	ldrh	r3, [r3, #4]
 80009fe:	89fa      	ldrh	r2, [r7, #14]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d3ba      	bcc.n	800097a <update_type_state+0x16>
				}
			}
		}
	}
	return 1;
 8000a04:	2301      	movs	r3, #1
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <bit_proces>:

static uint8_t bit_proces(OP_ROOT* root, uint16_t root_n, uint16_t curr_root_n, uint16_t out)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af02      	add	r7, sp, #8
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	4608      	mov	r0, r1
 8000a1e:	4611      	mov	r1, r2
 8000a20:	461a      	mov	r2, r3
 8000a22:	4603      	mov	r3, r0
 8000a24:	817b      	strh	r3, [r7, #10]
 8000a26:	460b      	mov	r3, r1
 8000a28:	813b      	strh	r3, [r7, #8]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	80fb      	strh	r3, [r7, #6]
	OP* op_arr = root[curr_root_n].operation;
 8000a2e:	893b      	ldrh	r3, [r7, #8]
 8000a30:	011b      	lsls	r3, r3, #4
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	4413      	add	r3, r2
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	617b      	str	r3, [r7, #20]
	uint16_t op_n = root[curr_root_n].operation_n;
 8000a3a:	893b      	ldrh	r3, [r7, #8]
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	4413      	add	r3, r2
 8000a42:	889b      	ldrh	r3, [r3, #4]
 8000a44:	827b      	strh	r3, [r7, #18]

	if ( op_arr[0].log != FIRST) {
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	7c1b      	ldrb	r3, [r3, #16]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d001      	beq.n	8000a52 <bit_proces+0x3e>
		return 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e15f      	b.n	8000d12 <bit_proces+0x2fe>
	}

	uint16_t temp = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	83fb      	strh	r3, [r7, #30]
	uint16_t state = 0; //Sensor_CheckValue(op_arr[0].addr, op_arr[0].trigger_value);
 8000a56:	2300      	movs	r3, #0
 8000a58:	83bb      	strh	r3, [r7, #28]

	for (uint16_t i = 0; i < op_n; ++i) {
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	837b      	strh	r3, [r7, #26]
 8000a5e:	e151      	b.n	8000d04 <bit_proces+0x2f0>

		switch(op_arr[i].type) {
 8000a60:	8b7a      	ldrh	r2, [r7, #26]
 8000a62:	4613      	mov	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	4413      	add	r3, r2
 8000a70:	7c5b      	ldrb	r3, [r3, #17]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	2b0a      	cmp	r3, #10
 8000a76:	f200 80e6 	bhi.w	8000c46 <bit_proces+0x232>
 8000a7a:	a201      	add	r2, pc, #4	; (adr r2, 8000a80 <bit_proces+0x6c>)
 8000a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a80:	08000bf3 	.word	0x08000bf3
 8000a84:	08000aad 	.word	0x08000aad
 8000a88:	08000acb 	.word	0x08000acb
 8000a8c:	08000b2b 	.word	0x08000b2b
 8000a90:	08000aeb 	.word	0x08000aeb
 8000a94:	08000b0b 	.word	0x08000b0b
 8000a98:	08000baf 	.word	0x08000baf
 8000a9c:	08000bd1 	.word	0x08000bd1
 8000aa0:	08000b51 	.word	0x08000b51
 8000aa4:	08000b8d 	.word	0x08000b8d
 8000aa8:	08000c25 	.word	0x08000c25

		case TIME:
			temp = is_cur_time((TM*)op_arr[i].data);
 8000aac:	8b7a      	ldrh	r2, [r7, #26]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	4413      	add	r3, r2
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fc38 	bl	8002334 <is_cur_time>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	83fb      	strh	r3, [r7, #30]
			break;
 8000ac8:	e0c0      	b.n	8000c4c <bit_proces+0x238>

		case WEEK:
			temp = is_cur_day_of_week(op_arr[i].trigger_value);
 8000aca:	8b7a      	ldrh	r2, [r7, #26]
 8000acc:	4613      	mov	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	4413      	add	r3, r2
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fc66 	bl	80023b0 <is_cur_day_of_week>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	83fb      	strh	r3, [r7, #30]
			break;
 8000ae8:	e0b0      	b.n	8000c4c <bit_proces+0x238>

		case INO:
			temp = INO_GetValue(op_arr[i].trigger_value);
 8000aea:	8b7a      	ldrh	r2, [r7, #26]
 8000aec:	4613      	mov	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	461a      	mov	r2, r3
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	4413      	add	r3, r2
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f006 fd7c 	bl	80075fc <INO_GetValue>
 8000b04:	4603      	mov	r3, r0
 8000b06:	83fb      	strh	r3, [r7, #30]
			break;
 8000b08:	e0a0      	b.n	8000c4c <bit_proces+0x238>

		case WEB:
			temp = Telegram_GetValue(op_arr[i].trigger_value);
 8000b0a:	8b7a      	ldrh	r2, [r7, #26]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	461a      	mov	r2, r3
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	4413      	add	r3, r2
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 fbd8 	bl	80022d4 <Telegram_GetValue>
 8000b24:	4603      	mov	r3, r0
 8000b26:	83fb      	strh	r3, [r7, #30]
			break;
 8000b28:	e090      	b.n	8000c4c <bit_proces+0x238>

		case PMO:
			temp = out & (1 << op_arr[i].trigger_value);
 8000b2a:	8b7a      	ldrh	r2, [r7, #26]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	461a      	mov	r2, r3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	4413      	add	r3, r2
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	83fb      	strh	r3, [r7, #30]
			break;
 8000b4e:	e07d      	b.n	8000c4c <bit_proces+0x238>

		case COUNTER:
			temp = counter_update(root, root_n, (CNTR*)op_arr[i].data, op_arr[i].trigger_value, state);
 8000b50:	8b7a      	ldrh	r2, [r7, #26]
 8000b52:	4613      	mov	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	4413      	add	r3, r2
 8000b60:	6898      	ldr	r0, [r3, #8]
 8000b62:	8b7a      	ldrh	r2, [r7, #26]
 8000b64:	4613      	mov	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	4413      	add	r3, r2
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	8979      	ldrh	r1, [r7, #10]
 8000b78:	8bbb      	ldrh	r3, [r7, #28]
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	4602      	mov	r2, r0
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f7ff fdd8 	bl	8000736 <counter_update>
 8000b86:	4603      	mov	r3, r0
 8000b88:	83fb      	strh	r3, [r7, #30]
			break;
 8000b8a:	e05f      	b.n	8000c4c <bit_proces+0x238>

		case DELAY:
			temp = delay_update(root, root_n, (DL*)op_arr[i].data, state);
 8000b8c:	8b7a      	ldrh	r2, [r7, #26]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	461a      	mov	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	8bbb      	ldrh	r3, [r7, #28]
 8000ba0:	8979      	ldrh	r1, [r7, #10]
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f7ff fe4a 	bl	800083c <delay_update>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	83fb      	strh	r3, [r7, #30]
			break;
 8000bac:	e04e      	b.n	8000c4c <bit_proces+0x238>

		case T_TRIGGER:
			temp = t_trigger_update(root, root_n, (T_TR*)op_arr[i].data, state);
 8000bae:	8b7a      	ldrh	r2, [r7, #26]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	461a      	mov	r2, r3
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	689a      	ldr	r2, [r3, #8]
 8000bc0:	8bbb      	ldrh	r3, [r7, #28]
 8000bc2:	8979      	ldrh	r1, [r7, #10]
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f7ff fcf3 	bl	80005b0 <t_trigger_update>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	83fb      	strh	r3, [r7, #30]
			break;
 8000bce:	e03d      	b.n	8000c4c <bit_proces+0x238>

		case RS_TRIGGER:
			temp = rs_trigger_update(root, root_n, (RS_TR*)op_arr[i].data, state);
 8000bd0:	8b7a      	ldrh	r2, [r7, #26]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	461a      	mov	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	4413      	add	r3, r2
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	8bbb      	ldrh	r3, [r7, #28]
 8000be4:	8979      	ldrh	r1, [r7, #10]
 8000be6:	68f8      	ldr	r0, [r7, #12]
 8000be8:	f7ff fd3f 	bl	800066a <rs_trigger_update>
 8000bec:	4603      	mov	r3, r0
 8000bee:	83fb      	strh	r3, [r7, #30]
			break;
 8000bf0:	e02c      	b.n	8000c4c <bit_proces+0x238>

		case SENSOR:
			temp = Sensor_CheckValue(op_arr[i].addr, op_arr[i].trigger_value);
 8000bf2:	8b7a      	ldrh	r2, [r7, #26]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	4413      	add	r3, r2
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	b298      	uxth	r0, r3
 8000c06:	8b7a      	ldrh	r2, [r7, #26]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	461a      	mov	r2, r3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	4413      	add	r3, r2
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f007 f8f5 	bl	8007e08 <Sensor_CheckValue>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	83fb      	strh	r3, [r7, #30]
			break;
 8000c22:	e013      	b.n	8000c4c <bit_proces+0x238>

		case STATE:
			update_type_state(root, root_n, curr_root_n);
 8000c24:	893a      	ldrh	r2, [r7, #8]
 8000c26:	897b      	ldrh	r3, [r7, #10]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f7ff fe9a 	bl	8000964 <update_type_state>
			temp = op_arr[i].trigger_value;
 8000c30:	8b7a      	ldrh	r2, [r7, #26]
 8000c32:	4613      	mov	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	4413      	add	r3, r2
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	83fb      	strh	r3, [r7, #30]
			break;
 8000c44:	e002      	b.n	8000c4c <bit_proces+0x238>

		default:
			temp = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	83fb      	strh	r3, [r7, #30]
			break;
 8000c4a:	bf00      	nop
		}

		if(i == 0) {
 8000c4c:	8b7b      	ldrh	r3, [r7, #26]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <bit_proces+0x244>
			state = temp;
 8000c52:	8bfb      	ldrh	r3, [r7, #30]
 8000c54:	83bb      	strh	r3, [r7, #28]
			continue;
 8000c56:	e052      	b.n	8000cfe <bit_proces+0x2ea>
		}

		//OPETATIONS
		switch (op_arr[i].log)
 8000c58:	8b7a      	ldrh	r2, [r7, #26]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	461a      	mov	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	4413      	add	r3, r2
 8000c68:	7c1b      	ldrb	r3, [r3, #16]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	2b07      	cmp	r3, #7
 8000c6e:	d845      	bhi.n	8000cfc <bit_proces+0x2e8>
 8000c70:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <bit_proces+0x264>)
 8000c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c76:	bf00      	nop
 8000c78:	08000c99 	.word	0x08000c99
 8000c7c:	08000c9f 	.word	0x08000c9f
 8000c80:	08000ca9 	.word	0x08000ca9
 8000c84:	08000cb3 	.word	0x08000cb3
 8000c88:	08000cbd 	.word	0x08000cbd
 8000c8c:	08000ccf 	.word	0x08000ccf
 8000c90:	08000ce1 	.word	0x08000ce1
 8000c94:	08000cf3 	.word	0x08000cf3
		{
		case FIRST:
			state = temp;
 8000c98:	8bfb      	ldrh	r3, [r7, #30]
 8000c9a:	83bb      	strh	r3, [r7, #28]
			break;
 8000c9c:	e02f      	b.n	8000cfe <bit_proces+0x2ea>

		case OR:
			state |= temp;
 8000c9e:	8bba      	ldrh	r2, [r7, #28]
 8000ca0:	8bfb      	ldrh	r3, [r7, #30]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	83bb      	strh	r3, [r7, #28]
			break;
 8000ca6:	e02a      	b.n	8000cfe <bit_proces+0x2ea>

		case AND:
			state &= temp;
 8000ca8:	8bba      	ldrh	r2, [r7, #28]
 8000caa:	8bfb      	ldrh	r3, [r7, #30]
 8000cac:	4013      	ands	r3, r2
 8000cae:	83bb      	strh	r3, [r7, #28]
			break;
 8000cb0:	e025      	b.n	8000cfe <bit_proces+0x2ea>

		case XOR:
			state ^= temp;
 8000cb2:	8bba      	ldrh	r2, [r7, #28]
 8000cb4:	8bfb      	ldrh	r3, [r7, #30]
 8000cb6:	4053      	eors	r3, r2
 8000cb8:	83bb      	strh	r3, [r7, #28]
			break;
 8000cba:	e020      	b.n	8000cfe <bit_proces+0x2ea>

		case NOR:
			state |= temp;
 8000cbc:	8bba      	ldrh	r2, [r7, #28]
 8000cbe:	8bfb      	ldrh	r3, [r7, #30]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	83bb      	strh	r3, [r7, #28]
			state ^= 1;
 8000cc4:	8bbb      	ldrh	r3, [r7, #28]
 8000cc6:	f083 0301 	eor.w	r3, r3, #1
 8000cca:	83bb      	strh	r3, [r7, #28]
			break;
 8000ccc:	e017      	b.n	8000cfe <bit_proces+0x2ea>

		case NAND:
			state &= temp;
 8000cce:	8bba      	ldrh	r2, [r7, #28]
 8000cd0:	8bfb      	ldrh	r3, [r7, #30]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	83bb      	strh	r3, [r7, #28]
			state ^= 1;
 8000cd6:	8bbb      	ldrh	r3, [r7, #28]
 8000cd8:	f083 0301 	eor.w	r3, r3, #1
 8000cdc:	83bb      	strh	r3, [r7, #28]
			break;
 8000cde:	e00e      	b.n	8000cfe <bit_proces+0x2ea>

		case XNOR:
			state ^= temp;
 8000ce0:	8bba      	ldrh	r2, [r7, #28]
 8000ce2:	8bfb      	ldrh	r3, [r7, #30]
 8000ce4:	4053      	eors	r3, r2
 8000ce6:	83bb      	strh	r3, [r7, #28]
			state ^= 1;
 8000ce8:	8bbb      	ldrh	r3, [r7, #28]
 8000cea:	f083 0301 	eor.w	r3, r3, #1
 8000cee:	83bb      	strh	r3, [r7, #28]
			break;
 8000cf0:	e005      	b.n	8000cfe <bit_proces+0x2ea>

		case NOT:
			state ^= 1;
 8000cf2:	8bbb      	ldrh	r3, [r7, #28]
 8000cf4:	f083 0301 	eor.w	r3, r3, #1
 8000cf8:	83bb      	strh	r3, [r7, #28]
			break;
 8000cfa:	e000      	b.n	8000cfe <bit_proces+0x2ea>

		default:
			break;
 8000cfc:	bf00      	nop
	for (uint16_t i = 0; i < op_n; ++i) {
 8000cfe:	8b7b      	ldrh	r3, [r7, #26]
 8000d00:	3301      	adds	r3, #1
 8000d02:	837b      	strh	r3, [r7, #26]
 8000d04:	8b7a      	ldrh	r2, [r7, #26]
 8000d06:	8a7b      	ldrh	r3, [r7, #18]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	f4ff aea9 	bcc.w	8000a60 <bit_proces+0x4c>
		}

	}
	return state;
 8000d0e:	8bbb      	ldrh	r3, [r7, #28]
 8000d10:	b2db      	uxtb	r3, r3
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3720      	adds	r7, #32
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop

08000d1c <start_bit_engine>:

uint8_t start_bit_engine(OP_ROOT* root, uint16_t root_n, uint16_t out)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	803b      	strh	r3, [r7, #0]
	if (root == NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <start_bit_engine+0x1a>
	{
		return 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e017      	b.n	8000d66 <start_bit_engine+0x4a>
	}

	for (int32_t i = 0; i < root_n; ++i)
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	e00f      	b.n	8000d5c <start_bit_engine+0x40>
	{
		root[i].result = bit_proces(root, root_n, i, out);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	18d4      	adds	r4, r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	883b      	ldrh	r3, [r7, #0]
 8000d4a:	8879      	ldrh	r1, [r7, #2]
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff fe61 	bl	8000a14 <bit_proces>
 8000d52:	4603      	mov	r3, r0
 8000d54:	7323      	strb	r3, [r4, #12]
	for (int32_t i = 0; i < root_n; ++i)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	887a      	ldrh	r2, [r7, #2]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dceb      	bgt.n	8000d3c <start_bit_engine+0x20>
	}

	return 1;
 8000d64:	2301      	movs	r3, #1
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd90      	pop	{r4, r7, pc}

08000d6e <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8000d6e:	b480      	push	{r7}
 8000d70:	b087      	sub	sp, #28
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d301      	bcc.n	8000d88 <jsmn_alloc_token+0x1a>
    return NULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	e014      	b.n	8000db2 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	1c59      	adds	r1, r3, #1
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	6051      	str	r1, [r2, #4]
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	4413      	add	r3, r2
 8000d98:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8000db0:	697b      	ldr	r3, [r7, #20]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	371c      	adds	r7, #28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8000dbe:	b480      	push	{r7}
 8000dc0:	b085      	sub	sp, #20
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	7afa      	ldrb	r2, [r7, #11]
 8000dd2:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	605a      	str	r2, [r3, #4]
  token->end = end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	60f8      	str	r0, [r7, #12]
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000e06:	e034      	b.n	8000e72 <jsmn_parse_primitive+0x80>
    switch (js[parser->pos]) {
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	4413      	add	r3, r2
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b20      	cmp	r3, #32
 8000e14:	d03a      	beq.n	8000e8c <jsmn_parse_primitive+0x9a>
 8000e16:	2b20      	cmp	r3, #32
 8000e18:	dc06      	bgt.n	8000e28 <jsmn_parse_primitive+0x36>
 8000e1a:	2b09      	cmp	r3, #9
 8000e1c:	db0f      	blt.n	8000e3e <jsmn_parse_primitive+0x4c>
 8000e1e:	2b0a      	cmp	r3, #10
 8000e20:	dd34      	ble.n	8000e8c <jsmn_parse_primitive+0x9a>
 8000e22:	2b0d      	cmp	r3, #13
 8000e24:	d032      	beq.n	8000e8c <jsmn_parse_primitive+0x9a>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8000e26:	e00a      	b.n	8000e3e <jsmn_parse_primitive+0x4c>
    switch (js[parser->pos]) {
 8000e28:	2b3a      	cmp	r3, #58	; 0x3a
 8000e2a:	d02f      	beq.n	8000e8c <jsmn_parse_primitive+0x9a>
 8000e2c:	2b3a      	cmp	r3, #58	; 0x3a
 8000e2e:	dc02      	bgt.n	8000e36 <jsmn_parse_primitive+0x44>
 8000e30:	2b2c      	cmp	r3, #44	; 0x2c
 8000e32:	d02b      	beq.n	8000e8c <jsmn_parse_primitive+0x9a>
      break;
 8000e34:	e003      	b.n	8000e3e <jsmn_parse_primitive+0x4c>
    switch (js[parser->pos]) {
 8000e36:	2b5d      	cmp	r3, #93	; 0x5d
 8000e38:	d028      	beq.n	8000e8c <jsmn_parse_primitive+0x9a>
 8000e3a:	2b7d      	cmp	r3, #125	; 0x7d
 8000e3c:	d026      	beq.n	8000e8c <jsmn_parse_primitive+0x9a>
      break;
 8000e3e:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	4413      	add	r3, r2
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b1f      	cmp	r3, #31
 8000e4c:	d906      	bls.n	8000e5c <jsmn_parse_primitive+0x6a>
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	4413      	add	r3, r2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b7e      	cmp	r3, #126	; 0x7e
 8000e5a:	d905      	bls.n	8000e68 <jsmn_parse_primitive+0x76>
      parser->pos = start;
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8000e62:	f06f 0301 	mvn.w	r3, #1
 8000e66:	e038      	b.n	8000eda <jsmn_parse_primitive+0xe8>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d208      	bcs.n	8000e8e <jsmn_parse_primitive+0x9c>
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68ba      	ldr	r2, [r7, #8]
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1be      	bne.n	8000e08 <jsmn_parse_primitive+0x16>
 8000e8a:	e000      	b.n	8000e8e <jsmn_parse_primitive+0x9c>
      goto found;
 8000e8c:	bf00      	nop
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
  if (tokens == NULL) {
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d106      	bne.n	8000ea2 <jsmn_parse_primitive+0xb0>
    parser->pos--;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	1e5a      	subs	r2, r3, #1
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	601a      	str	r2, [r3, #0]
    return 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e01b      	b.n	8000eda <jsmn_parse_primitive+0xe8>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000ea2:	6a3a      	ldr	r2, [r7, #32]
 8000ea4:	6839      	ldr	r1, [r7, #0]
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f7ff ff61 	bl	8000d6e <jsmn_alloc_token>
 8000eac:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d105      	bne.n	8000ec0 <jsmn_parse_primitive+0xce>
    parser->pos = start;
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	e00c      	b.n	8000eda <jsmn_parse_primitive+0xe8>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	6938      	ldr	r0, [r7, #16]
 8000eca:	f7ff ff78 	bl	8000dbe <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	1e5a      	subs	r2, r3, #1
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	601a      	str	r2, [r3, #0]
  return 0;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	61bb      	str	r3, [r7, #24]

  parser->pos++;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	601a      	str	r2, [r3, #0]

  /* Skip starting quote */
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000f02:	e14c      	b.n	800119e <jsmn_parse_string+0x2ba>
    char c = js[parser->pos];
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	2b22      	cmp	r3, #34	; 0x22
 8000f14:	d11d      	bne.n	8000f52 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <jsmn_parse_string+0x3c>
        return 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e150      	b.n	80011c2 <jsmn_parse_string+0x2de>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f22:	6839      	ldr	r1, [r7, #0]
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f7ff ff22 	bl	8000d6e <jsmn_alloc_token>
 8000f2a:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d105      	bne.n	8000f3e <jsmn_parse_string+0x5a>
        parser->pos = start;
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	e141      	b.n	80011c2 <jsmn_parse_string+0x2de>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2103      	movs	r1, #3
 8000f48:	6938      	ldr	r0, [r7, #16]
 8000f4a:	f7ff ff38 	bl	8000dbe <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e137      	b.n	80011c2 <jsmn_parse_string+0x2de>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8000f52:	7dfb      	ldrb	r3, [r7, #23]
 8000f54:	2b5c      	cmp	r3, #92	; 0x5c
 8000f56:	f040 811d 	bne.w	8001194 <jsmn_parse_string+0x2b0>
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	f080 8116 	bcs.w	8001194 <jsmn_parse_string+0x2b0>
      int i;
      parser->pos++;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	3b22      	subs	r3, #34	; 0x22
 8000f7e:	2b53      	cmp	r3, #83	; 0x53
 8000f80:	f200 8101 	bhi.w	8001186 <jsmn_parse_string+0x2a2>
 8000f84:	a201      	add	r2, pc, #4	; (adr r2, 8000f8c <jsmn_parse_string+0xa8>)
 8000f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8a:	bf00      	nop
 8000f8c:	08001193 	.word	0x08001193
 8000f90:	08001187 	.word	0x08001187
 8000f94:	08001187 	.word	0x08001187
 8000f98:	08001187 	.word	0x08001187
 8000f9c:	08001187 	.word	0x08001187
 8000fa0:	08001187 	.word	0x08001187
 8000fa4:	08001187 	.word	0x08001187
 8000fa8:	08001187 	.word	0x08001187
 8000fac:	08001187 	.word	0x08001187
 8000fb0:	08001187 	.word	0x08001187
 8000fb4:	08001187 	.word	0x08001187
 8000fb8:	08001187 	.word	0x08001187
 8000fbc:	08001187 	.word	0x08001187
 8000fc0:	08001193 	.word	0x08001193
 8000fc4:	08001187 	.word	0x08001187
 8000fc8:	08001187 	.word	0x08001187
 8000fcc:	08001187 	.word	0x08001187
 8000fd0:	08001187 	.word	0x08001187
 8000fd4:	08001187 	.word	0x08001187
 8000fd8:	08001187 	.word	0x08001187
 8000fdc:	08001187 	.word	0x08001187
 8000fe0:	08001187 	.word	0x08001187
 8000fe4:	08001187 	.word	0x08001187
 8000fe8:	08001187 	.word	0x08001187
 8000fec:	08001187 	.word	0x08001187
 8000ff0:	08001187 	.word	0x08001187
 8000ff4:	08001187 	.word	0x08001187
 8000ff8:	08001187 	.word	0x08001187
 8000ffc:	08001187 	.word	0x08001187
 8001000:	08001187 	.word	0x08001187
 8001004:	08001187 	.word	0x08001187
 8001008:	08001187 	.word	0x08001187
 800100c:	08001187 	.word	0x08001187
 8001010:	08001187 	.word	0x08001187
 8001014:	08001187 	.word	0x08001187
 8001018:	08001187 	.word	0x08001187
 800101c:	08001187 	.word	0x08001187
 8001020:	08001187 	.word	0x08001187
 8001024:	08001187 	.word	0x08001187
 8001028:	08001187 	.word	0x08001187
 800102c:	08001187 	.word	0x08001187
 8001030:	08001187 	.word	0x08001187
 8001034:	08001187 	.word	0x08001187
 8001038:	08001187 	.word	0x08001187
 800103c:	08001187 	.word	0x08001187
 8001040:	08001187 	.word	0x08001187
 8001044:	08001187 	.word	0x08001187
 8001048:	08001187 	.word	0x08001187
 800104c:	08001187 	.word	0x08001187
 8001050:	08001187 	.word	0x08001187
 8001054:	08001187 	.word	0x08001187
 8001058:	08001187 	.word	0x08001187
 800105c:	08001187 	.word	0x08001187
 8001060:	08001187 	.word	0x08001187
 8001064:	08001187 	.word	0x08001187
 8001068:	08001187 	.word	0x08001187
 800106c:	08001187 	.word	0x08001187
 8001070:	08001187 	.word	0x08001187
 8001074:	08001193 	.word	0x08001193
 8001078:	08001187 	.word	0x08001187
 800107c:	08001187 	.word	0x08001187
 8001080:	08001187 	.word	0x08001187
 8001084:	08001187 	.word	0x08001187
 8001088:	08001187 	.word	0x08001187
 800108c:	08001193 	.word	0x08001193
 8001090:	08001187 	.word	0x08001187
 8001094:	08001187 	.word	0x08001187
 8001098:	08001187 	.word	0x08001187
 800109c:	08001193 	.word	0x08001193
 80010a0:	08001187 	.word	0x08001187
 80010a4:	08001187 	.word	0x08001187
 80010a8:	08001187 	.word	0x08001187
 80010ac:	08001187 	.word	0x08001187
 80010b0:	08001187 	.word	0x08001187
 80010b4:	08001187 	.word	0x08001187
 80010b8:	08001187 	.word	0x08001187
 80010bc:	08001193 	.word	0x08001193
 80010c0:	08001187 	.word	0x08001187
 80010c4:	08001187 	.word	0x08001187
 80010c8:	08001187 	.word	0x08001187
 80010cc:	08001193 	.word	0x08001193
 80010d0:	08001187 	.word	0x08001187
 80010d4:	08001193 	.word	0x08001193
 80010d8:	080010dd 	.word	0x080010dd
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	e037      	b.n	800115c <jsmn_parse_string+0x278>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	4413      	add	r3, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b2f      	cmp	r3, #47	; 0x2f
 80010f8:	d906      	bls.n	8001108 <jsmn_parse_string+0x224>
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b39      	cmp	r3, #57	; 0x39
 8001106:	d921      	bls.n	800114c <jsmn_parse_string+0x268>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	4413      	add	r3, r2
 8001110:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001112:	2b40      	cmp	r3, #64	; 0x40
 8001114:	d906      	bls.n	8001124 <jsmn_parse_string+0x240>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b46      	cmp	r3, #70	; 0x46
 8001122:	d913      	bls.n	800114c <jsmn_parse_string+0x268>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 800112e:	2b60      	cmp	r3, #96	; 0x60
 8001130:	d906      	bls.n	8001140 <jsmn_parse_string+0x25c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b66      	cmp	r3, #102	; 0x66
 800113e:	d905      	bls.n	800114c <jsmn_parse_string+0x268>
            parser->pos = start;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8001146:	f06f 0301 	mvn.w	r3, #1
 800114a:	e03a      	b.n	80011c2 <jsmn_parse_string+0x2de>
          }
          parser->pos++;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	601a      	str	r2, [r3, #0]
             i++) {
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b03      	cmp	r3, #3
 8001160:	dc0b      	bgt.n	800117a <jsmn_parse_string+0x296>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	429a      	cmp	r2, r3
 800116a:	d206      	bcs.n	800117a <jsmn_parse_string+0x296>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1b8      	bne.n	80010ec <jsmn_parse_string+0x208>
        }
        parser->pos--;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	1e5a      	subs	r2, r3, #1
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	601a      	str	r2, [r3, #0]
        break;
 8001184:	e006      	b.n	8001194 <jsmn_parse_string+0x2b0>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 800118c:	f06f 0301 	mvn.w	r3, #1
 8001190:	e017      	b.n	80011c2 <jsmn_parse_string+0x2de>
        break;
 8001192:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <jsmn_parse_string+0x2d4>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f47f aea6 	bne.w	8000f04 <jsmn_parse_string+0x20>
      }
    }
  }
  parser->pos = start;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 80011be:	f06f 0302 	mvn.w	r3, #2
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop

080011cc <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	; 0x30
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80011e0:	e15f      	b.n	80014a2 <jsmn_parse+0x2d6>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 80011ee:	7ffb      	ldrb	r3, [r7, #31]
 80011f0:	2b2c      	cmp	r3, #44	; 0x2c
 80011f2:	f000 80dd 	beq.w	80013b0 <jsmn_parse+0x1e4>
 80011f6:	2b2c      	cmp	r3, #44	; 0x2c
 80011f8:	dc10      	bgt.n	800121c <jsmn_parse+0x50>
 80011fa:	2b0d      	cmp	r3, #13
 80011fc:	f000 8141 	beq.w	8001482 <jsmn_parse+0x2b6>
 8001200:	2b0d      	cmp	r3, #13
 8001202:	dc04      	bgt.n	800120e <jsmn_parse+0x42>
 8001204:	3b09      	subs	r3, #9
 8001206:	2b01      	cmp	r3, #1
 8001208:	f200 8119 	bhi.w	800143e <jsmn_parse+0x272>
      break;
    case '\t':
    case '\r':
    case '\n':
    case ' ':
      break;
 800120c:	e139      	b.n	8001482 <jsmn_parse+0x2b6>
    switch (c) {
 800120e:	2b20      	cmp	r3, #32
 8001210:	f000 8137 	beq.w	8001482 <jsmn_parse+0x2b6>
 8001214:	2b22      	cmp	r3, #34	; 0x22
 8001216:	f000 80a1 	beq.w	800135c <jsmn_parse+0x190>
 800121a:	e110      	b.n	800143e <jsmn_parse+0x272>
 800121c:	2b5d      	cmp	r3, #93	; 0x5d
 800121e:	d043      	beq.n	80012a8 <jsmn_parse+0xdc>
 8001220:	2b5d      	cmp	r3, #93	; 0x5d
 8001222:	dc05      	bgt.n	8001230 <jsmn_parse+0x64>
 8001224:	2b3a      	cmp	r3, #58	; 0x3a
 8001226:	f000 80bc 	beq.w	80013a2 <jsmn_parse+0x1d6>
 800122a:	2b5b      	cmp	r3, #91	; 0x5b
 800122c:	d005      	beq.n	800123a <jsmn_parse+0x6e>
 800122e:	e106      	b.n	800143e <jsmn_parse+0x272>
 8001230:	2b7b      	cmp	r3, #123	; 0x7b
 8001232:	d002      	beq.n	800123a <jsmn_parse+0x6e>
 8001234:	2b7d      	cmp	r3, #125	; 0x7d
 8001236:	d037      	beq.n	80012a8 <jsmn_parse+0xdc>
 8001238:	e101      	b.n	800143e <jsmn_parse+0x272>
      count++;
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	3301      	adds	r3, #1
 800123e:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 811f 	beq.w	8001486 <jsmn_parse+0x2ba>
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800124a:	6839      	ldr	r1, [r7, #0]
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f7ff fd8e 	bl	8000d6e <jsmn_alloc_token>
 8001252:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d102      	bne.n	8001260 <jsmn_parse+0x94>
        return JSMN_ERROR_NOMEM;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e14f      	b.n	8001500 <jsmn_parse+0x334>
      if (parser->toksuper != -1) {
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d00a      	beq.n	8001280 <jsmn_parse+0xb4>
        jsmntok_t *t = &tokens[parser->toksuper];
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	4413      	add	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        t->size++;
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	60da      	str	r2, [r3, #12]
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8001280:	7ffb      	ldrb	r3, [r7, #31]
 8001282:	2b7b      	cmp	r3, #123	; 0x7b
 8001284:	d101      	bne.n	800128a <jsmn_parse+0xbe>
 8001286:	2201      	movs	r2, #1
 8001288:	e000      	b.n	800128c <jsmn_parse+0xc0>
 800128a:	2202      	movs	r2, #2
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	461a      	mov	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	609a      	str	r2, [r3, #8]
      break;
 80012a6:	e0f7      	b.n	8001498 <jsmn_parse+0x2cc>
      if (tokens == NULL) {
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80ed 	beq.w	800148a <jsmn_parse+0x2be>
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80012b0:	7ffb      	ldrb	r3, [r7, #31]
 80012b2:	2b7d      	cmp	r3, #125	; 0x7d
 80012b4:	d101      	bne.n	80012ba <jsmn_parse+0xee>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <jsmn_parse+0xf0>
 80012ba:	2302      	movs	r3, #2
 80012bc:	77bb      	strb	r3, [r7, #30]
      for (i = parser->toknext - 1; i >= 0; i--) {
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
 80012c6:	e024      	b.n	8001312 <jsmn_parse+0x146>
        token = &tokens[i];
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012da:	d017      	beq.n	800130c <jsmn_parse+0x140>
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d112      	bne.n	800130c <jsmn_parse+0x140>
          if (token->type != type) {
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	7fba      	ldrb	r2, [r7, #30]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d002      	beq.n	80012f6 <jsmn_parse+0x12a>
            return JSMN_ERROR_INVAL;
 80012f0:	f06f 0301 	mvn.w	r3, #1
 80012f4:	e104      	b.n	8001500 <jsmn_parse+0x334>
          parser->toksuper = -1;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	461a      	mov	r2, r3
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	609a      	str	r2, [r3, #8]
          break;
 800130a:	e005      	b.n	8001318 <jsmn_parse+0x14c>
      for (i = parser->toknext - 1; i >= 0; i--) {
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	3b01      	subs	r3, #1
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	2b00      	cmp	r3, #0
 8001316:	dad7      	bge.n	80012c8 <jsmn_parse+0xfc>
      if (i == -1) {
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131e:	d119      	bne.n	8001354 <jsmn_parse+0x188>
        return JSMN_ERROR_INVAL;
 8001320:	f06f 0301 	mvn.w	r3, #1
 8001324:	e0ec      	b.n	8001500 <jsmn_parse+0x334>
        token = &tokens[i];
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	4413      	add	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d009      	beq.n	800134e <jsmn_parse+0x182>
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001342:	d104      	bne.n	800134e <jsmn_parse+0x182>
          parser->toksuper = i;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001348:	609a      	str	r2, [r3, #8]
          break;
 800134a:	bf00      	nop
      break;
 800134c:	e0a4      	b.n	8001498 <jsmn_parse+0x2cc>
      for (; i >= 0; i--) {
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	3b01      	subs	r3, #1
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	2b00      	cmp	r3, #0
 8001358:	dae5      	bge.n	8001326 <jsmn_parse+0x15a>
      break;
 800135a:	e09d      	b.n	8001498 <jsmn_parse+0x2cc>
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 800135c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f7ff fdbc 	bl	8000ee4 <jsmn_parse_string>
 800136c:	6178      	str	r0, [r7, #20]
      if (r < 0) {
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2b00      	cmp	r3, #0
 8001372:	da01      	bge.n	8001378 <jsmn_parse+0x1ac>
        return r;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	e0c3      	b.n	8001500 <jsmn_parse+0x334>
      count++;
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	3301      	adds	r3, #1
 800137c:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001386:	f000 8082 	beq.w	800148e <jsmn_parse+0x2c2>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d07e      	beq.n	800148e <jsmn_parse+0x2c2>
        tokens[parser->toksuper].size++;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	4413      	add	r3, r2
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	3201      	adds	r2, #1
 800139e:	60da      	str	r2, [r3, #12]
      break;
 80013a0:	e075      	b.n	800148e <jsmn_parse+0x2c2>
    case ':':
      parser->toksuper = parser->toknext - 1;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	461a      	mov	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	609a      	str	r2, [r3, #8]
      break;
 80013ae:	e073      	b.n	8001498 <jsmn_parse+0x2cc>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d06d      	beq.n	8001492 <jsmn_parse+0x2c6>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013be:	d068      	beq.n	8001492 <jsmn_parse+0x2c6>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d060      	beq.n	8001492 <jsmn_parse+0x2c6>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d058      	beq.n	8001492 <jsmn_parse+0x2c6>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
 80013e8:	e025      	b.n	8001436 <jsmn_parse+0x26a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d006      	beq.n	8001406 <jsmn_parse+0x23a>
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d114      	bne.n	8001430 <jsmn_parse+0x264>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	4413      	add	r3, r2
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d00c      	beq.n	8001430 <jsmn_parse+0x264>
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	4413      	add	r3, r2
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001424:	d104      	bne.n	8001430 <jsmn_parse+0x264>
              parser->toksuper = i;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142a:	609a      	str	r2, [r3, #8]
              break;
 800142c:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 800142e:	e030      	b.n	8001492 <jsmn_parse+0x2c6>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	3b01      	subs	r3, #1
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	2b00      	cmp	r3, #0
 800143a:	dad6      	bge.n	80013ea <jsmn_parse+0x21e>
      break;
 800143c:	e029      	b.n	8001492 <jsmn_parse+0x2c6>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 800143e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	68b9      	ldr	r1, [r7, #8]
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f7ff fcd2 	bl	8000df2 <jsmn_parse_primitive>
 800144e:	6178      	str	r0, [r7, #20]
      if (r < 0) {
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2b00      	cmp	r3, #0
 8001454:	da01      	bge.n	800145a <jsmn_parse+0x28e>
        return r;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	e052      	b.n	8001500 <jsmn_parse+0x334>
      }
      count++;
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	3301      	adds	r3, #1
 800145e:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d015      	beq.n	8001496 <jsmn_parse+0x2ca>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d012      	beq.n	8001496 <jsmn_parse+0x2ca>
        tokens[parser->toksuper].size++;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	4413      	add	r3, r2
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	3201      	adds	r2, #1
 800147e:	60da      	str	r2, [r3, #12]
      }
      break;
 8001480:	e009      	b.n	8001496 <jsmn_parse+0x2ca>
      break;
 8001482:	bf00      	nop
 8001484:	e008      	b.n	8001498 <jsmn_parse+0x2cc>
        break;
 8001486:	bf00      	nop
 8001488:	e006      	b.n	8001498 <jsmn_parse+0x2cc>
        break;
 800148a:	bf00      	nop
 800148c:	e004      	b.n	8001498 <jsmn_parse+0x2cc>
      break;
 800148e:	bf00      	nop
 8001490:	e002      	b.n	8001498 <jsmn_parse+0x2cc>
      break;
 8001492:	bf00      	nop
 8001494:	e000      	b.n	8001498 <jsmn_parse+0x2cc>
      break;
 8001496:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d207      	bcs.n	80014bc <jsmn_parse+0x2f0>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	4413      	add	r3, r2
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f47f ae93 	bne.w	80011e2 <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d01d      	beq.n	80014fe <jsmn_parse+0x332>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ca:	e015      	b.n	80014f8 <jsmn_parse+0x32c>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014da:	d00a      	beq.n	80014f2 <jsmn_parse+0x326>
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ea:	d102      	bne.n	80014f2 <jsmn_parse+0x326>
        return JSMN_ERROR_PART;
 80014ec:	f06f 0302 	mvn.w	r3, #2
 80014f0:	e006      	b.n	8001500 <jsmn_parse+0x334>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	3b01      	subs	r3, #1
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	dae6      	bge.n	80014cc <jsmn_parse+0x300>
      }
    }
  }

  return count;
 80014fe:	6a3b      	ldr	r3, [r7, #32]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3728      	adds	r7, #40	; 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f04f 32ff 	mov.w	r2, #4294967295
 8001522:	609a      	str	r2, [r3, #8]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <jsoneq>:

#include <string.h>
#include <stdlib.h>
#include <ctype.h>

static int jsoneq(const char* json, jsmntok_t* tok, const char* s) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b03      	cmp	r3, #3
 8001542:	d11e      	bne.n	8001582 <jsoneq+0x52>
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7fe fe4d 	bl	80001e4 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	4619      	mov	r1, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	4299      	cmp	r1, r3
 800155a:	d112      	bne.n	8001582 <jsoneq+0x52>
		strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	461a      	mov	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1898      	adds	r0, r3, r2
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	461a      	mov	r2, r3
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	f008 fcbe 	bl	8009ef4 <strncmp>
 8001578:	4603      	mov	r3, r0
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <jsoneq+0x52>
		return 0;
 800157e:	2300      	movs	r3, #0
 8001580:	e001      	b.n	8001586 <jsoneq+0x56>
	}
	return -1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <json_get_op>:

int json_get_op(const char* input, struct OUTPUTS* out)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	f6ad 0d64 	subw	sp, sp, #2148	; 0x864
 8001596:	af02      	add	r7, sp, #8
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	6018      	str	r0, [r3, #0]
 800159c:	463b      	mov	r3, r7
 800159e:	6019      	str	r1, [r3, #0]
	int counter = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
	int tm_counter = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
	int tt_counter = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
	int rst_counter = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
	int cntr_counter = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
	int dl_counter = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
	int root_counter = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
	int i;
	int r;
	jsmn_parser p;
	jsmntok_t t[128];

	jsmn_init(&p);
 80015ca:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff9a 	bl	8001508 <jsmn_init>
	r = jsmn_parse(&p, input, strlen(input), t, sizeof(t) / sizeof(t[0]));
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	f7fe fe04 	bl	80001e4 <strlen>
 80015dc:	4604      	mov	r4, r0
 80015de:	f107 0210 	add.w	r2, r7, #16
 80015e2:	1d39      	adds	r1, r7, #4
 80015e4:	f507 6001 	add.w	r0, r7, #2064	; 0x810
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	4613      	mov	r3, r2
 80015ee:	4622      	mov	r2, r4
 80015f0:	6809      	ldr	r1, [r1, #0]
 80015f2:	f7ff fdeb 	bl	80011cc <jsmn_parse>
 80015f6:	f8c7 0824 	str.w	r0, [r7, #2084]	; 0x824

	if (r < 1 || t[0].type != JSMN_OBJECT)
 80015fa:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80015fe:	2b00      	cmp	r3, #0
 8001600:	dd04      	ble.n	800160c <json_get_op+0x7c>
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d002      	beq.n	8001612 <json_get_op+0x82>
	{
		return 0;
 800160c:	2300      	movs	r3, #0
 800160e:	f000 be5c 	b.w	80022ca <json_get_op+0xd3a>
	}

	for (i = 1; i < r; i++) {
 8001612:	2301      	movs	r3, #1
 8001614:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
 8001618:	f000 be4e 	b.w	80022b8 <json_get_op+0xd28>

		if (jsoneq(input, &t[i], "OUT") == 0)
 800161c:	f107 0210 	add.w	r2, r7, #16
 8001620:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	18d1      	adds	r1, r2, r3
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4ac7      	ldr	r2, [pc, #796]	; (8001948 <json_get_op+0x3b8>)
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	f7ff ff7f 	bl	8001530 <jsoneq>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d106      	bne.n	8001646 <json_get_op+0xb6>
		{
			i++;
 8001638:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 800163c:	3301      	adds	r3, #1
 800163e:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
 8001642:	f000 be34 	b.w	80022ae <json_get_op+0xd1e>
		}
		else
		{
			if (t[i + 1].type != JSMN_ARRAY)
 8001646:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 800164a:	3301      	adds	r3, #1
 800164c:	f107 0210 	add.w	r2, r7, #16
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	4413      	add	r3, r2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b02      	cmp	r3, #2
 8001658:	f040 8628 	bne.w	80022ac <json_get_op+0xd1c>
			{
				continue;
			}

			//add new branch
			memcpy(out->root_par[root_counter].name, input + t[i].start, t[i].end - t[i].start);
 800165c:	463a      	mov	r2, r7
 800165e:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001662:	33d1      	adds	r3, #209	; 0xd1
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	4413      	add	r3, r2
 800166a:	1d98      	adds	r0, r3, #6
 800166c:	f107 0210 	add.w	r2, r7, #16
 8001670:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	4413      	add	r3, r2
 8001678:	3304      	adds	r3, #4
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	189c      	adds	r4, r3, r2
 8001684:	f107 0210 	add.w	r2, r7, #16
 8001688:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	4413      	add	r3, r2
 8001690:	3308      	adds	r3, #8
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	f107 0110 	add.w	r1, r7, #16
 8001698:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	440b      	add	r3, r1
 80016a0:	3304      	adds	r3, #4
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	461a      	mov	r2, r3
 80016a8:	4621      	mov	r1, r4
 80016aa:	f008 f97a 	bl	80099a2 <memcpy>
			out->root_par[root_counter].operation = NULL;
 80016ae:	463b      	mov	r3, r7
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80016b6:	33d1      	adds	r3, #209	; 0xd1
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	4413      	add	r3, r2
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
			out->root_par[root_counter].operation_n = 0;
 80016c0:	463b      	mov	r3, r7
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80016c8:	33d1      	adds	r3, #209	; 0xd1
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	4413      	add	r3, r2
 80016ce:	3304      	adds	r3, #4
 80016d0:	2200      	movs	r2, #0
 80016d2:	801a      	strh	r2, [r3, #0]
			out->root_par[root_counter].id = root_counter;
 80016d4:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80016d8:	b2d9      	uxtb	r1, r3
 80016da:	463b      	mov	r3, r7
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4413      	add	r3, r2
 80016e6:	f603 531b 	addw	r3, r3, #3355	; 0xd1b
 80016ea:	460a      	mov	r2, r1
 80016ec:	701a      	strb	r2, [r3, #0]

			//parse branch
			for (int j = 0; j < t[i + 1].size; j++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 80016f4:	f000 bd98 	b.w	8002228 <json_get_op+0xc98>
			{
				out->root_par[root_counter].operation_n++;
 80016f8:	463b      	mov	r3, r7
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001700:	33d1      	adds	r3, #209	; 0xd1
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	4413      	add	r3, r2
 8001706:	3304      	adds	r3, #4
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	b299      	uxth	r1, r3
 800170e:	463b      	mov	r3, r7
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001716:	33d1      	adds	r3, #209	; 0xd1
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	4413      	add	r3, r2
 800171c:	3304      	adds	r3, #4
 800171e:	460a      	mov	r2, r1
 8001720:	801a      	strh	r2, [r3, #0]

				jsmntok_t* g = &t[i + j + 2];
 8001722:	f8d7 2838 	ldr.w	r2, [r7, #2104]	; 0x838
 8001726:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 800172a:	4413      	add	r3, r2
 800172c:	3302      	adds	r3, #2
 800172e:	f107 0210 	add.w	r2, r7, #16
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	4413      	add	r3, r2
 8001736:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
				char* p_stt = (char*)input + g->start + 1;
 800173a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	3301      	adds	r3, #1
 8001742:	1d3a      	adds	r2, r7, #4
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	4413      	add	r3, r2
 8001748:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
				char* p_end = NULL;
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]


				if (isalpha(p_stt[0]) && islower(p_stt[0]))
 8001754:	f008 f8f6 	bl	8009944 <__locale_ctype_ptr>
 8001758:	4602      	mov	r2, r0
 800175a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 84fe 	beq.w	800216c <json_get_op+0xbdc>
 8001770:	f008 f8e8 	bl	8009944 <__locale_ctype_ptr>
 8001774:	4602      	mov	r2, r0
 8001776:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b02      	cmp	r3, #2
 8001788:	f040 84f0 	bne.w	800216c <json_get_op+0xbdc>
				{
					out->par[counter].root_id = 0;
 800178c:	463b      	mov	r3, r7
 800178e:	6819      	ldr	r1, [r3, #0]
 8001790:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
					switch(p_stt[0])
 80017a6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	3b63      	subs	r3, #99	; 0x63
 80017ae:	2b14      	cmp	r3, #20
 80017b0:	f200 84d2 	bhi.w	8002158 <json_get_op+0xbc8>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <json_get_op+0x22c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001ac1 	.word	0x08001ac1
 80017c0:	08001c11 	.word	0x08001c11
 80017c4:	08002159 	.word	0x08002159
 80017c8:	08001d61 	.word	0x08001d61
 80017cc:	080018cb 	.word	0x080018cb
 80017d0:	08002159 	.word	0x08002159
 80017d4:	080019c9 	.word	0x080019c9
 80017d8:	08002159 	.word	0x08002159
 80017dc:	08002159 	.word	0x08002159
 80017e0:	08002159 	.word	0x08002159
 80017e4:	08002159 	.word	0x08002159
 80017e8:	08002159 	.word	0x08002159
 80017ec:	08002159 	.word	0x08002159
 80017f0:	0800194d 	.word	0x0800194d
 80017f4:	08002159 	.word	0x08002159
 80017f8:	08001e79 	.word	0x08001e79
 80017fc:	08001811 	.word	0x08001811
 8001800:	08002033 	.word	0x08002033
 8001804:	08002159 	.word	0x08002159
 8001808:	08002159 	.word	0x08002159
 800180c:	08001a45 	.word	0x08001a45
					{
					case 's': //another branch
						out->par[counter].type = STATE;
 8001810:	463b      	mov	r3, r7
 8001812:	6819      	ldr	r1, [r3, #0]
 8001814:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	f203 3321 	addw	r3, r3, #801	; 0x321
 8001826:	220b      	movs	r2, #11
 8001828:	701a      	strb	r2, [r3, #0]
						for (uint16_t r = 0; r < root_counter; ++r) {
 800182a:	2300      	movs	r3, #0
 800182c:	f8a7 3832 	strh.w	r3, [r7, #2098]	; 0x832
 8001830:	e02c      	b.n	800188c <json_get_op+0x2fc>
							if (memcmp(p_stt, out->root_par[r].name, 3) == 0) {
 8001832:	f8b7 3832 	ldrh.w	r3, [r7, #2098]	; 0x832
 8001836:	463a      	mov	r2, r7
 8001838:	33d1      	adds	r3, #209	; 0xd1
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	4413      	add	r3, r2
 8001840:	3306      	adds	r3, #6
 8001842:	2203      	movs	r2, #3
 8001844:	4619      	mov	r1, r3
 8001846:	f8d7 081c 	ldr.w	r0, [r7, #2076]	; 0x81c
 800184a:	f008 f89b 	bl	8009984 <memcmp>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d116      	bne.n	8001882 <json_get_op+0x2f2>
								out->par[counter].root_id = out->root_par[r].id;
 8001854:	f8b7 3832 	ldrh.w	r3, [r7, #2098]	; 0x832
 8001858:	463a      	mov	r2, r7
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	4413      	add	r3, r2
 8001860:	f603 531b 	addw	r3, r3, #3355	; 0xd1b
 8001864:	7818      	ldrb	r0, [r3, #0]
 8001866:	463b      	mov	r3, r7
 8001868:	6819      	ldr	r1, [r3, #0]
 800186a:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800187c:	4602      	mov	r2, r0
 800187e:	701a      	strb	r2, [r3, #0]
								break;
 8001880:	e00a      	b.n	8001898 <json_get_op+0x308>
						for (uint16_t r = 0; r < root_counter; ++r) {
 8001882:	f8b7 3832 	ldrh.w	r3, [r7, #2098]	; 0x832
 8001886:	3301      	adds	r3, #1
 8001888:	f8a7 3832 	strh.w	r3, [r7, #2098]	; 0x832
 800188c:	f8b7 2832 	ldrh.w	r2, [r7, #2098]	; 0x832
 8001890:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001894:	429a      	cmp	r2, r3
 8001896:	dbcc      	blt.n	8001832 <json_get_op+0x2a2>
							}
						}
						out->par[counter].log = (enum LG)strtol(p_stt + 5, NULL, 16);
 8001898:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 800189c:	3305      	adds	r3, #5
 800189e:	2210      	movs	r2, #16
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f008 fbe6 	bl	800a074 <strtol>
 80018a8:	4603      	mov	r3, r0
 80018aa:	b2d8      	uxtb	r0, r3
 80018ac:	463b      	mov	r3, r7
 80018ae:	6819      	ldr	r1, [r3, #0]
 80018b0:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80018c2:	4602      	mov	r2, r0
 80018c4:	701a      	strb	r2, [r3, #0]
						break;
 80018c6:	f000 bc48 	b.w	800215a <json_get_op+0xbca>

					case 'g': //telegram
						out->par[counter].type = WEB;
 80018ca:	463b      	mov	r3, r7
 80018cc:	6819      	ldr	r1, [r3, #0]
 80018ce:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	f203 3321 	addw	r3, r3, #801	; 0x321
 80018e0:	2206      	movs	r2, #6
 80018e2:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_end + 3, &p_end, 16);
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3303      	adds	r3, #3
 80018ec:	f107 010c 	add.w	r1, r7, #12
 80018f0:	2210      	movs	r2, #16
 80018f2:	4618      	mov	r0, r3
 80018f4:	f008 fbbe 	bl	800a074 <strtol>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b2d8      	uxtb	r0, r3
 80018fc:	463b      	mov	r3, r7
 80018fe:	6819      	ldr	r1, [r3, #0]
 8001900:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001912:	4602      	mov	r2, r0
 8001914:	701a      	strb	r2, [r3, #0]
						out->par[counter].trigger_value = strtol(p_end + 1, NULL, 10);
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	220a      	movs	r2, #10
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f008 fba6 	bl	800a074 <strtol>
 8001928:	4603      	mov	r3, r0
 800192a:	4618      	mov	r0, r3
 800192c:	463b      	mov	r3, r7
 800192e:	6819      	ldr	r1, [r3, #0]
 8001930:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001942:	6018      	str	r0, [r3, #0]
						break;
 8001944:	f000 bc09 	b.w	800215a <json_get_op+0xbca>
 8001948:	0800b7a0 	.word	0x0800b7a0

					case 'p': //pmo
						out->par[counter].type = PMO;
 800194c:	463b      	mov	r3, r7
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	f203 3321 	addw	r3, r3, #801	; 0x321
 8001962:	2204      	movs	r2, #4
 8001964:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_end + 3, &p_end, 16);
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3303      	adds	r3, #3
 800196e:	f107 010c 	add.w	r1, r7, #12
 8001972:	2210      	movs	r2, #16
 8001974:	4618      	mov	r0, r3
 8001976:	f008 fb7d 	bl	800a074 <strtol>
 800197a:	4603      	mov	r3, r0
 800197c:	b2d8      	uxtb	r0, r3
 800197e:	463b      	mov	r3, r7
 8001980:	6819      	ldr	r1, [r3, #0]
 8001982:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001994:	4602      	mov	r2, r0
 8001996:	701a      	strb	r2, [r3, #0]
						out->par[counter].trigger_value = strtol(p_end + 1, NULL, 10);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	220a      	movs	r2, #10
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f008 fb65 	bl	800a074 <strtol>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4618      	mov	r0, r3
 80019ae:	463b      	mov	r3, r7
 80019b0:	6819      	ldr	r1, [r3, #0]
 80019b2:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80019c4:	6018      	str	r0, [r3, #0]
						break;
 80019c6:	e3c8      	b.n	800215a <json_get_op+0xbca>

					case 'i': //ino
						out->par[counter].type = INO;
 80019c8:	463b      	mov	r3, r7
 80019ca:	6819      	ldr	r1, [r3, #0]
 80019cc:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	f203 3321 	addw	r3, r3, #801	; 0x321
 80019de:	2205      	movs	r2, #5
 80019e0:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_end + 3, &p_end, 16);
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3303      	adds	r3, #3
 80019ea:	f107 010c 	add.w	r1, r7, #12
 80019ee:	2210      	movs	r2, #16
 80019f0:	4618      	mov	r0, r3
 80019f2:	f008 fb3f 	bl	800a074 <strtol>
 80019f6:	4603      	mov	r3, r0
 80019f8:	b2d8      	uxtb	r0, r3
 80019fa:	463b      	mov	r3, r7
 80019fc:	6819      	ldr	r1, [r3, #0]
 80019fe:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001a10:	4602      	mov	r2, r0
 8001a12:	701a      	strb	r2, [r3, #0]
						out->par[counter].trigger_value = strtol(p_end + 1, NULL, 10);
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	220a      	movs	r2, #10
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f008 fb27 	bl	800a074 <strtol>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	6819      	ldr	r1, [r3, #0]
 8001a2e:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001a40:	6018      	str	r0, [r3, #0]
						break;
 8001a42:	e38a      	b.n	800215a <json_get_op+0xbca>

					case 'w': //week
						out->par[counter].type = WEEK;
 8001a44:	463b      	mov	r3, r7
 8001a46:	6819      	ldr	r1, [r3, #0]
 8001a48:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	f203 3321 	addw	r3, r3, #801	; 0x321
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_end + 3, &p_end, 16);
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	3303      	adds	r3, #3
 8001a66:	f107 010c 	add.w	r1, r7, #12
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f008 fb01 	bl	800a074 <strtol>
 8001a72:	4603      	mov	r3, r0
 8001a74:	b2d8      	uxtb	r0, r3
 8001a76:	463b      	mov	r3, r7
 8001a78:	6819      	ldr	r1, [r3, #0]
 8001a7a:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	701a      	strb	r2, [r3, #0]
						out->par[counter].trigger_value = strtol(p_end + 1, NULL, 16);
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3301      	adds	r3, #1
 8001a98:	2210      	movs	r2, #16
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f008 fae9 	bl	800a074 <strtol>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	6819      	ldr	r1, [r3, #0]
 8001aaa:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001abc:	6018      	str	r0, [r3, #0]
						break;
 8001abe:	e34c      	b.n	800215a <json_get_op+0xbca>

					case 'c': //counter
						out->par[counter].type = COUNTER;
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	6819      	ldr	r1, [r3, #0]
 8001ac4:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	f203 3321 	addw	r3, r3, #801	; 0x321
 8001ad6:	2209      	movs	r2, #9
 8001ad8:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_stt + 3, NULL, 16);
 8001ada:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001ade:	3303      	adds	r3, #3
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f008 fac5 	bl	800a074 <strtol>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b2d8      	uxtb	r0, r3
 8001aee:	463b      	mov	r3, r7
 8001af0:	6819      	ldr	r1, [r3, #0]
 8001af2:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001b04:	4602      	mov	r2, r0
 8001b06:	701a      	strb	r2, [r3, #0]

						if (memcmp(p_stt + 6, "psv", 3) == 0) {
 8001b08:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001b0c:	3306      	adds	r3, #6
 8001b0e:	2203      	movs	r2, #3
 8001b10:	49d8      	ldr	r1, [pc, #864]	; (8001e74 <json_get_op+0x8e4>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f007 ff36 	bl	8009984 <memcmp>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10d      	bne.n	8001b3a <json_get_op+0x5aa>
							(out->cntr + cntr_counter)->root_id = -1;
 8001b1e:	463b      	mov	r3, r7
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001b26:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	440b      	add	r3, r1
 8001b34:	22ff      	movs	r2, #255	; 0xff
 8001b36:	701a      	strb	r2, [r3, #0]
 8001b38:	e037      	b.n	8001baa <json_get_op+0x61a>
						} else {
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8a7 3830 	strh.w	r3, [r7, #2096]	; 0x830
 8001b40:	e02d      	b.n	8001b9e <json_get_op+0x60e>
								if (memcmp(p_stt + 6, out->root_par[r].name, 3) == 0) {
 8001b42:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001b46:	1d98      	adds	r0, r3, #6
 8001b48:	f8b7 3830 	ldrh.w	r3, [r7, #2096]	; 0x830
 8001b4c:	463a      	mov	r2, r7
 8001b4e:	33d1      	adds	r3, #209	; 0xd1
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	3306      	adds	r3, #6
 8001b58:	2203      	movs	r2, #3
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f007 ff12 	bl	8009984 <memcmp>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d116      	bne.n	8001b94 <json_get_op+0x604>
									(out->cntr + cntr_counter)->root_id = out->root_par[r].id;
 8001b66:	463b      	mov	r3, r7
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001b6e:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f8b7 2830 	ldrh.w	r2, [r7, #2096]	; 0x830
 8001b80:	4639      	mov	r1, r7
 8001b82:	6809      	ldr	r1, [r1, #0]
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	440a      	add	r2, r1
 8001b88:	f602 521b 	addw	r2, r2, #3355	; 0xd1b
 8001b8c:	7812      	ldrb	r2, [r2, #0]
 8001b8e:	b252      	sxtb	r2, r2
 8001b90:	701a      	strb	r2, [r3, #0]
									break;
 8001b92:	e00a      	b.n	8001baa <json_get_op+0x61a>
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001b94:	f8b7 3830 	ldrh.w	r3, [r7, #2096]	; 0x830
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f8a7 3830 	strh.w	r3, [r7, #2096]	; 0x830
 8001b9e:	f8b7 2830 	ldrh.w	r2, [r7, #2096]	; 0x830
 8001ba2:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	dbcb      	blt.n	8001b42 <json_get_op+0x5b2>
								}
							}
						}

						out->par[counter].trigger_value = strtol(p_stt + 11, NULL, 10);
 8001baa:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001bae:	330b      	adds	r3, #11
 8001bb0:	220a      	movs	r2, #10
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f008 fa5d 	bl	800a074 <strtol>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	6819      	ldr	r1, [r3, #0]
 8001bc2:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001bd4:	6018      	str	r0, [r3, #0]
						out->par[counter].data = out->cntr + cntr_counter;
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001bde:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4419      	add	r1, r3
 8001bec:	463b      	mov	r3, r7
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4403      	add	r3, r0
 8001bfe:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001c02:	6019      	str	r1, [r3, #0]
						cntr_counter++;
 8001c04:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
						break;
 8001c0e:	e2a4      	b.n	800215a <json_get_op+0xbca>

					case 'd': //delay
						out->par[counter].type = DELAY;
 8001c10:	463b      	mov	r3, r7
 8001c12:	6819      	ldr	r1, [r3, #0]
 8001c14:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	f203 3321 	addw	r3, r3, #801	; 0x321
 8001c26:	220a      	movs	r2, #10
 8001c28:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_stt + 3, NULL, 16);
 8001c2a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001c2e:	3303      	adds	r3, #3
 8001c30:	2210      	movs	r2, #16
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f008 fa1d 	bl	800a074 <strtol>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	b2d8      	uxtb	r0, r3
 8001c3e:	463b      	mov	r3, r7
 8001c40:	6819      	ldr	r1, [r3, #0]
 8001c42:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001c54:	4602      	mov	r2, r0
 8001c56:	701a      	strb	r2, [r3, #0]

						if (memcmp(p_stt + 6, "psv", 3) == 0) {
 8001c58:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001c5c:	3306      	adds	r3, #6
 8001c5e:	2203      	movs	r2, #3
 8001c60:	4984      	ldr	r1, [pc, #528]	; (8001e74 <json_get_op+0x8e4>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f007 fe8e 	bl	8009984 <memcmp>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10d      	bne.n	8001c8a <json_get_op+0x6fa>
							(out->del + dl_counter)->root_id = -1;
 8001c6e:	463b      	mov	r3, r7
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8001c76:	f8d7 2840 	ldr.w	r2, [r7, #2112]	; 0x840
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	22ff      	movs	r2, #255	; 0xff
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	e037      	b.n	8001cfa <json_get_op+0x76a>
						} else {
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8a7 382e 	strh.w	r3, [r7, #2094]	; 0x82e
 8001c90:	e02d      	b.n	8001cee <json_get_op+0x75e>
								if (memcmp(p_stt + 6, out->root_par[r].name, 3) == 0) {
 8001c92:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001c96:	1d98      	adds	r0, r3, #6
 8001c98:	f8b7 382e 	ldrh.w	r3, [r7, #2094]	; 0x82e
 8001c9c:	463a      	mov	r2, r7
 8001c9e:	33d1      	adds	r3, #209	; 0xd1
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3306      	adds	r3, #6
 8001ca8:	2203      	movs	r2, #3
 8001caa:	4619      	mov	r1, r3
 8001cac:	f007 fe6a 	bl	8009984 <memcmp>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d116      	bne.n	8001ce4 <json_get_op+0x754>
									(out->del + dl_counter)->root_id = out->root_par[r].id;
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8001cbe:	f8d7 2840 	ldr.w	r2, [r7, #2112]	; 0x840
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f8b7 282e 	ldrh.w	r2, [r7, #2094]	; 0x82e
 8001cd0:	4639      	mov	r1, r7
 8001cd2:	6809      	ldr	r1, [r1, #0]
 8001cd4:	0112      	lsls	r2, r2, #4
 8001cd6:	440a      	add	r2, r1
 8001cd8:	f602 521b 	addw	r2, r2, #3355	; 0xd1b
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	b252      	sxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]
									break;
 8001ce2:	e00a      	b.n	8001cfa <json_get_op+0x76a>
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001ce4:	f8b7 382e 	ldrh.w	r3, [r7, #2094]	; 0x82e
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f8a7 382e 	strh.w	r3, [r7, #2094]	; 0x82e
 8001cee:	f8b7 282e 	ldrh.w	r2, [r7, #2094]	; 0x82e
 8001cf2:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	dbcb      	blt.n	8001c92 <json_get_op+0x702>
								}
							}
						}

						out->del[dl_counter].value = strtol(p_stt + 11, NULL, 10);
 8001cfa:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001cfe:	330b      	adds	r3, #11
 8001d00:	220a      	movs	r2, #10
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f008 f9b5 	bl	800a074 <strtol>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b298      	uxth	r0, r3
 8001d0e:	463b      	mov	r3, r7
 8001d10:	6819      	ldr	r1, [r3, #0]
 8001d12:	f8d7 2840 	ldr.w	r2, [r7, #2112]	; 0x840
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	3372      	adds	r3, #114	; 0x72
 8001d22:	4602      	mov	r2, r0
 8001d24:	801a      	strh	r2, [r3, #0]
						out->par[counter].data	= out->del + dl_counter;
 8001d26:	463b      	mov	r3, r7
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8001d2e:	f8d7 2840 	ldr.w	r2, [r7, #2112]	; 0x840
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4419      	add	r1, r3
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4403      	add	r3, r0
 8001d4e:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001d52:	6019      	str	r1, [r3, #0]
						dl_counter++;
 8001d54:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
						break;
 8001d5e:	e1fc      	b.n	800215a <json_get_op+0xbca>

					case 'f': //t trigger
						out->par[counter].type = T_TRIGGER;
 8001d60:	463b      	mov	r3, r7
 8001d62:	6819      	ldr	r1, [r3, #0]
 8001d64:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	f203 3321 	addw	r3, r3, #801	; 0x321
 8001d76:	2207      	movs	r2, #7
 8001d78:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_stt + 3, NULL, 16);
 8001d7a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001d7e:	3303      	adds	r3, #3
 8001d80:	2210      	movs	r2, #16
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f008 f975 	bl	800a074 <strtol>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	b2d8      	uxtb	r0, r3
 8001d8e:	463b      	mov	r3, r7
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001da4:	4602      	mov	r2, r0
 8001da6:	701a      	strb	r2, [r3, #0]

						if (memcmp(p_stt + 6, "psv", 3) == 0) {
 8001da8:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001dac:	3306      	adds	r3, #6
 8001dae:	2203      	movs	r2, #3
 8001db0:	4930      	ldr	r1, [pc, #192]	; (8001e74 <json_get_op+0x8e4>)
 8001db2:	4618      	mov	r0, r3
 8001db4:	f007 fde6 	bl	8009984 <memcmp>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10a      	bne.n	8001dd4 <json_get_op+0x844>
							(out->t_tr + tt_counter)->root_id = -1;
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	6819      	ldr	r1, [r3, #0]
 8001dc2:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	22ff      	movs	r2, #255	; 0xff
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e034      	b.n	8001e3e <json_get_op+0x8ae>
						} else {
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8a7 382c 	strh.w	r3, [r7, #2092]	; 0x82c
 8001dda:	e02a      	b.n	8001e32 <json_get_op+0x8a2>
								if (memcmp(p_stt + 6, out->root_par[r].name, 3) == 0) {
 8001ddc:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001de0:	1d98      	adds	r0, r3, #6
 8001de2:	f8b7 382c 	ldrh.w	r3, [r7, #2092]	; 0x82c
 8001de6:	463a      	mov	r2, r7
 8001de8:	33d1      	adds	r3, #209	; 0xd1
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	3306      	adds	r3, #6
 8001df2:	2203      	movs	r2, #3
 8001df4:	4619      	mov	r1, r3
 8001df6:	f007 fdc5 	bl	8009984 <memcmp>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d113      	bne.n	8001e28 <json_get_op+0x898>
									(out->t_tr + tt_counter)->root_id = out->root_par[r].id;
 8001e00:	463b      	mov	r3, r7
 8001e02:	6819      	ldr	r1, [r3, #0]
 8001e04:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f8b7 282c 	ldrh.w	r2, [r7, #2092]	; 0x82c
 8001e14:	4639      	mov	r1, r7
 8001e16:	6809      	ldr	r1, [r1, #0]
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	440a      	add	r2, r1
 8001e1c:	f602 521b 	addw	r2, r2, #3355	; 0xd1b
 8001e20:	7812      	ldrb	r2, [r2, #0]
 8001e22:	b252      	sxtb	r2, r2
 8001e24:	701a      	strb	r2, [r3, #0]
									break;
 8001e26:	e00a      	b.n	8001e3e <json_get_op+0x8ae>
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001e28:	f8b7 382c 	ldrh.w	r3, [r7, #2092]	; 0x82c
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f8a7 382c 	strh.w	r3, [r7, #2092]	; 0x82c
 8001e32:	f8b7 282c 	ldrh.w	r2, [r7, #2092]	; 0x82c
 8001e36:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	dbce      	blt.n	8001ddc <json_get_op+0x84c>
								}
							}
						}

						out->par[counter].data	= out->t_tr + tt_counter;
 8001e3e:	463b      	mov	r3, r7
 8001e40:	6819      	ldr	r1, [r3, #0]
 8001e42:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4419      	add	r1, r3
 8001e4e:	463b      	mov	r3, r7
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4403      	add	r3, r0
 8001e60:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001e64:	6019      	str	r1, [r3, #0]
						tt_counter++;
 8001e66:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
						break;
 8001e70:	e173      	b.n	800215a <json_get_op+0xbca>
 8001e72:	bf00      	nop
 8001e74:	0800b7a4 	.word	0x0800b7a4

					case 'r': //rs trigger
						out->par[counter].type = RS_TRIGGER;
 8001e78:	463b      	mov	r3, r7
 8001e7a:	6819      	ldr	r1, [r3, #0]
 8001e7c:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	f203 3321 	addw	r3, r3, #801	; 0x321
 8001e8e:	2208      	movs	r2, #8
 8001e90:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_stt + 3, NULL, 16);
 8001e92:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001e96:	3303      	adds	r3, #3
 8001e98:	2210      	movs	r2, #16
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f008 f8e9 	bl	800a074 <strtol>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	b2d8      	uxtb	r0, r3
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	6819      	ldr	r1, [r3, #0]
 8001eaa:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	701a      	strb	r2, [r3, #0]

						if (memcmp(p_stt + 6, "psv", 3) == 0) {
 8001ec0:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001ec4:	3306      	adds	r3, #6
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	49a7      	ldr	r1, [pc, #668]	; (8002168 <json_get_op+0xbd8>)
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f007 fd5a 	bl	8009984 <memcmp>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10b      	bne.n	8001eee <json_get_op+0x95e>
							out->rs_tr[rst_counter].root_id_s = -1;
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	6819      	ldr	r1, [r3, #0]
 8001eda:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3318      	adds	r3, #24
 8001ee8:	22ff      	movs	r2, #255	; 0xff
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	e036      	b.n	8001f5c <json_get_op+0x9cc>
						} else {
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f8a7 382a 	strh.w	r3, [r7, #2090]	; 0x82a
 8001ef4:	e02c      	b.n	8001f50 <json_get_op+0x9c0>
								if (memcmp(p_stt + 6, out->root_par[r].name, 3) == 0) {
 8001ef6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001efa:	1d98      	adds	r0, r3, #6
 8001efc:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	; 0x82a
 8001f00:	463a      	mov	r2, r7
 8001f02:	33d1      	adds	r3, #209	; 0xd1
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	3306      	adds	r3, #6
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f007 fd38 	bl	8009984 <memcmp>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d115      	bne.n	8001f46 <json_get_op+0x9b6>
									out->rs_tr[rst_counter].root_id_s = out->root_par[r].id;
 8001f1a:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	; 0x82a
 8001f1e:	463a      	mov	r2, r7
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	4413      	add	r3, r2
 8001f26:	f603 531b 	addw	r3, r3, #3355	; 0xd1b
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	b258      	sxtb	r0, r3
 8001f2e:	463b      	mov	r3, r7
 8001f30:	6819      	ldr	r1, [r3, #0]
 8001f32:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3318      	adds	r3, #24
 8001f40:	4602      	mov	r2, r0
 8001f42:	701a      	strb	r2, [r3, #0]
									break;
 8001f44:	e00a      	b.n	8001f5c <json_get_op+0x9cc>
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001f46:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	; 0x82a
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	f8a7 382a 	strh.w	r3, [r7, #2090]	; 0x82a
 8001f50:	f8b7 282a 	ldrh.w	r2, [r7, #2090]	; 0x82a
 8001f54:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbcc      	blt.n	8001ef6 <json_get_op+0x966>
								}
							}
						}

						if (memcmp(p_stt + 6, "psv", 3) == 0) {
 8001f5c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001f60:	3306      	adds	r3, #6
 8001f62:	2203      	movs	r2, #3
 8001f64:	4980      	ldr	r1, [pc, #512]	; (8002168 <json_get_op+0xbd8>)
 8001f66:	4618      	mov	r0, r3
 8001f68:	f007 fd0c 	bl	8009984 <memcmp>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10b      	bne.n	8001f8a <json_get_op+0x9fa>
							out->rs_tr[rst_counter].root_id_r = -1;
 8001f72:	463b      	mov	r3, r7
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	440b      	add	r3, r1
 8001f82:	3319      	adds	r3, #25
 8001f84:	22ff      	movs	r2, #255	; 0xff
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	e037      	b.n	8001ffa <json_get_op+0xa6a>
						} else {
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8a7 3828 	strh.w	r3, [r7, #2088]	; 0x828
 8001f90:	e02d      	b.n	8001fee <json_get_op+0xa5e>
								if (memcmp(p_stt + 11, out->root_par[r].name, 3) == 0) {
 8001f92:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001f96:	f103 000b 	add.w	r0, r3, #11
 8001f9a:	f8b7 3828 	ldrh.w	r3, [r7, #2088]	; 0x828
 8001f9e:	463a      	mov	r2, r7
 8001fa0:	33d1      	adds	r3, #209	; 0xd1
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3306      	adds	r3, #6
 8001faa:	2203      	movs	r2, #3
 8001fac:	4619      	mov	r1, r3
 8001fae:	f007 fce9 	bl	8009984 <memcmp>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d115      	bne.n	8001fe4 <json_get_op+0xa54>
									out->rs_tr[rst_counter].root_id_r = out->root_par[r].id;
 8001fb8:	f8b7 3828 	ldrh.w	r3, [r7, #2088]	; 0x828
 8001fbc:	463a      	mov	r2, r7
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f603 531b 	addw	r3, r3, #3355	; 0xd1b
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b258      	sxtb	r0, r3
 8001fcc:	463b      	mov	r3, r7
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	3319      	adds	r3, #25
 8001fde:	4602      	mov	r2, r0
 8001fe0:	701a      	strb	r2, [r3, #0]
									break;
 8001fe2:	e00a      	b.n	8001ffa <json_get_op+0xa6a>
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001fe4:	f8b7 3828 	ldrh.w	r3, [r7, #2088]	; 0x828
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f8a7 3828 	strh.w	r3, [r7, #2088]	; 0x828
 8001fee:	f8b7 2828 	ldrh.w	r2, [r7, #2088]	; 0x828
 8001ff2:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	dbcb      	blt.n	8001f92 <json_get_op+0xa02>
								}
							}
						}

						out->par[counter].data	= out->rs_tr + rst_counter;
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f103 0118 	add.w	r1, r3, #24
 8002002:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	4419      	add	r1, r3
 800200e:	463b      	mov	r3, r7
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4403      	add	r3, r0
 8002020:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8002024:	6019      	str	r1, [r3, #0]
						rst_counter++;
 8002026:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 800202a:	3301      	adds	r3, #1
 800202c:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
						break;
 8002030:	e093      	b.n	800215a <json_get_op+0xbca>

					case 't': //time
						out->par[counter].type = TIME;
 8002032:	463b      	mov	r3, r7
 8002034:	6819      	ldr	r1, [r3, #0]
 8002036:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	f203 3321 	addw	r3, r3, #801	; 0x321
 8002048:	2202      	movs	r2, #2
 800204a:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_stt + 3, NULL, 16);
 800204c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8002050:	3303      	adds	r3, #3
 8002052:	2210      	movs	r2, #16
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f008 f80c 	bl	800a074 <strtol>
 800205c:	4603      	mov	r3, r0
 800205e:	b2d8      	uxtb	r0, r3
 8002060:	463b      	mov	r3, r7
 8002062:	6819      	ldr	r1, [r3, #0]
 8002064:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002076:	4602      	mov	r2, r0
 8002078:	701a      	strb	r2, [r3, #0]
						out->tim[tm_counter].from.tm_hour = strtol(p_stt + 8, &p_end, 10);
 800207a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 800207e:	3308      	adds	r3, #8
 8002080:	f107 010c 	add.w	r1, r7, #12
 8002084:	220a      	movs	r2, #10
 8002086:	4618      	mov	r0, r3
 8002088:	f007 fff4 	bl	800a074 <strtol>
 800208c:	463b      	mov	r3, r7
 800208e:	6819      	ldr	r1, [r3, #0]
 8002090:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	33d8      	adds	r3, #216	; 0xd8
 80020a0:	6018      	str	r0, [r3, #0]
						out->tim[tm_counter].from.tm_min =  strtol(p_end + 1, &p_end, 10);
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	f107 010c 	add.w	r1, r7, #12
 80020ae:	220a      	movs	r2, #10
 80020b0:	4618      	mov	r0, r3
 80020b2:	f007 ffdf 	bl	800a074 <strtol>
 80020b6:	463b      	mov	r3, r7
 80020b8:	6819      	ldr	r1, [r3, #0]
 80020ba:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	440b      	add	r3, r1
 80020c8:	33d4      	adds	r3, #212	; 0xd4
 80020ca:	6018      	str	r0, [r3, #0]
						out->tim[tm_counter].to.tm_hour = strtol(p_end + 1, &p_end, 10);
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	f107 010c 	add.w	r1, r7, #12
 80020d8:	220a      	movs	r2, #10
 80020da:	4618      	mov	r0, r3
 80020dc:	f007 ffca 	bl	800a074 <strtol>
 80020e0:	463b      	mov	r3, r7
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	33fc      	adds	r3, #252	; 0xfc
 80020f4:	6018      	str	r0, [r3, #0]
						out->tim[tm_counter].to.tm_min =  strtol(p_end + 1, NULL, 10);
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	220a      	movs	r2, #10
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f007 ffb6 	bl	800a074 <strtol>
 8002108:	463b      	mov	r3, r7
 800210a:	6819      	ldr	r1, [r3, #0]
 800210c:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	33f8      	adds	r3, #248	; 0xf8
 800211c:	6018      	str	r0, [r3, #0]
						out->par[counter].data	= out->tim + tm_counter;
 800211e:	463b      	mov	r3, r7
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f103 01d0 	add.w	r1, r3, #208	; 0xd0
 8002126:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4419      	add	r1, r3
 8002134:	463b      	mov	r3, r7
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4403      	add	r3, r0
 8002146:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800214a:	6019      	str	r1, [r3, #0]
						tm_counter++;
 800214c:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8002150:	3301      	adds	r3, #1
 8002152:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
						break;
 8002156:	e000      	b.n	800215a <json_get_op+0xbca>

					default:
						break;
 8002158:	bf00      	nop
					}
					counter++;
 800215a:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 800215e:	3301      	adds	r3, #1
 8002160:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 8002164:	e05b      	b.n	800221e <json_get_op+0xc8e>
 8002166:	bf00      	nop
 8002168:	0800b7a4 	.word	0x0800b7a4
					continue;
				}

				out->par[counter].addr = strtol(p_stt, &p_end, 16);
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	2210      	movs	r2, #16
 8002172:	4619      	mov	r1, r3
 8002174:	f8d7 081c 	ldr.w	r0, [r7, #2076]	; 0x81c
 8002178:	f007 ff7c 	bl	800a074 <strtol>
 800217c:	4603      	mov	r3, r0
 800217e:	4618      	mov	r0, r3
 8002180:	463b      	mov	r3, r7
 8002182:	6819      	ldr	r1, [r3, #0]
 8002184:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8002196:	6018      	str	r0, [r3, #0]
				out->par[counter].log = (enum LG)strtol(p_end + 1, &p_end, 10);
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	3301      	adds	r3, #1
 80021a0:	f107 010c 	add.w	r1, r7, #12
 80021a4:	220a      	movs	r2, #10
 80021a6:	4618      	mov	r0, r3
 80021a8:	f007 ff64 	bl	800a074 <strtol>
 80021ac:	4603      	mov	r3, r0
 80021ae:	b2d8      	uxtb	r0, r3
 80021b0:	463b      	mov	r3, r7
 80021b2:	6819      	ldr	r1, [r3, #0]
 80021b4:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80021c6:	4602      	mov	r2, r0
 80021c8:	701a      	strb	r2, [r3, #0]
				out->par[counter].trigger_value = strtol(p_end + 1, &p_end, 10);
 80021ca:	f107 030c 	add.w	r3, r7, #12
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	f107 010c 	add.w	r1, r7, #12
 80021d6:	220a      	movs	r2, #10
 80021d8:	4618      	mov	r0, r3
 80021da:	f007 ff4b 	bl	800a074 <strtol>
 80021de:	4603      	mov	r3, r0
 80021e0:	4618      	mov	r0, r3
 80021e2:	463b      	mov	r3, r7
 80021e4:	6819      	ldr	r1, [r3, #0]
 80021e6:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80021f8:	6018      	str	r0, [r3, #0]
				out->par[counter].type = SENSOR;
 80021fa:	463b      	mov	r3, r7
 80021fc:	6819      	ldr	r1, [r3, #0]
 80021fe:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	f203 3321 	addw	r3, r3, #801	; 0x321
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]

				counter++;
 8002214:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8002218:	3301      	adds	r3, #1
 800221a:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
			for (int j = 0; j < t[i + 1].size; j++)
 800221e:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002222:	3301      	adds	r3, #1
 8002224:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8002228:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 800222c:	3301      	adds	r3, #1
 800222e:	f107 0210 	add.w	r2, r7, #16
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	4413      	add	r3, r2
 8002236:	330c      	adds	r3, #12
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 800223e:	429a      	cmp	r2, r3
 8002240:	f73f aa5a 	bgt.w	80016f8 <json_get_op+0x168>
			}
			out->root_par[root_counter].operation = out->par + (counter - out->root_par[root_counter].operation_n);
 8002244:	463b      	mov	r3, r7
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f503 7244 	add.w	r2, r3, #784	; 0x310
 800224c:	463b      	mov	r3, r7
 800224e:	6819      	ldr	r1, [r3, #0]
 8002250:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002254:	33d1      	adds	r3, #209	; 0xd1
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	440b      	add	r3, r1
 800225a:	3304      	adds	r3, #4
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	4619      	mov	r1, r3
 8002260:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8002264:	1a5b      	subs	r3, r3, r1
 8002266:	4619      	mov	r1, r3
 8002268:	460b      	mov	r3, r1
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	441a      	add	r2, r3
 8002272:	463b      	mov	r3, r7
 8002274:	6819      	ldr	r1, [r3, #0]
 8002276:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 800227a:	33d1      	adds	r3, #209	; 0xd1
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	440b      	add	r3, r1
 8002280:	601a      	str	r2, [r3, #0]
			root_counter++;
 8002282:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002286:	3301      	adds	r3, #1
 8002288:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
			i += t[i + 1].size + 1;
 800228c:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8002290:	3301      	adds	r3, #1
 8002292:	f107 0210 	add.w	r2, r7, #16
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	4413      	add	r3, r2
 800229a:	330c      	adds	r3, #12
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3301      	adds	r3, #1
 80022a0:	f8d7 2838 	ldr.w	r2, [r7, #2104]	; 0x838
 80022a4:	4413      	add	r3, r2
 80022a6:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
 80022aa:	e000      	b.n	80022ae <json_get_op+0xd1e>
				continue;
 80022ac:	bf00      	nop
	for (i = 1; i < r; i++) {
 80022ae:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 80022b2:	3301      	adds	r3, #1
 80022b4:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
 80022b8:	f8d7 2838 	ldr.w	r2, [r7, #2104]	; 0x838
 80022bc:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80022c0:	429a      	cmp	r2, r3
 80022c2:	f6ff a9ab 	blt.w	800161c <json_get_op+0x8c>
		}
	}

	return root_counter;
 80022c6:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	f607 075c 	addw	r7, r7, #2140	; 0x85c
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd90      	pop	{r4, r7, pc}

080022d4 <Telegram_GetValue>:
{

}

uint8_t Telegram_GetValue(uint16_t key)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < TG_MAX; ++i) {
 80022de:	2300      	movs	r3, #0
 80022e0:	81fb      	strh	r3, [r7, #14]
 80022e2:	e00f      	b.n	8002304 <Telegram_GetValue+0x30>
		if (tg[i].key == key) {
 80022e4:	89fb      	ldrh	r3, [r7, #14]
 80022e6:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <Telegram_GetValue+0x44>)
 80022e8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80022ec:	88fa      	ldrh	r2, [r7, #6]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d105      	bne.n	80022fe <Telegram_GetValue+0x2a>
			return tg[i].value;
 80022f2:	89fb      	ldrh	r3, [r7, #14]
 80022f4:	4a08      	ldr	r2, [pc, #32]	; (8002318 <Telegram_GetValue+0x44>)
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	789b      	ldrb	r3, [r3, #2]
 80022fc:	e006      	b.n	800230c <Telegram_GetValue+0x38>
	for(uint16_t i = 0; i < TG_MAX; ++i) {
 80022fe:	89fb      	ldrh	r3, [r7, #14]
 8002300:	3301      	adds	r3, #1
 8002302:	81fb      	strh	r3, [r7, #14]
 8002304:	89fb      	ldrh	r3, [r7, #14]
 8002306:	2bff      	cmp	r3, #255	; 0xff
 8002308:	d9ec      	bls.n	80022e4 <Telegram_GetValue+0x10>
		}
	}
	return 0;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	20000244 	.word	0x20000244

0800231c <get_cur_time>:
#include "rtc.h"

#include <time.h>

uint8_t get_cur_time(struct tm* time)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	RTC_GetTime(time);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f006 ff87 	bl	8009238 <RTC_GetTime>
	return 1;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <is_cur_time>:

uint8_t is_cur_time(TM* ft)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08c      	sub	sp, #48	; 0x30
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	struct tm time_info = { 0 };
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	2224      	movs	r2, #36	; 0x24
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f007 fb37 	bl	80099b8 <memset>
	RTC_GetTime(&time_info);
 800234a:	f107 030c 	add.w	r3, r7, #12
 800234e:	4618      	mov	r0, r3
 8002350:	f006 ff72 	bl	8009238 <RTC_GetTime>

	if (time_info.tm_hour == ft->from.tm_hour &&
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	429a      	cmp	r2, r3
 800235c:	d10b      	bne.n	8002376 <is_cur_time+0x42>
		time_info.tm_min >= ft->from.tm_min &&
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
	if (time_info.tm_hour == ft->from.tm_hour &&
 8002364:	429a      	cmp	r2, r3
 8002366:	db06      	blt.n	8002376 <is_cur_time+0x42>
		time_info.tm_hour < ft->to.tm_hour)
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		time_info.tm_min >= ft->from.tm_min &&
 800236e:	429a      	cmp	r2, r3
 8002370:	da01      	bge.n	8002376 <is_cur_time+0x42>
	{
		return 1;
 8002372:	2301      	movs	r3, #1
 8002374:	e018      	b.n	80023a8 <is_cur_time+0x74>
	}

	if (time_info.tm_hour > ft->from.tm_hour &&
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	429a      	cmp	r2, r3
 800237e:	dd06      	ble.n	800238e <is_cur_time+0x5a>
		time_info.tm_hour < ft->to.tm_hour)
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	if (time_info.tm_hour > ft->from.tm_hour &&
 8002386:	429a      	cmp	r2, r3
 8002388:	da01      	bge.n	800238e <is_cur_time+0x5a>
	{
		return 1;
 800238a:	2301      	movs	r3, #1
 800238c:	e00c      	b.n	80023a8 <is_cur_time+0x74>
	}

	if (time_info.tm_hour == ft->to.tm_hour &&
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	429a      	cmp	r2, r3
 8002396:	d106      	bne.n	80023a6 <is_cur_time+0x72>
		time_info.tm_min <= ft->to.tm_min)
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (time_info.tm_hour == ft->to.tm_hour &&
 800239e:	429a      	cmp	r2, r3
 80023a0:	dc01      	bgt.n	80023a6 <is_cur_time+0x72>
	{
		return 1;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <is_cur_time+0x74>
	}

	return 0;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3730      	adds	r7, #48	; 0x30
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <is_cur_day_of_week>:

uint8_t is_cur_day_of_week(uint16_t data)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08c      	sub	sp, #48	; 0x30
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	80fb      	strh	r3, [r7, #6]
	struct tm time_info = { 0 };
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	2224      	movs	r2, #36	; 0x24
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f007 faf8 	bl	80099b8 <memset>
	RTC_GetTime(&time_info);
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	4618      	mov	r0, r3
 80023ce:	f006 ff33 	bl	8009238 <RTC_GetTime>

	if (data & (1 << time_info.tm_wday))
 80023d2:	88fa      	ldrh	r2, [r7, #6]
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	fa42 f303 	asr.w	r3, r2, r3
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <is_cur_day_of_week+0x36>
	{
		return 1;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <is_cur_day_of_week+0x38>
	}
	return 0;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3730      	adds	r7, #48	; 0x30
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <ESP_Init>:
struct ring_buffer_struct UART2_rx_data;
char request[1024];
static f_ptr delay;

void ESP_Init(f_ptr delay_function)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	RingBuffInit(&UART2_rx_data);
 80023f8:	4808      	ldr	r0, [pc, #32]	; (800241c <ESP_Init+0x2c>)
 80023fa:	f000 fa9f 	bl	800293c <RingBuffInit>
	UART2_Init(&UART2_rx_data);
 80023fe:	4807      	ldr	r0, [pc, #28]	; (800241c <ESP_Init+0x2c>)
 8002400:	f006 f806 	bl	8008410 <UART2_Init>
	UART2_SendData("\r\n", 2);
 8002404:	2102      	movs	r1, #2
 8002406:	4806      	ldr	r0, [pc, #24]	; (8002420 <ESP_Init+0x30>)
 8002408:	f006 f892 	bl	8008530 <UART2_SendData>
	delay = delay_function;
 800240c:	4a05      	ldr	r2, [pc, #20]	; (8002424 <ESP_Init+0x34>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6013      	str	r3, [r2, #0]
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20016e68 	.word	0x20016e68
 8002420:	0800b7a8 	.word	0x0800b7a8
 8002424:	20000644 	.word	0x20000644

08002428 <requestFlush>:
	char test_str[] = "uart2 work\r\n";
	UART2_SendData(test_str, sizeof(test_str));
}

static void requestFlush()
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	memset(request, 0, 1024);
 800242c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002430:	2100      	movs	r1, #0
 8002432:	4802      	ldr	r0, [pc, #8]	; (800243c <requestFlush+0x14>)
 8002434:	f007 fac0 	bl	80099b8 <memset>
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20017e6c 	.word	0x20017e6c

08002440 <charCallBack>:

static uint8_t charCallBack(char * key, uint16_t bias)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
	char * temp = RingBuffGetArray(&UART2_rx_data) + bias;
 800244c:	4810      	ldr	r0, [pc, #64]	; (8002490 <charCallBack+0x50>)
 800244e:	f000 fabe 	bl	80029ce <RingBuffGetArray>
 8002452:	4602      	mov	r2, r0
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	4413      	add	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
	if(key != NULL && strlen(temp) >= strlen(key))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d012      	beq.n	8002486 <charCallBack+0x46>
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f7fd febf 	bl	80001e4 <strlen>
 8002466:	4604      	mov	r4, r0
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7fd febb 	bl	80001e4 <strlen>
 800246e:	4603      	mov	r3, r0
 8002470:	429c      	cmp	r4, r3
 8002472:	d308      	bcc.n	8002486 <charCallBack+0x46>
	{
		if(strstr(temp, key) != NULL)
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f007 fd4e 	bl	8009f18 <strstr>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <charCallBack+0x46>
		{
			return 1;
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <charCallBack+0x48>
		}
	}

	return 0;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	bd90      	pop	{r4, r7, pc}
 8002490:	20016e68 	.word	0x20016e68

08002494 <waitCallBack>:

static uint8_t waitCallBack(char * aim, uint16_t ms)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
	for( ; ms > 0; --ms)
 80024a0:	e012      	b.n	80024c8 <waitCallBack+0x34>
	{
		if(charCallBack(aim, 0))
 80024a2:	2100      	movs	r1, #0
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ffcb 	bl	8002440 <charCallBack>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d004      	beq.n	80024ba <waitCallBack+0x26>
		{
			RingBuffClear(&UART2_rx_data);
 80024b0:	480b      	ldr	r0, [pc, #44]	; (80024e0 <waitCallBack+0x4c>)
 80024b2:	f000 fa72 	bl	800299a <RingBuffClear>
			return 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00d      	b.n	80024d6 <waitCallBack+0x42>
		}
		delay(1);
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <waitCallBack+0x50>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2001      	movs	r0, #1
 80024c0:	4798      	blx	r3
	for( ; ms > 0; --ms)
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	807b      	strh	r3, [r7, #2]
 80024c8:	887b      	ldrh	r3, [r7, #2]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1e9      	bne.n	80024a2 <waitCallBack+0xe>
	}
	RingBuffClear(&UART2_rx_data);
 80024ce:	4804      	ldr	r0, [pc, #16]	; (80024e0 <waitCallBack+0x4c>)
 80024d0:	f000 fa63 	bl	800299a <RingBuffClear>
	return 0;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20016e68 	.word	0x20016e68
 80024e4:	20000644 	.word	0x20000644

080024e8 <ESP_GetRxData>:

char* ESP_GetRxData()
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
	return RingBuffGetArray(&UART2_rx_data);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <ESP_GetRxData+0x10>)
 80024ee:	f000 fa6e 	bl	80029ce <RingBuffGetArray>
 80024f2:	4603      	mov	r3, r0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20016e68 	.word	0x20016e68

080024fc <ESP_SoftReset>:

uint8_t ESP_SoftReset()
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	UART2_SendData("AT+RST\r\n", 8);
 8002500:	2108      	movs	r1, #8
 8002502:	4803      	ldr	r0, [pc, #12]	; (8002510 <ESP_SoftReset+0x14>)
 8002504:	f006 f814 	bl	8008530 <UART2_SendData>
	return 1;
 8002508:	2301      	movs	r3, #1
}
 800250a:	4618      	mov	r0, r3
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	0800b7bc 	.word	0x0800b7bc

08002514 <ESP_SetMode>:

uint8_t ESP_SetMode(uint8_t mode)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
	requestFlush();
 800251e:	f7ff ff83 	bl	8002428 <requestFlush>
	sprintf(request, "AT+CWMODE=%d\r\n", mode);
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	461a      	mov	r2, r3
 8002526:	4915      	ldr	r1, [pc, #84]	; (800257c <ESP_SetMode+0x68>)
 8002528:	4815      	ldr	r0, [pc, #84]	; (8002580 <ESP_SetMode+0x6c>)
 800252a:	f007 fca9 	bl	8009e80 <siprintf>
	RingBuffClear(&UART2_rx_data);
 800252e:	4815      	ldr	r0, [pc, #84]	; (8002584 <ESP_SetMode+0x70>)
 8002530:	f000 fa33 	bl	800299a <RingBuffClear>
	UART2_SendData(request, strlen(request));
 8002534:	4812      	ldr	r0, [pc, #72]	; (8002580 <ESP_SetMode+0x6c>)
 8002536:	f7fd fe55 	bl	80001e4 <strlen>
 800253a:	4603      	mov	r3, r0
 800253c:	4619      	mov	r1, r3
 800253e:	4810      	ldr	r0, [pc, #64]	; (8002580 <ESP_SetMode+0x6c>)
 8002540:	f005 fff6 	bl	8008530 <UART2_SendData>

	if(waitCallBack("OK", 2000))
 8002544:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002548:	480f      	ldr	r0, [pc, #60]	; (8002588 <ESP_SetMode+0x74>)
 800254a:	f7ff ffa3 	bl	8002494 <waitCallBack>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00e      	beq.n	8002572 <ESP_SetMode+0x5e>
	{
		UART2_SendData("AT+RST\r\n", 8);
 8002554:	2108      	movs	r1, #8
 8002556:	480d      	ldr	r0, [pc, #52]	; (800258c <ESP_SetMode+0x78>)
 8002558:	f005 ffea 	bl	8008530 <UART2_SendData>
		if(waitCallBack("ready", 2000))
 800255c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002560:	480b      	ldr	r0, [pc, #44]	; (8002590 <ESP_SetMode+0x7c>)
 8002562:	f7ff ff97 	bl	8002494 <waitCallBack>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <ESP_SetMode+0x5c>
		{
			return 1;
 800256c:	2301      	movs	r3, #1
 800256e:	e001      	b.n	8002574 <ESP_SetMode+0x60>
		}
		else asm("NOP");
 8002570:	bf00      	nop
	}

	return 0;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	0800b7c8 	.word	0x0800b7c8
 8002580:	20017e6c 	.word	0x20017e6c
 8002584:	20016e68 	.word	0x20016e68
 8002588:	0800b7d8 	.word	0x0800b7d8
 800258c:	0800b7bc 	.word	0x0800b7bc
 8002590:	0800b7dc 	.word	0x0800b7dc

08002594 <ESP_SetParamsSoftAP>:
	}
	return 0;
}

uint8_t ESP_SetParamsSoftAP(char* ssid, char* password)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
	if(ssid != NULL && password != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01f      	beq.n	80025e4 <ESP_SetParamsSoftAP+0x50>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d01c      	beq.n	80025e4 <ESP_SetParamsSoftAP+0x50>
	{
		requestFlush();
 80025aa:	f7ff ff3d 	bl	8002428 <requestFlush>
		sprintf(request, "AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", ssid, password);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	490f      	ldr	r1, [pc, #60]	; (80025f0 <ESP_SetParamsSoftAP+0x5c>)
 80025b4:	480f      	ldr	r0, [pc, #60]	; (80025f4 <ESP_SetParamsSoftAP+0x60>)
 80025b6:	f007 fc63 	bl	8009e80 <siprintf>
		RingBuffClear(&UART2_rx_data);
 80025ba:	480f      	ldr	r0, [pc, #60]	; (80025f8 <ESP_SetParamsSoftAP+0x64>)
 80025bc:	f000 f9ed 	bl	800299a <RingBuffClear>
		UART2_SendData(request, strlen(request));
 80025c0:	480c      	ldr	r0, [pc, #48]	; (80025f4 <ESP_SetParamsSoftAP+0x60>)
 80025c2:	f7fd fe0f 	bl	80001e4 <strlen>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4619      	mov	r1, r3
 80025ca:	480a      	ldr	r0, [pc, #40]	; (80025f4 <ESP_SetParamsSoftAP+0x60>)
 80025cc:	f005 ffb0 	bl	8008530 <UART2_SendData>

		if(waitCallBack("OK", 10000))
 80025d0:	f242 7110 	movw	r1, #10000	; 0x2710
 80025d4:	4809      	ldr	r0, [pc, #36]	; (80025fc <ESP_SetParamsSoftAP+0x68>)
 80025d6:	f7ff ff5d 	bl	8002494 <waitCallBack>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <ESP_SetParamsSoftAP+0x50>
		{
			return 1;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <ESP_SetParamsSoftAP+0x52>
		}
	}
	return 0;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	0800b7f4 	.word	0x0800b7f4
 80025f4:	20017e6c 	.word	0x20017e6c
 80025f8:	20016e68 	.word	0x20016e68
 80025fc:	0800b7d8 	.word	0x0800b7d8

08002600 <ESP_SendData>:

	return 0;
}

uint8_t ESP_SendData(const char *url, uint16_t port, const char *data, uint32_t dataLength, uint8_t flagRN)
{
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	460b      	mov	r3, r1
 800260e:	817b      	strh	r3, [r7, #10]
	requestFlush();
 8002610:	f7ff ff0a 	bl	8002428 <requestFlush>
	sprintf(request, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", url, port);
 8002614:	897b      	ldrh	r3, [r7, #10]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4934      	ldr	r1, [pc, #208]	; (80026ec <ESP_SendData+0xec>)
 800261a:	4835      	ldr	r0, [pc, #212]	; (80026f0 <ESP_SendData+0xf0>)
 800261c:	f007 fc30 	bl	8009e80 <siprintf>
	RingBuffClear(&UART2_rx_data);
 8002620:	4834      	ldr	r0, [pc, #208]	; (80026f4 <ESP_SendData+0xf4>)
 8002622:	f000 f9ba 	bl	800299a <RingBuffClear>
	UART2_SendData(request, strlen(request));
 8002626:	4832      	ldr	r0, [pc, #200]	; (80026f0 <ESP_SendData+0xf0>)
 8002628:	f7fd fddc 	bl	80001e4 <strlen>
 800262c:	4603      	mov	r3, r0
 800262e:	4619      	mov	r1, r3
 8002630:	482f      	ldr	r0, [pc, #188]	; (80026f0 <ESP_SendData+0xf0>)
 8002632:	f005 ff7d 	bl	8008530 <UART2_SendData>

	if(waitCallBack("OK", 2000))
 8002636:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800263a:	482f      	ldr	r0, [pc, #188]	; (80026f8 <ESP_SendData+0xf8>)
 800263c:	f7ff ff2a 	bl	8002494 <waitCallBack>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d03a      	beq.n	80026bc <ESP_SendData+0xbc>
	{
		requestFlush();
 8002646:	f7ff feef 	bl	8002428 <requestFlush>
		sprintf(request, "AT+CIPSEND=%lu\r\n", dataLength);
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	492b      	ldr	r1, [pc, #172]	; (80026fc <ESP_SendData+0xfc>)
 800264e:	4828      	ldr	r0, [pc, #160]	; (80026f0 <ESP_SendData+0xf0>)
 8002650:	f007 fc16 	bl	8009e80 <siprintf>
		RingBuffClear(&UART2_rx_data);
 8002654:	4827      	ldr	r0, [pc, #156]	; (80026f4 <ESP_SendData+0xf4>)
 8002656:	f000 f9a0 	bl	800299a <RingBuffClear>
		UART2_SendData(request, strlen(request));
 800265a:	4825      	ldr	r0, [pc, #148]	; (80026f0 <ESP_SendData+0xf0>)
 800265c:	f7fd fdc2 	bl	80001e4 <strlen>
 8002660:	4603      	mov	r3, r0
 8002662:	4619      	mov	r1, r3
 8002664:	4822      	ldr	r0, [pc, #136]	; (80026f0 <ESP_SendData+0xf0>)
 8002666:	f005 ff63 	bl	8008530 <UART2_SendData>
		delay(10);
 800266a:	4b25      	ldr	r3, [pc, #148]	; (8002700 <ESP_SendData+0x100>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	200a      	movs	r0, #10
 8002670:	4798      	blx	r3

		if(waitCallBack(">", 1000) && data != NULL)
 8002672:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002676:	4823      	ldr	r0, [pc, #140]	; (8002704 <ESP_SendData+0x104>)
 8002678:	f7ff ff0c 	bl	8002494 <waitCallBack>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d02f      	beq.n	80026e2 <ESP_SendData+0xe2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d02c      	beq.n	80026e2 <ESP_SendData+0xe2>
		{
			for(int i = 0; i < dataLength; i++)
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	e009      	b.n	80026a2 <ESP_SendData+0xa2>
			{
				UART2_SendData_byte(data[i]);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f005 ff32 	bl	8008500 <UART2_SendData_byte>
			for(int i = 0; i < dataLength; i++)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3301      	adds	r3, #1
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d3f1      	bcc.n	800268e <ESP_SendData+0x8e>
			}
			if(flagRN)
 80026aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d017      	beq.n	80026e2 <ESP_SendData+0xe2>
			{
				UART2_SendData("\r\n", 2);
 80026b2:	2102      	movs	r1, #2
 80026b4:	4814      	ldr	r0, [pc, #80]	; (8002708 <ESP_SendData+0x108>)
 80026b6:	f005 ff3b 	bl	8008530 <UART2_SendData>
 80026ba:	e012      	b.n	80026e2 <ESP_SendData+0xe2>
			}
		}

	} else {
		requestFlush();
 80026bc:	f7ff feb4 	bl	8002428 <requestFlush>
		sprintf(request, "AT+CIPCLOSE\r\n");
 80026c0:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <ESP_SendData+0xf0>)
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <ESP_SendData+0x10c>)
 80026c4:	4614      	mov	r4, r2
 80026c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80026c8:	6020      	str	r0, [r4, #0]
 80026ca:	6061      	str	r1, [r4, #4]
 80026cc:	60a2      	str	r2, [r4, #8]
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	81a3      	strh	r3, [r4, #12]
		UART2_SendData(request, strlen(request));
 80026d2:	4807      	ldr	r0, [pc, #28]	; (80026f0 <ESP_SendData+0xf0>)
 80026d4:	f7fd fd86 	bl	80001e4 <strlen>
 80026d8:	4603      	mov	r3, r0
 80026da:	4619      	mov	r1, r3
 80026dc:	4804      	ldr	r0, [pc, #16]	; (80026f0 <ESP_SendData+0xf0>)
 80026de:	f005 ff27 	bl	8008530 <UART2_SendData>
	}

	return 1;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	371c      	adds	r7, #28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd90      	pop	{r4, r7, pc}
 80026ec:	0800b82c 	.word	0x0800b82c
 80026f0:	20017e6c 	.word	0x20017e6c
 80026f4:	20016e68 	.word	0x20016e68
 80026f8:	0800b7d8 	.word	0x0800b7d8
 80026fc:	0800b848 	.word	0x0800b848
 8002700:	20000644 	.word	0x20000644
 8002704:	0800b85c 	.word	0x0800b85c
 8002708:	0800b7a8 	.word	0x0800b7a8
 800270c:	0800b860 	.word	0x0800b860

08002710 <update_info_from_json>:

const char URL[] = "192.168.1.210";
const uint16_t PORT = 5002;

static void update_info_from_json(char* buff, struct OUTPUTS* out, uint16_t out_n)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	4613      	mov	r3, r2
 800271c:	80fb      	strh	r3, [r7, #6]
	out[out_n].branch_n = -1;
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	f640 6214 	movw	r2, #3604	; 0xe14
 8002724:	fb02 f303 	mul.w	r3, r2, r3
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	4413      	add	r3, r2
 800272c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002730:	f8a3 2e10 	strh.w	r2, [r3, #3600]	; 0xe10
	out[out_n].branch_n = json_get_op(buff, out + out_n);
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	f640 6214 	movw	r2, #3604	; 0xe14
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	18d4      	adds	r4, r2, r3
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	f640 6214 	movw	r2, #3604	; 0xe14
 8002748:	fb02 f303 	mul.w	r3, r2, r3
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	4413      	add	r3, r2
 8002750:	4619      	mov	r1, r3
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f7fe ff1c 	bl	8001590 <json_get_op>
 8002758:	4603      	mov	r3, r0
 800275a:	b29b      	uxth	r3, r3
 800275c:	f8a4 3e10 	strh.w	r3, [r4, #3600]	; 0xe10
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	bd90      	pop	{r4, r7, pc}

08002768 <clear_info>:

static void clear_info(struct OUTPUTS* out, uint16_t out_n)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
	out[out_n].branch_n = 0;
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	f640 6214 	movw	r2, #3604	; 0xe14
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	2200      	movs	r2, #0
 8002784:	f8a3 2e10 	strh.w	r2, [r3, #3600]	; 0xe10
	memset(out[out_n].par, 0, sizeof(OP));
 8002788:	887b      	ldrh	r3, [r7, #2]
 800278a:	f640 6214 	movw	r2, #3604	; 0xe14
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800279a:	2214      	movs	r2, #20
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f007 f90a 	bl	80099b8 <memset>
	memset(out[out_n].root_par, 0, sizeof(OP_ROOT));
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	f640 6214 	movw	r2, #3604	; 0xe14
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6351 	add.w	r3, r3, #3344	; 0xd10
 80027b6:	2210      	movs	r2, #16
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f007 f8fc 	bl	80099b8 <memset>
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <ESP_GetJson>:

void ESP_GetJson()
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0a4      	sub	sp, #144	; 0x90
 80027cc:	af02      	add	r7, sp, #8
	char get_t[128] = {0};
 80027ce:	463b      	mov	r3, r7
 80027d0:	2280      	movs	r2, #128	; 0x80
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f007 f8ef 	bl	80099b8 <memset>
	for(uint8_t i = 1; i < OUTPUTS_N + 1; ++i)
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80027e0:	e039      	b.n	8002856 <ESP_GetJson+0x8e>
	{
		sprintf(get_t, "GET http://192.168.1.210/test_%d HTTP/1.1\r\nHost: 192.168.1.210\r\n\r\n", i);
 80027e2:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80027e6:	463b      	mov	r3, r7
 80027e8:	491f      	ldr	r1, [pc, #124]	; (8002868 <ESP_GetJson+0xa0>)
 80027ea:	4618      	mov	r0, r3
 80027ec:	f007 fb48 	bl	8009e80 <siprintf>
		ESP_SendData(URL, PORT, get_t, sizeof(get_t) - 1, 1);
 80027f0:	f241 318a 	movw	r1, #5002	; 0x138a
 80027f4:	463a      	mov	r2, r7
 80027f6:	2301      	movs	r3, #1
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	237f      	movs	r3, #127	; 0x7f
 80027fc:	481b      	ldr	r0, [pc, #108]	; (800286c <ESP_GetJson+0xa4>)
 80027fe:	f7ff feff 	bl	8002600 <ESP_SendData>
		vTaskDelay(pdMS_TO_TICKS(100));
 8002802:	2064      	movs	r0, #100	; 0x64
 8002804:	f003 fcde 	bl	80061c4 <vTaskDelay>

		char* ptr = NULL;
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		if( (ptr = strstr(ESP_GetRxData(), "{")) != NULL )
 800280e:	f7ff fe6b 	bl	80024e8 <ESP_GetRxData>
 8002812:	4603      	mov	r3, r0
 8002814:	217b      	movs	r1, #123	; 0x7b
 8002816:	4618      	mov	r0, r3
 8002818:	f007 fb56 	bl	8009ec8 <strchr>
 800281c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8002820:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002824:	2b00      	cmp	r3, #0
 8002826:	d011      	beq.n	800284c <ESP_GetJson+0x84>
		{
			clear_info(outputs, 0);
 8002828:	2100      	movs	r1, #0
 800282a:	4811      	ldr	r0, [pc, #68]	; (8002870 <ESP_GetJson+0xa8>)
 800282c:	f7ff ff9c 	bl	8002768 <clear_info>
			update_info_from_json(ptr, outputs, i - 1);
 8002830:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29b      	uxth	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	490c      	ldr	r1, [pc, #48]	; (8002870 <ESP_GetJson+0xa8>)
 800283e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002842:	f7ff ff65 	bl	8002710 <update_info_from_json>
			outputs_updated_flag = 1;
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <ESP_GetJson+0xac>)
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < OUTPUTS_N + 1; ++i)
 800284c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002850:	3301      	adds	r3, #1
 8002852:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002856:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800285a:	2b10      	cmp	r3, #16
 800285c:	d9c1      	bls.n	80027e2 <ESP_GetJson+0x1a>
		}
	}
}
 800285e:	bf00      	nop
 8002860:	3788      	adds	r7, #136	; 0x88
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	0800b870 	.word	0x0800b870
 800286c:	0800ba84 	.word	0x0800ba84
 8002870:	20008ba8 	.word	0x20008ba8
 8002874:	20008ba4 	.word	0x20008ba4

08002878 <ESP_UpdateTime>:

void ESP_UpdateTime()
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b0a0      	sub	sp, #128	; 0x80
 800287c:	af02      	add	r7, sp, #8
	const char get_t[] = "GET http://192.168.1.210/timestamp HTTP/1.1\r\nHost: 192.168.1.210\r\n\r\n";
 800287e:	4a2b      	ldr	r2, [pc, #172]	; (800292c <ESP_UpdateTime+0xb4>)
 8002880:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002884:	4611      	mov	r1, r2
 8002886:	2245      	movs	r2, #69	; 0x45
 8002888:	4618      	mov	r0, r3
 800288a:	f007 f88a 	bl	80099a2 <memcpy>
	ESP_SendData(URL, PORT, get_t, sizeof(get_t) - 1, 1);
 800288e:	f241 318a 	movw	r1, #5002	; 0x138a
 8002892:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002896:	2301      	movs	r3, #1
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	2344      	movs	r3, #68	; 0x44
 800289c:	4824      	ldr	r0, [pc, #144]	; (8002930 <ESP_UpdateTime+0xb8>)
 800289e:	f7ff feaf 	bl	8002600 <ESP_SendData>
	vTaskDelay(pdMS_TO_TICKS(100));
 80028a2:	2064      	movs	r0, #100	; 0x64
 80028a4:	f003 fc8e 	bl	80061c4 <vTaskDelay>

	char* ptr_tm = NULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	677b      	str	r3, [r7, #116]	; 0x74
	char* ptr_tz = NULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	673b      	str	r3, [r7, #112]	; 0x70
	if( (ptr_tm = strstr(ESP_GetRxData(), "\"tm:")) != NULL
 80028b0:	f7ff fe1a 	bl	80024e8 <ESP_GetRxData>
 80028b4:	4603      	mov	r3, r0
 80028b6:	491f      	ldr	r1, [pc, #124]	; (8002934 <ESP_UpdateTime+0xbc>)
 80028b8:	4618      	mov	r0, r3
 80028ba:	f007 fb2d 	bl	8009f18 <strstr>
 80028be:	6778      	str	r0, [r7, #116]	; 0x74
 80028c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d02d      	beq.n	8002922 <ESP_UpdateTime+0xaa>
	 && (ptr_tz = strstr(ESP_GetRxData(),  ",tz:")) != NULL )
 80028c6:	f7ff fe0f 	bl	80024e8 <ESP_GetRxData>
 80028ca:	4603      	mov	r3, r0
 80028cc:	491a      	ldr	r1, [pc, #104]	; (8002938 <ESP_UpdateTime+0xc0>)
 80028ce:	4618      	mov	r0, r3
 80028d0:	f007 fb22 	bl	8009f18 <strstr>
 80028d4:	6738      	str	r0, [r7, #112]	; 0x70
 80028d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d022      	beq.n	8002922 <ESP_UpdateTime+0xaa>
	{
		struct tm tmp;
		long tm = strtol(ptr_tm + 4, NULL, 10);
 80028dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028de:	3304      	adds	r3, #4
 80028e0:	220a      	movs	r2, #10
 80028e2:	2100      	movs	r1, #0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f007 fbc5 	bl	800a074 <strtol>
 80028ea:	4603      	mov	r3, r0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
		int8_t tz = strtol(ptr_tz + 4, NULL, 10);
 80028ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028f0:	3304      	adds	r3, #4
 80028f2:	220a      	movs	r2, #10
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f007 fbbc 	bl	800a074 <strtol>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		(void) localtime_r((time_t *)&tm, &tmp);
 8002902:	463a      	mov	r2, r7
 8002904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f006 ff32 	bl	8009774 <localtime_r>
		tmp.tm_hour += tz;
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002916:	4413      	add	r3, r2
 8002918:	60bb      	str	r3, [r7, #8]
		RTC_SetTime(&tmp);
 800291a:	463b      	mov	r3, r7
 800291c:	4618      	mov	r0, r3
 800291e:	f006 fd75 	bl	800940c <RTC_SetTime>
	}
}
 8002922:	bf00      	nop
 8002924:	3778      	adds	r7, #120	; 0x78
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	0800b8c4 	.word	0x0800b8c4
 8002930:	0800ba84 	.word	0x0800ba84
 8002934:	0800b8b4 	.word	0x0800b8b4
 8002938:	0800b8bc 	.word	0x0800b8bc

0800293c <RingBuffInit>:
 */

#include "ring_buffer.h"

void RingBuffInit(struct ring_buffer_struct *rng)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	rng->index_in = rng->index_out = 0;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	805a      	strh	r2, [r3, #2]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	885a      	ldrh	r2, [r3, #2]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	801a      	strh	r2, [r3, #0]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <RingBuffPush>:

void RingBuffPush(struct ring_buffer_struct *rng, char element)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	460b      	mov	r3, r1
 8002968:	70fb      	strb	r3, [r7, #3]
	rng->buffer[rng->index_in++] = element;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	b291      	uxth	r1, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	8011      	strh	r1, [r2, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	711a      	strb	r2, [r3, #4]
	rng->index_in &= BUF_MASK;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002988:	b29a      	uxth	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	801a      	strh	r2, [r3, #0]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <RingBuffClear>:
	}
	return 0;
}

void RingBuffClear(struct ring_buffer_struct *rng)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
	memset(rng->buffer, 0, BUF_SIZE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3304      	adds	r3, #4
 80029a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f007 f803 	bl	80099b8 <memset>
	rng->buffer[0] = 0;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	711a      	strb	r2, [r3, #4]
	rng->index_out = rng->index_in = 0;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	801a      	strh	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	881a      	ldrh	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	805a      	strh	r2, [r3, #2]
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <RingBuffGetArray>:
{
	return (rng->index_in - rng->index_out) & BUF_MASK;
}

char * RingBuffGetArray(struct ring_buffer_struct *rng)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
	return ((char *)rng->buffer);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3304      	adds	r3, #4
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <W25qxx_Spi>:
#endif

w25qxx_t w25qxx;

uint8_t	W25qxx_Spi(uint8_t Data)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	71fb      	strb	r3, [r7, #7]
	//uint8_t	ret;
	//HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
	return SPI3_TransferReceive(Data);
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f005 fb98 	bl	8008128 <SPI3_TransferReceive>
 80029f8:	4603      	mov	r3, r0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <W25qxx_ReadID>:

uint32_t W25qxx_ReadID(void)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	2300      	movs	r3, #0
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	2300      	movs	r3, #0
 8002a16:	603b      	str	r3, [r7, #0]
	CS_Pin_Set(CS_RESET);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f005 fb6b 	bl	80080f4 <CS_Pin_Set>
	W25qxx_Spi(0x9F);
 8002a1e:	209f      	movs	r0, #159	; 0x9f
 8002a20:	f7ff ffe1 	bl	80029e6 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002a24:	20a5      	movs	r0, #165	; 0xa5
 8002a26:	f7ff ffde 	bl	80029e6 <W25qxx_Spi>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002a2e:	20a5      	movs	r0, #165	; 0xa5
 8002a30:	f7ff ffd9 	bl	80029e6 <W25qxx_Spi>
 8002a34:	4603      	mov	r3, r0
 8002a36:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002a38:	20a5      	movs	r0, #165	; 0xa5
 8002a3a:	f7ff ffd4 	bl	80029e6 <W25qxx_Spi>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	603b      	str	r3, [r7, #0]
	CS_Pin_Set(CS_SET);
 8002a42:	2001      	movs	r0, #1
 8002a44:	f005 fb56 	bl	80080f4 <CS_Pin_Set>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	041a      	lsls	r2, r3, #16
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	431a      	orrs	r2, r3
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
	return Temp;
 8002a58:	68fb      	ldr	r3, [r7, #12]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <W25qxx_ReadUniqID>:

void W25qxx_ReadUniqID(void)
{
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
	CS_Pin_Set(CS_RESET);
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f005 fb42 	bl	80080f4 <CS_Pin_Set>
	W25qxx_Spi(0x4B);
 8002a70:	204b      	movs	r0, #75	; 0x4b
 8002a72:	f7ff ffb8 	bl	80029e6 <W25qxx_Spi>
	for(uint8_t	i = 0; i < 4; ++i)
 8002a76:	2300      	movs	r3, #0
 8002a78:	71fb      	strb	r3, [r7, #7]
 8002a7a:	e005      	b.n	8002a88 <W25qxx_ReadUniqID+0x24>
	{
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002a7c:	20a5      	movs	r0, #165	; 0xa5
 8002a7e:	f7ff ffb2 	bl	80029e6 <W25qxx_Spi>
	for(uint8_t	i = 0; i < 4; ++i)
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	3301      	adds	r3, #1
 8002a86:	71fb      	strb	r3, [r7, #7]
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d9f6      	bls.n	8002a7c <W25qxx_ReadUniqID+0x18>
	}
	for(uint8_t	i = 0; i < 8; ++i)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	71bb      	strb	r3, [r7, #6]
 8002a92:	e00b      	b.n	8002aac <W25qxx_ReadUniqID+0x48>
	{
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002a94:	79bc      	ldrb	r4, [r7, #6]
 8002a96:	20a5      	movs	r0, #165	; 0xa5
 8002a98:	f7ff ffa5 	bl	80029e6 <W25qxx_Spi>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <W25qxx_ReadUniqID+0x5c>)
 8002aa2:	4423      	add	r3, r4
 8002aa4:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i = 0; i < 8; ++i)
 8002aa6:	79bb      	ldrb	r3, [r7, #6]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	71bb      	strb	r3, [r7, #6]
 8002aac:	79bb      	ldrb	r3, [r7, #6]
 8002aae:	2b07      	cmp	r3, #7
 8002ab0:	d9f0      	bls.n	8002a94 <W25qxx_ReadUniqID+0x30>
	}
	CS_Pin_Set(CS_SET);
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f005 fb1e 	bl	80080f4 <CS_Pin_Set>
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}
 8002ac0:	2001826c 	.word	0x2001826c

08002ac4 <W25qxx_WriteEnable>:

void W25qxx_WriteEnable(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	CS_Pin_Set(CS_RESET);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f005 fb13 	bl	80080f4 <CS_Pin_Set>
	W25qxx_Spi(0x06);
 8002ace:	2006      	movs	r0, #6
 8002ad0:	f7ff ff89 	bl	80029e6 <W25qxx_Spi>
	CS_Pin_Set(CS_SET);
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	f005 fb0d 	bl	80080f4 <CS_Pin_Set>
	W25qxx_Delay(1);
 8002ada:	2001      	movs	r0, #1
 8002adc:	f001 ff64 	bl	80049a8 <osDelay>
}
 8002ae0:	bf00      	nop
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <W25qxx_ReadStatusRegister>:
	CS_Pin_Set(CS_SET);
	W25qxx_Delay(1);
}

uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	73fb      	strb	r3, [r7, #15]
	CS_Pin_Set(CS_RESET);
 8002af2:	2000      	movs	r0, #0
 8002af4:	f005 fafe 	bl	80080f4 <CS_Pin_Set>
	if(SelectStatusRegister_1_2_3 == 1)
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d10c      	bne.n	8002b18 <W25qxx_ReadStatusRegister+0x34>
	{
		W25qxx_Spi(0x05);
 8002afe:	2005      	movs	r0, #5
 8002b00:	f7ff ff71 	bl	80029e6 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002b04:	20a5      	movs	r0, #165	; 0xa5
 8002b06:	f7ff ff6e 	bl	80029e6 <W25qxx_Spi>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8002b0e:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <W25qxx_ReadStatusRegister+0x7c>)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8002b16:	e01b      	b.n	8002b50 <W25qxx_ReadStatusRegister+0x6c>
	}
	else if(SelectStatusRegister_1_2_3 == 2)
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d10c      	bne.n	8002b38 <W25qxx_ReadStatusRegister+0x54>
	{
		W25qxx_Spi(0x35);
 8002b1e:	2035      	movs	r0, #53	; 0x35
 8002b20:	f7ff ff61 	bl	80029e6 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002b24:	20a5      	movs	r0, #165	; 0xa5
 8002b26:	f7ff ff5e 	bl	80029e6 <W25qxx_Spi>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8002b2e:	4a0c      	ldr	r2, [pc, #48]	; (8002b60 <W25qxx_ReadStatusRegister+0x7c>)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8002b36:	e00b      	b.n	8002b50 <W25qxx_ReadStatusRegister+0x6c>
	}
	else
	{
		W25qxx_Spi(0x15);
 8002b38:	2015      	movs	r0, #21
 8002b3a:	f7ff ff54 	bl	80029e6 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002b3e:	20a5      	movs	r0, #165	; 0xa5
 8002b40:	f7ff ff51 	bl	80029e6 <W25qxx_Spi>
 8002b44:	4603      	mov	r3, r0
 8002b46:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8002b48:	4a05      	ldr	r2, [pc, #20]	; (8002b60 <W25qxx_ReadStatusRegister+0x7c>)
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
	CS_Pin_Set(CS_SET);
 8002b50:	2001      	movs	r0, #1
 8002b52:	f005 facf 	bl	80080f4 <CS_Pin_Set>
	return status;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	2001826c 	.word	0x2001826c

08002b64 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	CS_Pin_Set(CS_SET);
}

void W25qxx_WaitForWriteEnd(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8002b68:	2001      	movs	r0, #1
 8002b6a:	f001 ff1d 	bl	80049a8 <osDelay>
	CS_Pin_Set(CS_RESET);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f005 fac0 	bl	80080f4 <CS_Pin_Set>
	W25qxx_Spi(0x05);
 8002b74:	2005      	movs	r0, #5
 8002b76:	f7ff ff36 	bl	80029e6 <W25qxx_Spi>
	do {
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002b7a:	20a5      	movs	r0, #165	; 0xa5
 8002b7c:	f7ff ff33 	bl	80029e6 <W25qxx_Spi>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <W25qxx_WaitForWriteEnd+0x44>)
 8002b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f001 ff0c 	bl	80049a8 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <W25qxx_WaitForWriteEnd+0x44>)
 8002b92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1ed      	bne.n	8002b7a <W25qxx_WaitForWriteEnd+0x16>
	CS_Pin_Set(CS_SET);
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	f005 faa8 	bl	80080f4 <CS_Pin_Set>
}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	2001826c 	.word	0x2001826c

08002bac <W25qxx_Init>:

uint8_t	W25qxx_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
	SPI3_Init();
 8002bb2:	f005 fa41 	bl	8008038 <SPI3_Init>

	w25qxx.Lock = 1;
 8002bb6:	4b5a      	ldr	r3, [pc, #360]	; (8002d20 <W25qxx_Init+0x174>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//while(HAL_GetTick() < 100)
	//{
	//	W25qxx_Delay(1);
	//}

	CS_Pin_Set(CS_SET);
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	f005 fa98 	bl	80080f4 <CS_Pin_Set>
	W25qxx_Delay(100);
 8002bc4:	2064      	movs	r0, #100	; 0x64
 8002bc6:	f001 feef 	bl	80049a8 <osDelay>
	uint32_t id;

	id = W25qxx_ReadID();
 8002bca:	f7ff ff1a 	bl	8002a02 <W25qxx_ReadID>
 8002bce:	6078      	str	r0, [r7, #4]
	
	switch(id&0x0000FFFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002bd8:	3b11      	subs	r3, #17
 8002bda:	2b09      	cmp	r3, #9
 8002bdc:	d85f      	bhi.n	8002c9e <W25qxx_Init+0xf2>
 8002bde:	a201      	add	r2, pc, #4	; (adr r2, 8002be4 <W25qxx_Init+0x38>)
 8002be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be4:	08002c91 	.word	0x08002c91
 8002be8:	08002c83 	.word	0x08002c83
 8002bec:	08002c75 	.word	0x08002c75
 8002bf0:	08002c67 	.word	0x08002c67
 8002bf4:	08002c59 	.word	0x08002c59
 8002bf8:	08002c4b 	.word	0x08002c4b
 8002bfc:	08002c3d 	.word	0x08002c3d
 8002c00:	08002c2d 	.word	0x08002c2d
 8002c04:	08002c1d 	.word	0x08002c1d
 8002c08:	08002c0d 	.word	0x08002c0d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8002c0c:	4b44      	ldr	r3, [pc, #272]	; (8002d20 <W25qxx_Init+0x174>)
 8002c0e:	220a      	movs	r2, #10
 8002c10:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8002c12:	4b43      	ldr	r3, [pc, #268]	; (8002d20 <W25qxx_Init+0x174>)
 8002c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c18:	61da      	str	r2, [r3, #28]
			break;
 8002c1a:	e046      	b.n	8002caa <W25qxx_Init+0xfe>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 8002c1c:	4b40      	ldr	r3, [pc, #256]	; (8002d20 <W25qxx_Init+0x174>)
 8002c1e:	2209      	movs	r2, #9
 8002c20:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8002c22:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <W25qxx_Init+0x174>)
 8002c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c28:	61da      	str	r2, [r3, #28]
			break;
 8002c2a:	e03e      	b.n	8002caa <W25qxx_Init+0xfe>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 8002c2c:	4b3c      	ldr	r3, [pc, #240]	; (8002d20 <W25qxx_Init+0x174>)
 8002c2e:	2208      	movs	r2, #8
 8002c30:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8002c32:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <W25qxx_Init+0x174>)
 8002c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c38:	61da      	str	r2, [r3, #28]
			break;
 8002c3a:	e036      	b.n	8002caa <W25qxx_Init+0xfe>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 8002c3c:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <W25qxx_Init+0x174>)
 8002c3e:	2207      	movs	r2, #7
 8002c40:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8002c42:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <W25qxx_Init+0x174>)
 8002c44:	2280      	movs	r2, #128	; 0x80
 8002c46:	61da      	str	r2, [r3, #28]
			break;
 8002c48:	e02f      	b.n	8002caa <W25qxx_Init+0xfe>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 8002c4a:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <W25qxx_Init+0x174>)
 8002c4c:	2206      	movs	r2, #6
 8002c4e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8002c50:	4b33      	ldr	r3, [pc, #204]	; (8002d20 <W25qxx_Init+0x174>)
 8002c52:	2240      	movs	r2, #64	; 0x40
 8002c54:	61da      	str	r2, [r3, #28]
			break;
 8002c56:	e028      	b.n	8002caa <W25qxx_Init+0xfe>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 8002c58:	4b31      	ldr	r3, [pc, #196]	; (8002d20 <W25qxx_Init+0x174>)
 8002c5a:	2205      	movs	r2, #5
 8002c5c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8002c5e:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <W25qxx_Init+0x174>)
 8002c60:	2220      	movs	r2, #32
 8002c62:	61da      	str	r2, [r3, #28]
			break;
 8002c64:	e021      	b.n	8002caa <W25qxx_Init+0xfe>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 8002c66:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <W25qxx_Init+0x174>)
 8002c68:	2204      	movs	r2, #4
 8002c6a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8002c6c:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <W25qxx_Init+0x174>)
 8002c6e:	2210      	movs	r2, #16
 8002c70:	61da      	str	r2, [r3, #28]
			break;
 8002c72:	e01a      	b.n	8002caa <W25qxx_Init+0xfe>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8002c74:	4b2a      	ldr	r3, [pc, #168]	; (8002d20 <W25qxx_Init+0x174>)
 8002c76:	2203      	movs	r2, #3
 8002c78:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8002c7a:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <W25qxx_Init+0x174>)
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	61da      	str	r2, [r3, #28]
			break;
 8002c80:	e013      	b.n	8002caa <W25qxx_Init+0xfe>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 8002c82:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <W25qxx_Init+0x174>)
 8002c84:	2202      	movs	r2, #2
 8002c86:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8002c88:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <W25qxx_Init+0x174>)
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	61da      	str	r2, [r3, #28]
			break;
 8002c8e:	e00c      	b.n	8002caa <W25qxx_Init+0xfe>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 8002c90:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <W25qxx_Init+0x174>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8002c96:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <W25qxx_Init+0x174>)
 8002c98:	2202      	movs	r2, #2
 8002c9a:	61da      	str	r2, [r3, #28]
		break;
 8002c9c:	e005      	b.n	8002caa <W25qxx_Init+0xfe>
		default:
			w25qxx.Lock=0;	
 8002c9e:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <W25qxx_Init+0x174>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e036      	b.n	8002d18 <W25qxx_Init+0x16c>
				
	}		
	w25qxx.PageSize = 256;
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <W25qxx_Init+0x174>)
 8002cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cb0:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <W25qxx_Init+0x174>)
 8002cb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cb8:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8002cba:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <W25qxx_Init+0x174>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <W25qxx_Init+0x174>)
 8002cc2:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8002cc4:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <W25qxx_Init+0x174>)
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	4a15      	ldr	r2, [pc, #84]	; (8002d20 <W25qxx_Init+0x174>)
 8002cca:	6912      	ldr	r2, [r2, #16]
 8002ccc:	fb02 f303 	mul.w	r3, r2, r3
 8002cd0:	4a13      	ldr	r2, [pc, #76]	; (8002d20 <W25qxx_Init+0x174>)
 8002cd2:	8952      	ldrh	r2, [r2, #10]
 8002cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cd8:	4a11      	ldr	r2, [pc, #68]	; (8002d20 <W25qxx_Init+0x174>)
 8002cda:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize*16;
 8002cdc:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <W25qxx_Init+0x174>)
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <W25qxx_Init+0x174>)
 8002ce4:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <W25qxx_Init+0x174>)
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <W25qxx_Init+0x174>)
 8002cec:	6912      	ldr	r2, [r2, #16]
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	0a9b      	lsrs	r3, r3, #10
 8002cf4:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <W25qxx_Init+0x174>)
 8002cf6:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8002cf8:	f7ff feb4 	bl	8002a64 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f7ff fef1 	bl	8002ae4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002d02:	2002      	movs	r0, #2
 8002d04:	f7ff feee 	bl	8002ae4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002d08:	2003      	movs	r0, #3
 8002d0a:	f7ff feeb 	bl	8002ae4 <W25qxx_ReadStatusRegister>

	w25qxx.Lock = 0;
 8002d0e:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <W25qxx_Init+0x174>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return 1;
 8002d16:	2301      	movs	r3, #1
}	
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	2001826c 	.word	0x2001826c

08002d24 <W25qxx_BlockToPage>:
{
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
}

inline uint32_t W25qxx_BlockToPage(uint32_t BlockAddress)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
	return (BlockAddress * w25qxx.BlockSize) / w25qxx.PageSize;
 8002d2c:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <W25qxx_BlockToPage+0x28>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	fb02 f303 	mul.w	r3, r2, r3
 8002d36:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <W25qxx_BlockToPage+0x28>)
 8002d38:	8952      	ldrh	r2, [r2, #10]
 8002d3a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	2001826c 	.word	0x2001826c

08002d50 <W25qxx_WritePage>:

	w25qxx.Lock = 0;
}

void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock == 1)
 8002d5e:	e002      	b.n	8002d66 <W25qxx_WritePage+0x16>
	{
		W25qxx_Delay(1);
 8002d60:	2001      	movs	r0, #1
 8002d62:	f001 fe21 	bl	80049a8 <osDelay>
	while(w25qxx.Lock == 1)
 8002d66:	4b34      	ldr	r3, [pc, #208]	; (8002e38 <W25qxx_WritePage+0xe8>)
 8002d68:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d0f7      	beq.n	8002d60 <W25qxx_WritePage+0x10>
	}
	w25qxx.Lock = 1;
 8002d70:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <W25qxx_WritePage+0xe8>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	4a2e      	ldr	r2, [pc, #184]	; (8002e38 <W25qxx_WritePage+0xe8>)
 8002d80:	8952      	ldrh	r2, [r2, #10]
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d802      	bhi.n	8002d8c <W25qxx_WritePage+0x3c>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <W25qxx_WritePage+0x48>
	{
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002d8c:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <W25qxx_WritePage+0xe8>)
 8002d8e:	895b      	ldrh	r3, [r3, #10]
 8002d90:	461a      	mov	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	603b      	str	r3, [r7, #0]
	}
	if((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <W25qxx_WritePage+0xe8>)
 8002da0:	8952      	ldrh	r2, [r2, #10]
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d905      	bls.n	8002db2 <W25qxx_WritePage+0x62>
	{
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002da6:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <W25qxx_WritePage+0xe8>)
 8002da8:	895b      	ldrh	r3, [r3, #10]
 8002daa:	461a      	mov	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	603b      	str	r3, [r7, #0]
	}

	W25qxx_WaitForWriteEnd();
 8002db2:	f7ff fed7 	bl	8002b64 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8002db6:	f7ff fe85 	bl	8002ac4 <W25qxx_WriteEnable>
	CS_Pin_Set(CS_RESET);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f005 f99a 	bl	80080f4 <CS_Pin_Set>
	W25qxx_Spi(0x02);
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	f7ff fe10 	bl	80029e6 <W25qxx_Spi>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <W25qxx_WritePage+0xe8>)
 8002dc8:	895b      	ldrh	r3, [r3, #10]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	fb03 f202 	mul.w	r2, r3, r2
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID >= W25Q256)
 8002dd8:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <W25qxx_WritePage+0xe8>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d905      	bls.n	8002dec <W25qxx_WritePage+0x9c>
	{
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	0e1b      	lsrs	r3, r3, #24
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fdfd 	bl	80029e6 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	0c1b      	lsrs	r3, r3, #16
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fdf7 	bl	80029e6 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fdf1 	bl	80029e6 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fdec 	bl	80029e6 <W25qxx_Spi>
	SPI3_Transfer(pBuffer, NumByteToWrite_up_to_PageSize);
 8002e0e:	6839      	ldr	r1, [r7, #0]
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f005 f9c3 	bl	800819c <SPI3_Transfer>
	CS_Pin_Set(CS_SET);
 8002e16:	2001      	movs	r0, #1
 8002e18:	f005 f96c 	bl	80080f4 <CS_Pin_Set>
	W25qxx_WaitForWriteEnd();
 8002e1c:	f7ff fea2 	bl	8002b64 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8002e20:	2001      	movs	r0, #1
 8002e22:	f001 fdc1 	bl	80049a8 <osDelay>
	w25qxx.Lock = 0;
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <W25qxx_WritePage+0xe8>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	2001826c 	.word	0x2001826c

08002e3c <W25qxx_WriteBlock>:
		LocalOffset = 0;
	} while(BytesToWrite > 0);
}

void W25qxx_WriteBlock (uint8_t* pBuffer,uint32_t Block_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_BlockSize)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToWrite_up_to_BlockSize==0))
 8002e4a:	4b2c      	ldr	r3, [pc, #176]	; (8002efc <W25qxx_WriteBlock+0xc0>)
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d302      	bcc.n	8002e5a <W25qxx_WriteBlock+0x1e>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d102      	bne.n	8002e60 <W25qxx_WriteBlock+0x24>
	{
		NumByteToWrite_up_to_BlockSize = w25qxx.BlockSize;
 8002e5a:	4b28      	ldr	r3, [pc, #160]	; (8002efc <W25qxx_WriteBlock+0xc0>)
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	603b      	str	r3, [r7, #0]
	}

	if(OffsetInByte>=w25qxx.BlockSize)
 8002e60:	4b26      	ldr	r3, [pc, #152]	; (8002efc <W25qxx_WriteBlock+0xc0>)
 8002e62:	699a      	ldr	r2, [r3, #24]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d943      	bls.n	8002ef2 <W25qxx_WriteBlock+0xb6>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte + NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	441a      	add	r2, r3
 8002e70:	4b22      	ldr	r3, [pc, #136]	; (8002efc <W25qxx_WriteBlock+0xc0>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d905      	bls.n	8002e84 <W25qxx_WriteBlock+0x48>
	{
		BytesToWrite = w25qxx.BlockSize - OffsetInByte;
 8002e78:	4b20      	ldr	r3, [pc, #128]	; (8002efc <W25qxx_WriteBlock+0xc0>)
 8002e7a:	699a      	ldr	r2, [r3, #24]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	e001      	b.n	8002e88 <W25qxx_WriteBlock+0x4c>
	}
	else
	{
		BytesToWrite = NumByteToWrite_up_to_BlockSize;	
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	61bb      	str	r3, [r7, #24]
	}
	StartPage = W25qxx_BlockToPage(Block_Address) + (OffsetInByte / w25qxx.PageSize);
 8002e88:	68b8      	ldr	r0, [r7, #8]
 8002e8a:	f7ff ff4b 	bl	8002d24 <W25qxx_BlockToPage>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <W25qxx_WriteBlock+0xc0>)
 8002e92:	895b      	ldrh	r3, [r3, #10]
 8002e94:	4619      	mov	r1, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8002ea0:	4b16      	ldr	r3, [pc, #88]	; (8002efc <W25qxx_WriteBlock+0xc0>)
 8002ea2:	895b      	ldrh	r3, [r3, #10]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	fbb3 f1f2 	udiv	r1, r3, r2
 8002eac:	fb02 f201 	mul.w	r2, r2, r1
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
	do {
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	69f9      	ldr	r1, [r7, #28]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f7ff ff48 	bl	8002d50 <W25qxx_WritePage>
		StartPage++;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <W25qxx_WriteBlock+0xc0>)
 8002ec8:	895b      	ldrh	r3, [r3, #10]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	1a9a      	subs	r2, r3, r2
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <W25qxx_WriteBlock+0xc0>)
 8002ed8:	895b      	ldrh	r3, [r3, #10]
 8002eda:	461a      	mov	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
	} while(BytesToWrite > 0);
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	dce1      	bgt.n	8002eb4 <W25qxx_WriteBlock+0x78>
 8002ef0:	e000      	b.n	8002ef4 <W25qxx_WriteBlock+0xb8>
		return;
 8002ef2:	bf00      	nop
}
 8002ef4:	3720      	adds	r7, #32
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	2001826c 	.word	0x2001826c

08002f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f04:	4a0e      	ldr	r2, [pc, #56]	; (8002f40 <HAL_Init+0x40>)
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <HAL_Init+0x40>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f10:	4a0b      	ldr	r2, [pc, #44]	; (8002f40 <HAL_Init+0x40>)
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_Init+0x40>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f1c:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <HAL_Init+0x40>)
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_Init+0x40>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f28:	2003      	movs	r0, #3
 8002f2a:	f000 f8ca 	bl	80030c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f006 fb0c 	bl	800954c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f34:	f006 fade 	bl	80094f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00

08002f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_IncTick+0x20>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_IncTick+0x24>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4413      	add	r3, r2
 8002f54:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <HAL_IncTick+0x24>)
 8002f56:	6013      	str	r3, [r2, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000000 	.word	0x20000000
 8002f68:	20018294 	.word	0x20018294

08002f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f9e:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	60d3      	str	r3, [r2, #12]
}
 8002fa4:	bf00      	nop
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <__NVIC_GetPriorityGrouping+0x18>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	f003 0307 	and.w	r3, r3, #7
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	db0b      	blt.n	8002ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe2:	4909      	ldr	r1, [pc, #36]	; (8003008 <__NVIC_EnableIRQ+0x38>)
 8002fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	79fa      	ldrb	r2, [r7, #7]
 8002fec:	f002 021f 	and.w	r2, r2, #31
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	e000e100 	.word	0xe000e100

0800300c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	6039      	str	r1, [r7, #0]
 8003016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301c:	2b00      	cmp	r3, #0
 800301e:	db0a      	blt.n	8003036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003020:	490d      	ldr	r1, [pc, #52]	; (8003058 <__NVIC_SetPriority+0x4c>)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	0112      	lsls	r2, r2, #4
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	440b      	add	r3, r1
 8003030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003034:	e00a      	b.n	800304c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003036:	4909      	ldr	r1, [pc, #36]	; (800305c <__NVIC_SetPriority+0x50>)
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	3b04      	subs	r3, #4
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	0112      	lsls	r2, r2, #4
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	440b      	add	r3, r1
 800304a:	761a      	strb	r2, [r3, #24]
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000e100 	.word	0xe000e100
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003060:	b480      	push	{r7}
 8003062:	b089      	sub	sp, #36	; 0x24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f1c3 0307 	rsb	r3, r3, #7
 800307a:	2b04      	cmp	r3, #4
 800307c:	bf28      	it	cs
 800307e:	2304      	movcs	r3, #4
 8003080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3304      	adds	r3, #4
 8003086:	2b06      	cmp	r3, #6
 8003088:	d902      	bls.n	8003090 <NVIC_EncodePriority+0x30>
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3b03      	subs	r3, #3
 800308e:	e000      	b.n	8003092 <NVIC_EncodePriority+0x32>
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003094:	2201      	movs	r2, #1
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	1e5a      	subs	r2, r3, #1
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	401a      	ands	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a6:	2101      	movs	r1, #1
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa01 f303 	lsl.w	r3, r1, r3
 80030ae:	1e59      	subs	r1, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	4313      	orrs	r3, r2
         );
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3724      	adds	r7, #36	; 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff ff4e 	bl	8002f6c <__NVIC_SetPriorityGrouping>
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ea:	f7ff ff63 	bl	8002fb4 <__NVIC_GetPriorityGrouping>
 80030ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	6978      	ldr	r0, [r7, #20]
 80030f6:	f7ff ffb3 	bl	8003060 <NVIC_EncodePriority>
 80030fa:	4602      	mov	r2, r0
 80030fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff ff82 	bl	800300c <__NVIC_SetPriority>
}
 8003108:	bf00      	nop
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff ff56 	bl	8002fd0 <__NVIC_EnableIRQ>
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <HAL_RCC_GetHCLKFreq+0x14>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	2000000c 	.word	0x2000000c

08003144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003148:	f7ff fff0 	bl	800312c <HAL_RCC_GetHCLKFreq>
 800314c:	4601      	mov	r1, r0
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	0b5b      	lsrs	r3, r3, #13
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	4a03      	ldr	r2, [pc, #12]	; (8003168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40023800 	.word	0x40023800
 8003168:	0800bac8 	.word	0x0800bac8

0800316c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	220f      	movs	r2, #15
 800317a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_RCC_GetClockConfig+0x5c>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0203 	and.w	r2, r3, #3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003188:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <HAL_RCC_GetClockConfig+0x5c>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_RCC_GetClockConfig+0x5c>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	08db      	lsrs	r3, r3, #3
 80031a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031ae:	4b07      	ldr	r3, [pc, #28]	; (80031cc <HAL_RCC_GetClockConfig+0x60>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 020f 	and.w	r2, r3, #15
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	601a      	str	r2, [r3, #0]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40023c00 	.word	0x40023c00

080031d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e01d      	b.n	800321e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f815 	bl	8003226 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f000 f968 	bl	80034e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	68d2      	ldr	r2, [r2, #12]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b06      	cmp	r3, #6
 8003262:	d007      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b02      	cmp	r3, #2
 8003296:	d122      	bne.n	80032de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d11b      	bne.n	80032de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f06f 0202 	mvn.w	r2, #2
 80032ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f8ee 	bl	80034a6 <HAL_TIM_IC_CaptureCallback>
 80032ca:	e005      	b.n	80032d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f8e0 	bl	8003492 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8f1 	bl	80034ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d122      	bne.n	8003332 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d11b      	bne.n	8003332 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f06f 0204 	mvn.w	r2, #4
 8003302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f8c4 	bl	80034a6 <HAL_TIM_IC_CaptureCallback>
 800331e:	e005      	b.n	800332c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f8b6 	bl	8003492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f8c7 	bl	80034ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b08      	cmp	r3, #8
 800333e:	d122      	bne.n	8003386 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b08      	cmp	r3, #8
 800334c:	d11b      	bne.n	8003386 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f06f 0208 	mvn.w	r2, #8
 8003356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2204      	movs	r2, #4
 800335c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f89a 	bl	80034a6 <HAL_TIM_IC_CaptureCallback>
 8003372:	e005      	b.n	8003380 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f88c 	bl	8003492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f89d 	bl	80034ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b10      	cmp	r3, #16
 8003392:	d122      	bne.n	80033da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d11b      	bne.n	80033da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f06f 0210 	mvn.w	r2, #16
 80033aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2208      	movs	r2, #8
 80033b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f870 	bl	80034a6 <HAL_TIM_IC_CaptureCallback>
 80033c6:	e005      	b.n	80033d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f862 	bl	8003492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f873 	bl	80034ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d10e      	bne.n	8003406 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d107      	bne.n	8003406 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f06f 0201 	mvn.w	r2, #1
 80033fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f005 fdbd 	bl	8008f80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003410:	2b80      	cmp	r3, #128	; 0x80
 8003412:	d10e      	bne.n	8003432 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341e:	2b80      	cmp	r3, #128	; 0x80
 8003420:	d107      	bne.n	8003432 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800342a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f903 	bl	8003638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343c:	2b40      	cmp	r3, #64	; 0x40
 800343e:	d10e      	bne.n	800345e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	d107      	bne.n	800345e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f838 	bl	80034ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b20      	cmp	r3, #32
 800346a:	d10e      	bne.n	800348a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b20      	cmp	r3, #32
 8003478:	d107      	bne.n	800348a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f06f 0220 	mvn.w	r2, #32
 8003482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f8cd 	bl	8003624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a40      	ldr	r2, [pc, #256]	; (80035f8 <TIM_Base_SetConfig+0x114>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d013      	beq.n	8003524 <TIM_Base_SetConfig+0x40>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003502:	d00f      	beq.n	8003524 <TIM_Base_SetConfig+0x40>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a3d      	ldr	r2, [pc, #244]	; (80035fc <TIM_Base_SetConfig+0x118>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00b      	beq.n	8003524 <TIM_Base_SetConfig+0x40>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a3c      	ldr	r2, [pc, #240]	; (8003600 <TIM_Base_SetConfig+0x11c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d007      	beq.n	8003524 <TIM_Base_SetConfig+0x40>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a3b      	ldr	r2, [pc, #236]	; (8003604 <TIM_Base_SetConfig+0x120>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d003      	beq.n	8003524 <TIM_Base_SetConfig+0x40>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a3a      	ldr	r2, [pc, #232]	; (8003608 <TIM_Base_SetConfig+0x124>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d108      	bne.n	8003536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a2f      	ldr	r2, [pc, #188]	; (80035f8 <TIM_Base_SetConfig+0x114>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d02b      	beq.n	8003596 <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003544:	d027      	beq.n	8003596 <TIM_Base_SetConfig+0xb2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2c      	ldr	r2, [pc, #176]	; (80035fc <TIM_Base_SetConfig+0x118>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d023      	beq.n	8003596 <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a2b      	ldr	r2, [pc, #172]	; (8003600 <TIM_Base_SetConfig+0x11c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d01f      	beq.n	8003596 <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a2a      	ldr	r2, [pc, #168]	; (8003604 <TIM_Base_SetConfig+0x120>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01b      	beq.n	8003596 <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a29      	ldr	r2, [pc, #164]	; (8003608 <TIM_Base_SetConfig+0x124>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d017      	beq.n	8003596 <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a28      	ldr	r2, [pc, #160]	; (800360c <TIM_Base_SetConfig+0x128>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d013      	beq.n	8003596 <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a27      	ldr	r2, [pc, #156]	; (8003610 <TIM_Base_SetConfig+0x12c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00f      	beq.n	8003596 <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a26      	ldr	r2, [pc, #152]	; (8003614 <TIM_Base_SetConfig+0x130>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00b      	beq.n	8003596 <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a25      	ldr	r2, [pc, #148]	; (8003618 <TIM_Base_SetConfig+0x134>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d007      	beq.n	8003596 <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a24      	ldr	r2, [pc, #144]	; (800361c <TIM_Base_SetConfig+0x138>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d003      	beq.n	8003596 <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a23      	ldr	r2, [pc, #140]	; (8003620 <TIM_Base_SetConfig+0x13c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d108      	bne.n	80035a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a0a      	ldr	r2, [pc, #40]	; (80035f8 <TIM_Base_SetConfig+0x114>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d003      	beq.n	80035dc <TIM_Base_SetConfig+0xf8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <TIM_Base_SetConfig+0x124>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d103      	bne.n	80035e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	615a      	str	r2, [r3, #20]
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40010000 	.word	0x40010000
 80035fc:	40000400 	.word	0x40000400
 8003600:	40000800 	.word	0x40000800
 8003604:	40000c00 	.word	0x40000c00
 8003608:	40010400 	.word	0x40010400
 800360c:	40014000 	.word	0x40014000
 8003610:	40014400 	.word	0x40014400
 8003614:	40014800 	.word	0x40014800
 8003618:	40001800 	.word	0x40001800
 800361c:	40001c00 	.word	0x40001c00
 8003620:	40002000 	.word	0x40002000

08003624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	fa93 f3a3 	rbit	r3, r3
 8003666:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2103      	movs	r1, #3
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	401a      	ands	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	61bb      	str	r3, [r7, #24]
  return result;
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	431a      	orrs	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	601a      	str	r2, [r3, #0]
}
 800369e:	bf00      	nop
 80036a0:	3724      	adds	r7, #36	; 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	43db      	mvns	r3, r3
 80036be:	401a      	ands	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	431a      	orrs	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	605a      	str	r2, [r3, #4]
}
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80036da:	b480      	push	{r7}
 80036dc:	b089      	sub	sp, #36	; 0x24
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	fa93 f3a3 	rbit	r3, r3
 80036f4:	613b      	str	r3, [r7, #16]
  return result;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	2103      	movs	r1, #3
 8003702:	fa01 f303 	lsl.w	r3, r1, r3
 8003706:	43db      	mvns	r3, r3
 8003708:	401a      	ands	r2, r3
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	61bb      	str	r3, [r7, #24]
  return result;
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	fab3 f383 	clz	r3, r3
 800371c:	b2db      	uxtb	r3, r3
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	431a      	orrs	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800372c:	bf00      	nop
 800372e:	3724      	adds	r7, #36	; 0x24
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	; 0x24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	613b      	str	r3, [r7, #16]
  return result;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	2103      	movs	r1, #3
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	401a      	ands	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	61bb      	str	r3, [r7, #24]
  return result;
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	431a      	orrs	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	60da      	str	r2, [r3, #12]
}
 800378a:	bf00      	nop
 800378c:	3724      	adds	r7, #36	; 0x24
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003796:	b480      	push	{r7}
 8003798:	b089      	sub	sp, #36	; 0x24
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a1a      	ldr	r2, [r3, #32]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	613b      	str	r3, [r7, #16]
  return result;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	fab3 f383 	clz	r3, r3
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	210f      	movs	r1, #15
 80037be:	fa01 f303 	lsl.w	r3, r1, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	401a      	ands	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	61bb      	str	r3, [r7, #24]
  return result;
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	fab3 f383 	clz	r3, r3
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	fa01 f303 	lsl.w	r3, r1, r3
 80037e2:	431a      	orrs	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80037e8:	bf00      	nop
 80037ea:	3724      	adds	r7, #36	; 0x24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b089      	sub	sp, #36	; 0x24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	613b      	str	r3, [r7, #16]
  return result;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	210f      	movs	r1, #15
 800381e:	fa01 f303 	lsl.w	r3, r1, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	401a      	ands	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	0a1b      	lsrs	r3, r3, #8
 800382a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	fa93 f3a3 	rbit	r3, r3
 8003832:	61bb      	str	r3, [r7, #24]
  return result;
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800384a:	bf00      	nop
 800384c:	3724      	adds	r7, #36	; 0x24
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b088      	sub	sp, #32
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003860:	2300      	movs	r3, #0
 8003862:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003864:	2300      	movs	r3, #0
 8003866:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	fa93 f3a3 	rbit	r3, r3
 8003874:	613b      	str	r3, [r7, #16]
  return result;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	fab3 f383 	clz	r3, r3
 800387c:	b2db      	uxtb	r3, r3
 800387e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003880:	e050      	b.n	8003924 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	2101      	movs	r1, #1
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d042      	beq.n	800391e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d003      	beq.n	80038a8 <LL_GPIO_Init+0x52>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d10d      	bne.n	80038c4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	461a      	mov	r2, r3
 80038ae:	69b9      	ldr	r1, [r7, #24]
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff12 	bl	80036da <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	461a      	mov	r2, r3
 80038bc:	69b9      	ldr	r1, [r7, #24]
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff fef3 	bl	80036aa <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	461a      	mov	r2, r3
 80038ca:	69b9      	ldr	r1, [r7, #24]
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff ff33 	bl	8003738 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d11a      	bne.n	8003910 <LL_GPIO_Init+0xba>
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	fa93 f3a3 	rbit	r3, r3
 80038e4:	60bb      	str	r3, [r7, #8]
  return result;
 80038e6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80038e8:	fab3 f383 	clz	r3, r3
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b07      	cmp	r3, #7
 80038f0:	d807      	bhi.n	8003902 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	461a      	mov	r2, r3
 80038f8:	69b9      	ldr	r1, [r7, #24]
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ff4b 	bl	8003796 <LL_GPIO_SetAFPin_0_7>
 8003900:	e006      	b.n	8003910 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	461a      	mov	r2, r3
 8003908:	69b9      	ldr	r1, [r7, #24]
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff ff72 	bl	80037f4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	461a      	mov	r2, r3
 8003916:	69b9      	ldr	r1, [r7, #24]
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff fe97 	bl	800364c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3301      	adds	r3, #1
 8003922:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1a7      	bne.n	8003882 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <LL_RCC_GetSysClkSource+0x18>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 030c 	and.w	r3, r3, #12
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800

08003958 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <LL_RCC_GetAHBPrescaler+0x18>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800

08003974 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <LL_RCC_GetAPB1Prescaler+0x18>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800

08003990 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003994:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800399c:	4618      	mov	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800

080039ac <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <LL_RCC_PLL_GetMainSource+0x18>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800

080039c8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80039cc:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <LL_RCC_PLL_GetN+0x18>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	099b      	lsrs	r3, r3, #6
 80039d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	40023800 	.word	0x40023800

080039e4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80039e8:	4b04      	ldr	r3, [pc, #16]	; (80039fc <LL_RCC_PLL_GetP+0x18>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800

08003a00 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003a04:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <LL_RCC_PLL_GetDivider+0x18>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800

08003a1c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003a24:	f000 f820 	bl	8003a68 <RCC_GetSystemClockFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f83e 	bl	8003ab4 <RCC_GetHCLKClockFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 f84c 	bl	8003ae0 <RCC_GetPCLK1ClockFreq>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f858 	bl	8003b08 <RCC_GetPCLK2ClockFreq>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	60da      	str	r2, [r3, #12]
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003a72:	f7ff ff63 	bl	800393c <LL_RCC_GetSysClkSource>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d006      	beq.n	8003a8a <RCC_GetSystemClockFreq+0x22>
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d007      	beq.n	8003a90 <RCC_GetSystemClockFreq+0x28>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <RCC_GetSystemClockFreq+0x44>)
 8003a86:	607b      	str	r3, [r7, #4]
      break;
 8003a88:	e00a      	b.n	8003aa0 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <RCC_GetSystemClockFreq+0x48>)
 8003a8c:	607b      	str	r3, [r7, #4]
      break;
 8003a8e:	e007      	b.n	8003aa0 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003a90:	2008      	movs	r0, #8
 8003a92:	f000 f84d 	bl	8003b30 <RCC_PLL_GetFreqDomain_SYS>
 8003a96:	6078      	str	r0, [r7, #4]
      break;
 8003a98:	e002      	b.n	8003aa0 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003a9a:	4b04      	ldr	r3, [pc, #16]	; (8003aac <RCC_GetSystemClockFreq+0x44>)
 8003a9c:	607b      	str	r3, [r7, #4]
      break;
 8003a9e:	bf00      	nop
  }

  return frequency;
 8003aa0:	687b      	ldr	r3, [r7, #4]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	00f42400 	.word	0x00f42400
 8003ab0:	007a1200 	.word	0x007a1200

08003ab4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003abc:	f7ff ff4c 	bl	8003958 <LL_RCC_GetAHBPrescaler>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	4a04      	ldr	r2, [pc, #16]	; (8003adc <RCC_GetHCLKClockFreq+0x28>)
 8003aca:	5cd3      	ldrb	r3, [r2, r3]
 8003acc:	461a      	mov	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	40d3      	lsrs	r3, r2
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	0800bab8 	.word	0x0800bab8

08003ae0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003ae8:	f7ff ff44 	bl	8003974 <LL_RCC_GetAPB1Prescaler>
 8003aec:	4603      	mov	r3, r0
 8003aee:	0a9b      	lsrs	r3, r3, #10
 8003af0:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <RCC_GetPCLK1ClockFreq+0x24>)
 8003af2:	5cd3      	ldrb	r3, [r2, r3]
 8003af4:	461a      	mov	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	40d3      	lsrs	r3, r2
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	0800bac8 	.word	0x0800bac8

08003b08 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003b10:	f7ff ff3e 	bl	8003990 <LL_RCC_GetAPB2Prescaler>
 8003b14:	4603      	mov	r3, r0
 8003b16:	0b5b      	lsrs	r3, r3, #13
 8003b18:	4a04      	ldr	r2, [pc, #16]	; (8003b2c <RCC_GetPCLK2ClockFreq+0x24>)
 8003b1a:	5cd3      	ldrb	r3, [r2, r3]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	40d3      	lsrs	r3, r2
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	0800bac8 	.word	0x0800bac8

08003b30 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003b30:	b590      	push	{r4, r7, lr}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	2300      	movs	r3, #0
 8003b42:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003b44:	f7ff ff32 	bl	80039ac <LL_RCC_PLL_GetMainSource>
 8003b48:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8003b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b54:	d003      	beq.n	8003b5e <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8003b56:	e005      	b.n	8003b64 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003b58:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003b5a:	617b      	str	r3, [r7, #20]
      break;
 8003b5c:	e005      	b.n	8003b6a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003b5e:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003b60:	617b      	str	r3, [r7, #20]
      break;
 8003b62:	e002      	b.n	8003b6a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003b66:	617b      	str	r3, [r7, #20]
      break;
 8003b68:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d113      	bne.n	8003b98 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003b70:	f7ff ff46 	bl	8003a00 <LL_RCC_PLL_GetDivider>
 8003b74:	4602      	mov	r2, r0
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	fbb3 f4f2 	udiv	r4, r3, r2
 8003b7c:	f7ff ff24 	bl	80039c8 <LL_RCC_PLL_GetN>
 8003b80:	4603      	mov	r3, r0
 8003b82:	fb03 f404 	mul.w	r4, r3, r4
 8003b86:	f7ff ff2d 	bl	80039e4 <LL_RCC_PLL_GetP>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	0c1b      	lsrs	r3, r3, #16
 8003b8e:	3301      	adds	r3, #1
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	fbb4 f3f3 	udiv	r3, r4, r3
 8003b96:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003b98:	693b      	ldr	r3, [r7, #16]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd90      	pop	{r4, r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	00f42400 	.word	0x00f42400
 8003ba8:	007a1200 	.word	0x007a1200

08003bac <LL_RTC_SetHourFormat>:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetHourFormat(RTC_TypeDef *RTCx, uint32_t HourFormat)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	609a      	str	r2, [r3, #8]
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_RTC_GetHourFormat>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  */
__STATIC_INLINE uint32_t LL_RTC_GetHourFormat(RTC_TypeDef *RTCx)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfc:	60da      	str	r2, [r3, #12]
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c18:	60da      	str	r2, [r3, #12]
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <LL_RTC_IsShadowRegBypassEnabled>:
  * @rmtoll CR           BYPSHAD       LL_RTC_IsShadowRegBypassEnabled
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsShadowRegBypassEnabled(RTC_TypeDef *RTCx)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	bf0c      	ite	eq
 8003c3a:	2301      	moveq	r3, #1
 8003c3c:	2300      	movne	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	611a      	str	r2, [r3, #16]
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	611a      	str	r2, [r3, #16]
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	22ff      	movs	r2, #255	; 0xff
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	22ca      	movs	r2, #202	; 0xca
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2253      	movs	r2, #83	; 0x53
 8003cca:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <LL_RTC_TIME_Config>:
  * @param  Minutes Value between Min_Data=0x00 and Max_Data=0x59
  * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TIME_Config(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 8003cd8:	b490      	push	{r4, r7}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;

  temp = Format12_24                                                                                    | \
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	041b      	lsls	r3, r3, #16
 8003cea:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8003cf8:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8003cfe:	ea42 0403 	orr.w	r4, r2, r3
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8003d0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d0e:	ea43 0204 	orr.w	r2, r3, r4
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	601a      	str	r2, [r3, #0]
}
 8003d16:	bf00      	nop
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc90      	pop	{r4, r7}
 8003d1e:	4770      	bx	lr

08003d20 <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 8003d20:	b490      	push	{r4, r7}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;
 8003d2e:	2400      	movs	r4, #0

  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	041b      	lsls	r3, r3, #16
 8003d38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8003d3c:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8003d44:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8003d4a:	ea42 0403 	orr.w	r4, r2, r3

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <LL_RTC_DATE_Config+0x48>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	ea43 0204 	orr.w	r2, r3, r4
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	605a      	str	r2, [r3, #4]
}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc90      	pop	{r4, r7}
 8003d66:	4770      	bx	lr
 8003d68:	ff0000c0 	.word	0xff0000c0

08003d6c <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7c:	2b40      	cmp	r3, #64	; 0x40
 8003d7e:	bf0c      	ite	eq
 8003d80:	2301      	moveq	r3, #1
 8003d82:	2300      	movne	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	bf0c      	ite	eq
 8003da6:	2301      	moveq	r3, #1
 8003da8:	2300      	movne	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	60da      	str	r2, [r3, #12]
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8003de0:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dec:	bf0c      	ite	eq
 8003dee:	2301      	moveq	r3, #1
 8003df0:	2300      	movne	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	e000e010 	.word	0xe000e010

08003e04 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff ff50 	bl	8003cb8 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f971 	bl	8004100 <LL_RTC_EnterInitMode>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d016      	beq.n	8003e52 <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff febe 	bl	8003bac <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ff1c 	bl	8003c74 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4619      	mov	r1, r3
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff ff02 	bl	8003c4c <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff fede 	bl	8003c0a <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff ff23 	bl	8003c9e <LL_RTC_EnableWriteProtection>

  return status;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 8003e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e66:	b089      	sub	sp, #36	; 0x24
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7ff fea9 	bl	8003bd2 <LL_RTC_GetHourFormat>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10c      	bne.n	8003ea0 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e008      	b.n	8003ea0 <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f7ff fe9f 	bl	8003bd2 <LL_RTC_GetHourFormat>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d102      	bne.n	8003ea0 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff ff09 	bl	8003cb8 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 f92a 	bl	8004100 <LL_RTC_EnterInitMode>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d073      	beq.n	8003f9a <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00f      	beq.n	8003ed8 <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6819      	ldr	r1, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	791b      	ldrb	r3, [r3, #4]
 8003ec0:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8003ec6:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	4603      	mov	r3, r0
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7ff ff01 	bl	8003cd8 <LL_RTC_TIME_Config>
 8003ed6:	e04f      	b.n	8003f78 <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681c      	ldr	r4, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	791b      	ldrb	r3, [r3, #4]
 8003ee0:	4a32      	ldr	r2, [pc, #200]	; (8003fac <LL_RTC_TIME_Init+0x148>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	08db      	lsrs	r3, r3, #3
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	b2d8      	uxtb	r0, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	791a      	ldrb	r2, [r3, #4]
 8003ef2:	4b2e      	ldr	r3, [pc, #184]	; (8003fac <LL_RTC_TIME_Init+0x148>)
 8003ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef8:	08d9      	lsrs	r1, r3, #3
 8003efa:	460b      	mov	r3, r1
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	4303      	orrs	r3, r0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	795b      	ldrb	r3, [r3, #5]
 8003f10:	4a26      	ldr	r2, [pc, #152]	; (8003fac <LL_RTC_TIME_Init+0x148>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	08db      	lsrs	r3, r3, #3
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	b2d8      	uxtb	r0, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	795a      	ldrb	r2, [r3, #5]
 8003f22:	4b22      	ldr	r3, [pc, #136]	; (8003fac <LL_RTC_TIME_Init+0x148>)
 8003f24:	fba3 1302 	umull	r1, r3, r3, r2
 8003f28:	08d9      	lsrs	r1, r3, #3
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	4303      	orrs	r3, r0
 8003f38:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8003f3a:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	799b      	ldrb	r3, [r3, #6]
 8003f40:	4a1a      	ldr	r2, [pc, #104]	; (8003fac <LL_RTC_TIME_Init+0x148>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	08db      	lsrs	r3, r3, #3
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	b2d8      	uxtb	r0, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	799a      	ldrb	r2, [r3, #6]
 8003f52:	4b16      	ldr	r3, [pc, #88]	; (8003fac <LL_RTC_TIME_Init+0x148>)
 8003f54:	fba3 1302 	umull	r1, r3, r3, r2
 8003f58:	08d9      	lsrs	r1, r3, #3
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	4303      	orrs	r3, r0
 8003f68:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	4633      	mov	r3, r6
 8003f6e:	462a      	mov	r2, r5
 8003f70:	4621      	mov	r1, r4
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f7ff feb0 	bl	8003cd8 <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTC);
 8003f78:	480d      	ldr	r0, [pc, #52]	; (8003fb0 <LL_RTC_TIME_Init+0x14c>)
 8003f7a:	f7ff fe46 	bl	8003c0a <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f7ff fe51 	bl	8003c26 <LL_RTC_IsShadowRegBypassEnabled>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d105      	bne.n	8003f96 <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 f8ed 	bl	800416a <LL_RTC_WaitForSynchro>
 8003f90:	4603      	mov	r3, r0
 8003f92:	75fb      	strb	r3, [r7, #23]
 8003f94:	e001      	b.n	8003f9a <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 8003f96:	2300      	movs	r3, #0
 8003f98:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7ff fe7f 	bl	8003c9e <LL_RTC_EnableWriteProtection>

  return status;
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003faa:	bf00      	nop
 8003fac:	cccccccd 	.word	0xcccccccd
 8003fb0:	40002800 	.word	0x40002800

08003fb4 <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 8003fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb6:	b089      	sub	sp, #36	; 0x24
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10e      	bne.n	8003fe8 <LL_RTC_DATE_Init+0x34>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	785b      	ldrb	r3, [r3, #1]
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d008      	beq.n	8003fe8 <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	785b      	ldrb	r3, [r3, #1]
 8003fda:	f023 0310 	bic.w	r3, r3, #16
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	330a      	adds	r3, #10
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f7ff fe65 	bl	8003cb8 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f886 	bl	8004100 <LL_RTC_EnterInitMode>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d075      	beq.n	80040e6 <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d010      	beq.n	8004022 <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	4619      	mov	r1, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	789b      	ldrb	r3, [r3, #2]
 800400a:	461a      	mov	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	785b      	ldrb	r3, [r3, #1]
 8004010:	4618      	mov	r0, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	78db      	ldrb	r3, [r3, #3]
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	4603      	mov	r3, r0
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7ff fe80 	bl	8003d20 <LL_RTC_DATE_Config>
 8004020:	e050      	b.n	80040c4 <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	461c      	mov	r4, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	789b      	ldrb	r3, [r3, #2]
 800402c:	4a32      	ldr	r2, [pc, #200]	; (80040f8 <LL_RTC_DATE_Init+0x144>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	08db      	lsrs	r3, r3, #3
 8004034:	b2db      	uxtb	r3, r3
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	b2d8      	uxtb	r0, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	789a      	ldrb	r2, [r3, #2]
 800403e:	4b2e      	ldr	r3, [pc, #184]	; (80040f8 <LL_RTC_DATE_Init+0x144>)
 8004040:	fba3 1302 	umull	r1, r3, r3, r2
 8004044:	08d9      	lsrs	r1, r3, #3
 8004046:	460b      	mov	r3, r1
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	b2db      	uxtb	r3, r3
 8004052:	4303      	orrs	r3, r0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	785b      	ldrb	r3, [r3, #1]
 800405c:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <LL_RTC_DATE_Init+0x144>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	08db      	lsrs	r3, r3, #3
 8004064:	b2db      	uxtb	r3, r3
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	b2d8      	uxtb	r0, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	785a      	ldrb	r2, [r3, #1]
 800406e:	4b22      	ldr	r3, [pc, #136]	; (80040f8 <LL_RTC_DATE_Init+0x144>)
 8004070:	fba3 1302 	umull	r1, r3, r3, r2
 8004074:	08d9      	lsrs	r1, r3, #3
 8004076:	460b      	mov	r3, r1
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	b2db      	uxtb	r3, r3
 8004082:	4303      	orrs	r3, r0
 8004084:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8004086:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	78db      	ldrb	r3, [r3, #3]
 800408c:	4a1a      	ldr	r2, [pc, #104]	; (80040f8 <LL_RTC_DATE_Init+0x144>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	08db      	lsrs	r3, r3, #3
 8004094:	b2db      	uxtb	r3, r3
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	b2d8      	uxtb	r0, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	78da      	ldrb	r2, [r3, #3]
 800409e:	4b16      	ldr	r3, [pc, #88]	; (80040f8 <LL_RTC_DATE_Init+0x144>)
 80040a0:	fba3 1302 	umull	r1, r3, r3, r2
 80040a4:	08d9      	lsrs	r1, r3, #3
 80040a6:	460b      	mov	r3, r1
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	4303      	orrs	r3, r0
 80040b4:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	4633      	mov	r3, r6
 80040ba:	462a      	mov	r2, r5
 80040bc:	4621      	mov	r1, r4
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f7ff fe2e 	bl	8003d20 <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTC);
 80040c4:	480d      	ldr	r0, [pc, #52]	; (80040fc <LL_RTC_DATE_Init+0x148>)
 80040c6:	f7ff fda0 	bl	8003c0a <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f7ff fdab 	bl	8003c26 <LL_RTC_IsShadowRegBypassEnabled>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d105      	bne.n	80040e2 <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f847 	bl	800416a <LL_RTC_WaitForSynchro>
 80040dc:	4603      	mov	r3, r0
 80040de:	75fb      	strb	r3, [r7, #23]
 80040e0:	e001      	b.n	80040e6 <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 80040e2:	2300      	movs	r3, #0
 80040e4:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f7ff fdd9 	bl	8003c9e <LL_RTC_EnableWriteProtection>

  return status;
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f6:	bf00      	nop
 80040f8:	cccccccd 	.word	0xcccccccd
 80040fc:	40002800 	.word	0x40002800

08004100 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8004108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800410c:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 800410e:	2300      	movs	r3, #0
 8004110:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff fe28 	bl	8003d6c <LL_RTC_IsActiveFlag_INIT>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d11e      	bne.n	8004160 <LL_RTC_EnterInitMode+0x60>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fd63 	bl	8003bee <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff fe1f 	bl	8003d6c <LL_RTC_IsActiveFlag_INIT>
 800412e:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8004130:	e010      	b.n	8004154 <LL_RTC_EnterInitMode+0x54>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8004132:	f7ff fe53 	bl	8003ddc <LL_SYSTICK_IsActiveCounterFlag>
 8004136:	4603      	mov	r3, r0
 8004138:	2b01      	cmp	r3, #1
 800413a:	d102      	bne.n	8004142 <LL_RTC_EnterInitMode+0x42>
      {
        timeout --;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3b01      	subs	r3, #1
 8004140:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff fe12 	bl	8003d6c <LL_RTC_IsActiveFlag_INIT>
 8004148:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <LL_RTC_EnterInitMode+0x54>
      {
        status = ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <LL_RTC_EnterInitMode+0x60>
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d1e8      	bne.n	8004132 <LL_RTC_EnterInitMode+0x32>
      }
    }
  }
  return status;
 8004160:	7dfb      	ldrb	r3, [r7, #23]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b086      	sub	sp, #24
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8004172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004176:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8004178:	2300      	movs	r3, #0
 800417a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff fe19 	bl	8003db8 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff fe03 	bl	8003d92 <LL_RTC_IsActiveFlag_RS>
 800418c:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 800418e:	e010      	b.n	80041b2 <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8004190:	f7ff fe24 	bl	8003ddc <LL_SYSTICK_IsActiveCounterFlag>
 8004194:	4603      	mov	r3, r0
 8004196:	2b01      	cmp	r3, #1
 8004198:	d102      	bne.n	80041a0 <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3b01      	subs	r3, #1
 800419e:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fdf6 	bl	8003d92 <LL_RTC_IsActiveFlag_RS>
 80041a6:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <LL_RTC_WaitForSynchro+0x54>
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e8      	bne.n	8004190 <LL_RTC_WaitForSynchro+0x26>
    }
  }

  if (status != ERROR)
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d01e      	beq.n	8004202 <LL_RTC_WaitForSynchro+0x98>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 80041c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041c8:	60fb      	str	r3, [r7, #12]
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff fde1 	bl	8003d92 <LL_RTC_IsActiveFlag_RS>
 80041d0:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 80041d2:	e010      	b.n	80041f6 <LL_RTC_WaitForSynchro+0x8c>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80041d4:	f7ff fe02 	bl	8003ddc <LL_SYSTICK_IsActiveCounterFlag>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d102      	bne.n	80041e4 <LL_RTC_WaitForSynchro+0x7a>
      {
        timeout--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff fdd4 	bl	8003d92 <LL_RTC_IsActiveFlag_RS>
 80041ea:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <LL_RTC_WaitForSynchro+0x8c>
      {
        status = ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <LL_RTC_WaitForSynchro+0x98>
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d1e8      	bne.n	80041d4 <LL_RTC_WaitForSynchro+0x6a>
      }
    }
  }

  return (status);
 8004202:	7dfb      	ldrb	r3, [r7, #23]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d101      	bne.n	8004224 <LL_SPI_IsEnabled+0x18>
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <LL_SPI_IsEnabled+0x1a>
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	611a      	str	r2, [r3, #16]
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff ffd3 	bl	800420c <LL_SPI_IsEnabled>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d139      	bne.n	80042e0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004274:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	6811      	ldr	r1, [r2, #0]
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	6852      	ldr	r2, [r2, #4]
 8004280:	4311      	orrs	r1, r2
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	6892      	ldr	r2, [r2, #8]
 8004286:	4311      	orrs	r1, r2
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	68d2      	ldr	r2, [r2, #12]
 800428c:	4311      	orrs	r1, r2
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	6912      	ldr	r2, [r2, #16]
 8004292:	4311      	orrs	r1, r2
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	6952      	ldr	r2, [r2, #20]
 8004298:	4311      	orrs	r1, r2
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	6992      	ldr	r2, [r2, #24]
 800429e:	4311      	orrs	r1, r2
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	69d2      	ldr	r2, [r2, #28]
 80042a4:	4311      	orrs	r1, r2
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	6a12      	ldr	r2, [r2, #32]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f023 0204 	bic.w	r2, r3, #4
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	0c1b      	lsrs	r3, r3, #16
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ce:	d105      	bne.n	80042dc <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff ffab 	bl	8004232 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80042dc:	2300      	movs	r3, #0
 80042de:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	61da      	str	r2, [r3, #28]
  return status;
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430a:	bf0c      	ite	eq
 800430c:	2301      	moveq	r3, #1
 800430e:	2300      	movne	r3, #0
 8004310:	b2db      	uxtb	r3, r3
}
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	611a      	str	r2, [r3, #16]
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	615a      	str	r2, [r3, #20]
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 800436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004370:	b091      	sub	sp, #68	; 0x44
 8004372:	af00      	add	r7, sp, #0
 8004374:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004376:	63b9      	str	r1, [r7, #56]	; 0x38
 8004378:	637a      	str	r2, [r7, #52]	; 0x34
 800437a:	633b      	str	r3, [r7, #48]	; 0x30
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800437c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004382:	f040 80a7 	bne.w	80044d4 <LL_USART_SetBaudRate+0x168>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004388:	4619      	mov	r1, r3
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	460b      	mov	r3, r1
 8004390:	4614      	mov	r4, r2
 8004392:	18db      	adds	r3, r3, r3
 8004394:	eb44 0404 	adc.w	r4, r4, r4
 8004398:	185b      	adds	r3, r3, r1
 800439a:	eb44 0402 	adc.w	r4, r4, r2
 800439e:	00e6      	lsls	r6, r4, #3
 80043a0:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 80043a4:	00dd      	lsls	r5, r3, #3
 80043a6:	462b      	mov	r3, r5
 80043a8:	4634      	mov	r4, r6
 80043aa:	185d      	adds	r5, r3, r1
 80043ac:	eb44 0602 	adc.w	r6, r4, r2
 80043b0:	4628      	mov	r0, r5
 80043b2:	4631      	mov	r1, r6
 80043b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b6:	f04f 0400 	mov.w	r4, #0
 80043ba:	18db      	adds	r3, r3, r3
 80043bc:	eb44 0404 	adc.w	r4, r4, r4
 80043c0:	461a      	mov	r2, r3
 80043c2:	4623      	mov	r3, r4
 80043c4:	f7fb ff6c 	bl	80002a0 <__aeabi_uldivmod>
 80043c8:	4603      	mov	r3, r0
 80043ca:	460c      	mov	r4, r1
 80043cc:	461a      	mov	r2, r3
 80043ce:	4ba1      	ldr	r3, [pc, #644]	; (8004654 <LL_USART_SetBaudRate+0x2e8>)
 80043d0:	fba3 2302 	umull	r2, r3, r3, r2
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	b29d      	uxth	r5, r3
 80043dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043de:	4619      	mov	r1, r3
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4614      	mov	r4, r2
 80043e8:	18db      	adds	r3, r3, r3
 80043ea:	eb44 0404 	adc.w	r4, r4, r4
 80043ee:	185b      	adds	r3, r3, r1
 80043f0:	eb44 0402 	adc.w	r4, r4, r2
 80043f4:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 80043f8:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 80043fc:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8004400:	4653      	mov	r3, sl
 8004402:	465c      	mov	r4, fp
 8004404:	eb13 0a01 	adds.w	sl, r3, r1
 8004408:	eb44 0b02 	adc.w	fp, r4, r2
 800440c:	4650      	mov	r0, sl
 800440e:	4659      	mov	r1, fp
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	f04f 0400 	mov.w	r4, #0
 8004416:	18db      	adds	r3, r3, r3
 8004418:	eb44 0404 	adc.w	r4, r4, r4
 800441c:	461a      	mov	r2, r3
 800441e:	4623      	mov	r3, r4
 8004420:	f7fb ff3e 	bl	80002a0 <__aeabi_uldivmod>
 8004424:	4603      	mov	r3, r0
 8004426:	460c      	mov	r4, r1
 8004428:	461a      	mov	r2, r3
 800442a:	4b8a      	ldr	r3, [pc, #552]	; (8004654 <LL_USART_SetBaudRate+0x2e8>)
 800442c:	fba3 1302 	umull	r1, r3, r3, r2
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	2164      	movs	r1, #100	; 0x64
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	3332      	adds	r3, #50	; 0x32
 800443e:	4a85      	ldr	r2, [pc, #532]	; (8004654 <LL_USART_SetBaudRate+0x2e8>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	095b      	lsrs	r3, r3, #5
 8004446:	b29b      	uxth	r3, r3
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	b29b      	uxth	r3, r3
 800444c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004450:	b29b      	uxth	r3, r3
 8004452:	442b      	add	r3, r5
 8004454:	b29d      	uxth	r5, r3
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	4619      	mov	r1, r3
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	460b      	mov	r3, r1
 8004460:	4614      	mov	r4, r2
 8004462:	18db      	adds	r3, r3, r3
 8004464:	eb44 0404 	adc.w	r4, r4, r4
 8004468:	185b      	adds	r3, r3, r1
 800446a:	eb44 0402 	adc.w	r4, r4, r2
 800446e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8004472:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8004476:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800447a:	4643      	mov	r3, r8
 800447c:	464c      	mov	r4, r9
 800447e:	eb13 0801 	adds.w	r8, r3, r1
 8004482:	eb44 0902 	adc.w	r9, r4, r2
 8004486:	4640      	mov	r0, r8
 8004488:	4649      	mov	r1, r9
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	f04f 0400 	mov.w	r4, #0
 8004490:	18db      	adds	r3, r3, r3
 8004492:	eb44 0404 	adc.w	r4, r4, r4
 8004496:	461a      	mov	r2, r3
 8004498:	4623      	mov	r3, r4
 800449a:	f7fb ff01 	bl	80002a0 <__aeabi_uldivmod>
 800449e:	4603      	mov	r3, r0
 80044a0:	460c      	mov	r4, r1
 80044a2:	461a      	mov	r2, r3
 80044a4:	4b6b      	ldr	r3, [pc, #428]	; (8004654 <LL_USART_SetBaudRate+0x2e8>)
 80044a6:	fba3 1302 	umull	r1, r3, r3, r2
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	2164      	movs	r1, #100	; 0x64
 80044ae:	fb01 f303 	mul.w	r3, r1, r3
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	3332      	adds	r3, #50	; 0x32
 80044b8:	4a66      	ldr	r2, [pc, #408]	; (8004654 <LL_USART_SetBaudRate+0x2e8>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	442b      	add	r3, r5
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80044d2:	e0ba      	b.n	800464a <LL_USART_SetBaudRate+0x2de>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80044d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d6:	4619      	mov	r1, r3
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	460b      	mov	r3, r1
 80044de:	4614      	mov	r4, r2
 80044e0:	18db      	adds	r3, r3, r3
 80044e2:	eb44 0404 	adc.w	r4, r4, r4
 80044e6:	185b      	adds	r3, r3, r1
 80044e8:	eb44 0402 	adc.w	r4, r4, r2
 80044ec:	00e0      	lsls	r0, r4, #3
 80044ee:	6178      	str	r0, [r7, #20]
 80044f0:	6978      	ldr	r0, [r7, #20]
 80044f2:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80044f6:	6178      	str	r0, [r7, #20]
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004500:	185d      	adds	r5, r3, r1
 8004502:	eb44 0602 	adc.w	r6, r4, r2
 8004506:	4628      	mov	r0, r5
 8004508:	4631      	mov	r1, r6
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	f04f 0400 	mov.w	r4, #0
 8004510:	00a2      	lsls	r2, r4, #2
 8004512:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004516:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800451a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004520:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004524:	f7fb febc 	bl	80002a0 <__aeabi_uldivmod>
 8004528:	4603      	mov	r3, r0
 800452a:	460c      	mov	r4, r1
 800452c:	461a      	mov	r2, r3
 800452e:	4b49      	ldr	r3, [pc, #292]	; (8004654 <LL_USART_SetBaudRate+0x2e8>)
 8004530:	fba3 2302 	umull	r2, r3, r3, r2
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	b29b      	uxth	r3, r3
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	b29d      	uxth	r5, r3
 800453c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453e:	4619      	mov	r1, r3
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	460b      	mov	r3, r1
 8004546:	4614      	mov	r4, r2
 8004548:	18db      	adds	r3, r3, r3
 800454a:	eb44 0404 	adc.w	r4, r4, r4
 800454e:	185b      	adds	r3, r3, r1
 8004550:	eb44 0402 	adc.w	r4, r4, r2
 8004554:	00e0      	lsls	r0, r4, #3
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004568:	eb13 0801 	adds.w	r8, r3, r1
 800456c:	eb44 0902 	adc.w	r9, r4, r2
 8004570:	4640      	mov	r0, r8
 8004572:	4649      	mov	r1, r9
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	f04f 0400 	mov.w	r4, #0
 800457a:	00a2      	lsls	r2, r4, #2
 800457c:	627a      	str	r2, [r7, #36]	; 0x24
 800457e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004580:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004584:	627a      	str	r2, [r7, #36]	; 0x24
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	623b      	str	r3, [r7, #32]
 800458a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800458e:	f7fb fe87 	bl	80002a0 <__aeabi_uldivmod>
 8004592:	4603      	mov	r3, r0
 8004594:	460c      	mov	r4, r1
 8004596:	461a      	mov	r2, r3
 8004598:	4b2e      	ldr	r3, [pc, #184]	; (8004654 <LL_USART_SetBaudRate+0x2e8>)
 800459a:	fba3 1302 	umull	r1, r3, r3, r2
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	2164      	movs	r1, #100	; 0x64
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	3332      	adds	r3, #50	; 0x32
 80045ac:	4a29      	ldr	r2, [pc, #164]	; (8004654 <LL_USART_SetBaudRate+0x2e8>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	442b      	add	r3, r5
 80045be:	b29d      	uxth	r5, r3
 80045c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c2:	4619      	mov	r1, r3
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4614      	mov	r4, r2
 80045cc:	18db      	adds	r3, r3, r3
 80045ce:	eb44 0404 	adc.w	r4, r4, r4
 80045d2:	185b      	adds	r3, r3, r1
 80045d4:	eb44 0402 	adc.w	r4, r4, r2
 80045d8:	00e0      	lsls	r0, r4, #3
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	e897 0018 	ldmia.w	r7, {r3, r4}
 80045ec:	eb13 0801 	adds.w	r8, r3, r1
 80045f0:	eb44 0902 	adc.w	r9, r4, r2
 80045f4:	4640      	mov	r0, r8
 80045f6:	4649      	mov	r1, r9
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	f04f 0400 	mov.w	r4, #0
 80045fe:	00a2      	lsls	r2, r4, #2
 8004600:	61fa      	str	r2, [r7, #28]
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004608:	61fa      	str	r2, [r7, #28]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004612:	f7fb fe45 	bl	80002a0 <__aeabi_uldivmod>
 8004616:	4603      	mov	r3, r0
 8004618:	460c      	mov	r4, r1
 800461a:	461a      	mov	r2, r3
 800461c:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <LL_USART_SetBaudRate+0x2e8>)
 800461e:	fba3 1302 	umull	r1, r3, r3, r2
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	2164      	movs	r1, #100	; 0x64
 8004626:	fb01 f303 	mul.w	r3, r1, r3
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	3332      	adds	r3, #50	; 0x32
 8004630:	4a08      	ldr	r2, [pc, #32]	; (8004654 <LL_USART_SetBaudRate+0x2e8>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	b29b      	uxth	r3, r3
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	b29b      	uxth	r3, r3
 8004640:	442b      	add	r3, r5
 8004642:	b29b      	uxth	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004648:	609a      	str	r2, [r3, #8]
}
 800464a:	bf00      	nop
 800464c:	3744      	adds	r7, #68	; 0x44
 800464e:	46bd      	mov	sp, r7
 8004650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004654:	51eb851f 	.word	0x51eb851f

08004658 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004666:	2300      	movs	r3, #0
 8004668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff fe43 	bl	80042f6 <LL_USART_IsEnabled>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d15e      	bne.n	8004734 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800467e:	f023 030c 	bic.w	r3, r3, #12
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	6851      	ldr	r1, [r2, #4]
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	68d2      	ldr	r2, [r2, #12]
 800468a:	4311      	orrs	r1, r2
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	6912      	ldr	r2, [r2, #16]
 8004690:	4311      	orrs	r1, r2
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	6992      	ldr	r2, [r2, #24]
 8004696:	430a      	orrs	r2, r1
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	4619      	mov	r1, r3
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff fe3a 	bl	800431e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	4619      	mov	r1, r3
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff fe47 	bl	8004344 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80046b6:	f107 0308 	add.w	r3, r7, #8
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff f9ae 	bl	8003a1c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a1f      	ldr	r2, [pc, #124]	; (8004740 <LL_USART_Init+0xe8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d102      	bne.n	80046ce <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	61bb      	str	r3, [r7, #24]
 80046cc:	e021      	b.n	8004712 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a1c      	ldr	r2, [pc, #112]	; (8004744 <LL_USART_Init+0xec>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d102      	bne.n	80046dc <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	e01a      	b.n	8004712 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <LL_USART_Init+0xf0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d102      	bne.n	80046ea <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	61bb      	str	r3, [r7, #24]
 80046e8:	e013      	b.n	8004712 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a17      	ldr	r2, [pc, #92]	; (800474c <LL_USART_Init+0xf4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d102      	bne.n	80046f8 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	e00c      	b.n	8004712 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a15      	ldr	r2, [pc, #84]	; (8004750 <LL_USART_Init+0xf8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d102      	bne.n	8004706 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	e005      	b.n	8004712 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a12      	ldr	r2, [pc, #72]	; (8004754 <LL_USART_Init+0xfc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d101      	bne.n	8004712 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00d      	beq.n	8004734 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d009      	beq.n	8004734 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004720:	2300      	movs	r3, #0
 8004722:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	699a      	ldr	r2, [r3, #24]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69b9      	ldr	r1, [r7, #24]
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff fe1c 	bl	800436c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004734:	7ffb      	ldrb	r3, [r7, #31]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40011000 	.word	0x40011000
 8004744:	40004400 	.word	0x40004400
 8004748:	40004800 	.word	0x40004800
 800474c:	40011400 	.word	0x40011400
 8004750:	40004c00 	.word	0x40004c00
 8004754:	40005000 	.word	0x40005000

08004758 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004760:	4a04      	ldr	r2, [pc, #16]	; (8004774 <LL_SetSystemCoreClock+0x1c>)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6013      	str	r3, [r2, #0]
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	2000000c 	.word	0x2000000c

08004778 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800477c:	bf00      	nop
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800478e:	f3ef 8305 	mrs	r3, IPSR
 8004792:	60bb      	str	r3, [r7, #8]
  return(result);
 8004794:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10f      	bne.n	80047ba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800479a:	f3ef 8310 	mrs	r3, PRIMASK
 800479e:	607b      	str	r3, [r7, #4]
  return(result);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d105      	bne.n	80047b2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047a6:	f3ef 8311 	mrs	r3, BASEPRI
 80047aa:	603b      	str	r3, [r7, #0]
  return(result);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d007      	beq.n	80047c2 <osKernelInitialize+0x3a>
 80047b2:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <osKernelInitialize+0x64>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d103      	bne.n	80047c2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80047ba:	f06f 0305 	mvn.w	r3, #5
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	e00c      	b.n	80047dc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80047c2:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <osKernelInitialize+0x64>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d105      	bne.n	80047d6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80047ca:	4b08      	ldr	r3, [pc, #32]	; (80047ec <osKernelInitialize+0x64>)
 80047cc:	2201      	movs	r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	e002      	b.n	80047dc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80047d6:	f04f 33ff 	mov.w	r3, #4294967295
 80047da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80047dc:	68fb      	ldr	r3, [r7, #12]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	20000648 	.word	0x20000648

080047f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047f6:	f3ef 8305 	mrs	r3, IPSR
 80047fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80047fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10f      	bne.n	8004822 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004802:	f3ef 8310 	mrs	r3, PRIMASK
 8004806:	607b      	str	r3, [r7, #4]
  return(result);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d105      	bne.n	800481a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800480e:	f3ef 8311 	mrs	r3, BASEPRI
 8004812:	603b      	str	r3, [r7, #0]
  return(result);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <osKernelStart+0x3a>
 800481a:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <osKernelStart+0x68>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d103      	bne.n	800482a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004822:	f06f 0305 	mvn.w	r3, #5
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	e010      	b.n	800484c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800482a:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <osKernelStart+0x68>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d109      	bne.n	8004846 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004832:	f7ff ffa1 	bl	8004778 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004836:	4b08      	ldr	r3, [pc, #32]	; (8004858 <osKernelStart+0x68>)
 8004838:	2202      	movs	r2, #2
 800483a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800483c:	f001 fcf6 	bl	800622c <vTaskStartScheduler>
      stat = osOK;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e002      	b.n	800484c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004846:	f04f 33ff 	mov.w	r3, #4294967295
 800484a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800484c:	68fb      	ldr	r3, [r7, #12]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000648 	.word	0x20000648

0800485c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800485c:	b580      	push	{r7, lr}
 800485e:	b090      	sub	sp, #64	; 0x40
 8004860:	af04      	add	r7, sp, #16
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800486c:	f3ef 8305 	mrs	r3, IPSR
 8004870:	61fb      	str	r3, [r7, #28]
  return(result);
 8004872:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004874:	2b00      	cmp	r3, #0
 8004876:	f040 808f 	bne.w	8004998 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800487a:	f3ef 8310 	mrs	r3, PRIMASK
 800487e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d105      	bne.n	8004892 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004886:	f3ef 8311 	mrs	r3, BASEPRI
 800488a:	617b      	str	r3, [r7, #20]
  return(result);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <osThreadNew+0x3e>
 8004892:	4b44      	ldr	r3, [pc, #272]	; (80049a4 <osThreadNew+0x148>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d07e      	beq.n	8004998 <osThreadNew+0x13c>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d07b      	beq.n	8004998 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80048a0:	2380      	movs	r3, #128	; 0x80
 80048a2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80048a4:	2318      	movs	r3, #24
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80048ac:	f04f 33ff 	mov.w	r3, #4294967295
 80048b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d045      	beq.n	8004944 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <osThreadNew+0x6a>
        name = attr->name;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <osThreadNew+0x90>
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	2b38      	cmp	r3, #56	; 0x38
 80048de:	d805      	bhi.n	80048ec <osThreadNew+0x90>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <osThreadNew+0x94>
        return (NULL);
 80048ec:	2300      	movs	r3, #0
 80048ee:	e054      	b.n	800499a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00e      	beq.n	8004926 <osThreadNew+0xca>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b5b      	cmp	r3, #91	; 0x5b
 800490e:	d90a      	bls.n	8004926 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004914:	2b00      	cmp	r3, #0
 8004916:	d006      	beq.n	8004926 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <osThreadNew+0xca>
        mem = 1;
 8004920:	2301      	movs	r3, #1
 8004922:	623b      	str	r3, [r7, #32]
 8004924:	e010      	b.n	8004948 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10c      	bne.n	8004948 <osThreadNew+0xec>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d108      	bne.n	8004948 <osThreadNew+0xec>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d104      	bne.n	8004948 <osThreadNew+0xec>
          mem = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	623b      	str	r3, [r7, #32]
 8004942:	e001      	b.n	8004948 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d110      	bne.n	8004970 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004956:	9202      	str	r2, [sp, #8]
 8004958:	9301      	str	r3, [sp, #4]
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f001 fa1d 	bl	8005da4 <xTaskCreateStatic>
 800496a:	4603      	mov	r3, r0
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	e013      	b.n	8004998 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d110      	bne.n	8004998 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	b29a      	uxth	r2, r3
 800497a:	f107 0310 	add.w	r3, r7, #16
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f001 fa65 	bl	8005e58 <xTaskCreate>
 800498e:	4603      	mov	r3, r0
 8004990:	2b01      	cmp	r3, #1
 8004992:	d001      	beq.n	8004998 <osThreadNew+0x13c>
          hTask = NULL;
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004998:	693b      	ldr	r3, [r7, #16]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3730      	adds	r7, #48	; 0x30
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000648 	.word	0x20000648

080049a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049b0:	f3ef 8305 	mrs	r3, IPSR
 80049b4:	613b      	str	r3, [r7, #16]
  return(result);
 80049b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10f      	bne.n	80049dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049bc:	f3ef 8310 	mrs	r3, PRIMASK
 80049c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d105      	bne.n	80049d4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049c8:	f3ef 8311 	mrs	r3, BASEPRI
 80049cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d007      	beq.n	80049e4 <osDelay+0x3c>
 80049d4:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <osDelay+0x58>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d103      	bne.n	80049e4 <osDelay+0x3c>
    stat = osErrorISR;
 80049dc:	f06f 0305 	mvn.w	r3, #5
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	e007      	b.n	80049f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f001 fbe8 	bl	80061c4 <vTaskDelay>
    }
  }

  return (stat);
 80049f4:	697b      	ldr	r3, [r7, #20]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000648 	.word	0x20000648

08004a04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4a07      	ldr	r2, [pc, #28]	; (8004a30 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	4a06      	ldr	r2, [pc, #24]	; (8004a34 <vApplicationGetIdleTaskMemory+0x30>)
 8004a1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2280      	movs	r2, #128	; 0x80
 8004a20:	601a      	str	r2, [r3, #0]
}
 8004a22:	bf00      	nop
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	2000064c 	.word	0x2000064c
 8004a34:	200006a8 	.word	0x200006a8

08004a38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a07      	ldr	r2, [pc, #28]	; (8004a64 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	4a06      	ldr	r2, [pc, #24]	; (8004a68 <vApplicationGetTimerTaskMemory+0x30>)
 8004a4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a56:	601a      	str	r2, [r3, #0]
}
 8004a58:	bf00      	nop
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	200008a8 	.word	0x200008a8
 8004a68:	20000904 	.word	0x20000904

08004a6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f103 0208 	add.w	r2, r3, #8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f04f 32ff 	mov.w	r2, #4294967295
 8004a84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f103 0208 	add.w	r2, r3, #8
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f103 0208 	add.w	r2, r3, #8
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b085      	sub	sp, #20
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	601a      	str	r2, [r3, #0]
}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b24:	d103      	bne.n	8004b2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	e00c      	b.n	8004b48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3308      	adds	r3, #8
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e002      	b.n	8004b3c <vListInsert+0x2e>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d9f6      	bls.n	8004b36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	601a      	str	r2, [r3, #0]
}
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6892      	ldr	r2, [r2, #8]
 8004b96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6852      	ldr	r2, [r2, #4]
 8004ba0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d103      	bne.n	8004bb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	1e5a      	subs	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3b04      	subs	r3, #4
 8004be4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	3b04      	subs	r3, #4
 8004bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f023 0201 	bic.w	r2, r3, #1
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3b04      	subs	r3, #4
 8004c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c04:	4a0c      	ldr	r2, [pc, #48]	; (8004c38 <pxPortInitialiseStack+0x64>)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3b14      	subs	r3, #20
 8004c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3b04      	subs	r3, #4
 8004c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f06f 0202 	mvn.w	r2, #2
 8004c22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3b20      	subs	r3, #32
 8004c28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	08004c3d 	.word	0x08004c3d

08004c3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c46:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <prvTaskExitError+0x50>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4e:	d009      	beq.n	8004c64 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	e7fe      	b.n	8004c62 <prvTaskExitError+0x26>
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c76:	bf00      	nop
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0fc      	beq.n	8004c78 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	20000004 	.word	0x20000004

08004c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <pxCurrentTCBConst2>)
 8004c92:	6819      	ldr	r1, [r3, #0]
 8004c94:	6808      	ldr	r0, [r1, #0]
 8004c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9a:	f380 8809 	msr	PSP, r0
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f380 8811 	msr	BASEPRI, r0
 8004caa:	4770      	bx	lr
 8004cac:	f3af 8000 	nop.w

08004cb0 <pxCurrentTCBConst2>:
 8004cb0:	20008524 	.word	0x20008524
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop

08004cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004cb8:	4808      	ldr	r0, [pc, #32]	; (8004cdc <prvPortStartFirstTask+0x24>)
 8004cba:	6800      	ldr	r0, [r0, #0]
 8004cbc:	6800      	ldr	r0, [r0, #0]
 8004cbe:	f380 8808 	msr	MSP, r0
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f380 8814 	msr	CONTROL, r0
 8004cca:	b662      	cpsie	i
 8004ccc:	b661      	cpsie	f
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	df00      	svc	0
 8004cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004cda:	bf00      	nop
 8004cdc:	e000ed08 	.word	0xe000ed08

08004ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ce6:	4b44      	ldr	r3, [pc, #272]	; (8004df8 <xPortStartScheduler+0x118>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a44      	ldr	r2, [pc, #272]	; (8004dfc <xPortStartScheduler+0x11c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d109      	bne.n	8004d04 <xPortStartScheduler+0x24>
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	e7fe      	b.n	8004d02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d04:	4b3c      	ldr	r3, [pc, #240]	; (8004df8 <xPortStartScheduler+0x118>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a3d      	ldr	r2, [pc, #244]	; (8004e00 <xPortStartScheduler+0x120>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d109      	bne.n	8004d22 <xPortStartScheduler+0x42>
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	e7fe      	b.n	8004d20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d22:	4b38      	ldr	r3, [pc, #224]	; (8004e04 <xPortStartScheduler+0x124>)
 8004d24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	22ff      	movs	r2, #255	; 0xff
 8004d32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	4b30      	ldr	r3, [pc, #192]	; (8004e08 <xPortStartScheduler+0x128>)
 8004d48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d4a:	4b30      	ldr	r3, [pc, #192]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004d4c:	2207      	movs	r2, #7
 8004d4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d50:	e009      	b.n	8004d66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004d52:	4b2e      	ldr	r3, [pc, #184]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	4a2c      	ldr	r2, [pc, #176]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004d5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6e:	2b80      	cmp	r3, #128	; 0x80
 8004d70:	d0ef      	beq.n	8004d52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d72:	4b26      	ldr	r3, [pc, #152]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f1c3 0307 	rsb	r3, r3, #7
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d009      	beq.n	8004d92 <xPortStartScheduler+0xb2>
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	e7fe      	b.n	8004d90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d92:	4b1e      	ldr	r3, [pc, #120]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004d9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d9c:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004da4:	4a19      	ldr	r2, [pc, #100]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004da6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004db0:	4a17      	ldr	r2, [pc, #92]	; (8004e10 <xPortStartScheduler+0x130>)
 8004db2:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <xPortStartScheduler+0x130>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004dbc:	4a14      	ldr	r2, [pc, #80]	; (8004e10 <xPortStartScheduler+0x130>)
 8004dbe:	4b14      	ldr	r3, [pc, #80]	; (8004e10 <xPortStartScheduler+0x130>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004dc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004dc8:	f000 f8d6 	bl	8004f78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004dcc:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <xPortStartScheduler+0x134>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004dd2:	f000 f8f5 	bl	8004fc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004dd6:	4a10      	ldr	r2, [pc, #64]	; (8004e18 <xPortStartScheduler+0x138>)
 8004dd8:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <xPortStartScheduler+0x138>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004de0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004de2:	f7ff ff69 	bl	8004cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004de6:	f001 fbf7 	bl	80065d8 <vTaskSwitchContext>
	prvTaskExitError();
 8004dea:	f7ff ff27 	bl	8004c3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	e000ed00 	.word	0xe000ed00
 8004dfc:	410fc271 	.word	0x410fc271
 8004e00:	410fc270 	.word	0x410fc270
 8004e04:	e000e400 	.word	0xe000e400
 8004e08:	20000d04 	.word	0x20000d04
 8004e0c:	20000d08 	.word	0x20000d08
 8004e10:	e000ed20 	.word	0xe000ed20
 8004e14:	20000004 	.word	0x20000004
 8004e18:	e000ef34 	.word	0xe000ef34

08004e1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e34:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <vPortEnterCritical+0x54>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	4a0d      	ldr	r2, [pc, #52]	; (8004e70 <vPortEnterCritical+0x54>)
 8004e3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e3e:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <vPortEnterCritical+0x54>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d10e      	bne.n	8004e64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e46:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <vPortEnterCritical+0x58>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d009      	beq.n	8004e64 <vPortEnterCritical+0x48>
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	603b      	str	r3, [r7, #0]
 8004e62:	e7fe      	b.n	8004e62 <vPortEnterCritical+0x46>
	}
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	20000004 	.word	0x20000004
 8004e74:	e000ed04 	.word	0xe000ed04

08004e78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e7e:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <vPortExitCritical+0x4c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <vPortExitCritical+0x22>
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	607b      	str	r3, [r7, #4]
 8004e98:	e7fe      	b.n	8004e98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <vPortExitCritical+0x4c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <vPortExitCritical+0x4c>)
 8004ea2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ea4:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <vPortExitCritical+0x4c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d104      	bne.n	8004eb6 <vPortExitCritical+0x3e>
 8004eac:	2300      	movs	r3, #0
 8004eae:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	20000004 	.word	0x20000004
	...

08004ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ed0:	f3ef 8009 	mrs	r0, PSP
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <pxCurrentTCBConst>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	f01e 0f10 	tst.w	lr, #16
 8004ee0:	bf08      	it	eq
 8004ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eea:	6010      	str	r0, [r2, #0]
 8004eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ef4:	f380 8811 	msr	BASEPRI, r0
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f001 fb6a 	bl	80065d8 <vTaskSwitchContext>
 8004f04:	f04f 0000 	mov.w	r0, #0
 8004f08:	f380 8811 	msr	BASEPRI, r0
 8004f0c:	bc09      	pop	{r0, r3}
 8004f0e:	6819      	ldr	r1, [r3, #0]
 8004f10:	6808      	ldr	r0, [r1, #0]
 8004f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f16:	f01e 0f10 	tst.w	lr, #16
 8004f1a:	bf08      	it	eq
 8004f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f20:	f380 8809 	msr	PSP, r0
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	f3af 8000 	nop.w

08004f30 <pxCurrentTCBConst>:
 8004f30:	20008524 	.word	0x20008524
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop

08004f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f50:	f001 fa8a 	bl	8006468 <xTaskIncrementTick>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f5a:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <SysTick_Handler+0x3c>)
 8004f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	2300      	movs	r3, #0
 8004f64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	e000ed04 	.word	0xe000ed04

08004f78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <vPortSetupTimerInterrupt+0x34>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f82:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <vPortSetupTimerInterrupt+0x38>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f88:	4a0a      	ldr	r2, [pc, #40]	; (8004fb4 <vPortSetupTimerInterrupt+0x3c>)
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <vPortSetupTimerInterrupt+0x40>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	490b      	ldr	r1, [pc, #44]	; (8004fbc <vPortSetupTimerInterrupt+0x44>)
 8004f90:	fba1 1303 	umull	r1, r3, r1, r3
 8004f94:	099b      	lsrs	r3, r3, #6
 8004f96:	3b01      	subs	r3, #1
 8004f98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f9a:	4b04      	ldr	r3, [pc, #16]	; (8004fac <vPortSetupTimerInterrupt+0x34>)
 8004f9c:	2207      	movs	r2, #7
 8004f9e:	601a      	str	r2, [r3, #0]
}
 8004fa0:	bf00      	nop
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	e000e010 	.word	0xe000e010
 8004fb0:	e000e018 	.word	0xe000e018
 8004fb4:	e000e014 	.word	0xe000e014
 8004fb8:	2000000c 	.word	0x2000000c
 8004fbc:	10624dd3 	.word	0x10624dd3

08004fc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004fc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004fd0 <vPortEnableVFP+0x10>
 8004fc4:	6801      	ldr	r1, [r0, #0]
 8004fc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004fca:	6001      	str	r1, [r0, #0]
 8004fcc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fce:	bf00      	nop
 8004fd0:	e000ed88 	.word	0xe000ed88

08004fd4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fda:	f3ef 8305 	mrs	r3, IPSR
 8004fde:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b0f      	cmp	r3, #15
 8004fe4:	d913      	bls.n	800500e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fe6:	4a16      	ldr	r2, [pc, #88]	; (8005040 <vPortValidateInterruptPriority+0x6c>)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4413      	add	r3, r2
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ff0:	4b14      	ldr	r3, [pc, #80]	; (8005044 <vPortValidateInterruptPriority+0x70>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	7afa      	ldrb	r2, [r7, #11]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d209      	bcs.n	800500e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	607b      	str	r3, [r7, #4]
 800500c:	e7fe      	b.n	800500c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800500e:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <vPortValidateInterruptPriority+0x74>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005016:	4b0d      	ldr	r3, [pc, #52]	; (800504c <vPortValidateInterruptPriority+0x78>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d909      	bls.n	8005032 <vPortValidateInterruptPriority+0x5e>
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	e7fe      	b.n	8005030 <vPortValidateInterruptPriority+0x5c>
	}
 8005032:	bf00      	nop
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	e000e3f0 	.word	0xe000e3f0
 8005044:	20000d04 	.word	0x20000d04
 8005048:	e000ed0c 	.word	0xe000ed0c
 800504c:	20000d08 	.word	0x20000d08

08005050 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08a      	sub	sp, #40	; 0x28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005058:	2300      	movs	r3, #0
 800505a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800505c:	f001 f94a 	bl	80062f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005060:	4b57      	ldr	r3, [pc, #348]	; (80051c0 <pvPortMalloc+0x170>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005068:	f000 f90c 	bl	8005284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800506c:	4b55      	ldr	r3, [pc, #340]	; (80051c4 <pvPortMalloc+0x174>)
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4013      	ands	r3, r2
 8005074:	2b00      	cmp	r3, #0
 8005076:	f040 808c 	bne.w	8005192 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01c      	beq.n	80050ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005080:	2208      	movs	r2, #8
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4413      	add	r3, r2
 8005086:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	2b00      	cmp	r3, #0
 8005090:	d013      	beq.n	80050ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f023 0307 	bic.w	r3, r3, #7
 8005098:	3308      	adds	r3, #8
 800509a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <pvPortMalloc+0x6a>
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	e7fe      	b.n	80050b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d068      	beq.n	8005192 <pvPortMalloc+0x142>
 80050c0:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <pvPortMalloc+0x178>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d863      	bhi.n	8005192 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050ca:	4b40      	ldr	r3, [pc, #256]	; (80051cc <pvPortMalloc+0x17c>)
 80050cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050ce:	4b3f      	ldr	r3, [pc, #252]	; (80051cc <pvPortMalloc+0x17c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050d4:	e004      	b.n	80050e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d203      	bcs.n	80050f2 <pvPortMalloc+0xa2>
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f1      	bne.n	80050d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050f2:	4b33      	ldr	r3, [pc, #204]	; (80051c0 <pvPortMalloc+0x170>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d04a      	beq.n	8005192 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2208      	movs	r2, #8
 8005102:	4413      	add	r3, r2
 8005104:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	1ad2      	subs	r2, r2, r3
 8005116:	2308      	movs	r3, #8
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	429a      	cmp	r2, r3
 800511c:	d91e      	bls.n	800515c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800511e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4413      	add	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	2b00      	cmp	r3, #0
 800512e:	d009      	beq.n	8005144 <pvPortMalloc+0xf4>
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	e7fe      	b.n	8005142 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	1ad2      	subs	r2, r2, r3
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005156:	69b8      	ldr	r0, [r7, #24]
 8005158:	f000 f8f6 	bl	8005348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800515c:	4b1a      	ldr	r3, [pc, #104]	; (80051c8 <pvPortMalloc+0x178>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <pvPortMalloc+0x178>)
 8005168:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800516a:	4b17      	ldr	r3, [pc, #92]	; (80051c8 <pvPortMalloc+0x178>)
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4b18      	ldr	r3, [pc, #96]	; (80051d0 <pvPortMalloc+0x180>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d203      	bcs.n	800517e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005176:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <pvPortMalloc+0x178>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a15      	ldr	r2, [pc, #84]	; (80051d0 <pvPortMalloc+0x180>)
 800517c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <pvPortMalloc+0x174>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	431a      	orrs	r2, r3
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005192:	f001 f8bd 	bl	8006310 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	2b00      	cmp	r3, #0
 800519e:	d009      	beq.n	80051b4 <pvPortMalloc+0x164>
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	e7fe      	b.n	80051b2 <pvPortMalloc+0x162>
	return pvReturn;
 80051b4:	69fb      	ldr	r3, [r7, #28]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3728      	adds	r7, #40	; 0x28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20008514 	.word	0x20008514
 80051c4:	20008520 	.word	0x20008520
 80051c8:	20008518 	.word	0x20008518
 80051cc:	2000850c 	.word	0x2000850c
 80051d0:	2000851c 	.word	0x2000851c

080051d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d046      	beq.n	8005274 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051e6:	2308      	movs	r3, #8
 80051e8:	425b      	negs	r3, r3
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4413      	add	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	4b20      	ldr	r3, [pc, #128]	; (800527c <vPortFree+0xa8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d109      	bne.n	8005216 <vPortFree+0x42>
 8005202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	e7fe      	b.n	8005214 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <vPortFree+0x5e>
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	e7fe      	b.n	8005230 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	4b11      	ldr	r3, [pc, #68]	; (800527c <vPortFree+0xa8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4013      	ands	r3, r2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d019      	beq.n	8005274 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d115      	bne.n	8005274 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <vPortFree+0xa8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	43db      	mvns	r3, r3
 8005252:	401a      	ands	r2, r3
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005258:	f001 f84c 	bl	80062f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	4b07      	ldr	r3, [pc, #28]	; (8005280 <vPortFree+0xac>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4413      	add	r3, r2
 8005266:	4a06      	ldr	r2, [pc, #24]	; (8005280 <vPortFree+0xac>)
 8005268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800526a:	6938      	ldr	r0, [r7, #16]
 800526c:	f000 f86c 	bl	8005348 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005270:	f001 f84e 	bl	8006310 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005274:	bf00      	nop
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20008520 	.word	0x20008520
 8005280:	20008518 	.word	0x20008518

08005284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800528a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800528e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005290:	4b27      	ldr	r3, [pc, #156]	; (8005330 <prvHeapInit+0xac>)
 8005292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00c      	beq.n	80052b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3307      	adds	r3, #7
 80052a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0307 	bic.w	r3, r3, #7
 80052aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	4a1f      	ldr	r2, [pc, #124]	; (8005330 <prvHeapInit+0xac>)
 80052b4:	4413      	add	r3, r2
 80052b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052bc:	4a1d      	ldr	r2, [pc, #116]	; (8005334 <prvHeapInit+0xb0>)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052c2:	4b1c      	ldr	r3, [pc, #112]	; (8005334 <prvHeapInit+0xb0>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	4413      	add	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052d0:	2208      	movs	r2, #8
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0307 	bic.w	r3, r3, #7
 80052de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4a15      	ldr	r2, [pc, #84]	; (8005338 <prvHeapInit+0xb4>)
 80052e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052e6:	4b14      	ldr	r3, [pc, #80]	; (8005338 <prvHeapInit+0xb4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2200      	movs	r2, #0
 80052ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <prvHeapInit+0xb4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	1ad2      	subs	r2, r2, r3
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005304:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <prvHeapInit+0xb4>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	4a0a      	ldr	r2, [pc, #40]	; (800533c <prvHeapInit+0xb8>)
 8005312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	4a09      	ldr	r2, [pc, #36]	; (8005340 <prvHeapInit+0xbc>)
 800531a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <prvHeapInit+0xc0>)
 800531e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005322:	601a      	str	r2, [r3, #0]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	20000d0c 	.word	0x20000d0c
 8005334:	2000850c 	.word	0x2000850c
 8005338:	20008514 	.word	0x20008514
 800533c:	2000851c 	.word	0x2000851c
 8005340:	20008518 	.word	0x20008518
 8005344:	20008520 	.word	0x20008520

08005348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005350:	4b28      	ldr	r3, [pc, #160]	; (80053f4 <prvInsertBlockIntoFreeList+0xac>)
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	e002      	b.n	800535c <prvInsertBlockIntoFreeList+0x14>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	429a      	cmp	r2, r3
 8005364:	d3f7      	bcc.n	8005356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	441a      	add	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d108      	bne.n	800538a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	441a      	add	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	441a      	add	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d118      	bne.n	80053d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <prvInsertBlockIntoFreeList+0xb0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d00d      	beq.n	80053c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	441a      	add	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e008      	b.n	80053d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053c6:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <prvInsertBlockIntoFreeList+0xb0>)
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e003      	b.n	80053d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d002      	beq.n	80053e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	2000850c 	.word	0x2000850c
 80053f8:	20008514 	.word	0x20008514

080053fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d109      	bne.n	8005424 <xQueueGenericReset+0x28>
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	e7fe      	b.n	8005422 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005424:	f7ff fcfa 	bl	8004e1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005430:	68f9      	ldr	r1, [r7, #12]
 8005432:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005434:	fb01 f303 	mul.w	r3, r1, r3
 8005438:	441a      	add	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005454:	3b01      	subs	r3, #1
 8005456:	68f9      	ldr	r1, [r7, #12]
 8005458:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800545a:	fb01 f303 	mul.w	r3, r1, r3
 800545e:	441a      	add	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	22ff      	movs	r2, #255	; 0xff
 8005468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	22ff      	movs	r2, #255	; 0xff
 8005470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d114      	bne.n	80054a4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01a      	beq.n	80054b8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3310      	adds	r3, #16
 8005486:	4618      	mov	r0, r3
 8005488:	f001 f950 	bl	800672c <xTaskRemoveFromEventList>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d012      	beq.n	80054b8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005492:	4b0d      	ldr	r3, [pc, #52]	; (80054c8 <xQueueGenericReset+0xcc>)
 8005494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	e009      	b.n	80054b8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3310      	adds	r3, #16
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff fadf 	bl	8004a6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3324      	adds	r3, #36	; 0x24
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff fada 	bl	8004a6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054b8:	f7ff fcde 	bl	8004e78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054bc:	2301      	movs	r3, #1
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	e000ed04 	.word	0xe000ed04

080054cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08e      	sub	sp, #56	; 0x38
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d109      	bne.n	80054f4 <xQueueGenericCreateStatic+0x28>
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80054f2:	e7fe      	b.n	80054f2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <xQueueGenericCreateStatic+0x42>
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
 800550c:	e7fe      	b.n	800550c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <xQueueGenericCreateStatic+0x4e>
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <xQueueGenericCreateStatic+0x52>
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <xQueueGenericCreateStatic+0x54>
 800551e:	2300      	movs	r3, #0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d109      	bne.n	8005538 <xQueueGenericCreateStatic+0x6c>
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	623b      	str	r3, [r7, #32]
 8005536:	e7fe      	b.n	8005536 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d102      	bne.n	8005544 <xQueueGenericCreateStatic+0x78>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <xQueueGenericCreateStatic+0x7c>
 8005544:	2301      	movs	r3, #1
 8005546:	e000      	b.n	800554a <xQueueGenericCreateStatic+0x7e>
 8005548:	2300      	movs	r3, #0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d109      	bne.n	8005562 <xQueueGenericCreateStatic+0x96>
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	61fb      	str	r3, [r7, #28]
 8005560:	e7fe      	b.n	8005560 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005562:	2350      	movs	r3, #80	; 0x50
 8005564:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b50      	cmp	r3, #80	; 0x50
 800556a:	d009      	beq.n	8005580 <xQueueGenericCreateStatic+0xb4>
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	e7fe      	b.n	800557e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005580:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00d      	beq.n	80055a8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005594:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f805 	bl	80055b2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3730      	adds	r7, #48	; 0x30
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b084      	sub	sp, #16
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	60b9      	str	r1, [r7, #8]
 80055bc:	607a      	str	r2, [r7, #4]
 80055be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d103      	bne.n	80055ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	e002      	b.n	80055d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055e0:	2101      	movs	r1, #1
 80055e2:	69b8      	ldr	r0, [r7, #24]
 80055e4:	f7ff ff0a 	bl	80053fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	78fa      	ldrb	r2, [r7, #3]
 80055ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08e      	sub	sp, #56	; 0x38
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005606:	2300      	movs	r3, #0
 8005608:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	2b00      	cmp	r3, #0
 8005612:	d109      	bne.n	8005628 <xQueueGenericSend+0x30>
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	62bb      	str	r3, [r7, #40]	; 0x28
 8005626:	e7fe      	b.n	8005626 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d103      	bne.n	8005636 <xQueueGenericSend+0x3e>
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <xQueueGenericSend+0x42>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <xQueueGenericSend+0x44>
 800563a:	2300      	movs	r3, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d109      	bne.n	8005654 <xQueueGenericSend+0x5c>
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
 8005652:	e7fe      	b.n	8005652 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d103      	bne.n	8005662 <xQueueGenericSend+0x6a>
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <xQueueGenericSend+0x6e>
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <xQueueGenericSend+0x70>
 8005666:	2300      	movs	r3, #0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d109      	bne.n	8005680 <xQueueGenericSend+0x88>
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	623b      	str	r3, [r7, #32]
 800567e:	e7fe      	b.n	800567e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005680:	f001 fa0a 	bl	8006a98 <xTaskGetSchedulerState>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d102      	bne.n	8005690 <xQueueGenericSend+0x98>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <xQueueGenericSend+0x9c>
 8005690:	2301      	movs	r3, #1
 8005692:	e000      	b.n	8005696 <xQueueGenericSend+0x9e>
 8005694:	2300      	movs	r3, #0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d109      	bne.n	80056ae <xQueueGenericSend+0xb6>
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	e7fe      	b.n	80056ac <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ae:	f7ff fbb5 	bl	8004e1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d302      	bcc.n	80056c4 <xQueueGenericSend+0xcc>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d129      	bne.n	8005718 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ca:	f000 f9ff 	bl	8005acc <prvCopyDataToQueue>
 80056ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d010      	beq.n	80056fa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	3324      	adds	r3, #36	; 0x24
 80056dc:	4618      	mov	r0, r3
 80056de:	f001 f825 	bl	800672c <xTaskRemoveFromEventList>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d013      	beq.n	8005710 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056e8:	4b3f      	ldr	r3, [pc, #252]	; (80057e8 <xQueueGenericSend+0x1f0>)
 80056ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	e00a      	b.n	8005710 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d007      	beq.n	8005710 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005700:	4b39      	ldr	r3, [pc, #228]	; (80057e8 <xQueueGenericSend+0x1f0>)
 8005702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005710:	f7ff fbb2 	bl	8004e78 <vPortExitCritical>
				return pdPASS;
 8005714:	2301      	movs	r3, #1
 8005716:	e063      	b.n	80057e0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d103      	bne.n	8005726 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800571e:	f7ff fbab 	bl	8004e78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005722:	2300      	movs	r3, #0
 8005724:	e05c      	b.n	80057e0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800572c:	f107 0314 	add.w	r3, r7, #20
 8005730:	4618      	mov	r0, r3
 8005732:	f001 f85d 	bl	80067f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005736:	2301      	movs	r3, #1
 8005738:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800573a:	f7ff fb9d 	bl	8004e78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800573e:	f000 fdd9 	bl	80062f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005742:	f7ff fb6b 	bl	8004e1c <vPortEnterCritical>
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800574c:	b25b      	sxtb	r3, r3
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005752:	d103      	bne.n	800575c <xQueueGenericSend+0x164>
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005762:	b25b      	sxtb	r3, r3
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005768:	d103      	bne.n	8005772 <xQueueGenericSend+0x17a>
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005772:	f7ff fb81 	bl	8004e78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005776:	1d3a      	adds	r2, r7, #4
 8005778:	f107 0314 	add.w	r3, r7, #20
 800577c:	4611      	mov	r1, r2
 800577e:	4618      	mov	r0, r3
 8005780:	f001 f84c 	bl	800681c <xTaskCheckForTimeOut>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d124      	bne.n	80057d4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800578a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800578c:	f000 fa96 	bl	8005cbc <prvIsQueueFull>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d018      	beq.n	80057c8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	3310      	adds	r3, #16
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	4611      	mov	r1, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 ff76 	bl	8006690 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057a6:	f000 fa21 	bl	8005bec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057aa:	f000 fdb1 	bl	8006310 <xTaskResumeAll>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f47f af7c 	bne.w	80056ae <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80057b6:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <xQueueGenericSend+0x1f0>)
 80057b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	e772      	b.n	80056ae <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ca:	f000 fa0f 	bl	8005bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057ce:	f000 fd9f 	bl	8006310 <xTaskResumeAll>
 80057d2:	e76c      	b.n	80056ae <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057d6:	f000 fa09 	bl	8005bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057da:	f000 fd99 	bl	8006310 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3738      	adds	r7, #56	; 0x38
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08e      	sub	sp, #56	; 0x38
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	2b00      	cmp	r3, #0
 8005802:	d109      	bne.n	8005818 <xQueueGenericSendFromISR+0x2c>
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
 8005816:	e7fe      	b.n	8005816 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d103      	bne.n	8005826 <xQueueGenericSendFromISR+0x3a>
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <xQueueGenericSendFromISR+0x3e>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <xQueueGenericSendFromISR+0x40>
 800582a:	2300      	movs	r3, #0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d109      	bne.n	8005844 <xQueueGenericSendFromISR+0x58>
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	623b      	str	r3, [r7, #32]
 8005842:	e7fe      	b.n	8005842 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b02      	cmp	r3, #2
 8005848:	d103      	bne.n	8005852 <xQueueGenericSendFromISR+0x66>
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <xQueueGenericSendFromISR+0x6a>
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <xQueueGenericSendFromISR+0x6c>
 8005856:	2300      	movs	r3, #0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d109      	bne.n	8005870 <xQueueGenericSendFromISR+0x84>
 800585c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	61fb      	str	r3, [r7, #28]
 800586e:	e7fe      	b.n	800586e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005870:	f7ff fbb0 	bl	8004fd4 <vPortValidateInterruptPriority>
	__asm volatile
 8005874:	f3ef 8211 	mrs	r2, BASEPRI
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	61ba      	str	r2, [r7, #24]
 800588a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800588c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800588e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005898:	429a      	cmp	r2, r3
 800589a:	d302      	bcc.n	80058a2 <xQueueGenericSendFromISR+0xb6>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d12c      	bne.n	80058fc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058b2:	f000 f90b 	bl	8005acc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058b6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80058ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058be:	d112      	bne.n	80058e6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d016      	beq.n	80058f6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	3324      	adds	r3, #36	; 0x24
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 ff2d 	bl	800672c <xTaskRemoveFromEventList>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00e      	beq.n	80058f6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00b      	beq.n	80058f6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	e007      	b.n	80058f6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058ea:	3301      	adds	r3, #1
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	b25a      	sxtb	r2, r3
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80058f6:	2301      	movs	r3, #1
 80058f8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80058fa:	e001      	b.n	8005900 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058fc:	2300      	movs	r3, #0
 80058fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005902:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800590a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800590c:	4618      	mov	r0, r3
 800590e:	3738      	adds	r7, #56	; 0x38
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08c      	sub	sp, #48	; 0x30
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005920:	2300      	movs	r3, #0
 8005922:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <xQueueReceive+0x2e>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	623b      	str	r3, [r7, #32]
 8005940:	e7fe      	b.n	8005940 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <xQueueReceive+0x3c>
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <xQueueReceive+0x40>
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <xQueueReceive+0x42>
 8005954:	2300      	movs	r3, #0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <xQueueReceive+0x5a>
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	e7fe      	b.n	800596c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800596e:	f001 f893 	bl	8006a98 <xTaskGetSchedulerState>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <xQueueReceive+0x6a>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <xQueueReceive+0x6e>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <xQueueReceive+0x70>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d109      	bne.n	800599c <xQueueReceive+0x88>
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	61bb      	str	r3, [r7, #24]
 800599a:	e7fe      	b.n	800599a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800599c:	f7ff fa3e 	bl	8004e1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01f      	beq.n	80059ec <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059ac:	68b9      	ldr	r1, [r7, #8]
 80059ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059b0:	f000 f8f6 	bl	8005ba0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	1e5a      	subs	r2, r3, #1
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00f      	beq.n	80059e4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	3310      	adds	r3, #16
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 feaf 	bl	800672c <xTaskRemoveFromEventList>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d007      	beq.n	80059e4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059d4:	4b3c      	ldr	r3, [pc, #240]	; (8005ac8 <xQueueReceive+0x1b4>)
 80059d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059e4:	f7ff fa48 	bl	8004e78 <vPortExitCritical>
				return pdPASS;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e069      	b.n	8005ac0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d103      	bne.n	80059fa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059f2:	f7ff fa41 	bl	8004e78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e062      	b.n	8005ac0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d106      	bne.n	8005a0e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a00:	f107 0310 	add.w	r3, r7, #16
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 fef3 	bl	80067f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a0e:	f7ff fa33 	bl	8004e78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a12:	f000 fc6f 	bl	80062f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a16:	f7ff fa01 	bl	8004e1c <vPortEnterCritical>
 8005a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a20:	b25b      	sxtb	r3, r3
 8005a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a26:	d103      	bne.n	8005a30 <xQueueReceive+0x11c>
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a36:	b25b      	sxtb	r3, r3
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3c:	d103      	bne.n	8005a46 <xQueueReceive+0x132>
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a46:	f7ff fa17 	bl	8004e78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a4a:	1d3a      	adds	r2, r7, #4
 8005a4c:	f107 0310 	add.w	r3, r7, #16
 8005a50:	4611      	mov	r1, r2
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fee2 	bl	800681c <xTaskCheckForTimeOut>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d123      	bne.n	8005aa6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a60:	f000 f916 	bl	8005c90 <prvIsQueueEmpty>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d017      	beq.n	8005a9a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	3324      	adds	r3, #36	; 0x24
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	4611      	mov	r1, r2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fe0c 	bl	8006690 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a7a:	f000 f8b7 	bl	8005bec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a7e:	f000 fc47 	bl	8006310 <xTaskResumeAll>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d189      	bne.n	800599c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005a88:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <xQueueReceive+0x1b4>)
 8005a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	e780      	b.n	800599c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a9c:	f000 f8a6 	bl	8005bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005aa0:	f000 fc36 	bl	8006310 <xTaskResumeAll>
 8005aa4:	e77a      	b.n	800599c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aa8:	f000 f8a0 	bl	8005bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aac:	f000 fc30 	bl	8006310 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ab2:	f000 f8ed 	bl	8005c90 <prvIsQueueEmpty>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f43f af6f 	beq.w	800599c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005abe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3730      	adds	r7, #48	; 0x30
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10d      	bne.n	8005b06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d14d      	bne.n	8005b8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 ffec 	bl	8006ad4 <xTaskPriorityDisinherit>
 8005afc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	609a      	str	r2, [r3, #8]
 8005b04:	e043      	b.n	8005b8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d119      	bne.n	8005b40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6858      	ldr	r0, [r3, #4]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	461a      	mov	r2, r3
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	f003 ff43 	bl	80099a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	441a      	add	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d32b      	bcc.n	8005b8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	605a      	str	r2, [r3, #4]
 8005b3e:	e026      	b.n	8005b8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	68d8      	ldr	r0, [r3, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	461a      	mov	r2, r3
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	f003 ff29 	bl	80099a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b58:	425b      	negs	r3, r3
 8005b5a:	441a      	add	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d207      	bcs.n	8005b7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	425b      	negs	r3, r3
 8005b76:	441a      	add	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d105      	bne.n	8005b8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b96:	697b      	ldr	r3, [r7, #20]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d018      	beq.n	8005be4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	441a      	add	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d303      	bcc.n	8005bd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68d9      	ldr	r1, [r3, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6838      	ldr	r0, [r7, #0]
 8005be0:	f003 fedf 	bl	80099a2 <memcpy>
	}
}
 8005be4:	bf00      	nop
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bf4:	f7ff f912 	bl	8004e1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c00:	e011      	b.n	8005c26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d012      	beq.n	8005c30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3324      	adds	r3, #36	; 0x24
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fd8c 	bl	800672c <xTaskRemoveFromEventList>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c1a:	f000 fe5f 	bl	80068dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	dce9      	bgt.n	8005c02 <prvUnlockQueue+0x16>
 8005c2e:	e000      	b.n	8005c32 <prvUnlockQueue+0x46>
					break;
 8005c30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	22ff      	movs	r2, #255	; 0xff
 8005c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c3a:	f7ff f91d 	bl	8004e78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c3e:	f7ff f8ed 	bl	8004e1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c4a:	e011      	b.n	8005c70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d012      	beq.n	8005c7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3310      	adds	r3, #16
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fd67 	bl	800672c <xTaskRemoveFromEventList>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c64:	f000 fe3a 	bl	80068dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c68:	7bbb      	ldrb	r3, [r7, #14]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dce9      	bgt.n	8005c4c <prvUnlockQueue+0x60>
 8005c78:	e000      	b.n	8005c7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	22ff      	movs	r2, #255	; 0xff
 8005c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c84:	f7ff f8f8 	bl	8004e78 <vPortExitCritical>
}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c98:	f7ff f8c0 	bl	8004e1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d102      	bne.n	8005caa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	e001      	b.n	8005cae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cae:	f7ff f8e3 	bl	8004e78 <vPortExitCritical>

	return xReturn;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cc4:	f7ff f8aa 	bl	8004e1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d102      	bne.n	8005cda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	e001      	b.n	8005cde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cde:	f7ff f8cb 	bl	8004e78 <vPortExitCritical>

	return xReturn;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	e014      	b.n	8005d26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005cfc:	4a0e      	ldr	r2, [pc, #56]	; (8005d38 <vQueueAddToRegistry+0x4c>)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10b      	bne.n	8005d20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d08:	490b      	ldr	r1, [pc, #44]	; (8005d38 <vQueueAddToRegistry+0x4c>)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d12:	4a09      	ldr	r2, [pc, #36]	; (8005d38 <vQueueAddToRegistry+0x4c>)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	4413      	add	r3, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d1e:	e005      	b.n	8005d2c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3301      	adds	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2b07      	cmp	r3, #7
 8005d2a:	d9e7      	bls.n	8005cfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	20018298 	.word	0x20018298

08005d3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d4c:	f7ff f866 	bl	8004e1c <vPortEnterCritical>
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d56:	b25b      	sxtb	r3, r3
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d103      	bne.n	8005d66 <vQueueWaitForMessageRestricted+0x2a>
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d6c:	b25b      	sxtb	r3, r3
 8005d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d72:	d103      	bne.n	8005d7c <vQueueWaitForMessageRestricted+0x40>
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d7c:	f7ff f87c 	bl	8004e78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d106      	bne.n	8005d96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	3324      	adds	r3, #36	; 0x24
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fca1 	bl	80066d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d96:	6978      	ldr	r0, [r7, #20]
 8005d98:	f7ff ff28 	bl	8005bec <prvUnlockQueue>
	}
 8005d9c:	bf00      	nop
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08e      	sub	sp, #56	; 0x38
 8005da8:	af04      	add	r7, sp, #16
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <xTaskCreateStatic+0x28>
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	623b      	str	r3, [r7, #32]
 8005dca:	e7fe      	b.n	8005dca <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d109      	bne.n	8005de6 <xTaskCreateStatic+0x42>
 8005dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	61fb      	str	r3, [r7, #28]
 8005de4:	e7fe      	b.n	8005de4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005de6:	235c      	movs	r3, #92	; 0x5c
 8005de8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b5c      	cmp	r3, #92	; 0x5c
 8005dee:	d009      	beq.n	8005e04 <xTaskCreateStatic+0x60>
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	61bb      	str	r3, [r7, #24]
 8005e02:	e7fe      	b.n	8005e02 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01e      	beq.n	8005e4a <xTaskCreateStatic+0xa6>
 8005e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d01b      	beq.n	8005e4a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e24:	2300      	movs	r3, #0
 8005e26:	9303      	str	r3, [sp, #12]
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	9302      	str	r3, [sp, #8]
 8005e2c:	f107 0314 	add.w	r3, r7, #20
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 f850 	bl	8005ee2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e44:	f000 f8dc 	bl	8006000 <prvAddNewTaskToReadyList>
 8005e48:	e001      	b.n	8005e4e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e4e:	697b      	ldr	r3, [r7, #20]
	}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3728      	adds	r7, #40	; 0x28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08c      	sub	sp, #48	; 0x30
 8005e5c:	af04      	add	r7, sp, #16
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e68:	88fb      	ldrh	r3, [r7, #6]
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff f8ef 	bl	8005050 <pvPortMalloc>
 8005e72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00e      	beq.n	8005e98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e7a:	205c      	movs	r0, #92	; 0x5c
 8005e7c:	f7ff f8e8 	bl	8005050 <pvPortMalloc>
 8005e80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8005e8e:	e005      	b.n	8005e9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e90:	6978      	ldr	r0, [r7, #20]
 8005e92:	f7ff f99f 	bl	80051d4 <vPortFree>
 8005e96:	e001      	b.n	8005e9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d017      	beq.n	8005ed2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005eaa:	88fa      	ldrh	r2, [r7, #6]
 8005eac:	2300      	movs	r3, #0
 8005eae:	9303      	str	r3, [sp, #12]
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	9302      	str	r3, [sp, #8]
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	9301      	str	r3, [sp, #4]
 8005eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f80e 	bl	8005ee2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ec6:	69f8      	ldr	r0, [r7, #28]
 8005ec8:	f000 f89a 	bl	8006000 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	61bb      	str	r3, [r7, #24]
 8005ed0:	e002      	b.n	8005ed8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ed8:	69bb      	ldr	r3, [r7, #24]
	}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3720      	adds	r7, #32
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b088      	sub	sp, #32
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	461a      	mov	r2, r3
 8005efa:	21a5      	movs	r1, #165	; 0xa5
 8005efc:	f003 fd5c 	bl	80099b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	f023 0307 	bic.w	r3, r3, #7
 8005f18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d009      	beq.n	8005f38 <prvInitialiseNewTask+0x56>
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	e7fe      	b.n	8005f36 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d01f      	beq.n	8005f7e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	e012      	b.n	8005f6a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	4413      	add	r3, r2
 8005f4a:	7819      	ldrb	r1, [r3, #0]
 8005f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	4413      	add	r3, r2
 8005f52:	3334      	adds	r3, #52	; 0x34
 8005f54:	460a      	mov	r2, r1
 8005f56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d006      	beq.n	8005f72 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	3301      	adds	r3, #1
 8005f68:	61fb      	str	r3, [r7, #28]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	2b0f      	cmp	r3, #15
 8005f6e:	d9e9      	bls.n	8005f44 <prvInitialiseNewTask+0x62>
 8005f70:	e000      	b.n	8005f74 <prvInitialiseNewTask+0x92>
			{
				break;
 8005f72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f7c:	e003      	b.n	8005f86 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	2b37      	cmp	r3, #55	; 0x37
 8005f8a:	d901      	bls.n	8005f90 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f8c:	2337      	movs	r3, #55	; 0x37
 8005f8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe fd80 	bl	8004aac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	3318      	adds	r3, #24
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe fd7b 	bl	8004aac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	2200      	movs	r2, #0
 8005fd0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	68f9      	ldr	r1, [r7, #12]
 8005fde:	69b8      	ldr	r0, [r7, #24]
 8005fe0:	f7fe fdf8 	bl	8004bd4 <pxPortInitialiseStack>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ff6:	bf00      	nop
 8005ff8:	3720      	adds	r7, #32
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006008:	f7fe ff08 	bl	8004e1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800600c:	4b2d      	ldr	r3, [pc, #180]	; (80060c4 <prvAddNewTaskToReadyList+0xc4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3301      	adds	r3, #1
 8006012:	4a2c      	ldr	r2, [pc, #176]	; (80060c4 <prvAddNewTaskToReadyList+0xc4>)
 8006014:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006016:	4b2c      	ldr	r3, [pc, #176]	; (80060c8 <prvAddNewTaskToReadyList+0xc8>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d109      	bne.n	8006032 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800601e:	4a2a      	ldr	r2, [pc, #168]	; (80060c8 <prvAddNewTaskToReadyList+0xc8>)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006024:	4b27      	ldr	r3, [pc, #156]	; (80060c4 <prvAddNewTaskToReadyList+0xc4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d110      	bne.n	800604e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800602c:	f000 fc7a 	bl	8006924 <prvInitialiseTaskLists>
 8006030:	e00d      	b.n	800604e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006032:	4b26      	ldr	r3, [pc, #152]	; (80060cc <prvAddNewTaskToReadyList+0xcc>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d109      	bne.n	800604e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800603a:	4b23      	ldr	r3, [pc, #140]	; (80060c8 <prvAddNewTaskToReadyList+0xc8>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	429a      	cmp	r2, r3
 8006046:	d802      	bhi.n	800604e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006048:	4a1f      	ldr	r2, [pc, #124]	; (80060c8 <prvAddNewTaskToReadyList+0xc8>)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800604e:	4b20      	ldr	r3, [pc, #128]	; (80060d0 <prvAddNewTaskToReadyList+0xd0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3301      	adds	r3, #1
 8006054:	4a1e      	ldr	r2, [pc, #120]	; (80060d0 <prvAddNewTaskToReadyList+0xd0>)
 8006056:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006058:	4b1d      	ldr	r3, [pc, #116]	; (80060d0 <prvAddNewTaskToReadyList+0xd0>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006064:	4b1b      	ldr	r3, [pc, #108]	; (80060d4 <prvAddNewTaskToReadyList+0xd4>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d903      	bls.n	8006074 <prvAddNewTaskToReadyList+0x74>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006070:	4a18      	ldr	r2, [pc, #96]	; (80060d4 <prvAddNewTaskToReadyList+0xd4>)
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006078:	4613      	mov	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4a15      	ldr	r2, [pc, #84]	; (80060d8 <prvAddNewTaskToReadyList+0xd8>)
 8006082:	441a      	add	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3304      	adds	r3, #4
 8006088:	4619      	mov	r1, r3
 800608a:	4610      	mov	r0, r2
 800608c:	f7fe fd1b 	bl	8004ac6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006090:	f7fe fef2 	bl	8004e78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006094:	4b0d      	ldr	r3, [pc, #52]	; (80060cc <prvAddNewTaskToReadyList+0xcc>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00e      	beq.n	80060ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800609c:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <prvAddNewTaskToReadyList+0xc8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d207      	bcs.n	80060ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060aa:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <prvAddNewTaskToReadyList+0xdc>)
 80060ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060ba:	bf00      	nop
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	200089f8 	.word	0x200089f8
 80060c8:	20008524 	.word	0x20008524
 80060cc:	20008a04 	.word	0x20008a04
 80060d0:	20008a14 	.word	0x20008a14
 80060d4:	20008a00 	.word	0x20008a00
 80060d8:	20008528 	.word	0x20008528
 80060dc:	e000ed04 	.word	0xe000ed04

080060e0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80060e8:	f7fe fe98 	bl	8004e1c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d102      	bne.n	80060f8 <vTaskDelete+0x18>
 80060f2:	4b2c      	ldr	r3, [pc, #176]	; (80061a4 <vTaskDelete+0xc4>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	e000      	b.n	80060fa <vTaskDelete+0x1a>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	3304      	adds	r3, #4
 8006100:	4618      	mov	r0, r3
 8006102:	f7fe fd3d 	bl	8004b80 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	2b00      	cmp	r3, #0
 800610c:	d004      	beq.n	8006118 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3318      	adds	r3, #24
 8006112:	4618      	mov	r0, r3
 8006114:	f7fe fd34 	bl	8004b80 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006118:	4b23      	ldr	r3, [pc, #140]	; (80061a8 <vTaskDelete+0xc8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3301      	adds	r3, #1
 800611e:	4a22      	ldr	r2, [pc, #136]	; (80061a8 <vTaskDelete+0xc8>)
 8006120:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006122:	4b20      	ldr	r3, [pc, #128]	; (80061a4 <vTaskDelete+0xc4>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	429a      	cmp	r2, r3
 800612a:	d10b      	bne.n	8006144 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3304      	adds	r3, #4
 8006130:	4619      	mov	r1, r3
 8006132:	481e      	ldr	r0, [pc, #120]	; (80061ac <vTaskDelete+0xcc>)
 8006134:	f7fe fcc7 	bl	8004ac6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006138:	4b1d      	ldr	r3, [pc, #116]	; (80061b0 <vTaskDelete+0xd0>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3301      	adds	r3, #1
 800613e:	4a1c      	ldr	r2, [pc, #112]	; (80061b0 <vTaskDelete+0xd0>)
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	e009      	b.n	8006158 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006144:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <vTaskDelete+0xd4>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3b01      	subs	r3, #1
 800614a:	4a1a      	ldr	r2, [pc, #104]	; (80061b4 <vTaskDelete+0xd4>)
 800614c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 fc54 	bl	80069fc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006154:	f000 fc80 	bl	8006a58 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8006158:	f7fe fe8e 	bl	8004e78 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800615c:	4b16      	ldr	r3, [pc, #88]	; (80061b8 <vTaskDelete+0xd8>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01a      	beq.n	800619a <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 8006164:	4b0f      	ldr	r3, [pc, #60]	; (80061a4 <vTaskDelete+0xc4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	429a      	cmp	r2, r3
 800616c:	d115      	bne.n	800619a <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800616e:	4b13      	ldr	r3, [pc, #76]	; (80061bc <vTaskDelete+0xdc>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <vTaskDelete+0xaa>
 8006176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	60bb      	str	r3, [r7, #8]
 8006188:	e7fe      	b.n	8006188 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 800618a:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <vTaskDelete+0xe0>)
 800618c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800619a:	bf00      	nop
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20008524 	.word	0x20008524
 80061a8:	20008a14 	.word	0x20008a14
 80061ac:	200089cc 	.word	0x200089cc
 80061b0:	200089e0 	.word	0x200089e0
 80061b4:	200089f8 	.word	0x200089f8
 80061b8:	20008a04 	.word	0x20008a04
 80061bc:	20008a20 	.word	0x20008a20
 80061c0:	e000ed04 	.word	0xe000ed04

080061c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061cc:	2300      	movs	r3, #0
 80061ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d016      	beq.n	8006204 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061d6:	4b13      	ldr	r3, [pc, #76]	; (8006224 <vTaskDelay+0x60>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d009      	beq.n	80061f2 <vTaskDelay+0x2e>
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	60bb      	str	r3, [r7, #8]
 80061f0:	e7fe      	b.n	80061f0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80061f2:	f000 f87f 	bl	80062f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061f6:	2100      	movs	r1, #0
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fcd7 	bl	8006bac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061fe:	f000 f887 	bl	8006310 <xTaskResumeAll>
 8006202:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d107      	bne.n	800621a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800620a:	4b07      	ldr	r3, [pc, #28]	; (8006228 <vTaskDelay+0x64>)
 800620c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800621a:	bf00      	nop
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20008a20 	.word	0x20008a20
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08a      	sub	sp, #40	; 0x28
 8006230:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006232:	2300      	movs	r3, #0
 8006234:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006236:	2300      	movs	r3, #0
 8006238:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800623a:	463a      	mov	r2, r7
 800623c:	1d39      	adds	r1, r7, #4
 800623e:	f107 0308 	add.w	r3, r7, #8
 8006242:	4618      	mov	r0, r3
 8006244:	f7fe fbde 	bl	8004a04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	9202      	str	r2, [sp, #8]
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	2300      	movs	r3, #0
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	2300      	movs	r3, #0
 8006258:	460a      	mov	r2, r1
 800625a:	4920      	ldr	r1, [pc, #128]	; (80062dc <vTaskStartScheduler+0xb0>)
 800625c:	4820      	ldr	r0, [pc, #128]	; (80062e0 <vTaskStartScheduler+0xb4>)
 800625e:	f7ff fda1 	bl	8005da4 <xTaskCreateStatic>
 8006262:	4602      	mov	r2, r0
 8006264:	4b1f      	ldr	r3, [pc, #124]	; (80062e4 <vTaskStartScheduler+0xb8>)
 8006266:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006268:	4b1e      	ldr	r3, [pc, #120]	; (80062e4 <vTaskStartScheduler+0xb8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006270:	2301      	movs	r3, #1
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	e001      	b.n	800627a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006276:	2300      	movs	r3, #0
 8006278:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d102      	bne.n	8006286 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006280:	f000 fce8 	bl	8006c54 <xTimerCreateTimerTask>
 8006284:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d115      	bne.n	80062b8 <vTaskStartScheduler+0x8c>
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800629e:	4b12      	ldr	r3, [pc, #72]	; (80062e8 <vTaskStartScheduler+0xbc>)
 80062a0:	f04f 32ff 	mov.w	r2, #4294967295
 80062a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062a6:	4b11      	ldr	r3, [pc, #68]	; (80062ec <vTaskStartScheduler+0xc0>)
 80062a8:	2201      	movs	r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062ac:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <vTaskStartScheduler+0xc4>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062b2:	f7fe fd15 	bl	8004ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062b6:	e00d      	b.n	80062d4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d109      	bne.n	80062d4 <vTaskStartScheduler+0xa8>
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	e7fe      	b.n	80062d2 <vTaskStartScheduler+0xa6>
}
 80062d4:	bf00      	nop
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	0800b9d8 	.word	0x0800b9d8
 80062e0:	080068f5 	.word	0x080068f5
 80062e4:	20008a1c 	.word	0x20008a1c
 80062e8:	20008a18 	.word	0x20008a18
 80062ec:	20008a04 	.word	0x20008a04
 80062f0:	200089fc 	.word	0x200089fc

080062f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80062f8:	4b04      	ldr	r3, [pc, #16]	; (800630c <vTaskSuspendAll+0x18>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	4a03      	ldr	r2, [pc, #12]	; (800630c <vTaskSuspendAll+0x18>)
 8006300:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006302:	bf00      	nop
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	20008a20 	.word	0x20008a20

08006310 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800631a:	2300      	movs	r3, #0
 800631c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800631e:	4b41      	ldr	r3, [pc, #260]	; (8006424 <xTaskResumeAll+0x114>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d109      	bne.n	800633a <xTaskResumeAll+0x2a>
 8006326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	603b      	str	r3, [r7, #0]
 8006338:	e7fe      	b.n	8006338 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800633a:	f7fe fd6f 	bl	8004e1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800633e:	4b39      	ldr	r3, [pc, #228]	; (8006424 <xTaskResumeAll+0x114>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3b01      	subs	r3, #1
 8006344:	4a37      	ldr	r2, [pc, #220]	; (8006424 <xTaskResumeAll+0x114>)
 8006346:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006348:	4b36      	ldr	r3, [pc, #216]	; (8006424 <xTaskResumeAll+0x114>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d162      	bne.n	8006416 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006350:	4b35      	ldr	r3, [pc, #212]	; (8006428 <xTaskResumeAll+0x118>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d05e      	beq.n	8006416 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006358:	e02f      	b.n	80063ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800635a:	4b34      	ldr	r3, [pc, #208]	; (800642c <xTaskResumeAll+0x11c>)
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3318      	adds	r3, #24
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe fc0a 	bl	8004b80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3304      	adds	r3, #4
 8006370:	4618      	mov	r0, r3
 8006372:	f7fe fc05 	bl	8004b80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637a:	4b2d      	ldr	r3, [pc, #180]	; (8006430 <xTaskResumeAll+0x120>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d903      	bls.n	800638a <xTaskResumeAll+0x7a>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006386:	4a2a      	ldr	r2, [pc, #168]	; (8006430 <xTaskResumeAll+0x120>)
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4a27      	ldr	r2, [pc, #156]	; (8006434 <xTaskResumeAll+0x124>)
 8006398:	441a      	add	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f7fe fb90 	bl	8004ac6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063aa:	4b23      	ldr	r3, [pc, #140]	; (8006438 <xTaskResumeAll+0x128>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d302      	bcc.n	80063ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80063b4:	4b21      	ldr	r3, [pc, #132]	; (800643c <xTaskResumeAll+0x12c>)
 80063b6:	2201      	movs	r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063ba:	4b1c      	ldr	r3, [pc, #112]	; (800642c <xTaskResumeAll+0x11c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1cb      	bne.n	800635a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063c8:	f000 fb46 	bl	8006a58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80063cc:	4b1c      	ldr	r3, [pc, #112]	; (8006440 <xTaskResumeAll+0x130>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d010      	beq.n	80063fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063d8:	f000 f846 	bl	8006468 <xTaskIncrementTick>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80063e2:	4b16      	ldr	r3, [pc, #88]	; (800643c <xTaskResumeAll+0x12c>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1f1      	bne.n	80063d8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80063f4:	4b12      	ldr	r3, [pc, #72]	; (8006440 <xTaskResumeAll+0x130>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063fa:	4b10      	ldr	r3, [pc, #64]	; (800643c <xTaskResumeAll+0x12c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d009      	beq.n	8006416 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006402:	2301      	movs	r3, #1
 8006404:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006406:	4b0f      	ldr	r3, [pc, #60]	; (8006444 <xTaskResumeAll+0x134>)
 8006408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006416:	f7fe fd2f 	bl	8004e78 <vPortExitCritical>

	return xAlreadyYielded;
 800641a:	68bb      	ldr	r3, [r7, #8]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	20008a20 	.word	0x20008a20
 8006428:	200089f8 	.word	0x200089f8
 800642c:	200089b8 	.word	0x200089b8
 8006430:	20008a00 	.word	0x20008a00
 8006434:	20008528 	.word	0x20008528
 8006438:	20008524 	.word	0x20008524
 800643c:	20008a0c 	.word	0x20008a0c
 8006440:	20008a08 	.word	0x20008a08
 8006444:	e000ed04 	.word	0xe000ed04

08006448 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800644e:	4b05      	ldr	r3, [pc, #20]	; (8006464 <xTaskGetTickCount+0x1c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006454:	687b      	ldr	r3, [r7, #4]
}
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	200089fc 	.word	0x200089fc

08006468 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006472:	4b4e      	ldr	r3, [pc, #312]	; (80065ac <xTaskIncrementTick+0x144>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	f040 8088 	bne.w	800658c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800647c:	4b4c      	ldr	r3, [pc, #304]	; (80065b0 <xTaskIncrementTick+0x148>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3301      	adds	r3, #1
 8006482:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006484:	4a4a      	ldr	r2, [pc, #296]	; (80065b0 <xTaskIncrementTick+0x148>)
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d11f      	bne.n	80064d0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006490:	4b48      	ldr	r3, [pc, #288]	; (80065b4 <xTaskIncrementTick+0x14c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <xTaskIncrementTick+0x46>
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	603b      	str	r3, [r7, #0]
 80064ac:	e7fe      	b.n	80064ac <xTaskIncrementTick+0x44>
 80064ae:	4b41      	ldr	r3, [pc, #260]	; (80065b4 <xTaskIncrementTick+0x14c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	4b40      	ldr	r3, [pc, #256]	; (80065b8 <xTaskIncrementTick+0x150>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a3e      	ldr	r2, [pc, #248]	; (80065b4 <xTaskIncrementTick+0x14c>)
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	4a3e      	ldr	r2, [pc, #248]	; (80065b8 <xTaskIncrementTick+0x150>)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	4b3e      	ldr	r3, [pc, #248]	; (80065bc <xTaskIncrementTick+0x154>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3301      	adds	r3, #1
 80064c8:	4a3c      	ldr	r2, [pc, #240]	; (80065bc <xTaskIncrementTick+0x154>)
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	f000 fac4 	bl	8006a58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064d0:	4b3b      	ldr	r3, [pc, #236]	; (80065c0 <xTaskIncrementTick+0x158>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d349      	bcc.n	800656e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064da:	4b36      	ldr	r3, [pc, #216]	; (80065b4 <xTaskIncrementTick+0x14c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d104      	bne.n	80064ee <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064e4:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <xTaskIncrementTick+0x158>)
 80064e6:	f04f 32ff 	mov.w	r2, #4294967295
 80064ea:	601a      	str	r2, [r3, #0]
					break;
 80064ec:	e03f      	b.n	800656e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ee:	4b31      	ldr	r3, [pc, #196]	; (80065b4 <xTaskIncrementTick+0x14c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	429a      	cmp	r2, r3
 8006504:	d203      	bcs.n	800650e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006506:	4a2e      	ldr	r2, [pc, #184]	; (80065c0 <xTaskIncrementTick+0x158>)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800650c:	e02f      	b.n	800656e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	3304      	adds	r3, #4
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe fb34 	bl	8004b80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651c:	2b00      	cmp	r3, #0
 800651e:	d004      	beq.n	800652a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	3318      	adds	r3, #24
 8006524:	4618      	mov	r0, r3
 8006526:	f7fe fb2b 	bl	8004b80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652e:	4b25      	ldr	r3, [pc, #148]	; (80065c4 <xTaskIncrementTick+0x15c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d903      	bls.n	800653e <xTaskIncrementTick+0xd6>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	4a22      	ldr	r2, [pc, #136]	; (80065c4 <xTaskIncrementTick+0x15c>)
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4a1f      	ldr	r2, [pc, #124]	; (80065c8 <xTaskIncrementTick+0x160>)
 800654c:	441a      	add	r2, r3
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	3304      	adds	r3, #4
 8006552:	4619      	mov	r1, r3
 8006554:	4610      	mov	r0, r2
 8006556:	f7fe fab6 	bl	8004ac6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655e:	4b1b      	ldr	r3, [pc, #108]	; (80065cc <xTaskIncrementTick+0x164>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	429a      	cmp	r2, r3
 8006566:	d3b8      	bcc.n	80064da <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006568:	2301      	movs	r3, #1
 800656a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800656c:	e7b5      	b.n	80064da <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800656e:	4b17      	ldr	r3, [pc, #92]	; (80065cc <xTaskIncrementTick+0x164>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006574:	4914      	ldr	r1, [pc, #80]	; (80065c8 <xTaskIncrementTick+0x160>)
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	440b      	add	r3, r1
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d907      	bls.n	8006596 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8006586:	2301      	movs	r3, #1
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	e004      	b.n	8006596 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800658c:	4b10      	ldr	r3, [pc, #64]	; (80065d0 <xTaskIncrementTick+0x168>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	4a0f      	ldr	r2, [pc, #60]	; (80065d0 <xTaskIncrementTick+0x168>)
 8006594:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006596:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <xTaskIncrementTick+0x16c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800659e:	2301      	movs	r3, #1
 80065a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80065a2:	697b      	ldr	r3, [r7, #20]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20008a20 	.word	0x20008a20
 80065b0:	200089fc 	.word	0x200089fc
 80065b4:	200089b0 	.word	0x200089b0
 80065b8:	200089b4 	.word	0x200089b4
 80065bc:	20008a10 	.word	0x20008a10
 80065c0:	20008a18 	.word	0x20008a18
 80065c4:	20008a00 	.word	0x20008a00
 80065c8:	20008528 	.word	0x20008528
 80065cc:	20008524 	.word	0x20008524
 80065d0:	20008a08 	.word	0x20008a08
 80065d4:	20008a0c 	.word	0x20008a0c

080065d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065de:	4b27      	ldr	r3, [pc, #156]	; (800667c <vTaskSwitchContext+0xa4>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065e6:	4b26      	ldr	r3, [pc, #152]	; (8006680 <vTaskSwitchContext+0xa8>)
 80065e8:	2201      	movs	r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065ec:	e040      	b.n	8006670 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80065ee:	4b24      	ldr	r3, [pc, #144]	; (8006680 <vTaskSwitchContext+0xa8>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f4:	4b23      	ldr	r3, [pc, #140]	; (8006684 <vTaskSwitchContext+0xac>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	e00f      	b.n	800661c <vTaskSwitchContext+0x44>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d109      	bne.n	8006616 <vTaskSwitchContext+0x3e>
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	607b      	str	r3, [r7, #4]
 8006614:	e7fe      	b.n	8006614 <vTaskSwitchContext+0x3c>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3b01      	subs	r3, #1
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	491a      	ldr	r1, [pc, #104]	; (8006688 <vTaskSwitchContext+0xb0>)
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4613      	mov	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0e5      	beq.n	80065fc <vTaskSwitchContext+0x24>
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4613      	mov	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4a13      	ldr	r2, [pc, #76]	; (8006688 <vTaskSwitchContext+0xb0>)
 800663c:	4413      	add	r3, r2
 800663e:	60bb      	str	r3, [r7, #8]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	605a      	str	r2, [r3, #4]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	3308      	adds	r3, #8
 8006652:	429a      	cmp	r2, r3
 8006654:	d104      	bne.n	8006660 <vTaskSwitchContext+0x88>
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	605a      	str	r2, [r3, #4]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	4a09      	ldr	r2, [pc, #36]	; (800668c <vTaskSwitchContext+0xb4>)
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	4a06      	ldr	r2, [pc, #24]	; (8006684 <vTaskSwitchContext+0xac>)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6013      	str	r3, [r2, #0]
}
 8006670:	bf00      	nop
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	20008a20 	.word	0x20008a20
 8006680:	20008a0c 	.word	0x20008a0c
 8006684:	20008a00 	.word	0x20008a00
 8006688:	20008528 	.word	0x20008528
 800668c:	20008524 	.word	0x20008524

08006690 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d109      	bne.n	80066b4 <vTaskPlaceOnEventList+0x24>
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	e7fe      	b.n	80066b2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066b4:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <vTaskPlaceOnEventList+0x44>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3318      	adds	r3, #24
 80066ba:	4619      	mov	r1, r3
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7fe fa26 	bl	8004b0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066c2:	2101      	movs	r1, #1
 80066c4:	6838      	ldr	r0, [r7, #0]
 80066c6:	f000 fa71 	bl	8006bac <prvAddCurrentTaskToDelayedList>
}
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20008524 	.word	0x20008524

080066d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d109      	bne.n	80066fe <vTaskPlaceOnEventListRestricted+0x26>
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	e7fe      	b.n	80066fc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066fe:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <vTaskPlaceOnEventListRestricted+0x50>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3318      	adds	r3, #24
 8006704:	4619      	mov	r1, r3
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f7fe f9dd 	bl	8004ac6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006712:	f04f 33ff 	mov.w	r3, #4294967295
 8006716:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006718:	6879      	ldr	r1, [r7, #4]
 800671a:	68b8      	ldr	r0, [r7, #8]
 800671c:	f000 fa46 	bl	8006bac <prvAddCurrentTaskToDelayedList>
	}
 8006720:	bf00      	nop
 8006722:	3718      	adds	r7, #24
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	20008524 	.word	0x20008524

0800672c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d109      	bne.n	8006756 <xTaskRemoveFromEventList+0x2a>
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	e7fe      	b.n	8006754 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	3318      	adds	r3, #24
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe fa10 	bl	8004b80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006760:	4b1d      	ldr	r3, [pc, #116]	; (80067d8 <xTaskRemoveFromEventList+0xac>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d11d      	bne.n	80067a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	3304      	adds	r3, #4
 800676c:	4618      	mov	r0, r3
 800676e:	f7fe fa07 	bl	8004b80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006776:	4b19      	ldr	r3, [pc, #100]	; (80067dc <xTaskRemoveFromEventList+0xb0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	429a      	cmp	r2, r3
 800677c:	d903      	bls.n	8006786 <xTaskRemoveFromEventList+0x5a>
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006782:	4a16      	ldr	r2, [pc, #88]	; (80067dc <xTaskRemoveFromEventList+0xb0>)
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678a:	4613      	mov	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4a13      	ldr	r2, [pc, #76]	; (80067e0 <xTaskRemoveFromEventList+0xb4>)
 8006794:	441a      	add	r2, r3
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	3304      	adds	r3, #4
 800679a:	4619      	mov	r1, r3
 800679c:	4610      	mov	r0, r2
 800679e:	f7fe f992 	bl	8004ac6 <vListInsertEnd>
 80067a2:	e005      	b.n	80067b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	3318      	adds	r3, #24
 80067a8:	4619      	mov	r1, r3
 80067aa:	480e      	ldr	r0, [pc, #56]	; (80067e4 <xTaskRemoveFromEventList+0xb8>)
 80067ac:	f7fe f98b 	bl	8004ac6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b4:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <xTaskRemoveFromEventList+0xbc>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d905      	bls.n	80067ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067be:	2301      	movs	r3, #1
 80067c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067c2:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <xTaskRemoveFromEventList+0xc0>)
 80067c4:	2201      	movs	r2, #1
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	e001      	b.n	80067ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067ce:	697b      	ldr	r3, [r7, #20]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	20008a20 	.word	0x20008a20
 80067dc:	20008a00 	.word	0x20008a00
 80067e0:	20008528 	.word	0x20008528
 80067e4:	200089b8 	.word	0x200089b8
 80067e8:	20008524 	.word	0x20008524
 80067ec:	20008a0c 	.word	0x20008a0c

080067f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067f8:	4b06      	ldr	r3, [pc, #24]	; (8006814 <vTaskInternalSetTimeOutState+0x24>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006800:	4b05      	ldr	r3, [pc, #20]	; (8006818 <vTaskInternalSetTimeOutState+0x28>)
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	605a      	str	r2, [r3, #4]
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	20008a10 	.word	0x20008a10
 8006818:	200089fc 	.word	0x200089fc

0800681c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b088      	sub	sp, #32
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d109      	bne.n	8006840 <xTaskCheckForTimeOut+0x24>
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	613b      	str	r3, [r7, #16]
 800683e:	e7fe      	b.n	800683e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d109      	bne.n	800685a <xTaskCheckForTimeOut+0x3e>
 8006846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	e7fe      	b.n	8006858 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800685a:	f7fe fadf 	bl	8004e1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800685e:	4b1d      	ldr	r3, [pc, #116]	; (80068d4 <xTaskCheckForTimeOut+0xb8>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006876:	d102      	bne.n	800687e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006878:	2300      	movs	r3, #0
 800687a:	61fb      	str	r3, [r7, #28]
 800687c:	e023      	b.n	80068c6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <xTaskCheckForTimeOut+0xbc>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d007      	beq.n	800689a <xTaskCheckForTimeOut+0x7e>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	429a      	cmp	r2, r3
 8006892:	d802      	bhi.n	800689a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006894:	2301      	movs	r3, #1
 8006896:	61fb      	str	r3, [r7, #28]
 8006898:	e015      	b.n	80068c6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d90b      	bls.n	80068bc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	1ad2      	subs	r2, r2, r3
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff ff9d 	bl	80067f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068b6:	2300      	movs	r3, #0
 80068b8:	61fb      	str	r3, [r7, #28]
 80068ba:	e004      	b.n	80068c6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2200      	movs	r2, #0
 80068c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068c2:	2301      	movs	r3, #1
 80068c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068c6:	f7fe fad7 	bl	8004e78 <vPortExitCritical>

	return xReturn;
 80068ca:	69fb      	ldr	r3, [r7, #28]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3720      	adds	r7, #32
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	200089fc 	.word	0x200089fc
 80068d8:	20008a10 	.word	0x20008a10

080068dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068e0:	4b03      	ldr	r3, [pc, #12]	; (80068f0 <vTaskMissedYield+0x14>)
 80068e2:	2201      	movs	r2, #1
 80068e4:	601a      	str	r2, [r3, #0]
}
 80068e6:	bf00      	nop
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	20008a0c 	.word	0x20008a0c

080068f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068fc:	f000 f852 	bl	80069a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006900:	4b06      	ldr	r3, [pc, #24]	; (800691c <prvIdleTask+0x28>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d9f9      	bls.n	80068fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006908:	4b05      	ldr	r3, [pc, #20]	; (8006920 <prvIdleTask+0x2c>)
 800690a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006918:	e7f0      	b.n	80068fc <prvIdleTask+0x8>
 800691a:	bf00      	nop
 800691c:	20008528 	.word	0x20008528
 8006920:	e000ed04 	.word	0xe000ed04

08006924 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800692a:	2300      	movs	r3, #0
 800692c:	607b      	str	r3, [r7, #4]
 800692e:	e00c      	b.n	800694a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	4613      	mov	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4a12      	ldr	r2, [pc, #72]	; (8006984 <prvInitialiseTaskLists+0x60>)
 800693c:	4413      	add	r3, r2
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe f894 	bl	8004a6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3301      	adds	r3, #1
 8006948:	607b      	str	r3, [r7, #4]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b37      	cmp	r3, #55	; 0x37
 800694e:	d9ef      	bls.n	8006930 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006950:	480d      	ldr	r0, [pc, #52]	; (8006988 <prvInitialiseTaskLists+0x64>)
 8006952:	f7fe f88b 	bl	8004a6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006956:	480d      	ldr	r0, [pc, #52]	; (800698c <prvInitialiseTaskLists+0x68>)
 8006958:	f7fe f888 	bl	8004a6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800695c:	480c      	ldr	r0, [pc, #48]	; (8006990 <prvInitialiseTaskLists+0x6c>)
 800695e:	f7fe f885 	bl	8004a6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006962:	480c      	ldr	r0, [pc, #48]	; (8006994 <prvInitialiseTaskLists+0x70>)
 8006964:	f7fe f882 	bl	8004a6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006968:	480b      	ldr	r0, [pc, #44]	; (8006998 <prvInitialiseTaskLists+0x74>)
 800696a:	f7fe f87f 	bl	8004a6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800696e:	4b0b      	ldr	r3, [pc, #44]	; (800699c <prvInitialiseTaskLists+0x78>)
 8006970:	4a05      	ldr	r2, [pc, #20]	; (8006988 <prvInitialiseTaskLists+0x64>)
 8006972:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006974:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <prvInitialiseTaskLists+0x7c>)
 8006976:	4a05      	ldr	r2, [pc, #20]	; (800698c <prvInitialiseTaskLists+0x68>)
 8006978:	601a      	str	r2, [r3, #0]
}
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20008528 	.word	0x20008528
 8006988:	20008988 	.word	0x20008988
 800698c:	2000899c 	.word	0x2000899c
 8006990:	200089b8 	.word	0x200089b8
 8006994:	200089cc 	.word	0x200089cc
 8006998:	200089e4 	.word	0x200089e4
 800699c:	200089b0 	.word	0x200089b0
 80069a0:	200089b4 	.word	0x200089b4

080069a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069aa:	e019      	b.n	80069e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069ac:	f7fe fa36 	bl	8004e1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b0:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <prvCheckTasksWaitingTermination+0x4c>)
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3304      	adds	r3, #4
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fe f8df 	bl	8004b80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069c2:	4b0c      	ldr	r3, [pc, #48]	; (80069f4 <prvCheckTasksWaitingTermination+0x50>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	4a0a      	ldr	r2, [pc, #40]	; (80069f4 <prvCheckTasksWaitingTermination+0x50>)
 80069ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069cc:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <prvCheckTasksWaitingTermination+0x54>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	4a09      	ldr	r2, [pc, #36]	; (80069f8 <prvCheckTasksWaitingTermination+0x54>)
 80069d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069d6:	f7fe fa4f 	bl	8004e78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f80e 	bl	80069fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069e0:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <prvCheckTasksWaitingTermination+0x54>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e1      	bne.n	80069ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069e8:	bf00      	nop
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	200089cc 	.word	0x200089cc
 80069f4:	200089f8 	.word	0x200089f8
 80069f8:	200089e0 	.word	0x200089e0

080069fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d108      	bne.n	8006a20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe fbde 	bl	80051d4 <vPortFree>
				vPortFree( pxTCB );
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7fe fbdb 	bl	80051d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a1e:	e017      	b.n	8006a50 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d103      	bne.n	8006a32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7fe fbd2 	bl	80051d4 <vPortFree>
	}
 8006a30:	e00e      	b.n	8006a50 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d009      	beq.n	8006a50 <prvDeleteTCB+0x54>
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	60fb      	str	r3, [r7, #12]
 8006a4e:	e7fe      	b.n	8006a4e <prvDeleteTCB+0x52>
	}
 8006a50:	bf00      	nop
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <prvResetNextTaskUnblockTime+0x38>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d104      	bne.n	8006a72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a68:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <prvResetNextTaskUnblockTime+0x3c>)
 8006a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a70:	e008      	b.n	8006a84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a72:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <prvResetNextTaskUnblockTime+0x38>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	4a04      	ldr	r2, [pc, #16]	; (8006a94 <prvResetNextTaskUnblockTime+0x3c>)
 8006a82:	6013      	str	r3, [r2, #0]
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	200089b0 	.word	0x200089b0
 8006a94:	20008a18 	.word	0x20008a18

08006a98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a9e:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <xTaskGetSchedulerState+0x34>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d102      	bne.n	8006aac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	607b      	str	r3, [r7, #4]
 8006aaa:	e008      	b.n	8006abe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aac:	4b08      	ldr	r3, [pc, #32]	; (8006ad0 <xTaskGetSchedulerState+0x38>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d102      	bne.n	8006aba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	607b      	str	r3, [r7, #4]
 8006ab8:	e001      	b.n	8006abe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006aba:	2300      	movs	r3, #0
 8006abc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006abe:	687b      	ldr	r3, [r7, #4]
	}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	20008a04 	.word	0x20008a04
 8006ad0:	20008a20 	.word	0x20008a20

08006ad4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d054      	beq.n	8006b94 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006aea:	4b2d      	ldr	r3, [pc, #180]	; (8006ba0 <xTaskPriorityDisinherit+0xcc>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d009      	beq.n	8006b08 <xTaskPriorityDisinherit+0x34>
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	60fb      	str	r3, [r7, #12]
 8006b06:	e7fe      	b.n	8006b06 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d109      	bne.n	8006b24 <xTaskPriorityDisinherit+0x50>
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	60bb      	str	r3, [r7, #8]
 8006b22:	e7fe      	b.n	8006b22 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b28:	1e5a      	subs	r2, r3, #1
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d02c      	beq.n	8006b94 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d128      	bne.n	8006b94 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe f81a 	bl	8004b80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b64:	4b0f      	ldr	r3, [pc, #60]	; (8006ba4 <xTaskPriorityDisinherit+0xd0>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d903      	bls.n	8006b74 <xTaskPriorityDisinherit+0xa0>
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	4a0c      	ldr	r2, [pc, #48]	; (8006ba4 <xTaskPriorityDisinherit+0xd0>)
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b78:	4613      	mov	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4a09      	ldr	r2, [pc, #36]	; (8006ba8 <xTaskPriorityDisinherit+0xd4>)
 8006b82:	441a      	add	r2, r3
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	3304      	adds	r3, #4
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	f7fd ff9b 	bl	8004ac6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b90:	2301      	movs	r3, #1
 8006b92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b94:	697b      	ldr	r3, [r7, #20]
	}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20008524 	.word	0x20008524
 8006ba4:	20008a00 	.word	0x20008a00
 8006ba8:	20008528 	.word	0x20008528

08006bac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bb6:	4b21      	ldr	r3, [pc, #132]	; (8006c3c <prvAddCurrentTaskToDelayedList+0x90>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bbc:	4b20      	ldr	r3, [pc, #128]	; (8006c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fd ffdc 	bl	8004b80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bce:	d10a      	bne.n	8006be6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d007      	beq.n	8006be6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bd6:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4819      	ldr	r0, [pc, #100]	; (8006c44 <prvAddCurrentTaskToDelayedList+0x98>)
 8006be0:	f7fd ff71 	bl	8004ac6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006be4:	e026      	b.n	8006c34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4413      	add	r3, r2
 8006bec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006bee:	4b14      	ldr	r3, [pc, #80]	; (8006c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d209      	bcs.n	8006c12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bfe:	4b12      	ldr	r3, [pc, #72]	; (8006c48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4b0f      	ldr	r3, [pc, #60]	; (8006c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3304      	adds	r3, #4
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	f7fd ff7f 	bl	8004b0e <vListInsert>
}
 8006c10:	e010      	b.n	8006c34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c12:	4b0e      	ldr	r3, [pc, #56]	; (8006c4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	f7fd ff75 	bl	8004b0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c24:	4b0a      	ldr	r3, [pc, #40]	; (8006c50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d202      	bcs.n	8006c34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c2e:	4a08      	ldr	r2, [pc, #32]	; (8006c50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	6013      	str	r3, [r2, #0]
}
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	200089fc 	.word	0x200089fc
 8006c40:	20008524 	.word	0x20008524
 8006c44:	200089e4 	.word	0x200089e4
 8006c48:	200089b4 	.word	0x200089b4
 8006c4c:	200089b0 	.word	0x200089b0
 8006c50:	20008a18 	.word	0x20008a18

08006c54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08a      	sub	sp, #40	; 0x28
 8006c58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c5e:	f000 faff 	bl	8007260 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c62:	4b1c      	ldr	r3, [pc, #112]	; (8006cd4 <xTimerCreateTimerTask+0x80>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d021      	beq.n	8006cae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c72:	1d3a      	adds	r2, r7, #4
 8006c74:	f107 0108 	add.w	r1, r7, #8
 8006c78:	f107 030c 	add.w	r3, r7, #12
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fd fedb 	bl	8004a38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c82:	6879      	ldr	r1, [r7, #4]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	9202      	str	r2, [sp, #8]
 8006c8a:	9301      	str	r3, [sp, #4]
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	2300      	movs	r3, #0
 8006c92:	460a      	mov	r2, r1
 8006c94:	4910      	ldr	r1, [pc, #64]	; (8006cd8 <xTimerCreateTimerTask+0x84>)
 8006c96:	4811      	ldr	r0, [pc, #68]	; (8006cdc <xTimerCreateTimerTask+0x88>)
 8006c98:	f7ff f884 	bl	8005da4 <xTaskCreateStatic>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	4b10      	ldr	r3, [pc, #64]	; (8006ce0 <xTimerCreateTimerTask+0x8c>)
 8006ca0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006ca2:	4b0f      	ldr	r3, [pc, #60]	; (8006ce0 <xTimerCreateTimerTask+0x8c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006caa:	2301      	movs	r3, #1
 8006cac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d109      	bne.n	8006cc8 <xTimerCreateTimerTask+0x74>
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	613b      	str	r3, [r7, #16]
 8006cc6:	e7fe      	b.n	8006cc6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006cc8:	697b      	ldr	r3, [r7, #20]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20008a54 	.word	0x20008a54
 8006cd8:	0800b9e0 	.word	0x0800b9e0
 8006cdc:	08006e15 	.word	0x08006e15
 8006ce0:	20008a58 	.word	0x20008a58

08006ce4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08a      	sub	sp, #40	; 0x28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d109      	bne.n	8006d10 <xTimerGenericCommand+0x2c>
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	623b      	str	r3, [r7, #32]
 8006d0e:	e7fe      	b.n	8006d0e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d10:	4b19      	ldr	r3, [pc, #100]	; (8006d78 <xTimerGenericCommand+0x94>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d02a      	beq.n	8006d6e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b05      	cmp	r3, #5
 8006d28:	dc18      	bgt.n	8006d5c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d2a:	f7ff feb5 	bl	8006a98 <xTaskGetSchedulerState>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d109      	bne.n	8006d48 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d34:	4b10      	ldr	r3, [pc, #64]	; (8006d78 <xTimerGenericCommand+0x94>)
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	f107 0110 	add.w	r1, r7, #16
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d40:	f7fe fc5a 	bl	80055f8 <xQueueGenericSend>
 8006d44:	6278      	str	r0, [r7, #36]	; 0x24
 8006d46:	e012      	b.n	8006d6e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d48:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <xTimerGenericCommand+0x94>)
 8006d4a:	6818      	ldr	r0, [r3, #0]
 8006d4c:	f107 0110 	add.w	r1, r7, #16
 8006d50:	2300      	movs	r3, #0
 8006d52:	2200      	movs	r2, #0
 8006d54:	f7fe fc50 	bl	80055f8 <xQueueGenericSend>
 8006d58:	6278      	str	r0, [r7, #36]	; 0x24
 8006d5a:	e008      	b.n	8006d6e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d5c:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <xTimerGenericCommand+0x94>)
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	f107 0110 	add.w	r1, r7, #16
 8006d64:	2300      	movs	r3, #0
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	f7fe fd40 	bl	80057ec <xQueueGenericSendFromISR>
 8006d6c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3728      	adds	r7, #40	; 0x28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20008a54 	.word	0x20008a54

08006d7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d86:	4b22      	ldr	r3, [pc, #136]	; (8006e10 <prvProcessExpiredTimer+0x94>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	3304      	adds	r3, #4
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fd fef3 	bl	8004b80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d021      	beq.n	8006dec <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	699a      	ldr	r2, [r3, #24]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	18d1      	adds	r1, r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	6978      	ldr	r0, [r7, #20]
 8006db6:	f000 f8d1 	bl	8006f5c <prvInsertTimerInActiveList>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d01e      	beq.n	8006dfe <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	2100      	movs	r1, #0
 8006dca:	6978      	ldr	r0, [r7, #20]
 8006dcc:	f7ff ff8a 	bl	8006ce4 <xTimerGenericCommand>
 8006dd0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d112      	bne.n	8006dfe <prvProcessExpiredTimer+0x82>
 8006dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	e7fe      	b.n	8006dea <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006df2:	f023 0301 	bic.w	r3, r3, #1
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	6978      	ldr	r0, [r7, #20]
 8006e04:	4798      	blx	r3
}
 8006e06:	bf00      	nop
 8006e08:	3718      	adds	r7, #24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20008a4c 	.word	0x20008a4c

08006e14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e1c:	f107 0308 	add.w	r3, r7, #8
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 f857 	bl	8006ed4 <prvGetNextExpireTime>
 8006e26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 f803 	bl	8006e38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e32:	f000 f8d5 	bl	8006fe0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e36:	e7f1      	b.n	8006e1c <prvTimerTask+0x8>

08006e38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e42:	f7ff fa57 	bl	80062f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e46:	f107 0308 	add.w	r3, r7, #8
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 f866 	bl	8006f1c <prvSampleTimeNow>
 8006e50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d130      	bne.n	8006eba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <prvProcessTimerOrBlockTask+0x3c>
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d806      	bhi.n	8006e74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e66:	f7ff fa53 	bl	8006310 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e6a:	68f9      	ldr	r1, [r7, #12]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff ff85 	bl	8006d7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e72:	e024      	b.n	8006ebe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d008      	beq.n	8006e8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e7a:	4b13      	ldr	r3, [pc, #76]	; (8006ec8 <prvProcessTimerOrBlockTask+0x90>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <prvProcessTimerOrBlockTask+0x50>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <prvProcessTimerOrBlockTask+0x52>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ecc <prvProcessTimerOrBlockTask+0x94>)
 8006e8e:	6818      	ldr	r0, [r3, #0]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	f7fe ff4f 	bl	8005d3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e9e:	f7ff fa37 	bl	8006310 <xTaskResumeAll>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ea8:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <prvProcessTimerOrBlockTask+0x98>)
 8006eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	f3bf 8f6f 	isb	sy
}
 8006eb8:	e001      	b.n	8006ebe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006eba:	f7ff fa29 	bl	8006310 <xTaskResumeAll>
}
 8006ebe:	bf00      	nop
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20008a50 	.word	0x20008a50
 8006ecc:	20008a54 	.word	0x20008a54
 8006ed0:	e000ed04 	.word	0xe000ed04

08006ed4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006edc:	4b0e      	ldr	r3, [pc, #56]	; (8006f18 <prvGetNextExpireTime+0x44>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <prvGetNextExpireTime+0x16>
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	e000      	b.n	8006eec <prvGetNextExpireTime+0x18>
 8006eea:	2200      	movs	r2, #0
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d105      	bne.n	8006f04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ef8:	4b07      	ldr	r3, [pc, #28]	; (8006f18 <prvGetNextExpireTime+0x44>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	e001      	b.n	8006f08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f08:	68fb      	ldr	r3, [r7, #12]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	20008a4c 	.word	0x20008a4c

08006f1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f24:	f7ff fa90 	bl	8006448 <xTaskGetTickCount>
 8006f28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f2a:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <prvSampleTimeNow+0x3c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d205      	bcs.n	8006f40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f34:	f000 f930 	bl	8007198 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	e002      	b.n	8006f46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f46:	4a04      	ldr	r2, [pc, #16]	; (8006f58 <prvSampleTimeNow+0x3c>)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	20008a5c 	.word	0x20008a5c

08006f5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d812      	bhi.n	8006fa8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	1ad2      	subs	r2, r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d302      	bcc.n	8006f96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f90:	2301      	movs	r3, #1
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	e01b      	b.n	8006fce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f96:	4b10      	ldr	r3, [pc, #64]	; (8006fd8 <prvInsertTimerInActiveList+0x7c>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f7fd fdb4 	bl	8004b0e <vListInsert>
 8006fa6:	e012      	b.n	8006fce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d206      	bcs.n	8006fbe <prvInsertTimerInActiveList+0x62>
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d302      	bcc.n	8006fbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	e007      	b.n	8006fce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fbe:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <prvInsertTimerInActiveList+0x80>)
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4610      	mov	r0, r2
 8006fca:	f7fd fda0 	bl	8004b0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fce:	697b      	ldr	r3, [r7, #20]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	20008a50 	.word	0x20008a50
 8006fdc:	20008a4c 	.word	0x20008a4c

08006fe0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08e      	sub	sp, #56	; 0x38
 8006fe4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fe6:	e0c6      	b.n	8007176 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	da17      	bge.n	800701e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006fee:	1d3b      	adds	r3, r7, #4
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d109      	bne.n	800700e <prvProcessReceivedCommands+0x2e>
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	61fb      	str	r3, [r7, #28]
 800700c:	e7fe      	b.n	800700c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007014:	6850      	ldr	r0, [r2, #4]
 8007016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007018:	6892      	ldr	r2, [r2, #8]
 800701a:	4611      	mov	r1, r2
 800701c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f2c0 80a8 	blt.w	8007176 <prvProcessReceivedCommands+0x196>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d004      	beq.n	800703c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007034:	3304      	adds	r3, #4
 8007036:	4618      	mov	r0, r3
 8007038:	f7fd fda2 	bl	8004b80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800703c:	463b      	mov	r3, r7
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff ff6c 	bl	8006f1c <prvSampleTimeNow>
 8007044:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b09      	cmp	r3, #9
 800704a:	f200 8093 	bhi.w	8007174 <prvProcessReceivedCommands+0x194>
 800704e:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <prvProcessReceivedCommands+0x74>)
 8007050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007054:	0800707d 	.word	0x0800707d
 8007058:	0800707d 	.word	0x0800707d
 800705c:	0800707d 	.word	0x0800707d
 8007060:	080070ef 	.word	0x080070ef
 8007064:	08007103 	.word	0x08007103
 8007068:	0800714b 	.word	0x0800714b
 800706c:	0800707d 	.word	0x0800707d
 8007070:	0800707d 	.word	0x0800707d
 8007074:	080070ef 	.word	0x080070ef
 8007078:	08007103 	.word	0x08007103
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007082:	f043 0301 	orr.w	r3, r3, #1
 8007086:	b2da      	uxtb	r2, r3
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	18d1      	adds	r1, r2, r3
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800709a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800709c:	f7ff ff5e 	bl	8006f5c <prvInsertTimerInActiveList>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d067      	beq.n	8007176 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d05c      	beq.n	8007176 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	441a      	add	r2, r3
 80070c4:	2300      	movs	r3, #0
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	2300      	movs	r3, #0
 80070ca:	2100      	movs	r1, #0
 80070cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ce:	f7ff fe09 	bl	8006ce4 <xTimerGenericCommand>
 80070d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d14d      	bne.n	8007176 <prvProcessReceivedCommands+0x196>
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	61bb      	str	r3, [r7, #24]
 80070ec:	e7fe      	b.n	80070ec <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070f4:	f023 0301 	bic.w	r3, r3, #1
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007100:	e039      	b.n	8007176 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007108:	f043 0301 	orr.w	r3, r3, #1
 800710c:	b2da      	uxtb	r2, r3
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <prvProcessReceivedCommands+0x156>
 8007122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	e7fe      	b.n	8007134 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007138:	699a      	ldr	r2, [r3, #24]
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	18d1      	adds	r1, r2, r3
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007144:	f7ff ff0a 	bl	8006f5c <prvInsertTimerInActiveList>
					break;
 8007148:	e015      	b.n	8007176 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800714a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d103      	bne.n	8007160 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800715a:	f7fe f83b 	bl	80051d4 <vPortFree>
 800715e:	e00a      	b.n	8007176 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007166:	f023 0301 	bic.w	r3, r3, #1
 800716a:	b2da      	uxtb	r2, r3
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007172:	e000      	b.n	8007176 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
 8007174:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007176:	4b07      	ldr	r3, [pc, #28]	; (8007194 <prvProcessReceivedCommands+0x1b4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	1d39      	adds	r1, r7, #4
 800717c:	2200      	movs	r2, #0
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fbc8 	bl	8005914 <xQueueReceive>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	f47f af2e 	bne.w	8006fe8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800718c:	bf00      	nop
 800718e:	3730      	adds	r7, #48	; 0x30
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	20008a54 	.word	0x20008a54

08007198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800719e:	e047      	b.n	8007230 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071a0:	4b2d      	ldr	r3, [pc, #180]	; (8007258 <prvSwitchTimerLists+0xc0>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071aa:	4b2b      	ldr	r3, [pc, #172]	; (8007258 <prvSwitchTimerLists+0xc0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	3304      	adds	r3, #4
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fd fce1 	bl	8004b80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	6938      	ldr	r0, [r7, #16]
 80071c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d02d      	beq.n	8007230 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	699a      	ldr	r2, [r3, #24]
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	4413      	add	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d90e      	bls.n	8007204 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071f2:	4b19      	ldr	r3, [pc, #100]	; (8007258 <prvSwitchTimerLists+0xc0>)
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	3304      	adds	r3, #4
 80071fa:	4619      	mov	r1, r3
 80071fc:	4610      	mov	r0, r2
 80071fe:	f7fd fc86 	bl	8004b0e <vListInsert>
 8007202:	e015      	b.n	8007230 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007204:	2300      	movs	r3, #0
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	2300      	movs	r3, #0
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	2100      	movs	r1, #0
 800720e:	6938      	ldr	r0, [r7, #16]
 8007210:	f7ff fd68 	bl	8006ce4 <xTimerGenericCommand>
 8007214:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d109      	bne.n	8007230 <prvSwitchTimerLists+0x98>
 800721c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	603b      	str	r3, [r7, #0]
 800722e:	e7fe      	b.n	800722e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007230:	4b09      	ldr	r3, [pc, #36]	; (8007258 <prvSwitchTimerLists+0xc0>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1b2      	bne.n	80071a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800723a:	4b07      	ldr	r3, [pc, #28]	; (8007258 <prvSwitchTimerLists+0xc0>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8007240:	4b06      	ldr	r3, [pc, #24]	; (800725c <prvSwitchTimerLists+0xc4>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a04      	ldr	r2, [pc, #16]	; (8007258 <prvSwitchTimerLists+0xc0>)
 8007246:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007248:	4a04      	ldr	r2, [pc, #16]	; (800725c <prvSwitchTimerLists+0xc4>)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6013      	str	r3, [r2, #0]
}
 800724e:	bf00      	nop
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20008a4c 	.word	0x20008a4c
 800725c:	20008a50 	.word	0x20008a50

08007260 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007266:	f7fd fdd9 	bl	8004e1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800726a:	4b15      	ldr	r3, [pc, #84]	; (80072c0 <prvCheckForValidListAndQueue+0x60>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d120      	bne.n	80072b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007272:	4814      	ldr	r0, [pc, #80]	; (80072c4 <prvCheckForValidListAndQueue+0x64>)
 8007274:	f7fd fbfa 	bl	8004a6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007278:	4813      	ldr	r0, [pc, #76]	; (80072c8 <prvCheckForValidListAndQueue+0x68>)
 800727a:	f7fd fbf7 	bl	8004a6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800727e:	4b13      	ldr	r3, [pc, #76]	; (80072cc <prvCheckForValidListAndQueue+0x6c>)
 8007280:	4a10      	ldr	r2, [pc, #64]	; (80072c4 <prvCheckForValidListAndQueue+0x64>)
 8007282:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007284:	4b12      	ldr	r3, [pc, #72]	; (80072d0 <prvCheckForValidListAndQueue+0x70>)
 8007286:	4a10      	ldr	r2, [pc, #64]	; (80072c8 <prvCheckForValidListAndQueue+0x68>)
 8007288:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800728a:	2300      	movs	r3, #0
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	4b11      	ldr	r3, [pc, #68]	; (80072d4 <prvCheckForValidListAndQueue+0x74>)
 8007290:	4a11      	ldr	r2, [pc, #68]	; (80072d8 <prvCheckForValidListAndQueue+0x78>)
 8007292:	2110      	movs	r1, #16
 8007294:	200a      	movs	r0, #10
 8007296:	f7fe f919 	bl	80054cc <xQueueGenericCreateStatic>
 800729a:	4602      	mov	r2, r0
 800729c:	4b08      	ldr	r3, [pc, #32]	; (80072c0 <prvCheckForValidListAndQueue+0x60>)
 800729e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072a0:	4b07      	ldr	r3, [pc, #28]	; (80072c0 <prvCheckForValidListAndQueue+0x60>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d005      	beq.n	80072b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072a8:	4b05      	ldr	r3, [pc, #20]	; (80072c0 <prvCheckForValidListAndQueue+0x60>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	490b      	ldr	r1, [pc, #44]	; (80072dc <prvCheckForValidListAndQueue+0x7c>)
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe fd1c 	bl	8005cec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072b4:	f7fd fde0 	bl	8004e78 <vPortExitCritical>
}
 80072b8:	bf00      	nop
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	20008a54 	.word	0x20008a54
 80072c4:	20008a24 	.word	0x20008a24
 80072c8:	20008a38 	.word	0x20008a38
 80072cc:	20008a4c 	.word	0x20008a4c
 80072d0:	20008a50 	.word	0x20008a50
 80072d4:	20008b00 	.word	0x20008b00
 80072d8:	20008a60 	.word	0x20008a60
 80072dc:	0800b9e8 	.word	0x0800b9e8

080072e0 <Get_OutValue>:
#include "task.h"

static uint16_t out_value = 0;

uint16_t Get_OutValue()
{
 80072e0:	b480      	push	{r7}
 80072e2:	af00      	add	r7, sp, #0
	return out_value;
 80072e4:	4b03      	ldr	r3, [pc, #12]	; (80072f4 <Get_OutValue+0x14>)
 80072e6:	881b      	ldrh	r3, [r3, #0]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	20008b50 	.word	0x20008b50

080072f8 <BitEngine_task>:

void BitEngine_task( void * pvParameters )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d009      	beq.n	800731a <BitEngine_task+0x22>
 8007306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	60bb      	str	r3, [r7, #8]
 8007318:	e7fe      	b.n	8007318 <BitEngine_task+0x20>

    INO_Init();
 800731a:	f000 f953 	bl	80075c4 <INO_Init>

    vTaskDelay(pdMS_TO_TICKS(10));
 800731e:	200a      	movs	r0, #10
 8007320:	f7fe ff50 	bl	80061c4 <vTaskDelay>

    memset(outputs, 0, sizeof(outputs));
 8007324:	f24e 1240 	movw	r2, #57664	; 0xe140
 8007328:	2100      	movs	r1, #0
 800732a:	4837      	ldr	r0, [pc, #220]	; (8007408 <BitEngine_task+0x110>)
 800732c:	f002 fb44 	bl	80099b8 <memset>


    while(1)
    {
    	for (uint8_t i = 0; i < OUTPUTS_N; ++i)
 8007330:	2300      	movs	r3, #0
 8007332:	73fb      	strb	r3, [r7, #15]
 8007334:	e061      	b.n	80073fa <BitEngine_task+0x102>
    	{
			if (outputs[i].branch_n == 0 || outputs[i].branch_n > 1024)
 8007336:	7bfb      	ldrb	r3, [r7, #15]
 8007338:	4a33      	ldr	r2, [pc, #204]	; (8007408 <BitEngine_task+0x110>)
 800733a:	f640 6114 	movw	r1, #3604	; 0xe14
 800733e:	fb01 f303 	mul.w	r3, r1, r3
 8007342:	4413      	add	r3, r2
 8007344:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d051      	beq.n	80073f2 <BitEngine_task+0xfa>
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	4a2d      	ldr	r2, [pc, #180]	; (8007408 <BitEngine_task+0x110>)
 8007352:	f640 6114 	movw	r1, #3604	; 0xe14
 8007356:	fb01 f303 	mul.w	r3, r1, r3
 800735a:	4413      	add	r3, r2
 800735c:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007366:	d844      	bhi.n	80073f2 <BitEngine_task+0xfa>
			{
				continue;
			}
			start_bit_engine(outputs[i].root_par, outputs[i].branch_n, out_value);
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	f640 6214 	movw	r2, #3604	; 0xe14
 800736e:	fb02 f303 	mul.w	r3, r2, r3
 8007372:	f503 6351 	add.w	r3, r3, #3344	; 0xd10
 8007376:	4a24      	ldr	r2, [pc, #144]	; (8007408 <BitEngine_task+0x110>)
 8007378:	1898      	adds	r0, r3, r2
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	4a22      	ldr	r2, [pc, #136]	; (8007408 <BitEngine_task+0x110>)
 800737e:	f640 6114 	movw	r1, #3604	; 0xe14
 8007382:	fb01 f303 	mul.w	r3, r1, r3
 8007386:	4413      	add	r3, r2
 8007388:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 800738c:	8819      	ldrh	r1, [r3, #0]
 800738e:	4b1f      	ldr	r3, [pc, #124]	; (800740c <BitEngine_task+0x114>)
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	f7f9 fcc2 	bl	8000d1c <start_bit_engine>

			uint16_t branch = outputs[i].branch_n;
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	4a1b      	ldr	r2, [pc, #108]	; (8007408 <BitEngine_task+0x110>)
 800739c:	f640 6114 	movw	r1, #3604	; 0xe14
 80073a0:	fb01 f303 	mul.w	r3, r1, r3
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	81bb      	strh	r3, [r7, #12]
			if(outputs[i].root_par[branch - 1].result) {
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	89ba      	ldrh	r2, [r7, #12]
 80073b2:	3a01      	subs	r2, #1
 80073b4:	4914      	ldr	r1, [pc, #80]	; (8007408 <BitEngine_task+0x110>)
 80073b6:	0112      	lsls	r2, r2, #4
 80073b8:	f640 6014 	movw	r0, #3604	; 0xe14
 80073bc:	fb00 f303 	mul.w	r3, r0, r3
 80073c0:	4413      	add	r3, r2
 80073c2:	440b      	add	r3, r1
 80073c4:	f603 531c 	addw	r3, r3, #3356	; 0xd1c
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00d      	beq.n	80073ea <BitEngine_task+0xf2>
				out_value |= 1 << i;
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	2201      	movs	r2, #1
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	b21a      	sxth	r2, r3
 80073d8:	4b0c      	ldr	r3, [pc, #48]	; (800740c <BitEngine_task+0x114>)
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	b21b      	sxth	r3, r3
 80073de:	4313      	orrs	r3, r2
 80073e0:	b21b      	sxth	r3, r3
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	4b09      	ldr	r3, [pc, #36]	; (800740c <BitEngine_task+0x114>)
 80073e6:	801a      	strh	r2, [r3, #0]
 80073e8:	e004      	b.n	80073f4 <BitEngine_task+0xfc>
			} else {
				out_value &= 0 << i;
 80073ea:	4b08      	ldr	r3, [pc, #32]	; (800740c <BitEngine_task+0x114>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e000      	b.n	80073f4 <BitEngine_task+0xfc>
				continue;
 80073f2:	bf00      	nop
    	for (uint8_t i = 0; i < OUTPUTS_N; ++i)
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	3301      	adds	r3, #1
 80073f8:	73fb      	strb	r3, [r7, #15]
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	2b0f      	cmp	r3, #15
 80073fe:	d99a      	bls.n	8007336 <BitEngine_task+0x3e>
			}
		}

    	vTaskDelay(pdMS_TO_TICKS(40));
 8007400:	2028      	movs	r0, #40	; 0x28
 8007402:	f7fe fedf 	bl	80061c4 <vTaskDelay>
    	for (uint8_t i = 0; i < OUTPUTS_N; ++i)
 8007406:	e793      	b.n	8007330 <BitEngine_task+0x38>
 8007408:	20008ba8 	.word	0x20008ba8
 800740c:	20008b50 	.word	0x20008b50

08007410 <BitEngine_TaskInit>:
    }
}


void BitEngine_TaskInit( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 8007416:	2300      	movs	r3, #0
 8007418:	607b      	str	r3, [r7, #4]
	xTaskCreate(
 800741a:	1d3b      	adds	r3, r7, #4
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	2304      	movs	r3, #4
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	2301      	movs	r3, #1
 8007424:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007428:	4903      	ldr	r1, [pc, #12]	; (8007438 <BitEngine_TaskInit+0x28>)
 800742a:	4804      	ldr	r0, [pc, #16]	; (800743c <BitEngine_TaskInit+0x2c>)
 800742c:	f7fe fd14 	bl	8005e58 <xTaskCreate>
					4096,	 						 /* Stack size in words, not bytes. */
                    ( void * ) 1,     			 	 /* Parameter passed into the task. */
                    4,				 				 /* Priority at which the task is created. */
                    &xHandle );   			   	     /* Used to pass out the created task's handle. */

}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	0800b9f0 	.word	0x0800b9f0
 800743c:	080072f9 	.word	0x080072f9

08007440 <ESP_Task>:
#include "FreeRTOSConfig.h"
#include "FreeRTOS.h"
#include "task.h"

void ESP_Task( void * pvParameters )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d009      	beq.n	8007462 <ESP_Task+0x22>
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	60bb      	str	r3, [r7, #8]
 8007460:	e7fe      	b.n	8007460 <ESP_Task+0x20>

    ESP_Init(vTaskDelay);
 8007462:	481c      	ldr	r0, [pc, #112]	; (80074d4 <ESP_Task+0x94>)
 8007464:	f7fa ffc4 	bl	80023f0 <ESP_Init>
    CN_State connection_state = RST;
 8007468:	2301      	movs	r3, #1
 800746a:	73fb      	strb	r3, [r7, #15]

    while(1)
    {
    	switch(connection_state)
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	3b01      	subs	r3, #1
 8007470:	2b03      	cmp	r3, #3
 8007472:	d828      	bhi.n	80074c6 <ESP_Task+0x86>
 8007474:	a201      	add	r2, pc, #4	; (adr r2, 800747c <ESP_Task+0x3c>)
 8007476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747a:	bf00      	nop
 800747c:	0800748d 	.word	0x0800748d
 8007480:	0800749d 	.word	0x0800749d
 8007484:	080074a9 	.word	0x080074a9
 8007488:	080074c1 	.word	0x080074c1
    	{
    	case RST:
    		FLed_Set(OFF);
 800748c:	2000      	movs	r0, #0
 800748e:	f000 f997 	bl	80077c0 <FLed_Set>
    		ESP_SoftReset();
 8007492:	f7fb f833 	bl	80024fc <ESP_SoftReset>

    		connection_state = SET_MODE;
 8007496:	2302      	movs	r3, #2
 8007498:	73fb      	strb	r3, [r7, #15]
    		break;
 800749a:	e015      	b.n	80074c8 <ESP_Task+0x88>

    	case SET_MODE:
    		ESP_SetMode(ESP_MODE_BOTH);
 800749c:	2003      	movs	r0, #3
 800749e:	f7fb f839 	bl	8002514 <ESP_SetMode>

    		connection_state = CONNECT_WIFI;
 80074a2:	2303      	movs	r3, #3
 80074a4:	73fb      	strb	r3, [r7, #15]
    		break;
 80074a6:	e00f      	b.n	80074c8 <ESP_Task+0x88>

    	case CONNECT_WIFI:
    		ESP_SetParamsSoftAP("DontTouchAnything", "save_809");
 80074a8:	490b      	ldr	r1, [pc, #44]	; (80074d8 <ESP_Task+0x98>)
 80074aa:	480c      	ldr	r0, [pc, #48]	; (80074dc <ESP_Task+0x9c>)
 80074ac:	f7fb f872 	bl	8002594 <ESP_SetParamsSoftAP>
    		ESP_UpdateTime();
 80074b0:	f7fb f9e2 	bl	8002878 <ESP_UpdateTime>
    		FLed_Set(ON);
 80074b4:	2001      	movs	r0, #1
 80074b6:	f000 f983 	bl	80077c0 <FLed_Set>

    		connection_state = SEND_REQ;
 80074ba:	2304      	movs	r3, #4
 80074bc:	73fb      	strb	r3, [r7, #15]
    		break;
 80074be:	e003      	b.n	80074c8 <ESP_Task+0x88>

    	case SEND_REQ:
    		ESP_GetJson();
 80074c0:	f7fb f982 	bl	80027c8 <ESP_GetJson>
    		break;
 80074c4:	e000      	b.n	80074c8 <ESP_Task+0x88>

    	default:
    		break;
 80074c6:	bf00      	nop

    	}

    	//ESP_SendSensorList();
    	vTaskDelay(pdMS_TO_TICKS(1000));
 80074c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80074cc:	f7fe fe7a 	bl	80061c4 <vTaskDelay>
    	switch(connection_state)
 80074d0:	e7cc      	b.n	800746c <ESP_Task+0x2c>
 80074d2:	bf00      	nop
 80074d4:	080061c5 	.word	0x080061c5
 80074d8:	0800ba00 	.word	0x0800ba00
 80074dc:	0800ba0c 	.word	0x0800ba0c

080074e0 <ESP_TaskInit>:
    }
}

void ESP_TaskInit( void )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	607b      	str	r3, [r7, #4]
    xTaskCreate(
 80074ea:	1d3b      	adds	r3, r7, #4
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	2304      	movs	r3, #4
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	2301      	movs	r3, #1
 80074f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074f8:	4903      	ldr	r1, [pc, #12]	; (8007508 <ESP_TaskInit+0x28>)
 80074fa:	4804      	ldr	r0, [pc, #16]	; (800750c <ESP_TaskInit+0x2c>)
 80074fc:	f7fe fcac 	bl	8005e58 <xTaskCreate>
                    "ESP_Task",    				 /* Text name for the task. */
					2048,	 					 /* Stack size in words, not bytes. */
                    ( void * ) 1,     		 	 /* Parameter passed into the task. */
                    4,				 			 /* Priority at which the task is created. */
                    &xHandle );   		   	     /* Used to pass out the created task's handle. */
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	0800ba20 	.word	0x0800ba20
 800750c:	08007441 	.word	0x08007441

08007510 <Init_Task>:
#include "FreeRTOSConfig.h"
#include "FreeRTOS.h"
#include "task.h"

void Init_Task( void * pvParameters )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d009      	beq.n	8007532 <Init_Task+0x22>
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	e7fe      	b.n	8007530 <Init_Task+0x20>

    LED_Init();
 8007532:	f000 f8d3 	bl	80076dc <LED_Init>
    PowerControlInit();
 8007536:	f000 f897 	bl	8007668 <PowerControlInit>

    PowerControlPerih(ON);
 800753a:	2001      	movs	r0, #1
 800753c:	f000 f8b6 	bl	80076ac <PowerControlPerih>

    BoardLED_Set(OFF);
 8007540:	2000      	movs	r0, #0
 8007542:	f000 f90d 	bl	8007760 <BoardLED_Set>
    FLed_Set(OFF);
 8007546:	2000      	movs	r0, #0
 8007548:	f000 f93a 	bl	80077c0 <FLed_Set>
    SLed_Set(OFF);
 800754c:	2000      	movs	r0, #0
 800754e:	f000 f945 	bl	80077dc <SLed_Set>
    TLed_Set(OFF);
 8007552:	2000      	movs	r0, #0
 8007554:	f000 f950 	bl	80077f8 <TLed_Set>
    RLed_Set(OFF);
 8007558:	2000      	movs	r0, #0
 800755a:	f000 f95b 	bl	8007814 <RLed_Set>

    outputs_updated_flag = 0;
 800755e:	4b06      	ldr	r3, [pc, #24]	; (8007578 <Init_Task+0x68>)
 8007560:	2200      	movs	r2, #0
 8007562:	701a      	strb	r2, [r3, #0]

    vTaskDelay(pdMS_TO_TICKS(10));
 8007564:	200a      	movs	r0, #10
 8007566:	f7fe fe2d 	bl	80061c4 <vTaskDelay>
    vTaskDelete(NULL);
 800756a:	2000      	movs	r0, #0
 800756c:	f7fe fdb8 	bl	80060e0 <vTaskDelete>
}
 8007570:	bf00      	nop
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	20008ba4 	.word	0x20008ba4

0800757c <Init_TaskInit>:

void Init_TaskInit( void )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 8007582:	2300      	movs	r3, #0
 8007584:	607b      	str	r3, [r7, #4]
    xTaskCreate(
 8007586:	1d3b      	adds	r3, r7, #4
 8007588:	9301      	str	r3, [sp, #4]
 800758a:	2304      	movs	r3, #4
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	2301      	movs	r3, #1
 8007590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007594:	4903      	ldr	r1, [pc, #12]	; (80075a4 <Init_TaskInit+0x28>)
 8007596:	4804      	ldr	r0, [pc, #16]	; (80075a8 <Init_TaskInit+0x2c>)
 8007598:	f7fe fc5e 	bl	8005e58 <xTaskCreate>
                    "Init_Task",    			 /* Text name for the task. */
					2048,	 					 /* Stack size in words, not bytes. */
                    ( void * ) 1,     		 	 /* Parameter passed into the task. */
                    4,				 			 /* Priority at which the task is created. */
                    &xHandle );   		   	     /* Used to pass out the created task's handle. */
}
 800759c:	bf00      	nop
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	0800ba2c 	.word	0x0800ba2c
 80075a8:	08007511 	.word	0x08007511

080075ac <LL_GPIO_ReadInputPort>:
  * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <INO_Init>:
/*
 * INO - PE8-PE15 inputs pins
 */

void INO_Init()
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075ca:	463b      	mov	r3, r7
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	605a      	str	r2, [r3, #4]
 80075d2:	609a      	str	r2, [r3, #8]
 80075d4:	60da      	str	r2, [r3, #12]
 80075d6:	611a      	str	r2, [r3, #16]
 80075d8:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_8 || LL_GPIO_PIN_9 || LL_GPIO_PIN_10 || LL_GPIO_PIN_11
 80075da:	2301      	movs	r3, #1
 80075dc:	603b      	str	r3, [r7, #0]
					 || LL_GPIO_PIN_12 || LL_GPIO_PIN_13 || LL_GPIO_PIN_14 || LL_GPIO_PIN_15;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80075de:	2300      	movs	r3, #0
 80075e0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80075e2:	2302      	movs	r3, #2
 80075e4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80075e6:	463b      	mov	r3, r7
 80075e8:	4619      	mov	r1, r3
 80075ea:	4803      	ldr	r0, [pc, #12]	; (80075f8 <INO_Init+0x34>)
 80075ec:	f7fc f933 	bl	8003856 <LL_GPIO_Init>
}
 80075f0:	bf00      	nop
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	40021000 	.word	0x40021000

080075fc <INO_GetValue>:

uint8_t INO_GetValue(uint8_t pin)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	4603      	mov	r3, r0
 8007604:	71fb      	strb	r3, [r7, #7]
	return LL_GPIO_ReadInputPort(GPIOE) & (1 << pin);
 8007606:	4808      	ldr	r0, [pc, #32]	; (8007628 <INO_GetValue+0x2c>)
 8007608:	f7ff ffd0 	bl	80075ac <LL_GPIO_ReadInputPort>
 800760c:	4603      	mov	r3, r0
 800760e:	b2da      	uxtb	r2, r3
 8007610:	79fb      	ldrb	r3, [r7, #7]
 8007612:	2101      	movs	r1, #1
 8007614:	fa01 f303 	lsl.w	r3, r1, r3
 8007618:	b2db      	uxtb	r3, r3
 800761a:	4013      	ands	r3, r2
 800761c:	b2db      	uxtb	r3, r3
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	40021000 	.word	0x40021000

0800762c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	619a      	str	r2, [r3, #24]
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	041a      	lsls	r2, r3, #16
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	619a      	str	r2, [r3, #24]
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
	...

08007668 <PowerControlInit>:
	T_LED = LL_GPIO_PIN_3,
	R_LED = LL_GPIO_PIN_2
};

void PowerControlInit()
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800766e:	463b      	mov	r3, r7
 8007670:	2200      	movs	r2, #0
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	605a      	str	r2, [r3, #4]
 8007676:	609a      	str	r2, [r3, #8]
 8007678:	60da      	str	r2, [r3, #12]
 800767a:	611a      	str	r2, [r3, #16]
 800767c:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = PWR_CONTROL;
 800767e:	2302      	movs	r3, #2
 8007680:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007682:	2301      	movs	r3, #1
 8007684:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007686:	2301      	movs	r3, #1
 8007688:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800768a:	2301      	movs	r3, #1
 800768c:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(PWR_CONTROL_PORT, &GPIO_InitStruct);
 800768e:	463b      	mov	r3, r7
 8007690:	4619      	mov	r1, r3
 8007692:	4805      	ldr	r0, [pc, #20]	; (80076a8 <PowerControlInit+0x40>)
 8007694:	f7fc f8df 	bl	8003856 <LL_GPIO_Init>

	LL_GPIO_ResetOutputPin(PWR_CONTROL_PORT, PWR_CONTROL);
 8007698:	2102      	movs	r1, #2
 800769a:	4803      	ldr	r0, [pc, #12]	; (80076a8 <PowerControlInit+0x40>)
 800769c:	f7ff ffd4 	bl	8007648 <LL_GPIO_ResetOutputPin>
}
 80076a0:	bf00      	nop
 80076a2:	3718      	adds	r7, #24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	40021000 	.word	0x40021000

080076ac <PowerControlPerih>:

void PowerControlPerih(uint8_t val)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4603      	mov	r3, r0
 80076b4:	71fb      	strb	r3, [r7, #7]
	if(val) {
 80076b6:	79fb      	ldrb	r3, [r7, #7]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d004      	beq.n	80076c6 <PowerControlPerih+0x1a>
		LL_GPIO_SetOutputPin(PWR_CONTROL_PORT, PWR_CONTROL);
 80076bc:	2102      	movs	r1, #2
 80076be:	4806      	ldr	r0, [pc, #24]	; (80076d8 <PowerControlPerih+0x2c>)
 80076c0:	f7ff ffb4 	bl	800762c <LL_GPIO_SetOutputPin>
	} else {
		LL_GPIO_ResetOutputPin(PWR_CONTROL_PORT, PWR_CONTROL);
	}
}
 80076c4:	e003      	b.n	80076ce <PowerControlPerih+0x22>
		LL_GPIO_ResetOutputPin(PWR_CONTROL_PORT, PWR_CONTROL);
 80076c6:	2102      	movs	r1, #2
 80076c8:	4803      	ldr	r0, [pc, #12]	; (80076d8 <PowerControlPerih+0x2c>)
 80076ca:	f7ff ffbd 	bl	8007648 <LL_GPIO_ResetOutputPin>
}
 80076ce:	bf00      	nop
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	40021000 	.word	0x40021000

080076dc <LED_Init>:

void LED_Init()
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076e2:	463b      	mov	r3, r7
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	605a      	str	r2, [r3, #4]
 80076ea:	609a      	str	r2, [r3, #8]
 80076ec:	60da      	str	r2, [r3, #12]
 80076ee:	611a      	str	r2, [r3, #16]
 80076f0:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = BOARD_LED;
 80076f2:	2302      	movs	r3, #2
 80076f4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80076f6:	2301      	movs	r3, #1
 80076f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80076fa:	2302      	movs	r3, #2
 80076fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80076fe:	2301      	movs	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(BOARD_PORT, &GPIO_InitStruct);
 8007702:	463b      	mov	r3, r7
 8007704:	4619      	mov	r1, r3
 8007706:	4814      	ldr	r0, [pc, #80]	; (8007758 <LED_Init+0x7c>)
 8007708:	f7fc f8a5 	bl	8003856 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = F_LED|S_LED|T_LED|R_LED;
 800770c:	233c      	movs	r3, #60	; 0x3c
 800770e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007710:	2301      	movs	r3, #1
 8007712:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007714:	2302      	movs	r3, #2
 8007716:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(FSTR_PORT, &GPIO_InitStruct);
 800771c:	463b      	mov	r3, r7
 800771e:	4619      	mov	r1, r3
 8007720:	480e      	ldr	r0, [pc, #56]	; (800775c <LED_Init+0x80>)
 8007722:	f7fc f898 	bl	8003856 <LL_GPIO_Init>

	LL_GPIO_ResetOutputPin(BOARD_PORT, BOARD_LED);
 8007726:	2102      	movs	r1, #2
 8007728:	480b      	ldr	r0, [pc, #44]	; (8007758 <LED_Init+0x7c>)
 800772a:	f7ff ff8d 	bl	8007648 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(FSTR_PORT, F_LED);
 800772e:	2110      	movs	r1, #16
 8007730:	480a      	ldr	r0, [pc, #40]	; (800775c <LED_Init+0x80>)
 8007732:	f7ff ff89 	bl	8007648 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(FSTR_PORT, S_LED);
 8007736:	2120      	movs	r1, #32
 8007738:	4808      	ldr	r0, [pc, #32]	; (800775c <LED_Init+0x80>)
 800773a:	f7ff ff85 	bl	8007648 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(FSTR_PORT, T_LED);
 800773e:	2108      	movs	r1, #8
 8007740:	4806      	ldr	r0, [pc, #24]	; (800775c <LED_Init+0x80>)
 8007742:	f7ff ff81 	bl	8007648 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(FSTR_PORT, R_LED);
 8007746:	2104      	movs	r1, #4
 8007748:	4804      	ldr	r0, [pc, #16]	; (800775c <LED_Init+0x80>)
 800774a:	f7ff ff7d 	bl	8007648 <LL_GPIO_ResetOutputPin>
}
 800774e:	bf00      	nop
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	40020000 	.word	0x40020000
 800775c:	40021000 	.word	0x40021000

08007760 <BoardLED_Set>:

void BoardLED_Set(uint8_t val)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	71fb      	strb	r3, [r7, #7]
	if(val) {
 800776a:	79fb      	ldrb	r3, [r7, #7]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d004      	beq.n	800777a <BoardLED_Set+0x1a>
		LL_GPIO_SetOutputPin(BOARD_PORT, BOARD_LED);
 8007770:	2102      	movs	r1, #2
 8007772:	4806      	ldr	r0, [pc, #24]	; (800778c <BoardLED_Set+0x2c>)
 8007774:	f7ff ff5a 	bl	800762c <LL_GPIO_SetOutputPin>
	} else {
		LL_GPIO_ResetOutputPin(BOARD_PORT, BOARD_LED);
	}
}
 8007778:	e003      	b.n	8007782 <BoardLED_Set+0x22>
		LL_GPIO_ResetOutputPin(BOARD_PORT, BOARD_LED);
 800777a:	2102      	movs	r1, #2
 800777c:	4803      	ldr	r0, [pc, #12]	; (800778c <BoardLED_Set+0x2c>)
 800777e:	f7ff ff63 	bl	8007648 <LL_GPIO_ResetOutputPin>
}
 8007782:	bf00      	nop
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	40020000 	.word	0x40020000

08007790 <FSTRLED_Set>:

static void FSTRLED_Set(uint32_t led, uint8_t val)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	70fb      	strb	r3, [r7, #3]
	if(val) {
 800779c:	78fb      	ldrb	r3, [r7, #3]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d004      	beq.n	80077ac <FSTRLED_Set+0x1c>
		LL_GPIO_SetOutputPin(FSTR_PORT, led);
 80077a2:	6879      	ldr	r1, [r7, #4]
 80077a4:	4805      	ldr	r0, [pc, #20]	; (80077bc <FSTRLED_Set+0x2c>)
 80077a6:	f7ff ff41 	bl	800762c <LL_GPIO_SetOutputPin>
	} else {
		LL_GPIO_ResetOutputPin(FSTR_PORT, led);
	}
}
 80077aa:	e003      	b.n	80077b4 <FSTRLED_Set+0x24>
		LL_GPIO_ResetOutputPin(FSTR_PORT, led);
 80077ac:	6879      	ldr	r1, [r7, #4]
 80077ae:	4803      	ldr	r0, [pc, #12]	; (80077bc <FSTRLED_Set+0x2c>)
 80077b0:	f7ff ff4a 	bl	8007648 <LL_GPIO_ResetOutputPin>
}
 80077b4:	bf00      	nop
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	40021000 	.word	0x40021000

080077c0 <FLed_Set>:

void FLed_Set(uint8_t val)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	71fb      	strb	r3, [r7, #7]
	FSTRLED_Set(F_LED, val);
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	4619      	mov	r1, r3
 80077ce:	2010      	movs	r0, #16
 80077d0:	f7ff ffde 	bl	8007790 <FSTRLED_Set>
}
 80077d4:	bf00      	nop
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <SLed_Set>:

void SLed_Set(uint8_t val)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	71fb      	strb	r3, [r7, #7]
	FSTRLED_Set(S_LED, val);
 80077e6:	79fb      	ldrb	r3, [r7, #7]
 80077e8:	4619      	mov	r1, r3
 80077ea:	2020      	movs	r0, #32
 80077ec:	f7ff ffd0 	bl	8007790 <FSTRLED_Set>
}
 80077f0:	bf00      	nop
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <TLed_Set>:

void TLed_Set(uint8_t val)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	4603      	mov	r3, r0
 8007800:	71fb      	strb	r3, [r7, #7]
	FSTRLED_Set(T_LED, val);
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	4619      	mov	r1, r3
 8007806:	2008      	movs	r0, #8
 8007808:	f7ff ffc2 	bl	8007790 <FSTRLED_Set>
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <RLed_Set>:

void RLed_Set(uint8_t val)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	71fb      	strb	r3, [r7, #7]
	FSTRLED_Set(R_LED, val);
 800781e:	79fb      	ldrb	r3, [r7, #7]
 8007820:	4619      	mov	r1, r3
 8007822:	2004      	movs	r0, #4
 8007824:	f7ff ffb4 	bl	8007790 <FSTRLED_Set>
}
 8007828:	bf00      	nop
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <LL_SPI_Enable>:
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	601a      	str	r2, [r3, #0]
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <LL_SPI_SetStandard>:
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f023 0210 	bic.w	r2, r3, #16
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	605a      	str	r2, [r3, #4]
}
 800786a:	bf00      	nop
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8007876:	b480      	push	{r7}
 8007878:	b085      	sub	sp, #20
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	460b      	mov	r3, r1
 8007880:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	330c      	adds	r3, #12
 8007886:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	78fa      	ldrb	r2, [r7, #3]
 800788c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800788e:	bf00      	nop
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <LL_GPIO_SetOutputPin>:
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	619a      	str	r2, [r3, #24]
}
 80078aa:	bf00      	nop
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <LL_GPIO_ResetOutputPin>:
{
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	041a      	lsls	r2, r3, #16
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	619a      	str	r2, [r3, #24]
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <SPI2_Init>:
#include "FreeRTOS.h"
#include "task.h"


void SPI2_Init(void)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b090      	sub	sp, #64	; 0x40
 80078d8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80078da:	f107 0318 	add.w	r3, r7, #24
 80078de:	2228      	movs	r2, #40	; 0x28
 80078e0:	2100      	movs	r1, #0
 80078e2:	4618      	mov	r0, r3
 80078e4:	f002 f868 	bl	80099b8 <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078e8:	463b      	mov	r3, r7
 80078ea:	2200      	movs	r2, #0
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	605a      	str	r2, [r3, #4]
 80078f0:	609a      	str	r2, [r3, #8]
 80078f2:	60da      	str	r2, [r3, #12]
 80078f4:	611a      	str	r2, [r3, #16]
 80078f6:	615a      	str	r2, [r3, #20]
	/**SPI2 GPIO Configuration
	PC2   ------> SPI2_MISO
	PC3   ------> SPI2_MOSI
	PB13  ------> SPI2_SCK
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80078f8:	230c      	movs	r3, #12
 80078fa:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80078fc:	2302      	movs	r3, #2
 80078fe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007900:	2303      	movs	r3, #3
 8007902:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007904:	2300      	movs	r3, #0
 8007906:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007908:	2300      	movs	r3, #0
 800790a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800790c:	2305      	movs	r3, #5
 800790e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007910:	463b      	mov	r3, r7
 8007912:	4619      	mov	r1, r3
 8007914:	481d      	ldr	r0, [pc, #116]	; (800798c <SPI2_Init+0xb8>)
 8007916:	f7fb ff9e 	bl	8003856 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800791a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800791e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007920:	2302      	movs	r3, #2
 8007922:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007924:	2303      	movs	r3, #3
 8007926:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007928:	2300      	movs	r3, #0
 800792a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800792c:	2300      	movs	r3, #0
 800792e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8007930:	2305      	movs	r3, #5
 8007932:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007934:	463b      	mov	r3, r7
 8007936:	4619      	mov	r1, r3
 8007938:	4815      	ldr	r0, [pc, #84]	; (8007990 <SPI2_Init+0xbc>)
 800793a:	f7fb ff8c 	bl	8003856 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800793e:	2300      	movs	r3, #0
 8007940:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8007942:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007946:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8007948:	2300      	movs	r3, #0
 800794a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800794c:	2300      	movs	r3, #0
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8007950:	2300      	movs	r3, #0
 8007952:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8007954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007958:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800795a:	2310      	movs	r3, #16
 800795c:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800795e:	2300      	movs	r3, #0
 8007960:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8007962:	2300      	movs	r3, #0
 8007964:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8007966:	230a      	movs	r3, #10
 8007968:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(SPI2, &SPI_InitStruct);
 800796a:	f107 0318 	add.w	r3, r7, #24
 800796e:	4619      	mov	r1, r3
 8007970:	4808      	ldr	r0, [pc, #32]	; (8007994 <SPI2_Init+0xc0>)
 8007972:	f7fc fc6e 	bl	8004252 <LL_SPI_Init>
	LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8007976:	2100      	movs	r1, #0
 8007978:	4806      	ldr	r0, [pc, #24]	; (8007994 <SPI2_Init+0xc0>)
 800797a:	f7ff ff69 	bl	8007850 <LL_SPI_SetStandard>
	LL_SPI_Enable(SPI2);
 800797e:	4805      	ldr	r0, [pc, #20]	; (8007994 <SPI2_Init+0xc0>)
 8007980:	f7ff ff56 	bl	8007830 <LL_SPI_Enable>
}
 8007984:	bf00      	nop
 8007986:	3740      	adds	r7, #64	; 0x40
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40020800 	.word	0x40020800
 8007990:	40020400 	.word	0x40020400
 8007994:	40003800 	.word	0x40003800

08007998 <SPI2_SendByte>:

static void SPI2_SendByte(uint8_t byte)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	4603      	mov	r3, r0
 80079a0:	71fb      	strb	r3, [r7, #7]
	while (!(SPI2->SR & SPI_SR_TXE));
 80079a2:	bf00      	nop
 80079a4:	4b0a      	ldr	r3, [pc, #40]	; (80079d0 <SPI2_SendByte+0x38>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0f9      	beq.n	80079a4 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(SPI2, byte);
 80079b0:	79fb      	ldrb	r3, [r7, #7]
 80079b2:	4619      	mov	r1, r3
 80079b4:	4806      	ldr	r0, [pc, #24]	; (80079d0 <SPI2_SendByte+0x38>)
 80079b6:	f7ff ff5e 	bl	8007876 <LL_SPI_TransmitData8>
	while (SPI2->SR & SPI_SR_BSY);
 80079ba:	bf00      	nop
 80079bc:	4b04      	ldr	r3, [pc, #16]	; (80079d0 <SPI2_SendByte+0x38>)
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1f9      	bne.n	80079bc <SPI2_SendByte+0x24>
}
 80079c8:	bf00      	nop
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	40003800 	.word	0x40003800

080079d4 <GPIO_Init>:

static void GPIO_Init()
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079da:	463b      	mov	r3, r7
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]
 80079e0:	605a      	str	r2, [r3, #4]
 80079e2:	609a      	str	r2, [r3, #8]
 80079e4:	60da      	str	r2, [r3, #12]
 80079e6:	611a      	str	r2, [r3, #16]
 80079e8:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_1; //ST_CP latchPin
 80079ea:	2302      	movs	r3, #2
 80079ec:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80079ee:	2301      	movs	r3, #1
 80079f0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80079f2:	2301      	movs	r3, #1
 80079f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80079f6:	2301      	movs	r3, #1
 80079f8:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079fa:	463b      	mov	r3, r7
 80079fc:	4619      	mov	r1, r3
 80079fe:	4803      	ldr	r0, [pc, #12]	; (8007a0c <GPIO_Init+0x38>)
 8007a00:	f7fb ff29 	bl	8003856 <LL_GPIO_Init>
}
 8007a04:	bf00      	nop
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	40020800 	.word	0x40020800

08007a10 <LATCH_Set>:

static void LATCH_Set(uint8_t val)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	4603      	mov	r3, r0
 8007a18:	71fb      	strb	r3, [r7, #7]
	if(val) {
 8007a1a:	79fb      	ldrb	r3, [r7, #7]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d004      	beq.n	8007a2a <LATCH_Set+0x1a>
		LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_1);
 8007a20:	2102      	movs	r1, #2
 8007a22:	4806      	ldr	r0, [pc, #24]	; (8007a3c <LATCH_Set+0x2c>)
 8007a24:	f7ff ff39 	bl	800789a <LL_GPIO_SetOutputPin>
	} else {
		LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1);
	}
}
 8007a28:	e003      	b.n	8007a32 <LATCH_Set+0x22>
		LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1);
 8007a2a:	2102      	movs	r1, #2
 8007a2c:	4803      	ldr	r0, [pc, #12]	; (8007a3c <LATCH_Set+0x2c>)
 8007a2e:	f7ff ff42 	bl	80078b6 <LL_GPIO_ResetOutputPin>
}
 8007a32:	bf00      	nop
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	40020800 	.word	0x40020800

08007a40 <Relay_SetValue>:

static void Relay_SetValue(uint16_t out_value)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	80fb      	strh	r3, [r7, #6]
	LATCH_Set(0);
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	f7ff ffe0 	bl	8007a10 <LATCH_Set>
	SPI2_SendByte(~(uint8_t)(out_value >> 8));
 8007a50:	88fb      	ldrh	r3, [r7, #6]
 8007a52:	0a1b      	lsrs	r3, r3, #8
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	43db      	mvns	r3, r3
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7ff ff9b 	bl	8007998 <SPI2_SendByte>
	SPI2_SendByte(~(uint8_t)(out_value & 0xFF));
 8007a62:	88fb      	ldrh	r3, [r7, #6]
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	43db      	mvns	r3, r3
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff ff94 	bl	8007998 <SPI2_SendByte>
	LATCH_Set(1);
 8007a70:	2001      	movs	r0, #1
 8007a72:	f7ff ffcd 	bl	8007a10 <LATCH_Set>
}
 8007a76:	bf00      	nop
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <Relay_Task>:

void Relay_Task( void * pvParameters )
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b086      	sub	sp, #24
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d009      	beq.n	8007aa0 <Relay_Task+0x22>
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	60fb      	str	r3, [r7, #12]
 8007a9e:	e7fe      	b.n	8007a9e <Relay_Task+0x20>

    uint16_t value = 0;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	823b      	strh	r3, [r7, #16]
    uint16_t prev_value = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	82fb      	strh	r3, [r7, #22]

    SPI2_Init();
 8007aa8:	f7ff ff14 	bl	80078d4 <SPI2_Init>
    GPIO_Init();
 8007aac:	f7ff ff92 	bl	80079d4 <GPIO_Init>

    Relay_SetValue(0x0000);
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	f7ff ffc5 	bl	8007a40 <Relay_SetValue>

    while(1)
    {
    	value = Get_OutValue();
 8007ab6:	f7ff fc13 	bl	80072e0 <Get_OutValue>
 8007aba:	4603      	mov	r3, r0
 8007abc:	823b      	strh	r3, [r7, #16]

    	if(prev_value != value)
 8007abe:	8afa      	ldrh	r2, [r7, #22]
 8007ac0:	8a3b      	ldrh	r3, [r7, #16]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d03c      	beq.n	8007b40 <Relay_Task+0xc2>
    	{
    		prev_value = value;
 8007ac6:	8a3b      	ldrh	r3, [r7, #16]
 8007ac8:	82fb      	strh	r3, [r7, #22]

    		uint16_t out_value = 0;
 8007aca:	2300      	movs	r3, #0
 8007acc:	82bb      	strh	r3, [r7, #20]

        	for(uint8_t i = 0; i < 8; ++i)  {
 8007ace:	2300      	movs	r3, #0
 8007ad0:	74fb      	strb	r3, [r7, #19]
 8007ad2:	e02a      	b.n	8007b2a <Relay_Task+0xac>

        		if( value & (1 << (i * 2) ) )
 8007ad4:	8a3a      	ldrh	r2, [r7, #16]
 8007ad6:	7cfb      	ldrb	r3, [r7, #19]
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	fa42 f303 	asr.w	r3, r2, r3
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d009      	beq.n	8007afa <Relay_Task+0x7c>
        		{
        			out_value |= ( 1 << i );
 8007ae6:	7cfb      	ldrb	r3, [r7, #19]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	fa02 f303 	lsl.w	r3, r2, r3
 8007aee:	b21a      	sxth	r2, r3
 8007af0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	b21b      	sxth	r3, r3
 8007af8:	82bb      	strh	r3, [r7, #20]
        		}

        		if( value & (1 << (i * 2 + 1) ) )
 8007afa:	8a3a      	ldrh	r2, [r7, #16]
 8007afc:	7cfb      	ldrb	r3, [r7, #19]
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	3301      	adds	r3, #1
 8007b02:	fa42 f303 	asr.w	r3, r2, r3
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <Relay_Task+0xa6>
        		{
        			out_value |= ( 1 << (i + 8) );
 8007b0e:	7cfb      	ldrb	r3, [r7, #19]
 8007b10:	3308      	adds	r3, #8
 8007b12:	2201      	movs	r2, #1
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	b21a      	sxth	r2, r3
 8007b1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	b21b      	sxth	r3, r3
 8007b22:	82bb      	strh	r3, [r7, #20]
        	for(uint8_t i = 0; i < 8; ++i)  {
 8007b24:	7cfb      	ldrb	r3, [r7, #19]
 8007b26:	3301      	adds	r3, #1
 8007b28:	74fb      	strb	r3, [r7, #19]
 8007b2a:	7cfb      	ldrb	r3, [r7, #19]
 8007b2c:	2b07      	cmp	r3, #7
 8007b2e:	d9d1      	bls.n	8007ad4 <Relay_Task+0x56>
        		}
        	}

    		taskENTER_CRITICAL();
 8007b30:	f7fd f974 	bl	8004e1c <vPortEnterCritical>
    		Relay_SetValue(out_value);
 8007b34:	8abb      	ldrh	r3, [r7, #20]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7ff ff82 	bl	8007a40 <Relay_SetValue>
    		taskEXIT_CRITICAL();
 8007b3c:	f7fd f99c 	bl	8004e78 <vPortExitCritical>
    	}

    	vTaskDelay(pdMS_TO_TICKS(40));
 8007b40:	2028      	movs	r0, #40	; 0x28
 8007b42:	f7fe fb3f 	bl	80061c4 <vTaskDelay>
    	value = Get_OutValue();
 8007b46:	e7b6      	b.n	8007ab6 <Relay_Task+0x38>

08007b48 <Relay_TaskInit>:
    }
}

void Relay_TaskInit( void )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af02      	add	r7, sp, #8
	//BaseType_t xReturned;
	TaskHandle_t xHandle = NULL;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	607b      	str	r3, [r7, #4]

    //xReturned =
	xTaskCreate(
 8007b52:	1d3b      	adds	r3, r7, #4
 8007b54:	9301      	str	r3, [sp, #4]
 8007b56:	2304      	movs	r3, #4
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	2280      	movs	r2, #128	; 0x80
 8007b5e:	4904      	ldr	r1, [pc, #16]	; (8007b70 <Relay_TaskInit+0x28>)
 8007b60:	4804      	ldr	r0, [pc, #16]	; (8007b74 <Relay_TaskInit+0x2c>)
 8007b62:	f7fe f979 	bl	8005e58 <xTaskCreate>
                    "Relay_Task",    				 /* Text name for the task. */
					128,	 						 /* Stack size in words, not bytes. */
                    ( void * ) 1,     			 	 /* Parameter passed into the task. */
                    4,				 				 /* Priority at which the task is created. */
                    &xHandle );   			   	     /* Used to pass out the created task's handle. */
}
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	0800ba38 	.word	0x0800ba38
 8007b74:	08007a7f 	.word	0x08007a7f

08007b78 <Sensor_ClearList>:
static uint8_t sensor_counter = 0;
static char buff[16] = { 0 };
static f_ptr delay;

void Sensor_ClearList()
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
	sensor_counter = 0;
 8007b7c:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <Sensor_ClearList+0x1c>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	701a      	strb	r2, [r3, #0]
	memset(sensor_list, 0, sizeof(struct xSENSOR) * SENSOR_MAX);
 8007b82:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8007b86:	2100      	movs	r1, #0
 8007b88:	4803      	ldr	r0, [pc, #12]	; (8007b98 <Sensor_ClearList+0x20>)
 8007b8a:	f001 ff15 	bl	80099b8 <memset>
}
 8007b8e:	bf00      	nop
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	20008b52 	.word	0x20008b52
 8007b98:	20016ce8 	.word	0x20016ce8

08007b9c <Sensor_Init>:

void Sensor_Init(f_ptr delay_function)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
	UART3_Init(&UART3_rx_data);
 8007ba4:	4808      	ldr	r0, [pc, #32]	; (8007bc8 <Sensor_Init+0x2c>)
 8007ba6:	f000 fe2b 	bl	8008800 <UART3_Init>
	Sensor_UpdateGpioInit();
 8007baa:	f000 fe8f 	bl	80088cc <Sensor_UpdateGpioInit>
	Sensor_ClearList();
 8007bae:	f7ff ffe3 	bl	8007b78 <Sensor_ClearList>
	delay = delay_function;
 8007bb2:	4a06      	ldr	r2, [pc, #24]	; (8007bcc <Sensor_Init+0x30>)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6013      	str	r3, [r2, #0]
	SLed_Set(ON);
 8007bb8:	2001      	movs	r0, #1
 8007bba:	f7ff fe0f 	bl	80077dc <SLed_Set>
}
 8007bbe:	bf00      	nop
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	200182d8 	.word	0x200182d8
 8007bcc:	20008b64 	.word	0x20008b64

08007bd0 <Sensor_GPIOUpdateList>:

uint8_t Sensor_GPIOUpdateList()
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	af00      	add	r7, sp, #0
	return Sensor_GpioValue();
 8007bd4:	f000 fe96 	bl	8008904 <Sensor_GpioValue>
 8007bd8:	4603      	mov	r3, r0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	bd80      	pop	{r7, pc}
	...

08007be0 <Sensor_UpdateList>:

void Sensor_UpdateList()
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
	SLed_Set(OFF);
 8007be6:	2000      	movs	r0, #0
 8007be8:	f7ff fdf8 	bl	80077dc <SLed_Set>
	Sensor_ClearList();
 8007bec:	f7ff ffc4 	bl	8007b78 <Sensor_ClearList>

	for(uint32_t addr = 0; addr <= 0xFFFF; ++addr)
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	607b      	str	r3, [r7, #4]
 8007bf4:	e04f      	b.n	8007c96 <Sensor_UpdateList+0xb6>
	{
		RingBuffClear(&UART3_rx_data);
 8007bf6:	482b      	ldr	r0, [pc, #172]	; (8007ca4 <Sensor_UpdateList+0xc4>)
 8007bf8:	f7fa fecf 	bl	800299a <RingBuffClear>

		sprintf(buff, "%04" PRIx16 "t", (uint16_t)addr);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	4929      	ldr	r1, [pc, #164]	; (8007ca8 <Sensor_UpdateList+0xc8>)
 8007c04:	4829      	ldr	r0, [pc, #164]	; (8007cac <Sensor_UpdateList+0xcc>)
 8007c06:	f002 f93b 	bl	8009e80 <siprintf>
		UART3_SendData(buff, 5);
 8007c0a:	2105      	movs	r1, #5
 8007c0c:	4827      	ldr	r0, [pc, #156]	; (8007cac <Sensor_UpdateList+0xcc>)
 8007c0e:	f000 fe9f 	bl	8008950 <UART3_SendData>

		delay(1);
 8007c12:	4b27      	ldr	r3, [pc, #156]	; (8007cb0 <Sensor_UpdateList+0xd0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2001      	movs	r0, #1
 8007c18:	4798      	blx	r3
		char* ptr = NULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	603b      	str	r3, [r7, #0]
		if( (ptr = strstr(RingBuffGetArray(&UART3_rx_data), "/")) != NULL )
 8007c1e:	4821      	ldr	r0, [pc, #132]	; (8007ca4 <Sensor_UpdateList+0xc4>)
 8007c20:	f7fa fed5 	bl	80029ce <RingBuffGetArray>
 8007c24:	4603      	mov	r3, r0
 8007c26:	212f      	movs	r1, #47	; 0x2f
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f002 f94d 	bl	8009ec8 <strchr>
 8007c2e:	6038      	str	r0, [r7, #0]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d029      	beq.n	8007c8a <Sensor_UpdateList+0xaa>
		{
			sensor_list[sensor_counter].addr = addr;
 8007c36:	4b1f      	ldr	r3, [pc, #124]	; (8007cb4 <Sensor_UpdateList+0xd4>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	b298      	uxth	r0, r3
 8007c40:	4a1d      	ldr	r2, [pc, #116]	; (8007cb8 <Sensor_UpdateList+0xd8>)
 8007c42:	460b      	mov	r3, r1
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	440b      	add	r3, r1
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	3302      	adds	r3, #2
 8007c4e:	4602      	mov	r2, r0
 8007c50:	801a      	strh	r2, [r3, #0]
			sensor_list[sensor_counter].type = (enum SENSOR_TYPE) *(ptr + 1);
 8007c52:	4b18      	ldr	r3, [pc, #96]	; (8007cb4 <Sensor_UpdateList+0xd4>)
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	4619      	mov	r1, r3
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	7818      	ldrb	r0, [r3, #0]
 8007c5e:	4a16      	ldr	r2, [pc, #88]	; (8007cb8 <Sensor_UpdateList+0xd8>)
 8007c60:	460b      	mov	r3, r1
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	440b      	add	r3, r1
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	701a      	strb	r2, [r3, #0]
			sensor_counter++;
 8007c6e:	4b11      	ldr	r3, [pc, #68]	; (8007cb4 <Sensor_UpdateList+0xd4>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	3301      	adds	r3, #1
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	4b0f      	ldr	r3, [pc, #60]	; (8007cb4 <Sensor_UpdateList+0xd4>)
 8007c78:	701a      	strb	r2, [r3, #0]
			if(sensor_counter >= 16)
 8007c7a:	4b0e      	ldr	r3, [pc, #56]	; (8007cb4 <Sensor_UpdateList+0xd4>)
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	2b0f      	cmp	r3, #15
 8007c80:	d903      	bls.n	8007c8a <Sensor_UpdateList+0xaa>
			{
				UART3_SendData_byte('/');
 8007c82:	202f      	movs	r0, #47	; 0x2f
 8007c84:	f000 fe4c 	bl	8008920 <UART3_SendData_byte>
				return;
 8007c88:	e009      	b.n	8007c9e <Sensor_UpdateList+0xbe>
			}
		}
		UART3_SendData_byte('/');
 8007c8a:	202f      	movs	r0, #47	; 0x2f
 8007c8c:	f000 fe48 	bl	8008920 <UART3_SendData_byte>
	for(uint32_t addr = 0; addr <= 0xFFFF; ++addr)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	3301      	adds	r3, #1
 8007c94:	607b      	str	r3, [r7, #4]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c9c:	d3ab      	bcc.n	8007bf6 <Sensor_UpdateList+0x16>
	}
}
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	200182d8 	.word	0x200182d8
 8007ca8:	0800ba44 	.word	0x0800ba44
 8007cac:	20008b54 	.word	0x20008b54
 8007cb0:	20008b64 	.word	0x20008b64
 8007cb4:	20008b52 	.word	0x20008b52
 8007cb8:	20016ce8 	.word	0x20016ce8

08007cbc <Sensor_UpdateValue>:

void Sensor_UpdateValue()
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
	SLed_Set(ON);
 8007cc2:	2001      	movs	r0, #1
 8007cc4:	f7ff fd8a 	bl	80077dc <SLed_Set>
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8007cc8:	2300      	movs	r3, #0
 8007cca:	71fb      	strb	r3, [r7, #7]
 8007ccc:	e08a      	b.n	8007de4 <Sensor_UpdateValue+0x128>
	{
		if(sensor_list[i].addr == 0) {
 8007cce:	79fa      	ldrb	r2, [r7, #7]
 8007cd0:	4948      	ldr	r1, [pc, #288]	; (8007df4 <Sensor_UpdateValue+0x138>)
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	440b      	add	r3, r1
 8007cdc:	3302      	adds	r3, #2
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d07b      	beq.n	8007ddc <Sensor_UpdateValue+0x120>
			continue;
		}

		RingBuffClear(&UART3_rx_data);
 8007ce4:	4844      	ldr	r0, [pc, #272]	; (8007df8 <Sensor_UpdateValue+0x13c>)
 8007ce6:	f7fa fe58 	bl	800299a <RingBuffClear>

		sprintf(buff, "%04" PRIx16 "v", sensor_list[i].addr);
 8007cea:	79fa      	ldrb	r2, [r7, #7]
 8007cec:	4941      	ldr	r1, [pc, #260]	; (8007df4 <Sensor_UpdateValue+0x138>)
 8007cee:	4613      	mov	r3, r2
 8007cf0:	005b      	lsls	r3, r3, #1
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	440b      	add	r3, r1
 8007cf8:	3302      	adds	r3, #2
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	493f      	ldr	r1, [pc, #252]	; (8007dfc <Sensor_UpdateValue+0x140>)
 8007d00:	483f      	ldr	r0, [pc, #252]	; (8007e00 <Sensor_UpdateValue+0x144>)
 8007d02:	f002 f8bd 	bl	8009e80 <siprintf>
		UART3_SendData(buff, 5);
 8007d06:	2105      	movs	r1, #5
 8007d08:	483d      	ldr	r0, [pc, #244]	; (8007e00 <Sensor_UpdateValue+0x144>)
 8007d0a:	f000 fe21 	bl	8008950 <UART3_SendData>

		delay(5);
 8007d0e:	4b3d      	ldr	r3, [pc, #244]	; (8007e04 <Sensor_UpdateValue+0x148>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2005      	movs	r0, #5
 8007d14:	4798      	blx	r3
		char* ptr = NULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	603b      	str	r3, [r7, #0]
		if( (ptr = strstr(RingBuffGetArray(&UART3_rx_data), "/")) != NULL )
 8007d1a:	4837      	ldr	r0, [pc, #220]	; (8007df8 <Sensor_UpdateValue+0x13c>)
 8007d1c:	f7fa fe57 	bl	80029ce <RingBuffGetArray>
 8007d20:	4603      	mov	r3, r0
 8007d22:	212f      	movs	r1, #47	; 0x2f
 8007d24:	4618      	mov	r0, r3
 8007d26:	f002 f8cf 	bl	8009ec8 <strchr>
 8007d2a:	6038      	str	r0, [r7, #0]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d01c      	beq.n	8007d6c <Sensor_UpdateValue+0xb0>
		{
			sensor_list[i].value = *(ptr + 1) << 24 | *(ptr + 2) << 16 | *(ptr + 3) << 8 | *(ptr + 4);
 8007d32:	79fa      	ldrb	r2, [r7, #7]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	3301      	adds	r3, #1
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	0619      	lsls	r1, r3, #24
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	3302      	adds	r3, #2
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	041b      	lsls	r3, r3, #16
 8007d44:	4319      	orrs	r1, r3
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	3303      	adds	r3, #3
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	430b      	orrs	r3, r1
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	3104      	adds	r1, #4
 8007d54:	7809      	ldrb	r1, [r1, #0]
 8007d56:	430b      	orrs	r3, r1
 8007d58:	4618      	mov	r0, r3
 8007d5a:	4926      	ldr	r1, [pc, #152]	; (8007df4 <Sensor_UpdateValue+0x138>)
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	005b      	lsls	r3, r3, #1
 8007d60:	4413      	add	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	440b      	add	r3, r1
 8007d66:	3304      	adds	r3, #4
 8007d68:	6018      	str	r0, [r3, #0]
 8007d6a:	e033      	b.n	8007dd4 <Sensor_UpdateValue+0x118>
		} else {
			if(sensor_list[i].error_counter > REQ_TO_DISABLE)
 8007d6c:	79fa      	ldrb	r2, [r7, #7]
 8007d6e:	4921      	ldr	r1, [pc, #132]	; (8007df4 <Sensor_UpdateValue+0x138>)
 8007d70:	4613      	mov	r3, r2
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	4413      	add	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	440b      	add	r3, r1
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2b10      	cmp	r3, #16
 8007d80:	d90a      	bls.n	8007d98 <Sensor_UpdateValue+0xdc>
			{
				sensor_list[i].addr = 0;
 8007d82:	79fa      	ldrb	r2, [r7, #7]
 8007d84:	491b      	ldr	r1, [pc, #108]	; (8007df4 <Sensor_UpdateValue+0x138>)
 8007d86:	4613      	mov	r3, r2
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	4413      	add	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	440b      	add	r3, r1
 8007d90:	3302      	adds	r3, #2
 8007d92:	2200      	movs	r2, #0
 8007d94:	801a      	strh	r2, [r3, #0]
 8007d96:	e01d      	b.n	8007dd4 <Sensor_UpdateValue+0x118>
			} else {
				sensor_list[i].value = 0;
 8007d98:	79fa      	ldrb	r2, [r7, #7]
 8007d9a:	4916      	ldr	r1, [pc, #88]	; (8007df4 <Sensor_UpdateValue+0x138>)
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	005b      	lsls	r3, r3, #1
 8007da0:	4413      	add	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	440b      	add	r3, r1
 8007da6:	3304      	adds	r3, #4
 8007da8:	2200      	movs	r2, #0
 8007daa:	601a      	str	r2, [r3, #0]
				sensor_list[i].error_counter++;
 8007dac:	79fa      	ldrb	r2, [r7, #7]
 8007dae:	4911      	ldr	r1, [pc, #68]	; (8007df4 <Sensor_UpdateValue+0x138>)
 8007db0:	4613      	mov	r3, r2
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	4413      	add	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	440b      	add	r3, r1
 8007dba:	3308      	adds	r3, #8
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	b2d8      	uxtb	r0, r3
 8007dc2:	490c      	ldr	r1, [pc, #48]	; (8007df4 <Sensor_UpdateValue+0x138>)
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	440b      	add	r3, r1
 8007dce:	3308      	adds	r3, #8
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	701a      	strb	r2, [r3, #0]
			}
		}
		UART3_SendData_byte('/');
 8007dd4:	202f      	movs	r0, #47	; 0x2f
 8007dd6:	f000 fda3 	bl	8008920 <UART3_SendData_byte>
 8007dda:	e000      	b.n	8007dde <Sensor_UpdateValue+0x122>
			continue;
 8007ddc:	bf00      	nop
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8007dde:	79fb      	ldrb	r3, [r7, #7]
 8007de0:	3301      	adds	r3, #1
 8007de2:	71fb      	strb	r3, [r7, #7]
 8007de4:	79fb      	ldrb	r3, [r7, #7]
 8007de6:	2b1f      	cmp	r3, #31
 8007de8:	f67f af71 	bls.w	8007cce <Sensor_UpdateValue+0x12>
	}
}
 8007dec:	bf00      	nop
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	20016ce8 	.word	0x20016ce8
 8007df8:	200182d8 	.word	0x200182d8
 8007dfc:	0800ba4c 	.word	0x0800ba4c
 8007e00:	20008b54 	.word	0x20008b54
 8007e04:	20008b64 	.word	0x20008b64

08007e08 <Sensor_CheckValue>:

uint8_t Sensor_CheckValue(uint16_t sen_addr, uint32_t value)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	6039      	str	r1, [r7, #0]
 8007e12:	80fb      	strh	r3, [r7, #6]
	if(sen_addr == 0xFFFE) {
 8007e14:	88fb      	ldrh	r3, [r7, #6]
 8007e16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d101      	bne.n	8007e22 <Sensor_CheckValue+0x1a>
		return 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e02c      	b.n	8007e7c <Sensor_CheckValue+0x74>
	}

	if(sen_addr == 0xFFFF) {
 8007e22:	88fb      	ldrh	r3, [r7, #6]
 8007e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d101      	bne.n	8007e30 <Sensor_CheckValue+0x28>
		return 1;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e025      	b.n	8007e7c <Sensor_CheckValue+0x74>
	}

	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8007e30:	2300      	movs	r3, #0
 8007e32:	73fb      	strb	r3, [r7, #15]
 8007e34:	e01e      	b.n	8007e74 <Sensor_CheckValue+0x6c>
	{
		if(sensor_list[i].addr == sen_addr)
 8007e36:	7bfa      	ldrb	r2, [r7, #15]
 8007e38:	4913      	ldr	r1, [pc, #76]	; (8007e88 <Sensor_CheckValue+0x80>)
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	4413      	add	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	440b      	add	r3, r1
 8007e44:	3302      	adds	r3, #2
 8007e46:	881b      	ldrh	r3, [r3, #0]
 8007e48:	88fa      	ldrh	r2, [r7, #6]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d10f      	bne.n	8007e6e <Sensor_CheckValue+0x66>
		{
			return sensor_list[i].value >= value ? 1 : 0;
 8007e4e:	7bfa      	ldrb	r2, [r7, #15]
 8007e50:	490d      	ldr	r1, [pc, #52]	; (8007e88 <Sensor_CheckValue+0x80>)
 8007e52:	4613      	mov	r3, r2
 8007e54:	005b      	lsls	r3, r3, #1
 8007e56:	4413      	add	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	440b      	add	r3, r1
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	bf2c      	ite	cs
 8007e66:	2301      	movcs	r3, #1
 8007e68:	2300      	movcc	r3, #0
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	e006      	b.n	8007e7c <Sensor_CheckValue+0x74>
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
 8007e70:	3301      	adds	r3, #1
 8007e72:	73fb      	strb	r3, [r7, #15]
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	2b1f      	cmp	r3, #31
 8007e78:	d9dd      	bls.n	8007e36 <Sensor_CheckValue+0x2e>
		}
	}
	return 0;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	20016ce8 	.word	0x20016ce8

08007e8c <Sensor_task>:
#include "FreeRTOS.h"
#include "task.h"


void Sensor_task( void * pvParameters )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d009      	beq.n	8007eae <Sensor_task+0x22>
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	e7fe      	b.n	8007eac <Sensor_task+0x20>

	Sensor_Init(vTaskDelay);
 8007eae:	4809      	ldr	r0, [pc, #36]	; (8007ed4 <Sensor_task+0x48>)
 8007eb0:	f7ff fe74 	bl	8007b9c <Sensor_Init>
	Sensor_UpdateList();
 8007eb4:	f7ff fe94 	bl	8007be0 <Sensor_UpdateList>

	while(1)
	{
		if(Sensor_GPIOUpdateList())
 8007eb8:	f7ff fe8a 	bl	8007bd0 <Sensor_GPIOUpdateList>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <Sensor_task+0x3a>
		{
			Sensor_UpdateList();
 8007ec2:	f7ff fe8d 	bl	8007be0 <Sensor_UpdateList>
		}

		Sensor_UpdateValue();
 8007ec6:	f7ff fef9 	bl	8007cbc <Sensor_UpdateValue>

		vTaskDelay(pdMS_TO_TICKS(40));
 8007eca:	2028      	movs	r0, #40	; 0x28
 8007ecc:	f7fe f97a 	bl	80061c4 <vTaskDelay>
		if(Sensor_GPIOUpdateList())
 8007ed0:	e7f2      	b.n	8007eb8 <Sensor_task+0x2c>
 8007ed2:	bf00      	nop
 8007ed4:	080061c5 	.word	0x080061c5

08007ed8 <Sensor_TaskInit>:
	}
}

void Sensor_TaskInit( void )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	607b      	str	r3, [r7, #4]

	//BaseType_t xReturned =
	xTaskCreate(
 8007ee2:	1d3b      	adds	r3, r7, #4
 8007ee4:	9301      	str	r3, [sp, #4]
 8007ee6:	2304      	movs	r3, #4
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	2301      	movs	r3, #1
 8007eec:	2280      	movs	r2, #128	; 0x80
 8007eee:	4904      	ldr	r1, [pc, #16]	; (8007f00 <Sensor_TaskInit+0x28>)
 8007ef0:	4804      	ldr	r0, [pc, #16]	; (8007f04 <Sensor_TaskInit+0x2c>)
 8007ef2:	f7fd ffb1 	bl	8005e58 <xTaskCreate>
					128,	 						 /* Stack size in words, not bytes. */
                    ( void * ) 1,     			 	 /* Parameter passed into the task. */
                    4,				 				 /* Priority at which the task is created. */
                    &xHandle );   			   	     /* Used to pass out the created task's handle. */

}
 8007ef6:	bf00      	nop
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	0800ba54 	.word	0x0800ba54
 8007f04:	08007e8d 	.word	0x08007e8d

08007f08 <LL_GPIO_SetOutputPin>:
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	619a      	str	r2, [r3, #24]
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <LL_GPIO_ResetOutputPin>:
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	041a      	lsls	r2, r3, #16
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	619a      	str	r2, [r3, #24]
}
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <LL_SPI_Enable>:
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	601a      	str	r2, [r3, #0]
}
 8007f56:	bf00      	nop
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <LL_SPI_SetStandard>:
{
 8007f62:	b480      	push	{r7}
 8007f64:	b083      	sub	sp, #12
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f023 0210 	bic.w	r2, r3, #16
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	431a      	orrs	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	605a      	str	r2, [r3, #4]
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <LL_SPI_IsActiveFlag_RXNE>:
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e000      	b.n	8007fa2 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <LL_SPI_IsActiveFlag_TXE>:
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d101      	bne.n	8007fc6 <LL_SPI_IsActiveFlag_TXE+0x18>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e000      	b.n	8007fc8 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <LL_SPI_IsActiveFlag_BSY>:
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe4:	2b80      	cmp	r3, #128	; 0x80
 8007fe6:	d101      	bne.n	8007fec <LL_SPI_IsActiveFlag_BSY+0x18>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e000      	b.n	8007fee <LL_SPI_IsActiveFlag_BSY+0x1a>
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <LL_SPI_ReceiveData8>:
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	b2db      	uxtb	r3, r3
}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <LL_SPI_TransmitData8>:
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	330c      	adds	r3, #12
 8008024:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	78fa      	ldrb	r2, [r7, #3]
 800802a:	701a      	strb	r2, [r3, #0]
}
 800802c:	bf00      	nop
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <SPI3_Init>:
#include "stm32f4xx_ll_gpio.h"
#include "stm32f4xx_ll_spi.h"
#include "stm32f4xx_ll_utils.h"

void SPI3_Init(void)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b090      	sub	sp, #64	; 0x40
 800803c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800803e:	f107 0318 	add.w	r3, r7, #24
 8008042:	2228      	movs	r2, #40	; 0x28
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f001 fcb6 	bl	80099b8 <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800804c:	463b      	mov	r3, r7
 800804e:	2200      	movs	r2, #0
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	605a      	str	r2, [r3, #4]
 8008054:	609a      	str	r2, [r3, #8]
 8008056:	60da      	str	r2, [r3, #12]
 8008058:	611a      	str	r2, [r3, #16]
 800805a:	615a      	str	r2, [r3, #20]
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800805c:	2338      	movs	r3, #56	; 0x38
 800805e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008060:	2302      	movs	r3, #2
 8008062:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008064:	2303      	movs	r3, #3
 8008066:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008068:	2300      	movs	r3, #0
 800806a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800806c:	2300      	movs	r3, #0
 800806e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8008070:	2306      	movs	r3, #6
 8008072:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008074:	463b      	mov	r3, r7
 8008076:	4619      	mov	r1, r3
 8008078:	481b      	ldr	r0, [pc, #108]	; (80080e8 <SPI3_Init+0xb0>)
 800807a:	f7fb fbec 	bl	8003856 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800807e:	2300      	movs	r3, #0
 8008080:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8008082:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008086:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8008088:	2300      	movs	r3, #0
 800808a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800808c:	2300      	movs	r3, #0
 800808e:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8008090:	2300      	movs	r3, #0
 8008092:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8008094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008098:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 800809a:	2300      	movs	r3, #0
 800809c:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800809e:	2300      	movs	r3, #0
 80080a0:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80080a2:	2300      	movs	r3, #0
 80080a4:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80080a6:	230a      	movs	r3, #10
 80080a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(SPI3, &SPI_InitStruct);
 80080aa:	f107 0318 	add.w	r3, r7, #24
 80080ae:	4619      	mov	r1, r3
 80080b0:	480e      	ldr	r0, [pc, #56]	; (80080ec <SPI3_Init+0xb4>)
 80080b2:	f7fc f8ce 	bl	8004252 <LL_SPI_Init>
	LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80080b6:	2100      	movs	r1, #0
 80080b8:	480c      	ldr	r0, [pc, #48]	; (80080ec <SPI3_Init+0xb4>)
 80080ba:	f7ff ff52 	bl	8007f62 <LL_SPI_SetStandard>

	GPIO_InitStruct.Pin = CS;
 80080be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080c2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80080c4:	2301      	movs	r3, #1
 80080c6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80080c8:	2302      	movs	r3, #2
 80080ca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80080cc:	2300      	movs	r3, #0
 80080ce:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(CS_PORT, &GPIO_InitStruct);
 80080d0:	463b      	mov	r3, r7
 80080d2:	4619      	mov	r1, r3
 80080d4:	4806      	ldr	r0, [pc, #24]	; (80080f0 <SPI3_Init+0xb8>)
 80080d6:	f7fb fbbe 	bl	8003856 <LL_GPIO_Init>

	LL_SPI_Enable(SPI3);
 80080da:	4804      	ldr	r0, [pc, #16]	; (80080ec <SPI3_Init+0xb4>)
 80080dc:	f7ff ff31 	bl	8007f42 <LL_SPI_Enable>
}
 80080e0:	bf00      	nop
 80080e2:	3740      	adds	r7, #64	; 0x40
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	40020400 	.word	0x40020400
 80080ec:	40003c00 	.word	0x40003c00
 80080f0:	40020000 	.word	0x40020000

080080f4 <CS_Pin_Set>:

void CS_Pin_Set(uint8_t val)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	4603      	mov	r3, r0
 80080fc:	71fb      	strb	r3, [r7, #7]
	if(val) {
 80080fe:	79fb      	ldrb	r3, [r7, #7]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d005      	beq.n	8008110 <CS_Pin_Set+0x1c>
		LL_GPIO_SetOutputPin(CS_PORT, CS);
 8008104:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008108:	4806      	ldr	r0, [pc, #24]	; (8008124 <CS_Pin_Set+0x30>)
 800810a:	f7ff fefd 	bl	8007f08 <LL_GPIO_SetOutputPin>
	} else {
		LL_GPIO_ResetOutputPin(CS_PORT, CS);
	}
}
 800810e:	e004      	b.n	800811a <CS_Pin_Set+0x26>
		LL_GPIO_ResetOutputPin(CS_PORT, CS);
 8008110:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008114:	4803      	ldr	r0, [pc, #12]	; (8008124 <CS_Pin_Set+0x30>)
 8008116:	f7ff ff05 	bl	8007f24 <LL_GPIO_ResetOutputPin>
}
 800811a:	bf00      	nop
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	40020000 	.word	0x40020000

08008128 <SPI3_TransferReceive>:

uint8_t SPI3_TransferReceive(uint8_t data)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_BSY(SPI3));
 8008132:	bf00      	nop
 8008134:	4818      	ldr	r0, [pc, #96]	; (8008198 <SPI3_TransferReceive+0x70>)
 8008136:	f7ff ff4d 	bl	8007fd4 <LL_SPI_IsActiveFlag_BSY>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1f9      	bne.n	8008134 <SPI3_TransferReceive+0xc>
	while(!LL_SPI_IsActiveFlag_TXE(SPI3));
 8008140:	bf00      	nop
 8008142:	4815      	ldr	r0, [pc, #84]	; (8008198 <SPI3_TransferReceive+0x70>)
 8008144:	f7ff ff33 	bl	8007fae <LL_SPI_IsActiveFlag_TXE>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0f9      	beq.n	8008142 <SPI3_TransferReceive+0x1a>

	if(LL_SPI_IsActiveFlag_RXNE(SPI3))
 800814e:	4812      	ldr	r0, [pc, #72]	; (8008198 <SPI3_TransferReceive+0x70>)
 8008150:	f7ff ff1a 	bl	8007f88 <LL_SPI_IsActiveFlag_RXNE>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d002      	beq.n	8008160 <SPI3_TransferReceive+0x38>
	{
		LL_SPI_ReceiveData8(SPI3);
 800815a:	480f      	ldr	r0, [pc, #60]	; (8008198 <SPI3_TransferReceive+0x70>)
 800815c:	f7ff ff4d 	bl	8007ffa <LL_SPI_ReceiveData8>
	}

	LL_SPI_TransmitData8(SPI3, data);
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	4619      	mov	r1, r3
 8008164:	480c      	ldr	r0, [pc, #48]	; (8008198 <SPI3_TransferReceive+0x70>)
 8008166:	f7ff ff55 	bl	8008014 <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_TXE(SPI3));
 800816a:	bf00      	nop
 800816c:	480a      	ldr	r0, [pc, #40]	; (8008198 <SPI3_TransferReceive+0x70>)
 800816e:	f7ff ff1e 	bl	8007fae <LL_SPI_IsActiveFlag_TXE>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0f9      	beq.n	800816c <SPI3_TransferReceive+0x44>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI3));
 8008178:	bf00      	nop
 800817a:	4807      	ldr	r0, [pc, #28]	; (8008198 <SPI3_TransferReceive+0x70>)
 800817c:	f7ff ff04 	bl	8007f88 <LL_SPI_IsActiveFlag_RXNE>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d0f9      	beq.n	800817a <SPI3_TransferReceive+0x52>

	return LL_SPI_ReceiveData8(SPI3);
 8008186:	4804      	ldr	r0, [pc, #16]	; (8008198 <SPI3_TransferReceive+0x70>)
 8008188:	f7ff ff37 	bl	8007ffa <LL_SPI_ReceiveData8>
 800818c:	4603      	mov	r3, r0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	40003c00 	.word	0x40003c00

0800819c <SPI3_Transfer>:

	return;
}

void SPI3_Transfer(uint8_t *data, uint32_t data_size)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
	while(LL_SPI_IsActiveFlag_BSY(SPI3));
 80081a6:	bf00      	nop
 80081a8:	4811      	ldr	r0, [pc, #68]	; (80081f0 <SPI3_Transfer+0x54>)
 80081aa:	f7ff ff13 	bl	8007fd4 <LL_SPI_IsActiveFlag_BSY>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1f9      	bne.n	80081a8 <SPI3_Transfer+0xc>

	for(uint32_t i = 0; i < data_size; ++i)
 80081b4:	2300      	movs	r3, #0
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	e011      	b.n	80081de <SPI3_Transfer+0x42>
	{
		LL_SPI_TransmitData8(SPI3, data[i]);
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4413      	add	r3, r2
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	4619      	mov	r1, r3
 80081c4:	480a      	ldr	r0, [pc, #40]	; (80081f0 <SPI3_Transfer+0x54>)
 80081c6:	f7ff ff25 	bl	8008014 <LL_SPI_TransmitData8>
		while(!LL_SPI_IsActiveFlag_TXE(SPI3));
 80081ca:	bf00      	nop
 80081cc:	4808      	ldr	r0, [pc, #32]	; (80081f0 <SPI3_Transfer+0x54>)
 80081ce:	f7ff feee 	bl	8007fae <LL_SPI_IsActiveFlag_TXE>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d0f9      	beq.n	80081cc <SPI3_Transfer+0x30>
	for(uint32_t i = 0; i < data_size; ++i)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3301      	adds	r3, #1
 80081dc:	60fb      	str	r3, [r7, #12]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d3e9      	bcc.n	80081ba <SPI3_Transfer+0x1e>
		//while(!LL_SPI_IsActiveFlag_RXNE(SPI3));
	}

	return;
 80081e6:	bf00      	nop
}
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	40003c00 	.word	0x40003c00

080081f4 <__NVIC_GetPriorityGrouping>:
{
 80081f4:	b480      	push	{r7}
 80081f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80081f8:	4b04      	ldr	r3, [pc, #16]	; (800820c <__NVIC_GetPriorityGrouping+0x18>)
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	0a1b      	lsrs	r3, r3, #8
 80081fe:	f003 0307 	and.w	r3, r3, #7
}
 8008202:	4618      	mov	r0, r3
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	e000ed00 	.word	0xe000ed00

08008210 <__NVIC_EnableIRQ>:
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800821a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800821e:	2b00      	cmp	r3, #0
 8008220:	db0b      	blt.n	800823a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008222:	4909      	ldr	r1, [pc, #36]	; (8008248 <__NVIC_EnableIRQ+0x38>)
 8008224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008228:	095b      	lsrs	r3, r3, #5
 800822a:	79fa      	ldrb	r2, [r7, #7]
 800822c:	f002 021f 	and.w	r2, r2, #31
 8008230:	2001      	movs	r0, #1
 8008232:	fa00 f202 	lsl.w	r2, r0, r2
 8008236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800823a:	bf00      	nop
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	e000e100 	.word	0xe000e100

0800824c <__NVIC_SetPriority>:
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	4603      	mov	r3, r0
 8008254:	6039      	str	r1, [r7, #0]
 8008256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800825c:	2b00      	cmp	r3, #0
 800825e:	db0a      	blt.n	8008276 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008260:	490d      	ldr	r1, [pc, #52]	; (8008298 <__NVIC_SetPriority+0x4c>)
 8008262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	b2d2      	uxtb	r2, r2
 800826a:	0112      	lsls	r2, r2, #4
 800826c:	b2d2      	uxtb	r2, r2
 800826e:	440b      	add	r3, r1
 8008270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008274:	e00a      	b.n	800828c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008276:	4909      	ldr	r1, [pc, #36]	; (800829c <__NVIC_SetPriority+0x50>)
 8008278:	79fb      	ldrb	r3, [r7, #7]
 800827a:	f003 030f 	and.w	r3, r3, #15
 800827e:	3b04      	subs	r3, #4
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	b2d2      	uxtb	r2, r2
 8008284:	0112      	lsls	r2, r2, #4
 8008286:	b2d2      	uxtb	r2, r2
 8008288:	440b      	add	r3, r1
 800828a:	761a      	strb	r2, [r3, #24]
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr
 8008298:	e000e100 	.word	0xe000e100
 800829c:	e000ed00 	.word	0xe000ed00

080082a0 <NVIC_EncodePriority>:
{
 80082a0:	b480      	push	{r7}
 80082a2:	b089      	sub	sp, #36	; 0x24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	f1c3 0307 	rsb	r3, r3, #7
 80082ba:	2b04      	cmp	r3, #4
 80082bc:	bf28      	it	cs
 80082be:	2304      	movcs	r3, #4
 80082c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	3304      	adds	r3, #4
 80082c6:	2b06      	cmp	r3, #6
 80082c8:	d902      	bls.n	80082d0 <NVIC_EncodePriority+0x30>
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	3b03      	subs	r3, #3
 80082ce:	e000      	b.n	80082d2 <NVIC_EncodePriority+0x32>
 80082d0:	2300      	movs	r3, #0
 80082d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082d4:	2201      	movs	r2, #1
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	fa02 f303 	lsl.w	r3, r2, r3
 80082dc:	1e5a      	subs	r2, r3, #1
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	401a      	ands	r2, r3
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80082e6:	2101      	movs	r1, #1
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	fa01 f303 	lsl.w	r3, r1, r3
 80082ee:	1e59      	subs	r1, r3, #1
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082f4:	4313      	orrs	r3, r2
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3724      	adds	r7, #36	; 0x24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <LL_USART_Enable>:
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	60da      	str	r2, [r3, #12]
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8008322:	b480      	push	{r7}
 8008324:	b083      	sub	sp, #12
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	615a      	str	r2, [r3, #20]
}
 8008342:	bf00      	nop
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 800834e:	b480      	push	{r7}
 8008350:	b083      	sub	sp, #12
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0320 	and.w	r3, r3, #32
 800835e:	2b20      	cmp	r3, #32
 8008360:	bf0c      	ite	eq
 8008362:	2301      	moveq	r3, #1
 8008364:	2300      	movne	r3, #0
 8008366:	b2db      	uxtb	r3, r3
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008384:	2b40      	cmp	r3, #64	; 0x40
 8008386:	bf0c      	ite	eq
 8008388:	2301      	moveq	r3, #1
 800838a:	2300      	movne	r3, #0
 800838c:	b2db      	uxtb	r3, r3
}
 800838e:	4618      	mov	r0, r3
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr

0800839a <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 800839a:	b480      	push	{r7}
 800839c:	b083      	sub	sp, #12
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f06f 0220 	mvn.w	r2, #32
 80083a8:	601a      	str	r2, [r3, #0]
}
 80083aa:	bf00      	nop
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b083      	sub	sp, #12
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	f043 0220 	orr.w	r2, r3, #32
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	60da      	str	r2, [r3, #12]
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	b2db      	uxtb	r3, r3
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80083fc:	78fa      	ldrb	r2, [r7, #3]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	605a      	str	r2, [r3, #4]
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
	...

08008410 <UART2_Init>:
#include "stm32f4xx_ll_utils.h"

static struct ring_buffer_struct* UART_rx_data;

void UART2_Init(struct ring_buffer_struct* rx_data)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b090      	sub	sp, #64	; 0x40
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8008418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800841c:	2200      	movs	r2, #0
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	605a      	str	r2, [r3, #4]
 8008422:	609a      	str	r2, [r3, #8]
 8008424:	60da      	str	r2, [r3, #12]
 8008426:	611a      	str	r2, [r3, #16]
 8008428:	615a      	str	r2, [r3, #20]
 800842a:	619a      	str	r2, [r3, #24]
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800842c:	f107 030c 	add.w	r3, r7, #12
 8008430:	2200      	movs	r2, #0
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	605a      	str	r2, [r3, #4]
 8008436:	609a      	str	r2, [r3, #8]
 8008438:	60da      	str	r2, [r3, #12]
 800843a:	611a      	str	r2, [r3, #16]
 800843c:	615a      	str	r2, [r3, #20]

	/**USART2 GPIO Configuration
	PA3   ------> USART2_RX
	PD5   ------> USART2_TX
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800843e:	2308      	movs	r3, #8
 8008440:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008442:	2302      	movs	r3, #2
 8008444:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008446:	2303      	movs	r3, #3
 8008448:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800844a:	2300      	movs	r3, #0
 800844c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800844e:	2300      	movs	r3, #0
 8008450:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8008452:	2307      	movs	r3, #7
 8008454:	623b      	str	r3, [r7, #32]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008456:	f107 030c 	add.w	r3, r7, #12
 800845a:	4619      	mov	r1, r3
 800845c:	4824      	ldr	r0, [pc, #144]	; (80084f0 <UART2_Init+0xe0>)
 800845e:	f7fb f9fa 	bl	8003856 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8008462:	2320      	movs	r3, #32
 8008464:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008466:	2302      	movs	r3, #2
 8008468:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800846a:	2303      	movs	r3, #3
 800846c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800846e:	2300      	movs	r3, #0
 8008470:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008472:	2300      	movs	r3, #0
 8008474:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8008476:	2307      	movs	r3, #7
 8008478:	623b      	str	r3, [r7, #32]
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800847a:	f107 030c 	add.w	r3, r7, #12
 800847e:	4619      	mov	r1, r3
 8008480:	481c      	ldr	r0, [pc, #112]	; (80084f4 <UART2_Init+0xe4>)
 8008482:	f7fb f9e8 	bl	8003856 <LL_GPIO_Init>

	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008486:	f7ff feb5 	bl	80081f4 <__NVIC_GetPriorityGrouping>
 800848a:	4603      	mov	r3, r0
 800848c:	2200      	movs	r2, #0
 800848e:	2100      	movs	r1, #0
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff ff05 	bl	80082a0 <NVIC_EncodePriority>
 8008496:	4603      	mov	r3, r0
 8008498:	4619      	mov	r1, r3
 800849a:	2026      	movs	r0, #38	; 0x26
 800849c:	f7ff fed6 	bl	800824c <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 80084a0:	2026      	movs	r0, #38	; 0x26
 80084a2:	f7ff feb5 	bl	8008210 <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 115200;
 80084a6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80084aa:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80084ac:	2300      	movs	r3, #0
 80084ae:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80084b0:	2300      	movs	r3, #0
 80084b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80084b4:	2300      	movs	r3, #0
 80084b6:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80084b8:	230c      	movs	r3, #12
 80084ba:	637b      	str	r3, [r7, #52]	; 0x34
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80084bc:	2300      	movs	r3, #0
 80084be:	63bb      	str	r3, [r7, #56]	; 0x38
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80084c0:	2300      	movs	r3, #0
 80084c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_USART_Init(USART2, &USART_InitStruct);
 80084c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084c8:	4619      	mov	r1, r3
 80084ca:	480b      	ldr	r0, [pc, #44]	; (80084f8 <UART2_Init+0xe8>)
 80084cc:	f7fc f8c4 	bl	8004658 <LL_USART_Init>
	LL_USART_EnableIT_RXNE(USART2);
 80084d0:	4809      	ldr	r0, [pc, #36]	; (80084f8 <UART2_Init+0xe8>)
 80084d2:	f7ff ff70 	bl	80083b6 <LL_USART_EnableIT_RXNE>
	LL_USART_ConfigAsyncMode(USART2);
 80084d6:	4808      	ldr	r0, [pc, #32]	; (80084f8 <UART2_Init+0xe8>)
 80084d8:	f7ff ff23 	bl	8008322 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART2);
 80084dc:	4806      	ldr	r0, [pc, #24]	; (80084f8 <UART2_Init+0xe8>)
 80084de:	f7ff ff10 	bl	8008302 <LL_USART_Enable>

	UART_rx_data = rx_data;
 80084e2:	4a06      	ldr	r2, [pc, #24]	; (80084fc <UART2_Init+0xec>)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6013      	str	r3, [r2, #0]
}
 80084e8:	bf00      	nop
 80084ea:	3740      	adds	r7, #64	; 0x40
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	40020000 	.word	0x40020000
 80084f4:	40020c00 	.word	0x40020c00
 80084f8:	40004400 	.word	0x40004400
 80084fc:	20008b68 	.word	0x20008b68

08008500 <UART2_SendData_byte>:

void UART2_SendData_byte(char data)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	4603      	mov	r3, r0
 8008508:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART2, data);
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	4619      	mov	r1, r3
 800850e:	4807      	ldr	r0, [pc, #28]	; (800852c <UART2_SendData_byte+0x2c>)
 8008510:	f7ff ff6e 	bl	80083f0 <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TC(USART2));
 8008514:	bf00      	nop
 8008516:	4805      	ldr	r0, [pc, #20]	; (800852c <UART2_SendData_byte+0x2c>)
 8008518:	f7ff ff2c 	bl	8008374 <LL_USART_IsActiveFlag_TC>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0f9      	beq.n	8008516 <UART2_SendData_byte+0x16>
}
 8008522:	bf00      	nop
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	40004400 	.word	0x40004400

08008530 <UART2_SendData>:

void UART2_SendData(char* data, uint32_t data_length)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < data_length; ++i)
 800853a:	2300      	movs	r3, #0
 800853c:	60fb      	str	r3, [r7, #12]
 800853e:	e009      	b.n	8008554 <UART2_SendData+0x24>
	{
		UART2_SendData_byte(data[i]);
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4413      	add	r3, r2
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff ffd9 	bl	8008500 <UART2_SendData_byte>
	for(uint32_t i = 0; i < data_length; ++i)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3301      	adds	r3, #1
 8008552:	60fb      	str	r3, [r7, #12]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	429a      	cmp	r2, r3
 800855a:	d3f1      	bcc.n	8008540 <UART2_SendData+0x10>
	}
}
 800855c:	bf00      	nop
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <UART2_CharReception_Callback>:

void UART2_CharReception_Callback(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
	__IO uint8_t received_char;
	received_char = LL_USART_ReceiveData8(USART2);
 800856a:	4808      	ldr	r0, [pc, #32]	; (800858c <UART2_CharReception_Callback+0x28>)
 800856c:	f7ff ff33 	bl	80083d6 <LL_USART_ReceiveData8>
 8008570:	4603      	mov	r3, r0
 8008572:	71fb      	strb	r3, [r7, #7]

	RingBuffPush(UART_rx_data, (char)received_char);
 8008574:	4b06      	ldr	r3, [pc, #24]	; (8008590 <UART2_CharReception_Callback+0x2c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	79fa      	ldrb	r2, [r7, #7]
 800857a:	b2d2      	uxtb	r2, r2
 800857c:	4611      	mov	r1, r2
 800857e:	4618      	mov	r0, r3
 8008580:	f7fa f9ed 	bl	800295e <RingBuffPush>
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	40004400 	.word	0x40004400
 8008590:	20008b68 	.word	0x20008b68

08008594 <Error_Callback>:

static void Error_Callback(void)
{
 8008594:	b480      	push	{r7}
 8008596:	af00      	add	r7, sp, #0
	//dummy
}
 8008598:	bf00      	nop
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
	...

080085a4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART2)) {
 80085a8:	4807      	ldr	r0, [pc, #28]	; (80085c8 <USART2_IRQHandler+0x24>)
 80085aa:	f7ff fed0 	bl	800834e <LL_USART_IsActiveFlag_RXNE>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d005      	beq.n	80085c0 <USART2_IRQHandler+0x1c>
		UART2_CharReception_Callback();
 80085b4:	f7ff ffd6 	bl	8008564 <UART2_CharReception_Callback>
		LL_USART_ClearFlag_RXNE(USART2);
 80085b8:	4803      	ldr	r0, [pc, #12]	; (80085c8 <USART2_IRQHandler+0x24>)
 80085ba:	f7ff feee 	bl	800839a <LL_USART_ClearFlag_RXNE>
	} else {
		Error_Callback();
	}
}
 80085be:	e001      	b.n	80085c4 <USART2_IRQHandler+0x20>
		Error_Callback();
 80085c0:	f7ff ffe8 	bl	8008594 <Error_Callback>
}
 80085c4:	bf00      	nop
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	40004400 	.word	0x40004400

080085cc <__NVIC_GetPriorityGrouping>:
{
 80085cc:	b480      	push	{r7}
 80085ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085d0:	4b04      	ldr	r3, [pc, #16]	; (80085e4 <__NVIC_GetPriorityGrouping+0x18>)
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	0a1b      	lsrs	r3, r3, #8
 80085d6:	f003 0307 	and.w	r3, r3, #7
}
 80085da:	4618      	mov	r0, r3
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	e000ed00 	.word	0xe000ed00

080085e8 <__NVIC_EnableIRQ>:
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	4603      	mov	r3, r0
 80085f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	db0b      	blt.n	8008612 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085fa:	4909      	ldr	r1, [pc, #36]	; (8008620 <__NVIC_EnableIRQ+0x38>)
 80085fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008600:	095b      	lsrs	r3, r3, #5
 8008602:	79fa      	ldrb	r2, [r7, #7]
 8008604:	f002 021f 	and.w	r2, r2, #31
 8008608:	2001      	movs	r0, #1
 800860a:	fa00 f202 	lsl.w	r2, r0, r2
 800860e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008612:	bf00      	nop
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	e000e100 	.word	0xe000e100

08008624 <__NVIC_SetPriority>:
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	4603      	mov	r3, r0
 800862c:	6039      	str	r1, [r7, #0]
 800862e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008634:	2b00      	cmp	r3, #0
 8008636:	db0a      	blt.n	800864e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008638:	490d      	ldr	r1, [pc, #52]	; (8008670 <__NVIC_SetPriority+0x4c>)
 800863a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	b2d2      	uxtb	r2, r2
 8008642:	0112      	lsls	r2, r2, #4
 8008644:	b2d2      	uxtb	r2, r2
 8008646:	440b      	add	r3, r1
 8008648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800864c:	e00a      	b.n	8008664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800864e:	4909      	ldr	r1, [pc, #36]	; (8008674 <__NVIC_SetPriority+0x50>)
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	f003 030f 	and.w	r3, r3, #15
 8008656:	3b04      	subs	r3, #4
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	b2d2      	uxtb	r2, r2
 800865c:	0112      	lsls	r2, r2, #4
 800865e:	b2d2      	uxtb	r2, r2
 8008660:	440b      	add	r3, r1
 8008662:	761a      	strb	r2, [r3, #24]
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	e000e100 	.word	0xe000e100
 8008674:	e000ed00 	.word	0xe000ed00

08008678 <NVIC_EncodePriority>:
{
 8008678:	b480      	push	{r7}
 800867a:	b089      	sub	sp, #36	; 0x24
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f003 0307 	and.w	r3, r3, #7
 800868a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	f1c3 0307 	rsb	r3, r3, #7
 8008692:	2b04      	cmp	r3, #4
 8008694:	bf28      	it	cs
 8008696:	2304      	movcs	r3, #4
 8008698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	3304      	adds	r3, #4
 800869e:	2b06      	cmp	r3, #6
 80086a0:	d902      	bls.n	80086a8 <NVIC_EncodePriority+0x30>
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	3b03      	subs	r3, #3
 80086a6:	e000      	b.n	80086aa <NVIC_EncodePriority+0x32>
 80086a8:	2300      	movs	r3, #0
 80086aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086ac:	2201      	movs	r2, #1
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	1e5a      	subs	r2, r3, #1
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	401a      	ands	r2, r3
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086be:	2101      	movs	r1, #1
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	fa01 f303 	lsl.w	r3, r1, r3
 80086c6:	1e59      	subs	r1, r3, #1
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086cc:	4313      	orrs	r3, r2
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3724      	adds	r7, #36	; 0x24
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <LL_GPIO_ReadInputPort>:
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	691b      	ldr	r3, [r3, #16]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <LL_USART_Enable>:
{
 80086f2:	b480      	push	{r7}
 80086f4:	b083      	sub	sp, #12
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	60da      	str	r2, [r3, #12]
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <LL_USART_ConfigAsyncMode>:
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	615a      	str	r2, [r3, #20]
}
 8008732:	bf00      	nop
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <LL_USART_IsActiveFlag_RXNE>:
{
 800873e:	b480      	push	{r7}
 8008740:	b083      	sub	sp, #12
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b20      	cmp	r3, #32
 8008750:	bf0c      	ite	eq
 8008752:	2301      	moveq	r3, #1
 8008754:	2300      	movne	r3, #0
 8008756:	b2db      	uxtb	r3, r3
}
 8008758:	4618      	mov	r0, r3
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <LL_USART_IsActiveFlag_TC>:
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008774:	2b40      	cmp	r3, #64	; 0x40
 8008776:	bf0c      	ite	eq
 8008778:	2301      	moveq	r3, #1
 800877a:	2300      	movne	r3, #0
 800877c:	b2db      	uxtb	r3, r3
}
 800877e:	4618      	mov	r0, r3
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <LL_USART_ClearFlag_RXNE>:
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f06f 0220 	mvn.w	r2, #32
 8008798:	601a      	str	r2, [r3, #0]
}
 800879a:	bf00      	nop
 800879c:	370c      	adds	r7, #12
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <LL_USART_EnableIT_RXNE>:
{
 80087a6:	b480      	push	{r7}
 80087a8:	b083      	sub	sp, #12
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	f043 0220 	orr.w	r2, r3, #32
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	60da      	str	r2, [r3, #12]
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <LL_USART_ReceiveData8>:
{
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	b2db      	uxtb	r3, r3
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <LL_USART_TransmitData8>:
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	460b      	mov	r3, r1
 80087ea:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80087ec:	78fa      	ldrb	r2, [r7, #3]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	605a      	str	r2, [r3, #4]
}
 80087f2:	bf00      	nop
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
	...

08008800 <UART3_Init>:
#include "stm32f4xx_ll_utils.h"

static struct ring_buffer_struct* UART_rx_data;

void UART3_Init(struct ring_buffer_struct* rx_data)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b090      	sub	sp, #64	; 0x40
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8008808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	605a      	str	r2, [r3, #4]
 8008812:	609a      	str	r2, [r3, #8]
 8008814:	60da      	str	r2, [r3, #12]
 8008816:	611a      	str	r2, [r3, #16]
 8008818:	615a      	str	r2, [r3, #20]
 800881a:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800881c:	f107 030c 	add.w	r3, r7, #12
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	605a      	str	r2, [r3, #4]
 8008826:	609a      	str	r2, [r3, #8]
 8008828:	60da      	str	r2, [r3, #12]
 800882a:	611a      	str	r2, [r3, #16]
 800882c:	615a      	str	r2, [r3, #20]

	/**USART3 GPIO Configuration
	PD8   ------> USART3_TX
	PD9   ------> USART3_RX
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800882e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008832:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008834:	2302      	movs	r3, #2
 8008836:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008838:	2303      	movs	r3, #3
 800883a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800883c:	2300      	movs	r3, #0
 800883e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008840:	2300      	movs	r3, #0
 8008842:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8008844:	2307      	movs	r3, #7
 8008846:	623b      	str	r3, [r7, #32]
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008848:	f107 030c 	add.w	r3, r7, #12
 800884c:	4619      	mov	r1, r3
 800884e:	481c      	ldr	r0, [pc, #112]	; (80088c0 <UART3_Init+0xc0>)
 8008850:	f7fb f801 	bl	8003856 <LL_GPIO_Init>

	NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008854:	f7ff feba 	bl	80085cc <__NVIC_GetPriorityGrouping>
 8008858:	4603      	mov	r3, r0
 800885a:	2200      	movs	r2, #0
 800885c:	2100      	movs	r1, #0
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff ff0a 	bl	8008678 <NVIC_EncodePriority>
 8008864:	4603      	mov	r3, r0
 8008866:	4619      	mov	r1, r3
 8008868:	2027      	movs	r0, #39	; 0x27
 800886a:	f7ff fedb 	bl	8008624 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART3_IRQn);
 800886e:	2027      	movs	r0, #39	; 0x27
 8008870:	f7ff feba 	bl	80085e8 <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 115200;
 8008874:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800887a:	2300      	movs	r3, #0
 800887c:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800887e:	2300      	movs	r3, #0
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008882:	2300      	movs	r3, #0
 8008884:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008886:	230c      	movs	r3, #12
 8008888:	637b      	str	r3, [r7, #52]	; 0x34
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800888a:	2300      	movs	r3, #0
 800888c:	63bb      	str	r3, [r7, #56]	; 0x38
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800888e:	2300      	movs	r3, #0
 8008890:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_USART_Init(USART3, &USART_InitStruct);
 8008892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008896:	4619      	mov	r1, r3
 8008898:	480a      	ldr	r0, [pc, #40]	; (80088c4 <UART3_Init+0xc4>)
 800889a:	f7fb fedd 	bl	8004658 <LL_USART_Init>
	LL_USART_EnableIT_RXNE(USART3);
 800889e:	4809      	ldr	r0, [pc, #36]	; (80088c4 <UART3_Init+0xc4>)
 80088a0:	f7ff ff81 	bl	80087a6 <LL_USART_EnableIT_RXNE>
	LL_USART_ConfigAsyncMode(USART3);
 80088a4:	4807      	ldr	r0, [pc, #28]	; (80088c4 <UART3_Init+0xc4>)
 80088a6:	f7ff ff34 	bl	8008712 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART3);
 80088aa:	4806      	ldr	r0, [pc, #24]	; (80088c4 <UART3_Init+0xc4>)
 80088ac:	f7ff ff21 	bl	80086f2 <LL_USART_Enable>

	UART_rx_data = rx_data;
 80088b0:	4a05      	ldr	r2, [pc, #20]	; (80088c8 <UART3_Init+0xc8>)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6013      	str	r3, [r2, #0]
}
 80088b6:	bf00      	nop
 80088b8:	3740      	adds	r7, #64	; 0x40
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	40020c00 	.word	0x40020c00
 80088c4:	40004800 	.word	0x40004800
 80088c8:	20008b6c 	.word	0x20008b6c

080088cc <Sensor_UpdateGpioInit>:

void Sensor_UpdateGpioInit()
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088d2:	463b      	mov	r3, r7
 80088d4:	2200      	movs	r2, #0
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	605a      	str	r2, [r3, #4]
 80088da:	609a      	str	r2, [r3, #8]
 80088dc:	60da      	str	r2, [r3, #12]
 80088de:	611a      	str	r2, [r3, #16]
 80088e0:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80088e2:	2301      	movs	r3, #1
 80088e4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80088e6:	2300      	movs	r3, #0
 80088e8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80088ea:	2302      	movs	r3, #2
 80088ec:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088ee:	463b      	mov	r3, r7
 80088f0:	4619      	mov	r1, r3
 80088f2:	4803      	ldr	r0, [pc, #12]	; (8008900 <Sensor_UpdateGpioInit+0x34>)
 80088f4:	f7fa ffaf 	bl	8003856 <LL_GPIO_Init>
}
 80088f8:	bf00      	nop
 80088fa:	3718      	adds	r7, #24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	40020000 	.word	0x40020000

08008904 <Sensor_GpioValue>:

uint8_t Sensor_GpioValue()
{
 8008904:	b580      	push	{r7, lr}
 8008906:	af00      	add	r7, sp, #0
	return LL_GPIO_ReadInputPort(GPIOA) & LL_GPIO_PIN_0;
 8008908:	4804      	ldr	r0, [pc, #16]	; (800891c <Sensor_GpioValue+0x18>)
 800890a:	f7ff fee6 	bl	80086da <LL_GPIO_ReadInputPort>
 800890e:	4603      	mov	r3, r0
 8008910:	b2db      	uxtb	r3, r3
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	b2db      	uxtb	r3, r3
}
 8008918:	4618      	mov	r0, r3
 800891a:	bd80      	pop	{r7, pc}
 800891c:	40020000 	.word	0x40020000

08008920 <UART3_SendData_byte>:

void UART3_SendData_byte(char data)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	4603      	mov	r3, r0
 8008928:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART3, data);
 800892a:	79fb      	ldrb	r3, [r7, #7]
 800892c:	4619      	mov	r1, r3
 800892e:	4807      	ldr	r0, [pc, #28]	; (800894c <UART3_SendData_byte+0x2c>)
 8008930:	f7ff ff56 	bl	80087e0 <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TC(USART3));
 8008934:	bf00      	nop
 8008936:	4805      	ldr	r0, [pc, #20]	; (800894c <UART3_SendData_byte+0x2c>)
 8008938:	f7ff ff14 	bl	8008764 <LL_USART_IsActiveFlag_TC>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d0f9      	beq.n	8008936 <UART3_SendData_byte+0x16>
}
 8008942:	bf00      	nop
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	40004800 	.word	0x40004800

08008950 <UART3_SendData>:

void UART3_SendData(char* data, uint32_t data_length)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < data_length; ++i)
 800895a:	2300      	movs	r3, #0
 800895c:	60fb      	str	r3, [r7, #12]
 800895e:	e009      	b.n	8008974 <UART3_SendData+0x24>
	{
		UART3_SendData_byte(data[i]);
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	4413      	add	r3, r2
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	4618      	mov	r0, r3
 800896a:	f7ff ffd9 	bl	8008920 <UART3_SendData_byte>
	for(uint32_t i = 0; i < data_length; ++i)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3301      	adds	r3, #1
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	429a      	cmp	r2, r3
 800897a:	d3f1      	bcc.n	8008960 <UART3_SendData+0x10>
	}
}
 800897c:	bf00      	nop
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <UART3_CharReception_Callback>:

void UART3_CharReception_Callback(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
	__IO uint8_t received_char;
	received_char = LL_USART_ReceiveData8(USART3);
 800898a:	4808      	ldr	r0, [pc, #32]	; (80089ac <UART3_CharReception_Callback+0x28>)
 800898c:	f7ff ff1b 	bl	80087c6 <LL_USART_ReceiveData8>
 8008990:	4603      	mov	r3, r0
 8008992:	71fb      	strb	r3, [r7, #7]

	RingBuffPush(UART_rx_data, (char)received_char);
 8008994:	4b06      	ldr	r3, [pc, #24]	; (80089b0 <UART3_CharReception_Callback+0x2c>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	79fa      	ldrb	r2, [r7, #7]
 800899a:	b2d2      	uxtb	r2, r2
 800899c:	4611      	mov	r1, r2
 800899e:	4618      	mov	r0, r3
 80089a0:	f7f9 ffdd 	bl	800295e <RingBuffPush>
}
 80089a4:	bf00      	nop
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	40004800 	.word	0x40004800
 80089b0:	20008b6c 	.word	0x20008b6c

080089b4 <Error_Callback>:

static void Error_Callback(void)
{
 80089b4:	b480      	push	{r7}
 80089b6:	af00      	add	r7, sp, #0
	//dummy
}
 80089b8:	bf00      	nop
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
	...

080089c4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART3)) {
 80089c8:	4807      	ldr	r0, [pc, #28]	; (80089e8 <USART3_IRQHandler+0x24>)
 80089ca:	f7ff feb8 	bl	800873e <LL_USART_IsActiveFlag_RXNE>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <USART3_IRQHandler+0x1c>
		UART3_CharReception_Callback();
 80089d4:	f7ff ffd6 	bl	8008984 <UART3_CharReception_Callback>
		LL_USART_ClearFlag_RXNE(USART3);
 80089d8:	4803      	ldr	r0, [pc, #12]	; (80089e8 <USART3_IRQHandler+0x24>)
 80089da:	f7ff fed6 	bl	800878a <LL_USART_ClearFlag_RXNE>
	} else {
		Error_Callback();
	}
}
 80089de:	e001      	b.n	80089e4 <USART3_IRQHandler+0x20>
		Error_Callback();
 80089e0:	f7ff ffe8 	bl	80089b4 <Error_Callback>
}
 80089e4:	bf00      	nop
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	40004800 	.word	0x40004800

080089ec <write_outputs>:
#include "task.h"

#define UPDATE_TASK_TIME 1000 * 60 * 5 // 5 minutes

void write_outputs()
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	af00      	add	r7, sp, #0
	W25qxx_WriteBlock((uint8_t *)outputs, 1, 0, sizeof(W25qxx_WriteBlock));
 80089f0:	2301      	movs	r3, #1
 80089f2:	2200      	movs	r2, #0
 80089f4:	2101      	movs	r1, #1
 80089f6:	4802      	ldr	r0, [pc, #8]	; (8008a00 <write_outputs+0x14>)
 80089f8:	f7fa fa20 	bl	8002e3c <W25qxx_WriteBlock>
}
 80089fc:	bf00      	nop
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	20008ba8 	.word	0x20008ba8

08008a04 <W25_Task>:
	W25qxx_ReadBlock((uint8_t *)outputs, 1, 0, sizeof(W25qxx_WriteBlock));
}


void W25_Task( void * pvParameters )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d009      	beq.n	8008a26 <W25_Task+0x22>
 8008a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	e7fe      	b.n	8008a24 <W25_Task+0x20>

    TLed_Set(OFF);
 8008a26:	2000      	movs	r0, #0
 8008a28:	f7fe fee6 	bl	80077f8 <TLed_Set>

    if(W25qxx_Init() == 1)
 8008a2c:	f7fa f8be 	bl	8002bac <W25qxx_Init>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d103      	bne.n	8008a3e <W25_Task+0x3a>
    {
    	TLed_Set(ON);
 8008a36:	2001      	movs	r0, #1
 8008a38:	f7fe fede 	bl	80077f8 <TLed_Set>
 8008a3c:	e005      	b.n	8008a4a <W25_Task+0x46>
    } else {
    	RLed_Set(ON);
 8008a3e:	2001      	movs	r0, #1
 8008a40:	f7fe fee8 	bl	8007814 <RLed_Set>
    	vTaskDelete(NULL);
 8008a44:	2000      	movs	r0, #0
 8008a46:	f7fd fb4b 	bl	80060e0 <vTaskDelete>
	}

    while(1)
    {
    	vTaskDelay(pdMS_TO_TICKS(UPDATE_TASK_TIME));
 8008a4a:	4805      	ldr	r0, [pc, #20]	; (8008a60 <W25_Task+0x5c>)
 8008a4c:	f7fd fbba 	bl	80061c4 <vTaskDelay>
    	if(outputs_updated_flag == 1)
 8008a50:	4b04      	ldr	r3, [pc, #16]	; (8008a64 <W25_Task+0x60>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d1f8      	bne.n	8008a4a <W25_Task+0x46>
    	{
    		write_outputs();
 8008a58:	f7ff ffc8 	bl	80089ec <write_outputs>
    	vTaskDelay(pdMS_TO_TICKS(UPDATE_TASK_TIME));
 8008a5c:	e7f5      	b.n	8008a4a <W25_Task+0x46>
 8008a5e:	bf00      	nop
 8008a60:	000493e0 	.word	0x000493e0
 8008a64:	20008ba4 	.word	0x20008ba4

08008a68 <W25_TaskInit>:
    	}
    }
}

void W25_TaskInit( void )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	607b      	str	r3, [r7, #4]
    xTaskCreate(
 8008a72:	1d3b      	adds	r3, r7, #4
 8008a74:	9301      	str	r3, [sp, #4]
 8008a76:	2304      	movs	r3, #4
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a80:	4903      	ldr	r1, [pc, #12]	; (8008a90 <W25_TaskInit+0x28>)
 8008a82:	4804      	ldr	r0, [pc, #16]	; (8008a94 <W25_TaskInit+0x2c>)
 8008a84:	f7fd f9e8 	bl	8005e58 <xTaskCreate>
                    "W25_Task",    			 /* Text name for the task. */
					256,	 					 /* Stack size in words, not bytes. */
                    ( void * ) 1,     		 	 /* Parameter passed into the task. */
                    4,				 			 /* Priority at which the task is created. */
                    &xHandle );   		   	     /* Used to pass out the created task's handle. */
}
 8008a88:	bf00      	nop
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	0800ba60 	.word	0x0800ba60
 8008a94:	08008a05 	.word	0x08008a05

08008a98 <MX_FREERTOS_Init>:

void StartDefaultTask(void *argument);
void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

void MX_FREERTOS_Init(void)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	af00      	add	r7, sp, #0
	Init_TaskInit();
 8008a9c:	f7fe fd6e 	bl	800757c <Init_TaskInit>

	//Led_TaskInit();
	Relay_TaskInit();
 8008aa0:	f7ff f852 	bl	8007b48 <Relay_TaskInit>

	ESP_TaskInit();
 8008aa4:	f7fe fd1c 	bl	80074e0 <ESP_TaskInit>
	BitEngine_TaskInit();
 8008aa8:	f7fe fcb2 	bl	8007410 <BitEngine_TaskInit>
	W25_TaskInit();
 8008aac:	f7ff ffdc 	bl	8008a68 <W25_TaskInit>
	Sensor_TaskInit();
 8008ab0:	f7ff fa12 	bl	8007ed8 <Sensor_TaskInit>

	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8008ab4:	4a04      	ldr	r2, [pc, #16]	; (8008ac8 <MX_FREERTOS_Init+0x30>)
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	4804      	ldr	r0, [pc, #16]	; (8008acc <MX_FREERTOS_Init+0x34>)
 8008aba:	f7fb fecf 	bl	800485c <osThreadNew>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	4b03      	ldr	r3, [pc, #12]	; (8008ad0 <MX_FREERTOS_Init+0x38>)
 8008ac2:	601a      	str	r2, [r3, #0]
}
 8008ac4:	bf00      	nop
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	0800ba94 	.word	0x0800ba94
 8008acc:	08008ad5 	.word	0x08008ad5
 8008ad0:	200192dc 	.word	0x200192dc

08008ad4 <StartDefaultTask>:

void StartDefaultTask(void *argument) {
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
	for(;;) {
		osDelay(1);
 8008adc:	2001      	movs	r0, #1
 8008ade:	f7fb ff63 	bl	80049a8 <osDelay>
 8008ae2:	e7fb      	b.n	8008adc <StartDefaultTask+0x8>

08008ae4 <LL_RCC_HSI_Enable>:
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008ae8:	4a05      	ldr	r2, [pc, #20]	; (8008b00 <LL_RCC_HSI_Enable+0x1c>)
 8008aea:	4b05      	ldr	r3, [pc, #20]	; (8008b00 <LL_RCC_HSI_Enable+0x1c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f043 0301 	orr.w	r3, r3, #1
 8008af2:	6013      	str	r3, [r2, #0]
}
 8008af4:	bf00      	nop
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	40023800 	.word	0x40023800

08008b04 <LL_RCC_HSI_IsReady>:
{
 8008b04:	b480      	push	{r7}
 8008b06:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8008b08:	4b06      	ldr	r3, [pc, #24]	; (8008b24 <LL_RCC_HSI_IsReady+0x20>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	bf0c      	ite	eq
 8008b14:	2301      	moveq	r3, #1
 8008b16:	2300      	movne	r3, #0
 8008b18:	b2db      	uxtb	r3, r3
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr
 8008b24:	40023800 	.word	0x40023800

08008b28 <LL_RCC_HSI_SetCalibTrimming>:
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8008b30:	4907      	ldr	r1, [pc, #28]	; (8008b50 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8008b32:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	600b      	str	r3, [r1, #0]
}
 8008b42:	bf00      	nop
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	40023800 	.word	0x40023800

08008b54 <LL_RCC_LSI_Enable>:
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8008b58:	4a05      	ldr	r2, [pc, #20]	; (8008b70 <LL_RCC_LSI_Enable+0x1c>)
 8008b5a:	4b05      	ldr	r3, [pc, #20]	; (8008b70 <LL_RCC_LSI_Enable+0x1c>)
 8008b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b5e:	f043 0301 	orr.w	r3, r3, #1
 8008b62:	6753      	str	r3, [r2, #116]	; 0x74
}
 8008b64:	bf00      	nop
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	40023800 	.word	0x40023800

08008b74 <LL_RCC_LSI_IsReady>:
{
 8008b74:	b480      	push	{r7}
 8008b76:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8008b78:	4b06      	ldr	r3, [pc, #24]	; (8008b94 <LL_RCC_LSI_IsReady+0x20>)
 8008b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	bf0c      	ite	eq
 8008b84:	2301      	moveq	r3, #1
 8008b86:	2300      	movne	r3, #0
 8008b88:	b2db      	uxtb	r3, r3
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	40023800 	.word	0x40023800

08008b98 <LL_RCC_SetSysClkSource>:
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008ba0:	4906      	ldr	r1, [pc, #24]	; (8008bbc <LL_RCC_SetSysClkSource+0x24>)
 8008ba2:	4b06      	ldr	r3, [pc, #24]	; (8008bbc <LL_RCC_SetSysClkSource+0x24>)
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f023 0203 	bic.w	r2, r3, #3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	608b      	str	r3, [r1, #8]
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	40023800 	.word	0x40023800

08008bc0 <LL_RCC_GetSysClkSource>:
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008bc4:	4b04      	ldr	r3, [pc, #16]	; (8008bd8 <LL_RCC_GetSysClkSource+0x18>)
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f003 030c 	and.w	r3, r3, #12
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	40023800 	.word	0x40023800

08008bdc <LL_RCC_SetAHBPrescaler>:
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008be4:	4906      	ldr	r1, [pc, #24]	; (8008c00 <LL_RCC_SetAHBPrescaler+0x24>)
 8008be6:	4b06      	ldr	r3, [pc, #24]	; (8008c00 <LL_RCC_SetAHBPrescaler+0x24>)
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	608b      	str	r3, [r1, #8]
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	40023800 	.word	0x40023800

08008c04 <LL_RCC_SetAPB1Prescaler>:
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008c0c:	4906      	ldr	r1, [pc, #24]	; (8008c28 <LL_RCC_SetAPB1Prescaler+0x24>)
 8008c0e:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <LL_RCC_SetAPB1Prescaler+0x24>)
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	608b      	str	r3, [r1, #8]
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	40023800 	.word	0x40023800

08008c2c <LL_RCC_SetAPB2Prescaler>:
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008c34:	4906      	ldr	r1, [pc, #24]	; (8008c50 <LL_RCC_SetAPB2Prescaler+0x24>)
 8008c36:	4b06      	ldr	r3, [pc, #24]	; (8008c50 <LL_RCC_SetAPB2Prescaler+0x24>)
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	608b      	str	r3, [r1, #8]
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	40023800 	.word	0x40023800

08008c54 <LL_RCC_SetRTCClockSource>:
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008c5c:	4906      	ldr	r1, [pc, #24]	; (8008c78 <LL_RCC_SetRTCClockSource+0x24>)
 8008c5e:	4b06      	ldr	r3, [pc, #24]	; (8008c78 <LL_RCC_SetRTCClockSource+0x24>)
 8008c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	670b      	str	r3, [r1, #112]	; 0x70
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	40023800 	.word	0x40023800

08008c7c <LL_RCC_EnableRTC>:
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8008c80:	4a05      	ldr	r2, [pc, #20]	; (8008c98 <LL_RCC_EnableRTC+0x1c>)
 8008c82:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <LL_RCC_EnableRTC+0x1c>)
 8008c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c8a:	6713      	str	r3, [r2, #112]	; 0x70
}
 8008c8c:	bf00      	nop
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	40023800 	.word	0x40023800

08008c9c <LL_RCC_ForceBackupDomainReset>:
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008ca0:	4a05      	ldr	r2, [pc, #20]	; (8008cb8 <LL_RCC_ForceBackupDomainReset+0x1c>)
 8008ca2:	4b05      	ldr	r3, [pc, #20]	; (8008cb8 <LL_RCC_ForceBackupDomainReset+0x1c>)
 8008ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008caa:	6713      	str	r3, [r2, #112]	; 0x70
}
 8008cac:	bf00      	nop
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	40023800 	.word	0x40023800

08008cbc <LL_RCC_ReleaseBackupDomainReset>:
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008cc0:	4a05      	ldr	r2, [pc, #20]	; (8008cd8 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8008cc2:	4b05      	ldr	r3, [pc, #20]	; (8008cd8 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8008cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cca:	6713      	str	r3, [r2, #112]	; 0x70
}
 8008ccc:	bf00      	nop
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	40023800 	.word	0x40023800

08008cdc <LL_RCC_PLL_Enable>:
{
 8008cdc:	b480      	push	{r7}
 8008cde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008ce0:	4a05      	ldr	r2, [pc, #20]	; (8008cf8 <LL_RCC_PLL_Enable+0x1c>)
 8008ce2:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <LL_RCC_PLL_Enable+0x1c>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cea:	6013      	str	r3, [r2, #0]
}
 8008cec:	bf00      	nop
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	40023800 	.word	0x40023800

08008cfc <LL_RCC_PLL_IsReady>:
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8008d00:	4b07      	ldr	r3, [pc, #28]	; (8008d20 <LL_RCC_PLL_IsReady+0x24>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d0c:	bf0c      	ite	eq
 8008d0e:	2301      	moveq	r3, #1
 8008d10:	2300      	movne	r3, #0
 8008d12:	b2db      	uxtb	r3, r3
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	40023800 	.word	0x40023800

08008d24 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8008d32:	480d      	ldr	r0, [pc, #52]	; (8008d68 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8008d34:	4b0c      	ldr	r3, [pc, #48]	; (8008d68 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	4b0c      	ldr	r3, [pc, #48]	; (8008d6c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	68f9      	ldr	r1, [r7, #12]
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	4311      	orrs	r1, r2
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	0192      	lsls	r2, r2, #6
 8008d46:	430a      	orrs	r2, r1
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	6043      	str	r3, [r0, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8008d4c:	4906      	ldr	r1, [pc, #24]	; (8008d68 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8008d4e:	4b06      	ldr	r3, [pc, #24]	; (8008d68 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	604b      	str	r3, [r1, #4]
}
 8008d5c:	bf00      	nop
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	40023800 	.word	0x40023800
 8008d6c:	ffbf8000 	.word	0xffbf8000

08008d70 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008d78:	4908      	ldr	r1, [pc, #32]	; (8008d9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008d7a:	4b08      	ldr	r3, [pc, #32]	; (8008d9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008d84:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
}
 8008d90:	bf00      	nop
 8008d92:	3714      	adds	r7, #20
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	40023800 	.word	0x40023800

08008da0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8008da8:	4908      	ldr	r1, [pc, #32]	; (8008dcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8008daa:	4b08      	ldr	r3, [pc, #32]	; (8008dcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8008dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8008db4:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8008db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4013      	ands	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
}
 8008dc0:	bf00      	nop
 8008dc2:	3714      	adds	r7, #20
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	40023800 	.word	0x40023800

08008dd0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8008dd8:	4906      	ldr	r1, [pc, #24]	; (8008df4 <LL_FLASH_SetLatency+0x24>)
 8008dda:	4b06      	ldr	r3, [pc, #24]	; (8008df4 <LL_FLASH_SetLatency+0x24>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f023 020f 	bic.w	r2, r3, #15
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	600b      	str	r3, [r1, #0]
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	40023c00 	.word	0x40023c00

08008df8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8008dfc:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <LL_FLASH_GetLatency+0x18>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 030f 	and.w	r3, r3, #15
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	40023c00 	.word	0x40023c00

08008e14 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8008e1c:	4906      	ldr	r1, [pc, #24]	; (8008e38 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8008e1e:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	600b      	str	r3, [r1, #0]
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	40007000 	.word	0x40007000

08008e3c <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e40:	4a05      	ldr	r2, [pc, #20]	; (8008e58 <LL_PWR_EnableBkUpAccess+0x1c>)
 8008e42:	4b05      	ldr	r3, [pc, #20]	; (8008e58 <LL_PWR_EnableBkUpAccess+0x1c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e4a:	6013      	str	r3, [r2, #0]
}
 8008e4c:	bf00      	nop
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	40007000 	.word	0x40007000

08008e5c <main>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);

int main(void)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	af00      	add	r7, sp, #0
	HAL_Init();
 8008e60:	f7fa f84e 	bl	8002f00 <HAL_Init>
	SystemClock_Config();
 8008e64:	f000 f82c 	bl	8008ec0 <SystemClock_Config>

	RTC_Init();
 8008e68:	f000 f994 	bl	8009194 <RTC_Init>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008e6c:	2001      	movs	r0, #1
 8008e6e:	f7ff ff7f 	bl	8008d70 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8008e72:	2002      	movs	r0, #2
 8008e74:	f7ff ff7c 	bl	8008d70 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008e78:	2004      	movs	r0, #4
 8008e7a:	f7ff ff79 	bl	8008d70 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8008e7e:	2008      	movs	r0, #8
 8008e80:	f7ff ff76 	bl	8008d70 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8008e84:	2010      	movs	r0, #16
 8008e86:	f7ff ff73 	bl	8008d70 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8008e8a:	2080      	movs	r0, #128	; 0x80
 8008e8c:	f7ff ff70 	bl	8008d70 <LL_AHB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8008e90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008e94:	f7ff ff84 	bl	8008da0 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8008e98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008e9c:	f7ff ff80 	bl	8008da0 <LL_APB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8008ea0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008ea4:	f7ff ff7c 	bl	8008da0 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8008ea8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8008eac:	f7ff ff78 	bl	8008da0 <LL_APB1_GRP1_EnableClock>

	osKernelInitialize();
 8008eb0:	f7fb fc6a 	bl	8004788 <osKernelInitialize>
	MX_FREERTOS_Init();
 8008eb4:	f7ff fdf0 	bl	8008a98 <MX_FREERTOS_Init>
	osKernelStart();
 8008eb8:	f7fb fc9a 	bl	80047f0 <osKernelStart>

	while (1) {}
 8008ebc:	e7fe      	b.n	8008ebc <main+0x60>
	...

08008ec0 <SystemClock_Config>:
}


void SystemClock_Config(void)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8008ec4:	2005      	movs	r0, #5
 8008ec6:	f7ff ff83 	bl	8008dd0 <LL_FLASH_SetLatency>

	if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
 8008eca:	f7ff ff95 	bl	8008df8 <LL_FLASH_GetLatency>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b05      	cmp	r3, #5
 8008ed2:	d001      	beq.n	8008ed8 <SystemClock_Config+0x18>
	{
	Error_Handler();
 8008ed4:	f000 f866 	bl	8008fa4 <Error_Handler>
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8008ed8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008edc:	f7ff ff9a 	bl	8008e14 <LL_PWR_SetRegulVoltageScaling>
	LL_RCC_HSI_SetCalibTrimming(16);
 8008ee0:	2010      	movs	r0, #16
 8008ee2:	f7ff fe21 	bl	8008b28 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_HSI_Enable();
 8008ee6:	f7ff fdfd 	bl	8008ae4 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while(LL_RCC_HSI_IsReady() != 1) {}
 8008eea:	bf00      	nop
 8008eec:	f7ff fe0a 	bl	8008b04 <LL_RCC_HSI_IsReady>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d1fa      	bne.n	8008eec <SystemClock_Config+0x2c>
	LL_RCC_LSI_Enable();
 8008ef6:	f7ff fe2d 	bl	8008b54 <LL_RCC_LSI_Enable>

	/* Wait till LSI is ready */
	while(LL_RCC_LSI_IsReady() != 1) {}
 8008efa:	bf00      	nop
 8008efc:	f7ff fe3a 	bl	8008b74 <LL_RCC_LSI_IsReady>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d1fa      	bne.n	8008efc <SystemClock_Config+0x3c>
	LL_PWR_EnableBkUpAccess();
 8008f06:	f7ff ff99 	bl	8008e3c <LL_PWR_EnableBkUpAccess>
	LL_RCC_ForceBackupDomainReset();
 8008f0a:	f7ff fec7 	bl	8008c9c <LL_RCC_ForceBackupDomainReset>
	LL_RCC_ReleaseBackupDomainReset();
 8008f0e:	f7ff fed5 	bl	8008cbc <LL_RCC_ReleaseBackupDomainReset>
	LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 8008f12:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008f16:	f7ff fe9d 	bl	8008c54 <LL_RCC_SetRTCClockSource>
	LL_RCC_EnableRTC();
 8008f1a:	f7ff feaf 	bl	8008c7c <LL_RCC_EnableRTC>
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_2);
 8008f1e:	2300      	movs	r3, #0
 8008f20:	22a8      	movs	r2, #168	; 0xa8
 8008f22:	2108      	movs	r1, #8
 8008f24:	2000      	movs	r0, #0
 8008f26:	f7ff fefd 	bl	8008d24 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8008f2a:	f7ff fed7 	bl	8008cdc <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1) {}
 8008f2e:	bf00      	nop
 8008f30:	f7ff fee4 	bl	8008cfc <LL_RCC_PLL_IsReady>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d1fa      	bne.n	8008f30 <SystemClock_Config+0x70>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	f7ff fe4e 	bl	8008bdc <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8008f40:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8008f44:	f7ff fe5e 	bl	8008c04 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8008f48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008f4c:	f7ff fe6e 	bl	8008c2c <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8008f50:	2002      	movs	r0, #2
 8008f52:	f7ff fe21 	bl	8008b98 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {}
 8008f56:	bf00      	nop
 8008f58:	f7ff fe32 	bl	8008bc0 <LL_RCC_GetSysClkSource>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b08      	cmp	r3, #8
 8008f60:	d1fa      	bne.n	8008f58 <SystemClock_Config+0x98>
	LL_SetSystemCoreClock(168000000);
 8008f62:	4806      	ldr	r0, [pc, #24]	; (8008f7c <SystemClock_Config+0xbc>)
 8008f64:	f7fb fbf8 	bl	8004758 <LL_SetSystemCoreClock>

	/* Update the time base */
	if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8008f68:	2000      	movs	r0, #0
 8008f6a:	f000 faef 	bl	800954c <HAL_InitTick>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8008f74:	f000 f816 	bl	8008fa4 <Error_Handler>
	};
}
 8008f78:	bf00      	nop
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	0a037a00 	.word	0x0a037a00

08008f80 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a04      	ldr	r2, [pc, #16]	; (8008fa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d101      	bne.n	8008f96 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8008f92:	f7f9 ffd7 	bl	8002f44 <HAL_IncTick>
	}
}
 8008f96:	bf00      	nop
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	40010000 	.word	0x40010000

08008fa4 <Error_Handler>:

void Error_Handler(void)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	af00      	add	r7, sp, #0
}
 8008fa8:	bf00      	nop
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
	...

08008fb4 <LL_RCC_EnableRTC>:
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8008fb8:	4a05      	ldr	r2, [pc, #20]	; (8008fd0 <LL_RCC_EnableRTC+0x1c>)
 8008fba:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <LL_RCC_EnableRTC+0x1c>)
 8008fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fc2:	6713      	str	r3, [r2, #112]	; 0x70
}
 8008fc4:	bf00      	nop
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	40023800 	.word	0x40023800

08008fd4 <LL_RTC_DisableInitMode>:
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fe2:	60da      	str	r2, [r3, #12]
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <LL_RTC_SetAsynchPrescaler>:
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	041b      	lsls	r3, r3, #16
 8009006:	431a      	orrs	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	611a      	str	r2, [r3, #16]
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <LL_RTC_SetSynchPrescaler>:
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800902a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	431a      	orrs	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	611a      	str	r2, [r3, #16]
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <LL_RTC_EnableWriteProtection>:
{
 8009042:	b480      	push	{r7}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	22ff      	movs	r2, #255	; 0xff
 800904e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <LL_RTC_DisableWriteProtection>:
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	22ca      	movs	r2, #202	; 0xca
 8009068:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2253      	movs	r2, #83	; 0x53
 800906e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <LL_RTC_TIME_GetHour>:
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU))) >> RTC_TR_HU_Pos);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	0c1b      	lsrs	r3, r3, #16
 800908a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800908e:	4618      	mov	r0, r3
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <LL_RTC_TIME_GetMinute>:
{
 800909a:	b480      	push	{r7}
 800909c:	b083      	sub	sp, #12
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU))>> RTC_TR_MNU_Pos);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	0a1b      	lsrs	r3, r3, #8
 80090a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <LL_RTC_TIME_GetSecond>:
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <LL_RTC_DATE_GetYear>:
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU))) >> RTC_DR_YU_Pos);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	0c1b      	lsrs	r3, r3, #16
 80090e2:	b2db      	uxtb	r3, r3
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <LL_RTC_DATE_GetWeekDay>:
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->DR, RTC_DR_WDU) >> RTC_DR_WDU_Pos);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	0b5b      	lsrs	r3, r3, #13
 80090fe:	f003 0307 	and.w	r3, r3, #7
}
 8009102:	4618      	mov	r0, r3
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <LL_RTC_DATE_GetMonth>:
{
 800910e:	b480      	push	{r7}
 8009110:	b083      	sub	sp, #12
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU)))>> RTC_DR_MU_Pos);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	0a1b      	lsrs	r3, r3, #8
 800911c:	f003 031f 	and.w	r3, r3, #31
}
 8009120:	4618      	mov	r0, r3
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <LL_RTC_DATE_GetDay>:
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU))) >> RTC_DR_DU_Pos);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800913c:	4618      	mov	r0, r3
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <LL_RTC_BAK_SetRegister>:
{
 8009148:	b490      	push	{r4, r7}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t)(&(RTCx->BKP0R));
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	3350      	adds	r3, #80	; 0x50
 8009158:	461c      	mov	r4, r3
  tmp += (BackupRegister * 4U);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	441c      	add	r4, r3
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009160:	4622      	mov	r2, r4
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6013      	str	r3, [r2, #0]
}
 8009166:	bf00      	nop
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bc90      	pop	{r4, r7}
 800916e:	4770      	bx	lr

08009170 <LL_RTC_BAK_GetRegister>:
{
 8009170:	b490      	push	{r4, r7}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t)(&(RTCx->BKP0R));
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3350      	adds	r3, #80	; 0x50
 800917e:	461c      	mov	r4, r3
  tmp += (BackupRegister * 4U);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	441c      	add	r4, r3
  return (*(__IO uint32_t *)tmp);
 8009186:	4623      	mov	r3, r4
 8009188:	681b      	ldr	r3, [r3, #0]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bc90      	pop	{r4, r7}
 8009192:	4770      	bx	lr

08009194 <RTC_Init>:
#include "rtc.h"

void RTC_Init(void)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
	LL_RTC_InitTypeDef RTC_InitStruct = {0};
 800919a:	f107 030c 	add.w	r3, r7, #12
 800919e:	2200      	movs	r2, #0
 80091a0:	601a      	str	r2, [r3, #0]
 80091a2:	605a      	str	r2, [r3, #4]
 80091a4:	609a      	str	r2, [r3, #8]
	LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 80091a6:	1d3b      	adds	r3, r7, #4
 80091a8:	2200      	movs	r2, #0
 80091aa:	601a      	str	r2, [r3, #0]
 80091ac:	605a      	str	r2, [r3, #4]
	LL_RTC_DateTypeDef RTC_DateStruct = {0};
 80091ae:	2300      	movs	r3, #0
 80091b0:	603b      	str	r3, [r7, #0]

	LL_RCC_EnableRTC();
 80091b2:	f7ff feff 	bl	8008fb4 <LL_RCC_EnableRTC>

	RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 80091b6:	2300      	movs	r3, #0
 80091b8:	60fb      	str	r3, [r7, #12]
	RTC_InitStruct.AsynchPrescaler = 127;
 80091ba:	237f      	movs	r3, #127	; 0x7f
 80091bc:	613b      	str	r3, [r7, #16]
	RTC_InitStruct.SynchPrescaler = 255;
 80091be:	23ff      	movs	r3, #255	; 0xff
 80091c0:	617b      	str	r3, [r7, #20]
	LL_RTC_Init(RTC, &RTC_InitStruct);
 80091c2:	f107 030c 	add.w	r3, r7, #12
 80091c6:	4619      	mov	r1, r3
 80091c8:	481a      	ldr	r0, [pc, #104]	; (8009234 <RTC_Init+0xa0>)
 80091ca:	f7fa fe1b 	bl	8003e04 <LL_RTC_Init>
	LL_RTC_SetAsynchPrescaler(RTC, 127);
 80091ce:	217f      	movs	r1, #127	; 0x7f
 80091d0:	4818      	ldr	r0, [pc, #96]	; (8009234 <RTC_Init+0xa0>)
 80091d2:	f7ff ff0d 	bl	8008ff0 <LL_RTC_SetAsynchPrescaler>
	LL_RTC_SetSynchPrescaler(RTC, 255);
 80091d6:	21ff      	movs	r1, #255	; 0xff
 80091d8:	4816      	ldr	r0, [pc, #88]	; (8009234 <RTC_Init+0xa0>)
 80091da:	f7ff ff1d 	bl	8009018 <LL_RTC_SetSynchPrescaler>

	if(LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0) != 0x32F2)
 80091de:	2100      	movs	r1, #0
 80091e0:	4814      	ldr	r0, [pc, #80]	; (8009234 <RTC_Init+0xa0>)
 80091e2:	f7ff ffc5 	bl	8009170 <LL_RTC_BAK_GetRegister>
 80091e6:	4602      	mov	r2, r0
 80091e8:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d01d      	beq.n	800922c <RTC_Init+0x98>
	{
		RTC_TimeStruct.Hours = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	723b      	strb	r3, [r7, #8]
		RTC_TimeStruct.Minutes = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	727b      	strb	r3, [r7, #9]
		RTC_TimeStruct.Seconds = 0;
 80091f8:	2300      	movs	r3, #0
 80091fa:	72bb      	strb	r3, [r7, #10]
		LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_TimeStruct);
 80091fc:	1d3b      	adds	r3, r7, #4
 80091fe:	461a      	mov	r2, r3
 8009200:	2101      	movs	r1, #1
 8009202:	480c      	ldr	r0, [pc, #48]	; (8009234 <RTC_Init+0xa0>)
 8009204:	f7fa fe2e 	bl	8003e64 <LL_RTC_TIME_Init>
		RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;
 8009208:	2301      	movs	r3, #1
 800920a:	703b      	strb	r3, [r7, #0]
		RTC_DateStruct.Month = LL_RTC_MONTH_JANUARY;
 800920c:	2301      	movs	r3, #1
 800920e:	707b      	strb	r3, [r7, #1]
		RTC_DateStruct.Year = 0;
 8009210:	2300      	movs	r3, #0
 8009212:	70fb      	strb	r3, [r7, #3]
		LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_DateStruct);
 8009214:	463b      	mov	r3, r7
 8009216:	461a      	mov	r2, r3
 8009218:	2101      	movs	r1, #1
 800921a:	4806      	ldr	r0, [pc, #24]	; (8009234 <RTC_Init+0xa0>)
 800921c:	f7fa feca 	bl	8003fb4 <LL_RTC_DATE_Init>
		LL_RTC_BAK_SetRegister(RTC,LL_RTC_BKP_DR0,0x32F2);
 8009220:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8009224:	2100      	movs	r1, #0
 8009226:	4803      	ldr	r0, [pc, #12]	; (8009234 <RTC_Init+0xa0>)
 8009228:	f7ff ff8e 	bl	8009148 <LL_RTC_BAK_SetRegister>
	}

}
 800922c:	bf00      	nop
 800922e:	3718      	adds	r7, #24
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	40002800 	.word	0x40002800

08009238 <RTC_GetTime>:

void RTC_GetTime(struct tm* time)
{
 8009238:	b590      	push	{r4, r7, lr}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
	time->tm_hour = __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8009240:	4871      	ldr	r0, [pc, #452]	; (8009408 <RTC_GetTime+0x1d0>)
 8009242:	f7ff ff1b 	bl	800907c <LL_RTC_TIME_GetHour>
 8009246:	4603      	mov	r3, r0
 8009248:	b2db      	uxtb	r3, r3
 800924a:	111b      	asrs	r3, r3, #4
 800924c:	b2db      	uxtb	r3, r3
 800924e:	f003 030f 	and.w	r3, r3, #15
 8009252:	b2db      	uxtb	r3, r3
 8009254:	461a      	mov	r2, r3
 8009256:	0092      	lsls	r2, r2, #2
 8009258:	4413      	add	r3, r2
 800925a:	005b      	lsls	r3, r3, #1
 800925c:	b2dc      	uxtb	r4, r3
 800925e:	486a      	ldr	r0, [pc, #424]	; (8009408 <RTC_GetTime+0x1d0>)
 8009260:	f7ff ff0c 	bl	800907c <LL_RTC_TIME_GetHour>
 8009264:	4603      	mov	r3, r0
 8009266:	b2db      	uxtb	r3, r3
 8009268:	f003 030f 	and.w	r3, r3, #15
 800926c:	b2db      	uxtb	r3, r3
 800926e:	4423      	add	r3, r4
 8009270:	b2db      	uxtb	r3, r3
 8009272:	461a      	mov	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	609a      	str	r2, [r3, #8]
	time->tm_min = 	__LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8009278:	4863      	ldr	r0, [pc, #396]	; (8009408 <RTC_GetTime+0x1d0>)
 800927a:	f7ff ff0e 	bl	800909a <LL_RTC_TIME_GetMinute>
 800927e:	4603      	mov	r3, r0
 8009280:	b2db      	uxtb	r3, r3
 8009282:	111b      	asrs	r3, r3, #4
 8009284:	b2db      	uxtb	r3, r3
 8009286:	f003 030f 	and.w	r3, r3, #15
 800928a:	b2db      	uxtb	r3, r3
 800928c:	461a      	mov	r2, r3
 800928e:	0092      	lsls	r2, r2, #2
 8009290:	4413      	add	r3, r2
 8009292:	005b      	lsls	r3, r3, #1
 8009294:	b2dc      	uxtb	r4, r3
 8009296:	485c      	ldr	r0, [pc, #368]	; (8009408 <RTC_GetTime+0x1d0>)
 8009298:	f7ff feff 	bl	800909a <LL_RTC_TIME_GetMinute>
 800929c:	4603      	mov	r3, r0
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	f003 030f 	and.w	r3, r3, #15
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	4423      	add	r3, r4
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	461a      	mov	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	605a      	str	r2, [r3, #4]
	time->tm_sec = 	__LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80092b0:	4855      	ldr	r0, [pc, #340]	; (8009408 <RTC_GetTime+0x1d0>)
 80092b2:	f7ff ff01 	bl	80090b8 <LL_RTC_TIME_GetSecond>
 80092b6:	4603      	mov	r3, r0
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	111b      	asrs	r3, r3, #4
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	f003 030f 	and.w	r3, r3, #15
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	461a      	mov	r2, r3
 80092c6:	0092      	lsls	r2, r2, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	005b      	lsls	r3, r3, #1
 80092cc:	b2dc      	uxtb	r4, r3
 80092ce:	484e      	ldr	r0, [pc, #312]	; (8009408 <RTC_GetTime+0x1d0>)
 80092d0:	f7ff fef2 	bl	80090b8 <LL_RTC_TIME_GetSecond>
 80092d4:	4603      	mov	r3, r0
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	f003 030f 	and.w	r3, r3, #15
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	4423      	add	r3, r4
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	461a      	mov	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	601a      	str	r2, [r3, #0]

	time->tm_mday = __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 80092e8:	4847      	ldr	r0, [pc, #284]	; (8009408 <RTC_GetTime+0x1d0>)
 80092ea:	f7ff ff1f 	bl	800912c <LL_RTC_DATE_GetDay>
 80092ee:	4603      	mov	r3, r0
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	111b      	asrs	r3, r3, #4
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	f003 030f 	and.w	r3, r3, #15
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	461a      	mov	r2, r3
 80092fe:	0092      	lsls	r2, r2, #2
 8009300:	4413      	add	r3, r2
 8009302:	005b      	lsls	r3, r3, #1
 8009304:	b2dc      	uxtb	r4, r3
 8009306:	4840      	ldr	r0, [pc, #256]	; (8009408 <RTC_GetTime+0x1d0>)
 8009308:	f7ff ff10 	bl	800912c <LL_RTC_DATE_GetDay>
 800930c:	4603      	mov	r3, r0
 800930e:	b2db      	uxtb	r3, r3
 8009310:	f003 030f 	and.w	r3, r3, #15
 8009314:	b2db      	uxtb	r3, r3
 8009316:	4423      	add	r3, r4
 8009318:	b2db      	uxtb	r3, r3
 800931a:	461a      	mov	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	60da      	str	r2, [r3, #12]
	time->tm_mon = __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)) - 1;
 8009320:	4839      	ldr	r0, [pc, #228]	; (8009408 <RTC_GetTime+0x1d0>)
 8009322:	f7ff fef4 	bl	800910e <LL_RTC_DATE_GetMonth>
 8009326:	4603      	mov	r3, r0
 8009328:	b2db      	uxtb	r3, r3
 800932a:	111b      	asrs	r3, r3, #4
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f003 030f 	and.w	r3, r3, #15
 8009332:	b2db      	uxtb	r3, r3
 8009334:	461a      	mov	r2, r3
 8009336:	0092      	lsls	r2, r2, #2
 8009338:	4413      	add	r3, r2
 800933a:	005b      	lsls	r3, r3, #1
 800933c:	b2dc      	uxtb	r4, r3
 800933e:	4832      	ldr	r0, [pc, #200]	; (8009408 <RTC_GetTime+0x1d0>)
 8009340:	f7ff fee5 	bl	800910e <LL_RTC_DATE_GetMonth>
 8009344:	4603      	mov	r3, r0
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f003 030f 	and.w	r3, r3, #15
 800934c:	b2db      	uxtb	r3, r3
 800934e:	4423      	add	r3, r4
 8009350:	b2db      	uxtb	r3, r3
 8009352:	1e5a      	subs	r2, r3, #1
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	611a      	str	r2, [r3, #16]
	time->tm_year = __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8009358:	482b      	ldr	r0, [pc, #172]	; (8009408 <RTC_GetTime+0x1d0>)
 800935a:	f7ff febb 	bl	80090d4 <LL_RTC_DATE_GetYear>
 800935e:	4603      	mov	r3, r0
 8009360:	b2db      	uxtb	r3, r3
 8009362:	111b      	asrs	r3, r3, #4
 8009364:	b2db      	uxtb	r3, r3
 8009366:	f003 030f 	and.w	r3, r3, #15
 800936a:	b2db      	uxtb	r3, r3
 800936c:	461a      	mov	r2, r3
 800936e:	0092      	lsls	r2, r2, #2
 8009370:	4413      	add	r3, r2
 8009372:	005b      	lsls	r3, r3, #1
 8009374:	b2dc      	uxtb	r4, r3
 8009376:	4824      	ldr	r0, [pc, #144]	; (8009408 <RTC_GetTime+0x1d0>)
 8009378:	f7ff feac 	bl	80090d4 <LL_RTC_DATE_GetYear>
 800937c:	4603      	mov	r3, r0
 800937e:	b2db      	uxtb	r3, r3
 8009380:	f003 030f 	and.w	r3, r3, #15
 8009384:	b2db      	uxtb	r3, r3
 8009386:	4423      	add	r3, r4
 8009388:	b2db      	uxtb	r3, r3
 800938a:	461a      	mov	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	615a      	str	r2, [r3, #20]

	// RTC HAS DIF WEEK DAY MASKS
	//tm  0 - sunday 6 - saturday
	//rtc 1 - monday 7 - sunday

	switch(LL_RTC_DATE_GetWeekDay(RTC))
 8009390:	481d      	ldr	r0, [pc, #116]	; (8009408 <RTC_GetTime+0x1d0>)
 8009392:	f7ff fead 	bl	80090f0 <LL_RTC_DATE_GetWeekDay>
 8009396:	4603      	mov	r3, r0
 8009398:	3b01      	subs	r3, #1
 800939a:	2b06      	cmp	r3, #6
 800939c:	d82c      	bhi.n	80093f8 <RTC_GetTime+0x1c0>
 800939e:	a201      	add	r2, pc, #4	; (adr r2, 80093a4 <RTC_GetTime+0x16c>)
 80093a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a4:	080093c1 	.word	0x080093c1
 80093a8:	080093c9 	.word	0x080093c9
 80093ac:	080093d1 	.word	0x080093d1
 80093b0:	080093d9 	.word	0x080093d9
 80093b4:	080093e1 	.word	0x080093e1
 80093b8:	080093e9 	.word	0x080093e9
 80093bc:	080093f1 	.word	0x080093f1
	{
	case LL_RTC_WEEKDAY_MONDAY: 	time->tm_wday = 1; break;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	619a      	str	r2, [r3, #24]
 80093c6:	e01b      	b.n	8009400 <RTC_GetTime+0x1c8>
	case LL_RTC_WEEKDAY_TUESDAY: 	time->tm_wday = 2; break;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2202      	movs	r2, #2
 80093cc:	619a      	str	r2, [r3, #24]
 80093ce:	e017      	b.n	8009400 <RTC_GetTime+0x1c8>
	case LL_RTC_WEEKDAY_WEDNESDAY: 	time->tm_wday = 3; break;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2203      	movs	r2, #3
 80093d4:	619a      	str	r2, [r3, #24]
 80093d6:	e013      	b.n	8009400 <RTC_GetTime+0x1c8>
	case LL_RTC_WEEKDAY_THURSDAY: 	time->tm_wday = 4; break;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2204      	movs	r2, #4
 80093dc:	619a      	str	r2, [r3, #24]
 80093de:	e00f      	b.n	8009400 <RTC_GetTime+0x1c8>
	case LL_RTC_WEEKDAY_FRIDAY: 	time->tm_wday = 5; break;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2205      	movs	r2, #5
 80093e4:	619a      	str	r2, [r3, #24]
 80093e6:	e00b      	b.n	8009400 <RTC_GetTime+0x1c8>
	case LL_RTC_WEEKDAY_SATURDAY: 	time->tm_wday = 6; break;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2206      	movs	r2, #6
 80093ec:	619a      	str	r2, [r3, #24]
 80093ee:	e007      	b.n	8009400 <RTC_GetTime+0x1c8>
	case LL_RTC_WEEKDAY_SUNDAY: 	time->tm_wday = 0; break;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	619a      	str	r2, [r3, #24]
 80093f6:	e003      	b.n	8009400 <RTC_GetTime+0x1c8>
	default: time->tm_wday = 0; break;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	619a      	str	r2, [r3, #24]
 80093fe:	bf00      	nop
	}
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	bd90      	pop	{r4, r7, pc}
 8009408:	40002800 	.word	0x40002800

0800940c <RTC_SetTime>:

void RTC_SetTime(struct tm* time)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
	LL_RTC_DisableWriteProtection(RTC);
 8009414:	4836      	ldr	r0, [pc, #216]	; (80094f0 <RTC_SetTime+0xe4>)
 8009416:	f7ff fe21 	bl	800905c <LL_RTC_DisableWriteProtection>
	LL_RTC_EnterInitMode(RTC);
 800941a:	4835      	ldr	r0, [pc, #212]	; (80094f0 <RTC_SetTime+0xe4>)
 800941c:	f7fa fe70 	bl	8004100 <LL_RTC_EnterInitMode>

	LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8009420:	f107 0310 	add.w	r3, r7, #16
 8009424:	2200      	movs	r2, #0
 8009426:	601a      	str	r2, [r3, #0]
 8009428:	605a      	str	r2, [r3, #4]
	LL_RTC_DateTypeDef RTC_DateStruct = {0};
 800942a:	2300      	movs	r3, #0
 800942c:	60fb      	str	r3, [r7, #12]

	RTC_TimeStruct.Hours = time->tm_hour;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	b2db      	uxtb	r3, r3
 8009434:	753b      	strb	r3, [r7, #20]
	RTC_TimeStruct.Minutes = time->tm_min;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	b2db      	uxtb	r3, r3
 800943c:	757b      	strb	r3, [r7, #21]
	RTC_TimeStruct.Seconds = time->tm_sec;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	b2db      	uxtb	r3, r3
 8009444:	75bb      	strb	r3, [r7, #22]
	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8009446:	f107 0310 	add.w	r3, r7, #16
 800944a:	461a      	mov	r2, r3
 800944c:	2100      	movs	r1, #0
 800944e:	4828      	ldr	r0, [pc, #160]	; (80094f0 <RTC_SetTime+0xe4>)
 8009450:	f7fa fd08 	bl	8003e64 <LL_RTC_TIME_Init>

	switch(time->tm_wday)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	699b      	ldr	r3, [r3, #24]
 8009458:	2b06      	cmp	r3, #6
 800945a:	d826      	bhi.n	80094aa <RTC_SetTime+0x9e>
 800945c:	a201      	add	r2, pc, #4	; (adr r2, 8009464 <RTC_SetTime+0x58>)
 800945e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009462:	bf00      	nop
 8009464:	08009481 	.word	0x08009481
 8009468:	08009487 	.word	0x08009487
 800946c:	0800948d 	.word	0x0800948d
 8009470:	08009493 	.word	0x08009493
 8009474:	08009499 	.word	0x08009499
 8009478:	0800949f 	.word	0x0800949f
 800947c:	080094a5 	.word	0x080094a5
	{
	case 0:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_SUNDAY;		break;
 8009480:	2307      	movs	r3, #7
 8009482:	733b      	strb	r3, [r7, #12]
 8009484:	e014      	b.n	80094b0 <RTC_SetTime+0xa4>
	case 1:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY; 	break;
 8009486:	2301      	movs	r3, #1
 8009488:	733b      	strb	r3, [r7, #12]
 800948a:	e011      	b.n	80094b0 <RTC_SetTime+0xa4>
	case 2:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_TUESDAY; 	break;
 800948c:	2302      	movs	r3, #2
 800948e:	733b      	strb	r3, [r7, #12]
 8009490:	e00e      	b.n	80094b0 <RTC_SetTime+0xa4>
	case 3: RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_WEDNESDAY; 	break;
 8009492:	2303      	movs	r3, #3
 8009494:	733b      	strb	r3, [r7, #12]
 8009496:	e00b      	b.n	80094b0 <RTC_SetTime+0xa4>
	case 4:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_THURSDAY; 	break;
 8009498:	2304      	movs	r3, #4
 800949a:	733b      	strb	r3, [r7, #12]
 800949c:	e008      	b.n	80094b0 <RTC_SetTime+0xa4>
	case 5:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_FRIDAY; 	break;
 800949e:	2305      	movs	r3, #5
 80094a0:	733b      	strb	r3, [r7, #12]
 80094a2:	e005      	b.n	80094b0 <RTC_SetTime+0xa4>
	case 6:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_SATURDAY;	break;
 80094a4:	2306      	movs	r3, #6
 80094a6:	733b      	strb	r3, [r7, #12]
 80094a8:	e002      	b.n	80094b0 <RTC_SetTime+0xa4>
	default: RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_SUNDAY; 	break;
 80094aa:	2307      	movs	r3, #7
 80094ac:	733b      	strb	r3, [r7, #12]
 80094ae:	bf00      	nop
	}

	RTC_DateStruct.Day = time->tm_mday;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	73bb      	strb	r3, [r7, #14]
	RTC_DateStruct.Month = time->tm_mon + 1;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	3301      	adds	r3, #1
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	737b      	strb	r3, [r7, #13]
	RTC_DateStruct.Year = time->tm_year;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	695b      	ldr	r3, [r3, #20]
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	73fb      	strb	r3, [r7, #15]
	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 80094cc:	f107 030c 	add.w	r3, r7, #12
 80094d0:	461a      	mov	r2, r3
 80094d2:	2100      	movs	r1, #0
 80094d4:	4806      	ldr	r0, [pc, #24]	; (80094f0 <RTC_SetTime+0xe4>)
 80094d6:	f7fa fd6d 	bl	8003fb4 <LL_RTC_DATE_Init>

	LL_RTC_DisableInitMode(RTC);
 80094da:	4805      	ldr	r0, [pc, #20]	; (80094f0 <RTC_SetTime+0xe4>)
 80094dc:	f7ff fd7a 	bl	8008fd4 <LL_RTC_DisableInitMode>
	LL_RTC_EnableWriteProtection(RTC);
 80094e0:	4803      	ldr	r0, [pc, #12]	; (80094f0 <RTC_SetTime+0xe4>)
 80094e2:	f7ff fdae 	bl	8009042 <LL_RTC_EnableWriteProtection>
}
 80094e6:	bf00      	nop
 80094e8:	3718      	adds	r7, #24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	40002800 	.word	0x40002800

080094f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80094fa:	2300      	movs	r3, #0
 80094fc:	607b      	str	r3, [r7, #4]
 80094fe:	4a12      	ldr	r2, [pc, #72]	; (8009548 <HAL_MspInit+0x54>)
 8009500:	4b11      	ldr	r3, [pc, #68]	; (8009548 <HAL_MspInit+0x54>)
 8009502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009508:	6453      	str	r3, [r2, #68]	; 0x44
 800950a:	4b0f      	ldr	r3, [pc, #60]	; (8009548 <HAL_MspInit+0x54>)
 800950c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009512:	607b      	str	r3, [r7, #4]
 8009514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009516:	2300      	movs	r3, #0
 8009518:	603b      	str	r3, [r7, #0]
 800951a:	4a0b      	ldr	r2, [pc, #44]	; (8009548 <HAL_MspInit+0x54>)
 800951c:	4b0a      	ldr	r3, [pc, #40]	; (8009548 <HAL_MspInit+0x54>)
 800951e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009524:	6413      	str	r3, [r2, #64]	; 0x40
 8009526:	4b08      	ldr	r3, [pc, #32]	; (8009548 <HAL_MspInit+0x54>)
 8009528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800952e:	603b      	str	r3, [r7, #0]
 8009530:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009532:	2200      	movs	r2, #0
 8009534:	210f      	movs	r1, #15
 8009536:	f06f 0001 	mvn.w	r0, #1
 800953a:	f7f9 fdcd 	bl	80030d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800953e:	bf00      	nop
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	40023800 	.word	0x40023800

0800954c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b08c      	sub	sp, #48	; 0x30
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009558:	2300      	movs	r3, #0
 800955a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800955c:	2200      	movs	r2, #0
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	2019      	movs	r0, #25
 8009562:	f7f9 fdb9 	bl	80030d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8009566:	2019      	movs	r0, #25
 8009568:	f7f9 fdd2 	bl	8003110 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800956c:	2300      	movs	r3, #0
 800956e:	60fb      	str	r3, [r7, #12]
 8009570:	4a1f      	ldr	r2, [pc, #124]	; (80095f0 <HAL_InitTick+0xa4>)
 8009572:	4b1f      	ldr	r3, [pc, #124]	; (80095f0 <HAL_InitTick+0xa4>)
 8009574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009576:	f043 0301 	orr.w	r3, r3, #1
 800957a:	6453      	str	r3, [r2, #68]	; 0x44
 800957c:	4b1c      	ldr	r3, [pc, #112]	; (80095f0 <HAL_InitTick+0xa4>)
 800957e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009580:	f003 0301 	and.w	r3, r3, #1
 8009584:	60fb      	str	r3, [r7, #12]
 8009586:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009588:	f107 0210 	add.w	r2, r7, #16
 800958c:	f107 0314 	add.w	r3, r7, #20
 8009590:	4611      	mov	r1, r2
 8009592:	4618      	mov	r0, r3
 8009594:	f7f9 fdea 	bl	800316c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8009598:	f7f9 fdd4 	bl	8003144 <HAL_RCC_GetPCLK2Freq>
 800959c:	4603      	mov	r3, r0
 800959e:	005b      	lsls	r3, r3, #1
 80095a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	4a13      	ldr	r2, [pc, #76]	; (80095f4 <HAL_InitTick+0xa8>)
 80095a6:	fba2 2303 	umull	r2, r3, r2, r3
 80095aa:	0c9b      	lsrs	r3, r3, #18
 80095ac:	3b01      	subs	r3, #1
 80095ae:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80095b0:	4b11      	ldr	r3, [pc, #68]	; (80095f8 <HAL_InitTick+0xac>)
 80095b2:	4a12      	ldr	r2, [pc, #72]	; (80095fc <HAL_InitTick+0xb0>)
 80095b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80095b6:	4b10      	ldr	r3, [pc, #64]	; (80095f8 <HAL_InitTick+0xac>)
 80095b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80095bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80095be:	4a0e      	ldr	r2, [pc, #56]	; (80095f8 <HAL_InitTick+0xac>)
 80095c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80095c4:	4b0c      	ldr	r3, [pc, #48]	; (80095f8 <HAL_InitTick+0xac>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095ca:	4b0b      	ldr	r3, [pc, #44]	; (80095f8 <HAL_InitTick+0xac>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80095d0:	4809      	ldr	r0, [pc, #36]	; (80095f8 <HAL_InitTick+0xac>)
 80095d2:	f7f9 fdfd 	bl	80031d0 <HAL_TIM_Base_Init>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d104      	bne.n	80095e6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80095dc:	4806      	ldr	r0, [pc, #24]	; (80095f8 <HAL_InitTick+0xac>)
 80095de:	f7f9 fe2c 	bl	800323a <HAL_TIM_Base_Start_IT>
 80095e2:	4603      	mov	r3, r0
 80095e4:	e000      	b.n	80095e8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3730      	adds	r7, #48	; 0x30
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	40023800 	.word	0x40023800
 80095f4:	431bde83 	.word	0x431bde83
 80095f8:	200192e0 	.word	0x200192e0
 80095fc:	40010000 	.word	0x40010000

08009600 <NMI_Handler>:
#include "task.h"

extern TIM_HandleTypeDef htim1;

void NMI_Handler(void)
{
 8009600:	b480      	push	{r7}
 8009602:	af00      	add	r7, sp, #0

}
 8009604:	bf00      	nop
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <HardFault_Handler>:

void HardFault_Handler(void)
{
 800960e:	b480      	push	{r7}
 8009610:	af00      	add	r7, sp, #0
	while (1)
 8009612:	e7fe      	b.n	8009612 <HardFault_Handler+0x4>

08009614 <MemManage_Handler>:

	}
}

void MemManage_Handler(void)
{
 8009614:	b480      	push	{r7}
 8009616:	af00      	add	r7, sp, #0
	while (1)
 8009618:	e7fe      	b.n	8009618 <MemManage_Handler+0x4>

0800961a <BusFault_Handler>:

	}
}

void BusFault_Handler(void)
{
 800961a:	b480      	push	{r7}
 800961c:	af00      	add	r7, sp, #0
	while (1)
 800961e:	e7fe      	b.n	800961e <BusFault_Handler+0x4>

08009620 <UsageFault_Handler>:

	}
}

void UsageFault_Handler(void)
{
 8009620:	b480      	push	{r7}
 8009622:	af00      	add	r7, sp, #0
	while (1)
 8009624:	e7fe      	b.n	8009624 <UsageFault_Handler+0x4>

08009626 <DebugMon_Handler>:

	}
}

void DebugMon_Handler(void)
{
 8009626:	b480      	push	{r7}
 8009628:	af00      	add	r7, sp, #0

}
 800962a:	bf00      	nop
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim1);
 8009638:	4802      	ldr	r0, [pc, #8]	; (8009644 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800963a:	f7f9 fe22 	bl	8003282 <HAL_TIM_IRQHandler>
}
 800963e:	bf00      	nop
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	200192e0 	.word	0x200192e0

08009648 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009650:	4b11      	ldr	r3, [pc, #68]	; (8009698 <_sbrk+0x50>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d102      	bne.n	800965e <_sbrk+0x16>
		heap_end = &end;
 8009658:	4b0f      	ldr	r3, [pc, #60]	; (8009698 <_sbrk+0x50>)
 800965a:	4a10      	ldr	r2, [pc, #64]	; (800969c <_sbrk+0x54>)
 800965c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800965e:	4b0e      	ldr	r3, [pc, #56]	; (8009698 <_sbrk+0x50>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009664:	4b0c      	ldr	r3, [pc, #48]	; (8009698 <_sbrk+0x50>)
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4413      	add	r3, r2
 800966c:	466a      	mov	r2, sp
 800966e:	4293      	cmp	r3, r2
 8009670:	d907      	bls.n	8009682 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8009672:	f000 f855 	bl	8009720 <__errno>
 8009676:	4602      	mov	r2, r0
 8009678:	230c      	movs	r3, #12
 800967a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800967c:	f04f 33ff 	mov.w	r3, #4294967295
 8009680:	e006      	b.n	8009690 <_sbrk+0x48>
	}

	heap_end += incr;
 8009682:	4b05      	ldr	r3, [pc, #20]	; (8009698 <_sbrk+0x50>)
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4413      	add	r3, r2
 800968a:	4a03      	ldr	r2, [pc, #12]	; (8009698 <_sbrk+0x50>)
 800968c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800968e:	68fb      	ldr	r3, [r7, #12]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	20008b74 	.word	0x20008b74
 800969c:	20019324 	.word	0x20019324

080096a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80096a0:	b480      	push	{r7}
 80096a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80096a4:	4a08      	ldr	r2, [pc, #32]	; (80096c8 <SystemInit+0x28>)
 80096a6:	4b08      	ldr	r3, [pc, #32]	; (80096c8 <SystemInit+0x28>)
 80096a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80096b4:	4b04      	ldr	r3, [pc, #16]	; (80096c8 <SystemInit+0x28>)
 80096b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80096ba:	609a      	str	r2, [r3, #8]
#endif
}
 80096bc:	bf00      	nop
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	e000ed00 	.word	0xe000ed00

080096cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80096cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009704 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80096d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80096d2:	e003      	b.n	80096dc <LoopCopyDataInit>

080096d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80096d4:	4b0c      	ldr	r3, [pc, #48]	; (8009708 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80096d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80096d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80096da:	3104      	adds	r1, #4

080096dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80096dc:	480b      	ldr	r0, [pc, #44]	; (800970c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80096de:	4b0c      	ldr	r3, [pc, #48]	; (8009710 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80096e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80096e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80096e4:	d3f6      	bcc.n	80096d4 <CopyDataInit>
  ldr  r2, =_sbss
 80096e6:	4a0b      	ldr	r2, [pc, #44]	; (8009714 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80096e8:	e002      	b.n	80096f0 <LoopFillZerobss>

080096ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80096ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80096ec:	f842 3b04 	str.w	r3, [r2], #4

080096f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80096f0:	4b09      	ldr	r3, [pc, #36]	; (8009718 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80096f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80096f4:	d3f9      	bcc.n	80096ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80096f6:	f7ff ffd3 	bl	80096a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80096fa:	f000 f817 	bl	800972c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80096fe:	f7ff fbad 	bl	8008e5c <main>
  bx  lr    
 8009702:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009704:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009708:	0800bd98 	.word	0x0800bd98
  ldr  r0, =_sdata
 800970c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009710:	20000228 	.word	0x20000228
  ldr  r2, =_sbss
 8009714:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 8009718:	20019324 	.word	0x20019324

0800971c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800971c:	e7fe      	b.n	800971c <ADC_IRQHandler>
	...

08009720 <__errno>:
 8009720:	4b01      	ldr	r3, [pc, #4]	; (8009728 <__errno+0x8>)
 8009722:	6818      	ldr	r0, [r3, #0]
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	20000010 	.word	0x20000010

0800972c <__libc_init_array>:
 800972c:	b570      	push	{r4, r5, r6, lr}
 800972e:	4e0d      	ldr	r6, [pc, #52]	; (8009764 <__libc_init_array+0x38>)
 8009730:	4c0d      	ldr	r4, [pc, #52]	; (8009768 <__libc_init_array+0x3c>)
 8009732:	1ba4      	subs	r4, r4, r6
 8009734:	10a4      	asrs	r4, r4, #2
 8009736:	2500      	movs	r5, #0
 8009738:	42a5      	cmp	r5, r4
 800973a:	d109      	bne.n	8009750 <__libc_init_array+0x24>
 800973c:	4e0b      	ldr	r6, [pc, #44]	; (800976c <__libc_init_array+0x40>)
 800973e:	4c0c      	ldr	r4, [pc, #48]	; (8009770 <__libc_init_array+0x44>)
 8009740:	f002 f822 	bl	800b788 <_init>
 8009744:	1ba4      	subs	r4, r4, r6
 8009746:	10a4      	asrs	r4, r4, #2
 8009748:	2500      	movs	r5, #0
 800974a:	42a5      	cmp	r5, r4
 800974c:	d105      	bne.n	800975a <__libc_init_array+0x2e>
 800974e:	bd70      	pop	{r4, r5, r6, pc}
 8009750:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009754:	4798      	blx	r3
 8009756:	3501      	adds	r5, #1
 8009758:	e7ee      	b.n	8009738 <__libc_init_array+0xc>
 800975a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800975e:	4798      	blx	r3
 8009760:	3501      	adds	r5, #1
 8009762:	e7f2      	b.n	800974a <__libc_init_array+0x1e>
 8009764:	0800bd90 	.word	0x0800bd90
 8009768:	0800bd90 	.word	0x0800bd90
 800976c:	0800bd90 	.word	0x0800bd90
 8009770:	0800bd94 	.word	0x0800bd94

08009774 <localtime_r>:
 8009774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009778:	460c      	mov	r4, r1
 800977a:	4680      	mov	r8, r0
 800977c:	f000 ff2c 	bl	800a5d8 <__gettzinfo>
 8009780:	4621      	mov	r1, r4
 8009782:	4607      	mov	r7, r0
 8009784:	4640      	mov	r0, r8
 8009786:	f000 ff2b 	bl	800a5e0 <gmtime_r>
 800978a:	6946      	ldr	r6, [r0, #20]
 800978c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8009790:	07b3      	lsls	r3, r6, #30
 8009792:	4604      	mov	r4, r0
 8009794:	d105      	bne.n	80097a2 <localtime_r+0x2e>
 8009796:	2264      	movs	r2, #100	; 0x64
 8009798:	fb96 f3f2 	sdiv	r3, r6, r2
 800979c:	fb02 6313 	mls	r3, r2, r3, r6
 80097a0:	b9fb      	cbnz	r3, 80097e2 <localtime_r+0x6e>
 80097a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80097a6:	fb96 f5f3 	sdiv	r5, r6, r3
 80097aa:	fb03 6515 	mls	r5, r3, r5, r6
 80097ae:	fab5 f585 	clz	r5, r5
 80097b2:	096d      	lsrs	r5, r5, #5
 80097b4:	4b5f      	ldr	r3, [pc, #380]	; (8009934 <localtime_r+0x1c0>)
 80097b6:	2230      	movs	r2, #48	; 0x30
 80097b8:	fb02 3505 	mla	r5, r2, r5, r3
 80097bc:	f000 fd18 	bl	800a1f0 <__tz_lock>
 80097c0:	f000 fd18 	bl	800a1f4 <_tzset_unlocked>
 80097c4:	4b5c      	ldr	r3, [pc, #368]	; (8009938 <localtime_r+0x1c4>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	b1e3      	cbz	r3, 8009804 <localtime_r+0x90>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	429e      	cmp	r6, r3
 80097ce:	d10a      	bne.n	80097e6 <localtime_r+0x72>
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	f8d8 3000 	ldr.w	r3, [r8]
 80097d6:	69fa      	ldr	r2, [r7, #28]
 80097d8:	b969      	cbnz	r1, 80097f6 <localtime_r+0x82>
 80097da:	4293      	cmp	r3, r2
 80097dc:	db0d      	blt.n	80097fa <localtime_r+0x86>
 80097de:	2301      	movs	r3, #1
 80097e0:	e010      	b.n	8009804 <localtime_r+0x90>
 80097e2:	2501      	movs	r5, #1
 80097e4:	e7e6      	b.n	80097b4 <localtime_r+0x40>
 80097e6:	4630      	mov	r0, r6
 80097e8:	f000 fc5a 	bl	800a0a0 <__tzcalc_limits>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d1ef      	bne.n	80097d0 <localtime_r+0x5c>
 80097f0:	f04f 33ff 	mov.w	r3, #4294967295
 80097f4:	e006      	b.n	8009804 <localtime_r+0x90>
 80097f6:	4293      	cmp	r3, r2
 80097f8:	db55      	blt.n	80098a6 <localtime_r+0x132>
 80097fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097fc:	4293      	cmp	r3, r2
 80097fe:	bfac      	ite	ge
 8009800:	2300      	movge	r3, #0
 8009802:	2301      	movlt	r3, #1
 8009804:	6223      	str	r3, [r4, #32]
 8009806:	6a23      	ldr	r3, [r4, #32]
 8009808:	2b01      	cmp	r3, #1
 800980a:	bf0c      	ite	eq
 800980c:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 800980e:	6a39      	ldrne	r1, [r7, #32]
 8009810:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009814:	203c      	movs	r0, #60	; 0x3c
 8009816:	fb91 f6f3 	sdiv	r6, r1, r3
 800981a:	fb03 1316 	mls	r3, r3, r6, r1
 800981e:	6861      	ldr	r1, [r4, #4]
 8009820:	fb93 f2f0 	sdiv	r2, r3, r0
 8009824:	fb00 3012 	mls	r0, r0, r2, r3
 8009828:	6823      	ldr	r3, [r4, #0]
 800982a:	1a89      	subs	r1, r1, r2
 800982c:	68a2      	ldr	r2, [r4, #8]
 800982e:	6061      	str	r1, [r4, #4]
 8009830:	1a1b      	subs	r3, r3, r0
 8009832:	1b92      	subs	r2, r2, r6
 8009834:	2b3b      	cmp	r3, #59	; 0x3b
 8009836:	6023      	str	r3, [r4, #0]
 8009838:	60a2      	str	r2, [r4, #8]
 800983a:	dd36      	ble.n	80098aa <localtime_r+0x136>
 800983c:	3101      	adds	r1, #1
 800983e:	6061      	str	r1, [r4, #4]
 8009840:	3b3c      	subs	r3, #60	; 0x3c
 8009842:	6023      	str	r3, [r4, #0]
 8009844:	6863      	ldr	r3, [r4, #4]
 8009846:	2b3b      	cmp	r3, #59	; 0x3b
 8009848:	dd35      	ble.n	80098b6 <localtime_r+0x142>
 800984a:	3201      	adds	r2, #1
 800984c:	60a2      	str	r2, [r4, #8]
 800984e:	3b3c      	subs	r3, #60	; 0x3c
 8009850:	6063      	str	r3, [r4, #4]
 8009852:	68a3      	ldr	r3, [r4, #8]
 8009854:	2b17      	cmp	r3, #23
 8009856:	dd34      	ble.n	80098c2 <localtime_r+0x14e>
 8009858:	69e2      	ldr	r2, [r4, #28]
 800985a:	3201      	adds	r2, #1
 800985c:	61e2      	str	r2, [r4, #28]
 800985e:	69a2      	ldr	r2, [r4, #24]
 8009860:	3201      	adds	r2, #1
 8009862:	2a06      	cmp	r2, #6
 8009864:	bfc8      	it	gt
 8009866:	2200      	movgt	r2, #0
 8009868:	61a2      	str	r2, [r4, #24]
 800986a:	68e2      	ldr	r2, [r4, #12]
 800986c:	3b18      	subs	r3, #24
 800986e:	3201      	adds	r2, #1
 8009870:	60a3      	str	r3, [r4, #8]
 8009872:	6923      	ldr	r3, [r4, #16]
 8009874:	60e2      	str	r2, [r4, #12]
 8009876:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800987a:	428a      	cmp	r2, r1
 800987c:	dd0e      	ble.n	800989c <localtime_r+0x128>
 800987e:	3301      	adds	r3, #1
 8009880:	2b0c      	cmp	r3, #12
 8009882:	bf0c      	ite	eq
 8009884:	6963      	ldreq	r3, [r4, #20]
 8009886:	6123      	strne	r3, [r4, #16]
 8009888:	eba2 0201 	sub.w	r2, r2, r1
 800988c:	60e2      	str	r2, [r4, #12]
 800988e:	bf01      	itttt	eq
 8009890:	3301      	addeq	r3, #1
 8009892:	2200      	moveq	r2, #0
 8009894:	6122      	streq	r2, [r4, #16]
 8009896:	6163      	streq	r3, [r4, #20]
 8009898:	bf08      	it	eq
 800989a:	61e2      	streq	r2, [r4, #28]
 800989c:	f000 fca9 	bl	800a1f2 <__tz_unlock>
 80098a0:	4620      	mov	r0, r4
 80098a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a6:	2300      	movs	r3, #0
 80098a8:	e7ac      	b.n	8009804 <localtime_r+0x90>
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	daca      	bge.n	8009844 <localtime_r+0xd0>
 80098ae:	3901      	subs	r1, #1
 80098b0:	6061      	str	r1, [r4, #4]
 80098b2:	333c      	adds	r3, #60	; 0x3c
 80098b4:	e7c5      	b.n	8009842 <localtime_r+0xce>
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	dacb      	bge.n	8009852 <localtime_r+0xde>
 80098ba:	3a01      	subs	r2, #1
 80098bc:	60a2      	str	r2, [r4, #8]
 80098be:	333c      	adds	r3, #60	; 0x3c
 80098c0:	e7c6      	b.n	8009850 <localtime_r+0xdc>
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	daea      	bge.n	800989c <localtime_r+0x128>
 80098c6:	69e2      	ldr	r2, [r4, #28]
 80098c8:	3a01      	subs	r2, #1
 80098ca:	61e2      	str	r2, [r4, #28]
 80098cc:	69a2      	ldr	r2, [r4, #24]
 80098ce:	3a01      	subs	r2, #1
 80098d0:	bf48      	it	mi
 80098d2:	2206      	movmi	r2, #6
 80098d4:	61a2      	str	r2, [r4, #24]
 80098d6:	68e2      	ldr	r2, [r4, #12]
 80098d8:	3318      	adds	r3, #24
 80098da:	3a01      	subs	r2, #1
 80098dc:	60e2      	str	r2, [r4, #12]
 80098de:	60a3      	str	r3, [r4, #8]
 80098e0:	2a00      	cmp	r2, #0
 80098e2:	d1db      	bne.n	800989c <localtime_r+0x128>
 80098e4:	6923      	ldr	r3, [r4, #16]
 80098e6:	3b01      	subs	r3, #1
 80098e8:	d405      	bmi.n	80098f6 <localtime_r+0x182>
 80098ea:	6123      	str	r3, [r4, #16]
 80098ec:	6923      	ldr	r3, [r4, #16]
 80098ee:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80098f2:	60e3      	str	r3, [r4, #12]
 80098f4:	e7d2      	b.n	800989c <localtime_r+0x128>
 80098f6:	230b      	movs	r3, #11
 80098f8:	6123      	str	r3, [r4, #16]
 80098fa:	6963      	ldr	r3, [r4, #20]
 80098fc:	1e5a      	subs	r2, r3, #1
 80098fe:	f012 0f03 	tst.w	r2, #3
 8009902:	6162      	str	r2, [r4, #20]
 8009904:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8009908:	d105      	bne.n	8009916 <localtime_r+0x1a2>
 800990a:	2164      	movs	r1, #100	; 0x64
 800990c:	fb92 f3f1 	sdiv	r3, r2, r1
 8009910:	fb01 2313 	mls	r3, r1, r3, r2
 8009914:	b963      	cbnz	r3, 8009930 <localtime_r+0x1bc>
 8009916:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800991a:	fb92 f3f1 	sdiv	r3, r2, r1
 800991e:	fb01 2313 	mls	r3, r1, r3, r2
 8009922:	fab3 f383 	clz	r3, r3
 8009926:	095b      	lsrs	r3, r3, #5
 8009928:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800992c:	61e3      	str	r3, [r4, #28]
 800992e:	e7dd      	b.n	80098ec <localtime_r+0x178>
 8009930:	2301      	movs	r3, #1
 8009932:	e7f9      	b.n	8009928 <localtime_r+0x1b4>
 8009934:	0800bb3c 	.word	0x0800bb3c
 8009938:	20008b94 	.word	0x20008b94

0800993c <__locale_ctype_ptr_l>:
 800993c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009940:	4770      	bx	lr
	...

08009944 <__locale_ctype_ptr>:
 8009944:	4b04      	ldr	r3, [pc, #16]	; (8009958 <__locale_ctype_ptr+0x14>)
 8009946:	4a05      	ldr	r2, [pc, #20]	; (800995c <__locale_ctype_ptr+0x18>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	6a1b      	ldr	r3, [r3, #32]
 800994c:	2b00      	cmp	r3, #0
 800994e:	bf08      	it	eq
 8009950:	4613      	moveq	r3, r2
 8009952:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8009956:	4770      	bx	lr
 8009958:	20000010 	.word	0x20000010
 800995c:	20000074 	.word	0x20000074

08009960 <__ascii_mbtowc>:
 8009960:	b082      	sub	sp, #8
 8009962:	b901      	cbnz	r1, 8009966 <__ascii_mbtowc+0x6>
 8009964:	a901      	add	r1, sp, #4
 8009966:	b142      	cbz	r2, 800997a <__ascii_mbtowc+0x1a>
 8009968:	b14b      	cbz	r3, 800997e <__ascii_mbtowc+0x1e>
 800996a:	7813      	ldrb	r3, [r2, #0]
 800996c:	600b      	str	r3, [r1, #0]
 800996e:	7812      	ldrb	r2, [r2, #0]
 8009970:	1c10      	adds	r0, r2, #0
 8009972:	bf18      	it	ne
 8009974:	2001      	movne	r0, #1
 8009976:	b002      	add	sp, #8
 8009978:	4770      	bx	lr
 800997a:	4610      	mov	r0, r2
 800997c:	e7fb      	b.n	8009976 <__ascii_mbtowc+0x16>
 800997e:	f06f 0001 	mvn.w	r0, #1
 8009982:	e7f8      	b.n	8009976 <__ascii_mbtowc+0x16>

08009984 <memcmp>:
 8009984:	b510      	push	{r4, lr}
 8009986:	3901      	subs	r1, #1
 8009988:	4402      	add	r2, r0
 800998a:	4290      	cmp	r0, r2
 800998c:	d101      	bne.n	8009992 <memcmp+0xe>
 800998e:	2000      	movs	r0, #0
 8009990:	bd10      	pop	{r4, pc}
 8009992:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009996:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800999a:	42a3      	cmp	r3, r4
 800999c:	d0f5      	beq.n	800998a <memcmp+0x6>
 800999e:	1b18      	subs	r0, r3, r4
 80099a0:	bd10      	pop	{r4, pc}

080099a2 <memcpy>:
 80099a2:	b510      	push	{r4, lr}
 80099a4:	1e43      	subs	r3, r0, #1
 80099a6:	440a      	add	r2, r1
 80099a8:	4291      	cmp	r1, r2
 80099aa:	d100      	bne.n	80099ae <memcpy+0xc>
 80099ac:	bd10      	pop	{r4, pc}
 80099ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099b6:	e7f7      	b.n	80099a8 <memcpy+0x6>

080099b8 <memset>:
 80099b8:	4402      	add	r2, r0
 80099ba:	4603      	mov	r3, r0
 80099bc:	4293      	cmp	r3, r2
 80099be:	d100      	bne.n	80099c2 <memset+0xa>
 80099c0:	4770      	bx	lr
 80099c2:	f803 1b01 	strb.w	r1, [r3], #1
 80099c6:	e7f9      	b.n	80099bc <memset+0x4>

080099c8 <validate_structure>:
 80099c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099ca:	6801      	ldr	r1, [r0, #0]
 80099cc:	293b      	cmp	r1, #59	; 0x3b
 80099ce:	4604      	mov	r4, r0
 80099d0:	d911      	bls.n	80099f6 <validate_structure+0x2e>
 80099d2:	223c      	movs	r2, #60	; 0x3c
 80099d4:	4668      	mov	r0, sp
 80099d6:	f000 fda2 	bl	800a51e <div>
 80099da:	9a01      	ldr	r2, [sp, #4]
 80099dc:	6863      	ldr	r3, [r4, #4]
 80099de:	9900      	ldr	r1, [sp, #0]
 80099e0:	2a00      	cmp	r2, #0
 80099e2:	440b      	add	r3, r1
 80099e4:	6063      	str	r3, [r4, #4]
 80099e6:	bfbb      	ittet	lt
 80099e8:	323c      	addlt	r2, #60	; 0x3c
 80099ea:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80099ee:	6022      	strge	r2, [r4, #0]
 80099f0:	6022      	strlt	r2, [r4, #0]
 80099f2:	bfb8      	it	lt
 80099f4:	6063      	strlt	r3, [r4, #4]
 80099f6:	6861      	ldr	r1, [r4, #4]
 80099f8:	293b      	cmp	r1, #59	; 0x3b
 80099fa:	d911      	bls.n	8009a20 <validate_structure+0x58>
 80099fc:	223c      	movs	r2, #60	; 0x3c
 80099fe:	4668      	mov	r0, sp
 8009a00:	f000 fd8d 	bl	800a51e <div>
 8009a04:	9a01      	ldr	r2, [sp, #4]
 8009a06:	68a3      	ldr	r3, [r4, #8]
 8009a08:	9900      	ldr	r1, [sp, #0]
 8009a0a:	2a00      	cmp	r2, #0
 8009a0c:	440b      	add	r3, r1
 8009a0e:	60a3      	str	r3, [r4, #8]
 8009a10:	bfbb      	ittet	lt
 8009a12:	323c      	addlt	r2, #60	; 0x3c
 8009a14:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009a18:	6062      	strge	r2, [r4, #4]
 8009a1a:	6062      	strlt	r2, [r4, #4]
 8009a1c:	bfb8      	it	lt
 8009a1e:	60a3      	strlt	r3, [r4, #8]
 8009a20:	68a1      	ldr	r1, [r4, #8]
 8009a22:	2917      	cmp	r1, #23
 8009a24:	d911      	bls.n	8009a4a <validate_structure+0x82>
 8009a26:	2218      	movs	r2, #24
 8009a28:	4668      	mov	r0, sp
 8009a2a:	f000 fd78 	bl	800a51e <div>
 8009a2e:	9a01      	ldr	r2, [sp, #4]
 8009a30:	68e3      	ldr	r3, [r4, #12]
 8009a32:	9900      	ldr	r1, [sp, #0]
 8009a34:	2a00      	cmp	r2, #0
 8009a36:	440b      	add	r3, r1
 8009a38:	60e3      	str	r3, [r4, #12]
 8009a3a:	bfbb      	ittet	lt
 8009a3c:	3218      	addlt	r2, #24
 8009a3e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009a42:	60a2      	strge	r2, [r4, #8]
 8009a44:	60a2      	strlt	r2, [r4, #8]
 8009a46:	bfb8      	it	lt
 8009a48:	60e3      	strlt	r3, [r4, #12]
 8009a4a:	6921      	ldr	r1, [r4, #16]
 8009a4c:	290b      	cmp	r1, #11
 8009a4e:	d911      	bls.n	8009a74 <validate_structure+0xac>
 8009a50:	220c      	movs	r2, #12
 8009a52:	4668      	mov	r0, sp
 8009a54:	f000 fd63 	bl	800a51e <div>
 8009a58:	9a01      	ldr	r2, [sp, #4]
 8009a5a:	6963      	ldr	r3, [r4, #20]
 8009a5c:	9900      	ldr	r1, [sp, #0]
 8009a5e:	2a00      	cmp	r2, #0
 8009a60:	440b      	add	r3, r1
 8009a62:	6163      	str	r3, [r4, #20]
 8009a64:	bfbb      	ittet	lt
 8009a66:	320c      	addlt	r2, #12
 8009a68:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009a6c:	6122      	strge	r2, [r4, #16]
 8009a6e:	6122      	strlt	r2, [r4, #16]
 8009a70:	bfb8      	it	lt
 8009a72:	6163      	strlt	r3, [r4, #20]
 8009a74:	6963      	ldr	r3, [r4, #20]
 8009a76:	0799      	lsls	r1, r3, #30
 8009a78:	d143      	bne.n	8009b02 <validate_structure+0x13a>
 8009a7a:	2164      	movs	r1, #100	; 0x64
 8009a7c:	fb93 f2f1 	sdiv	r2, r3, r1
 8009a80:	fb01 3212 	mls	r2, r1, r2, r3
 8009a84:	2a00      	cmp	r2, #0
 8009a86:	d13e      	bne.n	8009b06 <validate_structure+0x13e>
 8009a88:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8009a8c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009a90:	fb93 f2f1 	sdiv	r2, r3, r1
 8009a94:	fb01 3312 	mls	r3, r1, r2, r3
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	bf14      	ite	ne
 8009a9c:	231c      	movne	r3, #28
 8009a9e:	231d      	moveq	r3, #29
 8009aa0:	68e2      	ldr	r2, [r4, #12]
 8009aa2:	2a00      	cmp	r2, #0
 8009aa4:	dd31      	ble.n	8009b0a <validate_structure+0x142>
 8009aa6:	4f37      	ldr	r7, [pc, #220]	; (8009b84 <validate_structure+0x1bc>)
 8009aa8:	2602      	movs	r6, #2
 8009aaa:	f04f 0e00 	mov.w	lr, #0
 8009aae:	2064      	movs	r0, #100	; 0x64
 8009ab0:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8009ab4:	6921      	ldr	r1, [r4, #16]
 8009ab6:	68e2      	ldr	r2, [r4, #12]
 8009ab8:	2901      	cmp	r1, #1
 8009aba:	d05d      	beq.n	8009b78 <validate_structure+0x1b0>
 8009abc:	f857 c021 	ldr.w	ip, [r7, r1, lsl #2]
 8009ac0:	4562      	cmp	r2, ip
 8009ac2:	dd2c      	ble.n	8009b1e <validate_structure+0x156>
 8009ac4:	3101      	adds	r1, #1
 8009ac6:	eba2 020c 	sub.w	r2, r2, ip
 8009aca:	290c      	cmp	r1, #12
 8009acc:	60e2      	str	r2, [r4, #12]
 8009ace:	6121      	str	r1, [r4, #16]
 8009ad0:	d1f0      	bne.n	8009ab4 <validate_structure+0xec>
 8009ad2:	6963      	ldr	r3, [r4, #20]
 8009ad4:	f8c4 e010 	str.w	lr, [r4, #16]
 8009ad8:	1c5a      	adds	r2, r3, #1
 8009ada:	0791      	lsls	r1, r2, #30
 8009adc:	6162      	str	r2, [r4, #20]
 8009ade:	d147      	bne.n	8009b70 <validate_structure+0x1a8>
 8009ae0:	fb92 f1f0 	sdiv	r1, r2, r0
 8009ae4:	fb00 2211 	mls	r2, r0, r1, r2
 8009ae8:	2a00      	cmp	r2, #0
 8009aea:	d143      	bne.n	8009b74 <validate_structure+0x1ac>
 8009aec:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8009af0:	fb93 f2f5 	sdiv	r2, r3, r5
 8009af4:	fb05 3312 	mls	r3, r5, r2, r3
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	bf14      	ite	ne
 8009afc:	231c      	movne	r3, #28
 8009afe:	231d      	moveq	r3, #29
 8009b00:	e7d8      	b.n	8009ab4 <validate_structure+0xec>
 8009b02:	231c      	movs	r3, #28
 8009b04:	e7cc      	b.n	8009aa0 <validate_structure+0xd8>
 8009b06:	231d      	movs	r3, #29
 8009b08:	e7ca      	b.n	8009aa0 <validate_structure+0xd8>
 8009b0a:	4f1e      	ldr	r7, [pc, #120]	; (8009b84 <validate_structure+0x1bc>)
 8009b0c:	260b      	movs	r6, #11
 8009b0e:	2064      	movs	r0, #100	; 0x64
 8009b10:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8009b14:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8009b18:	f1be 0f00 	cmp.w	lr, #0
 8009b1c:	dd01      	ble.n	8009b22 <validate_structure+0x15a>
 8009b1e:	b003      	add	sp, #12
 8009b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b22:	6921      	ldr	r1, [r4, #16]
 8009b24:	3901      	subs	r1, #1
 8009b26:	6121      	str	r1, [r4, #16]
 8009b28:	3101      	adds	r1, #1
 8009b2a:	d114      	bne.n	8009b56 <validate_structure+0x18e>
 8009b2c:	6963      	ldr	r3, [r4, #20]
 8009b2e:	6126      	str	r6, [r4, #16]
 8009b30:	1e59      	subs	r1, r3, #1
 8009b32:	078a      	lsls	r2, r1, #30
 8009b34:	6161      	str	r1, [r4, #20]
 8009b36:	d117      	bne.n	8009b68 <validate_structure+0x1a0>
 8009b38:	fb91 f2f0 	sdiv	r2, r1, r0
 8009b3c:	fb00 1112 	mls	r1, r0, r2, r1
 8009b40:	b9a1      	cbnz	r1, 8009b6c <validate_structure+0x1a4>
 8009b42:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8009b46:	fb93 f2f5 	sdiv	r2, r3, r5
 8009b4a:	fb05 3312 	mls	r3, r5, r2, r3
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	bf14      	ite	ne
 8009b52:	231c      	movne	r3, #28
 8009b54:	231d      	moveq	r3, #29
 8009b56:	6922      	ldr	r2, [r4, #16]
 8009b58:	2a01      	cmp	r2, #1
 8009b5a:	bf14      	ite	ne
 8009b5c:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8009b60:	461a      	moveq	r2, r3
 8009b62:	4472      	add	r2, lr
 8009b64:	60e2      	str	r2, [r4, #12]
 8009b66:	e7d5      	b.n	8009b14 <validate_structure+0x14c>
 8009b68:	231c      	movs	r3, #28
 8009b6a:	e7f4      	b.n	8009b56 <validate_structure+0x18e>
 8009b6c:	231d      	movs	r3, #29
 8009b6e:	e7f2      	b.n	8009b56 <validate_structure+0x18e>
 8009b70:	231c      	movs	r3, #28
 8009b72:	e79f      	b.n	8009ab4 <validate_structure+0xec>
 8009b74:	231d      	movs	r3, #29
 8009b76:	e79d      	b.n	8009ab4 <validate_structure+0xec>
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	dad0      	bge.n	8009b1e <validate_structure+0x156>
 8009b7c:	1ad2      	subs	r2, r2, r3
 8009b7e:	60e2      	str	r2, [r4, #12]
 8009b80:	6126      	str	r6, [r4, #16]
 8009b82:	e797      	b.n	8009ab4 <validate_structure+0xec>
 8009b84:	0800badc 	.word	0x0800badc

08009b88 <mktime>:
 8009b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b8c:	4681      	mov	r9, r0
 8009b8e:	f000 fd23 	bl	800a5d8 <__gettzinfo>
 8009b92:	4680      	mov	r8, r0
 8009b94:	4648      	mov	r0, r9
 8009b96:	f7ff ff17 	bl	80099c8 <validate_structure>
 8009b9a:	e899 0081 	ldmia.w	r9, {r0, r7}
 8009b9e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ba2:	4ab4      	ldr	r2, [pc, #720]	; (8009e74 <mktime+0x2ec>)
 8009ba4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8009ba8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009bac:	253c      	movs	r5, #60	; 0x3c
 8009bae:	fb05 0707 	mla	r7, r5, r7, r0
 8009bb2:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8009bb6:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 8009bba:	3c01      	subs	r4, #1
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	fb05 7000 	mla	r0, r5, r0, r7
 8009bc2:	4414      	add	r4, r2
 8009bc4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009bc8:	dd11      	ble.n	8009bee <mktime+0x66>
 8009bca:	0799      	lsls	r1, r3, #30
 8009bcc:	d10f      	bne.n	8009bee <mktime+0x66>
 8009bce:	2164      	movs	r1, #100	; 0x64
 8009bd0:	fb93 f2f1 	sdiv	r2, r3, r1
 8009bd4:	fb01 3212 	mls	r2, r1, r2, r3
 8009bd8:	b942      	cbnz	r2, 8009bec <mktime+0x64>
 8009bda:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8009bde:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009be2:	fb95 f2f1 	sdiv	r2, r5, r1
 8009be6:	fb01 5212 	mls	r2, r1, r2, r5
 8009bea:	b902      	cbnz	r2, 8009bee <mktime+0x66>
 8009bec:	3401      	adds	r4, #1
 8009bee:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 8009bf2:	3210      	adds	r2, #16
 8009bf4:	f644 6120 	movw	r1, #20000	; 0x4e20
 8009bf8:	428a      	cmp	r2, r1
 8009bfa:	f8c9 401c 	str.w	r4, [r9, #28]
 8009bfe:	f200 812d 	bhi.w	8009e5c <mktime+0x2d4>
 8009c02:	2b46      	cmp	r3, #70	; 0x46
 8009c04:	dd70      	ble.n	8009ce8 <mktime+0x160>
 8009c06:	2546      	movs	r5, #70	; 0x46
 8009c08:	f240 176d 	movw	r7, #365	; 0x16d
 8009c0c:	2164      	movs	r1, #100	; 0x64
 8009c0e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8009c12:	07aa      	lsls	r2, r5, #30
 8009c14:	d162      	bne.n	8009cdc <mktime+0x154>
 8009c16:	fb95 f2f1 	sdiv	r2, r5, r1
 8009c1a:	fb01 5212 	mls	r2, r1, r2, r5
 8009c1e:	2a00      	cmp	r2, #0
 8009c20:	d15f      	bne.n	8009ce2 <mktime+0x15a>
 8009c22:	f205 7e6c 	addw	lr, r5, #1900	; 0x76c
 8009c26:	fb9e f2f6 	sdiv	r2, lr, r6
 8009c2a:	fb06 e212 	mls	r2, r6, r2, lr
 8009c2e:	2a00      	cmp	r2, #0
 8009c30:	bf14      	ite	ne
 8009c32:	463a      	movne	r2, r7
 8009c34:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009c38:	3501      	adds	r5, #1
 8009c3a:	42ab      	cmp	r3, r5
 8009c3c:	4414      	add	r4, r2
 8009c3e:	d1e8      	bne.n	8009c12 <mktime+0x8a>
 8009c40:	4f8d      	ldr	r7, [pc, #564]	; (8009e78 <mktime+0x2f0>)
 8009c42:	fb07 0704 	mla	r7, r7, r4, r0
 8009c46:	f000 fad3 	bl	800a1f0 <__tz_lock>
 8009c4a:	f000 fad3 	bl	800a1f4 <_tzset_unlocked>
 8009c4e:	4b8b      	ldr	r3, [pc, #556]	; (8009e7c <mktime+0x2f4>)
 8009c50:	681e      	ldr	r6, [r3, #0]
 8009c52:	2e00      	cmp	r6, #0
 8009c54:	f000 810a 	beq.w	8009e6c <mktime+0x2e4>
 8009c58:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8009c5c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	bfa8      	it	ge
 8009c64:	2301      	movge	r3, #1
 8009c66:	469a      	mov	sl, r3
 8009c68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009c6c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009c70:	4298      	cmp	r0, r3
 8009c72:	d17c      	bne.n	8009d6e <mktime+0x1e6>
 8009c74:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 8009c78:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8009c7c:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 8009c80:	f8d8 101c 	ldr.w	r1, [r8, #28]
 8009c84:	1ad6      	subs	r6, r2, r3
 8009c86:	42b7      	cmp	r7, r6
 8009c88:	eba1 0100 	sub.w	r1, r1, r0
 8009c8c:	da76      	bge.n	8009d7c <mktime+0x1f4>
 8009c8e:	f8d8 2000 	ldr.w	r2, [r8]
 8009c92:	2a00      	cmp	r2, #0
 8009c94:	d076      	beq.n	8009d84 <mktime+0x1fc>
 8009c96:	428f      	cmp	r7, r1
 8009c98:	f2c0 80e3 	blt.w	8009e62 <mktime+0x2da>
 8009c9c:	42b7      	cmp	r7, r6
 8009c9e:	bfac      	ite	ge
 8009ca0:	2600      	movge	r6, #0
 8009ca2:	2601      	movlt	r6, #1
 8009ca4:	f1ba 0f00 	cmp.w	sl, #0
 8009ca8:	da72      	bge.n	8009d90 <mktime+0x208>
 8009caa:	2e01      	cmp	r6, #1
 8009cac:	f040 80de 	bne.w	8009e6c <mktime+0x2e4>
 8009cb0:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 8009cb4:	2601      	movs	r6, #1
 8009cb6:	443d      	add	r5, r7
 8009cb8:	f000 fa9b 	bl	800a1f2 <__tz_unlock>
 8009cbc:	3404      	adds	r4, #4
 8009cbe:	2307      	movs	r3, #7
 8009cc0:	fb94 f3f3 	sdiv	r3, r4, r3
 8009cc4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009cc8:	1ae4      	subs	r4, r4, r3
 8009cca:	bf48      	it	mi
 8009ccc:	3407      	addmi	r4, #7
 8009cce:	f8c9 6020 	str.w	r6, [r9, #32]
 8009cd2:	f8c9 4018 	str.w	r4, [r9, #24]
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cdc:	f240 126d 	movw	r2, #365	; 0x16d
 8009ce0:	e7aa      	b.n	8009c38 <mktime+0xb0>
 8009ce2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009ce6:	e7a7      	b.n	8009c38 <mktime+0xb0>
 8009ce8:	d01e      	beq.n	8009d28 <mktime+0x1a0>
 8009cea:	2245      	movs	r2, #69	; 0x45
 8009cec:	f240 176d 	movw	r7, #365	; 0x16d
 8009cf0:	2564      	movs	r5, #100	; 0x64
 8009cf2:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	dc18      	bgt.n	8009d2c <mktime+0x1a4>
 8009cfa:	079d      	lsls	r5, r3, #30
 8009cfc:	d131      	bne.n	8009d62 <mktime+0x1da>
 8009cfe:	2164      	movs	r1, #100	; 0x64
 8009d00:	fb93 f2f1 	sdiv	r2, r3, r1
 8009d04:	fb01 3212 	mls	r2, r1, r2, r3
 8009d08:	bb72      	cbnz	r2, 8009d68 <mktime+0x1e0>
 8009d0a:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8009d0e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009d12:	fb95 f2f1 	sdiv	r2, r5, r1
 8009d16:	fb01 5212 	mls	r2, r1, r2, r5
 8009d1a:	2a00      	cmp	r2, #0
 8009d1c:	f240 126d 	movw	r2, #365	; 0x16d
 8009d20:	bf08      	it	eq
 8009d22:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009d26:	1aa4      	subs	r4, r4, r2
 8009d28:	461d      	mov	r5, r3
 8009d2a:	e789      	b.n	8009c40 <mktime+0xb8>
 8009d2c:	0791      	lsls	r1, r2, #30
 8009d2e:	d112      	bne.n	8009d56 <mktime+0x1ce>
 8009d30:	fb92 f1f5 	sdiv	r1, r2, r5
 8009d34:	fb05 2111 	mls	r1, r5, r1, r2
 8009d38:	b981      	cbnz	r1, 8009d5c <mktime+0x1d4>
 8009d3a:	f202 7e6c 	addw	lr, r2, #1900	; 0x76c
 8009d3e:	fb9e f1f6 	sdiv	r1, lr, r6
 8009d42:	fb06 e111 	mls	r1, r6, r1, lr
 8009d46:	2900      	cmp	r1, #0
 8009d48:	bf14      	ite	ne
 8009d4a:	4639      	movne	r1, r7
 8009d4c:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
 8009d50:	1a64      	subs	r4, r4, r1
 8009d52:	3a01      	subs	r2, #1
 8009d54:	e7cf      	b.n	8009cf6 <mktime+0x16e>
 8009d56:	f240 116d 	movw	r1, #365	; 0x16d
 8009d5a:	e7f9      	b.n	8009d50 <mktime+0x1c8>
 8009d5c:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8009d60:	e7f6      	b.n	8009d50 <mktime+0x1c8>
 8009d62:	f240 126d 	movw	r2, #365	; 0x16d
 8009d66:	e7de      	b.n	8009d26 <mktime+0x19e>
 8009d68:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009d6c:	e7db      	b.n	8009d26 <mktime+0x19e>
 8009d6e:	f000 f997 	bl	800a0a0 <__tzcalc_limits>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	f47f af7e 	bne.w	8009c74 <mktime+0xec>
 8009d78:	4656      	mov	r6, sl
 8009d7a:	e796      	b.n	8009caa <mktime+0x122>
 8009d7c:	1a12      	subs	r2, r2, r0
 8009d7e:	4297      	cmp	r7, r2
 8009d80:	dbfa      	blt.n	8009d78 <mktime+0x1f0>
 8009d82:	e784      	b.n	8009c8e <mktime+0x106>
 8009d84:	428f      	cmp	r7, r1
 8009d86:	db89      	blt.n	8009c9c <mktime+0x114>
 8009d88:	f1ba 0f00 	cmp.w	sl, #0
 8009d8c:	db90      	blt.n	8009cb0 <mktime+0x128>
 8009d8e:	2601      	movs	r6, #1
 8009d90:	ea8a 0a06 	eor.w	sl, sl, r6
 8009d94:	f1ba 0f01 	cmp.w	sl, #1
 8009d98:	d187      	bne.n	8009caa <mktime+0x122>
 8009d9a:	1a1b      	subs	r3, r3, r0
 8009d9c:	b906      	cbnz	r6, 8009da0 <mktime+0x218>
 8009d9e:	425b      	negs	r3, r3
 8009da0:	f8d9 2000 	ldr.w	r2, [r9]
 8009da4:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8009da8:	441a      	add	r2, r3
 8009daa:	f8c9 2000 	str.w	r2, [r9]
 8009dae:	4648      	mov	r0, r9
 8009db0:	441f      	add	r7, r3
 8009db2:	f7ff fe09 	bl	80099c8 <validate_structure>
 8009db6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009dba:	ebb3 030a 	subs.w	r3, r3, sl
 8009dbe:	f43f af74 	beq.w	8009caa <mktime+0x122>
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	dc21      	bgt.n	8009e0a <mktime+0x282>
 8009dc6:	1c98      	adds	r0, r3, #2
 8009dc8:	bfd8      	it	le
 8009dca:	2301      	movle	r3, #1
 8009dcc:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009dd0:	441c      	add	r4, r3
 8009dd2:	189b      	adds	r3, r3, r2
 8009dd4:	d522      	bpl.n	8009e1c <mktime+0x294>
 8009dd6:	1e6a      	subs	r2, r5, #1
 8009dd8:	0791      	lsls	r1, r2, #30
 8009dda:	d119      	bne.n	8009e10 <mktime+0x288>
 8009ddc:	2164      	movs	r1, #100	; 0x64
 8009dde:	fb92 f3f1 	sdiv	r3, r2, r1
 8009de2:	fb01 2313 	mls	r3, r1, r3, r2
 8009de6:	b9b3      	cbnz	r3, 8009e16 <mktime+0x28e>
 8009de8:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 8009dec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009df0:	fb95 f3f2 	sdiv	r3, r5, r2
 8009df4:	fb02 5513 	mls	r5, r2, r3, r5
 8009df8:	2d00      	cmp	r5, #0
 8009dfa:	f240 136d 	movw	r3, #365	; 0x16d
 8009dfe:	bf18      	it	ne
 8009e00:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8009e04:	f8c9 301c 	str.w	r3, [r9, #28]
 8009e08:	e74f      	b.n	8009caa <mktime+0x122>
 8009e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0e:	e7dd      	b.n	8009dcc <mktime+0x244>
 8009e10:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8009e14:	e7f6      	b.n	8009e04 <mktime+0x27c>
 8009e16:	f240 136d 	movw	r3, #365	; 0x16d
 8009e1a:	e7f3      	b.n	8009e04 <mktime+0x27c>
 8009e1c:	07aa      	lsls	r2, r5, #30
 8009e1e:	d117      	bne.n	8009e50 <mktime+0x2c8>
 8009e20:	2164      	movs	r1, #100	; 0x64
 8009e22:	fb95 f2f1 	sdiv	r2, r5, r1
 8009e26:	fb01 5212 	mls	r2, r1, r2, r5
 8009e2a:	b9a2      	cbnz	r2, 8009e56 <mktime+0x2ce>
 8009e2c:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8009e30:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009e34:	fb95 f2f1 	sdiv	r2, r5, r1
 8009e38:	fb01 5512 	mls	r5, r1, r2, r5
 8009e3c:	2d00      	cmp	r5, #0
 8009e3e:	f240 126d 	movw	r2, #365	; 0x16d
 8009e42:	bf08      	it	eq
 8009e44:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	bfd8      	it	le
 8009e4c:	1a9b      	suble	r3, r3, r2
 8009e4e:	e7d9      	b.n	8009e04 <mktime+0x27c>
 8009e50:	f240 126d 	movw	r2, #365	; 0x16d
 8009e54:	e7f8      	b.n	8009e48 <mktime+0x2c0>
 8009e56:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009e5a:	e7f5      	b.n	8009e48 <mktime+0x2c0>
 8009e5c:	f04f 35ff 	mov.w	r5, #4294967295
 8009e60:	e739      	b.n	8009cd6 <mktime+0x14e>
 8009e62:	f1ba 0f00 	cmp.w	sl, #0
 8009e66:	f04f 0600 	mov.w	r6, #0
 8009e6a:	da91      	bge.n	8009d90 <mktime+0x208>
 8009e6c:	f8d8 5020 	ldr.w	r5, [r8, #32]
 8009e70:	443d      	add	r5, r7
 8009e72:	e721      	b.n	8009cb8 <mktime+0x130>
 8009e74:	0800bb0c 	.word	0x0800bb0c
 8009e78:	00015180 	.word	0x00015180
 8009e7c:	20008b94 	.word	0x20008b94

08009e80 <siprintf>:
 8009e80:	b40e      	push	{r1, r2, r3}
 8009e82:	b500      	push	{lr}
 8009e84:	b09c      	sub	sp, #112	; 0x70
 8009e86:	f44f 7102 	mov.w	r1, #520	; 0x208
 8009e8a:	ab1d      	add	r3, sp, #116	; 0x74
 8009e8c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009e90:	9002      	str	r0, [sp, #8]
 8009e92:	9006      	str	r0, [sp, #24]
 8009e94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e98:	480a      	ldr	r0, [pc, #40]	; (8009ec4 <siprintf+0x44>)
 8009e9a:	9104      	str	r1, [sp, #16]
 8009e9c:	9107      	str	r1, [sp, #28]
 8009e9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8009eaa:	6800      	ldr	r0, [r0, #0]
 8009eac:	9301      	str	r3, [sp, #4]
 8009eae:	a902      	add	r1, sp, #8
 8009eb0:	f000 fd40 	bl	800a934 <_svfiprintf_r>
 8009eb4:	9b02      	ldr	r3, [sp, #8]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	701a      	strb	r2, [r3, #0]
 8009eba:	b01c      	add	sp, #112	; 0x70
 8009ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ec0:	b003      	add	sp, #12
 8009ec2:	4770      	bx	lr
 8009ec4:	20000010 	.word	0x20000010

08009ec8 <strchr>:
 8009ec8:	b2c9      	uxtb	r1, r1
 8009eca:	4603      	mov	r3, r0
 8009ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ed0:	b11a      	cbz	r2, 8009eda <strchr+0x12>
 8009ed2:	4291      	cmp	r1, r2
 8009ed4:	d1f9      	bne.n	8009eca <strchr+0x2>
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	4770      	bx	lr
 8009eda:	2900      	cmp	r1, #0
 8009edc:	bf0c      	ite	eq
 8009ede:	4618      	moveq	r0, r3
 8009ee0:	2000      	movne	r0, #0
 8009ee2:	4770      	bx	lr

08009ee4 <strcpy>:
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009eea:	f803 2b01 	strb.w	r2, [r3], #1
 8009eee:	2a00      	cmp	r2, #0
 8009ef0:	d1f9      	bne.n	8009ee6 <strcpy+0x2>
 8009ef2:	4770      	bx	lr

08009ef4 <strncmp>:
 8009ef4:	b510      	push	{r4, lr}
 8009ef6:	b16a      	cbz	r2, 8009f14 <strncmp+0x20>
 8009ef8:	3901      	subs	r1, #1
 8009efa:	1884      	adds	r4, r0, r2
 8009efc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009f00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d103      	bne.n	8009f10 <strncmp+0x1c>
 8009f08:	42a0      	cmp	r0, r4
 8009f0a:	d001      	beq.n	8009f10 <strncmp+0x1c>
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1f5      	bne.n	8009efc <strncmp+0x8>
 8009f10:	1a98      	subs	r0, r3, r2
 8009f12:	bd10      	pop	{r4, pc}
 8009f14:	4610      	mov	r0, r2
 8009f16:	bd10      	pop	{r4, pc}

08009f18 <strstr>:
 8009f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f1a:	7803      	ldrb	r3, [r0, #0]
 8009f1c:	b133      	cbz	r3, 8009f2c <strstr+0x14>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	4618      	mov	r0, r3
 8009f22:	1c5e      	adds	r6, r3, #1
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	b933      	cbnz	r3, 8009f36 <strstr+0x1e>
 8009f28:	4618      	mov	r0, r3
 8009f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f2c:	780b      	ldrb	r3, [r1, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	bf18      	it	ne
 8009f32:	2000      	movne	r0, #0
 8009f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f36:	1e4d      	subs	r5, r1, #1
 8009f38:	1e44      	subs	r4, r0, #1
 8009f3a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8009f3e:	2a00      	cmp	r2, #0
 8009f40:	d0f3      	beq.n	8009f2a <strstr+0x12>
 8009f42:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8009f46:	4297      	cmp	r7, r2
 8009f48:	4633      	mov	r3, r6
 8009f4a:	d0f6      	beq.n	8009f3a <strstr+0x22>
 8009f4c:	e7e8      	b.n	8009f20 <strstr+0x8>

08009f4e <_strtol_l.isra.0>:
 8009f4e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f52:	4680      	mov	r8, r0
 8009f54:	4689      	mov	r9, r1
 8009f56:	4692      	mov	sl, r2
 8009f58:	461f      	mov	r7, r3
 8009f5a:	468b      	mov	fp, r1
 8009f5c:	465d      	mov	r5, fp
 8009f5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f64:	f7ff fcea 	bl	800993c <__locale_ctype_ptr_l>
 8009f68:	4420      	add	r0, r4
 8009f6a:	7846      	ldrb	r6, [r0, #1]
 8009f6c:	f016 0608 	ands.w	r6, r6, #8
 8009f70:	d10b      	bne.n	8009f8a <_strtol_l.isra.0+0x3c>
 8009f72:	2c2d      	cmp	r4, #45	; 0x2d
 8009f74:	d10b      	bne.n	8009f8e <_strtol_l.isra.0+0x40>
 8009f76:	782c      	ldrb	r4, [r5, #0]
 8009f78:	2601      	movs	r6, #1
 8009f7a:	f10b 0502 	add.w	r5, fp, #2
 8009f7e:	b167      	cbz	r7, 8009f9a <_strtol_l.isra.0+0x4c>
 8009f80:	2f10      	cmp	r7, #16
 8009f82:	d114      	bne.n	8009fae <_strtol_l.isra.0+0x60>
 8009f84:	2c30      	cmp	r4, #48	; 0x30
 8009f86:	d00a      	beq.n	8009f9e <_strtol_l.isra.0+0x50>
 8009f88:	e011      	b.n	8009fae <_strtol_l.isra.0+0x60>
 8009f8a:	46ab      	mov	fp, r5
 8009f8c:	e7e6      	b.n	8009f5c <_strtol_l.isra.0+0xe>
 8009f8e:	2c2b      	cmp	r4, #43	; 0x2b
 8009f90:	bf04      	itt	eq
 8009f92:	782c      	ldrbeq	r4, [r5, #0]
 8009f94:	f10b 0502 	addeq.w	r5, fp, #2
 8009f98:	e7f1      	b.n	8009f7e <_strtol_l.isra.0+0x30>
 8009f9a:	2c30      	cmp	r4, #48	; 0x30
 8009f9c:	d127      	bne.n	8009fee <_strtol_l.isra.0+0xa0>
 8009f9e:	782b      	ldrb	r3, [r5, #0]
 8009fa0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009fa4:	2b58      	cmp	r3, #88	; 0x58
 8009fa6:	d14b      	bne.n	800a040 <_strtol_l.isra.0+0xf2>
 8009fa8:	786c      	ldrb	r4, [r5, #1]
 8009faa:	2710      	movs	r7, #16
 8009fac:	3502      	adds	r5, #2
 8009fae:	2e00      	cmp	r6, #0
 8009fb0:	bf0c      	ite	eq
 8009fb2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009fb6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009fba:	2200      	movs	r2, #0
 8009fbc:	fbb1 fef7 	udiv	lr, r1, r7
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	fb07 1c1e 	mls	ip, r7, lr, r1
 8009fc6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009fca:	2b09      	cmp	r3, #9
 8009fcc:	d811      	bhi.n	8009ff2 <_strtol_l.isra.0+0xa4>
 8009fce:	461c      	mov	r4, r3
 8009fd0:	42a7      	cmp	r7, r4
 8009fd2:	dd1d      	ble.n	800a010 <_strtol_l.isra.0+0xc2>
 8009fd4:	1c53      	adds	r3, r2, #1
 8009fd6:	d007      	beq.n	8009fe8 <_strtol_l.isra.0+0x9a>
 8009fd8:	4586      	cmp	lr, r0
 8009fda:	d316      	bcc.n	800a00a <_strtol_l.isra.0+0xbc>
 8009fdc:	d101      	bne.n	8009fe2 <_strtol_l.isra.0+0x94>
 8009fde:	45a4      	cmp	ip, r4
 8009fe0:	db13      	blt.n	800a00a <_strtol_l.isra.0+0xbc>
 8009fe2:	fb00 4007 	mla	r0, r0, r7, r4
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fec:	e7eb      	b.n	8009fc6 <_strtol_l.isra.0+0x78>
 8009fee:	270a      	movs	r7, #10
 8009ff0:	e7dd      	b.n	8009fae <_strtol_l.isra.0+0x60>
 8009ff2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009ff6:	2b19      	cmp	r3, #25
 8009ff8:	d801      	bhi.n	8009ffe <_strtol_l.isra.0+0xb0>
 8009ffa:	3c37      	subs	r4, #55	; 0x37
 8009ffc:	e7e8      	b.n	8009fd0 <_strtol_l.isra.0+0x82>
 8009ffe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a002:	2b19      	cmp	r3, #25
 800a004:	d804      	bhi.n	800a010 <_strtol_l.isra.0+0xc2>
 800a006:	3c57      	subs	r4, #87	; 0x57
 800a008:	e7e2      	b.n	8009fd0 <_strtol_l.isra.0+0x82>
 800a00a:	f04f 32ff 	mov.w	r2, #4294967295
 800a00e:	e7eb      	b.n	8009fe8 <_strtol_l.isra.0+0x9a>
 800a010:	1c53      	adds	r3, r2, #1
 800a012:	d108      	bne.n	800a026 <_strtol_l.isra.0+0xd8>
 800a014:	2322      	movs	r3, #34	; 0x22
 800a016:	f8c8 3000 	str.w	r3, [r8]
 800a01a:	4608      	mov	r0, r1
 800a01c:	f1ba 0f00 	cmp.w	sl, #0
 800a020:	d107      	bne.n	800a032 <_strtol_l.isra.0+0xe4>
 800a022:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a026:	b106      	cbz	r6, 800a02a <_strtol_l.isra.0+0xdc>
 800a028:	4240      	negs	r0, r0
 800a02a:	f1ba 0f00 	cmp.w	sl, #0
 800a02e:	d00c      	beq.n	800a04a <_strtol_l.isra.0+0xfc>
 800a030:	b122      	cbz	r2, 800a03c <_strtol_l.isra.0+0xee>
 800a032:	3d01      	subs	r5, #1
 800a034:	f8ca 5000 	str.w	r5, [sl]
 800a038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a03c:	464d      	mov	r5, r9
 800a03e:	e7f9      	b.n	800a034 <_strtol_l.isra.0+0xe6>
 800a040:	2430      	movs	r4, #48	; 0x30
 800a042:	2f00      	cmp	r7, #0
 800a044:	d1b3      	bne.n	8009fae <_strtol_l.isra.0+0x60>
 800a046:	2708      	movs	r7, #8
 800a048:	e7b1      	b.n	8009fae <_strtol_l.isra.0+0x60>
 800a04a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a050 <_strtol_r>:
 800a050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a052:	4c06      	ldr	r4, [pc, #24]	; (800a06c <_strtol_r+0x1c>)
 800a054:	4d06      	ldr	r5, [pc, #24]	; (800a070 <_strtol_r+0x20>)
 800a056:	6824      	ldr	r4, [r4, #0]
 800a058:	6a24      	ldr	r4, [r4, #32]
 800a05a:	2c00      	cmp	r4, #0
 800a05c:	bf08      	it	eq
 800a05e:	462c      	moveq	r4, r5
 800a060:	9400      	str	r4, [sp, #0]
 800a062:	f7ff ff74 	bl	8009f4e <_strtol_l.isra.0>
 800a066:	b003      	add	sp, #12
 800a068:	bd30      	pop	{r4, r5, pc}
 800a06a:	bf00      	nop
 800a06c:	20000010 	.word	0x20000010
 800a070:	20000074 	.word	0x20000074

0800a074 <strtol>:
 800a074:	4b08      	ldr	r3, [pc, #32]	; (800a098 <strtol+0x24>)
 800a076:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a078:	681c      	ldr	r4, [r3, #0]
 800a07a:	4d08      	ldr	r5, [pc, #32]	; (800a09c <strtol+0x28>)
 800a07c:	6a23      	ldr	r3, [r4, #32]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	bf08      	it	eq
 800a082:	462b      	moveq	r3, r5
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	4613      	mov	r3, r2
 800a088:	460a      	mov	r2, r1
 800a08a:	4601      	mov	r1, r0
 800a08c:	4620      	mov	r0, r4
 800a08e:	f7ff ff5e 	bl	8009f4e <_strtol_l.isra.0>
 800a092:	b003      	add	sp, #12
 800a094:	bd30      	pop	{r4, r5, pc}
 800a096:	bf00      	nop
 800a098:	20000010 	.word	0x20000010
 800a09c:	20000074 	.word	0x20000074

0800a0a0 <__tzcalc_limits>:
 800a0a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	f000 fa97 	bl	800a5d8 <__gettzinfo>
 800a0aa:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800a0ae:	429c      	cmp	r4, r3
 800a0b0:	f340 8098 	ble.w	800a1e4 <__tzcalc_limits+0x144>
 800a0b4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800a0b8:	18e3      	adds	r3, r4, r3
 800a0ba:	109b      	asrs	r3, r3, #2
 800a0bc:	f240 126d 	movw	r2, #365	; 0x16d
 800a0c0:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 800a0c4:	fb02 3505 	mla	r5, r2, r5, r3
 800a0c8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800a0cc:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 800a0d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0d4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800a0d8:	441d      	add	r5, r3
 800a0da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a0de:	18a2      	adds	r2, r4, r2
 800a0e0:	fb94 f7f3 	sdiv	r7, r4, r3
 800a0e4:	fb92 f2f3 	sdiv	r2, r2, r3
 800a0e8:	fb03 4717 	mls	r7, r3, r7, r4
 800a0ec:	f100 0338 	add.w	r3, r0, #56	; 0x38
 800a0f0:	4415      	add	r5, r2
 800a0f2:	fab7 fe87 	clz	lr, r7
 800a0f6:	2264      	movs	r2, #100	; 0x64
 800a0f8:	9301      	str	r3, [sp, #4]
 800a0fa:	f004 0303 	and.w	r3, r4, #3
 800a0fe:	fb94 f6f2 	sdiv	r6, r4, r2
 800a102:	6044      	str	r4, [r0, #4]
 800a104:	fb02 4616 	mls	r6, r2, r6, r4
 800a108:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800a10c:	4601      	mov	r1, r0
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 800a114:	7a0b      	ldrb	r3, [r1, #8]
 800a116:	2b4a      	cmp	r3, #74	; 0x4a
 800a118:	d123      	bne.n	800a162 <__tzcalc_limits+0xc2>
 800a11a:	694c      	ldr	r4, [r1, #20]
 800a11c:	9a00      	ldr	r2, [sp, #0]
 800a11e:	192b      	adds	r3, r5, r4
 800a120:	b902      	cbnz	r2, 800a124 <__tzcalc_limits+0x84>
 800a122:	b906      	cbnz	r6, 800a126 <__tzcalc_limits+0x86>
 800a124:	b9df      	cbnz	r7, 800a15e <__tzcalc_limits+0xbe>
 800a126:	2c3b      	cmp	r4, #59	; 0x3b
 800a128:	bfd4      	ite	le
 800a12a:	2400      	movle	r4, #0
 800a12c:	2401      	movgt	r4, #1
 800a12e:	441c      	add	r4, r3
 800a130:	3c01      	subs	r4, #1
 800a132:	4b2d      	ldr	r3, [pc, #180]	; (800a1e8 <__tzcalc_limits+0x148>)
 800a134:	698a      	ldr	r2, [r1, #24]
 800a136:	fb03 2404 	mla	r4, r3, r4, r2
 800a13a:	6a0b      	ldr	r3, [r1, #32]
 800a13c:	441c      	add	r4, r3
 800a13e:	f841 4f1c 	str.w	r4, [r1, #28]!
 800a142:	9b01      	ldr	r3, [sp, #4]
 800a144:	428b      	cmp	r3, r1
 800a146:	d1e5      	bne.n	800a114 <__tzcalc_limits+0x74>
 800a148:	69c3      	ldr	r3, [r0, #28]
 800a14a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800a14c:	4293      	cmp	r3, r2
 800a14e:	bfac      	ite	ge
 800a150:	2300      	movge	r3, #0
 800a152:	2301      	movlt	r3, #1
 800a154:	6003      	str	r3, [r0, #0]
 800a156:	2001      	movs	r0, #1
 800a158:	b003      	add	sp, #12
 800a15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15e:	2400      	movs	r4, #0
 800a160:	e7e5      	b.n	800a12e <__tzcalc_limits+0x8e>
 800a162:	2b44      	cmp	r3, #68	; 0x44
 800a164:	d102      	bne.n	800a16c <__tzcalc_limits+0xcc>
 800a166:	694b      	ldr	r3, [r1, #20]
 800a168:	18ec      	adds	r4, r5, r3
 800a16a:	e7e2      	b.n	800a132 <__tzcalc_limits+0x92>
 800a16c:	9b00      	ldr	r3, [sp, #0]
 800a16e:	bb7b      	cbnz	r3, 800a1d0 <__tzcalc_limits+0x130>
 800a170:	2e00      	cmp	r6, #0
 800a172:	bf0c      	ite	eq
 800a174:	46f0      	moveq	r8, lr
 800a176:	f04f 0801 	movne.w	r8, #1
 800a17a:	4b1c      	ldr	r3, [pc, #112]	; (800a1ec <__tzcalc_limits+0x14c>)
 800a17c:	68cc      	ldr	r4, [r1, #12]
 800a17e:	2230      	movs	r2, #48	; 0x30
 800a180:	fb02 3808 	mla	r8, r2, r8, r3
 800a184:	f1a8 0a04 	sub.w	sl, r8, #4
 800a188:	462b      	mov	r3, r5
 800a18a:	f04f 0901 	mov.w	r9, #1
 800a18e:	45a1      	cmp	r9, r4
 800a190:	db20      	blt.n	800a1d4 <__tzcalc_limits+0x134>
 800a192:	2c01      	cmp	r4, #1
 800a194:	bfb8      	it	lt
 800a196:	2401      	movlt	r4, #1
 800a198:	46a1      	mov	r9, r4
 800a19a:	f103 0b04 	add.w	fp, r3, #4
 800a19e:	2207      	movs	r2, #7
 800a1a0:	694c      	ldr	r4, [r1, #20]
 800a1a2:	fb9b faf2 	sdiv	sl, fp, r2
 800a1a6:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800a1aa:	ebab 0a0a 	sub.w	sl, fp, sl
 800a1ae:	ebb4 0a0a 	subs.w	sl, r4, sl
 800a1b2:	690c      	ldr	r4, [r1, #16]
 800a1b4:	44e1      	add	r9, ip
 800a1b6:	f104 34ff 	add.w	r4, r4, #4294967295
 800a1ba:	bf48      	it	mi
 800a1bc:	4492      	addmi	sl, r2
 800a1be:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800a1c2:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 800a1c6:	4454      	add	r4, sl
 800a1c8:	4544      	cmp	r4, r8
 800a1ca:	da09      	bge.n	800a1e0 <__tzcalc_limits+0x140>
 800a1cc:	441c      	add	r4, r3
 800a1ce:	e7b0      	b.n	800a132 <__tzcalc_limits+0x92>
 800a1d0:	46f0      	mov	r8, lr
 800a1d2:	e7d2      	b.n	800a17a <__tzcalc_limits+0xda>
 800a1d4:	f85a bf04 	ldr.w	fp, [sl, #4]!
 800a1d8:	f109 0901 	add.w	r9, r9, #1
 800a1dc:	445b      	add	r3, fp
 800a1de:	e7d6      	b.n	800a18e <__tzcalc_limits+0xee>
 800a1e0:	3c07      	subs	r4, #7
 800a1e2:	e7f1      	b.n	800a1c8 <__tzcalc_limits+0x128>
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	e7b7      	b.n	800a158 <__tzcalc_limits+0xb8>
 800a1e8:	00015180 	.word	0x00015180
 800a1ec:	0800bb3c 	.word	0x0800bb3c

0800a1f0 <__tz_lock>:
 800a1f0:	4770      	bx	lr

0800a1f2 <__tz_unlock>:
 800a1f2:	4770      	bx	lr

0800a1f4 <_tzset_unlocked>:
 800a1f4:	4b01      	ldr	r3, [pc, #4]	; (800a1fc <_tzset_unlocked+0x8>)
 800a1f6:	6818      	ldr	r0, [r3, #0]
 800a1f8:	f000 b802 	b.w	800a200 <_tzset_unlocked_r>
 800a1fc:	20000010 	.word	0x20000010

0800a200 <_tzset_unlocked_r>:
 800a200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a204:	b08d      	sub	sp, #52	; 0x34
 800a206:	4607      	mov	r7, r0
 800a208:	f000 f9e6 	bl	800a5d8 <__gettzinfo>
 800a20c:	49b1      	ldr	r1, [pc, #708]	; (800a4d4 <_tzset_unlocked_r+0x2d4>)
 800a20e:	4eb2      	ldr	r6, [pc, #712]	; (800a4d8 <_tzset_unlocked_r+0x2d8>)
 800a210:	4605      	mov	r5, r0
 800a212:	4638      	mov	r0, r7
 800a214:	f000 f9d8 	bl	800a5c8 <_getenv_r>
 800a218:	4604      	mov	r4, r0
 800a21a:	b970      	cbnz	r0, 800a23a <_tzset_unlocked_r+0x3a>
 800a21c:	4baf      	ldr	r3, [pc, #700]	; (800a4dc <_tzset_unlocked_r+0x2dc>)
 800a21e:	4ab0      	ldr	r2, [pc, #704]	; (800a4e0 <_tzset_unlocked_r+0x2e0>)
 800a220:	6018      	str	r0, [r3, #0]
 800a222:	4bb0      	ldr	r3, [pc, #704]	; (800a4e4 <_tzset_unlocked_r+0x2e4>)
 800a224:	6018      	str	r0, [r3, #0]
 800a226:	4bb0      	ldr	r3, [pc, #704]	; (800a4e8 <_tzset_unlocked_r+0x2e8>)
 800a228:	6830      	ldr	r0, [r6, #0]
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	605a      	str	r2, [r3, #4]
 800a22e:	f000 fa71 	bl	800a714 <free>
 800a232:	6034      	str	r4, [r6, #0]
 800a234:	b00d      	add	sp, #52	; 0x34
 800a236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23a:	6831      	ldr	r1, [r6, #0]
 800a23c:	2900      	cmp	r1, #0
 800a23e:	d160      	bne.n	800a302 <_tzset_unlocked_r+0x102>
 800a240:	6830      	ldr	r0, [r6, #0]
 800a242:	f000 fa67 	bl	800a714 <free>
 800a246:	4620      	mov	r0, r4
 800a248:	f7f5 ffcc 	bl	80001e4 <strlen>
 800a24c:	1c41      	adds	r1, r0, #1
 800a24e:	4638      	mov	r0, r7
 800a250:	f000 fab6 	bl	800a7c0 <_malloc_r>
 800a254:	6030      	str	r0, [r6, #0]
 800a256:	2800      	cmp	r0, #0
 800a258:	d158      	bne.n	800a30c <_tzset_unlocked_r+0x10c>
 800a25a:	7823      	ldrb	r3, [r4, #0]
 800a25c:	4aa3      	ldr	r2, [pc, #652]	; (800a4ec <_tzset_unlocked_r+0x2ec>)
 800a25e:	49a4      	ldr	r1, [pc, #656]	; (800a4f0 <_tzset_unlocked_r+0x2f0>)
 800a260:	2b3a      	cmp	r3, #58	; 0x3a
 800a262:	bf08      	it	eq
 800a264:	3401      	addeq	r4, #1
 800a266:	ae0a      	add	r6, sp, #40	; 0x28
 800a268:	4633      	mov	r3, r6
 800a26a:	4620      	mov	r0, r4
 800a26c:	f000 fdfc 	bl	800ae68 <siscanf>
 800a270:	2800      	cmp	r0, #0
 800a272:	dddf      	ble.n	800a234 <_tzset_unlocked_r+0x34>
 800a274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a276:	18e7      	adds	r7, r4, r3
 800a278:	5ce3      	ldrb	r3, [r4, r3]
 800a27a:	2b2d      	cmp	r3, #45	; 0x2d
 800a27c:	d14a      	bne.n	800a314 <_tzset_unlocked_r+0x114>
 800a27e:	3701      	adds	r7, #1
 800a280:	f04f 34ff 	mov.w	r4, #4294967295
 800a284:	f10d 0a20 	add.w	sl, sp, #32
 800a288:	f10d 0b1e 	add.w	fp, sp, #30
 800a28c:	f04f 0800 	mov.w	r8, #0
 800a290:	9603      	str	r6, [sp, #12]
 800a292:	f8cd a008 	str.w	sl, [sp, #8]
 800a296:	9601      	str	r6, [sp, #4]
 800a298:	f8cd b000 	str.w	fp, [sp]
 800a29c:	4633      	mov	r3, r6
 800a29e:	aa07      	add	r2, sp, #28
 800a2a0:	4994      	ldr	r1, [pc, #592]	; (800a4f4 <_tzset_unlocked_r+0x2f4>)
 800a2a2:	f8ad 801e 	strh.w	r8, [sp, #30]
 800a2a6:	4638      	mov	r0, r7
 800a2a8:	f8ad 8020 	strh.w	r8, [sp, #32]
 800a2ac:	f000 fddc 	bl	800ae68 <siscanf>
 800a2b0:	4540      	cmp	r0, r8
 800a2b2:	ddbf      	ble.n	800a234 <_tzset_unlocked_r+0x34>
 800a2b4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a2b8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800a2bc:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800a500 <_tzset_unlocked_r+0x300>
 800a2c0:	213c      	movs	r1, #60	; 0x3c
 800a2c2:	fb01 2203 	mla	r2, r1, r3, r2
 800a2c6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800a2ca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a2ce:	fb01 2303 	mla	r3, r1, r3, r2
 800a2d2:	435c      	muls	r4, r3
 800a2d4:	622c      	str	r4, [r5, #32]
 800a2d6:	4c84      	ldr	r4, [pc, #528]	; (800a4e8 <_tzset_unlocked_r+0x2e8>)
 800a2d8:	4b84      	ldr	r3, [pc, #528]	; (800a4ec <_tzset_unlocked_r+0x2ec>)
 800a2da:	6023      	str	r3, [r4, #0]
 800a2dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2de:	4984      	ldr	r1, [pc, #528]	; (800a4f0 <_tzset_unlocked_r+0x2f0>)
 800a2e0:	441f      	add	r7, r3
 800a2e2:	464a      	mov	r2, r9
 800a2e4:	4633      	mov	r3, r6
 800a2e6:	4638      	mov	r0, r7
 800a2e8:	f000 fdbe 	bl	800ae68 <siscanf>
 800a2ec:	4540      	cmp	r0, r8
 800a2ee:	dc16      	bgt.n	800a31e <_tzset_unlocked_r+0x11e>
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	6063      	str	r3, [r4, #4]
 800a2f4:	4b79      	ldr	r3, [pc, #484]	; (800a4dc <_tzset_unlocked_r+0x2dc>)
 800a2f6:	6a2a      	ldr	r2, [r5, #32]
 800a2f8:	601a      	str	r2, [r3, #0]
 800a2fa:	4b7a      	ldr	r3, [pc, #488]	; (800a4e4 <_tzset_unlocked_r+0x2e4>)
 800a2fc:	f8c3 8000 	str.w	r8, [r3]
 800a300:	e798      	b.n	800a234 <_tzset_unlocked_r+0x34>
 800a302:	f7f5 ff65 	bl	80001d0 <strcmp>
 800a306:	2800      	cmp	r0, #0
 800a308:	d094      	beq.n	800a234 <_tzset_unlocked_r+0x34>
 800a30a:	e799      	b.n	800a240 <_tzset_unlocked_r+0x40>
 800a30c:	4621      	mov	r1, r4
 800a30e:	f7ff fde9 	bl	8009ee4 <strcpy>
 800a312:	e7a2      	b.n	800a25a <_tzset_unlocked_r+0x5a>
 800a314:	2b2b      	cmp	r3, #43	; 0x2b
 800a316:	bf08      	it	eq
 800a318:	3701      	addeq	r7, #1
 800a31a:	2401      	movs	r4, #1
 800a31c:	e7b2      	b.n	800a284 <_tzset_unlocked_r+0x84>
 800a31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a320:	f8c4 9004 	str.w	r9, [r4, #4]
 800a324:	18fc      	adds	r4, r7, r3
 800a326:	5cfb      	ldrb	r3, [r7, r3]
 800a328:	2b2d      	cmp	r3, #45	; 0x2d
 800a32a:	f040 8092 	bne.w	800a452 <_tzset_unlocked_r+0x252>
 800a32e:	3401      	adds	r4, #1
 800a330:	f04f 37ff 	mov.w	r7, #4294967295
 800a334:	2300      	movs	r3, #0
 800a336:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a33a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a33e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a342:	930a      	str	r3, [sp, #40]	; 0x28
 800a344:	9603      	str	r6, [sp, #12]
 800a346:	f8cd a008 	str.w	sl, [sp, #8]
 800a34a:	9601      	str	r6, [sp, #4]
 800a34c:	f8cd b000 	str.w	fp, [sp]
 800a350:	4633      	mov	r3, r6
 800a352:	aa07      	add	r2, sp, #28
 800a354:	4967      	ldr	r1, [pc, #412]	; (800a4f4 <_tzset_unlocked_r+0x2f4>)
 800a356:	4620      	mov	r0, r4
 800a358:	f000 fd86 	bl	800ae68 <siscanf>
 800a35c:	2800      	cmp	r0, #0
 800a35e:	dc7d      	bgt.n	800a45c <_tzset_unlocked_r+0x25c>
 800a360:	6a2b      	ldr	r3, [r5, #32]
 800a362:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800a366:	63eb      	str	r3, [r5, #60]	; 0x3c
 800a368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a36a:	462f      	mov	r7, r5
 800a36c:	441c      	add	r4, r3
 800a36e:	f04f 0900 	mov.w	r9, #0
 800a372:	7823      	ldrb	r3, [r4, #0]
 800a374:	2b2c      	cmp	r3, #44	; 0x2c
 800a376:	bf08      	it	eq
 800a378:	3401      	addeq	r4, #1
 800a37a:	f894 8000 	ldrb.w	r8, [r4]
 800a37e:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800a382:	d17b      	bne.n	800a47c <_tzset_unlocked_r+0x27c>
 800a384:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800a388:	9302      	str	r3, [sp, #8]
 800a38a:	ab09      	add	r3, sp, #36	; 0x24
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	9603      	str	r6, [sp, #12]
 800a390:	9601      	str	r6, [sp, #4]
 800a392:	4633      	mov	r3, r6
 800a394:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800a398:	4957      	ldr	r1, [pc, #348]	; (800a4f8 <_tzset_unlocked_r+0x2f8>)
 800a39a:	4620      	mov	r0, r4
 800a39c:	f000 fd64 	bl	800ae68 <siscanf>
 800a3a0:	2803      	cmp	r0, #3
 800a3a2:	f47f af47 	bne.w	800a234 <_tzset_unlocked_r+0x34>
 800a3a6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800a3aa:	1e4b      	subs	r3, r1, #1
 800a3ac:	2b0b      	cmp	r3, #11
 800a3ae:	f63f af41 	bhi.w	800a234 <_tzset_unlocked_r+0x34>
 800a3b2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800a3b6:	1e53      	subs	r3, r2, #1
 800a3b8:	2b04      	cmp	r3, #4
 800a3ba:	f63f af3b 	bhi.w	800a234 <_tzset_unlocked_r+0x34>
 800a3be:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a3c2:	2b06      	cmp	r3, #6
 800a3c4:	f63f af36 	bhi.w	800a234 <_tzset_unlocked_r+0x34>
 800a3c8:	f887 8008 	strb.w	r8, [r7, #8]
 800a3cc:	60f9      	str	r1, [r7, #12]
 800a3ce:	613a      	str	r2, [r7, #16]
 800a3d0:	617b      	str	r3, [r7, #20]
 800a3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3d4:	eb04 0803 	add.w	r8, r4, r3
 800a3d8:	2302      	movs	r3, #2
 800a3da:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a3e4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a3e8:	930a      	str	r3, [sp, #40]	; 0x28
 800a3ea:	f898 3000 	ldrb.w	r3, [r8]
 800a3ee:	2b2f      	cmp	r3, #47	; 0x2f
 800a3f0:	d10b      	bne.n	800a40a <_tzset_unlocked_r+0x20a>
 800a3f2:	9603      	str	r6, [sp, #12]
 800a3f4:	f8cd a008 	str.w	sl, [sp, #8]
 800a3f8:	9601      	str	r6, [sp, #4]
 800a3fa:	f8cd b000 	str.w	fp, [sp]
 800a3fe:	4633      	mov	r3, r6
 800a400:	aa07      	add	r2, sp, #28
 800a402:	493e      	ldr	r1, [pc, #248]	; (800a4fc <_tzset_unlocked_r+0x2fc>)
 800a404:	4640      	mov	r0, r8
 800a406:	f000 fd2f 	bl	800ae68 <siscanf>
 800a40a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a40e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800a412:	213c      	movs	r1, #60	; 0x3c
 800a414:	fb01 2203 	mla	r2, r1, r3, r2
 800a418:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800a41c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a420:	fb01 2303 	mla	r3, r1, r3, r2
 800a424:	61bb      	str	r3, [r7, #24]
 800a426:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a428:	f109 0901 	add.w	r9, r9, #1
 800a42c:	f1b9 0f02 	cmp.w	r9, #2
 800a430:	4444      	add	r4, r8
 800a432:	f107 071c 	add.w	r7, r7, #28
 800a436:	d19c      	bne.n	800a372 <_tzset_unlocked_r+0x172>
 800a438:	6868      	ldr	r0, [r5, #4]
 800a43a:	f7ff fe31 	bl	800a0a0 <__tzcalc_limits>
 800a43e:	4b27      	ldr	r3, [pc, #156]	; (800a4dc <_tzset_unlocked_r+0x2dc>)
 800a440:	6a2a      	ldr	r2, [r5, #32]
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800a446:	1a9b      	subs	r3, r3, r2
 800a448:	4a26      	ldr	r2, [pc, #152]	; (800a4e4 <_tzset_unlocked_r+0x2e4>)
 800a44a:	bf18      	it	ne
 800a44c:	2301      	movne	r3, #1
 800a44e:	6013      	str	r3, [r2, #0]
 800a450:	e6f0      	b.n	800a234 <_tzset_unlocked_r+0x34>
 800a452:	2b2b      	cmp	r3, #43	; 0x2b
 800a454:	bf08      	it	eq
 800a456:	3401      	addeq	r4, #1
 800a458:	2701      	movs	r7, #1
 800a45a:	e76b      	b.n	800a334 <_tzset_unlocked_r+0x134>
 800a45c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a460:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800a464:	213c      	movs	r1, #60	; 0x3c
 800a466:	fb01 2203 	mla	r2, r1, r3, r2
 800a46a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800a46e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a472:	fb01 2303 	mla	r3, r1, r3, r2
 800a476:	435f      	muls	r7, r3
 800a478:	63ef      	str	r7, [r5, #60]	; 0x3c
 800a47a:	e775      	b.n	800a368 <_tzset_unlocked_r+0x168>
 800a47c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800a480:	bf06      	itte	eq
 800a482:	3401      	addeq	r4, #1
 800a484:	4643      	moveq	r3, r8
 800a486:	2344      	movne	r3, #68	; 0x44
 800a488:	220a      	movs	r2, #10
 800a48a:	a90b      	add	r1, sp, #44	; 0x2c
 800a48c:	4620      	mov	r0, r4
 800a48e:	9305      	str	r3, [sp, #20]
 800a490:	f000 fda6 	bl	800afe0 <strtoul>
 800a494:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a498:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800a49c:	4544      	cmp	r4, r8
 800a49e:	9b05      	ldr	r3, [sp, #20]
 800a4a0:	d114      	bne.n	800a4cc <_tzset_unlocked_r+0x2cc>
 800a4a2:	234d      	movs	r3, #77	; 0x4d
 800a4a4:	f1b9 0f00 	cmp.w	r9, #0
 800a4a8:	d107      	bne.n	800a4ba <_tzset_unlocked_r+0x2ba>
 800a4aa:	722b      	strb	r3, [r5, #8]
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	60eb      	str	r3, [r5, #12]
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	612b      	str	r3, [r5, #16]
 800a4b4:	f8c5 9014 	str.w	r9, [r5, #20]
 800a4b8:	e78e      	b.n	800a3d8 <_tzset_unlocked_r+0x1d8>
 800a4ba:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 800a4be:	230b      	movs	r3, #11
 800a4c0:	62ab      	str	r3, [r5, #40]	; 0x28
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	62eb      	str	r3, [r5, #44]	; 0x2c
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	632b      	str	r3, [r5, #48]	; 0x30
 800a4ca:	e785      	b.n	800a3d8 <_tzset_unlocked_r+0x1d8>
 800a4cc:	b280      	uxth	r0, r0
 800a4ce:	723b      	strb	r3, [r7, #8]
 800a4d0:	6178      	str	r0, [r7, #20]
 800a4d2:	e781      	b.n	800a3d8 <_tzset_unlocked_r+0x1d8>
 800a4d4:	0800bb9c 	.word	0x0800bb9c
 800a4d8:	20008b90 	.word	0x20008b90
 800a4dc:	20008b98 	.word	0x20008b98
 800a4e0:	0800bb9f 	.word	0x0800bb9f
 800a4e4:	20008b94 	.word	0x20008b94
 800a4e8:	200001e0 	.word	0x200001e0
 800a4ec:	20008b83 	.word	0x20008b83
 800a4f0:	0800bba3 	.word	0x0800bba3
 800a4f4:	0800bbc6 	.word	0x0800bbc6
 800a4f8:	0800bbb2 	.word	0x0800bbb2
 800a4fc:	0800bbc5 	.word	0x0800bbc5
 800a500:	20008b78 	.word	0x20008b78

0800a504 <__ascii_wctomb>:
 800a504:	b149      	cbz	r1, 800a51a <__ascii_wctomb+0x16>
 800a506:	2aff      	cmp	r2, #255	; 0xff
 800a508:	bf85      	ittet	hi
 800a50a:	238a      	movhi	r3, #138	; 0x8a
 800a50c:	6003      	strhi	r3, [r0, #0]
 800a50e:	700a      	strbls	r2, [r1, #0]
 800a510:	f04f 30ff 	movhi.w	r0, #4294967295
 800a514:	bf98      	it	ls
 800a516:	2001      	movls	r0, #1
 800a518:	4770      	bx	lr
 800a51a:	4608      	mov	r0, r1
 800a51c:	4770      	bx	lr

0800a51e <div>:
 800a51e:	2900      	cmp	r1, #0
 800a520:	b510      	push	{r4, lr}
 800a522:	fb91 f4f2 	sdiv	r4, r1, r2
 800a526:	fb02 1314 	mls	r3, r2, r4, r1
 800a52a:	db06      	blt.n	800a53a <div+0x1c>
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	da01      	bge.n	800a534 <div+0x16>
 800a530:	3401      	adds	r4, #1
 800a532:	1a9b      	subs	r3, r3, r2
 800a534:	6004      	str	r4, [r0, #0]
 800a536:	6043      	str	r3, [r0, #4]
 800a538:	bd10      	pop	{r4, pc}
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	bfc4      	itt	gt
 800a53e:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800a542:	189b      	addgt	r3, r3, r2
 800a544:	e7f6      	b.n	800a534 <div+0x16>
	...

0800a548 <_findenv_r>:
 800a548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a54c:	4606      	mov	r6, r0
 800a54e:	468a      	mov	sl, r1
 800a550:	4617      	mov	r7, r2
 800a552:	f000 fd5b 	bl	800b00c <__env_lock>
 800a556:	4b1b      	ldr	r3, [pc, #108]	; (800a5c4 <_findenv_r+0x7c>)
 800a558:	f8d3 8000 	ldr.w	r8, [r3]
 800a55c:	4699      	mov	r9, r3
 800a55e:	f1b8 0f00 	cmp.w	r8, #0
 800a562:	d007      	beq.n	800a574 <_findenv_r+0x2c>
 800a564:	4654      	mov	r4, sl
 800a566:	4623      	mov	r3, r4
 800a568:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a56c:	b332      	cbz	r2, 800a5bc <_findenv_r+0x74>
 800a56e:	2a3d      	cmp	r2, #61	; 0x3d
 800a570:	461c      	mov	r4, r3
 800a572:	d1f8      	bne.n	800a566 <_findenv_r+0x1e>
 800a574:	4630      	mov	r0, r6
 800a576:	f000 fd4a 	bl	800b00e <__env_unlock>
 800a57a:	2000      	movs	r0, #0
 800a57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a580:	f108 0804 	add.w	r8, r8, #4
 800a584:	f8d8 0000 	ldr.w	r0, [r8]
 800a588:	2800      	cmp	r0, #0
 800a58a:	d0f3      	beq.n	800a574 <_findenv_r+0x2c>
 800a58c:	4622      	mov	r2, r4
 800a58e:	4651      	mov	r1, sl
 800a590:	f7ff fcb0 	bl	8009ef4 <strncmp>
 800a594:	2800      	cmp	r0, #0
 800a596:	d1f3      	bne.n	800a580 <_findenv_r+0x38>
 800a598:	f8d8 3000 	ldr.w	r3, [r8]
 800a59c:	191d      	adds	r5, r3, r4
 800a59e:	5d1b      	ldrb	r3, [r3, r4]
 800a5a0:	2b3d      	cmp	r3, #61	; 0x3d
 800a5a2:	d1ed      	bne.n	800a580 <_findenv_r+0x38>
 800a5a4:	f8d9 3000 	ldr.w	r3, [r9]
 800a5a8:	eba8 0303 	sub.w	r3, r8, r3
 800a5ac:	109b      	asrs	r3, r3, #2
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	603b      	str	r3, [r7, #0]
 800a5b2:	f000 fd2c 	bl	800b00e <__env_unlock>
 800a5b6:	1c68      	adds	r0, r5, #1
 800a5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5bc:	eba4 040a 	sub.w	r4, r4, sl
 800a5c0:	e7e0      	b.n	800a584 <_findenv_r+0x3c>
 800a5c2:	bf00      	nop
 800a5c4:	20000008 	.word	0x20000008

0800a5c8 <_getenv_r>:
 800a5c8:	b507      	push	{r0, r1, r2, lr}
 800a5ca:	aa01      	add	r2, sp, #4
 800a5cc:	f7ff ffbc 	bl	800a548 <_findenv_r>
 800a5d0:	b003      	add	sp, #12
 800a5d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a5d8 <__gettzinfo>:
 800a5d8:	4800      	ldr	r0, [pc, #0]	; (800a5dc <__gettzinfo+0x4>)
 800a5da:	4770      	bx	lr
 800a5dc:	200001e8 	.word	0x200001e8

0800a5e0 <gmtime_r>:
 800a5e0:	6802      	ldr	r2, [r0, #0]
 800a5e2:	4848      	ldr	r0, [pc, #288]	; (800a704 <gmtime_r+0x124>)
 800a5e4:	fb92 f3f0 	sdiv	r3, r2, r0
 800a5e8:	fb00 2013 	mls	r0, r0, r3, r2
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	bfb8      	it	lt
 800a5f0:	f500 30a8 	addlt.w	r0, r0, #86016	; 0x15000
 800a5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5f6:	bfb8      	it	lt
 800a5f8:	f500 70c0 	addlt.w	r0, r0, #384	; 0x180
 800a5fc:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 800a600:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 800a604:	fb90 f2f4 	sdiv	r2, r0, r4
 800a608:	fb04 0012 	mls	r0, r4, r2, r0
 800a60c:	f04f 043c 	mov.w	r4, #60	; 0x3c
 800a610:	bfac      	ite	ge
 800a612:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 800a616:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 800a61a:	608a      	str	r2, [r1, #8]
 800a61c:	fb90 f2f4 	sdiv	r2, r0, r4
 800a620:	fb04 0012 	mls	r0, r4, r2, r0
 800a624:	604a      	str	r2, [r1, #4]
 800a626:	6008      	str	r0, [r1, #0]
 800a628:	2207      	movs	r2, #7
 800a62a:	1cd8      	adds	r0, r3, #3
 800a62c:	fb90 f2f2 	sdiv	r2, r0, r2
 800a630:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800a634:	1a82      	subs	r2, r0, r2
 800a636:	618a      	str	r2, [r1, #24]
 800a638:	4a33      	ldr	r2, [pc, #204]	; (800a708 <gmtime_r+0x128>)
 800a63a:	4c34      	ldr	r4, [pc, #208]	; (800a70c <gmtime_r+0x12c>)
 800a63c:	fb93 f4f4 	sdiv	r4, r3, r4
 800a640:	fb02 3304 	mla	r3, r2, r4, r3
 800a644:	f648 60ac 	movw	r0, #36524	; 0x8eac
 800a648:	fbb3 f0f0 	udiv	r0, r3, r0
 800a64c:	4418      	add	r0, r3
 800a64e:	f240 57b4 	movw	r7, #1460	; 0x5b4
 800a652:	fbb3 f2f7 	udiv	r2, r3, r7
 800a656:	1a80      	subs	r0, r0, r2
 800a658:	4a2d      	ldr	r2, [pc, #180]	; (800a710 <gmtime_r+0x130>)
 800a65a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a65e:	1a82      	subs	r2, r0, r2
 800a660:	f648 6094 	movw	r0, #36500	; 0x8e94
 800a664:	fbb2 f0f0 	udiv	r0, r2, r0
 800a668:	4403      	add	r3, r0
 800a66a:	f240 166d 	movw	r6, #365	; 0x16d
 800a66e:	fbb2 f5f6 	udiv	r5, r2, r6
 800a672:	fbb2 f2f7 	udiv	r2, r2, r7
 800a676:	1a9a      	subs	r2, r3, r2
 800a678:	fb06 2315 	mls	r3, r6, r5, r2
 800a67c:	2099      	movs	r0, #153	; 0x99
 800a67e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a682:	1c5e      	adds	r6, r3, #1
 800a684:	3202      	adds	r2, #2
 800a686:	fbb2 f2f0 	udiv	r2, r2, r0
 800a68a:	2a0a      	cmp	r2, #10
 800a68c:	fb00 f002 	mul.w	r0, r0, r2
 800a690:	f100 0002 	add.w	r0, r0, #2
 800a694:	f04f 0705 	mov.w	r7, #5
 800a698:	fbb0 f0f7 	udiv	r0, r0, r7
 800a69c:	eba6 0000 	sub.w	r0, r6, r0
 800a6a0:	bf34      	ite	cc
 800a6a2:	2602      	movcc	r6, #2
 800a6a4:	f06f 0609 	mvncs.w	r6, #9
 800a6a8:	4416      	add	r6, r2
 800a6aa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a6ae:	fb02 5404 	mla	r4, r2, r4, r5
 800a6b2:	2e01      	cmp	r6, #1
 800a6b4:	bf98      	it	ls
 800a6b6:	3401      	addls	r4, #1
 800a6b8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a6bc:	d30b      	bcc.n	800a6d6 <gmtime_r+0xf6>
 800a6be:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a6c2:	61cb      	str	r3, [r1, #28]
 800a6c4:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	60c8      	str	r0, [r1, #12]
 800a6cc:	614c      	str	r4, [r1, #20]
 800a6ce:	610e      	str	r6, [r1, #16]
 800a6d0:	620b      	str	r3, [r1, #32]
 800a6d2:	4608      	mov	r0, r1
 800a6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d6:	07aa      	lsls	r2, r5, #30
 800a6d8:	d105      	bne.n	800a6e6 <gmtime_r+0x106>
 800a6da:	2764      	movs	r7, #100	; 0x64
 800a6dc:	fbb5 f2f7 	udiv	r2, r5, r7
 800a6e0:	fb07 5212 	mls	r2, r7, r2, r5
 800a6e4:	b95a      	cbnz	r2, 800a6fe <gmtime_r+0x11e>
 800a6e6:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800a6ea:	fbb5 f2f7 	udiv	r2, r5, r7
 800a6ee:	fb07 5212 	mls	r2, r7, r2, r5
 800a6f2:	fab2 f282 	clz	r2, r2
 800a6f6:	0952      	lsrs	r2, r2, #5
 800a6f8:	333b      	adds	r3, #59	; 0x3b
 800a6fa:	4413      	add	r3, r2
 800a6fc:	e7e1      	b.n	800a6c2 <gmtime_r+0xe2>
 800a6fe:	2201      	movs	r2, #1
 800a700:	e7fa      	b.n	800a6f8 <gmtime_r+0x118>
 800a702:	bf00      	nop
 800a704:	00015180 	.word	0x00015180
 800a708:	fffdc54f 	.word	0xfffdc54f
 800a70c:	00023ab1 	.word	0x00023ab1
 800a710:	00023ab0 	.word	0x00023ab0

0800a714 <free>:
 800a714:	4b02      	ldr	r3, [pc, #8]	; (800a720 <free+0xc>)
 800a716:	4601      	mov	r1, r0
 800a718:	6818      	ldr	r0, [r3, #0]
 800a71a:	f000 b803 	b.w	800a724 <_free_r>
 800a71e:	bf00      	nop
 800a720:	20000010 	.word	0x20000010

0800a724 <_free_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	4605      	mov	r5, r0
 800a728:	2900      	cmp	r1, #0
 800a72a:	d045      	beq.n	800a7b8 <_free_r+0x94>
 800a72c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a730:	1f0c      	subs	r4, r1, #4
 800a732:	2b00      	cmp	r3, #0
 800a734:	bfb8      	it	lt
 800a736:	18e4      	addlt	r4, r4, r3
 800a738:	f000 fc84 	bl	800b044 <__malloc_lock>
 800a73c:	4a1f      	ldr	r2, [pc, #124]	; (800a7bc <_free_r+0x98>)
 800a73e:	6813      	ldr	r3, [r2, #0]
 800a740:	4610      	mov	r0, r2
 800a742:	b933      	cbnz	r3, 800a752 <_free_r+0x2e>
 800a744:	6063      	str	r3, [r4, #4]
 800a746:	6014      	str	r4, [r2, #0]
 800a748:	4628      	mov	r0, r5
 800a74a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a74e:	f000 bc7a 	b.w	800b046 <__malloc_unlock>
 800a752:	42a3      	cmp	r3, r4
 800a754:	d90c      	bls.n	800a770 <_free_r+0x4c>
 800a756:	6821      	ldr	r1, [r4, #0]
 800a758:	1862      	adds	r2, r4, r1
 800a75a:	4293      	cmp	r3, r2
 800a75c:	bf04      	itt	eq
 800a75e:	681a      	ldreq	r2, [r3, #0]
 800a760:	685b      	ldreq	r3, [r3, #4]
 800a762:	6063      	str	r3, [r4, #4]
 800a764:	bf04      	itt	eq
 800a766:	1852      	addeq	r2, r2, r1
 800a768:	6022      	streq	r2, [r4, #0]
 800a76a:	6004      	str	r4, [r0, #0]
 800a76c:	e7ec      	b.n	800a748 <_free_r+0x24>
 800a76e:	4613      	mov	r3, r2
 800a770:	685a      	ldr	r2, [r3, #4]
 800a772:	b10a      	cbz	r2, 800a778 <_free_r+0x54>
 800a774:	42a2      	cmp	r2, r4
 800a776:	d9fa      	bls.n	800a76e <_free_r+0x4a>
 800a778:	6819      	ldr	r1, [r3, #0]
 800a77a:	1858      	adds	r0, r3, r1
 800a77c:	42a0      	cmp	r0, r4
 800a77e:	d10b      	bne.n	800a798 <_free_r+0x74>
 800a780:	6820      	ldr	r0, [r4, #0]
 800a782:	4401      	add	r1, r0
 800a784:	1858      	adds	r0, r3, r1
 800a786:	4282      	cmp	r2, r0
 800a788:	6019      	str	r1, [r3, #0]
 800a78a:	d1dd      	bne.n	800a748 <_free_r+0x24>
 800a78c:	6810      	ldr	r0, [r2, #0]
 800a78e:	6852      	ldr	r2, [r2, #4]
 800a790:	605a      	str	r2, [r3, #4]
 800a792:	4401      	add	r1, r0
 800a794:	6019      	str	r1, [r3, #0]
 800a796:	e7d7      	b.n	800a748 <_free_r+0x24>
 800a798:	d902      	bls.n	800a7a0 <_free_r+0x7c>
 800a79a:	230c      	movs	r3, #12
 800a79c:	602b      	str	r3, [r5, #0]
 800a79e:	e7d3      	b.n	800a748 <_free_r+0x24>
 800a7a0:	6820      	ldr	r0, [r4, #0]
 800a7a2:	1821      	adds	r1, r4, r0
 800a7a4:	428a      	cmp	r2, r1
 800a7a6:	bf04      	itt	eq
 800a7a8:	6811      	ldreq	r1, [r2, #0]
 800a7aa:	6852      	ldreq	r2, [r2, #4]
 800a7ac:	6062      	str	r2, [r4, #4]
 800a7ae:	bf04      	itt	eq
 800a7b0:	1809      	addeq	r1, r1, r0
 800a7b2:	6021      	streq	r1, [r4, #0]
 800a7b4:	605c      	str	r4, [r3, #4]
 800a7b6:	e7c7      	b.n	800a748 <_free_r+0x24>
 800a7b8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20008b9c 	.word	0x20008b9c

0800a7c0 <_malloc_r>:
 800a7c0:	b570      	push	{r4, r5, r6, lr}
 800a7c2:	1ccd      	adds	r5, r1, #3
 800a7c4:	f025 0503 	bic.w	r5, r5, #3
 800a7c8:	3508      	adds	r5, #8
 800a7ca:	2d0c      	cmp	r5, #12
 800a7cc:	bf38      	it	cc
 800a7ce:	250c      	movcc	r5, #12
 800a7d0:	2d00      	cmp	r5, #0
 800a7d2:	4606      	mov	r6, r0
 800a7d4:	db01      	blt.n	800a7da <_malloc_r+0x1a>
 800a7d6:	42a9      	cmp	r1, r5
 800a7d8:	d903      	bls.n	800a7e2 <_malloc_r+0x22>
 800a7da:	230c      	movs	r3, #12
 800a7dc:	6033      	str	r3, [r6, #0]
 800a7de:	2000      	movs	r0, #0
 800a7e0:	bd70      	pop	{r4, r5, r6, pc}
 800a7e2:	f000 fc2f 	bl	800b044 <__malloc_lock>
 800a7e6:	4a23      	ldr	r2, [pc, #140]	; (800a874 <_malloc_r+0xb4>)
 800a7e8:	6814      	ldr	r4, [r2, #0]
 800a7ea:	4621      	mov	r1, r4
 800a7ec:	b991      	cbnz	r1, 800a814 <_malloc_r+0x54>
 800a7ee:	4c22      	ldr	r4, [pc, #136]	; (800a878 <_malloc_r+0xb8>)
 800a7f0:	6823      	ldr	r3, [r4, #0]
 800a7f2:	b91b      	cbnz	r3, 800a7fc <_malloc_r+0x3c>
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f000 fb27 	bl	800ae48 <_sbrk_r>
 800a7fa:	6020      	str	r0, [r4, #0]
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	4630      	mov	r0, r6
 800a800:	f000 fb22 	bl	800ae48 <_sbrk_r>
 800a804:	1c43      	adds	r3, r0, #1
 800a806:	d126      	bne.n	800a856 <_malloc_r+0x96>
 800a808:	230c      	movs	r3, #12
 800a80a:	6033      	str	r3, [r6, #0]
 800a80c:	4630      	mov	r0, r6
 800a80e:	f000 fc1a 	bl	800b046 <__malloc_unlock>
 800a812:	e7e4      	b.n	800a7de <_malloc_r+0x1e>
 800a814:	680b      	ldr	r3, [r1, #0]
 800a816:	1b5b      	subs	r3, r3, r5
 800a818:	d41a      	bmi.n	800a850 <_malloc_r+0x90>
 800a81a:	2b0b      	cmp	r3, #11
 800a81c:	d90f      	bls.n	800a83e <_malloc_r+0x7e>
 800a81e:	600b      	str	r3, [r1, #0]
 800a820:	50cd      	str	r5, [r1, r3]
 800a822:	18cc      	adds	r4, r1, r3
 800a824:	4630      	mov	r0, r6
 800a826:	f000 fc0e 	bl	800b046 <__malloc_unlock>
 800a82a:	f104 000b 	add.w	r0, r4, #11
 800a82e:	1d23      	adds	r3, r4, #4
 800a830:	f020 0007 	bic.w	r0, r0, #7
 800a834:	1ac3      	subs	r3, r0, r3
 800a836:	d01b      	beq.n	800a870 <_malloc_r+0xb0>
 800a838:	425a      	negs	r2, r3
 800a83a:	50e2      	str	r2, [r4, r3]
 800a83c:	bd70      	pop	{r4, r5, r6, pc}
 800a83e:	428c      	cmp	r4, r1
 800a840:	bf0d      	iteet	eq
 800a842:	6863      	ldreq	r3, [r4, #4]
 800a844:	684b      	ldrne	r3, [r1, #4]
 800a846:	6063      	strne	r3, [r4, #4]
 800a848:	6013      	streq	r3, [r2, #0]
 800a84a:	bf18      	it	ne
 800a84c:	460c      	movne	r4, r1
 800a84e:	e7e9      	b.n	800a824 <_malloc_r+0x64>
 800a850:	460c      	mov	r4, r1
 800a852:	6849      	ldr	r1, [r1, #4]
 800a854:	e7ca      	b.n	800a7ec <_malloc_r+0x2c>
 800a856:	1cc4      	adds	r4, r0, #3
 800a858:	f024 0403 	bic.w	r4, r4, #3
 800a85c:	42a0      	cmp	r0, r4
 800a85e:	d005      	beq.n	800a86c <_malloc_r+0xac>
 800a860:	1a21      	subs	r1, r4, r0
 800a862:	4630      	mov	r0, r6
 800a864:	f000 faf0 	bl	800ae48 <_sbrk_r>
 800a868:	3001      	adds	r0, #1
 800a86a:	d0cd      	beq.n	800a808 <_malloc_r+0x48>
 800a86c:	6025      	str	r5, [r4, #0]
 800a86e:	e7d9      	b.n	800a824 <_malloc_r+0x64>
 800a870:	bd70      	pop	{r4, r5, r6, pc}
 800a872:	bf00      	nop
 800a874:	20008b9c 	.word	0x20008b9c
 800a878:	20008ba0 	.word	0x20008ba0

0800a87c <__ssputs_r>:
 800a87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a880:	688e      	ldr	r6, [r1, #8]
 800a882:	429e      	cmp	r6, r3
 800a884:	4682      	mov	sl, r0
 800a886:	460c      	mov	r4, r1
 800a888:	4691      	mov	r9, r2
 800a88a:	4698      	mov	r8, r3
 800a88c:	d835      	bhi.n	800a8fa <__ssputs_r+0x7e>
 800a88e:	898a      	ldrh	r2, [r1, #12]
 800a890:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a894:	d031      	beq.n	800a8fa <__ssputs_r+0x7e>
 800a896:	6825      	ldr	r5, [r4, #0]
 800a898:	6909      	ldr	r1, [r1, #16]
 800a89a:	1a6f      	subs	r7, r5, r1
 800a89c:	6965      	ldr	r5, [r4, #20]
 800a89e:	2302      	movs	r3, #2
 800a8a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8a4:	fb95 f5f3 	sdiv	r5, r5, r3
 800a8a8:	f108 0301 	add.w	r3, r8, #1
 800a8ac:	443b      	add	r3, r7
 800a8ae:	429d      	cmp	r5, r3
 800a8b0:	bf38      	it	cc
 800a8b2:	461d      	movcc	r5, r3
 800a8b4:	0553      	lsls	r3, r2, #21
 800a8b6:	d531      	bpl.n	800a91c <__ssputs_r+0xa0>
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	f7ff ff81 	bl	800a7c0 <_malloc_r>
 800a8be:	4606      	mov	r6, r0
 800a8c0:	b950      	cbnz	r0, 800a8d8 <__ssputs_r+0x5c>
 800a8c2:	230c      	movs	r3, #12
 800a8c4:	f8ca 3000 	str.w	r3, [sl]
 800a8c8:	89a3      	ldrh	r3, [r4, #12]
 800a8ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ce:	81a3      	strh	r3, [r4, #12]
 800a8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d8:	463a      	mov	r2, r7
 800a8da:	6921      	ldr	r1, [r4, #16]
 800a8dc:	f7ff f861 	bl	80099a2 <memcpy>
 800a8e0:	89a3      	ldrh	r3, [r4, #12]
 800a8e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8ea:	81a3      	strh	r3, [r4, #12]
 800a8ec:	6126      	str	r6, [r4, #16]
 800a8ee:	6165      	str	r5, [r4, #20]
 800a8f0:	443e      	add	r6, r7
 800a8f2:	1bed      	subs	r5, r5, r7
 800a8f4:	6026      	str	r6, [r4, #0]
 800a8f6:	60a5      	str	r5, [r4, #8]
 800a8f8:	4646      	mov	r6, r8
 800a8fa:	4546      	cmp	r6, r8
 800a8fc:	bf28      	it	cs
 800a8fe:	4646      	movcs	r6, r8
 800a900:	4632      	mov	r2, r6
 800a902:	4649      	mov	r1, r9
 800a904:	6820      	ldr	r0, [r4, #0]
 800a906:	f000 fb83 	bl	800b010 <memmove>
 800a90a:	68a3      	ldr	r3, [r4, #8]
 800a90c:	1b9b      	subs	r3, r3, r6
 800a90e:	60a3      	str	r3, [r4, #8]
 800a910:	6823      	ldr	r3, [r4, #0]
 800a912:	441e      	add	r6, r3
 800a914:	6026      	str	r6, [r4, #0]
 800a916:	2000      	movs	r0, #0
 800a918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a91c:	462a      	mov	r2, r5
 800a91e:	f000 fb93 	bl	800b048 <_realloc_r>
 800a922:	4606      	mov	r6, r0
 800a924:	2800      	cmp	r0, #0
 800a926:	d1e1      	bne.n	800a8ec <__ssputs_r+0x70>
 800a928:	6921      	ldr	r1, [r4, #16]
 800a92a:	4650      	mov	r0, sl
 800a92c:	f7ff fefa 	bl	800a724 <_free_r>
 800a930:	e7c7      	b.n	800a8c2 <__ssputs_r+0x46>
	...

0800a934 <_svfiprintf_r>:
 800a934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a938:	b09d      	sub	sp, #116	; 0x74
 800a93a:	4680      	mov	r8, r0
 800a93c:	9303      	str	r3, [sp, #12]
 800a93e:	898b      	ldrh	r3, [r1, #12]
 800a940:	061c      	lsls	r4, r3, #24
 800a942:	460d      	mov	r5, r1
 800a944:	4616      	mov	r6, r2
 800a946:	d50f      	bpl.n	800a968 <_svfiprintf_r+0x34>
 800a948:	690b      	ldr	r3, [r1, #16]
 800a94a:	b96b      	cbnz	r3, 800a968 <_svfiprintf_r+0x34>
 800a94c:	2140      	movs	r1, #64	; 0x40
 800a94e:	f7ff ff37 	bl	800a7c0 <_malloc_r>
 800a952:	6028      	str	r0, [r5, #0]
 800a954:	6128      	str	r0, [r5, #16]
 800a956:	b928      	cbnz	r0, 800a964 <_svfiprintf_r+0x30>
 800a958:	230c      	movs	r3, #12
 800a95a:	f8c8 3000 	str.w	r3, [r8]
 800a95e:	f04f 30ff 	mov.w	r0, #4294967295
 800a962:	e0c5      	b.n	800aaf0 <_svfiprintf_r+0x1bc>
 800a964:	2340      	movs	r3, #64	; 0x40
 800a966:	616b      	str	r3, [r5, #20]
 800a968:	2300      	movs	r3, #0
 800a96a:	9309      	str	r3, [sp, #36]	; 0x24
 800a96c:	2320      	movs	r3, #32
 800a96e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a972:	2330      	movs	r3, #48	; 0x30
 800a974:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a978:	f04f 0b01 	mov.w	fp, #1
 800a97c:	4637      	mov	r7, r6
 800a97e:	463c      	mov	r4, r7
 800a980:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a984:	2b00      	cmp	r3, #0
 800a986:	d13c      	bne.n	800aa02 <_svfiprintf_r+0xce>
 800a988:	ebb7 0a06 	subs.w	sl, r7, r6
 800a98c:	d00b      	beq.n	800a9a6 <_svfiprintf_r+0x72>
 800a98e:	4653      	mov	r3, sl
 800a990:	4632      	mov	r2, r6
 800a992:	4629      	mov	r1, r5
 800a994:	4640      	mov	r0, r8
 800a996:	f7ff ff71 	bl	800a87c <__ssputs_r>
 800a99a:	3001      	adds	r0, #1
 800a99c:	f000 80a3 	beq.w	800aae6 <_svfiprintf_r+0x1b2>
 800a9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a2:	4453      	add	r3, sl
 800a9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9a6:	783b      	ldrb	r3, [r7, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 809c 	beq.w	800aae6 <_svfiprintf_r+0x1b2>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b4:	9304      	str	r3, [sp, #16]
 800a9b6:	9307      	str	r3, [sp, #28]
 800a9b8:	9205      	str	r2, [sp, #20]
 800a9ba:	9306      	str	r3, [sp, #24]
 800a9bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9c0:	931a      	str	r3, [sp, #104]	; 0x68
 800a9c2:	2205      	movs	r2, #5
 800a9c4:	7821      	ldrb	r1, [r4, #0]
 800a9c6:	4850      	ldr	r0, [pc, #320]	; (800ab08 <_svfiprintf_r+0x1d4>)
 800a9c8:	f7f5 fc1a 	bl	8000200 <memchr>
 800a9cc:	1c67      	adds	r7, r4, #1
 800a9ce:	9b04      	ldr	r3, [sp, #16]
 800a9d0:	b9d8      	cbnz	r0, 800aa0a <_svfiprintf_r+0xd6>
 800a9d2:	06d9      	lsls	r1, r3, #27
 800a9d4:	bf44      	itt	mi
 800a9d6:	2220      	movmi	r2, #32
 800a9d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a9dc:	071a      	lsls	r2, r3, #28
 800a9de:	bf44      	itt	mi
 800a9e0:	222b      	movmi	r2, #43	; 0x2b
 800a9e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a9e6:	7822      	ldrb	r2, [r4, #0]
 800a9e8:	2a2a      	cmp	r2, #42	; 0x2a
 800a9ea:	d016      	beq.n	800aa1a <_svfiprintf_r+0xe6>
 800a9ec:	9a07      	ldr	r2, [sp, #28]
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	200a      	movs	r0, #10
 800a9f2:	4627      	mov	r7, r4
 800a9f4:	3401      	adds	r4, #1
 800a9f6:	783b      	ldrb	r3, [r7, #0]
 800a9f8:	3b30      	subs	r3, #48	; 0x30
 800a9fa:	2b09      	cmp	r3, #9
 800a9fc:	d951      	bls.n	800aaa2 <_svfiprintf_r+0x16e>
 800a9fe:	b1c9      	cbz	r1, 800aa34 <_svfiprintf_r+0x100>
 800aa00:	e011      	b.n	800aa26 <_svfiprintf_r+0xf2>
 800aa02:	2b25      	cmp	r3, #37	; 0x25
 800aa04:	d0c0      	beq.n	800a988 <_svfiprintf_r+0x54>
 800aa06:	4627      	mov	r7, r4
 800aa08:	e7b9      	b.n	800a97e <_svfiprintf_r+0x4a>
 800aa0a:	4a3f      	ldr	r2, [pc, #252]	; (800ab08 <_svfiprintf_r+0x1d4>)
 800aa0c:	1a80      	subs	r0, r0, r2
 800aa0e:	fa0b f000 	lsl.w	r0, fp, r0
 800aa12:	4318      	orrs	r0, r3
 800aa14:	9004      	str	r0, [sp, #16]
 800aa16:	463c      	mov	r4, r7
 800aa18:	e7d3      	b.n	800a9c2 <_svfiprintf_r+0x8e>
 800aa1a:	9a03      	ldr	r2, [sp, #12]
 800aa1c:	1d11      	adds	r1, r2, #4
 800aa1e:	6812      	ldr	r2, [r2, #0]
 800aa20:	9103      	str	r1, [sp, #12]
 800aa22:	2a00      	cmp	r2, #0
 800aa24:	db01      	blt.n	800aa2a <_svfiprintf_r+0xf6>
 800aa26:	9207      	str	r2, [sp, #28]
 800aa28:	e004      	b.n	800aa34 <_svfiprintf_r+0x100>
 800aa2a:	4252      	negs	r2, r2
 800aa2c:	f043 0302 	orr.w	r3, r3, #2
 800aa30:	9207      	str	r2, [sp, #28]
 800aa32:	9304      	str	r3, [sp, #16]
 800aa34:	783b      	ldrb	r3, [r7, #0]
 800aa36:	2b2e      	cmp	r3, #46	; 0x2e
 800aa38:	d10e      	bne.n	800aa58 <_svfiprintf_r+0x124>
 800aa3a:	787b      	ldrb	r3, [r7, #1]
 800aa3c:	2b2a      	cmp	r3, #42	; 0x2a
 800aa3e:	f107 0101 	add.w	r1, r7, #1
 800aa42:	d132      	bne.n	800aaaa <_svfiprintf_r+0x176>
 800aa44:	9b03      	ldr	r3, [sp, #12]
 800aa46:	1d1a      	adds	r2, r3, #4
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	9203      	str	r2, [sp, #12]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	bfb8      	it	lt
 800aa50:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa54:	3702      	adds	r7, #2
 800aa56:	9305      	str	r3, [sp, #20]
 800aa58:	4c2c      	ldr	r4, [pc, #176]	; (800ab0c <_svfiprintf_r+0x1d8>)
 800aa5a:	7839      	ldrb	r1, [r7, #0]
 800aa5c:	2203      	movs	r2, #3
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f7f5 fbce 	bl	8000200 <memchr>
 800aa64:	b138      	cbz	r0, 800aa76 <_svfiprintf_r+0x142>
 800aa66:	2340      	movs	r3, #64	; 0x40
 800aa68:	1b00      	subs	r0, r0, r4
 800aa6a:	fa03 f000 	lsl.w	r0, r3, r0
 800aa6e:	9b04      	ldr	r3, [sp, #16]
 800aa70:	4303      	orrs	r3, r0
 800aa72:	9304      	str	r3, [sp, #16]
 800aa74:	3701      	adds	r7, #1
 800aa76:	7839      	ldrb	r1, [r7, #0]
 800aa78:	4825      	ldr	r0, [pc, #148]	; (800ab10 <_svfiprintf_r+0x1dc>)
 800aa7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa7e:	2206      	movs	r2, #6
 800aa80:	1c7e      	adds	r6, r7, #1
 800aa82:	f7f5 fbbd 	bl	8000200 <memchr>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	d035      	beq.n	800aaf6 <_svfiprintf_r+0x1c2>
 800aa8a:	4b22      	ldr	r3, [pc, #136]	; (800ab14 <_svfiprintf_r+0x1e0>)
 800aa8c:	b9fb      	cbnz	r3, 800aace <_svfiprintf_r+0x19a>
 800aa8e:	9b03      	ldr	r3, [sp, #12]
 800aa90:	3307      	adds	r3, #7
 800aa92:	f023 0307 	bic.w	r3, r3, #7
 800aa96:	3308      	adds	r3, #8
 800aa98:	9303      	str	r3, [sp, #12]
 800aa9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa9c:	444b      	add	r3, r9
 800aa9e:	9309      	str	r3, [sp, #36]	; 0x24
 800aaa0:	e76c      	b.n	800a97c <_svfiprintf_r+0x48>
 800aaa2:	fb00 3202 	mla	r2, r0, r2, r3
 800aaa6:	2101      	movs	r1, #1
 800aaa8:	e7a3      	b.n	800a9f2 <_svfiprintf_r+0xbe>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	9305      	str	r3, [sp, #20]
 800aaae:	4618      	mov	r0, r3
 800aab0:	240a      	movs	r4, #10
 800aab2:	460f      	mov	r7, r1
 800aab4:	3101      	adds	r1, #1
 800aab6:	783a      	ldrb	r2, [r7, #0]
 800aab8:	3a30      	subs	r2, #48	; 0x30
 800aaba:	2a09      	cmp	r2, #9
 800aabc:	d903      	bls.n	800aac6 <_svfiprintf_r+0x192>
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d0ca      	beq.n	800aa58 <_svfiprintf_r+0x124>
 800aac2:	9005      	str	r0, [sp, #20]
 800aac4:	e7c8      	b.n	800aa58 <_svfiprintf_r+0x124>
 800aac6:	fb04 2000 	mla	r0, r4, r0, r2
 800aaca:	2301      	movs	r3, #1
 800aacc:	e7f1      	b.n	800aab2 <_svfiprintf_r+0x17e>
 800aace:	ab03      	add	r3, sp, #12
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	462a      	mov	r2, r5
 800aad4:	4b10      	ldr	r3, [pc, #64]	; (800ab18 <_svfiprintf_r+0x1e4>)
 800aad6:	a904      	add	r1, sp, #16
 800aad8:	4640      	mov	r0, r8
 800aada:	f3af 8000 	nop.w
 800aade:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aae2:	4681      	mov	r9, r0
 800aae4:	d1d9      	bne.n	800aa9a <_svfiprintf_r+0x166>
 800aae6:	89ab      	ldrh	r3, [r5, #12]
 800aae8:	065b      	lsls	r3, r3, #25
 800aaea:	f53f af38 	bmi.w	800a95e <_svfiprintf_r+0x2a>
 800aaee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaf0:	b01d      	add	sp, #116	; 0x74
 800aaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf6:	ab03      	add	r3, sp, #12
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	462a      	mov	r2, r5
 800aafc:	4b06      	ldr	r3, [pc, #24]	; (800ab18 <_svfiprintf_r+0x1e4>)
 800aafe:	a904      	add	r1, sp, #16
 800ab00:	4640      	mov	r0, r8
 800ab02:	f000 f881 	bl	800ac08 <_printf_i>
 800ab06:	e7ea      	b.n	800aade <_svfiprintf_r+0x1aa>
 800ab08:	0800bcd9 	.word	0x0800bcd9
 800ab0c:	0800bcdf 	.word	0x0800bcdf
 800ab10:	0800bce3 	.word	0x0800bce3
 800ab14:	00000000 	.word	0x00000000
 800ab18:	0800a87d 	.word	0x0800a87d

0800ab1c <_printf_common>:
 800ab1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab20:	4691      	mov	r9, r2
 800ab22:	461f      	mov	r7, r3
 800ab24:	688a      	ldr	r2, [r1, #8]
 800ab26:	690b      	ldr	r3, [r1, #16]
 800ab28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	bfb8      	it	lt
 800ab30:	4613      	movlt	r3, r2
 800ab32:	f8c9 3000 	str.w	r3, [r9]
 800ab36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab3a:	4606      	mov	r6, r0
 800ab3c:	460c      	mov	r4, r1
 800ab3e:	b112      	cbz	r2, 800ab46 <_printf_common+0x2a>
 800ab40:	3301      	adds	r3, #1
 800ab42:	f8c9 3000 	str.w	r3, [r9]
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	0699      	lsls	r1, r3, #26
 800ab4a:	bf42      	ittt	mi
 800ab4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ab50:	3302      	addmi	r3, #2
 800ab52:	f8c9 3000 	strmi.w	r3, [r9]
 800ab56:	6825      	ldr	r5, [r4, #0]
 800ab58:	f015 0506 	ands.w	r5, r5, #6
 800ab5c:	d107      	bne.n	800ab6e <_printf_common+0x52>
 800ab5e:	f104 0a19 	add.w	sl, r4, #25
 800ab62:	68e3      	ldr	r3, [r4, #12]
 800ab64:	f8d9 2000 	ldr.w	r2, [r9]
 800ab68:	1a9b      	subs	r3, r3, r2
 800ab6a:	429d      	cmp	r5, r3
 800ab6c:	db29      	blt.n	800abc2 <_printf_common+0xa6>
 800ab6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ab72:	6822      	ldr	r2, [r4, #0]
 800ab74:	3300      	adds	r3, #0
 800ab76:	bf18      	it	ne
 800ab78:	2301      	movne	r3, #1
 800ab7a:	0692      	lsls	r2, r2, #26
 800ab7c:	d42e      	bmi.n	800abdc <_printf_common+0xc0>
 800ab7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab82:	4639      	mov	r1, r7
 800ab84:	4630      	mov	r0, r6
 800ab86:	47c0      	blx	r8
 800ab88:	3001      	adds	r0, #1
 800ab8a:	d021      	beq.n	800abd0 <_printf_common+0xb4>
 800ab8c:	6823      	ldr	r3, [r4, #0]
 800ab8e:	68e5      	ldr	r5, [r4, #12]
 800ab90:	f8d9 2000 	ldr.w	r2, [r9]
 800ab94:	f003 0306 	and.w	r3, r3, #6
 800ab98:	2b04      	cmp	r3, #4
 800ab9a:	bf08      	it	eq
 800ab9c:	1aad      	subeq	r5, r5, r2
 800ab9e:	68a3      	ldr	r3, [r4, #8]
 800aba0:	6922      	ldr	r2, [r4, #16]
 800aba2:	bf0c      	ite	eq
 800aba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aba8:	2500      	movne	r5, #0
 800abaa:	4293      	cmp	r3, r2
 800abac:	bfc4      	itt	gt
 800abae:	1a9b      	subgt	r3, r3, r2
 800abb0:	18ed      	addgt	r5, r5, r3
 800abb2:	f04f 0900 	mov.w	r9, #0
 800abb6:	341a      	adds	r4, #26
 800abb8:	454d      	cmp	r5, r9
 800abba:	d11b      	bne.n	800abf4 <_printf_common+0xd8>
 800abbc:	2000      	movs	r0, #0
 800abbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc2:	2301      	movs	r3, #1
 800abc4:	4652      	mov	r2, sl
 800abc6:	4639      	mov	r1, r7
 800abc8:	4630      	mov	r0, r6
 800abca:	47c0      	blx	r8
 800abcc:	3001      	adds	r0, #1
 800abce:	d103      	bne.n	800abd8 <_printf_common+0xbc>
 800abd0:	f04f 30ff 	mov.w	r0, #4294967295
 800abd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abd8:	3501      	adds	r5, #1
 800abda:	e7c2      	b.n	800ab62 <_printf_common+0x46>
 800abdc:	18e1      	adds	r1, r4, r3
 800abde:	1c5a      	adds	r2, r3, #1
 800abe0:	2030      	movs	r0, #48	; 0x30
 800abe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abe6:	4422      	add	r2, r4
 800abe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abf0:	3302      	adds	r3, #2
 800abf2:	e7c4      	b.n	800ab7e <_printf_common+0x62>
 800abf4:	2301      	movs	r3, #1
 800abf6:	4622      	mov	r2, r4
 800abf8:	4639      	mov	r1, r7
 800abfa:	4630      	mov	r0, r6
 800abfc:	47c0      	blx	r8
 800abfe:	3001      	adds	r0, #1
 800ac00:	d0e6      	beq.n	800abd0 <_printf_common+0xb4>
 800ac02:	f109 0901 	add.w	r9, r9, #1
 800ac06:	e7d7      	b.n	800abb8 <_printf_common+0x9c>

0800ac08 <_printf_i>:
 800ac08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac0c:	4617      	mov	r7, r2
 800ac0e:	7e0a      	ldrb	r2, [r1, #24]
 800ac10:	b085      	sub	sp, #20
 800ac12:	2a6e      	cmp	r2, #110	; 0x6e
 800ac14:	4698      	mov	r8, r3
 800ac16:	4606      	mov	r6, r0
 800ac18:	460c      	mov	r4, r1
 800ac1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac1c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800ac20:	f000 80bc 	beq.w	800ad9c <_printf_i+0x194>
 800ac24:	d81a      	bhi.n	800ac5c <_printf_i+0x54>
 800ac26:	2a63      	cmp	r2, #99	; 0x63
 800ac28:	d02e      	beq.n	800ac88 <_printf_i+0x80>
 800ac2a:	d80a      	bhi.n	800ac42 <_printf_i+0x3a>
 800ac2c:	2a00      	cmp	r2, #0
 800ac2e:	f000 80c8 	beq.w	800adc2 <_printf_i+0x1ba>
 800ac32:	2a58      	cmp	r2, #88	; 0x58
 800ac34:	f000 808a 	beq.w	800ad4c <_printf_i+0x144>
 800ac38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac3c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800ac40:	e02a      	b.n	800ac98 <_printf_i+0x90>
 800ac42:	2a64      	cmp	r2, #100	; 0x64
 800ac44:	d001      	beq.n	800ac4a <_printf_i+0x42>
 800ac46:	2a69      	cmp	r2, #105	; 0x69
 800ac48:	d1f6      	bne.n	800ac38 <_printf_i+0x30>
 800ac4a:	6821      	ldr	r1, [r4, #0]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ac52:	d023      	beq.n	800ac9c <_printf_i+0x94>
 800ac54:	1d11      	adds	r1, r2, #4
 800ac56:	6019      	str	r1, [r3, #0]
 800ac58:	6813      	ldr	r3, [r2, #0]
 800ac5a:	e027      	b.n	800acac <_printf_i+0xa4>
 800ac5c:	2a73      	cmp	r2, #115	; 0x73
 800ac5e:	f000 80b4 	beq.w	800adca <_printf_i+0x1c2>
 800ac62:	d808      	bhi.n	800ac76 <_printf_i+0x6e>
 800ac64:	2a6f      	cmp	r2, #111	; 0x6f
 800ac66:	d02a      	beq.n	800acbe <_printf_i+0xb6>
 800ac68:	2a70      	cmp	r2, #112	; 0x70
 800ac6a:	d1e5      	bne.n	800ac38 <_printf_i+0x30>
 800ac6c:	680a      	ldr	r2, [r1, #0]
 800ac6e:	f042 0220 	orr.w	r2, r2, #32
 800ac72:	600a      	str	r2, [r1, #0]
 800ac74:	e003      	b.n	800ac7e <_printf_i+0x76>
 800ac76:	2a75      	cmp	r2, #117	; 0x75
 800ac78:	d021      	beq.n	800acbe <_printf_i+0xb6>
 800ac7a:	2a78      	cmp	r2, #120	; 0x78
 800ac7c:	d1dc      	bne.n	800ac38 <_printf_i+0x30>
 800ac7e:	2278      	movs	r2, #120	; 0x78
 800ac80:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800ac84:	496e      	ldr	r1, [pc, #440]	; (800ae40 <_printf_i+0x238>)
 800ac86:	e064      	b.n	800ad52 <_printf_i+0x14a>
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800ac8e:	1d11      	adds	r1, r2, #4
 800ac90:	6019      	str	r1, [r3, #0]
 800ac92:	6813      	ldr	r3, [r2, #0]
 800ac94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e0a3      	b.n	800ade4 <_printf_i+0x1dc>
 800ac9c:	f011 0f40 	tst.w	r1, #64	; 0x40
 800aca0:	f102 0104 	add.w	r1, r2, #4
 800aca4:	6019      	str	r1, [r3, #0]
 800aca6:	d0d7      	beq.n	800ac58 <_printf_i+0x50>
 800aca8:	f9b2 3000 	ldrsh.w	r3, [r2]
 800acac:	2b00      	cmp	r3, #0
 800acae:	da03      	bge.n	800acb8 <_printf_i+0xb0>
 800acb0:	222d      	movs	r2, #45	; 0x2d
 800acb2:	425b      	negs	r3, r3
 800acb4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800acb8:	4962      	ldr	r1, [pc, #392]	; (800ae44 <_printf_i+0x23c>)
 800acba:	220a      	movs	r2, #10
 800acbc:	e017      	b.n	800acee <_printf_i+0xe6>
 800acbe:	6820      	ldr	r0, [r4, #0]
 800acc0:	6819      	ldr	r1, [r3, #0]
 800acc2:	f010 0f80 	tst.w	r0, #128	; 0x80
 800acc6:	d003      	beq.n	800acd0 <_printf_i+0xc8>
 800acc8:	1d08      	adds	r0, r1, #4
 800acca:	6018      	str	r0, [r3, #0]
 800accc:	680b      	ldr	r3, [r1, #0]
 800acce:	e006      	b.n	800acde <_printf_i+0xd6>
 800acd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800acd4:	f101 0004 	add.w	r0, r1, #4
 800acd8:	6018      	str	r0, [r3, #0]
 800acda:	d0f7      	beq.n	800accc <_printf_i+0xc4>
 800acdc:	880b      	ldrh	r3, [r1, #0]
 800acde:	4959      	ldr	r1, [pc, #356]	; (800ae44 <_printf_i+0x23c>)
 800ace0:	2a6f      	cmp	r2, #111	; 0x6f
 800ace2:	bf14      	ite	ne
 800ace4:	220a      	movne	r2, #10
 800ace6:	2208      	moveq	r2, #8
 800ace8:	2000      	movs	r0, #0
 800acea:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800acee:	6865      	ldr	r5, [r4, #4]
 800acf0:	60a5      	str	r5, [r4, #8]
 800acf2:	2d00      	cmp	r5, #0
 800acf4:	f2c0 809c 	blt.w	800ae30 <_printf_i+0x228>
 800acf8:	6820      	ldr	r0, [r4, #0]
 800acfa:	f020 0004 	bic.w	r0, r0, #4
 800acfe:	6020      	str	r0, [r4, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d13f      	bne.n	800ad84 <_printf_i+0x17c>
 800ad04:	2d00      	cmp	r5, #0
 800ad06:	f040 8095 	bne.w	800ae34 <_printf_i+0x22c>
 800ad0a:	4675      	mov	r5, lr
 800ad0c:	2a08      	cmp	r2, #8
 800ad0e:	d10b      	bne.n	800ad28 <_printf_i+0x120>
 800ad10:	6823      	ldr	r3, [r4, #0]
 800ad12:	07da      	lsls	r2, r3, #31
 800ad14:	d508      	bpl.n	800ad28 <_printf_i+0x120>
 800ad16:	6923      	ldr	r3, [r4, #16]
 800ad18:	6862      	ldr	r2, [r4, #4]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	bfde      	ittt	le
 800ad1e:	2330      	movle	r3, #48	; 0x30
 800ad20:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad24:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad28:	ebae 0305 	sub.w	r3, lr, r5
 800ad2c:	6123      	str	r3, [r4, #16]
 800ad2e:	f8cd 8000 	str.w	r8, [sp]
 800ad32:	463b      	mov	r3, r7
 800ad34:	aa03      	add	r2, sp, #12
 800ad36:	4621      	mov	r1, r4
 800ad38:	4630      	mov	r0, r6
 800ad3a:	f7ff feef 	bl	800ab1c <_printf_common>
 800ad3e:	3001      	adds	r0, #1
 800ad40:	d155      	bne.n	800adee <_printf_i+0x1e6>
 800ad42:	f04f 30ff 	mov.w	r0, #4294967295
 800ad46:	b005      	add	sp, #20
 800ad48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad4c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800ad50:	493c      	ldr	r1, [pc, #240]	; (800ae44 <_printf_i+0x23c>)
 800ad52:	6822      	ldr	r2, [r4, #0]
 800ad54:	6818      	ldr	r0, [r3, #0]
 800ad56:	f012 0f80 	tst.w	r2, #128	; 0x80
 800ad5a:	f100 0504 	add.w	r5, r0, #4
 800ad5e:	601d      	str	r5, [r3, #0]
 800ad60:	d001      	beq.n	800ad66 <_printf_i+0x15e>
 800ad62:	6803      	ldr	r3, [r0, #0]
 800ad64:	e002      	b.n	800ad6c <_printf_i+0x164>
 800ad66:	0655      	lsls	r5, r2, #25
 800ad68:	d5fb      	bpl.n	800ad62 <_printf_i+0x15a>
 800ad6a:	8803      	ldrh	r3, [r0, #0]
 800ad6c:	07d0      	lsls	r0, r2, #31
 800ad6e:	bf44      	itt	mi
 800ad70:	f042 0220 	orrmi.w	r2, r2, #32
 800ad74:	6022      	strmi	r2, [r4, #0]
 800ad76:	b91b      	cbnz	r3, 800ad80 <_printf_i+0x178>
 800ad78:	6822      	ldr	r2, [r4, #0]
 800ad7a:	f022 0220 	bic.w	r2, r2, #32
 800ad7e:	6022      	str	r2, [r4, #0]
 800ad80:	2210      	movs	r2, #16
 800ad82:	e7b1      	b.n	800ace8 <_printf_i+0xe0>
 800ad84:	4675      	mov	r5, lr
 800ad86:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad8a:	fb02 3310 	mls	r3, r2, r0, r3
 800ad8e:	5ccb      	ldrb	r3, [r1, r3]
 800ad90:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ad94:	4603      	mov	r3, r0
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d1f5      	bne.n	800ad86 <_printf_i+0x17e>
 800ad9a:	e7b7      	b.n	800ad0c <_printf_i+0x104>
 800ad9c:	6808      	ldr	r0, [r1, #0]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	6949      	ldr	r1, [r1, #20]
 800ada2:	f010 0f80 	tst.w	r0, #128	; 0x80
 800ada6:	d004      	beq.n	800adb2 <_printf_i+0x1aa>
 800ada8:	1d10      	adds	r0, r2, #4
 800adaa:	6018      	str	r0, [r3, #0]
 800adac:	6813      	ldr	r3, [r2, #0]
 800adae:	6019      	str	r1, [r3, #0]
 800adb0:	e007      	b.n	800adc2 <_printf_i+0x1ba>
 800adb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800adb6:	f102 0004 	add.w	r0, r2, #4
 800adba:	6018      	str	r0, [r3, #0]
 800adbc:	6813      	ldr	r3, [r2, #0]
 800adbe:	d0f6      	beq.n	800adae <_printf_i+0x1a6>
 800adc0:	8019      	strh	r1, [r3, #0]
 800adc2:	2300      	movs	r3, #0
 800adc4:	6123      	str	r3, [r4, #16]
 800adc6:	4675      	mov	r5, lr
 800adc8:	e7b1      	b.n	800ad2e <_printf_i+0x126>
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	1d11      	adds	r1, r2, #4
 800adce:	6019      	str	r1, [r3, #0]
 800add0:	6815      	ldr	r5, [r2, #0]
 800add2:	6862      	ldr	r2, [r4, #4]
 800add4:	2100      	movs	r1, #0
 800add6:	4628      	mov	r0, r5
 800add8:	f7f5 fa12 	bl	8000200 <memchr>
 800addc:	b108      	cbz	r0, 800ade2 <_printf_i+0x1da>
 800adde:	1b40      	subs	r0, r0, r5
 800ade0:	6060      	str	r0, [r4, #4]
 800ade2:	6863      	ldr	r3, [r4, #4]
 800ade4:	6123      	str	r3, [r4, #16]
 800ade6:	2300      	movs	r3, #0
 800ade8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adec:	e79f      	b.n	800ad2e <_printf_i+0x126>
 800adee:	6923      	ldr	r3, [r4, #16]
 800adf0:	462a      	mov	r2, r5
 800adf2:	4639      	mov	r1, r7
 800adf4:	4630      	mov	r0, r6
 800adf6:	47c0      	blx	r8
 800adf8:	3001      	adds	r0, #1
 800adfa:	d0a2      	beq.n	800ad42 <_printf_i+0x13a>
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	079b      	lsls	r3, r3, #30
 800ae00:	d507      	bpl.n	800ae12 <_printf_i+0x20a>
 800ae02:	2500      	movs	r5, #0
 800ae04:	f104 0919 	add.w	r9, r4, #25
 800ae08:	68e3      	ldr	r3, [r4, #12]
 800ae0a:	9a03      	ldr	r2, [sp, #12]
 800ae0c:	1a9b      	subs	r3, r3, r2
 800ae0e:	429d      	cmp	r5, r3
 800ae10:	db05      	blt.n	800ae1e <_printf_i+0x216>
 800ae12:	68e0      	ldr	r0, [r4, #12]
 800ae14:	9b03      	ldr	r3, [sp, #12]
 800ae16:	4298      	cmp	r0, r3
 800ae18:	bfb8      	it	lt
 800ae1a:	4618      	movlt	r0, r3
 800ae1c:	e793      	b.n	800ad46 <_printf_i+0x13e>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	464a      	mov	r2, r9
 800ae22:	4639      	mov	r1, r7
 800ae24:	4630      	mov	r0, r6
 800ae26:	47c0      	blx	r8
 800ae28:	3001      	adds	r0, #1
 800ae2a:	d08a      	beq.n	800ad42 <_printf_i+0x13a>
 800ae2c:	3501      	adds	r5, #1
 800ae2e:	e7eb      	b.n	800ae08 <_printf_i+0x200>
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d1a7      	bne.n	800ad84 <_printf_i+0x17c>
 800ae34:	780b      	ldrb	r3, [r1, #0]
 800ae36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae3e:	e765      	b.n	800ad0c <_printf_i+0x104>
 800ae40:	0800bcfb 	.word	0x0800bcfb
 800ae44:	0800bcea 	.word	0x0800bcea

0800ae48 <_sbrk_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4c06      	ldr	r4, [pc, #24]	; (800ae64 <_sbrk_r+0x1c>)
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4605      	mov	r5, r0
 800ae50:	4608      	mov	r0, r1
 800ae52:	6023      	str	r3, [r4, #0]
 800ae54:	f7fe fbf8 	bl	8009648 <_sbrk>
 800ae58:	1c43      	adds	r3, r0, #1
 800ae5a:	d102      	bne.n	800ae62 <_sbrk_r+0x1a>
 800ae5c:	6823      	ldr	r3, [r4, #0]
 800ae5e:	b103      	cbz	r3, 800ae62 <_sbrk_r+0x1a>
 800ae60:	602b      	str	r3, [r5, #0]
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
 800ae64:	20019320 	.word	0x20019320

0800ae68 <siscanf>:
 800ae68:	b40e      	push	{r1, r2, r3}
 800ae6a:	b530      	push	{r4, r5, lr}
 800ae6c:	b09c      	sub	sp, #112	; 0x70
 800ae6e:	ac1f      	add	r4, sp, #124	; 0x7c
 800ae70:	f44f 7201 	mov.w	r2, #516	; 0x204
 800ae74:	f854 5b04 	ldr.w	r5, [r4], #4
 800ae78:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ae7c:	9002      	str	r0, [sp, #8]
 800ae7e:	9006      	str	r0, [sp, #24]
 800ae80:	f7f5 f9b0 	bl	80001e4 <strlen>
 800ae84:	4b0b      	ldr	r3, [pc, #44]	; (800aeb4 <siscanf+0x4c>)
 800ae86:	9003      	str	r0, [sp, #12]
 800ae88:	9007      	str	r0, [sp, #28]
 800ae8a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae8c:	480a      	ldr	r0, [pc, #40]	; (800aeb8 <siscanf+0x50>)
 800ae8e:	9401      	str	r4, [sp, #4]
 800ae90:	2300      	movs	r3, #0
 800ae92:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae94:	9314      	str	r3, [sp, #80]	; 0x50
 800ae96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae9a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ae9e:	462a      	mov	r2, r5
 800aea0:	4623      	mov	r3, r4
 800aea2:	a902      	add	r1, sp, #8
 800aea4:	6800      	ldr	r0, [r0, #0]
 800aea6:	f000 f94f 	bl	800b148 <__ssvfiscanf_r>
 800aeaa:	b01c      	add	sp, #112	; 0x70
 800aeac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aeb0:	b003      	add	sp, #12
 800aeb2:	4770      	bx	lr
 800aeb4:	0800aebd 	.word	0x0800aebd
 800aeb8:	20000010 	.word	0x20000010

0800aebc <__seofread>:
 800aebc:	2000      	movs	r0, #0
 800aebe:	4770      	bx	lr

0800aec0 <_strtoul_l.isra.0>:
 800aec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec4:	4680      	mov	r8, r0
 800aec6:	4689      	mov	r9, r1
 800aec8:	4692      	mov	sl, r2
 800aeca:	461e      	mov	r6, r3
 800aecc:	460f      	mov	r7, r1
 800aece:	463d      	mov	r5, r7
 800aed0:	9808      	ldr	r0, [sp, #32]
 800aed2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aed6:	f7fe fd31 	bl	800993c <__locale_ctype_ptr_l>
 800aeda:	4420      	add	r0, r4
 800aedc:	7843      	ldrb	r3, [r0, #1]
 800aede:	f013 0308 	ands.w	r3, r3, #8
 800aee2:	d10a      	bne.n	800aefa <_strtoul_l.isra.0+0x3a>
 800aee4:	2c2d      	cmp	r4, #45	; 0x2d
 800aee6:	d10a      	bne.n	800aefe <_strtoul_l.isra.0+0x3e>
 800aee8:	782c      	ldrb	r4, [r5, #0]
 800aeea:	2301      	movs	r3, #1
 800aeec:	1cbd      	adds	r5, r7, #2
 800aeee:	b15e      	cbz	r6, 800af08 <_strtoul_l.isra.0+0x48>
 800aef0:	2e10      	cmp	r6, #16
 800aef2:	d113      	bne.n	800af1c <_strtoul_l.isra.0+0x5c>
 800aef4:	2c30      	cmp	r4, #48	; 0x30
 800aef6:	d009      	beq.n	800af0c <_strtoul_l.isra.0+0x4c>
 800aef8:	e010      	b.n	800af1c <_strtoul_l.isra.0+0x5c>
 800aefa:	462f      	mov	r7, r5
 800aefc:	e7e7      	b.n	800aece <_strtoul_l.isra.0+0xe>
 800aefe:	2c2b      	cmp	r4, #43	; 0x2b
 800af00:	bf04      	itt	eq
 800af02:	782c      	ldrbeq	r4, [r5, #0]
 800af04:	1cbd      	addeq	r5, r7, #2
 800af06:	e7f2      	b.n	800aeee <_strtoul_l.isra.0+0x2e>
 800af08:	2c30      	cmp	r4, #48	; 0x30
 800af0a:	d125      	bne.n	800af58 <_strtoul_l.isra.0+0x98>
 800af0c:	782a      	ldrb	r2, [r5, #0]
 800af0e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800af12:	2a58      	cmp	r2, #88	; 0x58
 800af14:	d14a      	bne.n	800afac <_strtoul_l.isra.0+0xec>
 800af16:	786c      	ldrb	r4, [r5, #1]
 800af18:	2610      	movs	r6, #16
 800af1a:	3502      	adds	r5, #2
 800af1c:	f04f 31ff 	mov.w	r1, #4294967295
 800af20:	2700      	movs	r7, #0
 800af22:	fbb1 f1f6 	udiv	r1, r1, r6
 800af26:	fb06 fe01 	mul.w	lr, r6, r1
 800af2a:	ea6f 0e0e 	mvn.w	lr, lr
 800af2e:	4638      	mov	r0, r7
 800af30:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800af34:	2a09      	cmp	r2, #9
 800af36:	d811      	bhi.n	800af5c <_strtoul_l.isra.0+0x9c>
 800af38:	4614      	mov	r4, r2
 800af3a:	42a6      	cmp	r6, r4
 800af3c:	dd1d      	ble.n	800af7a <_strtoul_l.isra.0+0xba>
 800af3e:	2f00      	cmp	r7, #0
 800af40:	db18      	blt.n	800af74 <_strtoul_l.isra.0+0xb4>
 800af42:	4281      	cmp	r1, r0
 800af44:	d316      	bcc.n	800af74 <_strtoul_l.isra.0+0xb4>
 800af46:	d101      	bne.n	800af4c <_strtoul_l.isra.0+0x8c>
 800af48:	45a6      	cmp	lr, r4
 800af4a:	db13      	blt.n	800af74 <_strtoul_l.isra.0+0xb4>
 800af4c:	fb00 4006 	mla	r0, r0, r6, r4
 800af50:	2701      	movs	r7, #1
 800af52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af56:	e7eb      	b.n	800af30 <_strtoul_l.isra.0+0x70>
 800af58:	260a      	movs	r6, #10
 800af5a:	e7df      	b.n	800af1c <_strtoul_l.isra.0+0x5c>
 800af5c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800af60:	2a19      	cmp	r2, #25
 800af62:	d801      	bhi.n	800af68 <_strtoul_l.isra.0+0xa8>
 800af64:	3c37      	subs	r4, #55	; 0x37
 800af66:	e7e8      	b.n	800af3a <_strtoul_l.isra.0+0x7a>
 800af68:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800af6c:	2a19      	cmp	r2, #25
 800af6e:	d804      	bhi.n	800af7a <_strtoul_l.isra.0+0xba>
 800af70:	3c57      	subs	r4, #87	; 0x57
 800af72:	e7e2      	b.n	800af3a <_strtoul_l.isra.0+0x7a>
 800af74:	f04f 37ff 	mov.w	r7, #4294967295
 800af78:	e7eb      	b.n	800af52 <_strtoul_l.isra.0+0x92>
 800af7a:	2f00      	cmp	r7, #0
 800af7c:	da09      	bge.n	800af92 <_strtoul_l.isra.0+0xd2>
 800af7e:	2322      	movs	r3, #34	; 0x22
 800af80:	f8c8 3000 	str.w	r3, [r8]
 800af84:	f04f 30ff 	mov.w	r0, #4294967295
 800af88:	f1ba 0f00 	cmp.w	sl, #0
 800af8c:	d107      	bne.n	800af9e <_strtoul_l.isra.0+0xde>
 800af8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af92:	b103      	cbz	r3, 800af96 <_strtoul_l.isra.0+0xd6>
 800af94:	4240      	negs	r0, r0
 800af96:	f1ba 0f00 	cmp.w	sl, #0
 800af9a:	d00c      	beq.n	800afb6 <_strtoul_l.isra.0+0xf6>
 800af9c:	b127      	cbz	r7, 800afa8 <_strtoul_l.isra.0+0xe8>
 800af9e:	3d01      	subs	r5, #1
 800afa0:	f8ca 5000 	str.w	r5, [sl]
 800afa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa8:	464d      	mov	r5, r9
 800afaa:	e7f9      	b.n	800afa0 <_strtoul_l.isra.0+0xe0>
 800afac:	2430      	movs	r4, #48	; 0x30
 800afae:	2e00      	cmp	r6, #0
 800afb0:	d1b4      	bne.n	800af1c <_strtoul_l.isra.0+0x5c>
 800afb2:	2608      	movs	r6, #8
 800afb4:	e7b2      	b.n	800af1c <_strtoul_l.isra.0+0x5c>
 800afb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800afbc <_strtoul_r>:
 800afbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afbe:	4c06      	ldr	r4, [pc, #24]	; (800afd8 <_strtoul_r+0x1c>)
 800afc0:	4d06      	ldr	r5, [pc, #24]	; (800afdc <_strtoul_r+0x20>)
 800afc2:	6824      	ldr	r4, [r4, #0]
 800afc4:	6a24      	ldr	r4, [r4, #32]
 800afc6:	2c00      	cmp	r4, #0
 800afc8:	bf08      	it	eq
 800afca:	462c      	moveq	r4, r5
 800afcc:	9400      	str	r4, [sp, #0]
 800afce:	f7ff ff77 	bl	800aec0 <_strtoul_l.isra.0>
 800afd2:	b003      	add	sp, #12
 800afd4:	bd30      	pop	{r4, r5, pc}
 800afd6:	bf00      	nop
 800afd8:	20000010 	.word	0x20000010
 800afdc:	20000074 	.word	0x20000074

0800afe0 <strtoul>:
 800afe0:	4b08      	ldr	r3, [pc, #32]	; (800b004 <strtoul+0x24>)
 800afe2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afe4:	681c      	ldr	r4, [r3, #0]
 800afe6:	4d08      	ldr	r5, [pc, #32]	; (800b008 <strtoul+0x28>)
 800afe8:	6a23      	ldr	r3, [r4, #32]
 800afea:	2b00      	cmp	r3, #0
 800afec:	bf08      	it	eq
 800afee:	462b      	moveq	r3, r5
 800aff0:	9300      	str	r3, [sp, #0]
 800aff2:	4613      	mov	r3, r2
 800aff4:	460a      	mov	r2, r1
 800aff6:	4601      	mov	r1, r0
 800aff8:	4620      	mov	r0, r4
 800affa:	f7ff ff61 	bl	800aec0 <_strtoul_l.isra.0>
 800affe:	b003      	add	sp, #12
 800b000:	bd30      	pop	{r4, r5, pc}
 800b002:	bf00      	nop
 800b004:	20000010 	.word	0x20000010
 800b008:	20000074 	.word	0x20000074

0800b00c <__env_lock>:
 800b00c:	4770      	bx	lr

0800b00e <__env_unlock>:
 800b00e:	4770      	bx	lr

0800b010 <memmove>:
 800b010:	4288      	cmp	r0, r1
 800b012:	b510      	push	{r4, lr}
 800b014:	eb01 0302 	add.w	r3, r1, r2
 800b018:	d803      	bhi.n	800b022 <memmove+0x12>
 800b01a:	1e42      	subs	r2, r0, #1
 800b01c:	4299      	cmp	r1, r3
 800b01e:	d10c      	bne.n	800b03a <memmove+0x2a>
 800b020:	bd10      	pop	{r4, pc}
 800b022:	4298      	cmp	r0, r3
 800b024:	d2f9      	bcs.n	800b01a <memmove+0xa>
 800b026:	1881      	adds	r1, r0, r2
 800b028:	1ad2      	subs	r2, r2, r3
 800b02a:	42d3      	cmn	r3, r2
 800b02c:	d100      	bne.n	800b030 <memmove+0x20>
 800b02e:	bd10      	pop	{r4, pc}
 800b030:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b034:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b038:	e7f7      	b.n	800b02a <memmove+0x1a>
 800b03a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b03e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b042:	e7eb      	b.n	800b01c <memmove+0xc>

0800b044 <__malloc_lock>:
 800b044:	4770      	bx	lr

0800b046 <__malloc_unlock>:
 800b046:	4770      	bx	lr

0800b048 <_realloc_r>:
 800b048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04a:	4607      	mov	r7, r0
 800b04c:	4614      	mov	r4, r2
 800b04e:	460e      	mov	r6, r1
 800b050:	b921      	cbnz	r1, 800b05c <_realloc_r+0x14>
 800b052:	4611      	mov	r1, r2
 800b054:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b058:	f7ff bbb2 	b.w	800a7c0 <_malloc_r>
 800b05c:	b922      	cbnz	r2, 800b068 <_realloc_r+0x20>
 800b05e:	f7ff fb61 	bl	800a724 <_free_r>
 800b062:	4625      	mov	r5, r4
 800b064:	4628      	mov	r0, r5
 800b066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b068:	f000 fb85 	bl	800b776 <_malloc_usable_size_r>
 800b06c:	4284      	cmp	r4, r0
 800b06e:	d90f      	bls.n	800b090 <_realloc_r+0x48>
 800b070:	4621      	mov	r1, r4
 800b072:	4638      	mov	r0, r7
 800b074:	f7ff fba4 	bl	800a7c0 <_malloc_r>
 800b078:	4605      	mov	r5, r0
 800b07a:	2800      	cmp	r0, #0
 800b07c:	d0f2      	beq.n	800b064 <_realloc_r+0x1c>
 800b07e:	4631      	mov	r1, r6
 800b080:	4622      	mov	r2, r4
 800b082:	f7fe fc8e 	bl	80099a2 <memcpy>
 800b086:	4631      	mov	r1, r6
 800b088:	4638      	mov	r0, r7
 800b08a:	f7ff fb4b 	bl	800a724 <_free_r>
 800b08e:	e7e9      	b.n	800b064 <_realloc_r+0x1c>
 800b090:	4635      	mov	r5, r6
 800b092:	e7e7      	b.n	800b064 <_realloc_r+0x1c>

0800b094 <_sungetc_r>:
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	1c4b      	adds	r3, r1, #1
 800b098:	4614      	mov	r4, r2
 800b09a:	d103      	bne.n	800b0a4 <_sungetc_r+0x10>
 800b09c:	f04f 35ff 	mov.w	r5, #4294967295
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}
 800b0a4:	8993      	ldrh	r3, [r2, #12]
 800b0a6:	f023 0320 	bic.w	r3, r3, #32
 800b0aa:	8193      	strh	r3, [r2, #12]
 800b0ac:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800b0ae:	6852      	ldr	r2, [r2, #4]
 800b0b0:	b2cd      	uxtb	r5, r1
 800b0b2:	b18b      	cbz	r3, 800b0d8 <_sungetc_r+0x44>
 800b0b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	da08      	bge.n	800b0cc <_sungetc_r+0x38>
 800b0ba:	6823      	ldr	r3, [r4, #0]
 800b0bc:	1e5a      	subs	r2, r3, #1
 800b0be:	6022      	str	r2, [r4, #0]
 800b0c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b0c4:	6863      	ldr	r3, [r4, #4]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	6063      	str	r3, [r4, #4]
 800b0ca:	e7e9      	b.n	800b0a0 <_sungetc_r+0xc>
 800b0cc:	4621      	mov	r1, r4
 800b0ce:	f000 fb17 	bl	800b700 <__submore>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	d0f1      	beq.n	800b0ba <_sungetc_r+0x26>
 800b0d6:	e7e1      	b.n	800b09c <_sungetc_r+0x8>
 800b0d8:	6921      	ldr	r1, [r4, #16]
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	b151      	cbz	r1, 800b0f4 <_sungetc_r+0x60>
 800b0de:	4299      	cmp	r1, r3
 800b0e0:	d208      	bcs.n	800b0f4 <_sungetc_r+0x60>
 800b0e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b0e6:	428d      	cmp	r5, r1
 800b0e8:	d104      	bne.n	800b0f4 <_sungetc_r+0x60>
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	3201      	adds	r2, #1
 800b0ee:	6023      	str	r3, [r4, #0]
 800b0f0:	6062      	str	r2, [r4, #4]
 800b0f2:	e7d5      	b.n	800b0a0 <_sungetc_r+0xc>
 800b0f4:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b0f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0fa:	6363      	str	r3, [r4, #52]	; 0x34
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	63a3      	str	r3, [r4, #56]	; 0x38
 800b100:	4623      	mov	r3, r4
 800b102:	6422      	str	r2, [r4, #64]	; 0x40
 800b104:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b108:	6023      	str	r3, [r4, #0]
 800b10a:	2301      	movs	r3, #1
 800b10c:	e7dc      	b.n	800b0c8 <_sungetc_r+0x34>

0800b10e <__ssrefill_r>:
 800b10e:	b510      	push	{r4, lr}
 800b110:	460c      	mov	r4, r1
 800b112:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b114:	b169      	cbz	r1, 800b132 <__ssrefill_r+0x24>
 800b116:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b11a:	4299      	cmp	r1, r3
 800b11c:	d001      	beq.n	800b122 <__ssrefill_r+0x14>
 800b11e:	f7ff fb01 	bl	800a724 <_free_r>
 800b122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b124:	6063      	str	r3, [r4, #4]
 800b126:	2000      	movs	r0, #0
 800b128:	6360      	str	r0, [r4, #52]	; 0x34
 800b12a:	b113      	cbz	r3, 800b132 <__ssrefill_r+0x24>
 800b12c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b12e:	6023      	str	r3, [r4, #0]
 800b130:	bd10      	pop	{r4, pc}
 800b132:	6923      	ldr	r3, [r4, #16]
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	2300      	movs	r3, #0
 800b138:	6063      	str	r3, [r4, #4]
 800b13a:	89a3      	ldrh	r3, [r4, #12]
 800b13c:	f043 0320 	orr.w	r3, r3, #32
 800b140:	81a3      	strh	r3, [r4, #12]
 800b142:	f04f 30ff 	mov.w	r0, #4294967295
 800b146:	bd10      	pop	{r4, pc}

0800b148 <__ssvfiscanf_r>:
 800b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800b150:	f10d 080c 	add.w	r8, sp, #12
 800b154:	9301      	str	r3, [sp, #4]
 800b156:	2300      	movs	r3, #0
 800b158:	9346      	str	r3, [sp, #280]	; 0x118
 800b15a:	9347      	str	r3, [sp, #284]	; 0x11c
 800b15c:	4ba0      	ldr	r3, [pc, #640]	; (800b3e0 <__ssvfiscanf_r+0x298>)
 800b15e:	93a2      	str	r3, [sp, #648]	; 0x288
 800b160:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800b3e8 <__ssvfiscanf_r+0x2a0>
 800b164:	4b9f      	ldr	r3, [pc, #636]	; (800b3e4 <__ssvfiscanf_r+0x29c>)
 800b166:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800b16a:	4606      	mov	r6, r0
 800b16c:	460c      	mov	r4, r1
 800b16e:	93a3      	str	r3, [sp, #652]	; 0x28c
 800b170:	4692      	mov	sl, r2
 800b172:	270a      	movs	r7, #10
 800b174:	f89a 3000 	ldrb.w	r3, [sl]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f000 812f 	beq.w	800b3dc <__ssvfiscanf_r+0x294>
 800b17e:	f7fe fbe1 	bl	8009944 <__locale_ctype_ptr>
 800b182:	f89a b000 	ldrb.w	fp, [sl]
 800b186:	4458      	add	r0, fp
 800b188:	7843      	ldrb	r3, [r0, #1]
 800b18a:	f013 0308 	ands.w	r3, r3, #8
 800b18e:	d143      	bne.n	800b218 <__ssvfiscanf_r+0xd0>
 800b190:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800b194:	f10a 0501 	add.w	r5, sl, #1
 800b198:	f040 8099 	bne.w	800b2ce <__ssvfiscanf_r+0x186>
 800b19c:	9345      	str	r3, [sp, #276]	; 0x114
 800b19e:	9343      	str	r3, [sp, #268]	; 0x10c
 800b1a0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800b1a4:	2b2a      	cmp	r3, #42	; 0x2a
 800b1a6:	d103      	bne.n	800b1b0 <__ssvfiscanf_r+0x68>
 800b1a8:	2310      	movs	r3, #16
 800b1aa:	9343      	str	r3, [sp, #268]	; 0x10c
 800b1ac:	f10a 0502 	add.w	r5, sl, #2
 800b1b0:	7829      	ldrb	r1, [r5, #0]
 800b1b2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b1b6:	2a09      	cmp	r2, #9
 800b1b8:	46aa      	mov	sl, r5
 800b1ba:	f105 0501 	add.w	r5, r5, #1
 800b1be:	d941      	bls.n	800b244 <__ssvfiscanf_r+0xfc>
 800b1c0:	2203      	movs	r2, #3
 800b1c2:	4889      	ldr	r0, [pc, #548]	; (800b3e8 <__ssvfiscanf_r+0x2a0>)
 800b1c4:	f7f5 f81c 	bl	8000200 <memchr>
 800b1c8:	b138      	cbz	r0, 800b1da <__ssvfiscanf_r+0x92>
 800b1ca:	eba0 0309 	sub.w	r3, r0, r9
 800b1ce:	2001      	movs	r0, #1
 800b1d0:	4098      	lsls	r0, r3
 800b1d2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b1d4:	4318      	orrs	r0, r3
 800b1d6:	9043      	str	r0, [sp, #268]	; 0x10c
 800b1d8:	46aa      	mov	sl, r5
 800b1da:	f89a 3000 	ldrb.w	r3, [sl]
 800b1de:	2b67      	cmp	r3, #103	; 0x67
 800b1e0:	f10a 0501 	add.w	r5, sl, #1
 800b1e4:	d84a      	bhi.n	800b27c <__ssvfiscanf_r+0x134>
 800b1e6:	2b65      	cmp	r3, #101	; 0x65
 800b1e8:	f080 80b7 	bcs.w	800b35a <__ssvfiscanf_r+0x212>
 800b1ec:	2b47      	cmp	r3, #71	; 0x47
 800b1ee:	d82f      	bhi.n	800b250 <__ssvfiscanf_r+0x108>
 800b1f0:	2b45      	cmp	r3, #69	; 0x45
 800b1f2:	f080 80b2 	bcs.w	800b35a <__ssvfiscanf_r+0x212>
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f000 8082 	beq.w	800b300 <__ssvfiscanf_r+0x1b8>
 800b1fc:	2b25      	cmp	r3, #37	; 0x25
 800b1fe:	d066      	beq.n	800b2ce <__ssvfiscanf_r+0x186>
 800b200:	2303      	movs	r3, #3
 800b202:	9349      	str	r3, [sp, #292]	; 0x124
 800b204:	9744      	str	r7, [sp, #272]	; 0x110
 800b206:	e045      	b.n	800b294 <__ssvfiscanf_r+0x14c>
 800b208:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800b20a:	3101      	adds	r1, #1
 800b20c:	9147      	str	r1, [sp, #284]	; 0x11c
 800b20e:	6861      	ldr	r1, [r4, #4]
 800b210:	3301      	adds	r3, #1
 800b212:	3901      	subs	r1, #1
 800b214:	6061      	str	r1, [r4, #4]
 800b216:	6023      	str	r3, [r4, #0]
 800b218:	6863      	ldr	r3, [r4, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	dd0b      	ble.n	800b236 <__ssvfiscanf_r+0xee>
 800b21e:	f7fe fb91 	bl	8009944 <__locale_ctype_ptr>
 800b222:	6823      	ldr	r3, [r4, #0]
 800b224:	7819      	ldrb	r1, [r3, #0]
 800b226:	4408      	add	r0, r1
 800b228:	7841      	ldrb	r1, [r0, #1]
 800b22a:	070d      	lsls	r5, r1, #28
 800b22c:	d4ec      	bmi.n	800b208 <__ssvfiscanf_r+0xc0>
 800b22e:	f10a 0501 	add.w	r5, sl, #1
 800b232:	46aa      	mov	sl, r5
 800b234:	e79e      	b.n	800b174 <__ssvfiscanf_r+0x2c>
 800b236:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b238:	4621      	mov	r1, r4
 800b23a:	4630      	mov	r0, r6
 800b23c:	4798      	blx	r3
 800b23e:	2800      	cmp	r0, #0
 800b240:	d0ed      	beq.n	800b21e <__ssvfiscanf_r+0xd6>
 800b242:	e7f4      	b.n	800b22e <__ssvfiscanf_r+0xe6>
 800b244:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b246:	fb07 1303 	mla	r3, r7, r3, r1
 800b24a:	3b30      	subs	r3, #48	; 0x30
 800b24c:	9345      	str	r3, [sp, #276]	; 0x114
 800b24e:	e7af      	b.n	800b1b0 <__ssvfiscanf_r+0x68>
 800b250:	2b5b      	cmp	r3, #91	; 0x5b
 800b252:	d061      	beq.n	800b318 <__ssvfiscanf_r+0x1d0>
 800b254:	d80c      	bhi.n	800b270 <__ssvfiscanf_r+0x128>
 800b256:	2b58      	cmp	r3, #88	; 0x58
 800b258:	d1d2      	bne.n	800b200 <__ssvfiscanf_r+0xb8>
 800b25a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800b25c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b260:	9243      	str	r2, [sp, #268]	; 0x10c
 800b262:	2210      	movs	r2, #16
 800b264:	9244      	str	r2, [sp, #272]	; 0x110
 800b266:	2b6f      	cmp	r3, #111	; 0x6f
 800b268:	bfb4      	ite	lt
 800b26a:	2303      	movlt	r3, #3
 800b26c:	2304      	movge	r3, #4
 800b26e:	e010      	b.n	800b292 <__ssvfiscanf_r+0x14a>
 800b270:	2b63      	cmp	r3, #99	; 0x63
 800b272:	d05c      	beq.n	800b32e <__ssvfiscanf_r+0x1e6>
 800b274:	2b64      	cmp	r3, #100	; 0x64
 800b276:	d1c3      	bne.n	800b200 <__ssvfiscanf_r+0xb8>
 800b278:	9744      	str	r7, [sp, #272]	; 0x110
 800b27a:	e7f4      	b.n	800b266 <__ssvfiscanf_r+0x11e>
 800b27c:	2b70      	cmp	r3, #112	; 0x70
 800b27e:	d042      	beq.n	800b306 <__ssvfiscanf_r+0x1be>
 800b280:	d81d      	bhi.n	800b2be <__ssvfiscanf_r+0x176>
 800b282:	2b6e      	cmp	r3, #110	; 0x6e
 800b284:	d059      	beq.n	800b33a <__ssvfiscanf_r+0x1f2>
 800b286:	d843      	bhi.n	800b310 <__ssvfiscanf_r+0x1c8>
 800b288:	2b69      	cmp	r3, #105	; 0x69
 800b28a:	d1b9      	bne.n	800b200 <__ssvfiscanf_r+0xb8>
 800b28c:	2300      	movs	r3, #0
 800b28e:	9344      	str	r3, [sp, #272]	; 0x110
 800b290:	2303      	movs	r3, #3
 800b292:	9349      	str	r3, [sp, #292]	; 0x124
 800b294:	6863      	ldr	r3, [r4, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	dd61      	ble.n	800b35e <__ssvfiscanf_r+0x216>
 800b29a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b29c:	0659      	lsls	r1, r3, #25
 800b29e:	d56f      	bpl.n	800b380 <__ssvfiscanf_r+0x238>
 800b2a0:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800b2a2:	2b02      	cmp	r3, #2
 800b2a4:	dc7c      	bgt.n	800b3a0 <__ssvfiscanf_r+0x258>
 800b2a6:	ab01      	add	r3, sp, #4
 800b2a8:	4622      	mov	r2, r4
 800b2aa:	a943      	add	r1, sp, #268	; 0x10c
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f000 f89f 	bl	800b3f0 <_scanf_chars>
 800b2b2:	2801      	cmp	r0, #1
 800b2b4:	f000 8092 	beq.w	800b3dc <__ssvfiscanf_r+0x294>
 800b2b8:	2802      	cmp	r0, #2
 800b2ba:	d1ba      	bne.n	800b232 <__ssvfiscanf_r+0xea>
 800b2bc:	e01d      	b.n	800b2fa <__ssvfiscanf_r+0x1b2>
 800b2be:	2b75      	cmp	r3, #117	; 0x75
 800b2c0:	d0da      	beq.n	800b278 <__ssvfiscanf_r+0x130>
 800b2c2:	2b78      	cmp	r3, #120	; 0x78
 800b2c4:	d0c9      	beq.n	800b25a <__ssvfiscanf_r+0x112>
 800b2c6:	2b73      	cmp	r3, #115	; 0x73
 800b2c8:	d19a      	bne.n	800b200 <__ssvfiscanf_r+0xb8>
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	e7e1      	b.n	800b292 <__ssvfiscanf_r+0x14a>
 800b2ce:	6863      	ldr	r3, [r4, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	dd0c      	ble.n	800b2ee <__ssvfiscanf_r+0x1a6>
 800b2d4:	6823      	ldr	r3, [r4, #0]
 800b2d6:	781a      	ldrb	r2, [r3, #0]
 800b2d8:	4593      	cmp	fp, r2
 800b2da:	d17f      	bne.n	800b3dc <__ssvfiscanf_r+0x294>
 800b2dc:	3301      	adds	r3, #1
 800b2de:	6862      	ldr	r2, [r4, #4]
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b2e4:	3a01      	subs	r2, #1
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	6062      	str	r2, [r4, #4]
 800b2ea:	9347      	str	r3, [sp, #284]	; 0x11c
 800b2ec:	e7a1      	b.n	800b232 <__ssvfiscanf_r+0xea>
 800b2ee:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	4798      	blx	r3
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	d0ec      	beq.n	800b2d4 <__ssvfiscanf_r+0x18c>
 800b2fa:	9846      	ldr	r0, [sp, #280]	; 0x118
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d163      	bne.n	800b3c8 <__ssvfiscanf_r+0x280>
 800b300:	f04f 30ff 	mov.w	r0, #4294967295
 800b304:	e066      	b.n	800b3d4 <__ssvfiscanf_r+0x28c>
 800b306:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800b308:	f042 0220 	orr.w	r2, r2, #32
 800b30c:	9243      	str	r2, [sp, #268]	; 0x10c
 800b30e:	e7a4      	b.n	800b25a <__ssvfiscanf_r+0x112>
 800b310:	2308      	movs	r3, #8
 800b312:	9344      	str	r3, [sp, #272]	; 0x110
 800b314:	2304      	movs	r3, #4
 800b316:	e7bc      	b.n	800b292 <__ssvfiscanf_r+0x14a>
 800b318:	4629      	mov	r1, r5
 800b31a:	4640      	mov	r0, r8
 800b31c:	f000 f9c0 	bl	800b6a0 <__sccl>
 800b320:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b326:	9343      	str	r3, [sp, #268]	; 0x10c
 800b328:	4605      	mov	r5, r0
 800b32a:	2301      	movs	r3, #1
 800b32c:	e7b1      	b.n	800b292 <__ssvfiscanf_r+0x14a>
 800b32e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b334:	9343      	str	r3, [sp, #268]	; 0x10c
 800b336:	2300      	movs	r3, #0
 800b338:	e7ab      	b.n	800b292 <__ssvfiscanf_r+0x14a>
 800b33a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800b33c:	06d0      	lsls	r0, r2, #27
 800b33e:	f53f af78 	bmi.w	800b232 <__ssvfiscanf_r+0xea>
 800b342:	f012 0f01 	tst.w	r2, #1
 800b346:	9a01      	ldr	r2, [sp, #4]
 800b348:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b34a:	f102 0104 	add.w	r1, r2, #4
 800b34e:	9101      	str	r1, [sp, #4]
 800b350:	6812      	ldr	r2, [r2, #0]
 800b352:	bf14      	ite	ne
 800b354:	8013      	strhne	r3, [r2, #0]
 800b356:	6013      	streq	r3, [r2, #0]
 800b358:	e76b      	b.n	800b232 <__ssvfiscanf_r+0xea>
 800b35a:	2305      	movs	r3, #5
 800b35c:	e799      	b.n	800b292 <__ssvfiscanf_r+0x14a>
 800b35e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b360:	4621      	mov	r1, r4
 800b362:	4630      	mov	r0, r6
 800b364:	4798      	blx	r3
 800b366:	2800      	cmp	r0, #0
 800b368:	d097      	beq.n	800b29a <__ssvfiscanf_r+0x152>
 800b36a:	e7c6      	b.n	800b2fa <__ssvfiscanf_r+0x1b2>
 800b36c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800b36e:	3201      	adds	r2, #1
 800b370:	9247      	str	r2, [sp, #284]	; 0x11c
 800b372:	6862      	ldr	r2, [r4, #4]
 800b374:	3a01      	subs	r2, #1
 800b376:	2a00      	cmp	r2, #0
 800b378:	6062      	str	r2, [r4, #4]
 800b37a:	dd0a      	ble.n	800b392 <__ssvfiscanf_r+0x24a>
 800b37c:	3301      	adds	r3, #1
 800b37e:	6023      	str	r3, [r4, #0]
 800b380:	f7fe fae0 	bl	8009944 <__locale_ctype_ptr>
 800b384:	6823      	ldr	r3, [r4, #0]
 800b386:	781a      	ldrb	r2, [r3, #0]
 800b388:	4410      	add	r0, r2
 800b38a:	7842      	ldrb	r2, [r0, #1]
 800b38c:	0712      	lsls	r2, r2, #28
 800b38e:	d4ed      	bmi.n	800b36c <__ssvfiscanf_r+0x224>
 800b390:	e786      	b.n	800b2a0 <__ssvfiscanf_r+0x158>
 800b392:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b394:	4621      	mov	r1, r4
 800b396:	4630      	mov	r0, r6
 800b398:	4798      	blx	r3
 800b39a:	2800      	cmp	r0, #0
 800b39c:	d0f0      	beq.n	800b380 <__ssvfiscanf_r+0x238>
 800b39e:	e7ac      	b.n	800b2fa <__ssvfiscanf_r+0x1b2>
 800b3a0:	2b04      	cmp	r3, #4
 800b3a2:	dc06      	bgt.n	800b3b2 <__ssvfiscanf_r+0x26a>
 800b3a4:	ab01      	add	r3, sp, #4
 800b3a6:	4622      	mov	r2, r4
 800b3a8:	a943      	add	r1, sp, #268	; 0x10c
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	f000 f884 	bl	800b4b8 <_scanf_i>
 800b3b0:	e77f      	b.n	800b2b2 <__ssvfiscanf_r+0x16a>
 800b3b2:	4b0e      	ldr	r3, [pc, #56]	; (800b3ec <__ssvfiscanf_r+0x2a4>)
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f43f af3c 	beq.w	800b232 <__ssvfiscanf_r+0xea>
 800b3ba:	ab01      	add	r3, sp, #4
 800b3bc:	4622      	mov	r2, r4
 800b3be:	a943      	add	r1, sp, #268	; 0x10c
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f3af 8000 	nop.w
 800b3c6:	e774      	b.n	800b2b2 <__ssvfiscanf_r+0x16a>
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b3ce:	bf18      	it	ne
 800b3d0:	f04f 30ff 	movne.w	r0, #4294967295
 800b3d4:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800b3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3dc:	9846      	ldr	r0, [sp, #280]	; 0x118
 800b3de:	e7f9      	b.n	800b3d4 <__ssvfiscanf_r+0x28c>
 800b3e0:	0800b095 	.word	0x0800b095
 800b3e4:	0800b10f 	.word	0x0800b10f
 800b3e8:	0800bcdf 	.word	0x0800bcdf
 800b3ec:	00000000 	.word	0x00000000

0800b3f0 <_scanf_chars>:
 800b3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f4:	4615      	mov	r5, r2
 800b3f6:	688a      	ldr	r2, [r1, #8]
 800b3f8:	4680      	mov	r8, r0
 800b3fa:	460c      	mov	r4, r1
 800b3fc:	b932      	cbnz	r2, 800b40c <_scanf_chars+0x1c>
 800b3fe:	698a      	ldr	r2, [r1, #24]
 800b400:	2a00      	cmp	r2, #0
 800b402:	bf0c      	ite	eq
 800b404:	2201      	moveq	r2, #1
 800b406:	f04f 32ff 	movne.w	r2, #4294967295
 800b40a:	608a      	str	r2, [r1, #8]
 800b40c:	6822      	ldr	r2, [r4, #0]
 800b40e:	06d1      	lsls	r1, r2, #27
 800b410:	bf5f      	itttt	pl
 800b412:	681a      	ldrpl	r2, [r3, #0]
 800b414:	1d11      	addpl	r1, r2, #4
 800b416:	6019      	strpl	r1, [r3, #0]
 800b418:	6817      	ldrpl	r7, [r2, #0]
 800b41a:	2600      	movs	r6, #0
 800b41c:	69a3      	ldr	r3, [r4, #24]
 800b41e:	b1db      	cbz	r3, 800b458 <_scanf_chars+0x68>
 800b420:	2b01      	cmp	r3, #1
 800b422:	d107      	bne.n	800b434 <_scanf_chars+0x44>
 800b424:	682b      	ldr	r3, [r5, #0]
 800b426:	6962      	ldr	r2, [r4, #20]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	5cd3      	ldrb	r3, [r2, r3]
 800b42c:	b9a3      	cbnz	r3, 800b458 <_scanf_chars+0x68>
 800b42e:	2e00      	cmp	r6, #0
 800b430:	d132      	bne.n	800b498 <_scanf_chars+0xa8>
 800b432:	e006      	b.n	800b442 <_scanf_chars+0x52>
 800b434:	2b02      	cmp	r3, #2
 800b436:	d007      	beq.n	800b448 <_scanf_chars+0x58>
 800b438:	2e00      	cmp	r6, #0
 800b43a:	d12d      	bne.n	800b498 <_scanf_chars+0xa8>
 800b43c:	69a3      	ldr	r3, [r4, #24]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d12a      	bne.n	800b498 <_scanf_chars+0xa8>
 800b442:	2001      	movs	r0, #1
 800b444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b448:	f7fe fa7c 	bl	8009944 <__locale_ctype_ptr>
 800b44c:	682b      	ldr	r3, [r5, #0]
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	4418      	add	r0, r3
 800b452:	7843      	ldrb	r3, [r0, #1]
 800b454:	071b      	lsls	r3, r3, #28
 800b456:	d4ef      	bmi.n	800b438 <_scanf_chars+0x48>
 800b458:	6823      	ldr	r3, [r4, #0]
 800b45a:	06da      	lsls	r2, r3, #27
 800b45c:	bf5e      	ittt	pl
 800b45e:	682b      	ldrpl	r3, [r5, #0]
 800b460:	781b      	ldrbpl	r3, [r3, #0]
 800b462:	703b      	strbpl	r3, [r7, #0]
 800b464:	682a      	ldr	r2, [r5, #0]
 800b466:	686b      	ldr	r3, [r5, #4]
 800b468:	f102 0201 	add.w	r2, r2, #1
 800b46c:	602a      	str	r2, [r5, #0]
 800b46e:	68a2      	ldr	r2, [r4, #8]
 800b470:	f103 33ff 	add.w	r3, r3, #4294967295
 800b474:	f102 32ff 	add.w	r2, r2, #4294967295
 800b478:	606b      	str	r3, [r5, #4]
 800b47a:	f106 0601 	add.w	r6, r6, #1
 800b47e:	bf58      	it	pl
 800b480:	3701      	addpl	r7, #1
 800b482:	60a2      	str	r2, [r4, #8]
 800b484:	b142      	cbz	r2, 800b498 <_scanf_chars+0xa8>
 800b486:	2b00      	cmp	r3, #0
 800b488:	dcc8      	bgt.n	800b41c <_scanf_chars+0x2c>
 800b48a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b48e:	4629      	mov	r1, r5
 800b490:	4640      	mov	r0, r8
 800b492:	4798      	blx	r3
 800b494:	2800      	cmp	r0, #0
 800b496:	d0c1      	beq.n	800b41c <_scanf_chars+0x2c>
 800b498:	6823      	ldr	r3, [r4, #0]
 800b49a:	f013 0310 	ands.w	r3, r3, #16
 800b49e:	d105      	bne.n	800b4ac <_scanf_chars+0xbc>
 800b4a0:	68e2      	ldr	r2, [r4, #12]
 800b4a2:	3201      	adds	r2, #1
 800b4a4:	60e2      	str	r2, [r4, #12]
 800b4a6:	69a2      	ldr	r2, [r4, #24]
 800b4a8:	b102      	cbz	r2, 800b4ac <_scanf_chars+0xbc>
 800b4aa:	703b      	strb	r3, [r7, #0]
 800b4ac:	6923      	ldr	r3, [r4, #16]
 800b4ae:	441e      	add	r6, r3
 800b4b0:	6126      	str	r6, [r4, #16]
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b4b8 <_scanf_i>:
 800b4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4bc:	469a      	mov	sl, r3
 800b4be:	4b74      	ldr	r3, [pc, #464]	; (800b690 <_scanf_i+0x1d8>)
 800b4c0:	460c      	mov	r4, r1
 800b4c2:	4683      	mov	fp, r0
 800b4c4:	4616      	mov	r6, r2
 800b4c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b4ca:	b087      	sub	sp, #28
 800b4cc:	ab03      	add	r3, sp, #12
 800b4ce:	68a7      	ldr	r7, [r4, #8]
 800b4d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b4d4:	4b6f      	ldr	r3, [pc, #444]	; (800b694 <_scanf_i+0x1dc>)
 800b4d6:	69a1      	ldr	r1, [r4, #24]
 800b4d8:	4a6f      	ldr	r2, [pc, #444]	; (800b698 <_scanf_i+0x1e0>)
 800b4da:	2903      	cmp	r1, #3
 800b4dc:	bf18      	it	ne
 800b4de:	461a      	movne	r2, r3
 800b4e0:	1e7b      	subs	r3, r7, #1
 800b4e2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800b4e6:	bf84      	itt	hi
 800b4e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b4ec:	60a3      	strhi	r3, [r4, #8]
 800b4ee:	6823      	ldr	r3, [r4, #0]
 800b4f0:	9200      	str	r2, [sp, #0]
 800b4f2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b4f6:	bf88      	it	hi
 800b4f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b4fc:	f104 091c 	add.w	r9, r4, #28
 800b500:	6023      	str	r3, [r4, #0]
 800b502:	bf8c      	ite	hi
 800b504:	197f      	addhi	r7, r7, r5
 800b506:	2700      	movls	r7, #0
 800b508:	464b      	mov	r3, r9
 800b50a:	f04f 0800 	mov.w	r8, #0
 800b50e:	9301      	str	r3, [sp, #4]
 800b510:	6831      	ldr	r1, [r6, #0]
 800b512:	ab03      	add	r3, sp, #12
 800b514:	2202      	movs	r2, #2
 800b516:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b51a:	7809      	ldrb	r1, [r1, #0]
 800b51c:	f7f4 fe70 	bl	8000200 <memchr>
 800b520:	9b01      	ldr	r3, [sp, #4]
 800b522:	b328      	cbz	r0, 800b570 <_scanf_i+0xb8>
 800b524:	f1b8 0f01 	cmp.w	r8, #1
 800b528:	d156      	bne.n	800b5d8 <_scanf_i+0x120>
 800b52a:	6862      	ldr	r2, [r4, #4]
 800b52c:	b92a      	cbnz	r2, 800b53a <_scanf_i+0x82>
 800b52e:	2208      	movs	r2, #8
 800b530:	6062      	str	r2, [r4, #4]
 800b532:	6822      	ldr	r2, [r4, #0]
 800b534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b538:	6022      	str	r2, [r4, #0]
 800b53a:	6822      	ldr	r2, [r4, #0]
 800b53c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b540:	6022      	str	r2, [r4, #0]
 800b542:	68a2      	ldr	r2, [r4, #8]
 800b544:	1e51      	subs	r1, r2, #1
 800b546:	60a1      	str	r1, [r4, #8]
 800b548:	b192      	cbz	r2, 800b570 <_scanf_i+0xb8>
 800b54a:	6832      	ldr	r2, [r6, #0]
 800b54c:	1c51      	adds	r1, r2, #1
 800b54e:	6031      	str	r1, [r6, #0]
 800b550:	7812      	ldrb	r2, [r2, #0]
 800b552:	701a      	strb	r2, [r3, #0]
 800b554:	1c5d      	adds	r5, r3, #1
 800b556:	6873      	ldr	r3, [r6, #4]
 800b558:	3b01      	subs	r3, #1
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	6073      	str	r3, [r6, #4]
 800b55e:	dc06      	bgt.n	800b56e <_scanf_i+0xb6>
 800b560:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b564:	4631      	mov	r1, r6
 800b566:	4658      	mov	r0, fp
 800b568:	4798      	blx	r3
 800b56a:	2800      	cmp	r0, #0
 800b56c:	d176      	bne.n	800b65c <_scanf_i+0x1a4>
 800b56e:	462b      	mov	r3, r5
 800b570:	f108 0801 	add.w	r8, r8, #1
 800b574:	f1b8 0f03 	cmp.w	r8, #3
 800b578:	d1c9      	bne.n	800b50e <_scanf_i+0x56>
 800b57a:	6862      	ldr	r2, [r4, #4]
 800b57c:	b90a      	cbnz	r2, 800b582 <_scanf_i+0xca>
 800b57e:	220a      	movs	r2, #10
 800b580:	6062      	str	r2, [r4, #4]
 800b582:	6862      	ldr	r2, [r4, #4]
 800b584:	4945      	ldr	r1, [pc, #276]	; (800b69c <_scanf_i+0x1e4>)
 800b586:	6960      	ldr	r0, [r4, #20]
 800b588:	9301      	str	r3, [sp, #4]
 800b58a:	1a89      	subs	r1, r1, r2
 800b58c:	f000 f888 	bl	800b6a0 <__sccl>
 800b590:	9b01      	ldr	r3, [sp, #4]
 800b592:	f04f 0800 	mov.w	r8, #0
 800b596:	461d      	mov	r5, r3
 800b598:	68a3      	ldr	r3, [r4, #8]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d038      	beq.n	800b610 <_scanf_i+0x158>
 800b59e:	6831      	ldr	r1, [r6, #0]
 800b5a0:	6960      	ldr	r0, [r4, #20]
 800b5a2:	780a      	ldrb	r2, [r1, #0]
 800b5a4:	5c80      	ldrb	r0, [r0, r2]
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	d032      	beq.n	800b610 <_scanf_i+0x158>
 800b5aa:	2a30      	cmp	r2, #48	; 0x30
 800b5ac:	6822      	ldr	r2, [r4, #0]
 800b5ae:	d121      	bne.n	800b5f4 <_scanf_i+0x13c>
 800b5b0:	0510      	lsls	r0, r2, #20
 800b5b2:	d51f      	bpl.n	800b5f4 <_scanf_i+0x13c>
 800b5b4:	f108 0801 	add.w	r8, r8, #1
 800b5b8:	b117      	cbz	r7, 800b5c0 <_scanf_i+0x108>
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	3f01      	subs	r7, #1
 800b5be:	60a3      	str	r3, [r4, #8]
 800b5c0:	6873      	ldr	r3, [r6, #4]
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	6073      	str	r3, [r6, #4]
 800b5c8:	dd1b      	ble.n	800b602 <_scanf_i+0x14a>
 800b5ca:	6833      	ldr	r3, [r6, #0]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	6033      	str	r3, [r6, #0]
 800b5d0:	68a3      	ldr	r3, [r4, #8]
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	60a3      	str	r3, [r4, #8]
 800b5d6:	e7df      	b.n	800b598 <_scanf_i+0xe0>
 800b5d8:	f1b8 0f02 	cmp.w	r8, #2
 800b5dc:	d1b1      	bne.n	800b542 <_scanf_i+0x8a>
 800b5de:	6822      	ldr	r2, [r4, #0]
 800b5e0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b5e4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b5e8:	d1c2      	bne.n	800b570 <_scanf_i+0xb8>
 800b5ea:	2110      	movs	r1, #16
 800b5ec:	6061      	str	r1, [r4, #4]
 800b5ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5f2:	e7a5      	b.n	800b540 <_scanf_i+0x88>
 800b5f4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b5f8:	6022      	str	r2, [r4, #0]
 800b5fa:	780b      	ldrb	r3, [r1, #0]
 800b5fc:	702b      	strb	r3, [r5, #0]
 800b5fe:	3501      	adds	r5, #1
 800b600:	e7de      	b.n	800b5c0 <_scanf_i+0x108>
 800b602:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b606:	4631      	mov	r1, r6
 800b608:	4658      	mov	r0, fp
 800b60a:	4798      	blx	r3
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d0df      	beq.n	800b5d0 <_scanf_i+0x118>
 800b610:	6823      	ldr	r3, [r4, #0]
 800b612:	05d9      	lsls	r1, r3, #23
 800b614:	d50c      	bpl.n	800b630 <_scanf_i+0x178>
 800b616:	454d      	cmp	r5, r9
 800b618:	d908      	bls.n	800b62c <_scanf_i+0x174>
 800b61a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b61e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b622:	4632      	mov	r2, r6
 800b624:	4658      	mov	r0, fp
 800b626:	4798      	blx	r3
 800b628:	1e6f      	subs	r7, r5, #1
 800b62a:	463d      	mov	r5, r7
 800b62c:	454d      	cmp	r5, r9
 800b62e:	d02c      	beq.n	800b68a <_scanf_i+0x1d2>
 800b630:	6822      	ldr	r2, [r4, #0]
 800b632:	f012 0210 	ands.w	r2, r2, #16
 800b636:	d11e      	bne.n	800b676 <_scanf_i+0x1be>
 800b638:	702a      	strb	r2, [r5, #0]
 800b63a:	6863      	ldr	r3, [r4, #4]
 800b63c:	9e00      	ldr	r6, [sp, #0]
 800b63e:	4649      	mov	r1, r9
 800b640:	4658      	mov	r0, fp
 800b642:	47b0      	blx	r6
 800b644:	6822      	ldr	r2, [r4, #0]
 800b646:	f8da 3000 	ldr.w	r3, [sl]
 800b64a:	f012 0f20 	tst.w	r2, #32
 800b64e:	d008      	beq.n	800b662 <_scanf_i+0x1aa>
 800b650:	1d1a      	adds	r2, r3, #4
 800b652:	f8ca 2000 	str.w	r2, [sl]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	6018      	str	r0, [r3, #0]
 800b65a:	e009      	b.n	800b670 <_scanf_i+0x1b8>
 800b65c:	f04f 0800 	mov.w	r8, #0
 800b660:	e7d6      	b.n	800b610 <_scanf_i+0x158>
 800b662:	07d2      	lsls	r2, r2, #31
 800b664:	d5f4      	bpl.n	800b650 <_scanf_i+0x198>
 800b666:	1d1a      	adds	r2, r3, #4
 800b668:	f8ca 2000 	str.w	r2, [sl]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	8018      	strh	r0, [r3, #0]
 800b670:	68e3      	ldr	r3, [r4, #12]
 800b672:	3301      	adds	r3, #1
 800b674:	60e3      	str	r3, [r4, #12]
 800b676:	eba5 0509 	sub.w	r5, r5, r9
 800b67a:	44a8      	add	r8, r5
 800b67c:	6925      	ldr	r5, [r4, #16]
 800b67e:	4445      	add	r5, r8
 800b680:	6125      	str	r5, [r4, #16]
 800b682:	2000      	movs	r0, #0
 800b684:	b007      	add	sp, #28
 800b686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68a:	2001      	movs	r0, #1
 800b68c:	e7fa      	b.n	800b684 <_scanf_i+0x1cc>
 800b68e:	bf00      	nop
 800b690:	0800ba78 	.word	0x0800ba78
 800b694:	0800afbd 	.word	0x0800afbd
 800b698:	0800a051 	.word	0x0800a051
 800b69c:	0800bd1c 	.word	0x0800bd1c

0800b6a0 <__sccl>:
 800b6a0:	b570      	push	{r4, r5, r6, lr}
 800b6a2:	780b      	ldrb	r3, [r1, #0]
 800b6a4:	2b5e      	cmp	r3, #94	; 0x5e
 800b6a6:	bf13      	iteet	ne
 800b6a8:	1c4a      	addne	r2, r1, #1
 800b6aa:	1c8a      	addeq	r2, r1, #2
 800b6ac:	784b      	ldrbeq	r3, [r1, #1]
 800b6ae:	2100      	movne	r1, #0
 800b6b0:	bf08      	it	eq
 800b6b2:	2101      	moveq	r1, #1
 800b6b4:	1e44      	subs	r4, r0, #1
 800b6b6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800b6ba:	f804 1f01 	strb.w	r1, [r4, #1]!
 800b6be:	42a5      	cmp	r5, r4
 800b6c0:	d1fb      	bne.n	800b6ba <__sccl+0x1a>
 800b6c2:	b913      	cbnz	r3, 800b6ca <__sccl+0x2a>
 800b6c4:	3a01      	subs	r2, #1
 800b6c6:	4610      	mov	r0, r2
 800b6c8:	bd70      	pop	{r4, r5, r6, pc}
 800b6ca:	f081 0401 	eor.w	r4, r1, #1
 800b6ce:	54c4      	strb	r4, [r0, r3]
 800b6d0:	4611      	mov	r1, r2
 800b6d2:	780d      	ldrb	r5, [r1, #0]
 800b6d4:	2d2d      	cmp	r5, #45	; 0x2d
 800b6d6:	f101 0201 	add.w	r2, r1, #1
 800b6da:	d006      	beq.n	800b6ea <__sccl+0x4a>
 800b6dc:	2d5d      	cmp	r5, #93	; 0x5d
 800b6de:	d0f2      	beq.n	800b6c6 <__sccl+0x26>
 800b6e0:	b90d      	cbnz	r5, 800b6e6 <__sccl+0x46>
 800b6e2:	460a      	mov	r2, r1
 800b6e4:	e7ef      	b.n	800b6c6 <__sccl+0x26>
 800b6e6:	462b      	mov	r3, r5
 800b6e8:	e7f1      	b.n	800b6ce <__sccl+0x2e>
 800b6ea:	784e      	ldrb	r6, [r1, #1]
 800b6ec:	2e5d      	cmp	r6, #93	; 0x5d
 800b6ee:	d0fa      	beq.n	800b6e6 <__sccl+0x46>
 800b6f0:	42b3      	cmp	r3, r6
 800b6f2:	dcf8      	bgt.n	800b6e6 <__sccl+0x46>
 800b6f4:	3102      	adds	r1, #2
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	429e      	cmp	r6, r3
 800b6fa:	54c4      	strb	r4, [r0, r3]
 800b6fc:	dcfb      	bgt.n	800b6f6 <__sccl+0x56>
 800b6fe:	e7e8      	b.n	800b6d2 <__sccl+0x32>

0800b700 <__submore>:
 800b700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b704:	460c      	mov	r4, r1
 800b706:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b70c:	4299      	cmp	r1, r3
 800b70e:	d11e      	bne.n	800b74e <__submore+0x4e>
 800b710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b714:	f7ff f854 	bl	800a7c0 <_malloc_r>
 800b718:	b918      	cbnz	r0, 800b722 <__submore+0x22>
 800b71a:	f04f 30ff 	mov.w	r0, #4294967295
 800b71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b726:	63a3      	str	r3, [r4, #56]	; 0x38
 800b728:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b72c:	6360      	str	r0, [r4, #52]	; 0x34
 800b72e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b732:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b736:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b73a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b73e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b742:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b746:	6020      	str	r0, [r4, #0]
 800b748:	2000      	movs	r0, #0
 800b74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b74e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b750:	0077      	lsls	r7, r6, #1
 800b752:	463a      	mov	r2, r7
 800b754:	f7ff fc78 	bl	800b048 <_realloc_r>
 800b758:	4605      	mov	r5, r0
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d0dd      	beq.n	800b71a <__submore+0x1a>
 800b75e:	eb00 0806 	add.w	r8, r0, r6
 800b762:	4601      	mov	r1, r0
 800b764:	4632      	mov	r2, r6
 800b766:	4640      	mov	r0, r8
 800b768:	f7fe f91b 	bl	80099a2 <memcpy>
 800b76c:	f8c4 8000 	str.w	r8, [r4]
 800b770:	6365      	str	r5, [r4, #52]	; 0x34
 800b772:	63a7      	str	r7, [r4, #56]	; 0x38
 800b774:	e7e8      	b.n	800b748 <__submore+0x48>

0800b776 <_malloc_usable_size_r>:
 800b776:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800b77a:	2800      	cmp	r0, #0
 800b77c:	f1a0 0004 	sub.w	r0, r0, #4
 800b780:	bfbc      	itt	lt
 800b782:	580b      	ldrlt	r3, [r1, r0]
 800b784:	18c0      	addlt	r0, r0, r3
 800b786:	4770      	bx	lr

0800b788 <_init>:
 800b788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b78a:	bf00      	nop
 800b78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b78e:	bc08      	pop	{r3}
 800b790:	469e      	mov	lr, r3
 800b792:	4770      	bx	lr

0800b794 <_fini>:
 800b794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b796:	bf00      	nop
 800b798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b79a:	bc08      	pop	{r3}
 800b79c:	469e      	mov	lr, r3
 800b79e:	4770      	bx	lr
