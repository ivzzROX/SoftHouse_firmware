
dip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800ad68  0800ad68  0001ad68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b344  0800b344  0001b344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b34c  0800b34c  0001b34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b350  0800b350  0001b350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000228  20000000  0800b354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020228  2**0
                  CONTENTS
  8 .bss          000155d0  20000228  20000228  00020228  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200157f8  200157f8  00020228  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 11 .debug_info   00027e25  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005b88  00000000  00000000  0004807d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001c40  00000000  00000000  0004dc08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000019c0  00000000  00000000  0004f848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e710  00000000  00000000  00051208  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000858b  00000000  00000000  0005f918  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00067ea3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007f2c  00000000  00000000  00067f20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad50 	.word	0x0800ad50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	0800ad50 	.word	0x0800ad50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <bit_proces>:
#include "ino.h"

#include <stdio.h>

uint8_t bit_proces(OP* op_arr, uint16_t op_n)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
	if ( op_arr[0].log != FIRST) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	7a1b      	ldrb	r3, [r3, #8]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d001      	beq.n	80005c8 <bit_proces+0x18>
		return 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	e09d      	b.n	8000704 <bit_proces+0x154>
	}

	uint16_t temp = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	81fb      	strh	r3, [r7, #14]
	uint16_t state = Sensor_CheckValue(op_arr[0].addr, op_arr[0].trigger_value);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	881a      	ldrh	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	4619      	mov	r1, r3
 80005d6:	4610      	mov	r0, r2
 80005d8:	f007 f96a 	bl	80078b0 <Sensor_CheckValue>
 80005dc:	4603      	mov	r3, r0
 80005de:	81bb      	strh	r3, [r7, #12]

	for (uint16_t i = 1; i < op_n; ++i) {
 80005e0:	2301      	movs	r3, #1
 80005e2:	817b      	strh	r3, [r7, #10]
 80005e4:	e087      	b.n	80006f6 <bit_proces+0x146>

		if (op_arr[i].type == DATA) {
 80005e6:	897a      	ldrh	r2, [r7, #10]
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	461a      	mov	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	7a5b      	ldrb	r3, [r3, #9]
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	d116      	bne.n	800062a <bit_proces+0x7a>
			temp = Sensor_CheckValue(op_arr[i].addr, op_arr[i].trigger_value);
 80005fc:	897a      	ldrh	r2, [r7, #10]
 80005fe:	4613      	mov	r3, r2
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	4413      	add	r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	461a      	mov	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	8818      	ldrh	r0, [r3, #0]
 800060e:	897a      	ldrh	r2, [r7, #10]
 8000610:	4613      	mov	r3, r2
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	4413      	add	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	461a      	mov	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	4619      	mov	r1, r3
 8000622:	f007 f945 	bl	80078b0 <Sensor_CheckValue>
 8000626:	4603      	mov	r3, r0
 8000628:	81fb      	strh	r3, [r7, #14]
		}

		if (op_arr[i].type == STATE) {
 800062a:	897a      	ldrh	r2, [r7, #10]
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	461a      	mov	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	7a5b      	ldrb	r3, [r3, #9]
 800063c:	2b03      	cmp	r3, #3
 800063e:	d109      	bne.n	8000654 <bit_proces+0xa4>
			temp = op_arr[i].trigger_value; //addr
 8000640:	897a      	ldrh	r2, [r7, #10]
 8000642:	4613      	mov	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4413      	add	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	461a      	mov	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4413      	add	r3, r2
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	81fb      	strh	r3, [r7, #14]
		}

		switch (op_arr[i].log)
 8000654:	897a      	ldrh	r2, [r7, #10]
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4413      	add	r3, r2
 8000664:	7a1b      	ldrb	r3, [r3, #8]
 8000666:	3b02      	subs	r3, #2
 8000668:	2b06      	cmp	r3, #6
 800066a:	d840      	bhi.n	80006ee <bit_proces+0x13e>
 800066c:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <bit_proces+0xc4>)
 800066e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000672:	bf00      	nop
 8000674:	08000691 	.word	0x08000691
 8000678:	0800069b 	.word	0x0800069b
 800067c:	080006a5 	.word	0x080006a5
 8000680:	080006af 	.word	0x080006af
 8000684:	080006c1 	.word	0x080006c1
 8000688:	080006d3 	.word	0x080006d3
 800068c:	080006e5 	.word	0x080006e5
		{

		case OR: {
			state |= temp;
 8000690:	89ba      	ldrh	r2, [r7, #12]
 8000692:	89fb      	ldrh	r3, [r7, #14]
 8000694:	4313      	orrs	r3, r2
 8000696:	81bb      	strh	r3, [r7, #12]
			break;
 8000698:	e02a      	b.n	80006f0 <bit_proces+0x140>
		}

		case AND: {
			state &= temp;
 800069a:	89ba      	ldrh	r2, [r7, #12]
 800069c:	89fb      	ldrh	r3, [r7, #14]
 800069e:	4013      	ands	r3, r2
 80006a0:	81bb      	strh	r3, [r7, #12]
			break;
 80006a2:	e025      	b.n	80006f0 <bit_proces+0x140>
		}

		case XOR: {
			state ^= temp;
 80006a4:	89ba      	ldrh	r2, [r7, #12]
 80006a6:	89fb      	ldrh	r3, [r7, #14]
 80006a8:	4053      	eors	r3, r2
 80006aa:	81bb      	strh	r3, [r7, #12]
			break;
 80006ac:	e020      	b.n	80006f0 <bit_proces+0x140>
		}

		case NOR: {
			state |= temp;
 80006ae:	89ba      	ldrh	r2, [r7, #12]
 80006b0:	89fb      	ldrh	r3, [r7, #14]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	81bb      	strh	r3, [r7, #12]
			state ^= 1;
 80006b6:	89bb      	ldrh	r3, [r7, #12]
 80006b8:	f083 0301 	eor.w	r3, r3, #1
 80006bc:	81bb      	strh	r3, [r7, #12]
			break;
 80006be:	e017      	b.n	80006f0 <bit_proces+0x140>
		}

		case NAND: {
			state &= temp;
 80006c0:	89ba      	ldrh	r2, [r7, #12]
 80006c2:	89fb      	ldrh	r3, [r7, #14]
 80006c4:	4013      	ands	r3, r2
 80006c6:	81bb      	strh	r3, [r7, #12]
			state ^= 1;
 80006c8:	89bb      	ldrh	r3, [r7, #12]
 80006ca:	f083 0301 	eor.w	r3, r3, #1
 80006ce:	81bb      	strh	r3, [r7, #12]
			break;
 80006d0:	e00e      	b.n	80006f0 <bit_proces+0x140>
		}

		case XNOR: {
			state ^= temp;
 80006d2:	89ba      	ldrh	r2, [r7, #12]
 80006d4:	89fb      	ldrh	r3, [r7, #14]
 80006d6:	4053      	eors	r3, r2
 80006d8:	81bb      	strh	r3, [r7, #12]
			state ^= 1;
 80006da:	89bb      	ldrh	r3, [r7, #12]
 80006dc:	f083 0301 	eor.w	r3, r3, #1
 80006e0:	81bb      	strh	r3, [r7, #12]
			break;
 80006e2:	e005      	b.n	80006f0 <bit_proces+0x140>
		}

		case NOT: {
			state ^= 1;
 80006e4:	89bb      	ldrh	r3, [r7, #12]
 80006e6:	f083 0301 	eor.w	r3, r3, #1
 80006ea:	81bb      	strh	r3, [r7, #12]
			break;
 80006ec:	e000      	b.n	80006f0 <bit_proces+0x140>
		}

		default:
			break;
 80006ee:	bf00      	nop
	for (uint16_t i = 1; i < op_n; ++i) {
 80006f0:	897b      	ldrh	r3, [r7, #10]
 80006f2:	3301      	adds	r3, #1
 80006f4:	817b      	strh	r3, [r7, #10]
 80006f6:	897a      	ldrh	r2, [r7, #10]
 80006f8:	887b      	ldrh	r3, [r7, #2]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	f4ff af73 	bcc.w	80005e6 <bit_proces+0x36>
		}
	}

	return state;
 8000700:	89bb      	ldrh	r3, [r7, #12]
 8000702:	b2db      	uxtb	r3, r3
}
 8000704:	4618      	mov	r0, r3
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <map_op_on_root>:

uint8_t map_op_on_root(OP* op, OP_ROOT* root, uint16_t root_n)
{
 800070c:	b480      	push	{r7}
 800070e:	b087      	sub	sp, #28
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	4613      	mov	r3, r2
 8000718:	80fb      	strh	r3, [r7, #6]
	if (root[0].type == PMO || root[0].type == INO || root[0].type == WEB)
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b05      	cmp	r3, #5
 8000720:	d007      	beq.n	8000732 <map_op_on_root+0x26>
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b06      	cmp	r3, #6
 8000728:	d003      	beq.n	8000732 <map_op_on_root+0x26>
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b07      	cmp	r3, #7
 8000730:	d101      	bne.n	8000736 <map_op_on_root+0x2a>
	{
		return 0;
 8000732:	2300      	movs	r3, #0
 8000734:	e039      	b.n	80007aa <map_op_on_root+0x9e>
	}

	root[0].operation = op;
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	68fa      	ldr	r2, [r7, #12]
 800073a:	605a      	str	r2, [r3, #4]
	uint32_t offset = root[0].operation_n;
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	891b      	ldrh	r3, [r3, #8]
 8000740:	617b      	str	r3, [r7, #20]

	for (uint16_t i = 1; i < root_n; ++i)
 8000742:	2301      	movs	r3, #1
 8000744:	827b      	strh	r3, [r7, #18]
 8000746:	e02b      	b.n	80007a0 <map_op_on_root+0x94>
	{
		if (root[i].type == BRCH)
 8000748:	8a7a      	ldrh	r2, [r7, #18]
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	461a      	mov	r2, r3
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b02      	cmp	r3, #2
 800075c:	d11d      	bne.n	800079a <map_op_on_root+0x8e>
		{
			root[i].operation = op + offset;
 800075e:	8a7a      	ldrh	r2, [r7, #18]
 8000760:	4613      	mov	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	461a      	mov	r2, r3
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	1899      	adds	r1, r3, r2
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	4613      	mov	r3, r2
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	4413      	add	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	461a      	mov	r2, r3
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	604b      	str	r3, [r1, #4]
			offset += root[i].operation_n;
 8000780:	8a7a      	ldrh	r2, [r7, #18]
 8000782:	4613      	mov	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	461a      	mov	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	4413      	add	r3, r2
 8000790:	891b      	ldrh	r3, [r3, #8]
 8000792:	461a      	mov	r2, r3
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	4413      	add	r3, r2
 8000798:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 1; i < root_n; ++i)
 800079a:	8a7b      	ldrh	r3, [r7, #18]
 800079c:	3301      	adds	r3, #1
 800079e:	827b      	strh	r3, [r7, #18]
 80007a0:	8a7a      	ldrh	r2, [r7, #18]
 80007a2:	88fb      	ldrh	r3, [r7, #6]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d3cf      	bcc.n	8000748 <map_op_on_root+0x3c>
		}
	}
	return 1;
 80007a8:	2301      	movs	r3, #1
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	371c      	adds	r7, #28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <t_trigger_update>:


static uint8_t t_trigger_update(OP_ROOT* root, uint16_t root_n, T_TR* tt)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b087      	sub	sp, #28
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	60f8      	str	r0, [r7, #12]
 80007be:	460b      	mov	r3, r1
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	817b      	strh	r3, [r7, #10]
	for(uint16_t i = 0; i < root_n; ++i)
 80007c4:	2300      	movs	r3, #0
 80007c6:	82fb      	strh	r3, [r7, #22]
 80007c8:	e036      	b.n	8000838 <t_trigger_update+0x82>
	{
		if(root[i].id == tt->root_id)
 80007ca:	8afa      	ldrh	r2, [r7, #22]
 80007cc:	4613      	mov	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	461a      	mov	r2, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4413      	add	r3, r2
 80007da:	7bda      	ldrb	r2, [r3, #15]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d126      	bne.n	8000832 <t_trigger_update+0x7c>
		{
			if(tt->prev_root_id_value == 0
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	789b      	ldrb	r3, [r3, #2]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d111      	bne.n	8000810 <t_trigger_update+0x5a>
			&& root[i].result == 1)
 80007ec:	8afa      	ldrh	r2, [r7, #22]
 80007ee:	4613      	mov	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	461a      	mov	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	7c1b      	ldrb	r3, [r3, #16]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d106      	bne.n	8000810 <t_trigger_update+0x5a>
			{
				tt->value ^= 1;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	785b      	ldrb	r3, [r3, #1]
 8000806:	f083 0301 	eor.w	r3, r3, #1
 800080a:	b2da      	uxtb	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	705a      	strb	r2, [r3, #1]
			}
			tt->prev_root_id_value = root[i].result;
 8000810:	8afa      	ldrh	r2, [r7, #22]
 8000812:	4613      	mov	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	4413      	add	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	461a      	mov	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	7c1a      	ldrb	r2, [r3, #16]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	709a      	strb	r2, [r3, #2]
			return tt->value ^ 1;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	785b      	ldrb	r3, [r3, #1]
 800082a:	f083 0301 	eor.w	r3, r3, #1
 800082e:	b2db      	uxtb	r3, r3
 8000830:	e007      	b.n	8000842 <t_trigger_update+0x8c>
	for(uint16_t i = 0; i < root_n; ++i)
 8000832:	8afb      	ldrh	r3, [r7, #22]
 8000834:	3301      	adds	r3, #1
 8000836:	82fb      	strh	r3, [r7, #22]
 8000838:	8afa      	ldrh	r2, [r7, #22]
 800083a:	897b      	ldrh	r3, [r7, #10]
 800083c:	429a      	cmp	r2, r3
 800083e:	d3c4      	bcc.n	80007ca <t_trigger_update+0x14>
		}
	}
	return 0;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	371c      	adds	r7, #28
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <rs_trigger_update>:

static uint8_t rs_trigger_update(OP_ROOT* root, uint16_t root_n, RS_TR* rst)
{
 800084e:	b480      	push	{r7}
 8000850:	b087      	sub	sp, #28
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	460b      	mov	r3, r1
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	817b      	strh	r3, [r7, #10]
	for(uint16_t i = 0; i < root_n; ++i)
 800085c:	2300      	movs	r3, #0
 800085e:	82fb      	strh	r3, [r7, #22]
 8000860:	e056      	b.n	8000910 <rs_trigger_update+0xc2>
	{
		if(root[i].id == rst->root_id_s)
 8000862:	8afa      	ldrh	r2, [r7, #22]
 8000864:	4613      	mov	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	461a      	mov	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	4413      	add	r3, r2
 8000872:	7bda      	ldrb	r2, [r3, #15]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d11c      	bne.n	80008b6 <rs_trigger_update+0x68>
		{
			if(rst->prev_root_id_s_value == 0
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	78db      	ldrb	r3, [r3, #3]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d10d      	bne.n	80008a0 <rs_trigger_update+0x52>
			&& root[i].result == 1)
 8000884:	8afa      	ldrh	r2, [r7, #22]
 8000886:	4613      	mov	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	461a      	mov	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4413      	add	r3, r2
 8000894:	7c1b      	ldrb	r3, [r3, #16]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d102      	bne.n	80008a0 <rs_trigger_update+0x52>
			{
				rst->value = 1;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2201      	movs	r2, #1
 800089e:	709a      	strb	r2, [r3, #2]
			}
			rst->prev_root_id_s_value = root[i].result;
 80008a0:	8afa      	ldrh	r2, [r7, #22]
 80008a2:	4613      	mov	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4413      	add	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	461a      	mov	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4413      	add	r3, r2
 80008b0:	7c1a      	ldrb	r2, [r3, #16]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	70da      	strb	r2, [r3, #3]
		}

		if(root[i].id == rst->root_id_r)
 80008b6:	8afa      	ldrh	r2, [r7, #22]
 80008b8:	4613      	mov	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	4413      	add	r3, r2
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	461a      	mov	r2, r3
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	4413      	add	r3, r2
 80008c6:	7bda      	ldrb	r2, [r3, #15]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	785b      	ldrb	r3, [r3, #1]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d11c      	bne.n	800090a <rs_trigger_update+0xbc>
		{
			if(rst->prev_root_id_r_value == 0
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d10d      	bne.n	80008f4 <rs_trigger_update+0xa6>
			&& root[i].result == 1)
 80008d8:	8afa      	ldrh	r2, [r7, #22]
 80008da:	4613      	mov	r3, r2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4413      	add	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	461a      	mov	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	4413      	add	r3, r2
 80008e8:	7c1b      	ldrb	r3, [r3, #16]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d102      	bne.n	80008f4 <rs_trigger_update+0xa6>
			{
				rst->value = 0;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	709a      	strb	r2, [r3, #2]
			}
			rst->prev_root_id_r_value = root[i].result;
 80008f4:	8afa      	ldrh	r2, [r7, #22]
 80008f6:	4613      	mov	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	7c1a      	ldrb	r2, [r3, #16]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	711a      	strb	r2, [r3, #4]
	for(uint16_t i = 0; i < root_n; ++i)
 800090a:	8afb      	ldrh	r3, [r7, #22]
 800090c:	3301      	adds	r3, #1
 800090e:	82fb      	strh	r3, [r7, #22]
 8000910:	8afa      	ldrh	r2, [r7, #22]
 8000912:	897b      	ldrh	r3, [r7, #10]
 8000914:	429a      	cmp	r2, r3
 8000916:	d3a4      	bcc.n	8000862 <rs_trigger_update+0x14>
		}
	}

	return rst->value ^ 1;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	789b      	ldrb	r3, [r3, #2]
 800091c:	f083 0301 	eor.w	r3, r3, #1
 8000920:	b2db      	uxtb	r3, r3
}
 8000922:	4618      	mov	r0, r3
 8000924:	371c      	adds	r7, #28
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <counter_update>:

static uint8_t counter_update(OP_ROOT* root, uint16_t root_n, CNTR* counter)
{
 800092e:	b480      	push	{r7}
 8000930:	b087      	sub	sp, #28
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	460b      	mov	r3, r1
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	817b      	strh	r3, [r7, #10]
	uint8_t temp = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	75fb      	strb	r3, [r7, #23]
	for(uint16_t i = 0; i < root_n; ++i)
 8000940:	2300      	movs	r3, #0
 8000942:	82bb      	strh	r3, [r7, #20]
 8000944:	e04a      	b.n	80009dc <counter_update+0xae>
	{
		if(root[i].id == counter->root_id)
 8000946:	8aba      	ldrh	r2, [r7, #20]
 8000948:	4613      	mov	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4413      	add	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	461a      	mov	r2, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	4413      	add	r3, r2
 8000956:	7bda      	ldrb	r2, [r3, #15]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	429a      	cmp	r2, r3
 800095e:	d13a      	bne.n	80009d6 <counter_update+0xa8>
		{
			if(counter->prev_root_id_value == 0
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	799b      	ldrb	r3, [r3, #6]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d126      	bne.n	80009b6 <counter_update+0x88>
			&& root[i].result == 1)
 8000968:	8aba      	ldrh	r2, [r7, #20]
 800096a:	4613      	mov	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	7c1b      	ldrb	r3, [r3, #16]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d11b      	bne.n	80009b6 <counter_update+0x88>
			{
				counter->value++;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	885b      	ldrh	r3, [r3, #2]
 8000982:	3301      	adds	r3, #1
 8000984:	b29a      	uxth	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	805a      	strh	r2, [r3, #2]

				if(counter->value == counter->trigger_value)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	885a      	ldrh	r2, [r3, #2]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	889b      	ldrh	r3, [r3, #4]
 8000992:	429a      	cmp	r2, r3
 8000994:	d104      	bne.n	80009a0 <counter_update+0x72>
				{
					counter->value = 0;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2200      	movs	r2, #0
 800099a:	805a      	strh	r2, [r3, #2]
					temp = 1;
 800099c:	2301      	movs	r3, #1
 800099e:	75fb      	strb	r3, [r7, #23]
				}

				if(counter->value > counter->trigger_value)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	885a      	ldrh	r2, [r3, #2]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	889b      	ldrh	r3, [r3, #4]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d904      	bls.n	80009b6 <counter_update+0x88>
				{
					counter->value = 0;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	805a      	strh	r2, [r3, #2]
					temp = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	75fb      	strb	r3, [r7, #23]
				}
			}
			counter->prev_root_id_value = root[i].result;
 80009b6:	8aba      	ldrh	r2, [r7, #20]
 80009b8:	4613      	mov	r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	4413      	add	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	461a      	mov	r2, r3
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	4413      	add	r3, r2
 80009c6:	7c1a      	ldrb	r2, [r3, #16]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	719a      	strb	r2, [r3, #6]
			return temp ^ 1;
 80009cc:	7dfb      	ldrb	r3, [r7, #23]
 80009ce:	f083 0301 	eor.w	r3, r3, #1
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	e007      	b.n	80009e6 <counter_update+0xb8>
	for(uint16_t i = 0; i < root_n; ++i)
 80009d6:	8abb      	ldrh	r3, [r7, #20]
 80009d8:	3301      	adds	r3, #1
 80009da:	82bb      	strh	r3, [r7, #20]
 80009dc:	8aba      	ldrh	r2, [r7, #20]
 80009de:	897b      	ldrh	r3, [r7, #10]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d3b0      	bcc.n	8000946 <counter_update+0x18>
		}
	}
	return 0;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	371c      	adds	r7, #28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <delay_update>:

static uint8_t delay_update(OP_ROOT* root, uint16_t root_n, DL* del)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b090      	sub	sp, #64	; 0x40
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	460b      	mov	r3, r1
 80009fc:	607a      	str	r2, [r7, #4]
 80009fe:	817b      	strh	r3, [r7, #10]
	uint8_t temp = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	time_t utime = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	63bb      	str	r3, [r7, #56]	; 0x38
	struct tm time;

	for(uint16_t i = 0; i < root_n; ++i)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000a0e:	e049      	b.n	8000aa4 <delay_update+0xb2>
	{
		if(root[i].id == del->root_id)
 8000a10:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000a12:	4613      	mov	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4413      	add	r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4413      	add	r3, r2
 8000a20:	7bda      	ldrb	r2, [r3, #15]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d139      	bne.n	8000a9e <delay_update+0xac>
		{
			get_cur_time(&time);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 fc9c 	bl	800236c <get_cur_time>
			utime = mktime(&time);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f008 fb57 	bl	80090ec <mktime>
 8000a3e:	63b8      	str	r0, [r7, #56]	; 0x38

			if(del->prev_root_id_value == 0
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7a1b      	ldrb	r3, [r3, #8]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d111      	bne.n	8000a6c <delay_update+0x7a>
			&& root[i].result == 1)
 8000a48:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4413      	add	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	461a      	mov	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	7c1b      	ldrb	r3, [r3, #16]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d106      	bne.n	8000a6c <delay_update+0x7a>
			{
				del->finish_time = utime + del->value;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	885b      	ldrh	r3, [r3, #2]
 8000a62:	461a      	mov	r2, r3
 8000a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a66:	441a      	add	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	605a      	str	r2, [r3, #4]
			}

			if(utime >= del->finish_time)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685a      	ldr	r2, [r3, #4]
 8000a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a72:	429a      	cmp	r2, r3
 8000a74:	dc02      	bgt.n	8000a7c <delay_update+0x8a>
			{
				temp = 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}

			del->prev_root_id_value = root[i].result;
 8000a7c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000a7e:	4613      	mov	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	461a      	mov	r2, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	7c1a      	ldrb	r2, [r3, #16]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	721a      	strb	r2, [r3, #8]
			return temp ^ 1;
 8000a92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000a96:	f083 0301 	eor.w	r3, r3, #1
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	e007      	b.n	8000aae <delay_update+0xbc>
	for(uint16_t i = 0; i < root_n; ++i)
 8000a9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000aa4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000aa6:	897b      	ldrh	r3, [r7, #10]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d3b1      	bcc.n	8000a10 <delay_update+0x1e>
		}
	}
	return 0;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3740      	adds	r7, #64	; 0x40
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <start_bit_engine>:

uint8_t start_bit_engine(OP_ROOT* root, uint16_t root_n, uint16_t out)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	807b      	strh	r3, [r7, #2]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	803b      	strh	r3, [r7, #0]
	if (root == NULL)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <start_bit_engine+0x1a>
	{
		return 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e190      	b.n	8000df4 <start_bit_engine+0x33c>
	}

	for (int32_t i = root_n - 1; i >= 0; --i)
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	61fb      	str	r3, [r7, #28]
 8000ad8:	e187      	b.n	8000dea <start_bit_engine+0x332>
	{
		switch(root[i].type)
 8000ada:	69fa      	ldr	r2, [r7, #28]
 8000adc:	4613      	mov	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	3b02      	subs	r3, #2
 8000aee:	2b09      	cmp	r3, #9
 8000af0:	f200 8178 	bhi.w	8000de4 <start_bit_engine+0x32c>
 8000af4:	a201      	add	r2, pc, #4	; (adr r2, 8000afc <start_bit_engine+0x44>)
 8000af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afa:	bf00      	nop
 8000afc:	08000cf5 	.word	0x08000cf5
 8000b00:	08000b25 	.word	0x08000b25
 8000b04:	08000b53 	.word	0x08000b53
 8000b08:	08000bed 	.word	0x08000bed
 8000b0c:	08000b81 	.word	0x08000b81
 8000b10:	08000bb7 	.word	0x08000bb7
 8000b14:	08000c91 	.word	0x08000c91
 8000b18:	08000cc3 	.word	0x08000cc3
 8000b1c:	08000c2d 	.word	0x08000c2d
 8000b20:	08000c5f 	.word	0x08000c5f
		{
		case TIME:
		{
			root[i].result = is_cur_time((TM*)root[i].operation);
 8000b24:	69fa      	ldr	r2, [r7, #28]
 8000b26:	4613      	mov	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	461a      	mov	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	189c      	adds	r4, r3, r2
 8000b34:	69fa      	ldr	r2, [r7, #28]
 8000b36:	4613      	mov	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	4413      	add	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	461a      	mov	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4413      	add	r3, r2
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 fc1c 	bl	8002384 <is_cur_time>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	7423      	strb	r3, [r4, #16]
			break;
 8000b50:	e148      	b.n	8000de4 <start_bit_engine+0x32c>
		}

		case WEEK:
		{
			root[i].result = is_cur_day_of_week(root[i].operation_n);
 8000b52:	69fa      	ldr	r2, [r7, #28]
 8000b54:	4613      	mov	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	189c      	adds	r4, r3, r2
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	4613      	mov	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	891b      	ldrh	r3, [r3, #8]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 fc43 	bl	8002400 <is_cur_day_of_week>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	7423      	strb	r3, [r4, #16]
			break;
 8000b7e:	e131      	b.n	8000de4 <start_bit_engine+0x32c>
		}

		case INO:
		{
			uint16_t ino_pin = root[i].operation_n - 200;
 8000b80:	69fa      	ldr	r2, [r7, #28]
 8000b82:	4613      	mov	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	891b      	ldrh	r3, [r3, #8]
 8000b92:	3bc8      	subs	r3, #200	; 0xc8
 8000b94:	82fb      	strh	r3, [r7, #22]
			root[i].result = INO_GetValue(ino_pin);
 8000b96:	69fa      	ldr	r2, [r7, #28]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	189c      	adds	r4, r3, r2
 8000ba6:	8afb      	ldrh	r3, [r7, #22]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 faf6 	bl	800719c <INO_GetValue>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	7423      	strb	r3, [r4, #16]
			break;
 8000bb4:	e116      	b.n	8000de4 <start_bit_engine+0x32c>
		}

		case WEB:
		{
			uint16_t tg_key = root[i].operation_n - 600;
 8000bb6:	69fa      	ldr	r2, [r7, #28]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	891b      	ldrh	r3, [r3, #8]
 8000bc8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8000bcc:	82bb      	strh	r3, [r7, #20]
			root[i].result = Telegram_GetValue(tg_key);
 8000bce:	69fa      	ldr	r2, [r7, #28]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	461a      	mov	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	189c      	adds	r4, r3, r2
 8000bde:	8abb      	ldrh	r3, [r7, #20]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fb9f 	bl	8002324 <Telegram_GetValue>
 8000be6:	4603      	mov	r3, r0
 8000be8:	7423      	strb	r3, [r4, #16]
			break;
 8000bea:	e0fb      	b.n	8000de4 <start_bit_engine+0x32c>
		}

		case PMO:
		{
			uint16_t link_out = root[i].operation_n - 800;
 8000bec:	69fa      	ldr	r2, [r7, #28]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	891b      	ldrh	r3, [r3, #8]
 8000bfe:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8000c02:	827b      	strh	r3, [r7, #18]
			root[i].result = out & (1 << link_out);
 8000c04:	69fa      	ldr	r2, [r7, #28]
 8000c06:	4613      	mov	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	461a      	mov	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4413      	add	r3, r2
 8000c14:	883a      	ldrh	r2, [r7, #0]
 8000c16:	b251      	sxtb	r1, r2
 8000c18:	8a7a      	ldrh	r2, [r7, #18]
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	fa00 f202 	lsl.w	r2, r0, r2
 8000c20:	b252      	sxtb	r2, r2
 8000c22:	400a      	ands	r2, r1
 8000c24:	b252      	sxtb	r2, r2
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	741a      	strb	r2, [r3, #16]
			break;
 8000c2a:	e0db      	b.n	8000de4 <start_bit_engine+0x32c>
		}

		case COUNTER:
		{
			root[i].result = counter_update(root, root_n, (CNTR*)root[i].operation);
 8000c2c:	69fa      	ldr	r2, [r7, #28]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	461a      	mov	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	189c      	adds	r4, r3, r2
 8000c3c:	69fa      	ldr	r2, [r7, #28]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	461a      	mov	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	887b      	ldrh	r3, [r7, #2]
 8000c50:	4619      	mov	r1, r3
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff fe6b 	bl	800092e <counter_update>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	7423      	strb	r3, [r4, #16]
			break;
 8000c5c:	e0c2      	b.n	8000de4 <start_bit_engine+0x32c>
		}

		case DELAY:
		{
			root[i].result = delay_update(root, root_n, (DL*)root[i].operation);
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	461a      	mov	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	189c      	adds	r4, r3, r2
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	461a      	mov	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	887b      	ldrh	r3, [r7, #2]
 8000c82:	4619      	mov	r1, r3
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff feb4 	bl	80009f2 <delay_update>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	7423      	strb	r3, [r4, #16]
			break;
 8000c8e:	e0a9      	b.n	8000de4 <start_bit_engine+0x32c>
		}

		case T_TRIGGER:
		{
			root[i].result = t_trigger_update(root, root_n, (T_TR*)root[i].operation);
 8000c90:	69fa      	ldr	r2, [r7, #28]
 8000c92:	4613      	mov	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	189c      	adds	r4, r3, r2
 8000ca0:	69fa      	ldr	r2, [r7, #28]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	461a      	mov	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4413      	add	r3, r2
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	887b      	ldrh	r3, [r7, #2]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff fd7d 	bl	80007b6 <t_trigger_update>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	7423      	strb	r3, [r4, #16]
			break;
 8000cc0:	e090      	b.n	8000de4 <start_bit_engine+0x32c>
		}

		case RS_TRIGGER:
		{
			root[i].result = rs_trigger_update(root, root_n, (RS_TR*)root[i].operation);
 8000cc2:	69fa      	ldr	r2, [r7, #28]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	461a      	mov	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	189c      	adds	r4, r3, r2
 8000cd2:	69fa      	ldr	r2, [r7, #28]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	461a      	mov	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	887b      	ldrh	r3, [r7, #2]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff fdb0 	bl	800084e <rs_trigger_update>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	7423      	strb	r3, [r4, #16]
			break;
 8000cf2:	e077      	b.n	8000de4 <start_bit_engine+0x32c>
		}

		case BRCH:
			for (uint16_t o = 0; o < root[i].operation_n; ++o)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	837b      	strh	r3, [r7, #26]
 8000cf8:	e048      	b.n	8000d8c <start_bit_engine+0x2d4>
			{
				OP* op_arr = (OP*)root[i].operation;
 8000cfa:	69fa      	ldr	r2, [r7, #28]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	461a      	mov	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]
				if (op_arr[o].type == STATE)
 8000d0e:	8b7a      	ldrh	r2, [r7, #26]
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	461a      	mov	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	7a5b      	ldrb	r3, [r3, #9]
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	d130      	bne.n	8000d86 <start_bit_engine+0x2ce>
				{
					/*
						if operration type is state,
						engine need to find result of this state and set it
					*/
					for (uint16_t n = 1; n < root_n; ++n)
 8000d24:	2301      	movs	r3, #1
 8000d26:	833b      	strh	r3, [r7, #24]
 8000d28:	e029      	b.n	8000d7e <start_bit_engine+0x2c6>
					{
						if (op_arr[o].root_id == root[n].id)
 8000d2a:	8b7a      	ldrh	r2, [r7, #26]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	461a      	mov	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4413      	add	r3, r2
 8000d3a:	7a99      	ldrb	r1, [r3, #10]
 8000d3c:	8b3a      	ldrh	r2, [r7, #24]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	461a      	mov	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	7bdb      	ldrb	r3, [r3, #15]
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	d112      	bne.n	8000d78 <start_bit_engine+0x2c0>
						{
							op_arr[o].trigger_value = root[n].result; //addr
 8000d52:	8b7a      	ldrh	r2, [r7, #26]
 8000d54:	4613      	mov	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	1899      	adds	r1, r3, r2
 8000d62:	8b3a      	ldrh	r2, [r7, #24]
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	7c1b      	ldrb	r3, [r3, #16]
 8000d74:	604b      	str	r3, [r1, #4]
							break;
 8000d76:	e006      	b.n	8000d86 <start_bit_engine+0x2ce>
					for (uint16_t n = 1; n < root_n; ++n)
 8000d78:	8b3b      	ldrh	r3, [r7, #24]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	833b      	strh	r3, [r7, #24]
 8000d7e:	8b3a      	ldrh	r2, [r7, #24]
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d3d1      	bcc.n	8000d2a <start_bit_engine+0x272>
			for (uint16_t o = 0; o < root[i].operation_n; ++o)
 8000d86:	8b7b      	ldrh	r3, [r7, #26]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	837b      	strh	r3, [r7, #26]
 8000d8c:	69fa      	ldr	r2, [r7, #28]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	461a      	mov	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	891b      	ldrh	r3, [r3, #8]
 8000d9e:	8b7a      	ldrh	r2, [r7, #26]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d3aa      	bcc.n	8000cfa <start_bit_engine+0x242>
						}
					}
				}
			}
			root[i].result = bit_proces((OP*)root[i].operation, root[i].operation_n);
 8000da4:	69fa      	ldr	r2, [r7, #28]
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	461a      	mov	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	189c      	adds	r4, r3, r2
 8000db4:	69fa      	ldr	r2, [r7, #28]
 8000db6:	4613      	mov	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	6858      	ldr	r0, [r3, #4]
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	891b      	ldrh	r3, [r3, #8]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f7ff fbe9 	bl	80005b0 <bit_proces>
 8000dde:	4603      	mov	r3, r0
 8000de0:	7423      	strb	r3, [r4, #16]

			break;
 8000de2:	bf00      	nop
	for (int32_t i = root_n - 1; i >= 0; --i)
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	61fb      	str	r3, [r7, #28]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f6bf ae74 	bge.w	8000ada <start_bit_engine+0x22>
		}
	}

	return 1;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3724      	adds	r7, #36	; 0x24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd90      	pop	{r4, r7, pc}

08000dfc <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d301      	bcc.n	8000e16 <jsmn_alloc_token+0x1a>
    return NULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e014      	b.n	8000e40 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	1c59      	adds	r1, r3, #1
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	6051      	str	r1, [r2, #4]
 8000e20:	011b      	lsls	r3, r3, #4
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	4413      	add	r3, r2
 8000e26:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8000e3e:	697b      	ldr	r3, [r7, #20]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	7afa      	ldrb	r2, [r7, #11]
 8000e60:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	605a      	str	r2, [r3, #4]
  token->end = end;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2200      	movs	r2, #0
 8000e72:	60da      	str	r2, [r3, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000e94:	e034      	b.n	8000f00 <jsmn_parse_primitive+0x80>
    switch (js[parser->pos]) {
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b20      	cmp	r3, #32
 8000ea2:	d03a      	beq.n	8000f1a <jsmn_parse_primitive+0x9a>
 8000ea4:	2b20      	cmp	r3, #32
 8000ea6:	dc06      	bgt.n	8000eb6 <jsmn_parse_primitive+0x36>
 8000ea8:	2b09      	cmp	r3, #9
 8000eaa:	db0f      	blt.n	8000ecc <jsmn_parse_primitive+0x4c>
 8000eac:	2b0a      	cmp	r3, #10
 8000eae:	dd34      	ble.n	8000f1a <jsmn_parse_primitive+0x9a>
 8000eb0:	2b0d      	cmp	r3, #13
 8000eb2:	d032      	beq.n	8000f1a <jsmn_parse_primitive+0x9a>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8000eb4:	e00a      	b.n	8000ecc <jsmn_parse_primitive+0x4c>
    switch (js[parser->pos]) {
 8000eb6:	2b3a      	cmp	r3, #58	; 0x3a
 8000eb8:	d02f      	beq.n	8000f1a <jsmn_parse_primitive+0x9a>
 8000eba:	2b3a      	cmp	r3, #58	; 0x3a
 8000ebc:	dc02      	bgt.n	8000ec4 <jsmn_parse_primitive+0x44>
 8000ebe:	2b2c      	cmp	r3, #44	; 0x2c
 8000ec0:	d02b      	beq.n	8000f1a <jsmn_parse_primitive+0x9a>
      break;
 8000ec2:	e003      	b.n	8000ecc <jsmn_parse_primitive+0x4c>
    switch (js[parser->pos]) {
 8000ec4:	2b5d      	cmp	r3, #93	; 0x5d
 8000ec6:	d028      	beq.n	8000f1a <jsmn_parse_primitive+0x9a>
 8000ec8:	2b7d      	cmp	r3, #125	; 0x7d
 8000eca:	d026      	beq.n	8000f1a <jsmn_parse_primitive+0x9a>
      break;
 8000ecc:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b1f      	cmp	r3, #31
 8000eda:	d906      	bls.n	8000eea <jsmn_parse_primitive+0x6a>
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	68ba      	ldr	r2, [r7, #8]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b7e      	cmp	r3, #126	; 0x7e
 8000ee8:	d905      	bls.n	8000ef6 <jsmn_parse_primitive+0x76>
      parser->pos = start;
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8000ef0:	f06f 0301 	mvn.w	r3, #1
 8000ef4:	e038      	b.n	8000f68 <jsmn_parse_primitive+0xe8>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d208      	bcs.n	8000f1c <jsmn_parse_primitive+0x9c>
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	4413      	add	r3, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1be      	bne.n	8000e96 <jsmn_parse_primitive+0x16>
 8000f18:	e000      	b.n	8000f1c <jsmn_parse_primitive+0x9c>
      goto found;
 8000f1a:	bf00      	nop
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
  if (tokens == NULL) {
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d106      	bne.n	8000f30 <jsmn_parse_primitive+0xb0>
    parser->pos--;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	1e5a      	subs	r2, r3, #1
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	601a      	str	r2, [r3, #0]
    return 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e01b      	b.n	8000f68 <jsmn_parse_primitive+0xe8>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000f30:	6a3a      	ldr	r2, [r7, #32]
 8000f32:	6839      	ldr	r1, [r7, #0]
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f7ff ff61 	bl	8000dfc <jsmn_alloc_token>
 8000f3a:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d105      	bne.n	8000f4e <jsmn_parse_primitive+0xce>
    parser->pos = start;
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4c:	e00c      	b.n	8000f68 <jsmn_parse_primitive+0xe8>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	2104      	movs	r1, #4
 8000f56:	6938      	ldr	r0, [r7, #16]
 8000f58:	f7ff ff78 	bl	8000e4c <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	1e5a      	subs	r2, r3, #1
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	601a      	str	r2, [r3, #0]
  return 0;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	61bb      	str	r3, [r7, #24]

  parser->pos++;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	601a      	str	r2, [r3, #0]

  /* Skip starting quote */
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000f8e:	e14c      	b.n	800122a <jsmn_parse_string+0x2ba>
    char c = js[parser->pos];
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68ba      	ldr	r2, [r7, #8]
 8000f96:	4413      	add	r3, r2
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	2b22      	cmp	r3, #34	; 0x22
 8000fa0:	d11d      	bne.n	8000fde <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <jsmn_parse_string+0x3c>
        return 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e150      	b.n	800124e <jsmn_parse_string+0x2de>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fae:	6839      	ldr	r1, [r7, #0]
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f7ff ff23 	bl	8000dfc <jsmn_alloc_token>
 8000fb6:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d105      	bne.n	8000fca <jsmn_parse_string+0x5a>
        parser->pos = start;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	e141      	b.n	800124e <jsmn_parse_string+0x2de>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	1c5a      	adds	r2, r3, #1
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2103      	movs	r1, #3
 8000fd4:	6938      	ldr	r0, [r7, #16]
 8000fd6:	f7ff ff39 	bl	8000e4c <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e137      	b.n	800124e <jsmn_parse_string+0x2de>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
 8000fe0:	2b5c      	cmp	r3, #92	; 0x5c
 8000fe2:	f040 811d 	bne.w	8001220 <jsmn_parse_string+0x2b0>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	f080 8116 	bcs.w	8001220 <jsmn_parse_string+0x2b0>
      int i;
      parser->pos++;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	4413      	add	r3, r2
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	3b22      	subs	r3, #34	; 0x22
 800100a:	2b53      	cmp	r3, #83	; 0x53
 800100c:	f200 8101 	bhi.w	8001212 <jsmn_parse_string+0x2a2>
 8001010:	a201      	add	r2, pc, #4	; (adr r2, 8001018 <jsmn_parse_string+0xa8>)
 8001012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001016:	bf00      	nop
 8001018:	0800121f 	.word	0x0800121f
 800101c:	08001213 	.word	0x08001213
 8001020:	08001213 	.word	0x08001213
 8001024:	08001213 	.word	0x08001213
 8001028:	08001213 	.word	0x08001213
 800102c:	08001213 	.word	0x08001213
 8001030:	08001213 	.word	0x08001213
 8001034:	08001213 	.word	0x08001213
 8001038:	08001213 	.word	0x08001213
 800103c:	08001213 	.word	0x08001213
 8001040:	08001213 	.word	0x08001213
 8001044:	08001213 	.word	0x08001213
 8001048:	08001213 	.word	0x08001213
 800104c:	0800121f 	.word	0x0800121f
 8001050:	08001213 	.word	0x08001213
 8001054:	08001213 	.word	0x08001213
 8001058:	08001213 	.word	0x08001213
 800105c:	08001213 	.word	0x08001213
 8001060:	08001213 	.word	0x08001213
 8001064:	08001213 	.word	0x08001213
 8001068:	08001213 	.word	0x08001213
 800106c:	08001213 	.word	0x08001213
 8001070:	08001213 	.word	0x08001213
 8001074:	08001213 	.word	0x08001213
 8001078:	08001213 	.word	0x08001213
 800107c:	08001213 	.word	0x08001213
 8001080:	08001213 	.word	0x08001213
 8001084:	08001213 	.word	0x08001213
 8001088:	08001213 	.word	0x08001213
 800108c:	08001213 	.word	0x08001213
 8001090:	08001213 	.word	0x08001213
 8001094:	08001213 	.word	0x08001213
 8001098:	08001213 	.word	0x08001213
 800109c:	08001213 	.word	0x08001213
 80010a0:	08001213 	.word	0x08001213
 80010a4:	08001213 	.word	0x08001213
 80010a8:	08001213 	.word	0x08001213
 80010ac:	08001213 	.word	0x08001213
 80010b0:	08001213 	.word	0x08001213
 80010b4:	08001213 	.word	0x08001213
 80010b8:	08001213 	.word	0x08001213
 80010bc:	08001213 	.word	0x08001213
 80010c0:	08001213 	.word	0x08001213
 80010c4:	08001213 	.word	0x08001213
 80010c8:	08001213 	.word	0x08001213
 80010cc:	08001213 	.word	0x08001213
 80010d0:	08001213 	.word	0x08001213
 80010d4:	08001213 	.word	0x08001213
 80010d8:	08001213 	.word	0x08001213
 80010dc:	08001213 	.word	0x08001213
 80010e0:	08001213 	.word	0x08001213
 80010e4:	08001213 	.word	0x08001213
 80010e8:	08001213 	.word	0x08001213
 80010ec:	08001213 	.word	0x08001213
 80010f0:	08001213 	.word	0x08001213
 80010f4:	08001213 	.word	0x08001213
 80010f8:	08001213 	.word	0x08001213
 80010fc:	08001213 	.word	0x08001213
 8001100:	0800121f 	.word	0x0800121f
 8001104:	08001213 	.word	0x08001213
 8001108:	08001213 	.word	0x08001213
 800110c:	08001213 	.word	0x08001213
 8001110:	08001213 	.word	0x08001213
 8001114:	08001213 	.word	0x08001213
 8001118:	0800121f 	.word	0x0800121f
 800111c:	08001213 	.word	0x08001213
 8001120:	08001213 	.word	0x08001213
 8001124:	08001213 	.word	0x08001213
 8001128:	0800121f 	.word	0x0800121f
 800112c:	08001213 	.word	0x08001213
 8001130:	08001213 	.word	0x08001213
 8001134:	08001213 	.word	0x08001213
 8001138:	08001213 	.word	0x08001213
 800113c:	08001213 	.word	0x08001213
 8001140:	08001213 	.word	0x08001213
 8001144:	08001213 	.word	0x08001213
 8001148:	0800121f 	.word	0x0800121f
 800114c:	08001213 	.word	0x08001213
 8001150:	08001213 	.word	0x08001213
 8001154:	08001213 	.word	0x08001213
 8001158:	0800121f 	.word	0x0800121f
 800115c:	08001213 	.word	0x08001213
 8001160:	0800121f 	.word	0x0800121f
 8001164:	08001169 	.word	0x08001169
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	e037      	b.n	80011e8 <jsmn_parse_string+0x278>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	4413      	add	r3, r2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b2f      	cmp	r3, #47	; 0x2f
 8001184:	d906      	bls.n	8001194 <jsmn_parse_string+0x224>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	4413      	add	r3, r2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b39      	cmp	r3, #57	; 0x39
 8001192:	d921      	bls.n	80011d8 <jsmn_parse_string+0x268>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	4413      	add	r3, r2
 800119c:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 800119e:	2b40      	cmp	r3, #64	; 0x40
 80011a0:	d906      	bls.n	80011b0 <jsmn_parse_string+0x240>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	4413      	add	r3, r2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b46      	cmp	r3, #70	; 0x46
 80011ae:	d913      	bls.n	80011d8 <jsmn_parse_string+0x268>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	4413      	add	r3, r2
 80011b8:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 80011ba:	2b60      	cmp	r3, #96	; 0x60
 80011bc:	d906      	bls.n	80011cc <jsmn_parse_string+0x25c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	4413      	add	r3, r2
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b66      	cmp	r3, #102	; 0x66
 80011ca:	d905      	bls.n	80011d8 <jsmn_parse_string+0x268>
            parser->pos = start;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 80011d2:	f06f 0301 	mvn.w	r3, #1
 80011d6:	e03a      	b.n	800124e <jsmn_parse_string+0x2de>
          }
          parser->pos++;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	601a      	str	r2, [r3, #0]
             i++) {
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	dc0b      	bgt.n	8001206 <jsmn_parse_string+0x296>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d206      	bcs.n	8001206 <jsmn_parse_string+0x296>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	4413      	add	r3, r2
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1b8      	bne.n	8001178 <jsmn_parse_string+0x208>
        }
        parser->pos--;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	1e5a      	subs	r2, r3, #1
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	601a      	str	r2, [r3, #0]
        break;
 8001210:	e006      	b.n	8001220 <jsmn_parse_string+0x2b0>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8001218:	f06f 0301 	mvn.w	r3, #1
 800121c:	e017      	b.n	800124e <jsmn_parse_string+0x2de>
        break;
 800121e:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	d207      	bcs.n	8001244 <jsmn_parse_string+0x2d4>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	4413      	add	r3, r2
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f47f aea6 	bne.w	8000f90 <jsmn_parse_string+0x20>
      }
    }
  }
  parser->pos = start;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 800124a:	f06f 0302 	mvn.w	r3, #2
}
 800124e:	4618      	mov	r0, r3
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop

08001258 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	; 0x30
 800125c:	af02      	add	r7, sp, #8
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 800126c:	e15f      	b.n	800152e <jsmn_parse+0x2d6>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	4413      	add	r3, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 800127a:	7ffb      	ldrb	r3, [r7, #31]
 800127c:	2b2c      	cmp	r3, #44	; 0x2c
 800127e:	f000 80dd 	beq.w	800143c <jsmn_parse+0x1e4>
 8001282:	2b2c      	cmp	r3, #44	; 0x2c
 8001284:	dc10      	bgt.n	80012a8 <jsmn_parse+0x50>
 8001286:	2b0d      	cmp	r3, #13
 8001288:	f000 8141 	beq.w	800150e <jsmn_parse+0x2b6>
 800128c:	2b0d      	cmp	r3, #13
 800128e:	dc04      	bgt.n	800129a <jsmn_parse+0x42>
 8001290:	3b09      	subs	r3, #9
 8001292:	2b01      	cmp	r3, #1
 8001294:	f200 8119 	bhi.w	80014ca <jsmn_parse+0x272>
      break;
    case '\t':
    case '\r':
    case '\n':
    case ' ':
      break;
 8001298:	e139      	b.n	800150e <jsmn_parse+0x2b6>
    switch (c) {
 800129a:	2b20      	cmp	r3, #32
 800129c:	f000 8137 	beq.w	800150e <jsmn_parse+0x2b6>
 80012a0:	2b22      	cmp	r3, #34	; 0x22
 80012a2:	f000 80a1 	beq.w	80013e8 <jsmn_parse+0x190>
 80012a6:	e110      	b.n	80014ca <jsmn_parse+0x272>
 80012a8:	2b5d      	cmp	r3, #93	; 0x5d
 80012aa:	d043      	beq.n	8001334 <jsmn_parse+0xdc>
 80012ac:	2b5d      	cmp	r3, #93	; 0x5d
 80012ae:	dc05      	bgt.n	80012bc <jsmn_parse+0x64>
 80012b0:	2b3a      	cmp	r3, #58	; 0x3a
 80012b2:	f000 80bc 	beq.w	800142e <jsmn_parse+0x1d6>
 80012b6:	2b5b      	cmp	r3, #91	; 0x5b
 80012b8:	d005      	beq.n	80012c6 <jsmn_parse+0x6e>
 80012ba:	e106      	b.n	80014ca <jsmn_parse+0x272>
 80012bc:	2b7b      	cmp	r3, #123	; 0x7b
 80012be:	d002      	beq.n	80012c6 <jsmn_parse+0x6e>
 80012c0:	2b7d      	cmp	r3, #125	; 0x7d
 80012c2:	d037      	beq.n	8001334 <jsmn_parse+0xdc>
 80012c4:	e101      	b.n	80014ca <jsmn_parse+0x272>
      count++;
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	3301      	adds	r3, #1
 80012ca:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 811f 	beq.w	8001512 <jsmn_parse+0x2ba>
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 80012d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012d6:	6839      	ldr	r1, [r7, #0]
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f7ff fd8f 	bl	8000dfc <jsmn_alloc_token>
 80012de:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <jsmn_parse+0x94>
        return JSMN_ERROR_NOMEM;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e14f      	b.n	800158c <jsmn_parse+0x334>
      if (parser->toksuper != -1) {
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f4:	d00a      	beq.n	800130c <jsmn_parse+0xb4>
        jsmntok_t *t = &tokens[parser->toksuper];
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        t->size++;
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	60da      	str	r2, [r3, #12]
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	2b7b      	cmp	r3, #123	; 0x7b
 8001310:	d101      	bne.n	8001316 <jsmn_parse+0xbe>
 8001312:	2201      	movs	r2, #1
 8001314:	e000      	b.n	8001318 <jsmn_parse+0xc0>
 8001316:	2202      	movs	r2, #2
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	461a      	mov	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	609a      	str	r2, [r3, #8]
      break;
 8001332:	e0f7      	b.n	8001524 <jsmn_parse+0x2cc>
      if (tokens == NULL) {
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 80ed 	beq.w	8001516 <jsmn_parse+0x2be>
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 800133c:	7ffb      	ldrb	r3, [r7, #31]
 800133e:	2b7d      	cmp	r3, #125	; 0x7d
 8001340:	d101      	bne.n	8001346 <jsmn_parse+0xee>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <jsmn_parse+0xf0>
 8001346:	2302      	movs	r3, #2
 8001348:	77bb      	strb	r3, [r7, #30]
      for (i = parser->toknext - 1; i >= 0; i--) {
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
 8001352:	e024      	b.n	800139e <jsmn_parse+0x146>
        token = &tokens[i];
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	4413      	add	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001366:	d017      	beq.n	8001398 <jsmn_parse+0x140>
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001370:	d112      	bne.n	8001398 <jsmn_parse+0x140>
          if (token->type != type) {
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	7fba      	ldrb	r2, [r7, #30]
 8001378:	429a      	cmp	r2, r3
 800137a:	d002      	beq.n	8001382 <jsmn_parse+0x12a>
            return JSMN_ERROR_INVAL;
 800137c:	f06f 0301 	mvn.w	r3, #1
 8001380:	e104      	b.n	800158c <jsmn_parse+0x334>
          parser->toksuper = -1;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	461a      	mov	r2, r3
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	609a      	str	r2, [r3, #8]
          break;
 8001396:	e005      	b.n	80013a4 <jsmn_parse+0x14c>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	3b01      	subs	r3, #1
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dad7      	bge.n	8001354 <jsmn_parse+0xfc>
      if (i == -1) {
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013aa:	d119      	bne.n	80013e0 <jsmn_parse+0x188>
        return JSMN_ERROR_INVAL;
 80013ac:	f06f 0301 	mvn.w	r3, #1
 80013b0:	e0ec      	b.n	800158c <jsmn_parse+0x334>
        token = &tokens[i];
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	4413      	add	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d009      	beq.n	80013da <jsmn_parse+0x182>
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ce:	d104      	bne.n	80013da <jsmn_parse+0x182>
          parser->toksuper = i;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d4:	609a      	str	r2, [r3, #8]
          break;
 80013d6:	bf00      	nop
      break;
 80013d8:	e0a4      	b.n	8001524 <jsmn_parse+0x2cc>
      for (; i >= 0; i--) {
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	3b01      	subs	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	dae5      	bge.n	80013b2 <jsmn_parse+0x15a>
      break;
 80013e6:	e09d      	b.n	8001524 <jsmn_parse+0x2cc>
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 80013e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f7ff fdbc 	bl	8000f70 <jsmn_parse_string>
 80013f8:	6178      	str	r0, [r7, #20]
      if (r < 0) {
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da01      	bge.n	8001404 <jsmn_parse+0x1ac>
        return r;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	e0c3      	b.n	800158c <jsmn_parse+0x334>
      count++;
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	3301      	adds	r3, #1
 8001408:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001412:	f000 8082 	beq.w	800151a <jsmn_parse+0x2c2>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d07e      	beq.n	800151a <jsmn_parse+0x2c2>
        tokens[parser->toksuper].size++;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	4413      	add	r3, r2
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	3201      	adds	r2, #1
 800142a:	60da      	str	r2, [r3, #12]
      break;
 800142c:	e075      	b.n	800151a <jsmn_parse+0x2c2>
    case ':':
      parser->toksuper = parser->toknext - 1;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	461a      	mov	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	609a      	str	r2, [r3, #8]
      break;
 800143a:	e073      	b.n	8001524 <jsmn_parse+0x2cc>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d06d      	beq.n	800151e <jsmn_parse+0x2c6>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144a:	d068      	beq.n	800151e <jsmn_parse+0x2c6>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	4413      	add	r3, r2
 8001456:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8001458:	2b02      	cmp	r3, #2
 800145a:	d060      	beq.n	800151e <jsmn_parse+0x2c6>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	4413      	add	r3, r2
 8001466:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8001468:	2b01      	cmp	r3, #1
 800146a:	d058      	beq.n	800151e <jsmn_parse+0x2c6>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	3b01      	subs	r3, #1
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
 8001474:	e025      	b.n	80014c2 <jsmn_parse+0x26a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	4413      	add	r3, r2
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d006      	beq.n	8001492 <jsmn_parse+0x23a>
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d114      	bne.n	80014bc <jsmn_parse+0x264>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	4413      	add	r3, r2
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d00c      	beq.n	80014bc <jsmn_parse+0x264>
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	011b      	lsls	r3, r3, #4
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	4413      	add	r3, r2
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d104      	bne.n	80014bc <jsmn_parse+0x264>
              parser->toksuper = i;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b6:	609a      	str	r2, [r3, #8]
              break;
 80014b8:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 80014ba:	e030      	b.n	800151e <jsmn_parse+0x2c6>
        for (i = parser->toknext - 1; i >= 0; i--) {
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	3b01      	subs	r3, #1
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	dad6      	bge.n	8001476 <jsmn_parse+0x21e>
      break;
 80014c8:	e029      	b.n	800151e <jsmn_parse+0x2c6>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 80014ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	68b9      	ldr	r1, [r7, #8]
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f7ff fcd3 	bl	8000e80 <jsmn_parse_primitive>
 80014da:	6178      	str	r0, [r7, #20]
      if (r < 0) {
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	da01      	bge.n	80014e6 <jsmn_parse+0x28e>
        return r;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	e052      	b.n	800158c <jsmn_parse+0x334>
      }
      count++;
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	3301      	adds	r3, #1
 80014ea:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d015      	beq.n	8001522 <jsmn_parse+0x2ca>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d012      	beq.n	8001522 <jsmn_parse+0x2ca>
        tokens[parser->toksuper].size++;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	4413      	add	r3, r2
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	3201      	adds	r2, #1
 800150a:	60da      	str	r2, [r3, #12]
      }
      break;
 800150c:	e009      	b.n	8001522 <jsmn_parse+0x2ca>
      break;
 800150e:	bf00      	nop
 8001510:	e008      	b.n	8001524 <jsmn_parse+0x2cc>
        break;
 8001512:	bf00      	nop
 8001514:	e006      	b.n	8001524 <jsmn_parse+0x2cc>
        break;
 8001516:	bf00      	nop
 8001518:	e004      	b.n	8001524 <jsmn_parse+0x2cc>
      break;
 800151a:	bf00      	nop
 800151c:	e002      	b.n	8001524 <jsmn_parse+0x2cc>
      break;
 800151e:	bf00      	nop
 8001520:	e000      	b.n	8001524 <jsmn_parse+0x2cc>
      break;
 8001522:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	d207      	bcs.n	8001548 <jsmn_parse+0x2f0>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	4413      	add	r3, r2
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f47f ae93 	bne.w	800126e <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d01d      	beq.n	800158a <jsmn_parse+0x332>
    for (i = parser->toknext - 1; i >= 0; i--) {
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
 8001556:	e015      	b.n	8001584 <jsmn_parse+0x32c>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	4413      	add	r3, r2
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001566:	d00a      	beq.n	800157e <jsmn_parse+0x326>
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	4413      	add	r3, r2
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001576:	d102      	bne.n	800157e <jsmn_parse+0x326>
        return JSMN_ERROR_PART;
 8001578:	f06f 0302 	mvn.w	r3, #2
 800157c:	e006      	b.n	800158c <jsmn_parse+0x334>
    for (i = parser->toknext - 1; i >= 0; i--) {
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	3b01      	subs	r3, #1
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	2b00      	cmp	r3, #0
 8001588:	dae6      	bge.n	8001558 <jsmn_parse+0x300>
      }
    }
  }

  return count;
 800158a:	6a3b      	ldr	r3, [r7, #32]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3728      	adds	r7, #40	; 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f04f 32ff 	mov.w	r2, #4294967295
 80015ae:	609a      	str	r2, [r3, #8]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <jsoneq>:
#include "jsmn.h"

#include <string.h>
#include <stdlib.h>

static int jsoneq(const char* json, jsmntok_t* tok, const char* s) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d11e      	bne.n	800160e <jsoneq+0x52>
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7fe fdfd 	bl	80001d0 <strlen>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4619      	mov	r1, r3
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	4299      	cmp	r1, r3
 80015e6:	d112      	bne.n	800160e <jsoneq+0x52>
		strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	461a      	mov	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1898      	adds	r0, r3, r2
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f007 ff39 	bl	8009476 <strncmp>
 8001604:	4603      	mov	r3, r0
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <jsoneq+0x52>
		return 0;
 800160a:	2300      	movs	r3, #0
 800160c:	e001      	b.n	8001612 <jsoneq+0x56>
	}
	return -1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <json_get_op>:

int json_get_op(const char* input, struct OUTPUTS* out)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	f6ad 0d7c 	subw	sp, sp, #2172	; 0x87c
 8001622:	af02      	add	r7, sp, #8
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	6018      	str	r0, [r3, #0]
 8001628:	463b      	mov	r3, r7
 800162a:	6019      	str	r1, [r3, #0]
	int counter = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
	int tm_counter = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 3868 	str.w	r3, [r7, #2152]	; 0x868
	int tt_counter = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
	int rst_counter = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 3860 	str.w	r3, [r7, #2144]	; 0x860
	int cntr_counter = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
	int dl_counter = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
	int root_counter = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
	int i;
	int r;
	jsmn_parser p;
	jsmntok_t t[128];

	jsmn_init(&p);
 8001656:	f607 0314 	addw	r3, r7, #2068	; 0x814
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff9a 	bl	8001594 <jsmn_init>
	r = jsmn_parse(&p, input, strlen(input), t, sizeof(t) / sizeof(t[0]));
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	f7fe fdb4 	bl	80001d0 <strlen>
 8001668:	4604      	mov	r4, r0
 800166a:	f107 0214 	add.w	r2, r7, #20
 800166e:	1d39      	adds	r1, r7, #4
 8001670:	f607 0014 	addw	r0, r7, #2068	; 0x814
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	4613      	mov	r3, r2
 800167a:	4622      	mov	r2, r4
 800167c:	6809      	ldr	r1, [r1, #0]
 800167e:	f7ff fdeb 	bl	8001258 <jsmn_parse>
 8001682:	f8c7 0830 	str.w	r0, [r7, #2096]	; 0x830

	if (r < 1 || t[0].type != JSMN_OBJECT)
 8001686:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 800168a:	2b00      	cmp	r3, #0
 800168c:	dd04      	ble.n	8001698 <json_get_op+0x7c>
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d002      	beq.n	800169e <json_get_op+0x82>
	{
		return 0;
 8001698:	2300      	movs	r3, #0
 800169a:	f000 be3d 	b.w	8002318 <json_get_op+0xcfc>
	}

	for (i = 1; i < r; i++) {
 800169e:	2301      	movs	r3, #1
 80016a0:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
 80016a4:	f000 be2f 	b.w	8002306 <json_get_op+0xcea>

		if (jsoneq(input, &t[i], "OUT") == 0)
 80016a8:	f107 0214 	add.w	r2, r7, #20
 80016ac:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	18d1      	adds	r1, r2, r3
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	4acf      	ldr	r2, [pc, #828]	; (80019f4 <json_get_op+0x3d8>)
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	f7ff ff7f 	bl	80015bc <jsoneq>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d106      	bne.n	80016d2 <json_get_op+0xb6>
		{
			i++;
 80016c4:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80016c8:	3301      	adds	r3, #1
 80016ca:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
 80016ce:	f000 be15 	b.w	80022fc <json_get_op+0xce0>
		}

		else if (jsoneq(input, &t[i], "brch") == 0)
 80016d2:	f107 0214 	add.w	r2, r7, #20
 80016d6:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	18d1      	adds	r1, r2, r3
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	4ac5      	ldr	r2, [pc, #788]	; (80019f8 <json_get_op+0x3dc>)
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	f7ff ff6a 	bl	80015bc <jsoneq>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 84dd 	bne.w	80020aa <json_get_op+0xa8e>
		{
			if (t[i + 1].type != JSMN_ARRAY)
 80016f0:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80016f4:	3301      	adds	r3, #1
 80016f6:	f107 0214 	add.w	r2, r7, #20
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4413      	add	r3, r2
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b02      	cmp	r3, #2
 8001702:	f040 85f8 	bne.w	80022f6 <json_get_op+0xcda>
			{
				continue;
			}

			int j = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
			for (j; j < t[i + 1].size; ++j)
 800170c:	f000 bcab 	b.w	8002066 <json_get_op+0xa4a>
			{
				jsmntok_t* g = &t[i + j + 2];
 8001710:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 8001714:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8001718:	4413      	add	r3, r2
 800171a:	3302      	adds	r3, #2
 800171c:	f107 0214 	add.w	r2, r7, #20
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	4413      	add	r3, r2
 8001724:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c

				char* p_stt = (char*)input + g->start + 1;
 8001728:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	3301      	adds	r3, #1
 8001730:	1d3a      	adds	r2, r7, #4
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	4413      	add	r3, r2
 8001736:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
				char* p_end = NULL;
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]

				memcpy(out->root_par[j].name, p_stt, 3);
 8001742:	4639      	mov	r1, r7
 8001744:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8001754:	680a      	ldr	r2, [r1, #0]
 8001756:	4413      	add	r3, r2
 8001758:	3302      	adds	r3, #2
 800175a:	2203      	movs	r2, #3
 800175c:	f8d7 1828 	ldr.w	r1, [r7, #2088]	; 0x828
 8001760:	4618      	mov	r0, r3
 8001762:	f007 fbd0 	bl	8008f06 <memcpy>
				out->root_par[j].name[3] = 0; //manually null terminated
 8001766:	463b      	mov	r3, r7
 8001768:	6819      	ldr	r1, [r3, #0]
 800176a:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	f603 132d 	addw	r3, r3, #2349	; 0x92d
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
				out->root_par[j].id = j;
 8001780:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8001784:	b2d8      	uxtb	r0, r3
 8001786:	463b      	mov	r3, r7
 8001788:	6819      	ldr	r1, [r3, #0]
 800178a:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	f603 132f 	addw	r3, r3, #2351	; 0x92f
 800179c:	4602      	mov	r2, r0
 800179e:	701a      	strb	r2, [r3, #0]

				if (out->root_par[j].name[0] == 'i') //ino
 80017a0:	463b      	mov	r3, r7
 80017a2:	6819      	ldr	r1, [r3, #0]
 80017a4:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	f603 132a 	addw	r3, r3, #2346	; 0x92a
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b69      	cmp	r3, #105	; 0x69
 80017ba:	d134      	bne.n	8001826 <json_get_op+0x20a>
				{
					out->root_par[j].type = INO;
 80017bc:	463b      	mov	r3, r7
 80017be:	6819      	ldr	r1, [r3, #0]
 80017c0:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 80017d2:	2206      	movs	r2, #6
 80017d4:	701a      	strb	r2, [r3, #0]
					out->root_par[j].operation = NULL;
 80017d6:	463b      	mov	r3, r7
 80017d8:	6819      	ldr	r1, [r3, #0]
 80017da:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	f603 1324 	addw	r3, r3, #2340	; 0x924
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
					out->root_par[j].operation_n = strtol(p_stt + 4, NULL, 10) + 200; //save inp to op number
 80017f0:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 80017f4:	3304      	adds	r3, #4
 80017f6:	220a      	movs	r2, #10
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f007 fefa 	bl	80095f4 <strtol>
 8001800:	4603      	mov	r3, r0
 8001802:	b29b      	uxth	r3, r3
 8001804:	33c8      	adds	r3, #200	; 0xc8
 8001806:	b298      	uxth	r0, r3
 8001808:	463b      	mov	r3, r7
 800180a:	6819      	ldr	r1, [r3, #0]
 800180c:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	f603 1328 	addw	r3, r3, #2344	; 0x928
 800181e:	4602      	mov	r2, r0
 8001820:	801a      	strh	r2, [r3, #0]
					continue;
 8001822:	f000 bc1b 	b.w	800205c <json_get_op+0xa40>
				}

				if (out->root_par[j].name[0] == 'g') //telegram
 8001826:	463b      	mov	r3, r7
 8001828:	6819      	ldr	r1, [r3, #0]
 800182a:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	f603 132a 	addw	r3, r3, #2346	; 0x92a
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b67      	cmp	r3, #103	; 0x67
 8001840:	d134      	bne.n	80018ac <json_get_op+0x290>
				{
					out->root_par[j].type = WEB;
 8001842:	463b      	mov	r3, r7
 8001844:	6819      	ldr	r1, [r3, #0]
 8001846:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8001858:	2207      	movs	r2, #7
 800185a:	701a      	strb	r2, [r3, #0]
					out->root_par[j].operation = NULL;
 800185c:	463b      	mov	r3, r7
 800185e:	6819      	ldr	r1, [r3, #0]
 8001860:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	f603 1324 	addw	r3, r3, #2340	; 0x924
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
					out->root_par[j].operation_n = strtol(p_stt + 4, NULL, 10) + 600;
 8001876:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 800187a:	3304      	adds	r3, #4
 800187c:	220a      	movs	r2, #10
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f007 feb7 	bl	80095f4 <strtol>
 8001886:	4603      	mov	r3, r0
 8001888:	b29b      	uxth	r3, r3
 800188a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800188e:	b298      	uxth	r0, r3
 8001890:	463b      	mov	r3, r7
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	f603 1328 	addw	r3, r3, #2344	; 0x928
 80018a6:	4602      	mov	r2, r0
 80018a8:	801a      	strh	r2, [r3, #0]
					continue;
 80018aa:	e3d7      	b.n	800205c <json_get_op+0xa40>
				}

				if (out->root_par[j].name[0] == 'p') //pmo
 80018ac:	463b      	mov	r3, r7
 80018ae:	6819      	ldr	r1, [r3, #0]
 80018b0:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	f603 132a 	addw	r3, r3, #2346	; 0x92a
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b70      	cmp	r3, #112	; 0x70
 80018c6:	d134      	bne.n	8001932 <json_get_op+0x316>
				{
					out->root_par[j].type = PMO;
 80018c8:	463b      	mov	r3, r7
 80018ca:	6819      	ldr	r1, [r3, #0]
 80018cc:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 80018de:	2205      	movs	r2, #5
 80018e0:	701a      	strb	r2, [r3, #0]
					out->root_par[j].operation = NULL;
 80018e2:	463b      	mov	r3, r7
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	f603 1324 	addw	r3, r3, #2340	; 0x924
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
					out->root_par[j].operation_n = strtol(p_stt + 4, NULL, 10) + 800;
 80018fc:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001900:	3304      	adds	r3, #4
 8001902:	220a      	movs	r2, #10
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f007 fe74 	bl	80095f4 <strtol>
 800190c:	4603      	mov	r3, r0
 800190e:	b29b      	uxth	r3, r3
 8001910:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001914:	b298      	uxth	r0, r3
 8001916:	463b      	mov	r3, r7
 8001918:	6819      	ldr	r1, [r3, #0]
 800191a:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	f603 1328 	addw	r3, r3, #2344	; 0x928
 800192c:	4602      	mov	r2, r0
 800192e:	801a      	strh	r2, [r3, #0]
					continue;
 8001930:	e394      	b.n	800205c <json_get_op+0xa40>
				}

				if (out->root_par[j].name[0] == 'w') //week
 8001932:	463b      	mov	r3, r7
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	f603 132a 	addw	r3, r3, #2346	; 0x92a
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b77      	cmp	r3, #119	; 0x77
 800194c:	d131      	bne.n	80019b2 <json_get_op+0x396>
				{
					out->root_par[j].type = WEEK;
 800194e:	463b      	mov	r3, r7
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8001964:	2204      	movs	r2, #4
 8001966:	701a      	strb	r2, [r3, #0]
					out->root_par[j].operation = NULL;
 8001968:	463b      	mov	r3, r7
 800196a:	6819      	ldr	r1, [r3, #0]
 800196c:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	f603 1324 	addw	r3, r3, #2340	; 0x924
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
					out->root_par[j].operation_n = strtol(p_stt + 4, NULL, 16); //save value to op number
 8001982:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001986:	3304      	adds	r3, #4
 8001988:	2210      	movs	r2, #16
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f007 fe31 	bl	80095f4 <strtol>
 8001992:	4603      	mov	r3, r0
 8001994:	b298      	uxth	r0, r3
 8001996:	463b      	mov	r3, r7
 8001998:	6819      	ldr	r1, [r3, #0]
 800199a:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	f603 1328 	addw	r3, r3, #2344	; 0x928
 80019ac:	4602      	mov	r2, r0
 80019ae:	801a      	strh	r2, [r3, #0]
					continue;
 80019b0:	e354      	b.n	800205c <json_get_op+0xa40>
				}

				if (out->root_par[j].name[0] == 'c') //counter
 80019b2:	463b      	mov	r3, r7
 80019b4:	6819      	ldr	r1, [r3, #0]
 80019b6:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	f603 132a 	addw	r3, r3, #2346	; 0x92a
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b63      	cmp	r3, #99	; 0x63
 80019cc:	f040 8085 	bne.w	8001ada <json_get_op+0x4be>
				{
					out->root_par[j].type = COUNTER;
 80019d0:	463b      	mov	r3, r7
 80019d2:	6819      	ldr	r1, [r3, #0]
 80019d4:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 80019e6:	220a      	movs	r2, #10
 80019e8:	701a      	strb	r2, [r3, #0]

					for (uint16_t r = 0; r < j; ++r)
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8a7 384a 	strh.w	r3, [r7, #2122]	; 0x84a
 80019f0:	e033      	b.n	8001a5a <json_get_op+0x43e>
 80019f2:	bf00      	nop
 80019f4:	0800ad68 	.word	0x0800ad68
 80019f8:	0800ad6c 	.word	0x0800ad6c
					{
						if (memcmp(p_stt + 5, out->root_par[r].name, 3) == 0)
 80019fc:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001a00:	1d58      	adds	r0, r3, #5
 8001a02:	f8b7 284a 	ldrh.w	r2, [r7, #2122]	; 0x84a
 8001a06:	4639      	mov	r1, r7
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8001a14:	680a      	ldr	r2, [r1, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f007 fa63 	bl	8008ee8 <memcmp>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d113      	bne.n	8001a50 <json_get_op+0x434>
						{
							out->cntr[cntr_counter].root_id = out->root_par[r].id;
 8001a28:	f8b7 284a 	ldrh.w	r2, [r7, #2122]	; 0x84a
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	6819      	ldr	r1, [r3, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	f603 132f 	addw	r3, r3, #2351	; 0x92f
 8001a3e:	7819      	ldrb	r1, [r3, #0]
 8001a40:	463b      	mov	r3, r7
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f8d7 285c 	ldr.w	r2, [r7, #2140]	; 0x85c
 8001a48:	3208      	adds	r2, #8
 8001a4a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
							break;
 8001a4e:	e00a      	b.n	8001a66 <json_get_op+0x44a>
					for (uint16_t r = 0; r < j; ++r)
 8001a50:	f8b7 384a 	ldrh.w	r3, [r7, #2122]	; 0x84a
 8001a54:	3301      	adds	r3, #1
 8001a56:	f8a7 384a 	strh.w	r3, [r7, #2122]	; 0x84a
 8001a5a:	f8b7 284a 	ldrh.w	r2, [r7, #2122]	; 0x84a
 8001a5e:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8001a62:	429a      	cmp	r2, r3
 8001a64:	dbca      	blt.n	80019fc <json_get_op+0x3e0>
						}
					}
					out->cntr[cntr_counter].trigger_value = strtol(p_stt + 10, NULL, 10);
 8001a66:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001a6a:	330a      	adds	r3, #10
 8001a6c:	220a      	movs	r2, #10
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f007 fdbf 	bl	80095f4 <strtol>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b299      	uxth	r1, r3
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	f8d7 385c 	ldr.w	r3, [r7, #2140]	; 0x85c
 8001a82:	3308      	adds	r3, #8
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	460a      	mov	r2, r1
 8001a8a:	809a      	strh	r2, [r3, #4]

					out->root_par[j].operation = out->cntr + cntr_counter;
 8001a8c:	463b      	mov	r3, r7
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001a94:	f8d7 385c 	ldr.w	r3, [r7, #2140]	; 0x85c
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	18d1      	adds	r1, r2, r3
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4403      	add	r3, r0
 8001aae:	f603 1324 	addw	r3, r3, #2340	; 0x924
 8001ab2:	6019      	str	r1, [r3, #0]
					out->root_par[j].operation_n = 1;
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	6819      	ldr	r1, [r3, #0]
 8001ab8:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8001aca:	2201      	movs	r2, #1
 8001acc:	801a      	strh	r2, [r3, #0]

					cntr_counter++;
 8001ace:	f8d7 385c 	ldr.w	r3, [r7, #2140]	; 0x85c
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
					continue;
 8001ad8:	e2c0      	b.n	800205c <json_get_op+0xa40>
				}

				if (out->root_par[j].name[0] == 'd') //delay
 8001ada:	463b      	mov	r3, r7
 8001adc:	6819      	ldr	r1, [r3, #0]
 8001ade:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	f603 132a 	addw	r3, r3, #2346	; 0x92a
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	f040 808b 	bne.w	8001c0e <json_get_op+0x5f2>
				{
					out->root_par[j].type = DELAY;
 8001af8:	463b      	mov	r3, r7
 8001afa:	6819      	ldr	r1, [r3, #0]
 8001afc:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8001b0e:	220b      	movs	r2, #11
 8001b10:	701a      	strb	r2, [r3, #0]

					for (uint16_t r = 0; r < j; ++r)
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8a7 3848 	strh.w	r3, [r7, #2120]	; 0x848
 8001b18:	e033      	b.n	8001b82 <json_get_op+0x566>
					{
						if (memcmp(p_stt + 5, out->root_par[r].name, 3) == 0)
 8001b1a:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001b1e:	1d58      	adds	r0, r3, #5
 8001b20:	f8b7 2848 	ldrh.w	r2, [r7, #2120]	; 0x848
 8001b24:	4639      	mov	r1, r7
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8001b32:	680a      	ldr	r2, [r1, #0]
 8001b34:	4413      	add	r3, r2
 8001b36:	3302      	adds	r3, #2
 8001b38:	2203      	movs	r2, #3
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f007 f9d4 	bl	8008ee8 <memcmp>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d118      	bne.n	8001b78 <json_get_op+0x55c>
						{
							out->del[dl_counter].root_id = out->root_par[r].id;
 8001b46:	f8b7 2848 	ldrh.w	r2, [r7, #2120]	; 0x848
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	6819      	ldr	r1, [r3, #0]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	f603 132f 	addw	r3, r3, #2351	; 0x92f
 8001b5c:	7818      	ldrb	r0, [r3, #0]
 8001b5e:	463b      	mov	r3, r7
 8001b60:	6819      	ldr	r1, [r3, #0]
 8001b62:	f8d7 2858 	ldr.w	r2, [r7, #2136]	; 0x858
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	3380      	adds	r3, #128	; 0x80
 8001b72:	4602      	mov	r2, r0
 8001b74:	701a      	strb	r2, [r3, #0]
							break;
 8001b76:	e00a      	b.n	8001b8e <json_get_op+0x572>
					for (uint16_t r = 0; r < j; ++r)
 8001b78:	f8b7 3848 	ldrh.w	r3, [r7, #2120]	; 0x848
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	f8a7 3848 	strh.w	r3, [r7, #2120]	; 0x848
 8001b82:	f8b7 2848 	ldrh.w	r2, [r7, #2120]	; 0x848
 8001b86:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	dbc5      	blt.n	8001b1a <json_get_op+0x4fe>
						}
					}
					out->del[dl_counter].value = strtol(p_stt + 10, NULL, 10);
 8001b8e:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001b92:	330a      	adds	r3, #10
 8001b94:	220a      	movs	r2, #10
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f007 fd2b 	bl	80095f4 <strtol>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	b298      	uxth	r0, r3
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	6819      	ldr	r1, [r3, #0]
 8001ba6:	f8d7 2858 	ldr.w	r2, [r7, #2136]	; 0x858
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3382      	adds	r3, #130	; 0x82
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	801a      	strh	r2, [r3, #0]

					out->root_par[j].operation = out->del + dl_counter;
 8001bba:	463b      	mov	r3, r7
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8001bc2:	f8d7 2858 	ldr.w	r2, [r7, #2136]	; 0x858
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4419      	add	r1, r3
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4403      	add	r3, r0
 8001be2:	f603 1324 	addw	r3, r3, #2340	; 0x924
 8001be6:	6019      	str	r1, [r3, #0]
					out->root_par[j].operation_n = 1;
 8001be8:	463b      	mov	r3, r7
 8001bea:	6819      	ldr	r1, [r3, #0]
 8001bec:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8001bfe:	2201      	movs	r2, #1
 8001c00:	801a      	strh	r2, [r3, #0]

					dl_counter++;
 8001c02:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8001c06:	3301      	adds	r3, #1
 8001c08:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
					continue;
 8001c0c:	e226      	b.n	800205c <json_get_op+0xa40>
				}

				if (out->root_par[j].name[0] == 'f') //t trigger
 8001c0e:	463b      	mov	r3, r7
 8001c10:	6819      	ldr	r1, [r3, #0]
 8001c12:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	f603 132a 	addw	r3, r3, #2346	; 0x92a
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b66      	cmp	r3, #102	; 0x66
 8001c28:	d16f      	bne.n	8001d0a <json_get_op+0x6ee>
				{
					out->root_par[j].type = T_TRIGGER;
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	6819      	ldr	r1, [r3, #0]
 8001c2e:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8001c40:	2208      	movs	r2, #8
 8001c42:	701a      	strb	r2, [r3, #0]

					for (uint16_t r = 0; r < j; ++r)
 8001c44:	2300      	movs	r3, #0
 8001c46:	f8a7 3846 	strh.w	r3, [r7, #2118]	; 0x846
 8001c4a:	e031      	b.n	8001cb0 <json_get_op+0x694>
					{
						if (memcmp(p_stt + 5, out->root_par[r].name, 3) == 0)
 8001c4c:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001c50:	1d58      	adds	r0, r3, #5
 8001c52:	f8b7 2846 	ldrh.w	r2, [r7, #2118]	; 0x846
 8001c56:	4639      	mov	r1, r7
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8001c64:	680a      	ldr	r2, [r1, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f007 f93b 	bl	8008ee8 <memcmp>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d116      	bne.n	8001ca6 <json_get_op+0x68a>
						{
							out->t_tr[tt_counter].root_id = out->root_par[r].id;
 8001c78:	f8b7 2846 	ldrh.w	r2, [r7, #2118]	; 0x846
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	6819      	ldr	r1, [r3, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	f603 132f 	addw	r3, r3, #2351	; 0x92f
 8001c8e:	7818      	ldrb	r0, [r3, #0]
 8001c90:	463b      	mov	r3, r7
 8001c92:	6819      	ldr	r1, [r3, #0]
 8001c94:	f8d7 2864 	ldr.w	r2, [r7, #2148]	; 0x864
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	701a      	strb	r2, [r3, #0]
							break;
 8001ca4:	e00a      	b.n	8001cbc <json_get_op+0x6a0>
					for (uint16_t r = 0; r < j; ++r)
 8001ca6:	f8b7 3846 	ldrh.w	r3, [r7, #2118]	; 0x846
 8001caa:	3301      	adds	r3, #1
 8001cac:	f8a7 3846 	strh.w	r3, [r7, #2118]	; 0x846
 8001cb0:	f8b7 2846 	ldrh.w	r2, [r7, #2118]	; 0x846
 8001cb4:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	dbc7      	blt.n	8001c4c <json_get_op+0x630>
						}
					}

					out->root_par[j].operation = out->t_tr + tt_counter;
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	6819      	ldr	r1, [r3, #0]
 8001cc0:	f8d7 2864 	ldr.w	r2, [r7, #2148]	; 0x864
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	4419      	add	r1, r3
 8001ccc:	463b      	mov	r3, r7
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4403      	add	r3, r0
 8001cde:	f603 1324 	addw	r3, r3, #2340	; 0x924
 8001ce2:	6019      	str	r1, [r3, #0]
					out->root_par[j].operation_n = 1;
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	6819      	ldr	r1, [r3, #0]
 8001ce8:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	801a      	strh	r2, [r3, #0]

					tt_counter++;
 8001cfe:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8001d02:	3301      	adds	r3, #1
 8001d04:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
					continue;
 8001d08:	e1a8      	b.n	800205c <json_get_op+0xa40>
				}

				if (out->root_par[j].name[0] == 'r') //rs trigger
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f603 132a 	addw	r3, r3, #2346	; 0x92a
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b72      	cmp	r3, #114	; 0x72
 8001d24:	f040 80b1 	bne.w	8001e8a <json_get_op+0x86e>
				{
					out->root_par[j].type = RS_TRIGGER;
 8001d28:	463b      	mov	r3, r7
 8001d2a:	6819      	ldr	r1, [r3, #0]
 8001d2c:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8001d3e:	2209      	movs	r2, #9
 8001d40:	701a      	strb	r2, [r3, #0]

					for (uint16_t r = 0; r < j; ++r)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3844 	strh.w	r3, [r7, #2116]	; 0x844
 8001d48:	e032      	b.n	8001db0 <json_get_op+0x794>
					{
						if (memcmp(p_stt + 5, out->root_par[r].name, 3) == 0)
 8001d4a:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001d4e:	1d58      	adds	r0, r3, #5
 8001d50:	f8b7 2844 	ldrh.w	r2, [r7, #2116]	; 0x844
 8001d54:	4639      	mov	r1, r7
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8001d62:	680a      	ldr	r2, [r1, #0]
 8001d64:	4413      	add	r3, r2
 8001d66:	3302      	adds	r3, #2
 8001d68:	2203      	movs	r2, #3
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f007 f8bc 	bl	8008ee8 <memcmp>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d117      	bne.n	8001da6 <json_get_op+0x78a>
						{
							out->rs_tr[rst_counter].root_id_s = out->root_par[r].id;
 8001d76:	f8b7 2844 	ldrh.w	r2, [r7, #2116]	; 0x844
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	6819      	ldr	r1, [r3, #0]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	f603 132f 	addw	r3, r3, #2351	; 0x92f
 8001d8c:	7818      	ldrb	r0, [r3, #0]
 8001d8e:	463b      	mov	r3, r7
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	f8d7 2860 	ldr.w	r2, [r7, #2144]	; 0x860
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3318      	adds	r3, #24
 8001da0:	4602      	mov	r2, r0
 8001da2:	701a      	strb	r2, [r3, #0]
							break;
 8001da4:	e00a      	b.n	8001dbc <json_get_op+0x7a0>
					for (uint16_t r = 0; r < j; ++r)
 8001da6:	f8b7 3844 	ldrh.w	r3, [r7, #2116]	; 0x844
 8001daa:	3301      	adds	r3, #1
 8001dac:	f8a7 3844 	strh.w	r3, [r7, #2116]	; 0x844
 8001db0:	f8b7 2844 	ldrh.w	r2, [r7, #2116]	; 0x844
 8001db4:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbc6      	blt.n	8001d4a <json_get_op+0x72e>
						}
					}

					for (uint16_t r = 0; r < j; ++r)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8a7 3842 	strh.w	r3, [r7, #2114]	; 0x842
 8001dc2:	e033      	b.n	8001e2c <json_get_op+0x810>
					{
						if (memcmp(p_stt + 10, out->root_par[r].name, 3) == 0)
 8001dc4:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001dc8:	f103 000a 	add.w	r0, r3, #10
 8001dcc:	f8b7 2842 	ldrh.w	r2, [r7, #2114]	; 0x842
 8001dd0:	4639      	mov	r1, r7
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8001dde:	680a      	ldr	r2, [r1, #0]
 8001de0:	4413      	add	r3, r2
 8001de2:	3302      	adds	r3, #2
 8001de4:	2203      	movs	r2, #3
 8001de6:	4619      	mov	r1, r3
 8001de8:	f007 f87e 	bl	8008ee8 <memcmp>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d117      	bne.n	8001e22 <json_get_op+0x806>
						{
							out->rs_tr[rst_counter].root_id_r = out->root_par[r].id;
 8001df2:	f8b7 2842 	ldrh.w	r2, [r7, #2114]	; 0x842
 8001df6:	463b      	mov	r3, r7
 8001df8:	6819      	ldr	r1, [r3, #0]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	f603 132f 	addw	r3, r3, #2351	; 0x92f
 8001e08:	7818      	ldrb	r0, [r3, #0]
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	6819      	ldr	r1, [r3, #0]
 8001e0e:	f8d7 2860 	ldr.w	r2, [r7, #2144]	; 0x860
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	440b      	add	r3, r1
 8001e1a:	3319      	adds	r3, #25
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	701a      	strb	r2, [r3, #0]
							break;
 8001e20:	e00a      	b.n	8001e38 <json_get_op+0x81c>
					for (uint16_t r = 0; r < j; ++r)
 8001e22:	f8b7 3842 	ldrh.w	r3, [r7, #2114]	; 0x842
 8001e26:	3301      	adds	r3, #1
 8001e28:	f8a7 3842 	strh.w	r3, [r7, #2114]	; 0x842
 8001e2c:	f8b7 2842 	ldrh.w	r2, [r7, #2114]	; 0x842
 8001e30:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8001e34:	429a      	cmp	r2, r3
 8001e36:	dbc5      	blt.n	8001dc4 <json_get_op+0x7a8>
						}
					}

					out->root_par[j].operation = out->rs_tr + rst_counter;
 8001e38:	463b      	mov	r3, r7
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f103 0118 	add.w	r1, r3, #24
 8001e40:	f8d7 2860 	ldr.w	r2, [r7, #2144]	; 0x860
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	4419      	add	r1, r3
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4403      	add	r3, r0
 8001e5e:	f603 1324 	addw	r3, r3, #2340	; 0x924
 8001e62:	6019      	str	r1, [r3, #0]
					out->root_par[j].operation_n = 1;
 8001e64:	463b      	mov	r3, r7
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	801a      	strh	r2, [r3, #0]

					rst_counter++;
 8001e7e:	f8d7 3860 	ldr.w	r3, [r7, #2144]	; 0x860
 8001e82:	3301      	adds	r3, #1
 8001e84:	f8c7 3860 	str.w	r3, [r7, #2144]	; 0x860
					continue;
 8001e88:	e0e8      	b.n	800205c <json_get_op+0xa40>
				}

				if (out->root_par[j].name[0] == 't') //time
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	6819      	ldr	r1, [r3, #0]
 8001e8e:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f603 132a 	addw	r3, r3, #2346	; 0x92a
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b74      	cmp	r3, #116	; 0x74
 8001ea4:	f040 808b 	bne.w	8001fbe <json_get_op+0x9a2>
				{
					out->root_par[j].type = TIME;
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	6819      	ldr	r1, [r3, #0]
 8001eac:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	701a      	strb	r2, [r3, #0]

					out->tim[tm_counter].from.tm_hour = strtol(p_stt + 4, &p_end, 10);
 8001ec2:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	f107 0110 	add.w	r1, r7, #16
 8001ecc:	220a      	movs	r2, #10
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f007 fb90 	bl	80095f4 <strtol>
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	6819      	ldr	r1, [r3, #0]
 8001ed8:	f8d7 2868 	ldr.w	r2, [r7, #2152]	; 0x868
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	440b      	add	r3, r1
 8001ee6:	33e8      	adds	r3, #232	; 0xe8
 8001ee8:	6018      	str	r0, [r3, #0]
					out->tim[tm_counter].from.tm_min =  strtol(p_end + 1, &p_end, 10);
 8001eea:	f107 0310 	add.w	r3, r7, #16
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f107 0110 	add.w	r1, r7, #16
 8001ef6:	220a      	movs	r2, #10
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f007 fb7b 	bl	80095f4 <strtol>
 8001efe:	463b      	mov	r3, r7
 8001f00:	6819      	ldr	r1, [r3, #0]
 8001f02:	f8d7 2868 	ldr.w	r2, [r7, #2152]	; 0x868
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	33e4      	adds	r3, #228	; 0xe4
 8001f12:	6018      	str	r0, [r3, #0]

					out->tim[tm_counter].to.tm_hour = strtol(p_end + 1, &p_end, 10);
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f107 0110 	add.w	r1, r7, #16
 8001f20:	220a      	movs	r2, #10
 8001f22:	4618      	mov	r0, r3
 8001f24:	f007 fb66 	bl	80095f4 <strtol>
 8001f28:	463b      	mov	r3, r7
 8001f2a:	6819      	ldr	r1, [r3, #0]
 8001f2c:	f8d7 2868 	ldr.w	r2, [r7, #2152]	; 0x868
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001f3e:	6018      	str	r0, [r3, #0]
					out->tim[tm_counter].to.tm_min =  strtol(p_end + 1, NULL, 10);
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	220a      	movs	r2, #10
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f007 fb51 	bl	80095f4 <strtol>
 8001f52:	463b      	mov	r3, r7
 8001f54:	6819      	ldr	r1, [r3, #0]
 8001f56:	f8d7 2868 	ldr.w	r2, [r7, #2152]	; 0x868
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001f68:	6018      	str	r0, [r3, #0]

					out->root_par[j].operation = out->tim + tm_counter;
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
 8001f72:	f8d7 2868 	ldr.w	r2, [r7, #2152]	; 0x868
 8001f76:	4613      	mov	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4419      	add	r1, r3
 8001f80:	463b      	mov	r3, r7
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4403      	add	r3, r0
 8001f92:	f603 1324 	addw	r3, r3, #2340	; 0x924
 8001f96:	6019      	str	r1, [r3, #0]
					out->root_par[j].operation_n = 1;
 8001f98:	463b      	mov	r3, r7
 8001f9a:	6819      	ldr	r1, [r3, #0]
 8001f9c:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8001fae:	2201      	movs	r2, #1
 8001fb0:	801a      	strh	r2, [r3, #0]

					tm_counter++;
 8001fb2:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f8c7 3868 	str.w	r3, [r7, #2152]	; 0x868
					continue;
 8001fbc:	e04e      	b.n	800205c <json_get_op+0xa40>
				}

				if (out->root_par[j].name[0] == 's' || out->root_par[j].name[0] == 'o') //state or out
 8001fbe:	463b      	mov	r3, r7
 8001fc0:	6819      	ldr	r1, [r3, #0]
 8001fc2:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f603 132a 	addw	r3, r3, #2346	; 0x92a
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b73      	cmp	r3, #115	; 0x73
 8001fd8:	d00d      	beq.n	8001ff6 <json_get_op+0x9da>
 8001fda:	463b      	mov	r3, r7
 8001fdc:	6819      	ldr	r1, [r3, #0]
 8001fde:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	f603 132a 	addw	r3, r3, #2346	; 0x92a
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b6f      	cmp	r3, #111	; 0x6f
 8001ff4:	d132      	bne.n	800205c <json_get_op+0xa40>
				{
					out->root_par[j].type = BRCH;
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	6819      	ldr	r1, [r3, #0]
 8001ffa:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 800200c:	2202      	movs	r2, #2
 800200e:	701a      	strb	r2, [r3, #0]
					out->root_par[j].operation = NULL;
 8002010:	463b      	mov	r3, r7
 8002012:	6819      	ldr	r1, [r3, #0]
 8002014:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	f603 1324 	addw	r3, r3, #2340	; 0x924
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
					out->root_par[j].operation_n = strtol(p_stt + 4, &p_end, 10);
 800202a:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 800202e:	3304      	adds	r3, #4
 8002030:	f107 0110 	add.w	r1, r7, #16
 8002034:	220a      	movs	r2, #10
 8002036:	4618      	mov	r0, r3
 8002038:	f007 fadc 	bl	80095f4 <strtol>
 800203c:	4603      	mov	r3, r0
 800203e:	b298      	uxth	r0, r3
 8002040:	463b      	mov	r3, r7
 8002042:	6819      	ldr	r1, [r3, #0]
 8002044:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8002056:	4602      	mov	r2, r0
 8002058:	801a      	strh	r2, [r3, #0]
					continue;
 800205a:	bf00      	nop
			for (j; j < t[i + 1].size; ++j)
 800205c:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8002060:	3301      	adds	r3, #1
 8002062:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 8002066:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 800206a:	3301      	adds	r3, #1
 800206c:	f107 0214 	add.w	r2, r7, #20
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	4413      	add	r3, r2
 8002074:	330c      	adds	r3, #12
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 800207c:	429a      	cmp	r2, r3
 800207e:	f73f ab47 	bgt.w	8001710 <json_get_op+0xf4>
				}
			}
			root_counter = j;
 8002082:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8002086:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
			i += t[i + 1].size + 1;
 800208a:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 800208e:	3301      	adds	r3, #1
 8002090:	f107 0214 	add.w	r2, r7, #20
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	4413      	add	r3, r2
 8002098:	330c      	adds	r3, #12
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3301      	adds	r3, #1
 800209e:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 80020a2:	4413      	add	r3, r2
 80020a4:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
 80020a8:	e128      	b.n	80022fc <json_get_op+0xce0>
		}
		else
		{
			if (t[i + 1].type != JSMN_ARRAY)
 80020aa:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80020ae:	3301      	adds	r3, #1
 80020b0:	f107 0214 	add.w	r2, r7, #20
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	4413      	add	r3, r2
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	f040 811d 	bne.w	80022fa <json_get_op+0xcde>
			{
				continue;
			}

			for (int j = 0; j < t[i + 1].size; j++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 80020c6:	e0f8      	b.n	80022ba <json_get_op+0xc9e>
			{
				jsmntok_t* g = &t[i + j + 2];
 80020c8:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 80020cc:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80020d0:	4413      	add	r3, r2
 80020d2:	3302      	adds	r3, #2
 80020d4:	f107 0214 	add.w	r2, r7, #20
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	4413      	add	r3, r2
 80020dc:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
				char* p_stt = (char*)input + g->start + 1;
 80020e0:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	3301      	adds	r3, #1
 80020e8:	1d3a      	adds	r2, r7, #4
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	4413      	add	r3, r2
 80020ee:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
				char* p_end = NULL;
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
				int root_id = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838

				for (int r = 0; r < root_counter; ++r)
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8002106:	e028      	b.n	800215a <json_get_op+0xb3e>
				{
					if (memcmp(p_stt, out->root_par[r].name, 3) == 0)
 8002108:	4639      	mov	r1, r7
 800210a:	f8d7 2834 	ldr.w	r2, [r7, #2100]	; 0x834
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	f603 1328 	addw	r3, r3, #2344	; 0x928
 800211a:	680a      	ldr	r2, [r1, #0]
 800211c:	4413      	add	r3, r2
 800211e:	3302      	adds	r3, #2
 8002120:	2203      	movs	r2, #3
 8002122:	4619      	mov	r1, r3
 8002124:	f8d7 0820 	ldr.w	r0, [r7, #2080]	; 0x820
 8002128:	f006 fede 	bl	8008ee8 <memcmp>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10e      	bne.n	8002150 <json_get_op+0xb34>
					{
						root_id = out->root_par[r].id;
 8002132:	463b      	mov	r3, r7
 8002134:	6819      	ldr	r1, [r3, #0]
 8002136:	f8d7 2834 	ldr.w	r2, [r7, #2100]	; 0x834
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	f603 132f 	addw	r3, r3, #2351	; 0x92f
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
						break;
 800214e:	e00a      	b.n	8002166 <json_get_op+0xb4a>
				for (int r = 0; r < root_counter; ++r)
 8002150:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002154:	3301      	adds	r3, #1
 8002156:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 800215a:	f8d7 2834 	ldr.w	r2, [r7, #2100]	; 0x834
 800215e:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8002162:	429a      	cmp	r2, r3
 8002164:	dbd0      	blt.n	8002108 <json_get_op+0xaec>
					}
				}

				if (root_id > 0)
 8002166:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 800216a:	2b00      	cmp	r3, #0
 800216c:	dd46      	ble.n	80021fc <json_get_op+0xbe0>
				{
					out->par[counter].addr = 0;
 800216e:	463b      	mov	r3, r7
 8002170:	6819      	ldr	r1, [r3, #0]
 8002172:	f8d7 286c 	ldr.w	r2, [r7, #2156]	; 0x86c
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002184:	2200      	movs	r2, #0
 8002186:	801a      	strh	r2, [r3, #0]
					out->par[counter].log = (enum LG)strtol(p_stt + 5, NULL, 10);
 8002188:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800218c:	3305      	adds	r3, #5
 800218e:	220a      	movs	r2, #10
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f007 fa2e 	bl	80095f4 <strtol>
 8002198:	4603      	mov	r3, r0
 800219a:	b2d8      	uxtb	r0, r3
 800219c:	463b      	mov	r3, r7
 800219e:	6819      	ldr	r1, [r3, #0]
 80021a0:	f8d7 286c 	ldr.w	r2, [r7, #2156]	; 0x86c
 80021a4:	4613      	mov	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80021b2:	4602      	mov	r2, r0
 80021b4:	701a      	strb	r2, [r3, #0]
					out->par[counter].root_id = root_id;
 80021b6:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 80021ba:	b2d8      	uxtb	r0, r3
 80021bc:	463b      	mov	r3, r7
 80021be:	6819      	ldr	r1, [r3, #0]
 80021c0:	f8d7 286c 	ldr.w	r2, [r7, #2156]	; 0x86c
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	f203 332a 	addw	r3, r3, #810	; 0x32a
 80021d2:	4602      	mov	r2, r0
 80021d4:	701a      	strb	r2, [r3, #0]
					out->par[counter].type = STATE;
 80021d6:	463b      	mov	r3, r7
 80021d8:	6819      	ldr	r1, [r3, #0]
 80021da:	f8d7 286c 	ldr.w	r2, [r7, #2156]	; 0x86c
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	f203 3329 	addw	r3, r3, #809	; 0x329
 80021ec:	2203      	movs	r2, #3
 80021ee:	701a      	strb	r2, [r3, #0]

					counter++;
 80021f0:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 80021f4:	3301      	adds	r3, #1
 80021f6:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 80021fa:	e059      	b.n	80022b0 <json_get_op+0xc94>
					continue;
				}

				out->par[counter].addr = strtol(p_stt, &p_end, 16); //10
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	2210      	movs	r2, #16
 8002202:	4619      	mov	r1, r3
 8002204:	f8d7 0820 	ldr.w	r0, [r7, #2080]	; 0x820
 8002208:	f007 f9f4 	bl	80095f4 <strtol>
 800220c:	4603      	mov	r3, r0
 800220e:	b298      	uxth	r0, r3
 8002210:	463b      	mov	r3, r7
 8002212:	6819      	ldr	r1, [r3, #0]
 8002214:	f8d7 286c 	ldr.w	r2, [r7, #2156]	; 0x86c
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002226:	4602      	mov	r2, r0
 8002228:	801a      	strh	r2, [r3, #0]
				out->par[counter].log = (enum LG)strtol(p_end + 1, &p_end, 10);
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	f107 010c 	add.w	r1, r7, #12
 8002236:	220a      	movs	r2, #10
 8002238:	4618      	mov	r0, r3
 800223a:	f007 f9db 	bl	80095f4 <strtol>
 800223e:	4603      	mov	r3, r0
 8002240:	b2d8      	uxtb	r0, r3
 8002242:	463b      	mov	r3, r7
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	f8d7 286c 	ldr.w	r2, [r7, #2156]	; 0x86c
 800224a:	4613      	mov	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8002258:	4602      	mov	r2, r0
 800225a:	701a      	strb	r2, [r3, #0]
				out->par[counter].trigger_value = strtol(p_end + 1, &p_end, 10);
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3301      	adds	r3, #1
 8002264:	f107 010c 	add.w	r1, r7, #12
 8002268:	220a      	movs	r2, #10
 800226a:	4618      	mov	r0, r3
 800226c:	f007 f9c2 	bl	80095f4 <strtol>
 8002270:	4603      	mov	r3, r0
 8002272:	4618      	mov	r0, r3
 8002274:	463b      	mov	r3, r7
 8002276:	6819      	ldr	r1, [r3, #0]
 8002278:	f8d7 286c 	ldr.w	r2, [r7, #2156]	; 0x86c
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800228a:	6018      	str	r0, [r3, #0]
				out->par[counter].type = DATA;
 800228c:	463b      	mov	r3, r7
 800228e:	6819      	ldr	r1, [r3, #0]
 8002290:	f8d7 286c 	ldr.w	r2, [r7, #2156]	; 0x86c
 8002294:	4613      	mov	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	f203 3329 	addw	r3, r3, #809	; 0x329
 80022a2:	2202      	movs	r2, #2
 80022a4:	701a      	strb	r2, [r3, #0]

				counter++;
 80022a6:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 80022aa:	3301      	adds	r3, #1
 80022ac:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
			for (int j = 0; j < t[i + 1].size; j++)
 80022b0:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80022b4:	3301      	adds	r3, #1
 80022b6:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 80022ba:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80022be:	3301      	adds	r3, #1
 80022c0:	f107 0214 	add.w	r2, r7, #20
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	4413      	add	r3, r2
 80022c8:	330c      	adds	r3, #12
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f73f aef9 	bgt.w	80020c8 <json_get_op+0xaac>
			}
			i += t[i + 1].size + 1;
 80022d6:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80022da:	3301      	adds	r3, #1
 80022dc:	f107 0214 	add.w	r2, r7, #20
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	4413      	add	r3, r2
 80022e4:	330c      	adds	r3, #12
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3301      	adds	r3, #1
 80022ea:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 80022ee:	4413      	add	r3, r2
 80022f0:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
 80022f4:	e002      	b.n	80022fc <json_get_op+0xce0>
				continue;
 80022f6:	bf00      	nop
 80022f8:	e000      	b.n	80022fc <json_get_op+0xce0>
				continue;
 80022fa:	bf00      	nop
	for (i = 1; i < r; i++) {
 80022fc:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8002300:	3301      	adds	r3, #1
 8002302:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
 8002306:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 800230a:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 800230e:	429a      	cmp	r2, r3
 8002310:	f6ff a9ca 	blt.w	80016a8 <json_get_op+0x8c>
		}
	}

	return root_counter;
 8002314:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
}
 8002318:	4618      	mov	r0, r3
 800231a:	f607 0774 	addw	r7, r7, #2164	; 0x874
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}
 8002322:	bf00      	nop

08002324 <Telegram_GetValue>:
{

}

uint8_t Telegram_GetValue(uint16_t key)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < TG_MAX; ++i) {
 800232e:	2300      	movs	r3, #0
 8002330:	81fb      	strh	r3, [r7, #14]
 8002332:	e00f      	b.n	8002354 <Telegram_GetValue+0x30>
		if (tg[i].key == key) {
 8002334:	89fb      	ldrh	r3, [r7, #14]
 8002336:	4a0c      	ldr	r2, [pc, #48]	; (8002368 <Telegram_GetValue+0x44>)
 8002338:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800233c:	88fa      	ldrh	r2, [r7, #6]
 800233e:	429a      	cmp	r2, r3
 8002340:	d105      	bne.n	800234e <Telegram_GetValue+0x2a>
			return tg[i].value;
 8002342:	89fb      	ldrh	r3, [r7, #14]
 8002344:	4a08      	ldr	r2, [pc, #32]	; (8002368 <Telegram_GetValue+0x44>)
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	789b      	ldrb	r3, [r3, #2]
 800234c:	e006      	b.n	800235c <Telegram_GetValue+0x38>
	for(uint16_t i = 0; i < TG_MAX; ++i) {
 800234e:	89fb      	ldrh	r3, [r7, #14]
 8002350:	3301      	adds	r3, #1
 8002352:	81fb      	strh	r3, [r7, #14]
 8002354:	89fb      	ldrh	r3, [r7, #14]
 8002356:	2bff      	cmp	r3, #255	; 0xff
 8002358:	d9ec      	bls.n	8002334 <Telegram_GetValue+0x10>
		}
	}
	return 0;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	20000244 	.word	0x20000244

0800236c <get_cur_time>:
#include "rtc.h"

#include <time.h>

uint8_t get_cur_time(struct tm* time)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	RTC_GetTime(time);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f006 faa5 	bl	80088c4 <RTC_GetTime>
	return 1;
 800237a:	2301      	movs	r3, #1
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <is_cur_time>:

uint8_t is_cur_time(TM* ft)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	; 0x30
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	struct tm time_info = { 0 };
 800238c:	f107 030c 	add.w	r3, r7, #12
 8002390:	2224      	movs	r2, #36	; 0x24
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f006 fdc1 	bl	8008f1c <memset>
	RTC_GetTime(&time_info);
 800239a:	f107 030c 	add.w	r3, r7, #12
 800239e:	4618      	mov	r0, r3
 80023a0:	f006 fa90 	bl	80088c4 <RTC_GetTime>

	if (time_info.tm_hour == ft->from.tm_hour &&
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d10b      	bne.n	80023c6 <is_cur_time+0x42>
		time_info.tm_min >= ft->from.tm_min &&
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
	if (time_info.tm_hour == ft->from.tm_hour &&
 80023b4:	429a      	cmp	r2, r3
 80023b6:	db06      	blt.n	80023c6 <is_cur_time+0x42>
		time_info.tm_hour < ft->to.tm_hour)
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		time_info.tm_min >= ft->from.tm_min &&
 80023be:	429a      	cmp	r2, r3
 80023c0:	da01      	bge.n	80023c6 <is_cur_time+0x42>
	{
		return 1;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e018      	b.n	80023f8 <is_cur_time+0x74>
	}

	if (time_info.tm_hour > ft->from.tm_hour &&
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	dd06      	ble.n	80023de <is_cur_time+0x5a>
		time_info.tm_hour < ft->to.tm_hour)
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	if (time_info.tm_hour > ft->from.tm_hour &&
 80023d6:	429a      	cmp	r2, r3
 80023d8:	da01      	bge.n	80023de <is_cur_time+0x5a>
	{
		return 1;
 80023da:	2301      	movs	r3, #1
 80023dc:	e00c      	b.n	80023f8 <is_cur_time+0x74>
	}

	if (time_info.tm_hour == ft->to.tm_hour &&
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d106      	bne.n	80023f6 <is_cur_time+0x72>
		time_info.tm_min <= ft->to.tm_min)
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (time_info.tm_hour == ft->to.tm_hour &&
 80023ee:	429a      	cmp	r2, r3
 80023f0:	dc01      	bgt.n	80023f6 <is_cur_time+0x72>
	{
		return 1;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <is_cur_time+0x74>
	}

	return 0;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3730      	adds	r7, #48	; 0x30
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <is_cur_day_of_week>:

uint8_t is_cur_day_of_week(uint16_t data)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08c      	sub	sp, #48	; 0x30
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	80fb      	strh	r3, [r7, #6]
	struct tm time_info = { 0 };
 800240a:	f107 030c 	add.w	r3, r7, #12
 800240e:	2224      	movs	r2, #36	; 0x24
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f006 fd82 	bl	8008f1c <memset>
	RTC_GetTime(&time_info);
 8002418:	f107 030c 	add.w	r3, r7, #12
 800241c:	4618      	mov	r0, r3
 800241e:	f006 fa51 	bl	80088c4 <RTC_GetTime>

	if (data & (1 << time_info.tm_wday))
 8002422:	88fa      	ldrh	r2, [r7, #6]
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	fa42 f303 	asr.w	r3, r2, r3
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <is_cur_day_of_week+0x36>
	{
		return 1;
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <is_cur_day_of_week+0x38>
	}
	return 0;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3730      	adds	r7, #48	; 0x30
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <ESP_Init>:
struct ring_buffer_struct UART2_rx_data;
char request[1024];
static f_ptr delay;

void ESP_Init(f_ptr delay_function)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	RingBuffInit(&UART2_rx_data);
 8002448:	4808      	ldr	r0, [pc, #32]	; (800246c <ESP_Init+0x2c>)
 800244a:	f000 f9b1 	bl	80027b0 <RingBuffInit>
	UART2_Init(&UART2_rx_data);
 800244e:	4807      	ldr	r0, [pc, #28]	; (800246c <ESP_Init+0x2c>)
 8002450:	f005 fbbc 	bl	8007bcc <UART2_Init>

	UART2_SendData("\r\n", 2);
 8002454:	2102      	movs	r1, #2
 8002456:	4806      	ldr	r0, [pc, #24]	; (8002470 <ESP_Init+0x30>)
 8002458:	f005 fc48 	bl	8007cec <UART2_SendData>

	delay = delay_function;
 800245c:	4a05      	ldr	r2, [pc, #20]	; (8002474 <ESP_Init+0x34>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6013      	str	r3, [r2, #0]
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20013364 	.word	0x20013364
 8002470:	0800ad74 	.word	0x0800ad74
 8002474:	20000644 	.word	0x20000644

08002478 <requestFlush>:
	char test_str[] = "uart2 work\r\n";
	UART2_SendData(test_str, sizeof(test_str));
}

static void requestFlush()
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	memset(request, 0, 1024);
 800247c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002480:	2100      	movs	r1, #0
 8002482:	4802      	ldr	r0, [pc, #8]	; (800248c <requestFlush+0x14>)
 8002484:	f006 fd4a 	bl	8008f1c <memset>
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20014368 	.word	0x20014368

08002490 <charCallBack>:

static uint8_t charCallBack(char * key, uint16_t bias)
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	807b      	strh	r3, [r7, #2]
	char * temp = RingBuffGetArray(&UART2_rx_data) + bias;
 800249c:	4810      	ldr	r0, [pc, #64]	; (80024e0 <charCallBack+0x50>)
 800249e:	f000 f9d0 	bl	8002842 <RingBuffGetArray>
 80024a2:	4602      	mov	r2, r0
 80024a4:	887b      	ldrh	r3, [r7, #2]
 80024a6:	4413      	add	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
	if(key != NULL && strlen(temp) >= strlen(key))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d012      	beq.n	80024d6 <charCallBack+0x46>
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f7fd fe8d 	bl	80001d0 <strlen>
 80024b6:	4604      	mov	r4, r0
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7fd fe89 	bl	80001d0 <strlen>
 80024be:	4603      	mov	r3, r0
 80024c0:	429c      	cmp	r4, r3
 80024c2:	d308      	bcc.n	80024d6 <charCallBack+0x46>
	{
		if(strstr(temp, key) != NULL)
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f006 ffe7 	bl	800949a <strstr>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <charCallBack+0x46>
		{
			return 1;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <charCallBack+0x48>
		}
	}

	return 0;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd90      	pop	{r4, r7, pc}
 80024e0:	20013364 	.word	0x20013364

080024e4 <waitCallBack>:

static uint8_t waitCallBack(char * aim, uint16_t ms)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	807b      	strh	r3, [r7, #2]
	for( ; ms > 0; --ms)
 80024f0:	e012      	b.n	8002518 <waitCallBack+0x34>
	{
		if(charCallBack(aim, 0))
 80024f2:	2100      	movs	r1, #0
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ffcb 	bl	8002490 <charCallBack>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <waitCallBack+0x26>
		{
			RingBuffClear(&UART2_rx_data);
 8002500:	480b      	ldr	r0, [pc, #44]	; (8002530 <waitCallBack+0x4c>)
 8002502:	f000 f984 	bl	800280e <RingBuffClear>
			return 1;
 8002506:	2301      	movs	r3, #1
 8002508:	e00d      	b.n	8002526 <waitCallBack+0x42>
		}
		delay(1);
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <waitCallBack+0x50>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2001      	movs	r0, #1
 8002510:	4798      	blx	r3
	for( ; ms > 0; --ms)
 8002512:	887b      	ldrh	r3, [r7, #2]
 8002514:	3b01      	subs	r3, #1
 8002516:	807b      	strh	r3, [r7, #2]
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1e9      	bne.n	80024f2 <waitCallBack+0xe>
	}
	RingBuffClear(&UART2_rx_data);
 800251e:	4804      	ldr	r0, [pc, #16]	; (8002530 <waitCallBack+0x4c>)
 8002520:	f000 f975 	bl	800280e <RingBuffClear>
	return 0;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20013364 	.word	0x20013364
 8002534:	20000644 	.word	0x20000644

08002538 <ESP_GetRxData>:

char* ESP_GetRxData()
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
	return RingBuffGetArray(&UART2_rx_data);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <ESP_GetRxData+0x10>)
 800253e:	f000 f980 	bl	8002842 <RingBuffGetArray>
 8002542:	4603      	mov	r3, r0
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20013364 	.word	0x20013364

0800254c <ESP_SetMode>:

uint8_t ESP_SetMode(uint8_t mode)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
	requestFlush();
 8002556:	f7ff ff8f 	bl	8002478 <requestFlush>
	sprintf(request, "AT+CWMODE=%d\r\n", mode);
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	461a      	mov	r2, r3
 800255e:	4915      	ldr	r1, [pc, #84]	; (80025b4 <ESP_SetMode+0x68>)
 8002560:	4815      	ldr	r0, [pc, #84]	; (80025b8 <ESP_SetMode+0x6c>)
 8002562:	f006 ff3f 	bl	80093e4 <siprintf>
	RingBuffClear(&UART2_rx_data);
 8002566:	4815      	ldr	r0, [pc, #84]	; (80025bc <ESP_SetMode+0x70>)
 8002568:	f000 f951 	bl	800280e <RingBuffClear>
	UART2_SendData(request, strlen(request));
 800256c:	4812      	ldr	r0, [pc, #72]	; (80025b8 <ESP_SetMode+0x6c>)
 800256e:	f7fd fe2f 	bl	80001d0 <strlen>
 8002572:	4603      	mov	r3, r0
 8002574:	4619      	mov	r1, r3
 8002576:	4810      	ldr	r0, [pc, #64]	; (80025b8 <ESP_SetMode+0x6c>)
 8002578:	f005 fbb8 	bl	8007cec <UART2_SendData>

	if(waitCallBack("OK", 2000))
 800257c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002580:	480f      	ldr	r0, [pc, #60]	; (80025c0 <ESP_SetMode+0x74>)
 8002582:	f7ff ffaf 	bl	80024e4 <waitCallBack>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00e      	beq.n	80025aa <ESP_SetMode+0x5e>
	{
		UART2_SendData("AT+RST\r\n", 8);
 800258c:	2108      	movs	r1, #8
 800258e:	480d      	ldr	r0, [pc, #52]	; (80025c4 <ESP_SetMode+0x78>)
 8002590:	f005 fbac 	bl	8007cec <UART2_SendData>
		if(waitCallBack("ready", 2000))
 8002594:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002598:	480b      	ldr	r0, [pc, #44]	; (80025c8 <ESP_SetMode+0x7c>)
 800259a:	f7ff ffa3 	bl	80024e4 <waitCallBack>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <ESP_SetMode+0x5c>
		{
			return 1;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e001      	b.n	80025ac <ESP_SetMode+0x60>
		}
		else asm("NOP");
 80025a8:	bf00      	nop
	}

	return 0;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	0800ad88 	.word	0x0800ad88
 80025b8:	20014368 	.word	0x20014368
 80025bc:	20013364 	.word	0x20013364
 80025c0:	0800ad98 	.word	0x0800ad98
 80025c4:	0800ad9c 	.word	0x0800ad9c
 80025c8:	0800ada8 	.word	0x0800ada8

080025cc <ESP_SetCipmuxZero>:

uint8_t ESP_SetCipmuxZero()
{
 80025cc:	b598      	push	{r3, r4, r7, lr}
 80025ce:	af00      	add	r7, sp, #0
	requestFlush();
 80025d0:	f7ff ff52 	bl	8002478 <requestFlush>
	sprintf(request, "AT+CIPMUX=0\r\n");
 80025d4:	4a10      	ldr	r2, [pc, #64]	; (8002618 <ESP_SetCipmuxZero+0x4c>)
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <ESP_SetCipmuxZero+0x50>)
 80025d8:	4614      	mov	r4, r2
 80025da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025dc:	6020      	str	r0, [r4, #0]
 80025de:	6061      	str	r1, [r4, #4]
 80025e0:	60a2      	str	r2, [r4, #8]
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	81a3      	strh	r3, [r4, #12]
	UART2_SendData(request, strlen(request));
 80025e6:	480c      	ldr	r0, [pc, #48]	; (8002618 <ESP_SetCipmuxZero+0x4c>)
 80025e8:	f7fd fdf2 	bl	80001d0 <strlen>
 80025ec:	4603      	mov	r3, r0
 80025ee:	4619      	mov	r1, r3
 80025f0:	4809      	ldr	r0, [pc, #36]	; (8002618 <ESP_SetCipmuxZero+0x4c>)
 80025f2:	f005 fb7b 	bl	8007cec <UART2_SendData>
	RingBuffClear(&UART2_rx_data);
 80025f6:	480a      	ldr	r0, [pc, #40]	; (8002620 <ESP_SetCipmuxZero+0x54>)
 80025f8:	f000 f909 	bl	800280e <RingBuffClear>

	if(waitCallBack("OK", 500))
 80025fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002600:	4808      	ldr	r0, [pc, #32]	; (8002624 <ESP_SetCipmuxZero+0x58>)
 8002602:	f7ff ff6f 	bl	80024e4 <waitCallBack>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <ESP_SetCipmuxZero+0x44>
	{
		return 1;
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <ESP_SetCipmuxZero+0x46>
	}
	return 0;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	bd98      	pop	{r3, r4, r7, pc}
 8002616:	bf00      	nop
 8002618:	20014368 	.word	0x20014368
 800261c:	0800adb0 	.word	0x0800adb0
 8002620:	20013364 	.word	0x20013364
 8002624:	0800ad98 	.word	0x0800ad98

08002628 <ESP_SetParamsSoftAP>:

uint8_t ESP_SetParamsSoftAP(char* ssid, char* password)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
	if(ssid != NULL && password != NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01f      	beq.n	8002678 <ESP_SetParamsSoftAP+0x50>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d01c      	beq.n	8002678 <ESP_SetParamsSoftAP+0x50>
	{
		requestFlush();
 800263e:	f7ff ff1b 	bl	8002478 <requestFlush>
		sprintf(request, "AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", ssid, password);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	490f      	ldr	r1, [pc, #60]	; (8002684 <ESP_SetParamsSoftAP+0x5c>)
 8002648:	480f      	ldr	r0, [pc, #60]	; (8002688 <ESP_SetParamsSoftAP+0x60>)
 800264a:	f006 fecb 	bl	80093e4 <siprintf>
		RingBuffClear(&UART2_rx_data);
 800264e:	480f      	ldr	r0, [pc, #60]	; (800268c <ESP_SetParamsSoftAP+0x64>)
 8002650:	f000 f8dd 	bl	800280e <RingBuffClear>
		UART2_SendData(request, strlen(request));
 8002654:	480c      	ldr	r0, [pc, #48]	; (8002688 <ESP_SetParamsSoftAP+0x60>)
 8002656:	f7fd fdbb 	bl	80001d0 <strlen>
 800265a:	4603      	mov	r3, r0
 800265c:	4619      	mov	r1, r3
 800265e:	480a      	ldr	r0, [pc, #40]	; (8002688 <ESP_SetParamsSoftAP+0x60>)
 8002660:	f005 fb44 	bl	8007cec <UART2_SendData>

		if(waitCallBack("OK", 10000))
 8002664:	f242 7110 	movw	r1, #10000	; 0x2710
 8002668:	4809      	ldr	r0, [pc, #36]	; (8002690 <ESP_SetParamsSoftAP+0x68>)
 800266a:	f7ff ff3b 	bl	80024e4 <waitCallBack>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <ESP_SetParamsSoftAP+0x50>
		{
			return 1;
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <ESP_SetParamsSoftAP+0x52>
		}
	}
	return 0;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	0800adc0 	.word	0x0800adc0
 8002688:	20014368 	.word	0x20014368
 800268c:	20013364 	.word	0x20013364
 8002690:	0800ad98 	.word	0x0800ad98

08002694 <ESP_SendData>:

	return 0;
}

uint8_t ESP_SendData(const char *url, uint16_t port, const char *data, uint32_t dataLength, uint8_t flagRN)
{
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	460b      	mov	r3, r1
 80026a2:	817b      	strh	r3, [r7, #10]
	requestFlush();
 80026a4:	f7ff fee8 	bl	8002478 <requestFlush>
	sprintf(request, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", url, port);
 80026a8:	897b      	ldrh	r3, [r7, #10]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4937      	ldr	r1, [pc, #220]	; (800278c <ESP_SendData+0xf8>)
 80026ae:	4838      	ldr	r0, [pc, #224]	; (8002790 <ESP_SendData+0xfc>)
 80026b0:	f006 fe98 	bl	80093e4 <siprintf>
	RingBuffClear(&UART2_rx_data);
 80026b4:	4837      	ldr	r0, [pc, #220]	; (8002794 <ESP_SendData+0x100>)
 80026b6:	f000 f8aa 	bl	800280e <RingBuffClear>
	UART2_SendData(request, strlen(request));
 80026ba:	4835      	ldr	r0, [pc, #212]	; (8002790 <ESP_SendData+0xfc>)
 80026bc:	f7fd fd88 	bl	80001d0 <strlen>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4619      	mov	r1, r3
 80026c4:	4832      	ldr	r0, [pc, #200]	; (8002790 <ESP_SendData+0xfc>)
 80026c6:	f005 fb11 	bl	8007cec <UART2_SendData>
	delay(1000);
 80026ca:	4b33      	ldr	r3, [pc, #204]	; (8002798 <ESP_SendData+0x104>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026d2:	4798      	blx	r3

	if(waitCallBack("OK", 1000))
 80026d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026d8:	4830      	ldr	r0, [pc, #192]	; (800279c <ESP_SendData+0x108>)
 80026da:	f7ff ff03 	bl	80024e4 <waitCallBack>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d03a      	beq.n	800275a <ESP_SendData+0xc6>
	{
		requestFlush();
 80026e4:	f7ff fec8 	bl	8002478 <requestFlush>
		sprintf(request, "AT+CIPSEND=%lu\r\n", dataLength);
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	492d      	ldr	r1, [pc, #180]	; (80027a0 <ESP_SendData+0x10c>)
 80026ec:	4828      	ldr	r0, [pc, #160]	; (8002790 <ESP_SendData+0xfc>)
 80026ee:	f006 fe79 	bl	80093e4 <siprintf>
		RingBuffClear(&UART2_rx_data);
 80026f2:	4828      	ldr	r0, [pc, #160]	; (8002794 <ESP_SendData+0x100>)
 80026f4:	f000 f88b 	bl	800280e <RingBuffClear>
		UART2_SendData(request, strlen(request));
 80026f8:	4825      	ldr	r0, [pc, #148]	; (8002790 <ESP_SendData+0xfc>)
 80026fa:	f7fd fd69 	bl	80001d0 <strlen>
 80026fe:	4603      	mov	r3, r0
 8002700:	4619      	mov	r1, r3
 8002702:	4823      	ldr	r0, [pc, #140]	; (8002790 <ESP_SendData+0xfc>)
 8002704:	f005 faf2 	bl	8007cec <UART2_SendData>
		delay(10);
 8002708:	4b23      	ldr	r3, [pc, #140]	; (8002798 <ESP_SendData+0x104>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	200a      	movs	r0, #10
 800270e:	4798      	blx	r3

		if(waitCallBack(">", 1000) && data != NULL)
 8002710:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002714:	4823      	ldr	r0, [pc, #140]	; (80027a4 <ESP_SendData+0x110>)
 8002716:	f7ff fee5 	bl	80024e4 <waitCallBack>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d02f      	beq.n	8002780 <ESP_SendData+0xec>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d02c      	beq.n	8002780 <ESP_SendData+0xec>
		{
			for(int i = 0; i < dataLength; i++)
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	e009      	b.n	8002740 <ESP_SendData+0xac>
			{
				UART2_SendData_byte(data[i]);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f005 fac1 	bl	8007cbc <UART2_SendData_byte>
			for(int i = 0; i < dataLength; i++)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3301      	adds	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d3f1      	bcc.n	800272c <ESP_SendData+0x98>
			}
			if(flagRN)
 8002748:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800274c:	2b00      	cmp	r3, #0
 800274e:	d017      	beq.n	8002780 <ESP_SendData+0xec>
			{
				UART2_SendData("\r\n", 2);
 8002750:	2102      	movs	r1, #2
 8002752:	4815      	ldr	r0, [pc, #84]	; (80027a8 <ESP_SendData+0x114>)
 8002754:	f005 faca 	bl	8007cec <UART2_SendData>
 8002758:	e012      	b.n	8002780 <ESP_SendData+0xec>
			}
		}

	} else {
		requestFlush();
 800275a:	f7ff fe8d 	bl	8002478 <requestFlush>
		sprintf(request, "AT+CIPCLOSE\r\n");
 800275e:	4a0c      	ldr	r2, [pc, #48]	; (8002790 <ESP_SendData+0xfc>)
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <ESP_SendData+0x118>)
 8002762:	4614      	mov	r4, r2
 8002764:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002766:	6020      	str	r0, [r4, #0]
 8002768:	6061      	str	r1, [r4, #4]
 800276a:	60a2      	str	r2, [r4, #8]
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	81a3      	strh	r3, [r4, #12]
		UART2_SendData(request, strlen(request));
 8002770:	4807      	ldr	r0, [pc, #28]	; (8002790 <ESP_SendData+0xfc>)
 8002772:	f7fd fd2d 	bl	80001d0 <strlen>
 8002776:	4603      	mov	r3, r0
 8002778:	4619      	mov	r1, r3
 800277a:	4805      	ldr	r0, [pc, #20]	; (8002790 <ESP_SendData+0xfc>)
 800277c:	f005 fab6 	bl	8007cec <UART2_SendData>
	}

	return 0;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	bd90      	pop	{r4, r7, pc}
 800278a:	bf00      	nop
 800278c:	0800adf8 	.word	0x0800adf8
 8002790:	20014368 	.word	0x20014368
 8002794:	20013364 	.word	0x20013364
 8002798:	20000644 	.word	0x20000644
 800279c:	0800ad98 	.word	0x0800ad98
 80027a0:	0800ae14 	.word	0x0800ae14
 80027a4:	0800ae28 	.word	0x0800ae28
 80027a8:	0800ad74 	.word	0x0800ad74
 80027ac:	0800ae2c 	.word	0x0800ae2c

080027b0 <RingBuffInit>:
 */

#include "ring_buffer.h"

void RingBuffInit(struct ring_buffer_struct *rng)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	rng->index_in = rng->index_out = 0;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	805a      	strh	r2, [r3, #2]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	885a      	ldrh	r2, [r3, #2]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	801a      	strh	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <RingBuffPush>:

void RingBuffPush(struct ring_buffer_struct *rng, char element)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	70fb      	strb	r3, [r7, #3]
	rng->buffer[rng->index_in++] = element;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	b291      	uxth	r1, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	8011      	strh	r1, [r2, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4413      	add	r3, r2
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	711a      	strb	r2, [r3, #4]
	rng->index_in &= BUF_MASK;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	801a      	strh	r2, [r3, #0]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <RingBuffClear>:
	}
	return 0;
}

void RingBuffClear(struct ring_buffer_struct *rng)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
	memset(rng->buffer, 0, BUF_SIZE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3304      	adds	r3, #4
 800281a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f006 fb7b 	bl	8008f1c <memset>
	rng->buffer[0] = 0;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	711a      	strb	r2, [r3, #4]
	rng->index_out = rng->index_in = 0;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	801a      	strh	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	881a      	ldrh	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	805a      	strh	r2, [r3, #2]
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <RingBuffGetArray>:
{
	return (rng->index_in - rng->index_out) & BUF_MASK;
}

char * RingBuffGetArray(struct ring_buffer_struct *rng)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
	return ((char *)rng->buffer);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3304      	adds	r3, #4
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002860:	4a0e      	ldr	r2, [pc, #56]	; (800289c <HAL_Init+0x40>)
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <HAL_Init+0x40>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800286a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800286c:	4a0b      	ldr	r2, [pc, #44]	; (800289c <HAL_Init+0x40>)
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_Init+0x40>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002878:	4a08      	ldr	r2, [pc, #32]	; (800289c <HAL_Init+0x40>)
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <HAL_Init+0x40>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002884:	2003      	movs	r0, #3
 8002886:	f000 f8ca 	bl	8002a1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800288a:	2000      	movs	r0, #0
 800288c:	f006 f934 	bl	8008af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002890:	f006 f906 	bl	8008aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023c00 	.word	0x40023c00

080028a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_IncTick+0x20>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_IncTick+0x24>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <HAL_IncTick+0x24>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000000 	.word	0x20000000
 80028c4:	20014768 	.word	0x20014768

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	db0b      	blt.n	8002956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293e:	4909      	ldr	r1, [pc, #36]	; (8002964 <__NVIC_EnableIRQ+0x38>)
 8002940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002944:	095b      	lsrs	r3, r3, #5
 8002946:	79fa      	ldrb	r2, [r7, #7]
 8002948:	f002 021f 	and.w	r2, r2, #31
 800294c:	2001      	movs	r0, #1
 800294e:	fa00 f202 	lsl.w	r2, r0, r2
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000e100 	.word	0xe000e100

08002968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	2b00      	cmp	r3, #0
 800297a:	db0a      	blt.n	8002992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297c:	490d      	ldr	r1, [pc, #52]	; (80029b4 <__NVIC_SetPriority+0x4c>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	440b      	add	r3, r1
 800298c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002990:	e00a      	b.n	80029a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002992:	4909      	ldr	r1, [pc, #36]	; (80029b8 <__NVIC_SetPriority+0x50>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3b04      	subs	r3, #4
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	0112      	lsls	r2, r2, #4
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	440b      	add	r3, r1
 80029a6:	761a      	strb	r2, [r3, #24]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000e100 	.word	0xe000e100
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f1c3 0307 	rsb	r3, r3, #7
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	bf28      	it	cs
 80029da:	2304      	movcs	r3, #4
 80029dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d902      	bls.n	80029ec <NVIC_EncodePriority+0x30>
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3b03      	subs	r3, #3
 80029ea:	e000      	b.n	80029ee <NVIC_EncodePriority+0x32>
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	2201      	movs	r2, #1
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	1e5a      	subs	r2, r3, #1
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	401a      	ands	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a02:	2101      	movs	r1, #1
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	1e59      	subs	r1, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
         );
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	; 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ff4e 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a46:	f7ff ff63 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002a4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	6978      	ldr	r0, [r7, #20]
 8002a52:	f7ff ffb3 	bl	80029bc <NVIC_EncodePriority>
 8002a56:	4602      	mov	r2, r0
 8002a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ff82 	bl	8002968 <__NVIC_SetPriority>
}
 8002a64:	bf00      	nop
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff ff56 	bl	800292c <__NVIC_EnableIRQ>
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	2000000c 	.word	0x2000000c

08002aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002aa4:	f7ff fff0 	bl	8002a88 <HAL_RCC_GetHCLKFreq>
 8002aa8:	4601      	mov	r1, r0
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	0b5b      	lsrs	r3, r3, #13
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4a03      	ldr	r2, [pc, #12]	; (8002ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab6:	5cd3      	ldrb	r3, [r2, r3]
 8002ab8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	0800b084 	.word	0x0800b084

08002ac8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	220f      	movs	r2, #15
 8002ad6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_RCC_GetClockConfig+0x5c>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 0203 	and.w	r2, r3, #3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <HAL_RCC_GetClockConfig+0x5c>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <HAL_RCC_GetClockConfig+0x5c>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_GetClockConfig+0x5c>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	08db      	lsrs	r3, r3, #3
 8002b02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <HAL_RCC_GetClockConfig+0x60>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 020f 	and.w	r2, r3, #15
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	601a      	str	r2, [r3, #0]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40023c00 	.word	0x40023c00

08002b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e01d      	b.n	8002b7a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f815 	bl	8002b82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f000 f968 	bl	8002e40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	68d2      	ldr	r2, [r2, #12]
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b06      	cmp	r3, #6
 8002bbe:	d007      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d122      	bne.n	8002c3a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d11b      	bne.n	8002c3a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f06f 0202 	mvn.w	r2, #2
 8002c0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f8ee 	bl	8002e02 <HAL_TIM_IC_CaptureCallback>
 8002c26:	e005      	b.n	8002c34 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f8e0 	bl	8002dee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f8f1 	bl	8002e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d122      	bne.n	8002c8e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d11b      	bne.n	8002c8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f06f 0204 	mvn.w	r2, #4
 8002c5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f8c4 	bl	8002e02 <HAL_TIM_IC_CaptureCallback>
 8002c7a:	e005      	b.n	8002c88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f8b6 	bl	8002dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f8c7 	bl	8002e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d122      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d11b      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f06f 0208 	mvn.w	r2, #8
 8002cb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f89a 	bl	8002e02 <HAL_TIM_IC_CaptureCallback>
 8002cce:	e005      	b.n	8002cdc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f88c 	bl	8002dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f89d 	bl	8002e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d122      	bne.n	8002d36 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b10      	cmp	r3, #16
 8002cfc:	d11b      	bne.n	8002d36 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f06f 0210 	mvn.w	r2, #16
 8002d06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2208      	movs	r2, #8
 8002d0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f870 	bl	8002e02 <HAL_TIM_IC_CaptureCallback>
 8002d22:	e005      	b.n	8002d30 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f862 	bl	8002dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f873 	bl	8002e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d10e      	bne.n	8002d62 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d107      	bne.n	8002d62 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f06f 0201 	mvn.w	r2, #1
 8002d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f005 fc8d 	bl	800867c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6c:	2b80      	cmp	r3, #128	; 0x80
 8002d6e:	d10e      	bne.n	8002d8e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7a:	2b80      	cmp	r3, #128	; 0x80
 8002d7c:	d107      	bne.n	8002d8e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f903 	bl	8002f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d98:	2b40      	cmp	r3, #64	; 0x40
 8002d9a:	d10e      	bne.n	8002dba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b40      	cmp	r3, #64	; 0x40
 8002da8:	d107      	bne.n	8002dba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f838 	bl	8002e2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d10e      	bne.n	8002de6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	d107      	bne.n	8002de6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f06f 0220 	mvn.w	r2, #32
 8002dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f8cd 	bl	8002f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a40      	ldr	r2, [pc, #256]	; (8002f54 <TIM_Base_SetConfig+0x114>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d013      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5e:	d00f      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a3d      	ldr	r2, [pc, #244]	; (8002f58 <TIM_Base_SetConfig+0x118>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00b      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a3c      	ldr	r2, [pc, #240]	; (8002f5c <TIM_Base_SetConfig+0x11c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d007      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a3b      	ldr	r2, [pc, #236]	; (8002f60 <TIM_Base_SetConfig+0x120>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d003      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a3a      	ldr	r2, [pc, #232]	; (8002f64 <TIM_Base_SetConfig+0x124>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d108      	bne.n	8002e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a2f      	ldr	r2, [pc, #188]	; (8002f54 <TIM_Base_SetConfig+0x114>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d02b      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea0:	d027      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a2c      	ldr	r2, [pc, #176]	; (8002f58 <TIM_Base_SetConfig+0x118>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d023      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a2b      	ldr	r2, [pc, #172]	; (8002f5c <TIM_Base_SetConfig+0x11c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d01f      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a2a      	ldr	r2, [pc, #168]	; (8002f60 <TIM_Base_SetConfig+0x120>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01b      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a29      	ldr	r2, [pc, #164]	; (8002f64 <TIM_Base_SetConfig+0x124>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d017      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a28      	ldr	r2, [pc, #160]	; (8002f68 <TIM_Base_SetConfig+0x128>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a27      	ldr	r2, [pc, #156]	; (8002f6c <TIM_Base_SetConfig+0x12c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00f      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a26      	ldr	r2, [pc, #152]	; (8002f70 <TIM_Base_SetConfig+0x130>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00b      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <TIM_Base_SetConfig+0x134>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d007      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a24      	ldr	r2, [pc, #144]	; (8002f78 <TIM_Base_SetConfig+0x138>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d003      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a23      	ldr	r2, [pc, #140]	; (8002f7c <TIM_Base_SetConfig+0x13c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d108      	bne.n	8002f04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <TIM_Base_SetConfig+0x114>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d003      	beq.n	8002f38 <TIM_Base_SetConfig+0xf8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a0c      	ldr	r2, [pc, #48]	; (8002f64 <TIM_Base_SetConfig+0x124>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d103      	bne.n	8002f40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	615a      	str	r2, [r3, #20]
}
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800
 8002f60:	40000c00 	.word	0x40000c00
 8002f64:	40010400 	.word	0x40010400
 8002f68:	40014000 	.word	0x40014000
 8002f6c:	40014400 	.word	0x40014400
 8002f70:	40014800 	.word	0x40014800
 8002f74:	40001800 	.word	0x40001800
 8002f78:	40001c00 	.word	0x40001c00
 8002f7c:	40002000 	.word	0x40002000

08002f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2103      	movs	r1, #3
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	401a      	ands	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	61bb      	str	r3, [r7, #24]
  return result;
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	601a      	str	r2, [r3, #0]
}
 8002ffa:	bf00      	nop
 8002ffc:	3724      	adds	r7, #36	; 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8003006:	b480      	push	{r7}
 8003008:	b085      	sub	sp, #20
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	43db      	mvns	r3, r3
 800301a:	401a      	ands	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	431a      	orrs	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	605a      	str	r2, [r3, #4]
}
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8003036:	b480      	push	{r7}
 8003038:	b089      	sub	sp, #36	; 0x24
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	613b      	str	r3, [r7, #16]
  return result;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	2103      	movs	r1, #3
 800305e:	fa01 f303 	lsl.w	r3, r1, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	401a      	ands	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	61bb      	str	r3, [r7, #24]
  return result;
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	fab3 f383 	clz	r3, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	fa01 f303 	lsl.w	r3, r1, r3
 8003082:	431a      	orrs	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8003088:	bf00      	nop
 800308a:	3724      	adds	r7, #36	; 0x24
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003094:	b480      	push	{r7}
 8003096:	b089      	sub	sp, #36	; 0x24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	613b      	str	r3, [r7, #16]
  return result;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	2103      	movs	r1, #3
 80030bc:	fa01 f303 	lsl.w	r3, r1, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	401a      	ands	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	61bb      	str	r3, [r7, #24]
  return result;
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	431a      	orrs	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	60da      	str	r2, [r3, #12]
}
 80030e6:	bf00      	nop
 80030e8:	3724      	adds	r7, #36	; 0x24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b089      	sub	sp, #36	; 0x24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a1a      	ldr	r2, [r3, #32]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	613b      	str	r3, [r7, #16]
  return result;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	fab3 f383 	clz	r3, r3
 8003114:	b2db      	uxtb	r3, r3
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	210f      	movs	r1, #15
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	401a      	ands	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	61bb      	str	r3, [r7, #24]
  return result;
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	fab3 f383 	clz	r3, r3
 8003134:	b2db      	uxtb	r3, r3
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	fa01 f303 	lsl.w	r3, r1, r3
 800313e:	431a      	orrs	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003144:	bf00      	nop
 8003146:	3724      	adds	r7, #36	; 0x24
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003150:	b480      	push	{r7}
 8003152:	b089      	sub	sp, #36	; 0x24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	fa93 f3a3 	rbit	r3, r3
 800316c:	613b      	str	r3, [r7, #16]
  return result;
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	210f      	movs	r1, #15
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	401a      	ands	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	61bb      	str	r3, [r7, #24]
  return result;
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80031a6:	bf00      	nop
 80031a8:	3724      	adds	r7, #36	; 0x24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b088      	sub	sp, #32
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80031bc:	2300      	movs	r3, #0
 80031be:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	fa93 f3a3 	rbit	r3, r3
 80031d0:	613b      	str	r3, [r7, #16]
  return result;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	fab3 f383 	clz	r3, r3
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80031dc:	e050      	b.n	8003280 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	2101      	movs	r1, #1
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ea:	4013      	ands	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d042      	beq.n	800327a <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d003      	beq.n	8003204 <LL_GPIO_Init+0x52>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d10d      	bne.n	8003220 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	461a      	mov	r2, r3
 800320a:	69b9      	ldr	r1, [r7, #24]
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff ff12 	bl	8003036 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	461a      	mov	r2, r3
 8003218:	69b9      	ldr	r1, [r7, #24]
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff fef3 	bl	8003006 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	461a      	mov	r2, r3
 8003226:	69b9      	ldr	r1, [r7, #24]
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff ff33 	bl	8003094 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d11a      	bne.n	800326c <LL_GPIO_Init+0xba>
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	60bb      	str	r3, [r7, #8]
  return result;
 8003242:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b07      	cmp	r3, #7
 800324c:	d807      	bhi.n	800325e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	461a      	mov	r2, r3
 8003254:	69b9      	ldr	r1, [r7, #24]
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff ff4b 	bl	80030f2 <LL_GPIO_SetAFPin_0_7>
 800325c:	e006      	b.n	800326c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	461a      	mov	r2, r3
 8003264:	69b9      	ldr	r1, [r7, #24]
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ff72 	bl	8003150 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	461a      	mov	r2, r3
 8003272:	69b9      	ldr	r1, [r7, #24]
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff fe97 	bl	8002fa8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	3301      	adds	r3, #1
 800327e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	fa22 f303 	lsr.w	r3, r2, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1a7      	bne.n	80031de <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <LL_RCC_GetSysClkSource+0x18>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 030c 	and.w	r3, r3, #12
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800

080032b4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80032b8:	4b04      	ldr	r3, [pc, #16]	; (80032cc <LL_RCC_GetAHBPrescaler+0x18>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800

080032d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800

080032ec <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <LL_RCC_GetAPB2Prescaler+0x18>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800

08003308 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <LL_RCC_PLL_GetMainSource+0x18>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800

08003324 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <LL_RCC_PLL_GetN+0x18>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	099b      	lsrs	r3, r3, #6
 800332e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003332:	4618      	mov	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	40023800 	.word	0x40023800

08003340 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <LL_RCC_PLL_GetP+0x18>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800

0800335c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <LL_RCC_PLL_GetDivider+0x18>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40023800 	.word	0x40023800

08003378 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003380:	f000 f820 	bl	80033c4 <RCC_GetSystemClockFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f83e 	bl	8003410 <RCC_GetHCLKClockFreq>
 8003394:	4602      	mov	r2, r0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f84c 	bl	800343c <RCC_GetPCLK1ClockFreq>
 80033a4:	4602      	mov	r2, r0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f858 	bl	8003464 <RCC_GetPCLK2ClockFreq>
 80033b4:	4602      	mov	r2, r0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	60da      	str	r2, [r3, #12]
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80033ce:	f7ff ff63 	bl	8003298 <LL_RCC_GetSysClkSource>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d006      	beq.n	80033e6 <RCC_GetSystemClockFreq+0x22>
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d007      	beq.n	80033ec <RCC_GetSystemClockFreq+0x28>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <RCC_GetSystemClockFreq+0x44>)
 80033e2:	607b      	str	r3, [r7, #4]
      break;
 80033e4:	e00a      	b.n	80033fc <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80033e6:	4b09      	ldr	r3, [pc, #36]	; (800340c <RCC_GetSystemClockFreq+0x48>)
 80033e8:	607b      	str	r3, [r7, #4]
      break;
 80033ea:	e007      	b.n	80033fc <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80033ec:	2008      	movs	r0, #8
 80033ee:	f000 f84d 	bl	800348c <RCC_PLL_GetFreqDomain_SYS>
 80033f2:	6078      	str	r0, [r7, #4]
      break;
 80033f4:	e002      	b.n	80033fc <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80033f6:	4b04      	ldr	r3, [pc, #16]	; (8003408 <RCC_GetSystemClockFreq+0x44>)
 80033f8:	607b      	str	r3, [r7, #4]
      break;
 80033fa:	bf00      	nop
  }

  return frequency;
 80033fc:	687b      	ldr	r3, [r7, #4]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	00f42400 	.word	0x00f42400
 800340c:	007a1200 	.word	0x007a1200

08003410 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003418:	f7ff ff4c 	bl	80032b4 <LL_RCC_GetAHBPrescaler>
 800341c:	4603      	mov	r3, r0
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	4a04      	ldr	r2, [pc, #16]	; (8003438 <RCC_GetHCLKClockFreq+0x28>)
 8003426:	5cd3      	ldrb	r3, [r2, r3]
 8003428:	461a      	mov	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	40d3      	lsrs	r3, r2
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	0800b074 	.word	0x0800b074

0800343c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003444:	f7ff ff44 	bl	80032d0 <LL_RCC_GetAPB1Prescaler>
 8003448:	4603      	mov	r3, r0
 800344a:	0a9b      	lsrs	r3, r3, #10
 800344c:	4a04      	ldr	r2, [pc, #16]	; (8003460 <RCC_GetPCLK1ClockFreq+0x24>)
 800344e:	5cd3      	ldrb	r3, [r2, r3]
 8003450:	461a      	mov	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	40d3      	lsrs	r3, r2
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	0800b084 	.word	0x0800b084

08003464 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800346c:	f7ff ff3e 	bl	80032ec <LL_RCC_GetAPB2Prescaler>
 8003470:	4603      	mov	r3, r0
 8003472:	0b5b      	lsrs	r3, r3, #13
 8003474:	4a04      	ldr	r2, [pc, #16]	; (8003488 <RCC_GetPCLK2ClockFreq+0x24>)
 8003476:	5cd3      	ldrb	r3, [r2, r3]
 8003478:	461a      	mov	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	40d3      	lsrs	r3, r2
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	0800b084 	.word	0x0800b084

0800348c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	2300      	movs	r3, #0
 800349e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80034a0:	f7ff ff32 	bl	8003308 <LL_RCC_PLL_GetMainSource>
 80034a4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80034ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034b0:	d003      	beq.n	80034ba <RCC_PLL_GetFreqDomain_SYS+0x2e>
 80034b2:	e005      	b.n	80034c0 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80034b4:	4b12      	ldr	r3, [pc, #72]	; (8003500 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80034b6:	617b      	str	r3, [r7, #20]
      break;
 80034b8:	e005      	b.n	80034c6 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80034ba:	4b12      	ldr	r3, [pc, #72]	; (8003504 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80034bc:	617b      	str	r3, [r7, #20]
      break;
 80034be:	e002      	b.n	80034c6 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 80034c0:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80034c2:	617b      	str	r3, [r7, #20]
      break;
 80034c4:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d113      	bne.n	80034f4 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80034cc:	f7ff ff46 	bl	800335c <LL_RCC_PLL_GetDivider>
 80034d0:	4602      	mov	r2, r0
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	fbb3 f4f2 	udiv	r4, r3, r2
 80034d8:	f7ff ff24 	bl	8003324 <LL_RCC_PLL_GetN>
 80034dc:	4603      	mov	r3, r0
 80034de:	fb03 f404 	mul.w	r4, r3, r4
 80034e2:	f7ff ff2d 	bl	8003340 <LL_RCC_PLL_GetP>
 80034e6:	4603      	mov	r3, r0
 80034e8:	0c1b      	lsrs	r3, r3, #16
 80034ea:	3301      	adds	r3, #1
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	fbb4 f3f3 	udiv	r3, r4, r3
 80034f2:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80034f4:	693b      	ldr	r3, [r7, #16]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd90      	pop	{r4, r7, pc}
 80034fe:	bf00      	nop
 8003500:	00f42400 	.word	0x00f42400
 8003504:	007a1200 	.word	0x007a1200

08003508 <LL_RTC_SetHourFormat>:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetHourFormat(RTC_TypeDef *RTCx, uint32_t HourFormat)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	609a      	str	r2, [r3, #8]
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <LL_RTC_GetHourFormat>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  */
__STATIC_INLINE uint32_t LL_RTC_GetHourFormat(RTC_TypeDef *RTCx)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f04f 32ff 	mov.w	r2, #4294967295
 8003558:	60da      	str	r2, [r3, #12]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003574:	60da      	str	r2, [r3, #12]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <LL_RTC_IsShadowRegBypassEnabled>:
  * @rmtoll CR           BYPSHAD       LL_RTC_IsShadowRegBypassEnabled
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsShadowRegBypassEnabled(RTC_TypeDef *RTCx)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	2b20      	cmp	r3, #32
 8003594:	bf0c      	ite	eq
 8003596:	2301      	moveq	r3, #1
 8003598:	2300      	movne	r3, #0
 800359a:	b2db      	uxtb	r3, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	041b      	lsls	r3, r3, #16
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	611a      	str	r2, [r3, #16]
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	611a      	str	r2, [r3, #16]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	22ff      	movs	r2, #255	; 0xff
 8003606:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	22ca      	movs	r2, #202	; 0xca
 8003620:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2253      	movs	r2, #83	; 0x53
 8003626:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <LL_RTC_TIME_Config>:
  * @param  Minutes Value between Min_Data=0x00 and Max_Data=0x59
  * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TIME_Config(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 8003634:	b490      	push	{r4, r7}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;

  temp = Format12_24                                                                                    | \
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	041b      	lsls	r3, r3, #16
 8003646:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8003654:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 800365a:	ea42 0403 	orr.w	r4, r2, r3
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8003666:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800366a:	ea43 0204 	orr.w	r2, r3, r4
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	601a      	str	r2, [r3, #0]
}
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bc90      	pop	{r4, r7}
 800367a:	4770      	bx	lr

0800367c <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 800367c:	b490      	push	{r4, r7}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;
 800368a:	2400      	movs	r4, #0

  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	041b      	lsls	r3, r3, #16
 8003694:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8003698:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 80036a0:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 80036a6:	ea42 0403 	orr.w	r4, r2, r3

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <LL_RTC_DATE_Config+0x48>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	ea43 0204 	orr.w	r2, r3, r4
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	605a      	str	r2, [r3, #4]
}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc90      	pop	{r4, r7}
 80036c2:	4770      	bx	lr
 80036c4:	ff0000c0 	.word	0xff0000c0

080036c8 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	bf0c      	ite	eq
 80036dc:	2301      	moveq	r3, #1
 80036de:	2300      	movne	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b20      	cmp	r3, #32
 8003700:	bf0c      	ite	eq
 8003702:	2301      	moveq	r3, #1
 8003704:	2300      	movne	r3, #0
 8003706:	b2db      	uxtb	r3, r3
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003724:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	60da      	str	r2, [r3, #12]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800373c:	4b07      	ldr	r3, [pc, #28]	; (800375c <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003748:	bf0c      	ite	eq
 800374a:	2301      	moveq	r3, #1
 800374c:	2300      	movne	r3, #0
 800374e:	b2db      	uxtb	r3, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000e010 	.word	0xe000e010

08003760 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff ff50 	bl	8003614 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f971 	bl	8003a5c <LL_RTC_EnterInitMode>
 800377a:	4603      	mov	r3, r0
 800377c:	2b01      	cmp	r3, #1
 800377e:	d016      	beq.n	80037ae <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4619      	mov	r1, r3
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff febe 	bl	8003508 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4619      	mov	r1, r3
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ff1c 	bl	80035d0 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4619      	mov	r1, r3
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff ff02 	bl	80035a8 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff fede 	bl	8003566 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 80037aa:	2300      	movs	r3, #0
 80037ac:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ff23 	bl	80035fa <LL_RTC_EnableWriteProtection>

  return status;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 80037c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c2:	b089      	sub	sp, #36	; 0x24
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f7ff fea9 	bl	800352e <LL_RTC_GetHourFormat>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10c      	bne.n	80037fc <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	e008      	b.n	80037fc <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7ff fe9f 	bl	800352e <LL_RTC_GetHourFormat>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f7ff ff09 	bl	8003614 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 f92a 	bl	8003a5c <LL_RTC_EnterInitMode>
 8003808:	4603      	mov	r3, r0
 800380a:	2b01      	cmp	r3, #1
 800380c:	d073      	beq.n	80038f6 <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00f      	beq.n	8003834 <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6819      	ldr	r1, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	791b      	ldrb	r3, [r3, #4]
 800381c:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8003822:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	4603      	mov	r3, r0
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f7ff ff01 	bl	8003634 <LL_RTC_TIME_Config>
 8003832:	e04f      	b.n	80038d4 <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681c      	ldr	r4, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	791b      	ldrb	r3, [r3, #4]
 800383c:	4a32      	ldr	r2, [pc, #200]	; (8003908 <LL_RTC_TIME_Init+0x148>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	08db      	lsrs	r3, r3, #3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	b2d8      	uxtb	r0, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	791a      	ldrb	r2, [r3, #4]
 800384e:	4b2e      	ldr	r3, [pc, #184]	; (8003908 <LL_RTC_TIME_Init+0x148>)
 8003850:	fba3 1302 	umull	r1, r3, r3, r2
 8003854:	08d9      	lsrs	r1, r3, #3
 8003856:	460b      	mov	r3, r1
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	4303      	orrs	r3, r0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	795b      	ldrb	r3, [r3, #5]
 800386c:	4a26      	ldr	r2, [pc, #152]	; (8003908 <LL_RTC_TIME_Init+0x148>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	08db      	lsrs	r3, r3, #3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	b2d8      	uxtb	r0, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	795a      	ldrb	r2, [r3, #5]
 800387e:	4b22      	ldr	r3, [pc, #136]	; (8003908 <LL_RTC_TIME_Init+0x148>)
 8003880:	fba3 1302 	umull	r1, r3, r3, r2
 8003884:	08d9      	lsrs	r1, r3, #3
 8003886:	460b      	mov	r3, r1
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	4303      	orrs	r3, r0
 8003894:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8003896:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	799b      	ldrb	r3, [r3, #6]
 800389c:	4a1a      	ldr	r2, [pc, #104]	; (8003908 <LL_RTC_TIME_Init+0x148>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	08db      	lsrs	r3, r3, #3
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	b2d8      	uxtb	r0, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	799a      	ldrb	r2, [r3, #6]
 80038ae:	4b16      	ldr	r3, [pc, #88]	; (8003908 <LL_RTC_TIME_Init+0x148>)
 80038b0:	fba3 1302 	umull	r1, r3, r3, r2
 80038b4:	08d9      	lsrs	r1, r3, #3
 80038b6:	460b      	mov	r3, r1
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	4303      	orrs	r3, r0
 80038c4:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	4633      	mov	r3, r6
 80038ca:	462a      	mov	r2, r5
 80038cc:	4621      	mov	r1, r4
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f7ff feb0 	bl	8003634 <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTC);
 80038d4:	480d      	ldr	r0, [pc, #52]	; (800390c <LL_RTC_TIME_Init+0x14c>)
 80038d6:	f7ff fe46 	bl	8003566 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7ff fe51 	bl	8003582 <LL_RTC_IsShadowRegBypassEnabled>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d105      	bne.n	80038f2 <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f8ed 	bl	8003ac6 <LL_RTC_WaitForSynchro>
 80038ec:	4603      	mov	r3, r0
 80038ee:	75fb      	strb	r3, [r7, #23]
 80038f0:	e001      	b.n	80038f6 <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 80038f2:	2300      	movs	r3, #0
 80038f4:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f7ff fe7f 	bl	80035fa <LL_RTC_EnableWriteProtection>

  return status;
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003906:	bf00      	nop
 8003908:	cccccccd 	.word	0xcccccccd
 800390c:	40002800 	.word	0x40002800

08003910 <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 8003910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003912:	b089      	sub	sp, #36	; 0x24
 8003914:	af02      	add	r7, sp, #8
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10e      	bne.n	8003944 <LL_RTC_DATE_Init+0x34>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	785b      	ldrb	r3, [r3, #1]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	785b      	ldrb	r3, [r3, #1]
 8003936:	f023 0310 	bic.w	r3, r3, #16
 800393a:	b2db      	uxtb	r3, r3
 800393c:	330a      	adds	r3, #10
 800393e:	b2da      	uxtb	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f7ff fe65 	bl	8003614 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f886 	bl	8003a5c <LL_RTC_EnterInitMode>
 8003950:	4603      	mov	r3, r0
 8003952:	2b01      	cmp	r3, #1
 8003954:	d075      	beq.n	8003a42 <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d010      	beq.n	800397e <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	4619      	mov	r1, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	789b      	ldrb	r3, [r3, #2]
 8003966:	461a      	mov	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	785b      	ldrb	r3, [r3, #1]
 800396c:	4618      	mov	r0, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	78db      	ldrb	r3, [r3, #3]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	4603      	mov	r3, r0
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f7ff fe80 	bl	800367c <LL_RTC_DATE_Config>
 800397c:	e050      	b.n	8003a20 <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	461c      	mov	r4, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	789b      	ldrb	r3, [r3, #2]
 8003988:	4a32      	ldr	r2, [pc, #200]	; (8003a54 <LL_RTC_DATE_Init+0x144>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	08db      	lsrs	r3, r3, #3
 8003990:	b2db      	uxtb	r3, r3
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	b2d8      	uxtb	r0, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	789a      	ldrb	r2, [r3, #2]
 800399a:	4b2e      	ldr	r3, [pc, #184]	; (8003a54 <LL_RTC_DATE_Init+0x144>)
 800399c:	fba3 1302 	umull	r1, r3, r3, r2
 80039a0:	08d9      	lsrs	r1, r3, #3
 80039a2:	460b      	mov	r3, r1
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	4303      	orrs	r3, r0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <LL_RTC_DATE_Init+0x144>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	08db      	lsrs	r3, r3, #3
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	b2d8      	uxtb	r0, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	785a      	ldrb	r2, [r3, #1]
 80039ca:	4b22      	ldr	r3, [pc, #136]	; (8003a54 <LL_RTC_DATE_Init+0x144>)
 80039cc:	fba3 1302 	umull	r1, r3, r3, r2
 80039d0:	08d9      	lsrs	r1, r3, #3
 80039d2:	460b      	mov	r3, r1
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	4303      	orrs	r3, r0
 80039e0:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80039e2:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	78db      	ldrb	r3, [r3, #3]
 80039e8:	4a1a      	ldr	r2, [pc, #104]	; (8003a54 <LL_RTC_DATE_Init+0x144>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	08db      	lsrs	r3, r3, #3
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	b2d8      	uxtb	r0, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	78da      	ldrb	r2, [r3, #3]
 80039fa:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <LL_RTC_DATE_Init+0x144>)
 80039fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003a00:	08d9      	lsrs	r1, r3, #3
 8003a02:	460b      	mov	r3, r1
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	4303      	orrs	r3, r0
 8003a10:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	4633      	mov	r3, r6
 8003a16:	462a      	mov	r2, r5
 8003a18:	4621      	mov	r1, r4
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f7ff fe2e 	bl	800367c <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTC);
 8003a20:	480d      	ldr	r0, [pc, #52]	; (8003a58 <LL_RTC_DATE_Init+0x148>)
 8003a22:	f7ff fda0 	bl	8003566 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f7ff fdab 	bl	8003582 <LL_RTC_IsShadowRegBypassEnabled>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d105      	bne.n	8003a3e <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f847 	bl	8003ac6 <LL_RTC_WaitForSynchro>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	75fb      	strb	r3, [r7, #23]
 8003a3c:	e001      	b.n	8003a42 <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f7ff fdd9 	bl	80035fa <LL_RTC_EnableWriteProtection>

  return status;
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a52:	bf00      	nop
 8003a54:	cccccccd 	.word	0xcccccccd
 8003a58:	40002800 	.word	0x40002800

08003a5c <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8003a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a68:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fe28 	bl	80036c8 <LL_RTC_IsActiveFlag_INIT>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d11e      	bne.n	8003abc <LL_RTC_EnterInitMode+0x60>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fd63 	bl	800354a <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff fe1f 	bl	80036c8 <LL_RTC_IsActiveFlag_INIT>
 8003a8a:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8003a8c:	e010      	b.n	8003ab0 <LL_RTC_EnterInitMode+0x54>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003a8e:	f7ff fe53 	bl	8003738 <LL_SYSTICK_IsActiveCounterFlag>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d102      	bne.n	8003a9e <LL_RTC_EnterInitMode+0x42>
      {
        timeout --;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff fe12 	bl	80036c8 <LL_RTC_IsActiveFlag_INIT>
 8003aa4:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <LL_RTC_EnterInitMode+0x54>
      {
        status = ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <LL_RTC_EnterInitMode+0x60>
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d1e8      	bne.n	8003a8e <LL_RTC_EnterInitMode+0x32>
      }
    }
  }
  return status;
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b086      	sub	sp, #24
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8003ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ad2:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff fe19 	bl	8003714 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff fe03 	bl	80036ee <LL_RTC_IsActiveFlag_RS>
 8003ae8:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 8003aea:	e010      	b.n	8003b0e <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003aec:	f7ff fe24 	bl	8003738 <LL_SYSTICK_IsActiveCounterFlag>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d102      	bne.n	8003afc <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff fdf6 	bl	80036ee <LL_RTC_IsActiveFlag_RS>
 8003b02:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <LL_RTC_WaitForSynchro+0x54>
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1e8      	bne.n	8003aec <LL_RTC_WaitForSynchro+0x26>
    }
  }

  if (status != ERROR)
 8003b1a:	7dfb      	ldrb	r3, [r7, #23]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d01e      	beq.n	8003b5e <LL_RTC_WaitForSynchro+0x98>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 8003b20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b24:	60fb      	str	r3, [r7, #12]
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff fde1 	bl	80036ee <LL_RTC_IsActiveFlag_RS>
 8003b2c:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8003b2e:	e010      	b.n	8003b52 <LL_RTC_WaitForSynchro+0x8c>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003b30:	f7ff fe02 	bl	8003738 <LL_SYSTICK_IsActiveCounterFlag>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d102      	bne.n	8003b40 <LL_RTC_WaitForSynchro+0x7a>
      {
        timeout--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff fdd4 	bl	80036ee <LL_RTC_IsActiveFlag_RS>
 8003b46:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <LL_RTC_WaitForSynchro+0x8c>
      {
        status = ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <LL_RTC_WaitForSynchro+0x98>
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d1e8      	bne.n	8003b30 <LL_RTC_WaitForSynchro+0x6a>
      }
    }
  }

  return (status);
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d101      	bne.n	8003b80 <LL_SPI_IsEnabled+0x18>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <LL_SPI_IsEnabled+0x1a>
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	611a      	str	r2, [r3, #16]
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff ffd3 	bl	8003b68 <LL_SPI_IsEnabled>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d139      	bne.n	8003c3c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd0:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	6811      	ldr	r1, [r2, #0]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	6852      	ldr	r2, [r2, #4]
 8003bdc:	4311      	orrs	r1, r2
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	6892      	ldr	r2, [r2, #8]
 8003be2:	4311      	orrs	r1, r2
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	68d2      	ldr	r2, [r2, #12]
 8003be8:	4311      	orrs	r1, r2
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	6912      	ldr	r2, [r2, #16]
 8003bee:	4311      	orrs	r1, r2
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	6952      	ldr	r2, [r2, #20]
 8003bf4:	4311      	orrs	r1, r2
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	6992      	ldr	r2, [r2, #24]
 8003bfa:	4311      	orrs	r1, r2
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	69d2      	ldr	r2, [r2, #28]
 8003c00:	4311      	orrs	r1, r2
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	6a12      	ldr	r2, [r2, #32]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f023 0204 	bic.w	r2, r3, #4
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	0c1b      	lsrs	r3, r3, #16
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2a:	d105      	bne.n	8003c38 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff ffab 	bl	8003b8e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	61da      	str	r2, [r3, #28]
  return status;
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	611a      	str	r2, [r3, #16]
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	615a      	str	r2, [r3, #20]
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8003cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ccc:	b091      	sub	sp, #68	; 0x44
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003cd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cd4:	637a      	str	r2, [r7, #52]	; 0x34
 8003cd6:	633b      	str	r3, [r7, #48]	; 0x30
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cde:	f040 80a7 	bne.w	8003e30 <LL_USART_SetBaudRate+0x168>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4614      	mov	r4, r2
 8003cee:	18db      	adds	r3, r3, r3
 8003cf0:	eb44 0404 	adc.w	r4, r4, r4
 8003cf4:	185b      	adds	r3, r3, r1
 8003cf6:	eb44 0402 	adc.w	r4, r4, r2
 8003cfa:	00e6      	lsls	r6, r4, #3
 8003cfc:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8003d00:	00dd      	lsls	r5, r3, #3
 8003d02:	462b      	mov	r3, r5
 8003d04:	4634      	mov	r4, r6
 8003d06:	185d      	adds	r5, r3, r1
 8003d08:	eb44 0602 	adc.w	r6, r4, r2
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	4631      	mov	r1, r6
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	f04f 0400 	mov.w	r4, #0
 8003d16:	18db      	adds	r3, r3, r3
 8003d18:	eb44 0404 	adc.w	r4, r4, r4
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4623      	mov	r3, r4
 8003d20:	f7fc fabe 	bl	80002a0 <__aeabi_uldivmod>
 8003d24:	4603      	mov	r3, r0
 8003d26:	460c      	mov	r4, r1
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4ba1      	ldr	r3, [pc, #644]	; (8003fb0 <LL_USART_SetBaudRate+0x2e8>)
 8003d2c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	b29d      	uxth	r5, r3
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4614      	mov	r4, r2
 8003d44:	18db      	adds	r3, r3, r3
 8003d46:	eb44 0404 	adc.w	r4, r4, r4
 8003d4a:	185b      	adds	r3, r3, r1
 8003d4c:	eb44 0402 	adc.w	r4, r4, r2
 8003d50:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8003d54:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8003d58:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8003d5c:	4653      	mov	r3, sl
 8003d5e:	465c      	mov	r4, fp
 8003d60:	eb13 0a01 	adds.w	sl, r3, r1
 8003d64:	eb44 0b02 	adc.w	fp, r4, r2
 8003d68:	4650      	mov	r0, sl
 8003d6a:	4659      	mov	r1, fp
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	f04f 0400 	mov.w	r4, #0
 8003d72:	18db      	adds	r3, r3, r3
 8003d74:	eb44 0404 	adc.w	r4, r4, r4
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4623      	mov	r3, r4
 8003d7c:	f7fc fa90 	bl	80002a0 <__aeabi_uldivmod>
 8003d80:	4603      	mov	r3, r0
 8003d82:	460c      	mov	r4, r1
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b8a      	ldr	r3, [pc, #552]	; (8003fb0 <LL_USART_SetBaudRate+0x2e8>)
 8003d88:	fba3 1302 	umull	r1, r3, r3, r2
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	2164      	movs	r1, #100	; 0x64
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	3332      	adds	r3, #50	; 0x32
 8003d9a:	4a85      	ldr	r2, [pc, #532]	; (8003fb0 <LL_USART_SetBaudRate+0x2e8>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	442b      	add	r3, r5
 8003db0:	b29d      	uxth	r5, r3
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	4619      	mov	r1, r3
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4614      	mov	r4, r2
 8003dbe:	18db      	adds	r3, r3, r3
 8003dc0:	eb44 0404 	adc.w	r4, r4, r4
 8003dc4:	185b      	adds	r3, r3, r1
 8003dc6:	eb44 0402 	adc.w	r4, r4, r2
 8003dca:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003dce:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003dd2:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003dd6:	4643      	mov	r3, r8
 8003dd8:	464c      	mov	r4, r9
 8003dda:	eb13 0801 	adds.w	r8, r3, r1
 8003dde:	eb44 0902 	adc.w	r9, r4, r2
 8003de2:	4640      	mov	r0, r8
 8003de4:	4649      	mov	r1, r9
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	f04f 0400 	mov.w	r4, #0
 8003dec:	18db      	adds	r3, r3, r3
 8003dee:	eb44 0404 	adc.w	r4, r4, r4
 8003df2:	461a      	mov	r2, r3
 8003df4:	4623      	mov	r3, r4
 8003df6:	f7fc fa53 	bl	80002a0 <__aeabi_uldivmod>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4b6b      	ldr	r3, [pc, #428]	; (8003fb0 <LL_USART_SetBaudRate+0x2e8>)
 8003e02:	fba3 1302 	umull	r1, r3, r3, r2
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	2164      	movs	r1, #100	; 0x64
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	3332      	adds	r3, #50	; 0x32
 8003e14:	4a66      	ldr	r2, [pc, #408]	; (8003fb0 <LL_USART_SetBaudRate+0x2e8>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	442b      	add	r3, r5
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8003e2e:	e0ba      	b.n	8003fa6 <LL_USART_SetBaudRate+0x2de>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	4619      	mov	r1, r3
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4614      	mov	r4, r2
 8003e3c:	18db      	adds	r3, r3, r3
 8003e3e:	eb44 0404 	adc.w	r4, r4, r4
 8003e42:	185b      	adds	r3, r3, r1
 8003e44:	eb44 0402 	adc.w	r4, r4, r2
 8003e48:	00e0      	lsls	r0, r4, #3
 8003e4a:	6178      	str	r0, [r7, #20]
 8003e4c:	6978      	ldr	r0, [r7, #20]
 8003e4e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003e52:	6178      	str	r0, [r7, #20]
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003e5c:	185d      	adds	r5, r3, r1
 8003e5e:	eb44 0602 	adc.w	r6, r4, r2
 8003e62:	4628      	mov	r0, r5
 8003e64:	4631      	mov	r1, r6
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	f04f 0400 	mov.w	r4, #0
 8003e6c:	00a2      	lsls	r2, r4, #2
 8003e6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e72:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e80:	f7fc fa0e 	bl	80002a0 <__aeabi_uldivmod>
 8003e84:	4603      	mov	r3, r0
 8003e86:	460c      	mov	r4, r1
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4b49      	ldr	r3, [pc, #292]	; (8003fb0 <LL_USART_SetBaudRate+0x2e8>)
 8003e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	b29d      	uxth	r5, r3
 8003e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4614      	mov	r4, r2
 8003ea4:	18db      	adds	r3, r3, r3
 8003ea6:	eb44 0404 	adc.w	r4, r4, r4
 8003eaa:	185b      	adds	r3, r3, r1
 8003eac:	eb44 0402 	adc.w	r4, r4, r2
 8003eb0:	00e0      	lsls	r0, r4, #3
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003ec4:	eb13 0801 	adds.w	r8, r3, r1
 8003ec8:	eb44 0902 	adc.w	r9, r4, r2
 8003ecc:	4640      	mov	r0, r8
 8003ece:	4649      	mov	r1, r9
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed2:	f04f 0400 	mov.w	r4, #0
 8003ed6:	00a2      	lsls	r2, r4, #2
 8003ed8:	627a      	str	r2, [r7, #36]	; 0x24
 8003eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003edc:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003ee0:	627a      	str	r2, [r7, #36]	; 0x24
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	623b      	str	r3, [r7, #32]
 8003ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eea:	f7fc f9d9 	bl	80002a0 <__aeabi_uldivmod>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <LL_USART_SetBaudRate+0x2e8>)
 8003ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2164      	movs	r1, #100	; 0x64
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	3332      	adds	r3, #50	; 0x32
 8003f08:	4a29      	ldr	r2, [pc, #164]	; (8003fb0 <LL_USART_SetBaudRate+0x2e8>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	442b      	add	r3, r5
 8003f1a:	b29d      	uxth	r5, r3
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1e:	4619      	mov	r1, r3
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4614      	mov	r4, r2
 8003f28:	18db      	adds	r3, r3, r3
 8003f2a:	eb44 0404 	adc.w	r4, r4, r4
 8003f2e:	185b      	adds	r3, r3, r1
 8003f30:	eb44 0402 	adc.w	r4, r4, r2
 8003f34:	00e0      	lsls	r0, r4, #3
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003f48:	eb13 0801 	adds.w	r8, r3, r1
 8003f4c:	eb44 0902 	adc.w	r9, r4, r2
 8003f50:	4640      	mov	r0, r8
 8003f52:	4649      	mov	r1, r9
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	f04f 0400 	mov.w	r4, #0
 8003f5a:	00a2      	lsls	r2, r4, #2
 8003f5c:	61fa      	str	r2, [r7, #28]
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003f64:	61fa      	str	r2, [r7, #28]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f6e:	f7fc f997 	bl	80002a0 <__aeabi_uldivmod>
 8003f72:	4603      	mov	r3, r0
 8003f74:	460c      	mov	r4, r1
 8003f76:	461a      	mov	r2, r3
 8003f78:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <LL_USART_SetBaudRate+0x2e8>)
 8003f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	2164      	movs	r1, #100	; 0x64
 8003f82:	fb01 f303 	mul.w	r3, r1, r3
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	3332      	adds	r3, #50	; 0x32
 8003f8c:	4a08      	ldr	r2, [pc, #32]	; (8003fb0 <LL_USART_SetBaudRate+0x2e8>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	442b      	add	r3, r5
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa4:	609a      	str	r2, [r3, #8]
}
 8003fa6:	bf00      	nop
 8003fa8:	3744      	adds	r7, #68	; 0x44
 8003faa:	46bd      	mov	sp, r7
 8003fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb0:	51eb851f 	.word	0x51eb851f

08003fb4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff fe43 	bl	8003c52 <LL_USART_IsEnabled>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d15e      	bne.n	8004090 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003fda:	f023 030c 	bic.w	r3, r3, #12
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	6851      	ldr	r1, [r2, #4]
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	68d2      	ldr	r2, [r2, #12]
 8003fe6:	4311      	orrs	r1, r2
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	6912      	ldr	r2, [r2, #16]
 8003fec:	4311      	orrs	r1, r2
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	6992      	ldr	r2, [r2, #24]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	4619      	mov	r1, r3
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff fe3a 	bl	8003c7a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	4619      	mov	r1, r3
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff fe47 	bl	8003ca0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004012:	f107 0308 	add.w	r3, r7, #8
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff f9ae 	bl	8003378 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a1f      	ldr	r2, [pc, #124]	; (800409c <LL_USART_Init+0xe8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d102      	bne.n	800402a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	61bb      	str	r3, [r7, #24]
 8004028:	e021      	b.n	800406e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <LL_USART_Init+0xec>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d102      	bne.n	8004038 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	e01a      	b.n	800406e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a1a      	ldr	r2, [pc, #104]	; (80040a4 <LL_USART_Init+0xf0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d102      	bne.n	8004046 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	61bb      	str	r3, [r7, #24]
 8004044:	e013      	b.n	800406e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a17      	ldr	r2, [pc, #92]	; (80040a8 <LL_USART_Init+0xf4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d102      	bne.n	8004054 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	e00c      	b.n	800406e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a15      	ldr	r2, [pc, #84]	; (80040ac <LL_USART_Init+0xf8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d102      	bne.n	8004062 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	e005      	b.n	800406e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a12      	ldr	r2, [pc, #72]	; (80040b0 <LL_USART_Init+0xfc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d101      	bne.n	800406e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00d      	beq.n	8004090 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800407c:	2300      	movs	r3, #0
 800407e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	699a      	ldr	r2, [r3, #24]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69b9      	ldr	r1, [r7, #24]
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff fe1c 	bl	8003cc8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004090:	7ffb      	ldrb	r3, [r7, #31]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3720      	adds	r7, #32
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40011000 	.word	0x40011000
 80040a0:	40004400 	.word	0x40004400
 80040a4:	40004800 	.word	0x40004800
 80040a8:	40011400 	.word	0x40011400
 80040ac:	40004c00 	.word	0x40004c00
 80040b0:	40005000 	.word	0x40005000

080040b4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80040bc:	4a04      	ldr	r2, [pc, #16]	; (80040d0 <LL_SetSystemCoreClock+0x1c>)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6013      	str	r3, [r2, #0]
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	2000000c 	.word	0x2000000c

080040d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ea:	f3ef 8305 	mrs	r3, IPSR
 80040ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80040f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10f      	bne.n	8004116 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f6:	f3ef 8310 	mrs	r3, PRIMASK
 80040fa:	607b      	str	r3, [r7, #4]
  return(result);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d105      	bne.n	800410e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004102:	f3ef 8311 	mrs	r3, BASEPRI
 8004106:	603b      	str	r3, [r7, #0]
  return(result);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d007      	beq.n	800411e <osKernelInitialize+0x3a>
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <osKernelInitialize+0x64>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d103      	bne.n	800411e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004116:	f06f 0305 	mvn.w	r3, #5
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	e00c      	b.n	8004138 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800411e:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <osKernelInitialize+0x64>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d105      	bne.n	8004132 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004126:	4b08      	ldr	r3, [pc, #32]	; (8004148 <osKernelInitialize+0x64>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	e002      	b.n	8004138 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004132:	f04f 33ff 	mov.w	r3, #4294967295
 8004136:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004138:	68fb      	ldr	r3, [r7, #12]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000648 	.word	0x20000648

0800414c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004152:	f3ef 8305 	mrs	r3, IPSR
 8004156:	60bb      	str	r3, [r7, #8]
  return(result);
 8004158:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10f      	bne.n	800417e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800415e:	f3ef 8310 	mrs	r3, PRIMASK
 8004162:	607b      	str	r3, [r7, #4]
  return(result);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d105      	bne.n	8004176 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800416a:	f3ef 8311 	mrs	r3, BASEPRI
 800416e:	603b      	str	r3, [r7, #0]
  return(result);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <osKernelStart+0x3a>
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <osKernelStart+0x68>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d103      	bne.n	8004186 <osKernelStart+0x3a>
    stat = osErrorISR;
 800417e:	f06f 0305 	mvn.w	r3, #5
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e010      	b.n	80041a8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <osKernelStart+0x68>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d109      	bne.n	80041a2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800418e:	f7ff ffa1 	bl	80040d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <osKernelStart+0x68>)
 8004194:	2202      	movs	r2, #2
 8004196:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004198:	f001 fc86 	bl	8005aa8 <vTaskStartScheduler>
      stat = osOK;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	e002      	b.n	80041a8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80041a2:	f04f 33ff 	mov.w	r3, #4294967295
 80041a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80041a8:	68fb      	ldr	r3, [r7, #12]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000648 	.word	0x20000648

080041b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b090      	sub	sp, #64	; 0x40
 80041bc:	af04      	add	r7, sp, #16
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041c8:	f3ef 8305 	mrs	r3, IPSR
 80041cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80041ce:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f040 808f 	bne.w	80042f4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041d6:	f3ef 8310 	mrs	r3, PRIMASK
 80041da:	61bb      	str	r3, [r7, #24]
  return(result);
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d105      	bne.n	80041ee <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041e2:	f3ef 8311 	mrs	r3, BASEPRI
 80041e6:	617b      	str	r3, [r7, #20]
  return(result);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <osThreadNew+0x3e>
 80041ee:	4b44      	ldr	r3, [pc, #272]	; (8004300 <osThreadNew+0x148>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d07e      	beq.n	80042f4 <osThreadNew+0x13c>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d07b      	beq.n	80042f4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004200:	2318      	movs	r3, #24
 8004202:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004204:	2300      	movs	r3, #0
 8004206:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004208:	f04f 33ff 	mov.w	r3, #4294967295
 800420c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d045      	beq.n	80042a0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <osThreadNew+0x6a>
        name = attr->name;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	2b00      	cmp	r3, #0
 8004234:	d008      	beq.n	8004248 <osThreadNew+0x90>
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	2b38      	cmp	r3, #56	; 0x38
 800423a:	d805      	bhi.n	8004248 <osThreadNew+0x90>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <osThreadNew+0x94>
        return (NULL);
 8004248:	2300      	movs	r3, #0
 800424a:	e054      	b.n	80042f6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	089b      	lsrs	r3, r3, #2
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00e      	beq.n	8004282 <osThreadNew+0xca>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	2b5b      	cmp	r3, #91	; 0x5b
 800426a:	d90a      	bls.n	8004282 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004270:	2b00      	cmp	r3, #0
 8004272:	d006      	beq.n	8004282 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <osThreadNew+0xca>
        mem = 1;
 800427c:	2301      	movs	r3, #1
 800427e:	623b      	str	r3, [r7, #32]
 8004280:	e010      	b.n	80042a4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10c      	bne.n	80042a4 <osThreadNew+0xec>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d108      	bne.n	80042a4 <osThreadNew+0xec>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d104      	bne.n	80042a4 <osThreadNew+0xec>
          mem = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	623b      	str	r3, [r7, #32]
 800429e:	e001      	b.n	80042a4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d110      	bne.n	80042cc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042b2:	9202      	str	r2, [sp, #8]
 80042b4:	9301      	str	r3, [sp, #4]
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f001 fa1f 	bl	8005704 <xTaskCreateStatic>
 80042c6:	4603      	mov	r3, r0
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	e013      	b.n	80042f4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d110      	bne.n	80042f4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	f107 0310 	add.w	r3, r7, #16
 80042da:	9301      	str	r3, [sp, #4]
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f001 fa67 	bl	80057b8 <xTaskCreate>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d001      	beq.n	80042f4 <osThreadNew+0x13c>
          hTask = NULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042f4:	693b      	ldr	r3, [r7, #16]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3730      	adds	r7, #48	; 0x30
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000648 	.word	0x20000648

08004304 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800430c:	f3ef 8305 	mrs	r3, IPSR
 8004310:	613b      	str	r3, [r7, #16]
  return(result);
 8004312:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10f      	bne.n	8004338 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004318:	f3ef 8310 	mrs	r3, PRIMASK
 800431c:	60fb      	str	r3, [r7, #12]
  return(result);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d105      	bne.n	8004330 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004324:	f3ef 8311 	mrs	r3, BASEPRI
 8004328:	60bb      	str	r3, [r7, #8]
  return(result);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d007      	beq.n	8004340 <osDelay+0x3c>
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <osDelay+0x58>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d103      	bne.n	8004340 <osDelay+0x3c>
    stat = osErrorISR;
 8004338:	f06f 0305 	mvn.w	r3, #5
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	e007      	b.n	8004350 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <osDelay+0x4c>
      vTaskDelay(ticks);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f001 fb78 	bl	8005a40 <vTaskDelay>
    }
  }

  return (stat);
 8004350:	697b      	ldr	r3, [r7, #20]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000648 	.word	0x20000648

08004360 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4a07      	ldr	r2, [pc, #28]	; (800438c <vApplicationGetIdleTaskMemory+0x2c>)
 8004370:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	4a06      	ldr	r2, [pc, #24]	; (8004390 <vApplicationGetIdleTaskMemory+0x30>)
 8004376:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2280      	movs	r2, #128	; 0x80
 800437c:	601a      	str	r2, [r3, #0]
}
 800437e:	bf00      	nop
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	2000064c 	.word	0x2000064c
 8004390:	200006a8 	.word	0x200006a8

08004394 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4a07      	ldr	r2, [pc, #28]	; (80043c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80043a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	4a06      	ldr	r2, [pc, #24]	; (80043c4 <vApplicationGetTimerTaskMemory+0x30>)
 80043aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043b2:	601a      	str	r2, [r3, #0]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	200008a8 	.word	0x200008a8
 80043c4:	20000904 	.word	0x20000904

080043c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f103 0208 	add.w	r2, r3, #8
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f04f 32ff 	mov.w	r2, #4294967295
 80043e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f103 0208 	add.w	r2, r3, #8
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f103 0208 	add.w	r2, r3, #8
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004422:	b480      	push	{r7}
 8004424:	b085      	sub	sp, #20
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	601a      	str	r2, [r3, #0]
}
 800445e:	bf00      	nop
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800446a:	b480      	push	{r7}
 800446c:	b085      	sub	sp, #20
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d103      	bne.n	800448a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	e00c      	b.n	80044a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3308      	adds	r3, #8
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	e002      	b.n	8004498 <vListInsert+0x2e>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d9f6      	bls.n	8004492 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	601a      	str	r2, [r3, #0]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6892      	ldr	r2, [r2, #8]
 80044f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6852      	ldr	r2, [r2, #4]
 80044fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	429a      	cmp	r2, r3
 8004506:	d103      	bne.n	8004510 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	1e5a      	subs	r2, r3, #1
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3b04      	subs	r3, #4
 8004540:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3b04      	subs	r3, #4
 800454e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f023 0201 	bic.w	r2, r3, #1
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3b04      	subs	r3, #4
 800455e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004560:	4a0c      	ldr	r2, [pc, #48]	; (8004594 <pxPortInitialiseStack+0x64>)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3b14      	subs	r3, #20
 800456a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3b04      	subs	r3, #4
 8004576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f06f 0202 	mvn.w	r2, #2
 800457e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3b20      	subs	r3, #32
 8004584:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004586:	68fb      	ldr	r3, [r7, #12]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	08004599 	.word	0x08004599

08004598 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800459e:	2300      	movs	r3, #0
 80045a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045a2:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <prvTaskExitError+0x50>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045aa:	d009      	beq.n	80045c0 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	e7fe      	b.n	80045be <prvTaskExitError+0x26>
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80045d2:	bf00      	nop
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0fc      	beq.n	80045d4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80045da:	bf00      	nop
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000004 	.word	0x20000004
 80045ec:	00000000 	.word	0x00000000

080045f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <pxCurrentTCBConst2>)
 80045f2:	6819      	ldr	r1, [r3, #0]
 80045f4:	6808      	ldr	r0, [r1, #0]
 80045f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fa:	f380 8809 	msr	PSP, r0
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f380 8811 	msr	BASEPRI, r0
 800460a:	4770      	bx	lr
 800460c:	f3af 8000 	nop.w

08004610 <pxCurrentTCBConst2>:
 8004610:	20008524 	.word	0x20008524
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop

08004618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004618:	4808      	ldr	r0, [pc, #32]	; (800463c <prvPortStartFirstTask+0x24>)
 800461a:	6800      	ldr	r0, [r0, #0]
 800461c:	6800      	ldr	r0, [r0, #0]
 800461e:	f380 8808 	msr	MSP, r0
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f380 8814 	msr	CONTROL, r0
 800462a:	b662      	cpsie	i
 800462c:	b661      	cpsie	f
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	df00      	svc	0
 8004638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800463a:	bf00      	nop
 800463c:	e000ed08 	.word	0xe000ed08

08004640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004646:	4b44      	ldr	r3, [pc, #272]	; (8004758 <xPortStartScheduler+0x118>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a44      	ldr	r2, [pc, #272]	; (800475c <xPortStartScheduler+0x11c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d109      	bne.n	8004664 <xPortStartScheduler+0x24>
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	e7fe      	b.n	8004662 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004664:	4b3c      	ldr	r3, [pc, #240]	; (8004758 <xPortStartScheduler+0x118>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a3d      	ldr	r2, [pc, #244]	; (8004760 <xPortStartScheduler+0x120>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d109      	bne.n	8004682 <xPortStartScheduler+0x42>
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	e7fe      	b.n	8004680 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004682:	4b38      	ldr	r3, [pc, #224]	; (8004764 <xPortStartScheduler+0x124>)
 8004684:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	22ff      	movs	r2, #255	; 0xff
 8004692:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	4b30      	ldr	r3, [pc, #192]	; (8004768 <xPortStartScheduler+0x128>)
 80046a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046aa:	4b30      	ldr	r3, [pc, #192]	; (800476c <xPortStartScheduler+0x12c>)
 80046ac:	2207      	movs	r2, #7
 80046ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046b0:	e009      	b.n	80046c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80046b2:	4b2e      	ldr	r3, [pc, #184]	; (800476c <xPortStartScheduler+0x12c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	4a2c      	ldr	r2, [pc, #176]	; (800476c <xPortStartScheduler+0x12c>)
 80046ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046c6:	78fb      	ldrb	r3, [r7, #3]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ce:	2b80      	cmp	r3, #128	; 0x80
 80046d0:	d0ef      	beq.n	80046b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046d2:	4b26      	ldr	r3, [pc, #152]	; (800476c <xPortStartScheduler+0x12c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f1c3 0307 	rsb	r3, r3, #7
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d009      	beq.n	80046f2 <xPortStartScheduler+0xb2>
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	e7fe      	b.n	80046f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046f2:	4b1e      	ldr	r3, [pc, #120]	; (800476c <xPortStartScheduler+0x12c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	4a1c      	ldr	r2, [pc, #112]	; (800476c <xPortStartScheduler+0x12c>)
 80046fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046fc:	4b1b      	ldr	r3, [pc, #108]	; (800476c <xPortStartScheduler+0x12c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004704:	4a19      	ldr	r2, [pc, #100]	; (800476c <xPortStartScheduler+0x12c>)
 8004706:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	b2da      	uxtb	r2, r3
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004710:	4a17      	ldr	r2, [pc, #92]	; (8004770 <xPortStartScheduler+0x130>)
 8004712:	4b17      	ldr	r3, [pc, #92]	; (8004770 <xPortStartScheduler+0x130>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800471a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800471c:	4a14      	ldr	r2, [pc, #80]	; (8004770 <xPortStartScheduler+0x130>)
 800471e:	4b14      	ldr	r3, [pc, #80]	; (8004770 <xPortStartScheduler+0x130>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004726:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004728:	f000 f8d6 	bl	80048d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800472c:	4b11      	ldr	r3, [pc, #68]	; (8004774 <xPortStartScheduler+0x134>)
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004732:	f000 f8f5 	bl	8004920 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004736:	4a10      	ldr	r2, [pc, #64]	; (8004778 <xPortStartScheduler+0x138>)
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <xPortStartScheduler+0x138>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004740:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004742:	f7ff ff69 	bl	8004618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004746:	f001 fb85 	bl	8005e54 <vTaskSwitchContext>
	prvTaskExitError();
 800474a:	f7ff ff25 	bl	8004598 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	e000ed00 	.word	0xe000ed00
 800475c:	410fc271 	.word	0x410fc271
 8004760:	410fc270 	.word	0x410fc270
 8004764:	e000e400 	.word	0xe000e400
 8004768:	20000d04 	.word	0x20000d04
 800476c:	20000d08 	.word	0x20000d08
 8004770:	e000ed20 	.word	0xe000ed20
 8004774:	20000004 	.word	0x20000004
 8004778:	e000ef34 	.word	0xe000ef34

0800477c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004794:	4b0e      	ldr	r3, [pc, #56]	; (80047d0 <vPortEnterCritical+0x54>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3301      	adds	r3, #1
 800479a:	4a0d      	ldr	r2, [pc, #52]	; (80047d0 <vPortEnterCritical+0x54>)
 800479c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800479e:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <vPortEnterCritical+0x54>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d10e      	bne.n	80047c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <vPortEnterCritical+0x58>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d009      	beq.n	80047c4 <vPortEnterCritical+0x48>
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	e7fe      	b.n	80047c2 <vPortEnterCritical+0x46>
	}
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	20000004 	.word	0x20000004
 80047d4:	e000ed04 	.word	0xe000ed04

080047d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047de:	4b11      	ldr	r3, [pc, #68]	; (8004824 <vPortExitCritical+0x4c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <vPortExitCritical+0x22>
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	e7fe      	b.n	80047f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80047fa:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <vPortExitCritical+0x4c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3b01      	subs	r3, #1
 8004800:	4a08      	ldr	r2, [pc, #32]	; (8004824 <vPortExitCritical+0x4c>)
 8004802:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004804:	4b07      	ldr	r3, [pc, #28]	; (8004824 <vPortExitCritical+0x4c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d104      	bne.n	8004816 <vPortExitCritical+0x3e>
 800480c:	2300      	movs	r3, #0
 800480e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	20000004 	.word	0x20000004
	...

08004830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004830:	f3ef 8009 	mrs	r0, PSP
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	4b15      	ldr	r3, [pc, #84]	; (8004890 <pxCurrentTCBConst>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	f01e 0f10 	tst.w	lr, #16
 8004840:	bf08      	it	eq
 8004842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800484a:	6010      	str	r0, [r2, #0]
 800484c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004854:	f380 8811 	msr	BASEPRI, r0
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f001 faf8 	bl	8005e54 <vTaskSwitchContext>
 8004864:	f04f 0000 	mov.w	r0, #0
 8004868:	f380 8811 	msr	BASEPRI, r0
 800486c:	bc09      	pop	{r0, r3}
 800486e:	6819      	ldr	r1, [r3, #0]
 8004870:	6808      	ldr	r0, [r1, #0]
 8004872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004876:	f01e 0f10 	tst.w	lr, #16
 800487a:	bf08      	it	eq
 800487c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004880:	f380 8809 	msr	PSP, r0
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	f3af 8000 	nop.w

08004890 <pxCurrentTCBConst>:
 8004890:	20008524 	.word	0x20008524
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004894:	bf00      	nop
 8004896:	bf00      	nop

08004898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048b0:	f001 fa18 	bl	8005ce4 <xTaskIncrementTick>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <SysTick_Handler+0x3c>)
 80048bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	2300      	movs	r3, #0
 80048c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80048cc:	bf00      	nop
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	e000ed04 	.word	0xe000ed04

080048d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048dc:	4b0b      	ldr	r3, [pc, #44]	; (800490c <vPortSetupTimerInterrupt+0x34>)
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048e2:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <vPortSetupTimerInterrupt+0x38>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048e8:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <vPortSetupTimerInterrupt+0x3c>)
 80048ea:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <vPortSetupTimerInterrupt+0x40>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	490b      	ldr	r1, [pc, #44]	; (800491c <vPortSetupTimerInterrupt+0x44>)
 80048f0:	fba1 1303 	umull	r1, r3, r1, r3
 80048f4:	099b      	lsrs	r3, r3, #6
 80048f6:	3b01      	subs	r3, #1
 80048f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048fa:	4b04      	ldr	r3, [pc, #16]	; (800490c <vPortSetupTimerInterrupt+0x34>)
 80048fc:	2207      	movs	r2, #7
 80048fe:	601a      	str	r2, [r3, #0]
}
 8004900:	bf00      	nop
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	e000e010 	.word	0xe000e010
 8004910:	e000e018 	.word	0xe000e018
 8004914:	e000e014 	.word	0xe000e014
 8004918:	2000000c 	.word	0x2000000c
 800491c:	10624dd3 	.word	0x10624dd3

08004920 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004920:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004930 <vPortEnableVFP+0x10>
 8004924:	6801      	ldr	r1, [r0, #0]
 8004926:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800492a:	6001      	str	r1, [r0, #0]
 800492c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800492e:	bf00      	nop
 8004930:	e000ed88 	.word	0xe000ed88

08004934 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800493a:	f3ef 8305 	mrs	r3, IPSR
 800493e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b0f      	cmp	r3, #15
 8004944:	d913      	bls.n	800496e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004946:	4a16      	ldr	r2, [pc, #88]	; (80049a0 <vPortValidateInterruptPriority+0x6c>)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004950:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <vPortValidateInterruptPriority+0x70>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	7afa      	ldrb	r2, [r7, #11]
 8004956:	429a      	cmp	r2, r3
 8004958:	d209      	bcs.n	800496e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	607b      	str	r3, [r7, #4]
 800496c:	e7fe      	b.n	800496c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800496e:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <vPortValidateInterruptPriority+0x74>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <vPortValidateInterruptPriority+0x78>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d909      	bls.n	8004992 <vPortValidateInterruptPriority+0x5e>
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	e7fe      	b.n	8004990 <vPortValidateInterruptPriority+0x5c>
	}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	e000e3f0 	.word	0xe000e3f0
 80049a4:	20000d04 	.word	0x20000d04
 80049a8:	e000ed0c 	.word	0xe000ed0c
 80049ac:	20000d08 	.word	0x20000d08

080049b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049bc:	f001 f8d8 	bl	8005b70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049c0:	4b57      	ldr	r3, [pc, #348]	; (8004b20 <pvPortMalloc+0x170>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049c8:	f000 f90c 	bl	8004be4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049cc:	4b55      	ldr	r3, [pc, #340]	; (8004b24 <pvPortMalloc+0x174>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f040 808c 	bne.w	8004af2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01c      	beq.n	8004a1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80049e0:	2208      	movs	r2, #8
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4413      	add	r3, r2
 80049e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d013      	beq.n	8004a1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f023 0307 	bic.w	r3, r3, #7
 80049f8:	3308      	adds	r3, #8
 80049fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <pvPortMalloc+0x6a>
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e7fe      	b.n	8004a18 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d068      	beq.n	8004af2 <pvPortMalloc+0x142>
 8004a20:	4b41      	ldr	r3, [pc, #260]	; (8004b28 <pvPortMalloc+0x178>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d863      	bhi.n	8004af2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a2a:	4b40      	ldr	r3, [pc, #256]	; (8004b2c <pvPortMalloc+0x17c>)
 8004a2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a2e:	4b3f      	ldr	r3, [pc, #252]	; (8004b2c <pvPortMalloc+0x17c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a34:	e004      	b.n	8004a40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d203      	bcs.n	8004a52 <pvPortMalloc+0xa2>
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f1      	bne.n	8004a36 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a52:	4b33      	ldr	r3, [pc, #204]	; (8004b20 <pvPortMalloc+0x170>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d04a      	beq.n	8004af2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2208      	movs	r2, #8
 8004a62:	4413      	add	r3, r2
 8004a64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	1ad2      	subs	r2, r2, r3
 8004a76:	2308      	movs	r3, #8
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d91e      	bls.n	8004abc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4413      	add	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d009      	beq.n	8004aa4 <pvPortMalloc+0xf4>
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	e7fe      	b.n	8004aa2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	1ad2      	subs	r2, r2, r3
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ab6:	69b8      	ldr	r0, [r7, #24]
 8004ab8:	f000 f8f6 	bl	8004ca8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <pvPortMalloc+0x178>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <pvPortMalloc+0x178>)
 8004ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004aca:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <pvPortMalloc+0x178>)
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <pvPortMalloc+0x180>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d203      	bcs.n	8004ade <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ad6:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <pvPortMalloc+0x178>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a15      	ldr	r2, [pc, #84]	; (8004b30 <pvPortMalloc+0x180>)
 8004adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <pvPortMalloc+0x174>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004af2:	f001 f84b 	bl	8005b8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d009      	beq.n	8004b14 <pvPortMalloc+0x164>
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e7fe      	b.n	8004b12 <pvPortMalloc+0x162>
	return pvReturn;
 8004b14:	69fb      	ldr	r3, [r7, #28]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3728      	adds	r7, #40	; 0x28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20008514 	.word	0x20008514
 8004b24:	20008520 	.word	0x20008520
 8004b28:	20008518 	.word	0x20008518
 8004b2c:	2000850c 	.word	0x2000850c
 8004b30:	2000851c 	.word	0x2000851c

08004b34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d046      	beq.n	8004bd4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b46:	2308      	movs	r3, #8
 8004b48:	425b      	negs	r3, r3
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	4b20      	ldr	r3, [pc, #128]	; (8004bdc <vPortFree+0xa8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <vPortFree+0x42>
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	e7fe      	b.n	8004b74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d009      	beq.n	8004b92 <vPortFree+0x5e>
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	60bb      	str	r3, [r7, #8]
 8004b90:	e7fe      	b.n	8004b90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	4b11      	ldr	r3, [pc, #68]	; (8004bdc <vPortFree+0xa8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d019      	beq.n	8004bd4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d115      	bne.n	8004bd4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <vPortFree+0xa8>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	401a      	ands	r2, r3
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004bb8:	f000 ffda 	bl	8005b70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <vPortFree+0xac>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	4a06      	ldr	r2, [pc, #24]	; (8004be0 <vPortFree+0xac>)
 8004bc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bca:	6938      	ldr	r0, [r7, #16]
 8004bcc:	f000 f86c 	bl	8004ca8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004bd0:	f000 ffdc 	bl	8005b8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004bd4:	bf00      	nop
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20008520 	.word	0x20008520
 8004be0:	20008518 	.word	0x20008518

08004be4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bea:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8004bee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004bf0:	4b27      	ldr	r3, [pc, #156]	; (8004c90 <prvHeapInit+0xac>)
 8004bf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00c      	beq.n	8004c18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3307      	adds	r3, #7
 8004c02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0307 	bic.w	r3, r3, #7
 8004c0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	4a1f      	ldr	r2, [pc, #124]	; (8004c90 <prvHeapInit+0xac>)
 8004c14:	4413      	add	r3, r2
 8004c16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c1c:	4a1d      	ldr	r2, [pc, #116]	; (8004c94 <prvHeapInit+0xb0>)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c22:	4b1c      	ldr	r3, [pc, #112]	; (8004c94 <prvHeapInit+0xb0>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c30:	2208      	movs	r2, #8
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	1a9b      	subs	r3, r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0307 	bic.w	r3, r3, #7
 8004c3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4a15      	ldr	r2, [pc, #84]	; (8004c98 <prvHeapInit+0xb4>)
 8004c44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c46:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <prvHeapInit+0xb4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c4e:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <prvHeapInit+0xb4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	1ad2      	subs	r2, r2, r3
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c64:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <prvHeapInit+0xb4>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	4a0a      	ldr	r2, [pc, #40]	; (8004c9c <prvHeapInit+0xb8>)
 8004c72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	4a09      	ldr	r2, [pc, #36]	; (8004ca0 <prvHeapInit+0xbc>)
 8004c7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c7c:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <prvHeapInit+0xc0>)
 8004c7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c82:	601a      	str	r2, [r3, #0]
}
 8004c84:	bf00      	nop
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	20000d0c 	.word	0x20000d0c
 8004c94:	2000850c 	.word	0x2000850c
 8004c98:	20008514 	.word	0x20008514
 8004c9c:	2000851c 	.word	0x2000851c
 8004ca0:	20008518 	.word	0x20008518
 8004ca4:	20008520 	.word	0x20008520

08004ca8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004cb0:	4b28      	ldr	r3, [pc, #160]	; (8004d54 <prvInsertBlockIntoFreeList+0xac>)
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	e002      	b.n	8004cbc <prvInsertBlockIntoFreeList+0x14>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d3f7      	bcc.n	8004cb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	441a      	add	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d108      	bne.n	8004cea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	441a      	add	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	441a      	add	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d118      	bne.n	8004d30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4b15      	ldr	r3, [pc, #84]	; (8004d58 <prvInsertBlockIntoFreeList+0xb0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d00d      	beq.n	8004d26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e008      	b.n	8004d38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d26:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <prvInsertBlockIntoFreeList+0xb0>)
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e003      	b.n	8004d38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d002      	beq.n	8004d46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d46:	bf00      	nop
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	2000850c 	.word	0x2000850c
 8004d58:	20008514 	.word	0x20008514

08004d5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d109      	bne.n	8004d84 <xQueueGenericReset+0x28>
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	e7fe      	b.n	8004d82 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004d84:	f7ff fcfa 	bl	800477c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d90:	68f9      	ldr	r1, [r7, #12]
 8004d92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	441a      	add	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db4:	3b01      	subs	r3, #1
 8004db6:	68f9      	ldr	r1, [r7, #12]
 8004db8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004dba:	fb01 f303 	mul.w	r3, r1, r3
 8004dbe:	441a      	add	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	22ff      	movs	r2, #255	; 0xff
 8004dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	22ff      	movs	r2, #255	; 0xff
 8004dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d114      	bne.n	8004e04 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01a      	beq.n	8004e18 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3310      	adds	r3, #16
 8004de6:	4618      	mov	r0, r3
 8004de8:	f001 f8de 	bl	8005fa8 <xTaskRemoveFromEventList>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d012      	beq.n	8004e18 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004df2:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <xQueueGenericReset+0xcc>)
 8004df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	e009      	b.n	8004e18 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	3310      	adds	r3, #16
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff fadd 	bl	80043c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3324      	adds	r3, #36	; 0x24
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fad8 	bl	80043c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e18:	f7ff fcde 	bl	80047d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e1c:	2301      	movs	r3, #1
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08e      	sub	sp, #56	; 0x38
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d109      	bne.n	8004e54 <xQueueGenericCreateStatic+0x28>
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e52:	e7fe      	b.n	8004e52 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <xQueueGenericCreateStatic+0x42>
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e6c:	e7fe      	b.n	8004e6c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <xQueueGenericCreateStatic+0x4e>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <xQueueGenericCreateStatic+0x52>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <xQueueGenericCreateStatic+0x54>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d109      	bne.n	8004e98 <xQueueGenericCreateStatic+0x6c>
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	623b      	str	r3, [r7, #32]
 8004e96:	e7fe      	b.n	8004e96 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d102      	bne.n	8004ea4 <xQueueGenericCreateStatic+0x78>
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <xQueueGenericCreateStatic+0x7c>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <xQueueGenericCreateStatic+0x7e>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d109      	bne.n	8004ec2 <xQueueGenericCreateStatic+0x96>
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	61fb      	str	r3, [r7, #28]
 8004ec0:	e7fe      	b.n	8004ec0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ec2:	2350      	movs	r3, #80	; 0x50
 8004ec4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b50      	cmp	r3, #80	; 0x50
 8004eca:	d009      	beq.n	8004ee0 <xQueueGenericCreateStatic+0xb4>
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	e7fe      	b.n	8004ede <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ee0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00d      	beq.n	8004f08 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ef4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	4613      	mov	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 f805 	bl	8004f12 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3730      	adds	r7, #48	; 0x30
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
 8004f1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d103      	bne.n	8004f2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	e002      	b.n	8004f34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f40:	2101      	movs	r1, #1
 8004f42:	69b8      	ldr	r0, [r7, #24]
 8004f44:	f7ff ff0a 	bl	8004d5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	78fa      	ldrb	r2, [r7, #3]
 8004f4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08e      	sub	sp, #56	; 0x38
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f66:	2300      	movs	r3, #0
 8004f68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <xQueueGenericSend+0x30>
 8004f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f86:	e7fe      	b.n	8004f86 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <xQueueGenericSend+0x3e>
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <xQueueGenericSend+0x42>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <xQueueGenericSend+0x44>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d109      	bne.n	8004fb4 <xQueueGenericSend+0x5c>
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb2:	e7fe      	b.n	8004fb2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d103      	bne.n	8004fc2 <xQueueGenericSend+0x6a>
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <xQueueGenericSend+0x6e>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <xQueueGenericSend+0x70>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d109      	bne.n	8004fe0 <xQueueGenericSend+0x88>
 8004fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	623b      	str	r3, [r7, #32]
 8004fde:	e7fe      	b.n	8004fde <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fe0:	f001 f998 	bl	8006314 <xTaskGetSchedulerState>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d102      	bne.n	8004ff0 <xQueueGenericSend+0x98>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <xQueueGenericSend+0x9c>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <xQueueGenericSend+0x9e>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <xQueueGenericSend+0xb6>
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	e7fe      	b.n	800500c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800500e:	f7ff fbb5 	bl	800477c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501a:	429a      	cmp	r2, r3
 800501c:	d302      	bcc.n	8005024 <xQueueGenericSend+0xcc>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d129      	bne.n	8005078 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800502a:	f000 f9ff 	bl	800542c <prvCopyDataToQueue>
 800502e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	2b00      	cmp	r3, #0
 8005036:	d010      	beq.n	800505a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	3324      	adds	r3, #36	; 0x24
 800503c:	4618      	mov	r0, r3
 800503e:	f000 ffb3 	bl	8005fa8 <xTaskRemoveFromEventList>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d013      	beq.n	8005070 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005048:	4b3f      	ldr	r3, [pc, #252]	; (8005148 <xQueueGenericSend+0x1f0>)
 800504a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	e00a      	b.n	8005070 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005060:	4b39      	ldr	r3, [pc, #228]	; (8005148 <xQueueGenericSend+0x1f0>)
 8005062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005070:	f7ff fbb2 	bl	80047d8 <vPortExitCritical>
				return pdPASS;
 8005074:	2301      	movs	r3, #1
 8005076:	e063      	b.n	8005140 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d103      	bne.n	8005086 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800507e:	f7ff fbab 	bl	80047d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005082:	2300      	movs	r3, #0
 8005084:	e05c      	b.n	8005140 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800508c:	f107 0314 	add.w	r3, r7, #20
 8005090:	4618      	mov	r0, r3
 8005092:	f000 ffeb 	bl	800606c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005096:	2301      	movs	r3, #1
 8005098:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800509a:	f7ff fb9d 	bl	80047d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800509e:	f000 fd67 	bl	8005b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050a2:	f7ff fb6b 	bl	800477c <vPortEnterCritical>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050ac:	b25b      	sxtb	r3, r3
 80050ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b2:	d103      	bne.n	80050bc <xQueueGenericSend+0x164>
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050c2:	b25b      	sxtb	r3, r3
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c8:	d103      	bne.n	80050d2 <xQueueGenericSend+0x17a>
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050d2:	f7ff fb81 	bl	80047d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050d6:	1d3a      	adds	r2, r7, #4
 80050d8:	f107 0314 	add.w	r3, r7, #20
 80050dc:	4611      	mov	r1, r2
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 ffda 	bl	8006098 <xTaskCheckForTimeOut>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d124      	bne.n	8005134 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ec:	f000 fa96 	bl	800561c <prvIsQueueFull>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d018      	beq.n	8005128 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	3310      	adds	r3, #16
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	4611      	mov	r1, r2
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 ff04 	bl	8005f0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005106:	f000 fa21 	bl	800554c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800510a:	f000 fd3f 	bl	8005b8c <xTaskResumeAll>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	f47f af7c 	bne.w	800500e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005116:	4b0c      	ldr	r3, [pc, #48]	; (8005148 <xQueueGenericSend+0x1f0>)
 8005118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	e772      	b.n	800500e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800512a:	f000 fa0f 	bl	800554c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800512e:	f000 fd2d 	bl	8005b8c <xTaskResumeAll>
 8005132:	e76c      	b.n	800500e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005136:	f000 fa09 	bl	800554c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800513a:	f000 fd27 	bl	8005b8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800513e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005140:	4618      	mov	r0, r3
 8005142:	3738      	adds	r7, #56	; 0x38
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08e      	sub	sp, #56	; 0x38
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	2b00      	cmp	r3, #0
 8005162:	d109      	bne.n	8005178 <xQueueGenericSendFromISR+0x2c>
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
 8005176:	e7fe      	b.n	8005176 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d103      	bne.n	8005186 <xQueueGenericSendFromISR+0x3a>
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <xQueueGenericSendFromISR+0x3e>
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <xQueueGenericSendFromISR+0x40>
 800518a:	2300      	movs	r3, #0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d109      	bne.n	80051a4 <xQueueGenericSendFromISR+0x58>
 8005190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	623b      	str	r3, [r7, #32]
 80051a2:	e7fe      	b.n	80051a2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d103      	bne.n	80051b2 <xQueueGenericSendFromISR+0x66>
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d101      	bne.n	80051b6 <xQueueGenericSendFromISR+0x6a>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <xQueueGenericSendFromISR+0x6c>
 80051b6:	2300      	movs	r3, #0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d109      	bne.n	80051d0 <xQueueGenericSendFromISR+0x84>
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	e7fe      	b.n	80051ce <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051d0:	f7ff fbb0 	bl	8004934 <vPortValidateInterruptPriority>
	__asm volatile
 80051d4:	f3ef 8211 	mrs	r2, BASEPRI
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	61ba      	str	r2, [r7, #24]
 80051ea:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80051ec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d302      	bcc.n	8005202 <xQueueGenericSendFromISR+0xb6>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d12c      	bne.n	800525c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005208:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005212:	f000 f90b 	bl	800542c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005216:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521e:	d112      	bne.n	8005246 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	2b00      	cmp	r3, #0
 8005226:	d016      	beq.n	8005256 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	3324      	adds	r3, #36	; 0x24
 800522c:	4618      	mov	r0, r3
 800522e:	f000 febb 	bl	8005fa8 <xTaskRemoveFromEventList>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00e      	beq.n	8005256 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00b      	beq.n	8005256 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	e007      	b.n	8005256 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005246:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800524a:	3301      	adds	r3, #1
 800524c:	b2db      	uxtb	r3, r3
 800524e:	b25a      	sxtb	r2, r3
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005256:	2301      	movs	r3, #1
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800525a:	e001      	b.n	8005260 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800525c:	2300      	movs	r3, #0
 800525e:	637b      	str	r3, [r7, #52]	; 0x34
 8005260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005262:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800526a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800526c:	4618      	mov	r0, r3
 800526e:	3738      	adds	r7, #56	; 0x38
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08c      	sub	sp, #48	; 0x30
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005280:	2300      	movs	r3, #0
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <xQueueReceive+0x2e>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	623b      	str	r3, [r7, #32]
 80052a0:	e7fe      	b.n	80052a0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d103      	bne.n	80052b0 <xQueueReceive+0x3c>
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <xQueueReceive+0x40>
 80052b0:	2301      	movs	r3, #1
 80052b2:	e000      	b.n	80052b6 <xQueueReceive+0x42>
 80052b4:	2300      	movs	r3, #0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <xQueueReceive+0x5a>
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	61fb      	str	r3, [r7, #28]
 80052cc:	e7fe      	b.n	80052cc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052ce:	f001 f821 	bl	8006314 <xTaskGetSchedulerState>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d102      	bne.n	80052de <xQueueReceive+0x6a>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <xQueueReceive+0x6e>
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <xQueueReceive+0x70>
 80052e2:	2300      	movs	r3, #0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d109      	bne.n	80052fc <xQueueReceive+0x88>
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	e7fe      	b.n	80052fa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052fc:	f7ff fa3e 	bl	800477c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01f      	beq.n	800534c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005310:	f000 f8f6 	bl	8005500 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	1e5a      	subs	r2, r3, #1
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00f      	beq.n	8005344 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	3310      	adds	r3, #16
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fe3d 	bl	8005fa8 <xTaskRemoveFromEventList>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d007      	beq.n	8005344 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005334:	4b3c      	ldr	r3, [pc, #240]	; (8005428 <xQueueReceive+0x1b4>)
 8005336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005344:	f7ff fa48 	bl	80047d8 <vPortExitCritical>
				return pdPASS;
 8005348:	2301      	movs	r3, #1
 800534a:	e069      	b.n	8005420 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005352:	f7ff fa41 	bl	80047d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005356:	2300      	movs	r3, #0
 8005358:	e062      	b.n	8005420 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800535a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005360:	f107 0310 	add.w	r3, r7, #16
 8005364:	4618      	mov	r0, r3
 8005366:	f000 fe81 	bl	800606c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800536a:	2301      	movs	r3, #1
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800536e:	f7ff fa33 	bl	80047d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005372:	f000 fbfd 	bl	8005b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005376:	f7ff fa01 	bl	800477c <vPortEnterCritical>
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005380:	b25b      	sxtb	r3, r3
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d103      	bne.n	8005390 <xQueueReceive+0x11c>
 8005388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005396:	b25b      	sxtb	r3, r3
 8005398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539c:	d103      	bne.n	80053a6 <xQueueReceive+0x132>
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053a6:	f7ff fa17 	bl	80047d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053aa:	1d3a      	adds	r2, r7, #4
 80053ac:	f107 0310 	add.w	r3, r7, #16
 80053b0:	4611      	mov	r1, r2
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fe70 	bl	8006098 <xTaskCheckForTimeOut>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d123      	bne.n	8005406 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053c0:	f000 f916 	bl	80055f0 <prvIsQueueEmpty>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d017      	beq.n	80053fa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	3324      	adds	r3, #36	; 0x24
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	4611      	mov	r1, r2
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fd9a 	bl	8005f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053da:	f000 f8b7 	bl	800554c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053de:	f000 fbd5 	bl	8005b8c <xTaskResumeAll>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d189      	bne.n	80052fc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80053e8:	4b0f      	ldr	r3, [pc, #60]	; (8005428 <xQueueReceive+0x1b4>)
 80053ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	e780      	b.n	80052fc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053fc:	f000 f8a6 	bl	800554c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005400:	f000 fbc4 	bl	8005b8c <xTaskResumeAll>
 8005404:	e77a      	b.n	80052fc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005408:	f000 f8a0 	bl	800554c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800540c:	f000 fbbe 	bl	8005b8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005412:	f000 f8ed 	bl	80055f0 <prvIsQueueEmpty>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	f43f af6f 	beq.w	80052fc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800541e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005420:	4618      	mov	r0, r3
 8005422:	3730      	adds	r7, #48	; 0x30
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10d      	bne.n	8005466 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d14d      	bne.n	80054ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 ff7a 	bl	8006350 <xTaskPriorityDisinherit>
 800545c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	609a      	str	r2, [r3, #8]
 8005464:	e043      	b.n	80054ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d119      	bne.n	80054a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6858      	ldr	r0, [r3, #4]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	461a      	mov	r2, r3
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	f003 fd45 	bl	8008f06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	441a      	add	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	429a      	cmp	r2, r3
 8005494:	d32b      	bcc.n	80054ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	605a      	str	r2, [r3, #4]
 800549e:	e026      	b.n	80054ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	68d8      	ldr	r0, [r3, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	461a      	mov	r2, r3
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	f003 fd2b 	bl	8008f06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	425b      	negs	r3, r3
 80054ba:	441a      	add	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d207      	bcs.n	80054dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d4:	425b      	negs	r3, r3
 80054d6:	441a      	add	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d105      	bne.n	80054ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054f6:	697b      	ldr	r3, [r7, #20]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d018      	beq.n	8005544 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	441a      	add	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	429a      	cmp	r2, r3
 800552a:	d303      	bcc.n	8005534 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68d9      	ldr	r1, [r3, #12]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553c:	461a      	mov	r2, r3
 800553e:	6838      	ldr	r0, [r7, #0]
 8005540:	f003 fce1 	bl	8008f06 <memcpy>
	}
}
 8005544:	bf00      	nop
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005554:	f7ff f912 	bl	800477c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800555e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005560:	e011      	b.n	8005586 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	2b00      	cmp	r3, #0
 8005568:	d012      	beq.n	8005590 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3324      	adds	r3, #36	; 0x24
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fd1a 	bl	8005fa8 <xTaskRemoveFromEventList>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800557a:	f000 fded 	bl	8006158 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	3b01      	subs	r3, #1
 8005582:	b2db      	uxtb	r3, r3
 8005584:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800558a:	2b00      	cmp	r3, #0
 800558c:	dce9      	bgt.n	8005562 <prvUnlockQueue+0x16>
 800558e:	e000      	b.n	8005592 <prvUnlockQueue+0x46>
					break;
 8005590:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	22ff      	movs	r2, #255	; 0xff
 8005596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800559a:	f7ff f91d 	bl	80047d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800559e:	f7ff f8ed 	bl	800477c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055aa:	e011      	b.n	80055d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d012      	beq.n	80055da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3310      	adds	r3, #16
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fcf5 	bl	8005fa8 <xTaskRemoveFromEventList>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055c4:	f000 fdc8 	bl	8006158 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055c8:	7bbb      	ldrb	r3, [r7, #14]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	dce9      	bgt.n	80055ac <prvUnlockQueue+0x60>
 80055d8:	e000      	b.n	80055dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	22ff      	movs	r2, #255	; 0xff
 80055e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80055e4:	f7ff f8f8 	bl	80047d8 <vPortExitCritical>
}
 80055e8:	bf00      	nop
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055f8:	f7ff f8c0 	bl	800477c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005604:	2301      	movs	r3, #1
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	e001      	b.n	800560e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800560e:	f7ff f8e3 	bl	80047d8 <vPortExitCritical>

	return xReturn;
 8005612:	68fb      	ldr	r3, [r7, #12]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005624:	f7ff f8aa 	bl	800477c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005630:	429a      	cmp	r2, r3
 8005632:	d102      	bne.n	800563a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005634:	2301      	movs	r3, #1
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	e001      	b.n	800563e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800563e:	f7ff f8cb 	bl	80047d8 <vPortExitCritical>

	return xReturn;
 8005642:	68fb      	ldr	r3, [r7, #12]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	e014      	b.n	8005686 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800565c:	4a0e      	ldr	r2, [pc, #56]	; (8005698 <vQueueAddToRegistry+0x4c>)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005668:	490b      	ldr	r1, [pc, #44]	; (8005698 <vQueueAddToRegistry+0x4c>)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005672:	4a09      	ldr	r2, [pc, #36]	; (8005698 <vQueueAddToRegistry+0x4c>)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	4413      	add	r3, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800567e:	e005      	b.n	800568c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3301      	adds	r3, #1
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b07      	cmp	r3, #7
 800568a:	d9e7      	bls.n	800565c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800568c:	bf00      	nop
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	2001476c 	.word	0x2001476c

0800569c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056ac:	f7ff f866 	bl	800477c <vPortEnterCritical>
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056b6:	b25b      	sxtb	r3, r3
 80056b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056bc:	d103      	bne.n	80056c6 <vQueueWaitForMessageRestricted+0x2a>
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056cc:	b25b      	sxtb	r3, r3
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d103      	bne.n	80056dc <vQueueWaitForMessageRestricted+0x40>
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056dc:	f7ff f87c 	bl	80047d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d106      	bne.n	80056f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	3324      	adds	r3, #36	; 0x24
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fc2f 	bl	8005f54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80056f6:	6978      	ldr	r0, [r7, #20]
 80056f8:	f7ff ff28 	bl	800554c <prvUnlockQueue>
	}
 80056fc:	bf00      	nop
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005704:	b580      	push	{r7, lr}
 8005706:	b08e      	sub	sp, #56	; 0x38
 8005708:	af04      	add	r7, sp, #16
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005714:	2b00      	cmp	r3, #0
 8005716:	d109      	bne.n	800572c <xTaskCreateStatic+0x28>
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	623b      	str	r3, [r7, #32]
 800572a:	e7fe      	b.n	800572a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <xTaskCreateStatic+0x42>
 8005732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	61fb      	str	r3, [r7, #28]
 8005744:	e7fe      	b.n	8005744 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005746:	235c      	movs	r3, #92	; 0x5c
 8005748:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2b5c      	cmp	r3, #92	; 0x5c
 800574e:	d009      	beq.n	8005764 <xTaskCreateStatic+0x60>
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	e7fe      	b.n	8005762 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005764:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01e      	beq.n	80057aa <xTaskCreateStatic+0xa6>
 800576c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576e:	2b00      	cmp	r3, #0
 8005770:	d01b      	beq.n	80057aa <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800577a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	2202      	movs	r2, #2
 8005780:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005784:	2300      	movs	r3, #0
 8005786:	9303      	str	r3, [sp, #12]
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	9302      	str	r3, [sp, #8]
 800578c:	f107 0314 	add.w	r3, r7, #20
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f850 	bl	8005842 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057a4:	f000 f8dc 	bl	8005960 <prvAddNewTaskToReadyList>
 80057a8:	e001      	b.n	80057ae <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057ae:	697b      	ldr	r3, [r7, #20]
	}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3728      	adds	r7, #40	; 0x28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08c      	sub	sp, #48	; 0x30
 80057bc:	af04      	add	r7, sp, #16
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	603b      	str	r3, [r7, #0]
 80057c4:	4613      	mov	r3, r2
 80057c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057c8:	88fb      	ldrh	r3, [r7, #6]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff f8ef 	bl	80049b0 <pvPortMalloc>
 80057d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00e      	beq.n	80057f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057da:	205c      	movs	r0, #92	; 0x5c
 80057dc:	f7ff f8e8 	bl	80049b0 <pvPortMalloc>
 80057e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	631a      	str	r2, [r3, #48]	; 0x30
 80057ee:	e005      	b.n	80057fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057f0:	6978      	ldr	r0, [r7, #20]
 80057f2:	f7ff f99f 	bl	8004b34 <vPortFree>
 80057f6:	e001      	b.n	80057fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057f8:	2300      	movs	r3, #0
 80057fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d017      	beq.n	8005832 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800580a:	88fa      	ldrh	r2, [r7, #6]
 800580c:	2300      	movs	r3, #0
 800580e:	9303      	str	r3, [sp, #12]
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	9302      	str	r3, [sp, #8]
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f80e 	bl	8005842 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005826:	69f8      	ldr	r0, [r7, #28]
 8005828:	f000 f89a 	bl	8005960 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800582c:	2301      	movs	r3, #1
 800582e:	61bb      	str	r3, [r7, #24]
 8005830:	e002      	b.n	8005838 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005832:	f04f 33ff 	mov.w	r3, #4294967295
 8005836:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005838:	69bb      	ldr	r3, [r7, #24]
	}
 800583a:	4618      	mov	r0, r3
 800583c:	3720      	adds	r7, #32
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b088      	sub	sp, #32
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	607a      	str	r2, [r7, #4]
 800584e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	461a      	mov	r2, r3
 800585a:	21a5      	movs	r1, #165	; 0xa5
 800585c:	f003 fb5e 	bl	8008f1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800586a:	3b01      	subs	r3, #1
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	f023 0307 	bic.w	r3, r3, #7
 8005878:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	2b00      	cmp	r3, #0
 8005882:	d009      	beq.n	8005898 <prvInitialiseNewTask+0x56>
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	e7fe      	b.n	8005896 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d01f      	beq.n	80058de <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800589e:	2300      	movs	r3, #0
 80058a0:	61fb      	str	r3, [r7, #28]
 80058a2:	e012      	b.n	80058ca <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	4413      	add	r3, r2
 80058aa:	7819      	ldrb	r1, [r3, #0]
 80058ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	4413      	add	r3, r2
 80058b2:	3334      	adds	r3, #52	; 0x34
 80058b4:	460a      	mov	r2, r1
 80058b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	4413      	add	r3, r2
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d006      	beq.n	80058d2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	3301      	adds	r3, #1
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	2b0f      	cmp	r3, #15
 80058ce:	d9e9      	bls.n	80058a4 <prvInitialiseNewTask+0x62>
 80058d0:	e000      	b.n	80058d4 <prvInitialiseNewTask+0x92>
			{
				break;
 80058d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058dc:	e003      	b.n	80058e6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e8:	2b37      	cmp	r3, #55	; 0x37
 80058ea:	d901      	bls.n	80058f0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058ec:	2337      	movs	r3, #55	; 0x37
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	2200      	movs	r2, #0
 8005900:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	3304      	adds	r3, #4
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe fd7e 	bl	8004408 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	3318      	adds	r3, #24
 8005910:	4618      	mov	r0, r3
 8005912:	f7fe fd79 	bl	8004408 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800591a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800592a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	2200      	movs	r2, #0
 8005930:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	68f9      	ldr	r1, [r7, #12]
 800593e:	69b8      	ldr	r0, [r7, #24]
 8005940:	f7fe fdf6 	bl	8004530 <pxPortInitialiseStack>
 8005944:	4602      	mov	r2, r0
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005956:	bf00      	nop
 8005958:	3720      	adds	r7, #32
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005968:	f7fe ff08 	bl	800477c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800596c:	4b2d      	ldr	r3, [pc, #180]	; (8005a24 <prvAddNewTaskToReadyList+0xc4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3301      	adds	r3, #1
 8005972:	4a2c      	ldr	r2, [pc, #176]	; (8005a24 <prvAddNewTaskToReadyList+0xc4>)
 8005974:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005976:	4b2c      	ldr	r3, [pc, #176]	; (8005a28 <prvAddNewTaskToReadyList+0xc8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d109      	bne.n	8005992 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800597e:	4a2a      	ldr	r2, [pc, #168]	; (8005a28 <prvAddNewTaskToReadyList+0xc8>)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005984:	4b27      	ldr	r3, [pc, #156]	; (8005a24 <prvAddNewTaskToReadyList+0xc4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d110      	bne.n	80059ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800598c:	f000 fc08 	bl	80061a0 <prvInitialiseTaskLists>
 8005990:	e00d      	b.n	80059ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005992:	4b26      	ldr	r3, [pc, #152]	; (8005a2c <prvAddNewTaskToReadyList+0xcc>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d109      	bne.n	80059ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800599a:	4b23      	ldr	r3, [pc, #140]	; (8005a28 <prvAddNewTaskToReadyList+0xc8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d802      	bhi.n	80059ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059a8:	4a1f      	ldr	r2, [pc, #124]	; (8005a28 <prvAddNewTaskToReadyList+0xc8>)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059ae:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <prvAddNewTaskToReadyList+0xd0>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3301      	adds	r3, #1
 80059b4:	4a1e      	ldr	r2, [pc, #120]	; (8005a30 <prvAddNewTaskToReadyList+0xd0>)
 80059b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80059b8:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <prvAddNewTaskToReadyList+0xd0>)
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c4:	4b1b      	ldr	r3, [pc, #108]	; (8005a34 <prvAddNewTaskToReadyList+0xd4>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d903      	bls.n	80059d4 <prvAddNewTaskToReadyList+0x74>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	4a18      	ldr	r2, [pc, #96]	; (8005a34 <prvAddNewTaskToReadyList+0xd4>)
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4a15      	ldr	r2, [pc, #84]	; (8005a38 <prvAddNewTaskToReadyList+0xd8>)
 80059e2:	441a      	add	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3304      	adds	r3, #4
 80059e8:	4619      	mov	r1, r3
 80059ea:	4610      	mov	r0, r2
 80059ec:	f7fe fd19 	bl	8004422 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059f0:	f7fe fef2 	bl	80047d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059f4:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <prvAddNewTaskToReadyList+0xcc>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00e      	beq.n	8005a1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059fc:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <prvAddNewTaskToReadyList+0xc8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d207      	bcs.n	8005a1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <prvAddNewTaskToReadyList+0xdc>)
 8005a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	200089f8 	.word	0x200089f8
 8005a28:	20008524 	.word	0x20008524
 8005a2c:	20008a04 	.word	0x20008a04
 8005a30:	20008a14 	.word	0x20008a14
 8005a34:	20008a00 	.word	0x20008a00
 8005a38:	20008528 	.word	0x20008528
 8005a3c:	e000ed04 	.word	0xe000ed04

08005a40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d016      	beq.n	8005a80 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a52:	4b13      	ldr	r3, [pc, #76]	; (8005aa0 <vTaskDelay+0x60>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d009      	beq.n	8005a6e <vTaskDelay+0x2e>
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	60bb      	str	r3, [r7, #8]
 8005a6c:	e7fe      	b.n	8005a6c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005a6e:	f000 f87f 	bl	8005b70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a72:	2100      	movs	r1, #0
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fcd7 	bl	8006428 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a7a:	f000 f887 	bl	8005b8c <xTaskResumeAll>
 8005a7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d107      	bne.n	8005a96 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005a86:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <vTaskDelay+0x64>)
 8005a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a96:	bf00      	nop
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20008a20 	.word	0x20008a20
 8005aa4:	e000ed04 	.word	0xe000ed04

08005aa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08a      	sub	sp, #40	; 0x28
 8005aac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ab6:	463a      	mov	r2, r7
 8005ab8:	1d39      	adds	r1, r7, #4
 8005aba:	f107 0308 	add.w	r3, r7, #8
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fe fc4e 	bl	8004360 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	9202      	str	r2, [sp, #8]
 8005acc:	9301      	str	r3, [sp, #4]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	460a      	mov	r2, r1
 8005ad6:	4920      	ldr	r1, [pc, #128]	; (8005b58 <vTaskStartScheduler+0xb0>)
 8005ad8:	4820      	ldr	r0, [pc, #128]	; (8005b5c <vTaskStartScheduler+0xb4>)
 8005ada:	f7ff fe13 	bl	8005704 <xTaskCreateStatic>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	4b1f      	ldr	r3, [pc, #124]	; (8005b60 <vTaskStartScheduler+0xb8>)
 8005ae2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ae4:	4b1e      	ldr	r3, [pc, #120]	; (8005b60 <vTaskStartScheduler+0xb8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005aec:	2301      	movs	r3, #1
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	e001      	b.n	8005af6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d102      	bne.n	8005b02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005afc:	f000 fce8 	bl	80064d0 <xTimerCreateTimerTask>
 8005b00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d115      	bne.n	8005b34 <vTaskStartScheduler+0x8c>
 8005b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b1a:	4b12      	ldr	r3, [pc, #72]	; (8005b64 <vTaskStartScheduler+0xbc>)
 8005b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b22:	4b11      	ldr	r3, [pc, #68]	; (8005b68 <vTaskStartScheduler+0xc0>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b28:	4b10      	ldr	r3, [pc, #64]	; (8005b6c <vTaskStartScheduler+0xc4>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b2e:	f7fe fd87 	bl	8004640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b32:	e00d      	b.n	8005b50 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3a:	d109      	bne.n	8005b50 <vTaskStartScheduler+0xa8>
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	e7fe      	b.n	8005b4e <vTaskStartScheduler+0xa6>
}
 8005b50:	bf00      	nop
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	0800ae3c 	.word	0x0800ae3c
 8005b5c:	08006171 	.word	0x08006171
 8005b60:	20008a1c 	.word	0x20008a1c
 8005b64:	20008a18 	.word	0x20008a18
 8005b68:	20008a04 	.word	0x20008a04
 8005b6c:	200089fc 	.word	0x200089fc

08005b70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005b74:	4b04      	ldr	r3, [pc, #16]	; (8005b88 <vTaskSuspendAll+0x18>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	4a03      	ldr	r2, [pc, #12]	; (8005b88 <vTaskSuspendAll+0x18>)
 8005b7c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005b7e:	bf00      	nop
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	20008a20 	.word	0x20008a20

08005b8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b9a:	4b41      	ldr	r3, [pc, #260]	; (8005ca0 <xTaskResumeAll+0x114>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <xTaskResumeAll+0x2a>
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	e7fe      	b.n	8005bb4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bb6:	f7fe fde1 	bl	800477c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bba:	4b39      	ldr	r3, [pc, #228]	; (8005ca0 <xTaskResumeAll+0x114>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	4a37      	ldr	r2, [pc, #220]	; (8005ca0 <xTaskResumeAll+0x114>)
 8005bc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bc4:	4b36      	ldr	r3, [pc, #216]	; (8005ca0 <xTaskResumeAll+0x114>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d162      	bne.n	8005c92 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bcc:	4b35      	ldr	r3, [pc, #212]	; (8005ca4 <xTaskResumeAll+0x118>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d05e      	beq.n	8005c92 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bd4:	e02f      	b.n	8005c36 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd6:	4b34      	ldr	r3, [pc, #208]	; (8005ca8 <xTaskResumeAll+0x11c>)
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3318      	adds	r3, #24
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fe fc7a 	bl	80044dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3304      	adds	r3, #4
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fe fc75 	bl	80044dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf6:	4b2d      	ldr	r3, [pc, #180]	; (8005cac <xTaskResumeAll+0x120>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d903      	bls.n	8005c06 <xTaskResumeAll+0x7a>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c02:	4a2a      	ldr	r2, [pc, #168]	; (8005cac <xTaskResumeAll+0x120>)
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4a27      	ldr	r2, [pc, #156]	; (8005cb0 <xTaskResumeAll+0x124>)
 8005c14:	441a      	add	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	f7fe fc00 	bl	8004422 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c26:	4b23      	ldr	r3, [pc, #140]	; (8005cb4 <xTaskResumeAll+0x128>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d302      	bcc.n	8005c36 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005c30:	4b21      	ldr	r3, [pc, #132]	; (8005cb8 <xTaskResumeAll+0x12c>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c36:	4b1c      	ldr	r3, [pc, #112]	; (8005ca8 <xTaskResumeAll+0x11c>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1cb      	bne.n	8005bd6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c44:	f000 fb46 	bl	80062d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005c48:	4b1c      	ldr	r3, [pc, #112]	; (8005cbc <xTaskResumeAll+0x130>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d010      	beq.n	8005c76 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c54:	f000 f846 	bl	8005ce4 <xTaskIncrementTick>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005c5e:	4b16      	ldr	r3, [pc, #88]	; (8005cb8 <xTaskResumeAll+0x12c>)
 8005c60:	2201      	movs	r2, #1
 8005c62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1f1      	bne.n	8005c54 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005c70:	4b12      	ldr	r3, [pc, #72]	; (8005cbc <xTaskResumeAll+0x130>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c76:	4b10      	ldr	r3, [pc, #64]	; (8005cb8 <xTaskResumeAll+0x12c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d009      	beq.n	8005c92 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c82:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <xTaskResumeAll+0x134>)
 8005c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c92:	f7fe fda1 	bl	80047d8 <vPortExitCritical>

	return xAlreadyYielded;
 8005c96:	68bb      	ldr	r3, [r7, #8]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20008a20 	.word	0x20008a20
 8005ca4:	200089f8 	.word	0x200089f8
 8005ca8:	200089b8 	.word	0x200089b8
 8005cac:	20008a00 	.word	0x20008a00
 8005cb0:	20008528 	.word	0x20008528
 8005cb4:	20008524 	.word	0x20008524
 8005cb8:	20008a0c 	.word	0x20008a0c
 8005cbc:	20008a08 	.word	0x20008a08
 8005cc0:	e000ed04 	.word	0xe000ed04

08005cc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005cca:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <xTaskGetTickCount+0x1c>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005cd0:	687b      	ldr	r3, [r7, #4]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	200089fc 	.word	0x200089fc

08005ce4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cee:	4b4e      	ldr	r3, [pc, #312]	; (8005e28 <xTaskIncrementTick+0x144>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f040 8088 	bne.w	8005e08 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cf8:	4b4c      	ldr	r3, [pc, #304]	; (8005e2c <xTaskIncrementTick+0x148>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d00:	4a4a      	ldr	r2, [pc, #296]	; (8005e2c <xTaskIncrementTick+0x148>)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d11f      	bne.n	8005d4c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d0c:	4b48      	ldr	r3, [pc, #288]	; (8005e30 <xTaskIncrementTick+0x14c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d009      	beq.n	8005d2a <xTaskIncrementTick+0x46>
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	603b      	str	r3, [r7, #0]
 8005d28:	e7fe      	b.n	8005d28 <xTaskIncrementTick+0x44>
 8005d2a:	4b41      	ldr	r3, [pc, #260]	; (8005e30 <xTaskIncrementTick+0x14c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	4b40      	ldr	r3, [pc, #256]	; (8005e34 <xTaskIncrementTick+0x150>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a3e      	ldr	r2, [pc, #248]	; (8005e30 <xTaskIncrementTick+0x14c>)
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	4a3e      	ldr	r2, [pc, #248]	; (8005e34 <xTaskIncrementTick+0x150>)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	4b3e      	ldr	r3, [pc, #248]	; (8005e38 <xTaskIncrementTick+0x154>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3301      	adds	r3, #1
 8005d44:	4a3c      	ldr	r2, [pc, #240]	; (8005e38 <xTaskIncrementTick+0x154>)
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	f000 fac4 	bl	80062d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d4c:	4b3b      	ldr	r3, [pc, #236]	; (8005e3c <xTaskIncrementTick+0x158>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d349      	bcc.n	8005dea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d56:	4b36      	ldr	r3, [pc, #216]	; (8005e30 <xTaskIncrementTick+0x14c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d104      	bne.n	8005d6a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d60:	4b36      	ldr	r3, [pc, #216]	; (8005e3c <xTaskIncrementTick+0x158>)
 8005d62:	f04f 32ff 	mov.w	r2, #4294967295
 8005d66:	601a      	str	r2, [r3, #0]
					break;
 8005d68:	e03f      	b.n	8005dea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d6a:	4b31      	ldr	r3, [pc, #196]	; (8005e30 <xTaskIncrementTick+0x14c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d203      	bcs.n	8005d8a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d82:	4a2e      	ldr	r2, [pc, #184]	; (8005e3c <xTaskIncrementTick+0x158>)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d88:	e02f      	b.n	8005dea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fe fba4 	bl	80044dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d004      	beq.n	8005da6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	3318      	adds	r3, #24
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fe fb9b 	bl	80044dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005daa:	4b25      	ldr	r3, [pc, #148]	; (8005e40 <xTaskIncrementTick+0x15c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d903      	bls.n	8005dba <xTaskIncrementTick+0xd6>
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db6:	4a22      	ldr	r2, [pc, #136]	; (8005e40 <xTaskIncrementTick+0x15c>)
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4a1f      	ldr	r2, [pc, #124]	; (8005e44 <xTaskIncrementTick+0x160>)
 8005dc8:	441a      	add	r2, r3
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	3304      	adds	r3, #4
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	f7fe fb26 	bl	8004422 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dda:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <xTaskIncrementTick+0x164>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d3b8      	bcc.n	8005d56 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005de4:	2301      	movs	r3, #1
 8005de6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005de8:	e7b5      	b.n	8005d56 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005dea:	4b17      	ldr	r3, [pc, #92]	; (8005e48 <xTaskIncrementTick+0x164>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df0:	4914      	ldr	r1, [pc, #80]	; (8005e44 <xTaskIncrementTick+0x160>)
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d907      	bls.n	8005e12 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005e02:	2301      	movs	r3, #1
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	e004      	b.n	8005e12 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e08:	4b10      	ldr	r3, [pc, #64]	; (8005e4c <xTaskIncrementTick+0x168>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	4a0f      	ldr	r2, [pc, #60]	; (8005e4c <xTaskIncrementTick+0x168>)
 8005e10:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005e12:	4b0f      	ldr	r3, [pc, #60]	; (8005e50 <xTaskIncrementTick+0x16c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005e1e:	697b      	ldr	r3, [r7, #20]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20008a20 	.word	0x20008a20
 8005e2c:	200089fc 	.word	0x200089fc
 8005e30:	200089b0 	.word	0x200089b0
 8005e34:	200089b4 	.word	0x200089b4
 8005e38:	20008a10 	.word	0x20008a10
 8005e3c:	20008a18 	.word	0x20008a18
 8005e40:	20008a00 	.word	0x20008a00
 8005e44:	20008528 	.word	0x20008528
 8005e48:	20008524 	.word	0x20008524
 8005e4c:	20008a08 	.word	0x20008a08
 8005e50:	20008a0c 	.word	0x20008a0c

08005e54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e5a:	4b27      	ldr	r3, [pc, #156]	; (8005ef8 <vTaskSwitchContext+0xa4>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e62:	4b26      	ldr	r3, [pc, #152]	; (8005efc <vTaskSwitchContext+0xa8>)
 8005e64:	2201      	movs	r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e68:	e040      	b.n	8005eec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005e6a:	4b24      	ldr	r3, [pc, #144]	; (8005efc <vTaskSwitchContext+0xa8>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e70:	4b23      	ldr	r3, [pc, #140]	; (8005f00 <vTaskSwitchContext+0xac>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	e00f      	b.n	8005e98 <vTaskSwitchContext+0x44>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <vTaskSwitchContext+0x3e>
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	607b      	str	r3, [r7, #4]
 8005e90:	e7fe      	b.n	8005e90 <vTaskSwitchContext+0x3c>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	491a      	ldr	r1, [pc, #104]	; (8005f04 <vTaskSwitchContext+0xb0>)
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0e5      	beq.n	8005e78 <vTaskSwitchContext+0x24>
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4a13      	ldr	r2, [pc, #76]	; (8005f04 <vTaskSwitchContext+0xb0>)
 8005eb8:	4413      	add	r3, r2
 8005eba:	60bb      	str	r3, [r7, #8]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	605a      	str	r2, [r3, #4]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	3308      	adds	r3, #8
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d104      	bne.n	8005edc <vTaskSwitchContext+0x88>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	605a      	str	r2, [r3, #4]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	4a09      	ldr	r2, [pc, #36]	; (8005f08 <vTaskSwitchContext+0xb4>)
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	4a06      	ldr	r2, [pc, #24]	; (8005f00 <vTaskSwitchContext+0xac>)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6013      	str	r3, [r2, #0]
}
 8005eec:	bf00      	nop
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	20008a20 	.word	0x20008a20
 8005efc:	20008a0c 	.word	0x20008a0c
 8005f00:	20008a00 	.word	0x20008a00
 8005f04:	20008528 	.word	0x20008528
 8005f08:	20008524 	.word	0x20008524

08005f0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d109      	bne.n	8005f30 <vTaskPlaceOnEventList+0x24>
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	e7fe      	b.n	8005f2e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f30:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <vTaskPlaceOnEventList+0x44>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3318      	adds	r3, #24
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7fe fa96 	bl	800446a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f3e:	2101      	movs	r1, #1
 8005f40:	6838      	ldr	r0, [r7, #0]
 8005f42:	f000 fa71 	bl	8006428 <prvAddCurrentTaskToDelayedList>
}
 8005f46:	bf00      	nop
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20008524 	.word	0x20008524

08005f54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d109      	bne.n	8005f7a <vTaskPlaceOnEventListRestricted+0x26>
 8005f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	e7fe      	b.n	8005f78 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f7a:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <vTaskPlaceOnEventListRestricted+0x50>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3318      	adds	r3, #24
 8005f80:	4619      	mov	r1, r3
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7fe fa4d 	bl	8004422 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	68b8      	ldr	r0, [r7, #8]
 8005f98:	f000 fa46 	bl	8006428 <prvAddCurrentTaskToDelayedList>
	}
 8005f9c:	bf00      	nop
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20008524 	.word	0x20008524

08005fa8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d109      	bne.n	8005fd2 <xTaskRemoveFromEventList+0x2a>
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e7fe      	b.n	8005fd0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	3318      	adds	r3, #24
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fe fa80 	bl	80044dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fdc:	4b1d      	ldr	r3, [pc, #116]	; (8006054 <xTaskRemoveFromEventList+0xac>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d11d      	bne.n	8006020 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fe fa77 	bl	80044dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff2:	4b19      	ldr	r3, [pc, #100]	; (8006058 <xTaskRemoveFromEventList+0xb0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d903      	bls.n	8006002 <xTaskRemoveFromEventList+0x5a>
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	4a16      	ldr	r2, [pc, #88]	; (8006058 <xTaskRemoveFromEventList+0xb0>)
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4a13      	ldr	r2, [pc, #76]	; (800605c <xTaskRemoveFromEventList+0xb4>)
 8006010:	441a      	add	r2, r3
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	3304      	adds	r3, #4
 8006016:	4619      	mov	r1, r3
 8006018:	4610      	mov	r0, r2
 800601a:	f7fe fa02 	bl	8004422 <vListInsertEnd>
 800601e:	e005      	b.n	800602c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	3318      	adds	r3, #24
 8006024:	4619      	mov	r1, r3
 8006026:	480e      	ldr	r0, [pc, #56]	; (8006060 <xTaskRemoveFromEventList+0xb8>)
 8006028:	f7fe f9fb 	bl	8004422 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006030:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <xTaskRemoveFromEventList+0xbc>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006036:	429a      	cmp	r2, r3
 8006038:	d905      	bls.n	8006046 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800603a:	2301      	movs	r3, #1
 800603c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800603e:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <xTaskRemoveFromEventList+0xc0>)
 8006040:	2201      	movs	r2, #1
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	e001      	b.n	800604a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006046:	2300      	movs	r3, #0
 8006048:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800604a:	697b      	ldr	r3, [r7, #20]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	20008a20 	.word	0x20008a20
 8006058:	20008a00 	.word	0x20008a00
 800605c:	20008528 	.word	0x20008528
 8006060:	200089b8 	.word	0x200089b8
 8006064:	20008524 	.word	0x20008524
 8006068:	20008a0c 	.word	0x20008a0c

0800606c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006074:	4b06      	ldr	r3, [pc, #24]	; (8006090 <vTaskInternalSetTimeOutState+0x24>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <vTaskInternalSetTimeOutState+0x28>)
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	605a      	str	r2, [r3, #4]
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	20008a10 	.word	0x20008a10
 8006094:	200089fc 	.word	0x200089fc

08006098 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d109      	bne.n	80060bc <xTaskCheckForTimeOut+0x24>
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	e7fe      	b.n	80060ba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <xTaskCheckForTimeOut+0x3e>
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e7fe      	b.n	80060d4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80060d6:	f7fe fb51 	bl	800477c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060da:	4b1d      	ldr	r3, [pc, #116]	; (8006150 <xTaskCheckForTimeOut+0xb8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f2:	d102      	bne.n	80060fa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	e023      	b.n	8006142 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b15      	ldr	r3, [pc, #84]	; (8006154 <xTaskCheckForTimeOut+0xbc>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	429a      	cmp	r2, r3
 8006104:	d007      	beq.n	8006116 <xTaskCheckForTimeOut+0x7e>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	429a      	cmp	r2, r3
 800610e:	d802      	bhi.n	8006116 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006110:	2301      	movs	r3, #1
 8006112:	61fb      	str	r3, [r7, #28]
 8006114:	e015      	b.n	8006142 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	429a      	cmp	r2, r3
 800611e:	d90b      	bls.n	8006138 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	1ad2      	subs	r2, r2, r3
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff ff9d 	bl	800606c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006132:	2300      	movs	r3, #0
 8006134:	61fb      	str	r3, [r7, #28]
 8006136:	e004      	b.n	8006142 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800613e:	2301      	movs	r3, #1
 8006140:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006142:	f7fe fb49 	bl	80047d8 <vPortExitCritical>

	return xReturn;
 8006146:	69fb      	ldr	r3, [r7, #28]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3720      	adds	r7, #32
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	200089fc 	.word	0x200089fc
 8006154:	20008a10 	.word	0x20008a10

08006158 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800615c:	4b03      	ldr	r3, [pc, #12]	; (800616c <vTaskMissedYield+0x14>)
 800615e:	2201      	movs	r2, #1
 8006160:	601a      	str	r2, [r3, #0]
}
 8006162:	bf00      	nop
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	20008a0c 	.word	0x20008a0c

08006170 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006178:	f000 f852 	bl	8006220 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800617c:	4b06      	ldr	r3, [pc, #24]	; (8006198 <prvIdleTask+0x28>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d9f9      	bls.n	8006178 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006184:	4b05      	ldr	r3, [pc, #20]	; (800619c <prvIdleTask+0x2c>)
 8006186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006194:	e7f0      	b.n	8006178 <prvIdleTask+0x8>
 8006196:	bf00      	nop
 8006198:	20008528 	.word	0x20008528
 800619c:	e000ed04 	.word	0xe000ed04

080061a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061a6:	2300      	movs	r3, #0
 80061a8:	607b      	str	r3, [r7, #4]
 80061aa:	e00c      	b.n	80061c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4a12      	ldr	r2, [pc, #72]	; (8006200 <prvInitialiseTaskLists+0x60>)
 80061b8:	4413      	add	r3, r2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe f904 	bl	80043c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3301      	adds	r3, #1
 80061c4:	607b      	str	r3, [r7, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b37      	cmp	r3, #55	; 0x37
 80061ca:	d9ef      	bls.n	80061ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061cc:	480d      	ldr	r0, [pc, #52]	; (8006204 <prvInitialiseTaskLists+0x64>)
 80061ce:	f7fe f8fb 	bl	80043c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061d2:	480d      	ldr	r0, [pc, #52]	; (8006208 <prvInitialiseTaskLists+0x68>)
 80061d4:	f7fe f8f8 	bl	80043c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061d8:	480c      	ldr	r0, [pc, #48]	; (800620c <prvInitialiseTaskLists+0x6c>)
 80061da:	f7fe f8f5 	bl	80043c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061de:	480c      	ldr	r0, [pc, #48]	; (8006210 <prvInitialiseTaskLists+0x70>)
 80061e0:	f7fe f8f2 	bl	80043c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061e4:	480b      	ldr	r0, [pc, #44]	; (8006214 <prvInitialiseTaskLists+0x74>)
 80061e6:	f7fe f8ef 	bl	80043c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061ea:	4b0b      	ldr	r3, [pc, #44]	; (8006218 <prvInitialiseTaskLists+0x78>)
 80061ec:	4a05      	ldr	r2, [pc, #20]	; (8006204 <prvInitialiseTaskLists+0x64>)
 80061ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061f0:	4b0a      	ldr	r3, [pc, #40]	; (800621c <prvInitialiseTaskLists+0x7c>)
 80061f2:	4a05      	ldr	r2, [pc, #20]	; (8006208 <prvInitialiseTaskLists+0x68>)
 80061f4:	601a      	str	r2, [r3, #0]
}
 80061f6:	bf00      	nop
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20008528 	.word	0x20008528
 8006204:	20008988 	.word	0x20008988
 8006208:	2000899c 	.word	0x2000899c
 800620c:	200089b8 	.word	0x200089b8
 8006210:	200089cc 	.word	0x200089cc
 8006214:	200089e4 	.word	0x200089e4
 8006218:	200089b0 	.word	0x200089b0
 800621c:	200089b4 	.word	0x200089b4

08006220 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006226:	e019      	b.n	800625c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006228:	f7fe faa8 	bl	800477c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800622c:	4b0f      	ldr	r3, [pc, #60]	; (800626c <prvCheckTasksWaitingTermination+0x4c>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3304      	adds	r3, #4
 8006238:	4618      	mov	r0, r3
 800623a:	f7fe f94f 	bl	80044dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800623e:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <prvCheckTasksWaitingTermination+0x50>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3b01      	subs	r3, #1
 8006244:	4a0a      	ldr	r2, [pc, #40]	; (8006270 <prvCheckTasksWaitingTermination+0x50>)
 8006246:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006248:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <prvCheckTasksWaitingTermination+0x54>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3b01      	subs	r3, #1
 800624e:	4a09      	ldr	r2, [pc, #36]	; (8006274 <prvCheckTasksWaitingTermination+0x54>)
 8006250:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006252:	f7fe fac1 	bl	80047d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f80e 	bl	8006278 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800625c:	4b05      	ldr	r3, [pc, #20]	; (8006274 <prvCheckTasksWaitingTermination+0x54>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e1      	bne.n	8006228 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006264:	bf00      	nop
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	200089cc 	.word	0x200089cc
 8006270:	200089f8 	.word	0x200089f8
 8006274:	200089e0 	.word	0x200089e0

08006278 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006286:	2b00      	cmp	r3, #0
 8006288:	d108      	bne.n	800629c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	4618      	mov	r0, r3
 8006290:	f7fe fc50 	bl	8004b34 <vPortFree>
				vPortFree( pxTCB );
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7fe fc4d 	bl	8004b34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800629a:	e017      	b.n	80062cc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d103      	bne.n	80062ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fe fc44 	bl	8004b34 <vPortFree>
	}
 80062ac:	e00e      	b.n	80062cc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d009      	beq.n	80062cc <prvDeleteTCB+0x54>
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	e7fe      	b.n	80062ca <prvDeleteTCB+0x52>
	}
 80062cc:	bf00      	nop
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062da:	4b0c      	ldr	r3, [pc, #48]	; (800630c <prvResetNextTaskUnblockTime+0x38>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062e4:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <prvResetNextTaskUnblockTime+0x3c>)
 80062e6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062ec:	e008      	b.n	8006300 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ee:	4b07      	ldr	r3, [pc, #28]	; (800630c <prvResetNextTaskUnblockTime+0x38>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	4a04      	ldr	r2, [pc, #16]	; (8006310 <prvResetNextTaskUnblockTime+0x3c>)
 80062fe:	6013      	str	r3, [r2, #0]
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	200089b0 	.word	0x200089b0
 8006310:	20008a18 	.word	0x20008a18

08006314 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800631a:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <xTaskGetSchedulerState+0x34>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006322:	2301      	movs	r3, #1
 8006324:	607b      	str	r3, [r7, #4]
 8006326:	e008      	b.n	800633a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006328:	4b08      	ldr	r3, [pc, #32]	; (800634c <xTaskGetSchedulerState+0x38>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d102      	bne.n	8006336 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006330:	2302      	movs	r3, #2
 8006332:	607b      	str	r3, [r7, #4]
 8006334:	e001      	b.n	800633a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006336:	2300      	movs	r3, #0
 8006338:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800633a:	687b      	ldr	r3, [r7, #4]
	}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	20008a04 	.word	0x20008a04
 800634c:	20008a20 	.word	0x20008a20

08006350 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d054      	beq.n	8006410 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006366:	4b2d      	ldr	r3, [pc, #180]	; (800641c <xTaskPriorityDisinherit+0xcc>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	429a      	cmp	r2, r3
 800636e:	d009      	beq.n	8006384 <xTaskPriorityDisinherit+0x34>
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	e7fe      	b.n	8006382 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006388:	2b00      	cmp	r3, #0
 800638a:	d109      	bne.n	80063a0 <xTaskPriorityDisinherit+0x50>
 800638c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	60bb      	str	r3, [r7, #8]
 800639e:	e7fe      	b.n	800639e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a4:	1e5a      	subs	r2, r3, #1
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d02c      	beq.n	8006410 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d128      	bne.n	8006410 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	3304      	adds	r3, #4
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fe f88a 	bl	80044dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e0:	4b0f      	ldr	r3, [pc, #60]	; (8006420 <xTaskPriorityDisinherit+0xd0>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d903      	bls.n	80063f0 <xTaskPriorityDisinherit+0xa0>
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	4a0c      	ldr	r2, [pc, #48]	; (8006420 <xTaskPriorityDisinherit+0xd0>)
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4a09      	ldr	r2, [pc, #36]	; (8006424 <xTaskPriorityDisinherit+0xd4>)
 80063fe:	441a      	add	r2, r3
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	3304      	adds	r3, #4
 8006404:	4619      	mov	r1, r3
 8006406:	4610      	mov	r0, r2
 8006408:	f7fe f80b 	bl	8004422 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800640c:	2301      	movs	r3, #1
 800640e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006410:	697b      	ldr	r3, [r7, #20]
	}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20008524 	.word	0x20008524
 8006420:	20008a00 	.word	0x20008a00
 8006424:	20008528 	.word	0x20008528

08006428 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006432:	4b21      	ldr	r3, [pc, #132]	; (80064b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006438:	4b20      	ldr	r3, [pc, #128]	; (80064bc <prvAddCurrentTaskToDelayedList+0x94>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3304      	adds	r3, #4
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe f84c 	bl	80044dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	d10a      	bne.n	8006462 <prvAddCurrentTaskToDelayedList+0x3a>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d007      	beq.n	8006462 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006452:	4b1a      	ldr	r3, [pc, #104]	; (80064bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3304      	adds	r3, #4
 8006458:	4619      	mov	r1, r3
 800645a:	4819      	ldr	r0, [pc, #100]	; (80064c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800645c:	f7fd ffe1 	bl	8004422 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006460:	e026      	b.n	80064b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4413      	add	r3, r2
 8006468:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800646a:	4b14      	ldr	r3, [pc, #80]	; (80064bc <prvAddCurrentTaskToDelayedList+0x94>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	429a      	cmp	r2, r3
 8006478:	d209      	bcs.n	800648e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800647a:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3304      	adds	r3, #4
 8006484:	4619      	mov	r1, r3
 8006486:	4610      	mov	r0, r2
 8006488:	f7fd ffef 	bl	800446a <vListInsert>
}
 800648c:	e010      	b.n	80064b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800648e:	4b0e      	ldr	r3, [pc, #56]	; (80064c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4b0a      	ldr	r3, [pc, #40]	; (80064bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3304      	adds	r3, #4
 8006498:	4619      	mov	r1, r3
 800649a:	4610      	mov	r0, r2
 800649c:	f7fd ffe5 	bl	800446a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80064a0:	4b0a      	ldr	r3, [pc, #40]	; (80064cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d202      	bcs.n	80064b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80064aa:	4a08      	ldr	r2, [pc, #32]	; (80064cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	6013      	str	r3, [r2, #0]
}
 80064b0:	bf00      	nop
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	200089fc 	.word	0x200089fc
 80064bc:	20008524 	.word	0x20008524
 80064c0:	200089e4 	.word	0x200089e4
 80064c4:	200089b4 	.word	0x200089b4
 80064c8:	200089b0 	.word	0x200089b0
 80064cc:	20008a18 	.word	0x20008a18

080064d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	; 0x28
 80064d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80064da:	f000 faff 	bl	8006adc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80064de:	4b1c      	ldr	r3, [pc, #112]	; (8006550 <xTimerCreateTimerTask+0x80>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d021      	beq.n	800652a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80064ee:	1d3a      	adds	r2, r7, #4
 80064f0:	f107 0108 	add.w	r1, r7, #8
 80064f4:	f107 030c 	add.w	r3, r7, #12
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fd ff4b 	bl	8004394 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	9202      	str	r2, [sp, #8]
 8006506:	9301      	str	r3, [sp, #4]
 8006508:	2302      	movs	r3, #2
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	2300      	movs	r3, #0
 800650e:	460a      	mov	r2, r1
 8006510:	4910      	ldr	r1, [pc, #64]	; (8006554 <xTimerCreateTimerTask+0x84>)
 8006512:	4811      	ldr	r0, [pc, #68]	; (8006558 <xTimerCreateTimerTask+0x88>)
 8006514:	f7ff f8f6 	bl	8005704 <xTaskCreateStatic>
 8006518:	4602      	mov	r2, r0
 800651a:	4b10      	ldr	r3, [pc, #64]	; (800655c <xTimerCreateTimerTask+0x8c>)
 800651c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800651e:	4b0f      	ldr	r3, [pc, #60]	; (800655c <xTimerCreateTimerTask+0x8c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006526:	2301      	movs	r3, #1
 8006528:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d109      	bne.n	8006544 <xTimerCreateTimerTask+0x74>
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	613b      	str	r3, [r7, #16]
 8006542:	e7fe      	b.n	8006542 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006544:	697b      	ldr	r3, [r7, #20]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20008a54 	.word	0x20008a54
 8006554:	0800ae44 	.word	0x0800ae44
 8006558:	08006691 	.word	0x08006691
 800655c:	20008a58 	.word	0x20008a58

08006560 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08a      	sub	sp, #40	; 0x28
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800656e:	2300      	movs	r3, #0
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d109      	bne.n	800658c <xTimerGenericCommand+0x2c>
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	623b      	str	r3, [r7, #32]
 800658a:	e7fe      	b.n	800658a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800658c:	4b19      	ldr	r3, [pc, #100]	; (80065f4 <xTimerGenericCommand+0x94>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d02a      	beq.n	80065ea <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b05      	cmp	r3, #5
 80065a4:	dc18      	bgt.n	80065d8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80065a6:	f7ff feb5 	bl	8006314 <xTaskGetSchedulerState>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d109      	bne.n	80065c4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80065b0:	4b10      	ldr	r3, [pc, #64]	; (80065f4 <xTimerGenericCommand+0x94>)
 80065b2:	6818      	ldr	r0, [r3, #0]
 80065b4:	f107 0110 	add.w	r1, r7, #16
 80065b8:	2300      	movs	r3, #0
 80065ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065bc:	f7fe fccc 	bl	8004f58 <xQueueGenericSend>
 80065c0:	6278      	str	r0, [r7, #36]	; 0x24
 80065c2:	e012      	b.n	80065ea <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80065c4:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <xTimerGenericCommand+0x94>)
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	f107 0110 	add.w	r1, r7, #16
 80065cc:	2300      	movs	r3, #0
 80065ce:	2200      	movs	r2, #0
 80065d0:	f7fe fcc2 	bl	8004f58 <xQueueGenericSend>
 80065d4:	6278      	str	r0, [r7, #36]	; 0x24
 80065d6:	e008      	b.n	80065ea <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80065d8:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <xTimerGenericCommand+0x94>)
 80065da:	6818      	ldr	r0, [r3, #0]
 80065dc:	f107 0110 	add.w	r1, r7, #16
 80065e0:	2300      	movs	r3, #0
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	f7fe fdb2 	bl	800514c <xQueueGenericSendFromISR>
 80065e8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3728      	adds	r7, #40	; 0x28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	20008a54 	.word	0x20008a54

080065f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006602:	4b22      	ldr	r3, [pc, #136]	; (800668c <prvProcessExpiredTimer+0x94>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	3304      	adds	r3, #4
 8006610:	4618      	mov	r0, r3
 8006612:	f7fd ff63 	bl	80044dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b00      	cmp	r3, #0
 8006622:	d021      	beq.n	8006668 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	699a      	ldr	r2, [r3, #24]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	18d1      	adds	r1, r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	6978      	ldr	r0, [r7, #20]
 8006632:	f000 f8d1 	bl	80067d8 <prvInsertTimerInActiveList>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01e      	beq.n	800667a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800663c:	2300      	movs	r3, #0
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	2300      	movs	r3, #0
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	2100      	movs	r1, #0
 8006646:	6978      	ldr	r0, [r7, #20]
 8006648:	f7ff ff8a 	bl	8006560 <xTimerGenericCommand>
 800664c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d112      	bne.n	800667a <prvProcessExpiredTimer+0x82>
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	e7fe      	b.n	8006666 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800666e:	f023 0301 	bic.w	r3, r3, #1
 8006672:	b2da      	uxtb	r2, r3
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	6978      	ldr	r0, [r7, #20]
 8006680:	4798      	blx	r3
}
 8006682:	bf00      	nop
 8006684:	3718      	adds	r7, #24
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20008a4c 	.word	0x20008a4c

08006690 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006698:	f107 0308 	add.w	r3, r7, #8
 800669c:	4618      	mov	r0, r3
 800669e:	f000 f857 	bl	8006750 <prvGetNextExpireTime>
 80066a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4619      	mov	r1, r3
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 f803 	bl	80066b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80066ae:	f000 f8d5 	bl	800685c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066b2:	e7f1      	b.n	8006698 <prvTimerTask+0x8>

080066b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80066be:	f7ff fa57 	bl	8005b70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066c2:	f107 0308 	add.w	r3, r7, #8
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 f866 	bl	8006798 <prvSampleTimeNow>
 80066cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d130      	bne.n	8006736 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10a      	bne.n	80066f0 <prvProcessTimerOrBlockTask+0x3c>
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d806      	bhi.n	80066f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80066e2:	f7ff fa53 	bl	8005b8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80066e6:	68f9      	ldr	r1, [r7, #12]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7ff ff85 	bl	80065f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80066ee:	e024      	b.n	800673a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d008      	beq.n	8006708 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80066f6:	4b13      	ldr	r3, [pc, #76]	; (8006744 <prvProcessTimerOrBlockTask+0x90>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <prvProcessTimerOrBlockTask+0x50>
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <prvProcessTimerOrBlockTask+0x52>
 8006704:	2300      	movs	r3, #0
 8006706:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006708:	4b0f      	ldr	r3, [pc, #60]	; (8006748 <prvProcessTimerOrBlockTask+0x94>)
 800670a:	6818      	ldr	r0, [r3, #0]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	4619      	mov	r1, r3
 8006716:	f7fe ffc1 	bl	800569c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800671a:	f7ff fa37 	bl	8005b8c <xTaskResumeAll>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006724:	4b09      	ldr	r3, [pc, #36]	; (800674c <prvProcessTimerOrBlockTask+0x98>)
 8006726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	f3bf 8f6f 	isb	sy
}
 8006734:	e001      	b.n	800673a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006736:	f7ff fa29 	bl	8005b8c <xTaskResumeAll>
}
 800673a:	bf00      	nop
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20008a50 	.word	0x20008a50
 8006748:	20008a54 	.word	0x20008a54
 800674c:	e000ed04 	.word	0xe000ed04

08006750 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006758:	4b0e      	ldr	r3, [pc, #56]	; (8006794 <prvGetNextExpireTime+0x44>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <prvGetNextExpireTime+0x16>
 8006762:	2201      	movs	r2, #1
 8006764:	e000      	b.n	8006768 <prvGetNextExpireTime+0x18>
 8006766:	2200      	movs	r2, #0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d105      	bne.n	8006780 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006774:	4b07      	ldr	r3, [pc, #28]	; (8006794 <prvGetNextExpireTime+0x44>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	e001      	b.n	8006784 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006784:	68fb      	ldr	r3, [r7, #12]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20008a4c 	.word	0x20008a4c

08006798 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80067a0:	f7ff fa90 	bl	8005cc4 <xTaskGetTickCount>
 80067a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80067a6:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <prvSampleTimeNow+0x3c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d205      	bcs.n	80067bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80067b0:	f000 f930 	bl	8006a14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	e002      	b.n	80067c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80067c2:	4a04      	ldr	r2, [pc, #16]	; (80067d4 <prvSampleTimeNow+0x3c>)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80067c8:	68fb      	ldr	r3, [r7, #12]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20008a5c 	.word	0x20008a5c

080067d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80067e6:	2300      	movs	r3, #0
 80067e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d812      	bhi.n	8006824 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	1ad2      	subs	r2, r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	429a      	cmp	r2, r3
 800680a:	d302      	bcc.n	8006812 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800680c:	2301      	movs	r3, #1
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	e01b      	b.n	800684a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006812:	4b10      	ldr	r3, [pc, #64]	; (8006854 <prvInsertTimerInActiveList+0x7c>)
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3304      	adds	r3, #4
 800681a:	4619      	mov	r1, r3
 800681c:	4610      	mov	r0, r2
 800681e:	f7fd fe24 	bl	800446a <vListInsert>
 8006822:	e012      	b.n	800684a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	429a      	cmp	r2, r3
 800682a:	d206      	bcs.n	800683a <prvInsertTimerInActiveList+0x62>
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d302      	bcc.n	800683a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006834:	2301      	movs	r3, #1
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	e007      	b.n	800684a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800683a:	4b07      	ldr	r3, [pc, #28]	; (8006858 <prvInsertTimerInActiveList+0x80>)
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3304      	adds	r3, #4
 8006842:	4619      	mov	r1, r3
 8006844:	4610      	mov	r0, r2
 8006846:	f7fd fe10 	bl	800446a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800684a:	697b      	ldr	r3, [r7, #20]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	20008a50 	.word	0x20008a50
 8006858:	20008a4c 	.word	0x20008a4c

0800685c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08e      	sub	sp, #56	; 0x38
 8006860:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006862:	e0c6      	b.n	80069f2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	da17      	bge.n	800689a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800686a:	1d3b      	adds	r3, r7, #4
 800686c:	3304      	adds	r3, #4
 800686e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	2b00      	cmp	r3, #0
 8006874:	d109      	bne.n	800688a <prvProcessReceivedCommands+0x2e>
 8006876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	61fb      	str	r3, [r7, #28]
 8006888:	e7fe      	b.n	8006888 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006890:	6850      	ldr	r0, [r2, #4]
 8006892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006894:	6892      	ldr	r2, [r2, #8]
 8006896:	4611      	mov	r1, r2
 8006898:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	f2c0 80a8 	blt.w	80069f2 <prvProcessReceivedCommands+0x196>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d004      	beq.n	80068b8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	3304      	adds	r3, #4
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fd fe12 	bl	80044dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068b8:	463b      	mov	r3, r7
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7ff ff6c 	bl	8006798 <prvSampleTimeNow>
 80068c0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b09      	cmp	r3, #9
 80068c6:	f200 8093 	bhi.w	80069f0 <prvProcessReceivedCommands+0x194>
 80068ca:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <prvProcessReceivedCommands+0x74>)
 80068cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d0:	080068f9 	.word	0x080068f9
 80068d4:	080068f9 	.word	0x080068f9
 80068d8:	080068f9 	.word	0x080068f9
 80068dc:	0800696b 	.word	0x0800696b
 80068e0:	0800697f 	.word	0x0800697f
 80068e4:	080069c7 	.word	0x080069c7
 80068e8:	080068f9 	.word	0x080068f9
 80068ec:	080068f9 	.word	0x080068f9
 80068f0:	0800696b 	.word	0x0800696b
 80068f4:	0800697f 	.word	0x0800697f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068fe:	f043 0301 	orr.w	r3, r3, #1
 8006902:	b2da      	uxtb	r2, r3
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	18d1      	adds	r1, r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006918:	f7ff ff5e 	bl	80067d8 <prvInsertTimerInActiveList>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d067      	beq.n	80069f2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006928:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	d05c      	beq.n	80069f2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	441a      	add	r2, r3
 8006940:	2300      	movs	r3, #0
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	2300      	movs	r3, #0
 8006946:	2100      	movs	r1, #0
 8006948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800694a:	f7ff fe09 	bl	8006560 <xTimerGenericCommand>
 800694e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d14d      	bne.n	80069f2 <prvProcessReceivedCommands+0x196>
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	61bb      	str	r3, [r7, #24]
 8006968:	e7fe      	b.n	8006968 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800696a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006970:	f023 0301 	bic.w	r3, r3, #1
 8006974:	b2da      	uxtb	r2, r3
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800697c:	e039      	b.n	80069f2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006984:	f043 0301 	orr.w	r3, r3, #1
 8006988:	b2da      	uxtb	r2, r3
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006994:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d109      	bne.n	80069b2 <prvProcessReceivedCommands+0x156>
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	e7fe      	b.n	80069b0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b4:	699a      	ldr	r2, [r3, #24]
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	18d1      	adds	r1, r2, r3
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069c0:	f7ff ff0a 	bl	80067d8 <prvInsertTimerInActiveList>
					break;
 80069c4:	e015      	b.n	80069f2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d103      	bne.n	80069dc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80069d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069d6:	f7fe f8ad 	bl	8004b34 <vPortFree>
 80069da:	e00a      	b.n	80069f2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069e2:	f023 0301 	bic.w	r3, r3, #1
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80069ee:	e000      	b.n	80069f2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
 80069f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069f2:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <prvProcessReceivedCommands+0x1b4>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	1d39      	adds	r1, r7, #4
 80069f8:	2200      	movs	r2, #0
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fe fc3a 	bl	8005274 <xQueueReceive>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f47f af2e 	bne.w	8006864 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006a08:	bf00      	nop
 8006a0a:	3730      	adds	r7, #48	; 0x30
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20008a54 	.word	0x20008a54

08006a14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a1a:	e047      	b.n	8006aac <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a1c:	4b2d      	ldr	r3, [pc, #180]	; (8006ad4 <prvSwitchTimerLists+0xc0>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a26:	4b2b      	ldr	r3, [pc, #172]	; (8006ad4 <prvSwitchTimerLists+0xc0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	3304      	adds	r3, #4
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fd fd51 	bl	80044dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	6938      	ldr	r0, [r7, #16]
 8006a40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d02d      	beq.n	8006aac <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	699a      	ldr	r2, [r3, #24]
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	4413      	add	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d90e      	bls.n	8006a80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a6e:	4b19      	ldr	r3, [pc, #100]	; (8006ad4 <prvSwitchTimerLists+0xc0>)
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	3304      	adds	r3, #4
 8006a76:	4619      	mov	r1, r3
 8006a78:	4610      	mov	r0, r2
 8006a7a:	f7fd fcf6 	bl	800446a <vListInsert>
 8006a7e:	e015      	b.n	8006aac <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a80:	2300      	movs	r3, #0
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	2300      	movs	r3, #0
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	2100      	movs	r1, #0
 8006a8a:	6938      	ldr	r0, [r7, #16]
 8006a8c:	f7ff fd68 	bl	8006560 <xTimerGenericCommand>
 8006a90:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d109      	bne.n	8006aac <prvSwitchTimerLists+0x98>
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	603b      	str	r3, [r7, #0]
 8006aaa:	e7fe      	b.n	8006aaa <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006aac:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <prvSwitchTimerLists+0xc0>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1b2      	bne.n	8006a1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ab6:	4b07      	ldr	r3, [pc, #28]	; (8006ad4 <prvSwitchTimerLists+0xc0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8006abc:	4b06      	ldr	r3, [pc, #24]	; (8006ad8 <prvSwitchTimerLists+0xc4>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a04      	ldr	r2, [pc, #16]	; (8006ad4 <prvSwitchTimerLists+0xc0>)
 8006ac2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ac4:	4a04      	ldr	r2, [pc, #16]	; (8006ad8 <prvSwitchTimerLists+0xc4>)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6013      	str	r3, [r2, #0]
}
 8006aca:	bf00      	nop
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20008a4c 	.word	0x20008a4c
 8006ad8:	20008a50 	.word	0x20008a50

08006adc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ae2:	f7fd fe4b 	bl	800477c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006ae6:	4b15      	ldr	r3, [pc, #84]	; (8006b3c <prvCheckForValidListAndQueue+0x60>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d120      	bne.n	8006b30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006aee:	4814      	ldr	r0, [pc, #80]	; (8006b40 <prvCheckForValidListAndQueue+0x64>)
 8006af0:	f7fd fc6a 	bl	80043c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006af4:	4813      	ldr	r0, [pc, #76]	; (8006b44 <prvCheckForValidListAndQueue+0x68>)
 8006af6:	f7fd fc67 	bl	80043c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006afa:	4b13      	ldr	r3, [pc, #76]	; (8006b48 <prvCheckForValidListAndQueue+0x6c>)
 8006afc:	4a10      	ldr	r2, [pc, #64]	; (8006b40 <prvCheckForValidListAndQueue+0x64>)
 8006afe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b00:	4b12      	ldr	r3, [pc, #72]	; (8006b4c <prvCheckForValidListAndQueue+0x70>)
 8006b02:	4a10      	ldr	r2, [pc, #64]	; (8006b44 <prvCheckForValidListAndQueue+0x68>)
 8006b04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b06:	2300      	movs	r3, #0
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <prvCheckForValidListAndQueue+0x74>)
 8006b0c:	4a11      	ldr	r2, [pc, #68]	; (8006b54 <prvCheckForValidListAndQueue+0x78>)
 8006b0e:	2110      	movs	r1, #16
 8006b10:	200a      	movs	r0, #10
 8006b12:	f7fe f98b 	bl	8004e2c <xQueueGenericCreateStatic>
 8006b16:	4602      	mov	r2, r0
 8006b18:	4b08      	ldr	r3, [pc, #32]	; (8006b3c <prvCheckForValidListAndQueue+0x60>)
 8006b1a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b1c:	4b07      	ldr	r3, [pc, #28]	; (8006b3c <prvCheckForValidListAndQueue+0x60>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b24:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <prvCheckForValidListAndQueue+0x60>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	490b      	ldr	r1, [pc, #44]	; (8006b58 <prvCheckForValidListAndQueue+0x7c>)
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe fd8e 	bl	800564c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b30:	f7fd fe52 	bl	80047d8 <vPortExitCritical>
}
 8006b34:	bf00      	nop
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20008a54 	.word	0x20008a54
 8006b40:	20008a24 	.word	0x20008a24
 8006b44:	20008a38 	.word	0x20008a38
 8006b48:	20008a4c 	.word	0x20008a4c
 8006b4c:	20008a50 	.word	0x20008a50
 8006b50:	20008b00 	.word	0x20008b00
 8006b54:	20008a60 	.word	0x20008a60
 8006b58:	0800ae4c 	.word	0x0800ae4c

08006b5c <Get_OutValue>:
#include "task.h"

static uint16_t out_value = 0;

uint16_t Get_OutValue()
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	af00      	add	r7, sp, #0
	return out_value;
 8006b60:	4b03      	ldr	r3, [pc, #12]	; (8006b70 <Get_OutValue+0x14>)
 8006b62:	881b      	ldrh	r3, [r3, #0]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	20008b50 	.word	0x20008b50

08006b74 <update_info_from_json>:

void update_info_from_json(char* buff, struct OUTPUTS* out, uint16_t out_n)
{
 8006b74:	b590      	push	{r4, r7, lr}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	80fb      	strh	r3, [r7, #6]
	out[out_n].branch_n = -1;
 8006b82:	88fb      	ldrh	r3, [r7, #6]
 8006b84:	f640 2264 	movw	r2, #2660	; 0xa64
 8006b88:	fb02 f303 	mul.w	r3, r2, r3
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b94:	f8a3 2a60 	strh.w	r2, [r3, #2656]	; 0xa60
	out[out_n].branch_n = json_get_op(buff, out + out_n);
 8006b98:	88fb      	ldrh	r3, [r7, #6]
 8006b9a:	f640 2264 	movw	r2, #2660	; 0xa64
 8006b9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	18d4      	adds	r4, r2, r3
 8006ba6:	88fb      	ldrh	r3, [r7, #6]
 8006ba8:	f640 2264 	movw	r2, #2660	; 0xa64
 8006bac:	fb02 f303 	mul.w	r3, r2, r3
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f7fa fd30 	bl	800161c <json_get_op>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	f8a4 3a60 	strh.w	r3, [r4, #2656]	; 0xa60
	map_op_on_root(out[out_n].par, out[out_n].root_par, out[out_n].branch_n);
 8006bc4:	88fb      	ldrh	r3, [r7, #6]
 8006bc6:	f640 2264 	movw	r2, #2660	; 0xa64
 8006bca:	fb02 f303 	mul.w	r3, r2, r3
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 7048 	add.w	r0, r3, #800	; 0x320
 8006bd6:	88fb      	ldrh	r3, [r7, #6]
 8006bd8:	f640 2264 	movw	r2, #2660	; 0xa64
 8006bdc:	fb02 f303 	mul.w	r3, r2, r3
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6112 	add.w	r1, r3, #2336	; 0x920
 8006be8:	88fb      	ldrh	r3, [r7, #6]
 8006bea:	f640 2264 	movw	r2, #2660	; 0xa64
 8006bee:	fb02 f303 	mul.w	r3, r2, r3
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f8b3 3a60 	ldrh.w	r3, [r3, #2656]	; 0xa60
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f7f9 fd86 	bl	800070c <map_op_on_root>
}
 8006c00:	bf00      	nop
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd90      	pop	{r4, r7, pc}

08006c08 <clear_info>:

void clear_info(struct OUTPUTS* out, uint16_t out_n)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	807b      	strh	r3, [r7, #2]
	out[out_n].branch_n = 0;
 8006c14:	887b      	ldrh	r3, [r7, #2]
 8006c16:	f640 2264 	movw	r2, #2660	; 0xa64
 8006c1a:	fb02 f303 	mul.w	r3, r2, r3
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	4413      	add	r3, r2
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8a3 2a60 	strh.w	r2, [r3, #2656]	; 0xa60
	memset(out[out_n].par, 0, sizeof(OP));
 8006c28:	887b      	ldrh	r3, [r7, #2]
 8006c2a:	f640 2264 	movw	r2, #2660	; 0xa64
 8006c2e:	fb02 f303 	mul.w	r3, r2, r3
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8006c3a:	220c      	movs	r2, #12
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f002 f96c 	bl	8008f1c <memset>
	memset(out[out_n].tim, 0, sizeof(TM));
 8006c44:	887b      	ldrh	r3, [r7, #2]
 8006c46:	f640 2264 	movw	r2, #2660	; 0xa64
 8006c4a:	fb02 f303 	mul.w	r3, r2, r3
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	4413      	add	r3, r2
 8006c52:	33e0      	adds	r3, #224	; 0xe0
 8006c54:	2248      	movs	r2, #72	; 0x48
 8006c56:	2100      	movs	r1, #0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f002 f95f 	bl	8008f1c <memset>
	//memset(out[out_n].t_tr,  0, sizeof(T_TR));
	//memset(out[out_n].rs_tr, 0, sizeof(RS_TR));
	memset(out[out_n].root_par, 0, sizeof(OP_ROOT));
 8006c5e:	887b      	ldrh	r3, [r7, #2]
 8006c60:	f640 2264 	movw	r2, #2660	; 0xa64
 8006c64:	fb02 f303 	mul.w	r3, r2, r3
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8006c70:	2214      	movs	r2, #20
 8006c72:	2100      	movs	r1, #0
 8006c74:	4618      	mov	r0, r3
 8006c76:	f002 f951 	bl	8008f1c <memset>
}
 8006c7a:	bf00      	nop
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <BitEngine_task>:

void BitEngine_task( void * pvParameters )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d009      	beq.n	8006ca6 <BitEngine_task+0x22>
 8006c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	60bb      	str	r3, [r7, #8]
 8006ca4:	e7fe      	b.n	8006ca4 <BitEngine_task+0x20>

    INO_Init();
 8006ca6:	f000 fa5d 	bl	8007164 <INO_Init>

    for (uint8_t out_n = 0; out_n < OUTPUTS_N; ++out_n)
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]
 8006cae:	e021      	b.n	8006cf4 <BitEngine_task+0x70>
    {
    	memset(outputs[out_n].t_tr,  0, sizeof(T_TR));
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	f640 2264 	movw	r2, #2660	; 0xa64
 8006cb6:	fb02 f303 	mul.w	r3, r2, r3
 8006cba:	4a3e      	ldr	r2, [pc, #248]	; (8006db4 <BitEngine_task+0x130>)
 8006cbc:	4413      	add	r3, r2
 8006cbe:	2203      	movs	r2, #3
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f002 f92a 	bl	8008f1c <memset>
    	memset(outputs[out_n].rs_tr, 0, sizeof(RS_TR));
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	f640 2264 	movw	r2, #2660	; 0xa64
 8006cce:	fb02 f303 	mul.w	r3, r2, r3
 8006cd2:	3318      	adds	r3, #24
 8006cd4:	4a37      	ldr	r2, [pc, #220]	; (8006db4 <BitEngine_task+0x130>)
 8006cd6:	4413      	add	r3, r2
 8006cd8:	2205      	movs	r2, #5
 8006cda:	2100      	movs	r1, #0
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f002 f91d 	bl	8008f1c <memset>
    	clear_info(outputs, out_n);
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4832      	ldr	r0, [pc, #200]	; (8006db4 <BitEngine_task+0x130>)
 8006cea:	f7ff ff8d 	bl	8006c08 <clear_info>
    for (uint8_t out_n = 0; out_n < OUTPUTS_N; ++out_n)
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	73fb      	strb	r3, [r7, #15]
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	2b0f      	cmp	r3, #15
 8006cf8:	d9da      	bls.n	8006cb0 <BitEngine_task+0x2c>
    }

    while(1)
    {
    	for (uint8_t i = 0; i < OUTPUTS_N; ++i)
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	73bb      	strb	r3, [r7, #14]
 8006cfe:	e052      	b.n	8006da6 <BitEngine_task+0x122>
    	{
			if (outputs[i].branch_n == 0 || outputs[i].branch_n > 1024)
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	4a2c      	ldr	r2, [pc, #176]	; (8006db4 <BitEngine_task+0x130>)
 8006d04:	f640 2164 	movw	r1, #2660	; 0xa64
 8006d08:	fb01 f303 	mul.w	r3, r1, r3
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d042      	beq.n	8006d9e <BitEngine_task+0x11a>
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	4a26      	ldr	r2, [pc, #152]	; (8006db4 <BitEngine_task+0x130>)
 8006d1c:	f640 2164 	movw	r1, #2660	; 0xa64
 8006d20:	fb01 f303 	mul.w	r3, r1, r3
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d30:	d835      	bhi.n	8006d9e <BitEngine_task+0x11a>
			{
				continue;
			}
			start_bit_engine(outputs[i].root_par, outputs[i].branch_n, out_value);
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	f640 2264 	movw	r2, #2660	; 0xa64
 8006d38:	fb02 f303 	mul.w	r3, r2, r3
 8006d3c:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8006d40:	4a1c      	ldr	r2, [pc, #112]	; (8006db4 <BitEngine_task+0x130>)
 8006d42:	1898      	adds	r0, r3, r2
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	4a1b      	ldr	r2, [pc, #108]	; (8006db4 <BitEngine_task+0x130>)
 8006d48:	f640 2164 	movw	r1, #2660	; 0xa64
 8006d4c:	fb01 f303 	mul.w	r3, r1, r3
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 8006d56:	8819      	ldrh	r1, [r3, #0]
 8006d58:	4b17      	ldr	r3, [pc, #92]	; (8006db8 <BitEngine_task+0x134>)
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	f7f9 feab 	bl	8000ab8 <start_bit_engine>

			if(outputs[i].root_par[0].result) {
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	4a13      	ldr	r2, [pc, #76]	; (8006db4 <BitEngine_task+0x130>)
 8006d66:	f640 2164 	movw	r1, #2660	; 0xa64
 8006d6a:	fb01 f303 	mul.w	r3, r1, r3
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00d      	beq.n	8006d96 <BitEngine_task+0x112>
				out_value |= 1 << i;
 8006d7a:	7bbb      	ldrb	r3, [r7, #14]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d82:	b21a      	sxth	r2, r3
 8006d84:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <BitEngine_task+0x134>)
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	b21b      	sxth	r3, r3
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	b21b      	sxth	r3, r3
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <BitEngine_task+0x134>)
 8006d92:	801a      	strh	r2, [r3, #0]
 8006d94:	e004      	b.n	8006da0 <BitEngine_task+0x11c>
			} else {
				out_value &= 0 << i;
 8006d96:	4b08      	ldr	r3, [pc, #32]	; (8006db8 <BitEngine_task+0x134>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	801a      	strh	r2, [r3, #0]
 8006d9c:	e000      	b.n	8006da0 <BitEngine_task+0x11c>
				continue;
 8006d9e:	bf00      	nop
    	for (uint8_t i = 0; i < OUTPUTS_N; ++i)
 8006da0:	7bbb      	ldrb	r3, [r7, #14]
 8006da2:	3301      	adds	r3, #1
 8006da4:	73bb      	strb	r3, [r7, #14]
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	2b0f      	cmp	r3, #15
 8006daa:	d9a9      	bls.n	8006d00 <BitEngine_task+0x7c>
			}
		}

    	vTaskDelay(pdMS_TO_TICKS(40));
 8006dac:	2028      	movs	r0, #40	; 0x28
 8006dae:	f7fe fe47 	bl	8005a40 <vTaskDelay>
    	for (uint8_t i = 0; i < OUTPUTS_N; ++i)
 8006db2:	e7a2      	b.n	8006cfa <BitEngine_task+0x76>
 8006db4:	20008ba4 	.word	0x20008ba4
 8006db8:	20008b50 	.word	0x20008b50

08006dbc <BitEngine_TaskInit>:
    }
}


void BitEngine_TaskInit( void )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	607b      	str	r3, [r7, #4]
	xTaskCreate(
 8006dc6:	1d3b      	adds	r3, r7, #4
 8006dc8:	9301      	str	r3, [sp, #4]
 8006dca:	2304      	movs	r3, #4
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	2301      	movs	r3, #1
 8006dd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006dd4:	4903      	ldr	r1, [pc, #12]	; (8006de4 <BitEngine_TaskInit+0x28>)
 8006dd6:	4804      	ldr	r0, [pc, #16]	; (8006de8 <BitEngine_TaskInit+0x2c>)
 8006dd8:	f7fe fcee 	bl	80057b8 <xTaskCreate>
					4096,	 						 /* Stack size in words, not bytes. */
                    ( void * ) 1,     			 	 /* Parameter passed into the task. */
                    4,				 				 /* Priority at which the task is created. */
                    &xHandle );   			   	     /* Used to pass out the created task's handle. */

}
 8006ddc:	bf00      	nop
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	0800ae54 	.word	0x0800ae54
 8006de8:	08006c85 	.word	0x08006c85

08006dec <ESP_GetJson>:

const char URL[] = "192.168.1.210";
const uint16_t PORT = 5002;

void ESP_GetJson()
{
 8006dec:	b5b0      	push	{r4, r5, r7, lr}
 8006dee:	b094      	sub	sp, #80	; 0x50
 8006df0:	af02      	add	r7, sp, #8
	const char get_t[] = "GET http://192.168.1.210/test HTTP/1.1\r\nHost: 192.168.1.210\r\n\r\n";
 8006df2:	4b1a      	ldr	r3, [pc, #104]	; (8006e5c <ESP_GetJson+0x70>)
 8006df4:	1d3c      	adds	r4, r7, #4
 8006df6:	461d      	mov	r5, r3
 8006df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006e08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ESP_SendData(URL, PORT, get_t, sizeof(get_t) - 1, 1);
 8006e0c:	f241 318a 	movw	r1, #5002	; 0x138a
 8006e10:	1d3a      	adds	r2, r7, #4
 8006e12:	2301      	movs	r3, #1
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	233f      	movs	r3, #63	; 0x3f
 8006e18:	4811      	ldr	r0, [pc, #68]	; (8006e60 <ESP_GetJson+0x74>)
 8006e1a:	f7fb fc3b 	bl	8002694 <ESP_SendData>
	vTaskDelay(pdMS_TO_TICKS(1000));
 8006e1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e22:	f7fe fe0d 	bl	8005a40 <vTaskDelay>

	char* ptr = NULL;
 8006e26:	2300      	movs	r3, #0
 8006e28:	647b      	str	r3, [r7, #68]	; 0x44
	if( (ptr = strstr(ESP_GetRxData(), "{")) != NULL )
 8006e2a:	f7fb fb85 	bl	8002538 <ESP_GetRxData>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	217b      	movs	r1, #123	; 0x7b
 8006e32:	4618      	mov	r0, r3
 8006e34:	f002 fb09 	bl	800944a <strchr>
 8006e38:	6478      	str	r0, [r7, #68]	; 0x44
 8006e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d008      	beq.n	8006e52 <ESP_GetJson+0x66>
	{
		clear_info(outputs, 0);
 8006e40:	2100      	movs	r1, #0
 8006e42:	4808      	ldr	r0, [pc, #32]	; (8006e64 <ESP_GetJson+0x78>)
 8006e44:	f7ff fee0 	bl	8006c08 <clear_info>
		update_info_from_json(ptr, outputs, 0);
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4906      	ldr	r1, [pc, #24]	; (8006e64 <ESP_GetJson+0x78>)
 8006e4c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006e4e:	f7ff fe91 	bl	8006b74 <update_info_from_json>
	}
}
 8006e52:	bf00      	nop
 8006e54:	3748      	adds	r7, #72	; 0x48
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bdb0      	pop	{r4, r5, r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	0800ae64 	.word	0x0800ae64
 8006e60:	0800b040 	.word	0x0800b040
 8006e64:	20008ba4 	.word	0x20008ba4

08006e68 <ESP_UpdateTime>:

void ESP_UpdateTime()
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b0a0      	sub	sp, #128	; 0x80
 8006e6c:	af02      	add	r7, sp, #8
	const char get_t[] = "GET http://192.168.1.210/timestamp HTTP/1.1\r\nHost: 192.168.1.210\r\n\r\n";
 8006e6e:	4a2b      	ldr	r2, [pc, #172]	; (8006f1c <ESP_UpdateTime+0xb4>)
 8006e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e74:	4611      	mov	r1, r2
 8006e76:	2245      	movs	r2, #69	; 0x45
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f002 f844 	bl	8008f06 <memcpy>
	ESP_SendData(URL, PORT, get_t, sizeof(get_t) - 1, 1);
 8006e7e:	f241 318a 	movw	r1, #5002	; 0x138a
 8006e82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006e86:	2301      	movs	r3, #1
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	2344      	movs	r3, #68	; 0x44
 8006e8c:	4824      	ldr	r0, [pc, #144]	; (8006f20 <ESP_UpdateTime+0xb8>)
 8006e8e:	f7fb fc01 	bl	8002694 <ESP_SendData>
	vTaskDelay(pdMS_TO_TICKS(1000));
 8006e92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e96:	f7fe fdd3 	bl	8005a40 <vTaskDelay>

	char* ptr_tm = NULL;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	677b      	str	r3, [r7, #116]	; 0x74
	char* ptr_tz = NULL;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	673b      	str	r3, [r7, #112]	; 0x70
	if( (ptr_tm = strstr(ESP_GetRxData(), "\"tm:")) != NULL
 8006ea2:	f7fb fb49 	bl	8002538 <ESP_GetRxData>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	491e      	ldr	r1, [pc, #120]	; (8006f24 <ESP_UpdateTime+0xbc>)
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f002 faf5 	bl	800949a <strstr>
 8006eb0:	6778      	str	r0, [r7, #116]	; 0x74
 8006eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d02d      	beq.n	8006f14 <ESP_UpdateTime+0xac>
	 && (ptr_tz = strstr(ESP_GetRxData(),  ",tz:")) != NULL )
 8006eb8:	f7fb fb3e 	bl	8002538 <ESP_GetRxData>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	491a      	ldr	r1, [pc, #104]	; (8006f28 <ESP_UpdateTime+0xc0>)
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f002 faea 	bl	800949a <strstr>
 8006ec6:	6738      	str	r0, [r7, #112]	; 0x70
 8006ec8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d022      	beq.n	8006f14 <ESP_UpdateTime+0xac>
	{
		struct tm tmp;
		long tm = strtol(ptr_tm + 4, NULL, 10);
 8006ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	220a      	movs	r2, #10
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f002 fb8c 	bl	80095f4 <strtol>
 8006edc:	4603      	mov	r3, r0
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
		int8_t tz = strtol(ptr_tz + 4, NULL, 10);
 8006ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	220a      	movs	r2, #10
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f002 fb83 	bl	80095f4 <strtol>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		(void) localtime_r((time_t *)&tm, &tmp);
 8006ef4:	463a      	mov	r2, r7
 8006ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006efa:	4611      	mov	r1, r2
 8006efc:	4618      	mov	r0, r3
 8006efe:	f001 ff0f 	bl	8008d20 <localtime_r>
		tmp.tm_hour += tz;
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f08:	4413      	add	r3, r2
 8006f0a:	60bb      	str	r3, [r7, #8]
		RTC_SetTime(&tmp);
 8006f0c:	463b      	mov	r3, r7
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 fd52 	bl	80089b8 <RTC_SetTime>
	}
}
 8006f14:	bf00      	nop
 8006f16:	3778      	adds	r7, #120	; 0x78
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	0800aeb4 	.word	0x0800aeb4
 8006f20:	0800b040 	.word	0x0800b040
 8006f24:	0800aea4 	.word	0x0800aea4
 8006f28:	0800aeac 	.word	0x0800aeac

08006f2c <ESP_SendSensorList>:

void ESP_SendSensorList()
{
 8006f2c:	b590      	push	{r4, r7, lr}
 8006f2e:	f5ad 7d3d 	sub.w	sp, sp, #756	; 0x2f4
 8006f32:	af02      	add	r7, sp, #8
	char buff[512] = { 0 };
 8006f34:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f3e:	461a      	mov	r2, r3
 8006f40:	2100      	movs	r1, #0
 8006f42:	f001 ffeb 	bl	8008f1c <memset>

	char prefix[] = "POST http://192.168.1.210:5002/sensors HTTP/1.1\r\nHost: 192.168.1.210\r\nContent-Type: application/json\r\nContent-Length:      \r\n\r\n{\"SENSOR\":[";
 8006f46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006f4a:	4a55      	ldr	r2, [pc, #340]	; (80070a0 <ESP_SendSensorList+0x174>)
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	4611      	mov	r1, r2
 8006f50:	238b      	movs	r3, #139	; 0x8b
 8006f52:	461a      	mov	r2, r3
 8006f54:	f001 ffd7 	bl	8008f06 <memcpy>
	char postfix[] = "]}";
 8006f58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006f5c:	4a51      	ldr	r2, [pc, #324]	; (80070a4 <ESP_SendSensorList+0x178>)
 8006f5e:	6812      	ldr	r2, [r2, #0]
 8006f60:	4611      	mov	r1, r2
 8006f62:	8019      	strh	r1, [r3, #0]
 8006f64:	3302      	adds	r3, #2
 8006f66:	0c12      	lsrs	r2, r2, #16
 8006f68:	701a      	strb	r2, [r3, #0]

	strcpy(buff, prefix);
 8006f6a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8006f6e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006f72:	4611      	mov	r1, r2
 8006f74:	4618      	mov	r0, r3
 8006f76:	f002 fa76 	bl	8009466 <strcpy>
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f887 32e7 	strb.w	r3, [r7, #743]	; 0x2e7
 8006f80:	e032      	b.n	8006fe8 <ESP_SendSensorList+0xbc>
	{
		char temp[64];
		if(sensor_list[i].addr == 0) {
 8006f82:	f897 22e7 	ldrb.w	r2, [r7, #743]	; 0x2e7
 8006f86:	4948      	ldr	r1, [pc, #288]	; (80070a8 <ESP_SendSensorList+0x17c>)
 8006f88:	4613      	mov	r3, r2
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	440b      	add	r3, r1
 8006f92:	3302      	adds	r3, #2
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d020      	beq.n	8006fdc <ESP_SendSensorList+0xb0>
			continue;
		}
		sprintf(temp, "{\"SN\": \"%04" PRIx16 "\", \"TYPE\": %d}, ", sensor_list[i].addr, sensor_list[i].type);
 8006f9a:	f897 22e7 	ldrb.w	r2, [r7, #743]	; 0x2e7
 8006f9e:	4942      	ldr	r1, [pc, #264]	; (80070a8 <ESP_SendSensorList+0x17c>)
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	3302      	adds	r3, #2
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	461c      	mov	r4, r3
 8006fb0:	f897 22e7 	ldrb.w	r2, [r7, #743]	; 0x2e7
 8006fb4:	493c      	ldr	r1, [pc, #240]	; (80070a8 <ESP_SendSensorList+0x17c>)
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	4413      	add	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	440b      	add	r3, r1
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	4939      	ldr	r1, [pc, #228]	; (80070ac <ESP_SendSensorList+0x180>)
 8006fc8:	f002 fa0c 	bl	80093e4 <siprintf>
		strcat(buff, temp);
 8006fcc:	463a      	mov	r2, r7
 8006fce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f002 fa29 	bl	800942c <strcat>
 8006fda:	e000      	b.n	8006fde <ESP_SendSensorList+0xb2>
			continue;
 8006fdc:	bf00      	nop
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8006fde:	f897 32e7 	ldrb.w	r3, [r7, #743]	; 0x2e7
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	f887 32e7 	strb.w	r3, [r7, #743]	; 0x2e7
 8006fe8:	f897 32e7 	ldrb.w	r3, [r7, #743]	; 0x2e7
 8006fec:	2b1f      	cmp	r3, #31
 8006fee:	d9c8      	bls.n	8006f82 <ESP_SendSensorList+0x56>
	}
	buff[strlen(buff) - 2] = 0;
 8006ff0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7f9 f8eb 	bl	80001d0 <strlen>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	3b02      	subs	r3, #2
 8006ffe:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8007002:	2100      	movs	r1, #0
 8007004:	54d1      	strb	r1, [r2, r3]
	strcat(buff, postfix);
 8007006:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800700a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800700e:	4611      	mov	r1, r2
 8007010:	4618      	mov	r0, r3
 8007012:	f002 fa0b 	bl	800942c <strcat>

	char* ptr = strstr(buff, "Content-Length:");
 8007016:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800701a:	4925      	ldr	r1, [pc, #148]	; (80070b0 <ESP_SendSensorList+0x184>)
 800701c:	4618      	mov	r0, r3
 800701e:	f002 fa3c 	bl	800949a <strstr>
 8007022:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
	char* ptr_stt = strstr(buff, "\r\n\r\n");
 8007026:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800702a:	4922      	ldr	r1, [pc, #136]	; (80070b4 <ESP_SendSensorList+0x188>)
 800702c:	4618      	mov	r0, r3
 800702e:	f002 fa34 	bl	800949a <strstr>
 8007032:	f8c7 02dc 	str.w	r0, [r7, #732]	; 0x2dc
	char* ptr_end = strstr(buff, "]}");
 8007036:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800703a:	491a      	ldr	r1, [pc, #104]	; (80070a4 <ESP_SendSensorList+0x178>)
 800703c:	4618      	mov	r0, r3
 800703e:	f002 fa2c 	bl	800949a <strstr>
 8007042:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8
	char content_length[5];
	sprintf(content_length, "%d", ptr_end - ptr_stt - 2);
 8007046:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 800704a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	1e9a      	subs	r2, r3, #2
 8007052:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007056:	4918      	ldr	r1, [pc, #96]	; (80070b8 <ESP_SendSensorList+0x18c>)
 8007058:	4618      	mov	r0, r3
 800705a:	f002 f9c3 	bl	80093e4 <siprintf>
	memcpy(ptr + 16, content_length, strlen(content_length));
 800705e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007062:	f103 0410 	add.w	r4, r3, #16
 8007066:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800706a:	4618      	mov	r0, r3
 800706c:	f7f9 f8b0 	bl	80001d0 <strlen>
 8007070:	4602      	mov	r2, r0
 8007072:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007076:	4619      	mov	r1, r3
 8007078:	4620      	mov	r0, r4
 800707a:	f001 ff44 	bl	8008f06 <memcpy>

	ESP_SendData(URL, PORT, buff, sizeof(buff) - 1, 1);
 800707e:	f241 318a 	movw	r1, #5002	; 0x138a
 8007082:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8007086:	2301      	movs	r3, #1
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800708e:	480b      	ldr	r0, [pc, #44]	; (80070bc <ESP_SendSensorList+0x190>)
 8007090:	f7fb fb00 	bl	8002694 <ESP_SendData>
}
 8007094:	bf00      	nop
 8007096:	f507 773b 	add.w	r7, r7, #748	; 0x2ec
 800709a:	46bd      	mov	sp, r7
 800709c:	bd90      	pop	{r4, r7, pc}
 800709e:	bf00      	nop
 80070a0:	0800af3c 	.word	0x0800af3c
 80070a4:	0800af34 	.word	0x0800af34
 80070a8:	200131e4 	.word	0x200131e4
 80070ac:	0800aefc 	.word	0x0800aefc
 80070b0:	0800af1c 	.word	0x0800af1c
 80070b4:	0800af2c 	.word	0x0800af2c
 80070b8:	0800af38 	.word	0x0800af38
 80070bc:	0800b040 	.word	0x0800b040

080070c0 <ESP_Task>:

void ESP_Task( void * pvParameters )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d009      	beq.n	80070e2 <ESP_Task+0x22>
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	e7fe      	b.n	80070e0 <ESP_Task+0x20>

    ESP_Init(vTaskDelay);
 80070e2:	480b      	ldr	r0, [pc, #44]	; (8007110 <ESP_Task+0x50>)
 80070e4:	f7fb f9ac 	bl	8002440 <ESP_Init>

    ESP_SetMode(ESP_MODE_BOTH);
 80070e8:	2003      	movs	r0, #3
 80070ea:	f7fb fa2f 	bl	800254c <ESP_SetMode>
    ESP_SetCipmuxZero();
 80070ee:	f7fb fa6d 	bl	80025cc <ESP_SetCipmuxZero>
    ESP_SetParamsSoftAP("DontTouchAnything", "save_809");
 80070f2:	4908      	ldr	r1, [pc, #32]	; (8007114 <ESP_Task+0x54>)
 80070f4:	4808      	ldr	r0, [pc, #32]	; (8007118 <ESP_Task+0x58>)
 80070f6:	f7fb fa97 	bl	8002628 <ESP_SetParamsSoftAP>

    ESP_UpdateTime();
 80070fa:	f7ff feb5 	bl	8006e68 <ESP_UpdateTime>

    while(1)
    {
    	ESP_GetJson();
 80070fe:	f7ff fe75 	bl	8006dec <ESP_GetJson>
    	ESP_SendSensorList();
 8007102:	f7ff ff13 	bl	8006f2c <ESP_SendSensorList>
    	vTaskDelay(pdMS_TO_TICKS(1000));
 8007106:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800710a:	f7fe fc99 	bl	8005a40 <vTaskDelay>
    	ESP_GetJson();
 800710e:	e7f6      	b.n	80070fe <ESP_Task+0x3e>
 8007110:	08005a41 	.word	0x08005a41
 8007114:	0800afc8 	.word	0x0800afc8
 8007118:	0800afd4 	.word	0x0800afd4

0800711c <ESP_TaskInit>:
    }
}

void ESP_TaskInit( void )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 8007122:	2300      	movs	r3, #0
 8007124:	607b      	str	r3, [r7, #4]
    xTaskCreate(
 8007126:	1d3b      	adds	r3, r7, #4
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	2304      	movs	r3, #4
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	2301      	movs	r3, #1
 8007130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007134:	4903      	ldr	r1, [pc, #12]	; (8007144 <ESP_TaskInit+0x28>)
 8007136:	4804      	ldr	r0, [pc, #16]	; (8007148 <ESP_TaskInit+0x2c>)
 8007138:	f7fe fb3e 	bl	80057b8 <xTaskCreate>
                    "ESP_Task",    				 /* Text name for the task. */
					2048,	 					 /* Stack size in words, not bytes. */
                    ( void * ) 1,     		 	 /* Parameter passed into the task. */
                    4,				 			 /* Priority at which the task is created. */
                    &xHandle );   		   	     /* Used to pass out the created task's handle. */
}
 800713c:	bf00      	nop
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	0800afe8 	.word	0x0800afe8
 8007148:	080070c1 	.word	0x080070c1

0800714c <LL_GPIO_ReadInputPort>:
  * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <INO_Init>:
/*
 * INO - PE8-PE15 inputs pins
 */

void INO_Init()
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800716a:	463b      	mov	r3, r7
 800716c:	2200      	movs	r2, #0
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	605a      	str	r2, [r3, #4]
 8007172:	609a      	str	r2, [r3, #8]
 8007174:	60da      	str	r2, [r3, #12]
 8007176:	611a      	str	r2, [r3, #16]
 8007178:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_8 || LL_GPIO_PIN_9 || LL_GPIO_PIN_10 || LL_GPIO_PIN_11
 800717a:	2301      	movs	r3, #1
 800717c:	603b      	str	r3, [r7, #0]
					 || LL_GPIO_PIN_12 || LL_GPIO_PIN_13 || LL_GPIO_PIN_14 || LL_GPIO_PIN_15;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800717e:	2300      	movs	r3, #0
 8007180:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007182:	2302      	movs	r3, #2
 8007184:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007186:	463b      	mov	r3, r7
 8007188:	4619      	mov	r1, r3
 800718a:	4803      	ldr	r0, [pc, #12]	; (8007198 <INO_Init+0x34>)
 800718c:	f7fc f811 	bl	80031b2 <LL_GPIO_Init>
}
 8007190:	bf00      	nop
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	40021000 	.word	0x40021000

0800719c <INO_GetValue>:

uint8_t INO_GetValue(uint8_t pin)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	71fb      	strb	r3, [r7, #7]
	return LL_GPIO_ReadInputPort(GPIOE) & (1 << pin);
 80071a6:	4808      	ldr	r0, [pc, #32]	; (80071c8 <INO_GetValue+0x2c>)
 80071a8:	f7ff ffd0 	bl	800714c <LL_GPIO_ReadInputPort>
 80071ac:	4603      	mov	r3, r0
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	2101      	movs	r1, #1
 80071b4:	fa01 f303 	lsl.w	r3, r1, r3
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	4013      	ands	r3, r2
 80071bc:	b2db      	uxtb	r3, r3
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	40021000 	.word	0x40021000

080071cc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	619a      	str	r2, [r3, #24]
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	041a      	lsls	r2, r3, #16
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	619a      	str	r2, [r3, #24]
}
 80071fa:	bf00      	nop
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
	...

08007208 <BoardLED_Init>:
#include "FreeRTOSConfig.h"
#include "FreeRTOS.h"
#include "task.h"

static void BoardLED_Init()
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800720e:	463b      	mov	r3, r7
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	609a      	str	r2, [r3, #8]
 8007218:	60da      	str	r2, [r3, #12]
 800721a:	611a      	str	r2, [r3, #16]
 800721c:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800721e:	2302      	movs	r3, #2
 8007220:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007222:	2301      	movs	r3, #1
 8007224:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007226:	2302      	movs	r3, #2
 8007228:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800722a:	2301      	movs	r3, #1
 800722c:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800722e:	463b      	mov	r3, r7
 8007230:	4619      	mov	r1, r3
 8007232:	4803      	ldr	r0, [pc, #12]	; (8007240 <BoardLED_Init+0x38>)
 8007234:	f7fb ffbd 	bl	80031b2 <LL_GPIO_Init>
}
 8007238:	bf00      	nop
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	40020000 	.word	0x40020000

08007244 <BoardLED_Set>:

static void BoardLED_Set(uint8_t val)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	4603      	mov	r3, r0
 800724c:	71fb      	strb	r3, [r7, #7]
	if(val) {
 800724e:	79fb      	ldrb	r3, [r7, #7]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d004      	beq.n	800725e <BoardLED_Set+0x1a>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8007254:	2102      	movs	r1, #2
 8007256:	4806      	ldr	r0, [pc, #24]	; (8007270 <BoardLED_Set+0x2c>)
 8007258:	f7ff ffb8 	bl	80071cc <LL_GPIO_SetOutputPin>
	} else {
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
	}
}
 800725c:	e003      	b.n	8007266 <BoardLED_Set+0x22>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 800725e:	2102      	movs	r1, #2
 8007260:	4803      	ldr	r0, [pc, #12]	; (8007270 <BoardLED_Set+0x2c>)
 8007262:	f7ff ffc1 	bl	80071e8 <LL_GPIO_ResetOutputPin>
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	40020000 	.word	0x40020000

08007274 <Led_Task>:

void Led_Task( void * pvParameters )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d009      	beq.n	8007296 <Led_Task+0x22>
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	e7fe      	b.n	8007294 <Led_Task+0x20>

    BoardLED_Init();
 8007296:	f7ff ffb7 	bl	8007208 <BoardLED_Init>
    while(1)
    {
    	BoardLED_Set(1);
 800729a:	2001      	movs	r0, #1
 800729c:	f7ff ffd2 	bl	8007244 <BoardLED_Set>
    	vTaskDelay(pdMS_TO_TICKS(500));
 80072a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072a4:	f7fe fbcc 	bl	8005a40 <vTaskDelay>
    	BoardLED_Set(0);
 80072a8:	2000      	movs	r0, #0
 80072aa:	f7ff ffcb 	bl	8007244 <BoardLED_Set>
    	vTaskDelay(pdMS_TO_TICKS(500));
 80072ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072b2:	f7fe fbc5 	bl	8005a40 <vTaskDelay>
    	BoardLED_Set(1);
 80072b6:	e7f0      	b.n	800729a <Led_Task+0x26>

080072b8 <Led_TaskInit>:
    }
}

void Led_TaskInit( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af02      	add	r7, sp, #8
	//BaseType_t xReturned;
	TaskHandle_t xHandle = NULL;
 80072be:	2300      	movs	r3, #0
 80072c0:	607b      	str	r3, [r7, #4]

    //xReturned =
	xTaskCreate(
 80072c2:	1d3b      	adds	r3, r7, #4
 80072c4:	9301      	str	r3, [sp, #4]
 80072c6:	2304      	movs	r3, #4
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	2301      	movs	r3, #1
 80072cc:	2280      	movs	r2, #128	; 0x80
 80072ce:	4904      	ldr	r1, [pc, #16]	; (80072e0 <Led_TaskInit+0x28>)
 80072d0:	4804      	ldr	r0, [pc, #16]	; (80072e4 <Led_TaskInit+0x2c>)
 80072d2:	f7fe fa71 	bl	80057b8 <xTaskCreate>
                    "Led_Task",    				 /* Text name for the task. */
					128,	 					 /* Stack size in words, not bytes. */
                    ( void * ) 1,     		 	 /* Parameter passed into the task. */
                    4,				 			 /* Priority at which the task is created. */
                    &xHandle );   		   	     /* Used to pass out the created task's handle. */
}
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	0800aff4 	.word	0x0800aff4
 80072e4:	08007275 	.word	0x08007275

080072e8 <LL_SPI_Enable>:
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	601a      	str	r2, [r3, #0]
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <LL_SPI_SetStandard>:
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f023 0210 	bic.w	r2, r3, #16
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	605a      	str	r2, [r3, #4]
}
 8007322:	bf00      	nop
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800732e:	b480      	push	{r7}
 8007330:	b085      	sub	sp, #20
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	460b      	mov	r3, r1
 8007338:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	330c      	adds	r3, #12
 800733e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	78fa      	ldrb	r2, [r7, #3]
 8007344:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8007346:	bf00      	nop
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <LL_GPIO_SetOutputPin>:
{
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	619a      	str	r2, [r3, #24]
}
 8007362:	bf00      	nop
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <LL_GPIO_ResetOutputPin>:
{
 800736e:	b480      	push	{r7}
 8007370:	b083      	sub	sp, #12
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	041a      	lsls	r2, r3, #16
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	619a      	str	r2, [r3, #24]
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <SPI2_Init>:
#include "FreeRTOS.h"
#include "task.h"


void SPI2_Init(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b090      	sub	sp, #64	; 0x40
 8007390:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8007392:	f107 0318 	add.w	r3, r7, #24
 8007396:	2228      	movs	r2, #40	; 0x28
 8007398:	2100      	movs	r1, #0
 800739a:	4618      	mov	r0, r3
 800739c:	f001 fdbe 	bl	8008f1c <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073a0:	463b      	mov	r3, r7
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	605a      	str	r2, [r3, #4]
 80073a8:	609a      	str	r2, [r3, #8]
 80073aa:	60da      	str	r2, [r3, #12]
 80073ac:	611a      	str	r2, [r3, #16]
 80073ae:	615a      	str	r2, [r3, #20]
	/**SPI2 GPIO Configuration
	PC2   ------> SPI2_MISO
	PC3   ------> SPI2_MOSI
	PB13  ------> SPI2_SCK
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80073b0:	230c      	movs	r3, #12
 80073b2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80073b4:	2302      	movs	r3, #2
 80073b6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80073b8:	2303      	movs	r3, #3
 80073ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80073bc:	2300      	movs	r3, #0
 80073be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80073c0:	2300      	movs	r3, #0
 80073c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80073c4:	2305      	movs	r3, #5
 80073c6:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073c8:	463b      	mov	r3, r7
 80073ca:	4619      	mov	r1, r3
 80073cc:	481d      	ldr	r0, [pc, #116]	; (8007444 <SPI2_Init+0xb8>)
 80073ce:	f7fb fef0 	bl	80031b2 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80073d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073d6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80073d8:	2302      	movs	r3, #2
 80073da:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80073dc:	2303      	movs	r3, #3
 80073de:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80073e4:	2300      	movs	r3, #0
 80073e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80073e8:	2305      	movs	r3, #5
 80073ea:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073ec:	463b      	mov	r3, r7
 80073ee:	4619      	mov	r1, r3
 80073f0:	4815      	ldr	r0, [pc, #84]	; (8007448 <SPI2_Init+0xbc>)
 80073f2:	f7fb fede 	bl	80031b2 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80073f6:	2300      	movs	r3, #0
 80073f8:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80073fa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80073fe:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8007400:	2300      	movs	r3, #0
 8007402:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8007404:	2300      	movs	r3, #0
 8007406:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8007408:	2300      	movs	r3, #0
 800740a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800740c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007410:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8007412:	2310      	movs	r3, #16
 8007414:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8007416:	2300      	movs	r3, #0
 8007418:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800741a:	2300      	movs	r3, #0
 800741c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800741e:	230a      	movs	r3, #10
 8007420:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(SPI2, &SPI_InitStruct);
 8007422:	f107 0318 	add.w	r3, r7, #24
 8007426:	4619      	mov	r1, r3
 8007428:	4808      	ldr	r0, [pc, #32]	; (800744c <SPI2_Init+0xc0>)
 800742a:	f7fc fbc0 	bl	8003bae <LL_SPI_Init>
	LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800742e:	2100      	movs	r1, #0
 8007430:	4806      	ldr	r0, [pc, #24]	; (800744c <SPI2_Init+0xc0>)
 8007432:	f7ff ff69 	bl	8007308 <LL_SPI_SetStandard>
	LL_SPI_Enable(SPI2);
 8007436:	4805      	ldr	r0, [pc, #20]	; (800744c <SPI2_Init+0xc0>)
 8007438:	f7ff ff56 	bl	80072e8 <LL_SPI_Enable>
}
 800743c:	bf00      	nop
 800743e:	3740      	adds	r7, #64	; 0x40
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	40020800 	.word	0x40020800
 8007448:	40020400 	.word	0x40020400
 800744c:	40003800 	.word	0x40003800

08007450 <SPI2_SendByte>:

static void SPI2_SendByte(uint8_t byte)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	4603      	mov	r3, r0
 8007458:	71fb      	strb	r3, [r7, #7]
	while (!(SPI2->SR & SPI_SR_TXE));
 800745a:	bf00      	nop
 800745c:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <SPI2_SendByte+0x38>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0f9      	beq.n	800745c <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(SPI2, byte);
 8007468:	79fb      	ldrb	r3, [r7, #7]
 800746a:	4619      	mov	r1, r3
 800746c:	4806      	ldr	r0, [pc, #24]	; (8007488 <SPI2_SendByte+0x38>)
 800746e:	f7ff ff5e 	bl	800732e <LL_SPI_TransmitData8>
	while (SPI2->SR & SPI_SR_BSY);
 8007472:	bf00      	nop
 8007474:	4b04      	ldr	r3, [pc, #16]	; (8007488 <SPI2_SendByte+0x38>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1f9      	bne.n	8007474 <SPI2_SendByte+0x24>
}
 8007480:	bf00      	nop
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	40003800 	.word	0x40003800

0800748c <GPIO_Init>:

static void GPIO_Init()
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007492:	463b      	mov	r3, r7
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	605a      	str	r2, [r3, #4]
 800749a:	609a      	str	r2, [r3, #8]
 800749c:	60da      	str	r2, [r3, #12]
 800749e:	611a      	str	r2, [r3, #16]
 80074a0:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_1; //ST_CP latchPin
 80074a2:	2302      	movs	r3, #2
 80074a4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80074a6:	2301      	movs	r3, #1
 80074a8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80074aa:	2301      	movs	r3, #1
 80074ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80074ae:	2301      	movs	r3, #1
 80074b0:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074b2:	463b      	mov	r3, r7
 80074b4:	4619      	mov	r1, r3
 80074b6:	4803      	ldr	r0, [pc, #12]	; (80074c4 <GPIO_Init+0x38>)
 80074b8:	f7fb fe7b 	bl	80031b2 <LL_GPIO_Init>
}
 80074bc:	bf00      	nop
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	40020800 	.word	0x40020800

080074c8 <LATCH_Set>:

static void LATCH_Set(uint8_t val)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	4603      	mov	r3, r0
 80074d0:	71fb      	strb	r3, [r7, #7]
	if(val) {
 80074d2:	79fb      	ldrb	r3, [r7, #7]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d004      	beq.n	80074e2 <LATCH_Set+0x1a>
		LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_1);
 80074d8:	2102      	movs	r1, #2
 80074da:	4806      	ldr	r0, [pc, #24]	; (80074f4 <LATCH_Set+0x2c>)
 80074dc:	f7ff ff39 	bl	8007352 <LL_GPIO_SetOutputPin>
	} else {
		LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1);
	}
}
 80074e0:	e003      	b.n	80074ea <LATCH_Set+0x22>
		LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1);
 80074e2:	2102      	movs	r1, #2
 80074e4:	4803      	ldr	r0, [pc, #12]	; (80074f4 <LATCH_Set+0x2c>)
 80074e6:	f7ff ff42 	bl	800736e <LL_GPIO_ResetOutputPin>
}
 80074ea:	bf00      	nop
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	40020800 	.word	0x40020800

080074f8 <Relay_SetValue>:

static void Relay_SetValue(uint16_t out_value)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	4603      	mov	r3, r0
 8007500:	80fb      	strh	r3, [r7, #6]
	LATCH_Set(0);
 8007502:	2000      	movs	r0, #0
 8007504:	f7ff ffe0 	bl	80074c8 <LATCH_Set>
	SPI2_SendByte(~(uint8_t)(out_value >> 8));
 8007508:	88fb      	ldrh	r3, [r7, #6]
 800750a:	0a1b      	lsrs	r3, r3, #8
 800750c:	b29b      	uxth	r3, r3
 800750e:	b2db      	uxtb	r3, r3
 8007510:	43db      	mvns	r3, r3
 8007512:	b2db      	uxtb	r3, r3
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff ff9b 	bl	8007450 <SPI2_SendByte>
	SPI2_SendByte(~(uint8_t)(out_value & 0xFF));
 800751a:	88fb      	ldrh	r3, [r7, #6]
 800751c:	b2db      	uxtb	r3, r3
 800751e:	43db      	mvns	r3, r3
 8007520:	b2db      	uxtb	r3, r3
 8007522:	4618      	mov	r0, r3
 8007524:	f7ff ff94 	bl	8007450 <SPI2_SendByte>
	LATCH_Set(1);
 8007528:	2001      	movs	r0, #1
 800752a:	f7ff ffcd 	bl	80074c8 <LATCH_Set>
}
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <Relay_Task>:

void Relay_Task( void * pvParameters )
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b086      	sub	sp, #24
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d009      	beq.n	8007558 <Relay_Task+0x22>
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	e7fe      	b.n	8007556 <Relay_Task+0x20>

    uint16_t value = 0;
 8007558:	2300      	movs	r3, #0
 800755a:	823b      	strh	r3, [r7, #16]
    uint16_t prev_value = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	82fb      	strh	r3, [r7, #22]

    SPI2_Init();
 8007560:	f7ff ff14 	bl	800738c <SPI2_Init>
    GPIO_Init();
 8007564:	f7ff ff92 	bl	800748c <GPIO_Init>

    Relay_SetValue(0x0000);
 8007568:	2000      	movs	r0, #0
 800756a:	f7ff ffc5 	bl	80074f8 <Relay_SetValue>

    while(1)
    {
    	value = Get_OutValue();
 800756e:	f7ff faf5 	bl	8006b5c <Get_OutValue>
 8007572:	4603      	mov	r3, r0
 8007574:	823b      	strh	r3, [r7, #16]

    	if(prev_value != value)
 8007576:	8afa      	ldrh	r2, [r7, #22]
 8007578:	8a3b      	ldrh	r3, [r7, #16]
 800757a:	429a      	cmp	r2, r3
 800757c:	d03c      	beq.n	80075f8 <Relay_Task+0xc2>
    	{
    		prev_value = value;
 800757e:	8a3b      	ldrh	r3, [r7, #16]
 8007580:	82fb      	strh	r3, [r7, #22]

    		uint16_t out_value = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	82bb      	strh	r3, [r7, #20]

        	for(uint8_t i = 0; i < 8; ++i)  {
 8007586:	2300      	movs	r3, #0
 8007588:	74fb      	strb	r3, [r7, #19]
 800758a:	e02a      	b.n	80075e2 <Relay_Task+0xac>

        		if( value & (1 << (i * 2) ) )
 800758c:	8a3a      	ldrh	r2, [r7, #16]
 800758e:	7cfb      	ldrb	r3, [r7, #19]
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	fa42 f303 	asr.w	r3, r2, r3
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d009      	beq.n	80075b2 <Relay_Task+0x7c>
        		{
        			out_value |= ( 1 << i );
 800759e:	7cfb      	ldrb	r3, [r7, #19]
 80075a0:	2201      	movs	r2, #1
 80075a2:	fa02 f303 	lsl.w	r3, r2, r3
 80075a6:	b21a      	sxth	r2, r3
 80075a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	b21b      	sxth	r3, r3
 80075b0:	82bb      	strh	r3, [r7, #20]
        		}

        		if( value & (1 << (i * 2 + 1) ) )
 80075b2:	8a3a      	ldrh	r2, [r7, #16]
 80075b4:	7cfb      	ldrb	r3, [r7, #19]
 80075b6:	005b      	lsls	r3, r3, #1
 80075b8:	3301      	adds	r3, #1
 80075ba:	fa42 f303 	asr.w	r3, r2, r3
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <Relay_Task+0xa6>
        		{
        			out_value |= ( 1 << (i + 8) );
 80075c6:	7cfb      	ldrb	r3, [r7, #19]
 80075c8:	3308      	adds	r3, #8
 80075ca:	2201      	movs	r2, #1
 80075cc:	fa02 f303 	lsl.w	r3, r2, r3
 80075d0:	b21a      	sxth	r2, r3
 80075d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	b21b      	sxth	r3, r3
 80075da:	82bb      	strh	r3, [r7, #20]
        	for(uint8_t i = 0; i < 8; ++i)  {
 80075dc:	7cfb      	ldrb	r3, [r7, #19]
 80075de:	3301      	adds	r3, #1
 80075e0:	74fb      	strb	r3, [r7, #19]
 80075e2:	7cfb      	ldrb	r3, [r7, #19]
 80075e4:	2b07      	cmp	r3, #7
 80075e6:	d9d1      	bls.n	800758c <Relay_Task+0x56>
        		}
        	}

    		taskENTER_CRITICAL();
 80075e8:	f7fd f8c8 	bl	800477c <vPortEnterCritical>
    		Relay_SetValue(out_value);
 80075ec:	8abb      	ldrh	r3, [r7, #20]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff ff82 	bl	80074f8 <Relay_SetValue>
    		taskEXIT_CRITICAL();
 80075f4:	f7fd f8f0 	bl	80047d8 <vPortExitCritical>
    	}

    	vTaskDelay(pdMS_TO_TICKS(40));
 80075f8:	2028      	movs	r0, #40	; 0x28
 80075fa:	f7fe fa21 	bl	8005a40 <vTaskDelay>
    	value = Get_OutValue();
 80075fe:	e7b6      	b.n	800756e <Relay_Task+0x38>

08007600 <Relay_TaskInit>:
    }
}

void Relay_TaskInit( void )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af02      	add	r7, sp, #8
	//BaseType_t xReturned;
	TaskHandle_t xHandle = NULL;
 8007606:	2300      	movs	r3, #0
 8007608:	607b      	str	r3, [r7, #4]

    //xReturned =
	xTaskCreate(
 800760a:	1d3b      	adds	r3, r7, #4
 800760c:	9301      	str	r3, [sp, #4]
 800760e:	2304      	movs	r3, #4
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	2301      	movs	r3, #1
 8007614:	2280      	movs	r2, #128	; 0x80
 8007616:	4904      	ldr	r1, [pc, #16]	; (8007628 <Relay_TaskInit+0x28>)
 8007618:	4804      	ldr	r0, [pc, #16]	; (800762c <Relay_TaskInit+0x2c>)
 800761a:	f7fe f8cd 	bl	80057b8 <xTaskCreate>
                    "Relay_Task",    				 /* Text name for the task. */
					128,	 						 /* Stack size in words, not bytes. */
                    ( void * ) 1,     			 	 /* Parameter passed into the task. */
                    4,				 				 /* Priority at which the task is created. */
                    &xHandle );   			   	     /* Used to pass out the created task's handle. */
}
 800761e:	bf00      	nop
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	0800b000 	.word	0x0800b000
 800762c:	08007537 	.word	0x08007537

08007630 <Sensor_ClearList>:
static uint8_t sensor_counter = 0;
static char buff[16] = { 0 };
static f_ptr delay;

void Sensor_ClearList()
{
 8007630:	b580      	push	{r7, lr}
 8007632:	af00      	add	r7, sp, #0
	sensor_counter = 0;
 8007634:	4b05      	ldr	r3, [pc, #20]	; (800764c <Sensor_ClearList+0x1c>)
 8007636:	2200      	movs	r2, #0
 8007638:	701a      	strb	r2, [r3, #0]
	memset(sensor_list, 0, sizeof(struct SENSOR) * SENSOR_MAX);
 800763a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800763e:	2100      	movs	r1, #0
 8007640:	4803      	ldr	r0, [pc, #12]	; (8007650 <Sensor_ClearList+0x20>)
 8007642:	f001 fc6b 	bl	8008f1c <memset>
}
 8007646:	bf00      	nop
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	20008b52 	.word	0x20008b52
 8007650:	200131e4 	.word	0x200131e4

08007654 <Sensor_Init>:

void Sensor_Init(f_ptr delay_function)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
	UART3_Init(&UART3_rx_data);
 800765c:	4806      	ldr	r0, [pc, #24]	; (8007678 <Sensor_Init+0x24>)
 800765e:	f000 fcad 	bl	8007fbc <UART3_Init>
	Sensor_UpdateGpioInit();
 8007662:	f000 fd11 	bl	8008088 <Sensor_UpdateGpioInit>
	Sensor_ClearList();
 8007666:	f7ff ffe3 	bl	8007630 <Sensor_ClearList>
	delay = delay_function;
 800766a:	4a04      	ldr	r2, [pc, #16]	; (800767c <Sensor_Init+0x28>)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6013      	str	r3, [r2, #0]
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	200147ac 	.word	0x200147ac
 800767c:	20008b64 	.word	0x20008b64

08007680 <Sensor_GPIOUpdateList>:

uint8_t Sensor_GPIOUpdateList()
{
 8007680:	b580      	push	{r7, lr}
 8007682:	af00      	add	r7, sp, #0
	return Sensor_GpioValue();
 8007684:	f000 fd1c 	bl	80080c0 <Sensor_GpioValue>
 8007688:	4603      	mov	r3, r0
}
 800768a:	4618      	mov	r0, r3
 800768c:	bd80      	pop	{r7, pc}
	...

08007690 <Sensor_UpdateList>:

void Sensor_UpdateList()
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
	Sensor_ClearList();
 8007696:	f7ff ffcb 	bl	8007630 <Sensor_ClearList>

	for(uint32_t addr = 0; addr <= 0xFFFF; ++addr)
 800769a:	2300      	movs	r3, #0
 800769c:	607b      	str	r3, [r7, #4]
 800769e:	e04f      	b.n	8007740 <Sensor_UpdateList+0xb0>
	{
		RingBuffClear(&UART3_rx_data);
 80076a0:	482b      	ldr	r0, [pc, #172]	; (8007750 <Sensor_UpdateList+0xc0>)
 80076a2:	f7fb f8b4 	bl	800280e <RingBuffClear>

		sprintf(buff, "%04" PRIx16 "t", (uint16_t)addr);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	461a      	mov	r2, r3
 80076ac:	4929      	ldr	r1, [pc, #164]	; (8007754 <Sensor_UpdateList+0xc4>)
 80076ae:	482a      	ldr	r0, [pc, #168]	; (8007758 <Sensor_UpdateList+0xc8>)
 80076b0:	f001 fe98 	bl	80093e4 <siprintf>
		UART3_SendData(buff, 5);
 80076b4:	2105      	movs	r1, #5
 80076b6:	4828      	ldr	r0, [pc, #160]	; (8007758 <Sensor_UpdateList+0xc8>)
 80076b8:	f000 fd28 	bl	800810c <UART3_SendData>

		delay(1);
 80076bc:	4b27      	ldr	r3, [pc, #156]	; (800775c <Sensor_UpdateList+0xcc>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2001      	movs	r0, #1
 80076c2:	4798      	blx	r3
		char* ptr = NULL;
 80076c4:	2300      	movs	r3, #0
 80076c6:	603b      	str	r3, [r7, #0]
		if( (ptr = strstr(RingBuffGetArray(&UART3_rx_data), "/")) != NULL )
 80076c8:	4821      	ldr	r0, [pc, #132]	; (8007750 <Sensor_UpdateList+0xc0>)
 80076ca:	f7fb f8ba 	bl	8002842 <RingBuffGetArray>
 80076ce:	4603      	mov	r3, r0
 80076d0:	212f      	movs	r1, #47	; 0x2f
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 feb9 	bl	800944a <strchr>
 80076d8:	6038      	str	r0, [r7, #0]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d029      	beq.n	8007734 <Sensor_UpdateList+0xa4>
		{
			sensor_list[sensor_counter].addr = addr;
 80076e0:	4b1f      	ldr	r3, [pc, #124]	; (8007760 <Sensor_UpdateList+0xd0>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	4619      	mov	r1, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	b298      	uxth	r0, r3
 80076ea:	4a1e      	ldr	r2, [pc, #120]	; (8007764 <Sensor_UpdateList+0xd4>)
 80076ec:	460b      	mov	r3, r1
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	440b      	add	r3, r1
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	3302      	adds	r3, #2
 80076f8:	4602      	mov	r2, r0
 80076fa:	801a      	strh	r2, [r3, #0]
			sensor_list[sensor_counter].type = (enum SENSOR_TYPE) *(ptr + 1);
 80076fc:	4b18      	ldr	r3, [pc, #96]	; (8007760 <Sensor_UpdateList+0xd0>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	4619      	mov	r1, r3
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	3301      	adds	r3, #1
 8007706:	7818      	ldrb	r0, [r3, #0]
 8007708:	4a16      	ldr	r2, [pc, #88]	; (8007764 <Sensor_UpdateList+0xd4>)
 800770a:	460b      	mov	r3, r1
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	440b      	add	r3, r1
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	4602      	mov	r2, r0
 8007716:	701a      	strb	r2, [r3, #0]
			sensor_counter++;
 8007718:	4b11      	ldr	r3, [pc, #68]	; (8007760 <Sensor_UpdateList+0xd0>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	3301      	adds	r3, #1
 800771e:	b2da      	uxtb	r2, r3
 8007720:	4b0f      	ldr	r3, [pc, #60]	; (8007760 <Sensor_UpdateList+0xd0>)
 8007722:	701a      	strb	r2, [r3, #0]
			if(sensor_counter >= 16)
 8007724:	4b0e      	ldr	r3, [pc, #56]	; (8007760 <Sensor_UpdateList+0xd0>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	2b0f      	cmp	r3, #15
 800772a:	d903      	bls.n	8007734 <Sensor_UpdateList+0xa4>
			{
				UART3_SendData_byte('/');
 800772c:	202f      	movs	r0, #47	; 0x2f
 800772e:	f000 fcd5 	bl	80080dc <UART3_SendData_byte>
				return;
 8007732:	e009      	b.n	8007748 <Sensor_UpdateList+0xb8>
			}
		}
		UART3_SendData_byte('/');
 8007734:	202f      	movs	r0, #47	; 0x2f
 8007736:	f000 fcd1 	bl	80080dc <UART3_SendData_byte>
	for(uint32_t addr = 0; addr <= 0xFFFF; ++addr)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	3301      	adds	r3, #1
 800773e:	607b      	str	r3, [r7, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007746:	d3ab      	bcc.n	80076a0 <Sensor_UpdateList+0x10>
	}
}
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	200147ac 	.word	0x200147ac
 8007754:	0800b00c 	.word	0x0800b00c
 8007758:	20008b54 	.word	0x20008b54
 800775c:	20008b64 	.word	0x20008b64
 8007760:	20008b52 	.word	0x20008b52
 8007764:	200131e4 	.word	0x200131e4

08007768 <Sensor_UpdateValue>:

void Sensor_UpdateValue()
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 800776e:	2300      	movs	r3, #0
 8007770:	71fb      	strb	r3, [r7, #7]
 8007772:	e08a      	b.n	800788a <Sensor_UpdateValue+0x122>
	{
		if(sensor_list[i].addr == 0) {
 8007774:	79fa      	ldrb	r2, [r7, #7]
 8007776:	4949      	ldr	r1, [pc, #292]	; (800789c <Sensor_UpdateValue+0x134>)
 8007778:	4613      	mov	r3, r2
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	3302      	adds	r3, #2
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d07b      	beq.n	8007882 <Sensor_UpdateValue+0x11a>
			continue;
		}

		RingBuffClear(&UART3_rx_data);
 800778a:	4845      	ldr	r0, [pc, #276]	; (80078a0 <Sensor_UpdateValue+0x138>)
 800778c:	f7fb f83f 	bl	800280e <RingBuffClear>

		sprintf(buff, "%04" PRIx16 "v", sensor_list[i].addr);
 8007790:	79fa      	ldrb	r2, [r7, #7]
 8007792:	4942      	ldr	r1, [pc, #264]	; (800789c <Sensor_UpdateValue+0x134>)
 8007794:	4613      	mov	r3, r2
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	440b      	add	r3, r1
 800779e:	3302      	adds	r3, #2
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	493f      	ldr	r1, [pc, #252]	; (80078a4 <Sensor_UpdateValue+0x13c>)
 80077a6:	4840      	ldr	r0, [pc, #256]	; (80078a8 <Sensor_UpdateValue+0x140>)
 80077a8:	f001 fe1c 	bl	80093e4 <siprintf>
		UART3_SendData(buff, 5);
 80077ac:	2105      	movs	r1, #5
 80077ae:	483e      	ldr	r0, [pc, #248]	; (80078a8 <Sensor_UpdateValue+0x140>)
 80077b0:	f000 fcac 	bl	800810c <UART3_SendData>

		delay(5);
 80077b4:	4b3d      	ldr	r3, [pc, #244]	; (80078ac <Sensor_UpdateValue+0x144>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2005      	movs	r0, #5
 80077ba:	4798      	blx	r3
		char* ptr = NULL;
 80077bc:	2300      	movs	r3, #0
 80077be:	603b      	str	r3, [r7, #0]
		if( (ptr = strstr(RingBuffGetArray(&UART3_rx_data), "/")) != NULL )
 80077c0:	4837      	ldr	r0, [pc, #220]	; (80078a0 <Sensor_UpdateValue+0x138>)
 80077c2:	f7fb f83e 	bl	8002842 <RingBuffGetArray>
 80077c6:	4603      	mov	r3, r0
 80077c8:	212f      	movs	r1, #47	; 0x2f
 80077ca:	4618      	mov	r0, r3
 80077cc:	f001 fe3d 	bl	800944a <strchr>
 80077d0:	6038      	str	r0, [r7, #0]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d01c      	beq.n	8007812 <Sensor_UpdateValue+0xaa>
		{
			sensor_list[i].value = *(ptr + 1) << 24 | *(ptr + 2) << 16 | *(ptr + 3) << 8 | *(ptr + 4);
 80077d8:	79fa      	ldrb	r2, [r7, #7]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	3301      	adds	r3, #1
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	0619      	lsls	r1, r3, #24
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	3302      	adds	r3, #2
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	041b      	lsls	r3, r3, #16
 80077ea:	4319      	orrs	r1, r3
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	3303      	adds	r3, #3
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	430b      	orrs	r3, r1
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	3104      	adds	r1, #4
 80077fa:	7809      	ldrb	r1, [r1, #0]
 80077fc:	430b      	orrs	r3, r1
 80077fe:	4618      	mov	r0, r3
 8007800:	4926      	ldr	r1, [pc, #152]	; (800789c <Sensor_UpdateValue+0x134>)
 8007802:	4613      	mov	r3, r2
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	440b      	add	r3, r1
 800780c:	3304      	adds	r3, #4
 800780e:	6018      	str	r0, [r3, #0]
 8007810:	e033      	b.n	800787a <Sensor_UpdateValue+0x112>
		} else {
			if(sensor_list[i].error_counter > REQ_TO_DISABLE)
 8007812:	79fa      	ldrb	r2, [r7, #7]
 8007814:	4921      	ldr	r1, [pc, #132]	; (800789c <Sensor_UpdateValue+0x134>)
 8007816:	4613      	mov	r3, r2
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	440b      	add	r3, r1
 8007820:	3308      	adds	r3, #8
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	2b10      	cmp	r3, #16
 8007826:	d90a      	bls.n	800783e <Sensor_UpdateValue+0xd6>
			{
				sensor_list[i].addr = 0;
 8007828:	79fa      	ldrb	r2, [r7, #7]
 800782a:	491c      	ldr	r1, [pc, #112]	; (800789c <Sensor_UpdateValue+0x134>)
 800782c:	4613      	mov	r3, r2
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	440b      	add	r3, r1
 8007836:	3302      	adds	r3, #2
 8007838:	2200      	movs	r2, #0
 800783a:	801a      	strh	r2, [r3, #0]
 800783c:	e01d      	b.n	800787a <Sensor_UpdateValue+0x112>
			} else {
				sensor_list[i].value = 0;
 800783e:	79fa      	ldrb	r2, [r7, #7]
 8007840:	4916      	ldr	r1, [pc, #88]	; (800789c <Sensor_UpdateValue+0x134>)
 8007842:	4613      	mov	r3, r2
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	4413      	add	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	440b      	add	r3, r1
 800784c:	3304      	adds	r3, #4
 800784e:	2200      	movs	r2, #0
 8007850:	601a      	str	r2, [r3, #0]
				sensor_list[i].error_counter++;
 8007852:	79fa      	ldrb	r2, [r7, #7]
 8007854:	4911      	ldr	r1, [pc, #68]	; (800789c <Sensor_UpdateValue+0x134>)
 8007856:	4613      	mov	r3, r2
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	3308      	adds	r3, #8
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	3301      	adds	r3, #1
 8007866:	b2d8      	uxtb	r0, r3
 8007868:	490c      	ldr	r1, [pc, #48]	; (800789c <Sensor_UpdateValue+0x134>)
 800786a:	4613      	mov	r3, r2
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	3308      	adds	r3, #8
 8007876:	4602      	mov	r2, r0
 8007878:	701a      	strb	r2, [r3, #0]
			}
		}
		UART3_SendData_byte('/');
 800787a:	202f      	movs	r0, #47	; 0x2f
 800787c:	f000 fc2e 	bl	80080dc <UART3_SendData_byte>
 8007880:	e000      	b.n	8007884 <Sensor_UpdateValue+0x11c>
			continue;
 8007882:	bf00      	nop
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	3301      	adds	r3, #1
 8007888:	71fb      	strb	r3, [r7, #7]
 800788a:	79fb      	ldrb	r3, [r7, #7]
 800788c:	2b1f      	cmp	r3, #31
 800788e:	f67f af71 	bls.w	8007774 <Sensor_UpdateValue+0xc>
	}
}
 8007892:	bf00      	nop
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	200131e4 	.word	0x200131e4
 80078a0:	200147ac 	.word	0x200147ac
 80078a4:	0800b014 	.word	0x0800b014
 80078a8:	20008b54 	.word	0x20008b54
 80078ac:	20008b64 	.word	0x20008b64

080078b0 <Sensor_CheckValue>:

uint8_t Sensor_CheckValue(uint16_t sen_addr, uint32_t value)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	4603      	mov	r3, r0
 80078b8:	6039      	str	r1, [r7, #0]
 80078ba:	80fb      	strh	r3, [r7, #6]
	if(sen_addr == 0xFFFE) {
 80078bc:	88fb      	ldrh	r3, [r7, #6]
 80078be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d101      	bne.n	80078ca <Sensor_CheckValue+0x1a>
		return 0;
 80078c6:	2300      	movs	r3, #0
 80078c8:	e02c      	b.n	8007924 <Sensor_CheckValue+0x74>
	}

	if(sen_addr == 0xFFFF) {
 80078ca:	88fb      	ldrh	r3, [r7, #6]
 80078cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d101      	bne.n	80078d8 <Sensor_CheckValue+0x28>
		return 1;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e025      	b.n	8007924 <Sensor_CheckValue+0x74>
	}

	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 80078d8:	2300      	movs	r3, #0
 80078da:	73fb      	strb	r3, [r7, #15]
 80078dc:	e01e      	b.n	800791c <Sensor_CheckValue+0x6c>
	{
		if(sensor_list[i].addr == sen_addr)
 80078de:	7bfa      	ldrb	r2, [r7, #15]
 80078e0:	4913      	ldr	r1, [pc, #76]	; (8007930 <Sensor_CheckValue+0x80>)
 80078e2:	4613      	mov	r3, r2
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	4413      	add	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	440b      	add	r3, r1
 80078ec:	3302      	adds	r3, #2
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	88fa      	ldrh	r2, [r7, #6]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d10f      	bne.n	8007916 <Sensor_CheckValue+0x66>
		{
			return sensor_list[i].value >= value ? 1 : 0;
 80078f6:	7bfa      	ldrb	r2, [r7, #15]
 80078f8:	490d      	ldr	r1, [pc, #52]	; (8007930 <Sensor_CheckValue+0x80>)
 80078fa:	4613      	mov	r3, r2
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	4413      	add	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	440b      	add	r3, r1
 8007904:	3304      	adds	r3, #4
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	bf2c      	ite	cs
 800790e:	2301      	movcs	r3, #1
 8007910:	2300      	movcc	r3, #0
 8007912:	b2db      	uxtb	r3, r3
 8007914:	e006      	b.n	8007924 <Sensor_CheckValue+0x74>
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	3301      	adds	r3, #1
 800791a:	73fb      	strb	r3, [r7, #15]
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	2b1f      	cmp	r3, #31
 8007920:	d9dd      	bls.n	80078de <Sensor_CheckValue+0x2e>
		}
	}
	return 0;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	200131e4 	.word	0x200131e4

08007934 <Sensor_task>:
#include "FreeRTOS.h"
#include "task.h"


void Sensor_task( void * pvParameters )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d009      	beq.n	8007956 <Sensor_task+0x22>
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	e7fe      	b.n	8007954 <Sensor_task+0x20>

	Sensor_Init(vTaskDelay);
 8007956:	4809      	ldr	r0, [pc, #36]	; (800797c <Sensor_task+0x48>)
 8007958:	f7ff fe7c 	bl	8007654 <Sensor_Init>
	Sensor_UpdateList();
 800795c:	f7ff fe98 	bl	8007690 <Sensor_UpdateList>

	while(1)
	{
		if(Sensor_GPIOUpdateList())
 8007960:	f7ff fe8e 	bl	8007680 <Sensor_GPIOUpdateList>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <Sensor_task+0x3a>
		{
			Sensor_UpdateList();
 800796a:	f7ff fe91 	bl	8007690 <Sensor_UpdateList>
		}

		Sensor_UpdateValue();
 800796e:	f7ff fefb 	bl	8007768 <Sensor_UpdateValue>

		vTaskDelay(pdMS_TO_TICKS(40));
 8007972:	2028      	movs	r0, #40	; 0x28
 8007974:	f7fe f864 	bl	8005a40 <vTaskDelay>
		if(Sensor_GPIOUpdateList())
 8007978:	e7f2      	b.n	8007960 <Sensor_task+0x2c>
 800797a:	bf00      	nop
 800797c:	08005a41 	.word	0x08005a41

08007980 <Sensor_TaskInit>:
	}
}

void Sensor_TaskInit( void )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 8007986:	2300      	movs	r3, #0
 8007988:	607b      	str	r3, [r7, #4]

	//BaseType_t xReturned =
	xTaskCreate(
 800798a:	1d3b      	adds	r3, r7, #4
 800798c:	9301      	str	r3, [sp, #4]
 800798e:	2304      	movs	r3, #4
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	2301      	movs	r3, #1
 8007994:	2280      	movs	r2, #128	; 0x80
 8007996:	4904      	ldr	r1, [pc, #16]	; (80079a8 <Sensor_TaskInit+0x28>)
 8007998:	4804      	ldr	r0, [pc, #16]	; (80079ac <Sensor_TaskInit+0x2c>)
 800799a:	f7fd ff0d 	bl	80057b8 <xTaskCreate>
					128,	 						 /* Stack size in words, not bytes. */
                    ( void * ) 1,     			 	 /* Parameter passed into the task. */
                    4,				 				 /* Priority at which the task is created. */
                    &xHandle );   			   	     /* Used to pass out the created task's handle. */

}
 800799e:	bf00      	nop
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	0800b01c 	.word	0x0800b01c
 80079ac:	08007935 	.word	0x08007935

080079b0 <__NVIC_GetPriorityGrouping>:
{
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079b4:	4b04      	ldr	r3, [pc, #16]	; (80079c8 <__NVIC_GetPriorityGrouping+0x18>)
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	0a1b      	lsrs	r3, r3, #8
 80079ba:	f003 0307 	and.w	r3, r3, #7
}
 80079be:	4618      	mov	r0, r3
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	e000ed00 	.word	0xe000ed00

080079cc <__NVIC_EnableIRQ>:
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	4603      	mov	r3, r0
 80079d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	db0b      	blt.n	80079f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079de:	4909      	ldr	r1, [pc, #36]	; (8007a04 <__NVIC_EnableIRQ+0x38>)
 80079e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e4:	095b      	lsrs	r3, r3, #5
 80079e6:	79fa      	ldrb	r2, [r7, #7]
 80079e8:	f002 021f 	and.w	r2, r2, #31
 80079ec:	2001      	movs	r0, #1
 80079ee:	fa00 f202 	lsl.w	r2, r0, r2
 80079f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	e000e100 	.word	0xe000e100

08007a08 <__NVIC_SetPriority>:
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	6039      	str	r1, [r7, #0]
 8007a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	db0a      	blt.n	8007a32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a1c:	490d      	ldr	r1, [pc, #52]	; (8007a54 <__NVIC_SetPriority+0x4c>)
 8007a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	b2d2      	uxtb	r2, r2
 8007a26:	0112      	lsls	r2, r2, #4
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	440b      	add	r3, r1
 8007a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007a30:	e00a      	b.n	8007a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a32:	4909      	ldr	r1, [pc, #36]	; (8007a58 <__NVIC_SetPriority+0x50>)
 8007a34:	79fb      	ldrb	r3, [r7, #7]
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	3b04      	subs	r3, #4
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	b2d2      	uxtb	r2, r2
 8007a40:	0112      	lsls	r2, r2, #4
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	440b      	add	r3, r1
 8007a46:	761a      	strb	r2, [r3, #24]
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	e000e100 	.word	0xe000e100
 8007a58:	e000ed00 	.word	0xe000ed00

08007a5c <NVIC_EncodePriority>:
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b089      	sub	sp, #36	; 0x24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f003 0307 	and.w	r3, r3, #7
 8007a6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	f1c3 0307 	rsb	r3, r3, #7
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	bf28      	it	cs
 8007a7a:	2304      	movcs	r3, #4
 8007a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	3304      	adds	r3, #4
 8007a82:	2b06      	cmp	r3, #6
 8007a84:	d902      	bls.n	8007a8c <NVIC_EncodePriority+0x30>
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	3b03      	subs	r3, #3
 8007a8a:	e000      	b.n	8007a8e <NVIC_EncodePriority+0x32>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a90:	2201      	movs	r2, #1
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	fa02 f303 	lsl.w	r3, r2, r3
 8007a98:	1e5a      	subs	r2, r3, #1
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	401a      	ands	r2, r3
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aaa:	1e59      	subs	r1, r3, #1
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ab0:	4313      	orrs	r3, r2
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3724      	adds	r7, #36	; 0x24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <LL_USART_Enable>:
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	60da      	str	r2, [r3, #12]
}
 8007ad2:	bf00      	nop
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	615a      	str	r2, [r3, #20]
}
 8007afe:	bf00      	nop
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0320 	and.w	r3, r3, #32
 8007b1a:	2b20      	cmp	r3, #32
 8007b1c:	bf0c      	ite	eq
 8007b1e:	2301      	moveq	r3, #1
 8007b20:	2300      	movne	r3, #0
 8007b22:	b2db      	uxtb	r3, r3
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b40:	2b40      	cmp	r3, #64	; 0x40
 8007b42:	bf0c      	ite	eq
 8007b44:	2301      	moveq	r3, #1
 8007b46:	2300      	movne	r3, #0
 8007b48:	b2db      	uxtb	r3, r3
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f06f 0220 	mvn.w	r2, #32
 8007b64:	601a      	str	r2, [r3, #0]
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	f043 0220 	orr.w	r2, r3, #32
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	60da      	str	r2, [r3, #12]
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	b2db      	uxtb	r3, r3
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007bb8:	78fa      	ldrb	r2, [r7, #3]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	605a      	str	r2, [r3, #4]
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
	...

08007bcc <UART2_Init>:
#include "stm32f4xx_ll_utils.h"

static struct ring_buffer_struct* UART_rx_data;

void UART2_Init(struct ring_buffer_struct* rx_data)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b090      	sub	sp, #64	; 0x40
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8007bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	605a      	str	r2, [r3, #4]
 8007bde:	609a      	str	r2, [r3, #8]
 8007be0:	60da      	str	r2, [r3, #12]
 8007be2:	611a      	str	r2, [r3, #16]
 8007be4:	615a      	str	r2, [r3, #20]
 8007be6:	619a      	str	r2, [r3, #24]
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007be8:	f107 030c 	add.w	r3, r7, #12
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	605a      	str	r2, [r3, #4]
 8007bf2:	609a      	str	r2, [r3, #8]
 8007bf4:	60da      	str	r2, [r3, #12]
 8007bf6:	611a      	str	r2, [r3, #16]
 8007bf8:	615a      	str	r2, [r3, #20]

	/**USART2 GPIO Configuration
	PA3   ------> USART2_RX
	PD5   ------> USART2_TX
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8007bfa:	2308      	movs	r3, #8
 8007bfc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007bfe:	2302      	movs	r3, #2
 8007c00:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007c02:	2303      	movs	r3, #3
 8007c04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c06:	2300      	movs	r3, #0
 8007c08:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8007c0e:	2307      	movs	r3, #7
 8007c10:	623b      	str	r3, [r7, #32]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c12:	f107 030c 	add.w	r3, r7, #12
 8007c16:	4619      	mov	r1, r3
 8007c18:	4824      	ldr	r0, [pc, #144]	; (8007cac <UART2_Init+0xe0>)
 8007c1a:	f7fb faca 	bl	80031b2 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8007c1e:	2320      	movs	r3, #32
 8007c20:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007c22:	2302      	movs	r3, #2
 8007c24:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007c26:	2303      	movs	r3, #3
 8007c28:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8007c32:	2307      	movs	r3, #7
 8007c34:	623b      	str	r3, [r7, #32]
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007c36:	f107 030c 	add.w	r3, r7, #12
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	481c      	ldr	r0, [pc, #112]	; (8007cb0 <UART2_Init+0xe4>)
 8007c3e:	f7fb fab8 	bl	80031b2 <LL_GPIO_Init>

	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007c42:	f7ff feb5 	bl	80079b0 <__NVIC_GetPriorityGrouping>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff ff05 	bl	8007a5c <NVIC_EncodePriority>
 8007c52:	4603      	mov	r3, r0
 8007c54:	4619      	mov	r1, r3
 8007c56:	2026      	movs	r0, #38	; 0x26
 8007c58:	f7ff fed6 	bl	8007a08 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8007c5c:	2026      	movs	r0, #38	; 0x26
 8007c5e:	f7ff feb5 	bl	80079cc <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 115200;
 8007c62:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007c74:	230c      	movs	r3, #12
 8007c76:	637b      	str	r3, [r7, #52]	; 0x34
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	63bb      	str	r3, [r7, #56]	; 0x38
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_USART_Init(USART2, &USART_InitStruct);
 8007c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c84:	4619      	mov	r1, r3
 8007c86:	480b      	ldr	r0, [pc, #44]	; (8007cb4 <UART2_Init+0xe8>)
 8007c88:	f7fc f994 	bl	8003fb4 <LL_USART_Init>
	LL_USART_EnableIT_RXNE(USART2);
 8007c8c:	4809      	ldr	r0, [pc, #36]	; (8007cb4 <UART2_Init+0xe8>)
 8007c8e:	f7ff ff70 	bl	8007b72 <LL_USART_EnableIT_RXNE>
	LL_USART_ConfigAsyncMode(USART2);
 8007c92:	4808      	ldr	r0, [pc, #32]	; (8007cb4 <UART2_Init+0xe8>)
 8007c94:	f7ff ff23 	bl	8007ade <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART2);
 8007c98:	4806      	ldr	r0, [pc, #24]	; (8007cb4 <UART2_Init+0xe8>)
 8007c9a:	f7ff ff10 	bl	8007abe <LL_USART_Enable>

	UART_rx_data = rx_data;
 8007c9e:	4a06      	ldr	r2, [pc, #24]	; (8007cb8 <UART2_Init+0xec>)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6013      	str	r3, [r2, #0]
}
 8007ca4:	bf00      	nop
 8007ca6:	3740      	adds	r7, #64	; 0x40
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	40020000 	.word	0x40020000
 8007cb0:	40020c00 	.word	0x40020c00
 8007cb4:	40004400 	.word	0x40004400
 8007cb8:	20008b68 	.word	0x20008b68

08007cbc <UART2_SendData_byte>:

void UART2_SendData_byte(char data)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART2, data);
 8007cc6:	79fb      	ldrb	r3, [r7, #7]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	4807      	ldr	r0, [pc, #28]	; (8007ce8 <UART2_SendData_byte+0x2c>)
 8007ccc:	f7ff ff6e 	bl	8007bac <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TC(USART2));
 8007cd0:	bf00      	nop
 8007cd2:	4805      	ldr	r0, [pc, #20]	; (8007ce8 <UART2_SendData_byte+0x2c>)
 8007cd4:	f7ff ff2c 	bl	8007b30 <LL_USART_IsActiveFlag_TC>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d0f9      	beq.n	8007cd2 <UART2_SendData_byte+0x16>
}
 8007cde:	bf00      	nop
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	40004400 	.word	0x40004400

08007cec <UART2_SendData>:

void UART2_SendData(char* data, uint32_t data_length)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < data_length; ++i)
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	e009      	b.n	8007d10 <UART2_SendData+0x24>
	{
		UART2_SendData_byte(data[i]);
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	4413      	add	r3, r2
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7ff ffd9 	bl	8007cbc <UART2_SendData_byte>
	for(uint32_t i = 0; i < data_length; ++i)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d3f1      	bcc.n	8007cfc <UART2_SendData+0x10>
	}
}
 8007d18:	bf00      	nop
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <UART2_CharReception_Callback>:

void UART2_CharReception_Callback(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
	__IO uint8_t received_char;
	received_char = LL_USART_ReceiveData8(USART2);
 8007d26:	4808      	ldr	r0, [pc, #32]	; (8007d48 <UART2_CharReception_Callback+0x28>)
 8007d28:	f7ff ff33 	bl	8007b92 <LL_USART_ReceiveData8>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	71fb      	strb	r3, [r7, #7]

	RingBuffPush(UART_rx_data, (char)received_char);
 8007d30:	4b06      	ldr	r3, [pc, #24]	; (8007d4c <UART2_CharReception_Callback+0x2c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	79fa      	ldrb	r2, [r7, #7]
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	4611      	mov	r1, r2
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fa fd49 	bl	80027d2 <RingBuffPush>
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	40004400 	.word	0x40004400
 8007d4c:	20008b68 	.word	0x20008b68

08007d50 <Error_Callback>:

static void Error_Callback(void)
{
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
	//dummy
}
 8007d54:	bf00      	nop
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
	...

08007d60 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART2)) {
 8007d64:	4807      	ldr	r0, [pc, #28]	; (8007d84 <USART2_IRQHandler+0x24>)
 8007d66:	f7ff fed0 	bl	8007b0a <LL_USART_IsActiveFlag_RXNE>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d005      	beq.n	8007d7c <USART2_IRQHandler+0x1c>
		UART2_CharReception_Callback();
 8007d70:	f7ff ffd6 	bl	8007d20 <UART2_CharReception_Callback>
		LL_USART_ClearFlag_RXNE(USART2);
 8007d74:	4803      	ldr	r0, [pc, #12]	; (8007d84 <USART2_IRQHandler+0x24>)
 8007d76:	f7ff feee 	bl	8007b56 <LL_USART_ClearFlag_RXNE>
	} else {
		Error_Callback();
	}
}
 8007d7a:	e001      	b.n	8007d80 <USART2_IRQHandler+0x20>
		Error_Callback();
 8007d7c:	f7ff ffe8 	bl	8007d50 <Error_Callback>
}
 8007d80:	bf00      	nop
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	40004400 	.word	0x40004400

08007d88 <__NVIC_GetPriorityGrouping>:
{
 8007d88:	b480      	push	{r7}
 8007d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d8c:	4b04      	ldr	r3, [pc, #16]	; (8007da0 <__NVIC_GetPriorityGrouping+0x18>)
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	0a1b      	lsrs	r3, r3, #8
 8007d92:	f003 0307 	and.w	r3, r3, #7
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	e000ed00 	.word	0xe000ed00

08007da4 <__NVIC_EnableIRQ>:
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	4603      	mov	r3, r0
 8007dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	db0b      	blt.n	8007dce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007db6:	4909      	ldr	r1, [pc, #36]	; (8007ddc <__NVIC_EnableIRQ+0x38>)
 8007db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dbc:	095b      	lsrs	r3, r3, #5
 8007dbe:	79fa      	ldrb	r2, [r7, #7]
 8007dc0:	f002 021f 	and.w	r2, r2, #31
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8007dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007dce:	bf00      	nop
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	e000e100 	.word	0xe000e100

08007de0 <__NVIC_SetPriority>:
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	4603      	mov	r3, r0
 8007de8:	6039      	str	r1, [r7, #0]
 8007dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	db0a      	blt.n	8007e0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007df4:	490d      	ldr	r1, [pc, #52]	; (8007e2c <__NVIC_SetPriority+0x4c>)
 8007df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	b2d2      	uxtb	r2, r2
 8007dfe:	0112      	lsls	r2, r2, #4
 8007e00:	b2d2      	uxtb	r2, r2
 8007e02:	440b      	add	r3, r1
 8007e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007e08:	e00a      	b.n	8007e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e0a:	4909      	ldr	r1, [pc, #36]	; (8007e30 <__NVIC_SetPriority+0x50>)
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	f003 030f 	and.w	r3, r3, #15
 8007e12:	3b04      	subs	r3, #4
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	b2d2      	uxtb	r2, r2
 8007e18:	0112      	lsls	r2, r2, #4
 8007e1a:	b2d2      	uxtb	r2, r2
 8007e1c:	440b      	add	r3, r1
 8007e1e:	761a      	strb	r2, [r3, #24]
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	e000e100 	.word	0xe000e100
 8007e30:	e000ed00 	.word	0xe000ed00

08007e34 <NVIC_EncodePriority>:
{
 8007e34:	b480      	push	{r7}
 8007e36:	b089      	sub	sp, #36	; 0x24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f003 0307 	and.w	r3, r3, #7
 8007e46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	f1c3 0307 	rsb	r3, r3, #7
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	bf28      	it	cs
 8007e52:	2304      	movcs	r3, #4
 8007e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	2b06      	cmp	r3, #6
 8007e5c:	d902      	bls.n	8007e64 <NVIC_EncodePriority+0x30>
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	3b03      	subs	r3, #3
 8007e62:	e000      	b.n	8007e66 <NVIC_EncodePriority+0x32>
 8007e64:	2300      	movs	r3, #0
 8007e66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e68:	2201      	movs	r2, #1
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e70:	1e5a      	subs	r2, r3, #1
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	401a      	ands	r2, r3
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e82:	1e59      	subs	r1, r3, #1
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e88:	4313      	orrs	r3, r2
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3724      	adds	r7, #36	; 0x24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <LL_GPIO_ReadInputPort>:
{
 8007e96:	b480      	push	{r7}
 8007e98:	b083      	sub	sp, #12
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	691b      	ldr	r3, [r3, #16]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <LL_USART_Enable>:
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	60da      	str	r2, [r3, #12]
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <LL_USART_ConfigAsyncMode>:
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	615a      	str	r2, [r3, #20]
}
 8007eee:	bf00      	nop
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <LL_USART_IsActiveFlag_RXNE>:
{
 8007efa:	b480      	push	{r7}
 8007efc:	b083      	sub	sp, #12
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0320 	and.w	r3, r3, #32
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	bf0c      	ite	eq
 8007f0e:	2301      	moveq	r3, #1
 8007f10:	2300      	movne	r3, #0
 8007f12:	b2db      	uxtb	r3, r3
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <LL_USART_IsActiveFlag_TC>:
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f30:	2b40      	cmp	r3, #64	; 0x40
 8007f32:	bf0c      	ite	eq
 8007f34:	2301      	moveq	r3, #1
 8007f36:	2300      	movne	r3, #0
 8007f38:	b2db      	uxtb	r3, r3
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <LL_USART_ClearFlag_RXNE>:
{
 8007f46:	b480      	push	{r7}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f06f 0220 	mvn.w	r2, #32
 8007f54:	601a      	str	r2, [r3, #0]
}
 8007f56:	bf00      	nop
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <LL_USART_EnableIT_RXNE>:
{
 8007f62:	b480      	push	{r7}
 8007f64:	b083      	sub	sp, #12
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	f043 0220 	orr.w	r2, r3, #32
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	60da      	str	r2, [r3, #12]
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <LL_USART_ReceiveData8>:
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	b2db      	uxtb	r3, r3
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <LL_USART_TransmitData8>:
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007fa8:	78fa      	ldrb	r2, [r7, #3]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	605a      	str	r2, [r3, #4]
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
	...

08007fbc <UART3_Init>:
#include "stm32f4xx_ll_utils.h"

static struct ring_buffer_struct* UART_rx_data;

void UART3_Init(struct ring_buffer_struct* rx_data)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b090      	sub	sp, #64	; 0x40
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8007fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fc8:	2200      	movs	r2, #0
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	605a      	str	r2, [r3, #4]
 8007fce:	609a      	str	r2, [r3, #8]
 8007fd0:	60da      	str	r2, [r3, #12]
 8007fd2:	611a      	str	r2, [r3, #16]
 8007fd4:	615a      	str	r2, [r3, #20]
 8007fd6:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fd8:	f107 030c 	add.w	r3, r7, #12
 8007fdc:	2200      	movs	r2, #0
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	605a      	str	r2, [r3, #4]
 8007fe2:	609a      	str	r2, [r3, #8]
 8007fe4:	60da      	str	r2, [r3, #12]
 8007fe6:	611a      	str	r2, [r3, #16]
 8007fe8:	615a      	str	r2, [r3, #20]

	/**USART3 GPIO Configuration
	PD8   ------> USART3_TX
	PD9   ------> USART3_RX
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8007fea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007fee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8008000:	2307      	movs	r3, #7
 8008002:	623b      	str	r3, [r7, #32]
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008004:	f107 030c 	add.w	r3, r7, #12
 8008008:	4619      	mov	r1, r3
 800800a:	481c      	ldr	r0, [pc, #112]	; (800807c <UART3_Init+0xc0>)
 800800c:	f7fb f8d1 	bl	80031b2 <LL_GPIO_Init>

	NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008010:	f7ff feba 	bl	8007d88 <__NVIC_GetPriorityGrouping>
 8008014:	4603      	mov	r3, r0
 8008016:	2200      	movs	r2, #0
 8008018:	2100      	movs	r1, #0
 800801a:	4618      	mov	r0, r3
 800801c:	f7ff ff0a 	bl	8007e34 <NVIC_EncodePriority>
 8008020:	4603      	mov	r3, r0
 8008022:	4619      	mov	r1, r3
 8008024:	2027      	movs	r0, #39	; 0x27
 8008026:	f7ff fedb 	bl	8007de0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART3_IRQn);
 800802a:	2027      	movs	r0, #39	; 0x27
 800802c:	f7ff feba 	bl	8007da4 <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 115200;
 8008030:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8008036:	2300      	movs	r3, #0
 8008038:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800803a:	2300      	movs	r3, #0
 800803c:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800803e:	2300      	movs	r3, #0
 8008040:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008042:	230c      	movs	r3, #12
 8008044:	637b      	str	r3, [r7, #52]	; 0x34
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8008046:	2300      	movs	r3, #0
 8008048:	63bb      	str	r3, [r7, #56]	; 0x38
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800804a:	2300      	movs	r3, #0
 800804c:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_USART_Init(USART3, &USART_InitStruct);
 800804e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008052:	4619      	mov	r1, r3
 8008054:	480a      	ldr	r0, [pc, #40]	; (8008080 <UART3_Init+0xc4>)
 8008056:	f7fb ffad 	bl	8003fb4 <LL_USART_Init>
	LL_USART_EnableIT_RXNE(USART3);
 800805a:	4809      	ldr	r0, [pc, #36]	; (8008080 <UART3_Init+0xc4>)
 800805c:	f7ff ff81 	bl	8007f62 <LL_USART_EnableIT_RXNE>
	LL_USART_ConfigAsyncMode(USART3);
 8008060:	4807      	ldr	r0, [pc, #28]	; (8008080 <UART3_Init+0xc4>)
 8008062:	f7ff ff34 	bl	8007ece <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART3);
 8008066:	4806      	ldr	r0, [pc, #24]	; (8008080 <UART3_Init+0xc4>)
 8008068:	f7ff ff21 	bl	8007eae <LL_USART_Enable>

	UART_rx_data = rx_data;
 800806c:	4a05      	ldr	r2, [pc, #20]	; (8008084 <UART3_Init+0xc8>)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6013      	str	r3, [r2, #0]
}
 8008072:	bf00      	nop
 8008074:	3740      	adds	r7, #64	; 0x40
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	40020c00 	.word	0x40020c00
 8008080:	40004800 	.word	0x40004800
 8008084:	20008b6c 	.word	0x20008b6c

08008088 <Sensor_UpdateGpioInit>:

void Sensor_UpdateGpioInit()
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800808e:	463b      	mov	r3, r7
 8008090:	2200      	movs	r2, #0
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	605a      	str	r2, [r3, #4]
 8008096:	609a      	str	r2, [r3, #8]
 8008098:	60da      	str	r2, [r3, #12]
 800809a:	611a      	str	r2, [r3, #16]
 800809c:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800809e:	2301      	movs	r3, #1
 80080a0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80080a2:	2300      	movs	r3, #0
 80080a4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80080a6:	2302      	movs	r3, #2
 80080a8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080aa:	463b      	mov	r3, r7
 80080ac:	4619      	mov	r1, r3
 80080ae:	4803      	ldr	r0, [pc, #12]	; (80080bc <Sensor_UpdateGpioInit+0x34>)
 80080b0:	f7fb f87f 	bl	80031b2 <LL_GPIO_Init>
}
 80080b4:	bf00      	nop
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	40020000 	.word	0x40020000

080080c0 <Sensor_GpioValue>:

uint8_t Sensor_GpioValue()
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	af00      	add	r7, sp, #0
	return LL_GPIO_ReadInputPort(GPIOA) & LL_GPIO_PIN_0;
 80080c4:	4804      	ldr	r0, [pc, #16]	; (80080d8 <Sensor_GpioValue+0x18>)
 80080c6:	f7ff fee6 	bl	8007e96 <LL_GPIO_ReadInputPort>
 80080ca:	4603      	mov	r3, r0
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	b2db      	uxtb	r3, r3
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	40020000 	.word	0x40020000

080080dc <UART3_SendData_byte>:

void UART3_SendData_byte(char data)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4603      	mov	r3, r0
 80080e4:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART3, data);
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	4619      	mov	r1, r3
 80080ea:	4807      	ldr	r0, [pc, #28]	; (8008108 <UART3_SendData_byte+0x2c>)
 80080ec:	f7ff ff56 	bl	8007f9c <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TC(USART3));
 80080f0:	bf00      	nop
 80080f2:	4805      	ldr	r0, [pc, #20]	; (8008108 <UART3_SendData_byte+0x2c>)
 80080f4:	f7ff ff14 	bl	8007f20 <LL_USART_IsActiveFlag_TC>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d0f9      	beq.n	80080f2 <UART3_SendData_byte+0x16>
}
 80080fe:	bf00      	nop
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	40004800 	.word	0x40004800

0800810c <UART3_SendData>:

void UART3_SendData(char* data, uint32_t data_length)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < data_length; ++i)
 8008116:	2300      	movs	r3, #0
 8008118:	60fb      	str	r3, [r7, #12]
 800811a:	e009      	b.n	8008130 <UART3_SendData+0x24>
	{
		UART3_SendData_byte(data[i]);
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4413      	add	r3, r2
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	4618      	mov	r0, r3
 8008126:	f7ff ffd9 	bl	80080dc <UART3_SendData_byte>
	for(uint32_t i = 0; i < data_length; ++i)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3301      	adds	r3, #1
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	429a      	cmp	r2, r3
 8008136:	d3f1      	bcc.n	800811c <UART3_SendData+0x10>
	}
}
 8008138:	bf00      	nop
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <UART3_CharReception_Callback>:

void UART3_CharReception_Callback(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
	__IO uint8_t received_char;
	received_char = LL_USART_ReceiveData8(USART3);
 8008146:	4808      	ldr	r0, [pc, #32]	; (8008168 <UART3_CharReception_Callback+0x28>)
 8008148:	f7ff ff1b 	bl	8007f82 <LL_USART_ReceiveData8>
 800814c:	4603      	mov	r3, r0
 800814e:	71fb      	strb	r3, [r7, #7]

	RingBuffPush(UART_rx_data, (char)received_char);
 8008150:	4b06      	ldr	r3, [pc, #24]	; (800816c <UART3_CharReception_Callback+0x2c>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	79fa      	ldrb	r2, [r7, #7]
 8008156:	b2d2      	uxtb	r2, r2
 8008158:	4611      	mov	r1, r2
 800815a:	4618      	mov	r0, r3
 800815c:	f7fa fb39 	bl	80027d2 <RingBuffPush>
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	40004800 	.word	0x40004800
 800816c:	20008b6c 	.word	0x20008b6c

08008170 <Error_Callback>:

static void Error_Callback(void)
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
	//dummy
}
 8008174:	bf00      	nop
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
	...

08008180 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART3)) {
 8008184:	4807      	ldr	r0, [pc, #28]	; (80081a4 <USART3_IRQHandler+0x24>)
 8008186:	f7ff feb8 	bl	8007efa <LL_USART_IsActiveFlag_RXNE>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d005      	beq.n	800819c <USART3_IRQHandler+0x1c>
		UART3_CharReception_Callback();
 8008190:	f7ff ffd6 	bl	8008140 <UART3_CharReception_Callback>
		LL_USART_ClearFlag_RXNE(USART3);
 8008194:	4803      	ldr	r0, [pc, #12]	; (80081a4 <USART3_IRQHandler+0x24>)
 8008196:	f7ff fed6 	bl	8007f46 <LL_USART_ClearFlag_RXNE>
	} else {
		Error_Callback();
	}
}
 800819a:	e001      	b.n	80081a0 <USART3_IRQHandler+0x20>
		Error_Callback();
 800819c:	f7ff ffe8 	bl	8008170 <Error_Callback>
}
 80081a0:	bf00      	nop
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	40004800 	.word	0x40004800

080081a8 <MX_FREERTOS_Init>:

void StartDefaultTask(void *argument);
void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

void MX_FREERTOS_Init(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
	Led_TaskInit();
 80081ac:	f7ff f884 	bl	80072b8 <Led_TaskInit>
	Relay_TaskInit();
 80081b0:	f7ff fa26 	bl	8007600 <Relay_TaskInit>

	ESP_TaskInit();
 80081b4:	f7fe ffb2 	bl	800711c <ESP_TaskInit>

	BitEngine_TaskInit();
 80081b8:	f7fe fe00 	bl	8006dbc <BitEngine_TaskInit>
	Sensor_TaskInit();
 80081bc:	f7ff fbe0 	bl	8007980 <Sensor_TaskInit>

	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80081c0:	4a04      	ldr	r2, [pc, #16]	; (80081d4 <MX_FREERTOS_Init+0x2c>)
 80081c2:	2100      	movs	r1, #0
 80081c4:	4804      	ldr	r0, [pc, #16]	; (80081d8 <MX_FREERTOS_Init+0x30>)
 80081c6:	f7fb fff7 	bl	80041b8 <osThreadNew>
 80081ca:	4602      	mov	r2, r0
 80081cc:	4b03      	ldr	r3, [pc, #12]	; (80081dc <MX_FREERTOS_Init+0x34>)
 80081ce:	601a      	str	r2, [r3, #0]
}
 80081d0:	bf00      	nop
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	0800b050 	.word	0x0800b050
 80081d8:	080081e1 	.word	0x080081e1
 80081dc:	200157b0 	.word	0x200157b0

080081e0 <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 80081e8:	2001      	movs	r0, #1
 80081ea:	f7fc f88b 	bl	8004304 <osDelay>
 80081ee:	e7fb      	b.n	80081e8 <StartDefaultTask+0x8>

080081f0 <LL_RCC_HSI_Enable>:
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80081f4:	4a05      	ldr	r2, [pc, #20]	; (800820c <LL_RCC_HSI_Enable+0x1c>)
 80081f6:	4b05      	ldr	r3, [pc, #20]	; (800820c <LL_RCC_HSI_Enable+0x1c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f043 0301 	orr.w	r3, r3, #1
 80081fe:	6013      	str	r3, [r2, #0]
}
 8008200:	bf00      	nop
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	40023800 	.word	0x40023800

08008210 <LL_RCC_HSI_IsReady>:
{
 8008210:	b480      	push	{r7}
 8008212:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8008214:	4b06      	ldr	r3, [pc, #24]	; (8008230 <LL_RCC_HSI_IsReady+0x20>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b02      	cmp	r3, #2
 800821e:	bf0c      	ite	eq
 8008220:	2301      	moveq	r3, #1
 8008222:	2300      	movne	r3, #0
 8008224:	b2db      	uxtb	r3, r3
}
 8008226:	4618      	mov	r0, r3
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	40023800 	.word	0x40023800

08008234 <LL_RCC_HSI_SetCalibTrimming>:
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800823c:	4907      	ldr	r1, [pc, #28]	; (800825c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800823e:	4b07      	ldr	r3, [pc, #28]	; (800825c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	4313      	orrs	r3, r2
 800824c:	600b      	str	r3, [r1, #0]
}
 800824e:	bf00      	nop
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40023800 	.word	0x40023800

08008260 <LL_RCC_LSI_Enable>:
{
 8008260:	b480      	push	{r7}
 8008262:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8008264:	4a05      	ldr	r2, [pc, #20]	; (800827c <LL_RCC_LSI_Enable+0x1c>)
 8008266:	4b05      	ldr	r3, [pc, #20]	; (800827c <LL_RCC_LSI_Enable+0x1c>)
 8008268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800826a:	f043 0301 	orr.w	r3, r3, #1
 800826e:	6753      	str	r3, [r2, #116]	; 0x74
}
 8008270:	bf00      	nop
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	40023800 	.word	0x40023800

08008280 <LL_RCC_LSI_IsReady>:
{
 8008280:	b480      	push	{r7}
 8008282:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8008284:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <LL_RCC_LSI_IsReady+0x20>)
 8008286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b02      	cmp	r3, #2
 800828e:	bf0c      	ite	eq
 8008290:	2301      	moveq	r3, #1
 8008292:	2300      	movne	r3, #0
 8008294:	b2db      	uxtb	r3, r3
}
 8008296:	4618      	mov	r0, r3
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	40023800 	.word	0x40023800

080082a4 <LL_RCC_SetSysClkSource>:
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80082ac:	4906      	ldr	r1, [pc, #24]	; (80082c8 <LL_RCC_SetSysClkSource+0x24>)
 80082ae:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <LL_RCC_SetSysClkSource+0x24>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f023 0203 	bic.w	r2, r3, #3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	608b      	str	r3, [r1, #8]
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	40023800 	.word	0x40023800

080082cc <LL_RCC_GetSysClkSource>:
{
 80082cc:	b480      	push	{r7}
 80082ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80082d0:	4b04      	ldr	r3, [pc, #16]	; (80082e4 <LL_RCC_GetSysClkSource+0x18>)
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	f003 030c 	and.w	r3, r3, #12
}
 80082d8:	4618      	mov	r0, r3
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	40023800 	.word	0x40023800

080082e8 <LL_RCC_SetAHBPrescaler>:
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80082f0:	4906      	ldr	r1, [pc, #24]	; (800830c <LL_RCC_SetAHBPrescaler+0x24>)
 80082f2:	4b06      	ldr	r3, [pc, #24]	; (800830c <LL_RCC_SetAHBPrescaler+0x24>)
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	608b      	str	r3, [r1, #8]
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	40023800 	.word	0x40023800

08008310 <LL_RCC_SetAPB1Prescaler>:
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008318:	4906      	ldr	r1, [pc, #24]	; (8008334 <LL_RCC_SetAPB1Prescaler+0x24>)
 800831a:	4b06      	ldr	r3, [pc, #24]	; (8008334 <LL_RCC_SetAPB1Prescaler+0x24>)
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4313      	orrs	r3, r2
 8008326:	608b      	str	r3, [r1, #8]
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	40023800 	.word	0x40023800

08008338 <LL_RCC_SetAPB2Prescaler>:
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008340:	4906      	ldr	r1, [pc, #24]	; (800835c <LL_RCC_SetAPB2Prescaler+0x24>)
 8008342:	4b06      	ldr	r3, [pc, #24]	; (800835c <LL_RCC_SetAPB2Prescaler+0x24>)
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4313      	orrs	r3, r2
 800834e:	608b      	str	r3, [r1, #8]
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	40023800 	.word	0x40023800

08008360 <LL_RCC_SetRTCClockSource>:
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008368:	4906      	ldr	r1, [pc, #24]	; (8008384 <LL_RCC_SetRTCClockSource+0x24>)
 800836a:	4b06      	ldr	r3, [pc, #24]	; (8008384 <LL_RCC_SetRTCClockSource+0x24>)
 800836c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4313      	orrs	r3, r2
 8008376:	670b      	str	r3, [r1, #112]	; 0x70
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	40023800 	.word	0x40023800

08008388 <LL_RCC_EnableRTC>:
{
 8008388:	b480      	push	{r7}
 800838a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800838c:	4a05      	ldr	r2, [pc, #20]	; (80083a4 <LL_RCC_EnableRTC+0x1c>)
 800838e:	4b05      	ldr	r3, [pc, #20]	; (80083a4 <LL_RCC_EnableRTC+0x1c>)
 8008390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008396:	6713      	str	r3, [r2, #112]	; 0x70
}
 8008398:	bf00      	nop
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	40023800 	.word	0x40023800

080083a8 <LL_RCC_ForceBackupDomainReset>:
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80083ac:	4a05      	ldr	r2, [pc, #20]	; (80083c4 <LL_RCC_ForceBackupDomainReset+0x1c>)
 80083ae:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <LL_RCC_ForceBackupDomainReset+0x1c>)
 80083b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083b6:	6713      	str	r3, [r2, #112]	; 0x70
}
 80083b8:	bf00      	nop
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	40023800 	.word	0x40023800

080083c8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80083cc:	4a05      	ldr	r2, [pc, #20]	; (80083e4 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 80083ce:	4b05      	ldr	r3, [pc, #20]	; (80083e4 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 80083d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083d6:	6713      	str	r3, [r2, #112]	; 0x70
}
 80083d8:	bf00      	nop
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	40023800 	.word	0x40023800

080083e8 <LL_RCC_PLL_Enable>:
{
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80083ec:	4a05      	ldr	r2, [pc, #20]	; (8008404 <LL_RCC_PLL_Enable+0x1c>)
 80083ee:	4b05      	ldr	r3, [pc, #20]	; (8008404 <LL_RCC_PLL_Enable+0x1c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083f6:	6013      	str	r3, [r2, #0]
}
 80083f8:	bf00      	nop
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	40023800 	.word	0x40023800

08008408 <LL_RCC_PLL_IsReady>:
{
 8008408:	b480      	push	{r7}
 800840a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800840c:	4b07      	ldr	r3, [pc, #28]	; (800842c <LL_RCC_PLL_IsReady+0x24>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008414:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008418:	bf0c      	ite	eq
 800841a:	2301      	moveq	r3, #1
 800841c:	2300      	movne	r3, #0
 800841e:	b2db      	uxtb	r3, r3
}
 8008420:	4618      	mov	r0, r3
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	40023800 	.word	0x40023800

08008430 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800843e:	480d      	ldr	r0, [pc, #52]	; (8008474 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8008440:	4b0c      	ldr	r3, [pc, #48]	; (8008474 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8008446:	4013      	ands	r3, r2
 8008448:	68f9      	ldr	r1, [r7, #12]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	4311      	orrs	r1, r2
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	0192      	lsls	r2, r2, #6
 8008452:	430a      	orrs	r2, r1
 8008454:	4313      	orrs	r3, r2
 8008456:	6043      	str	r3, [r0, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8008458:	4906      	ldr	r1, [pc, #24]	; (8008474 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800845a:	4b06      	ldr	r3, [pc, #24]	; (8008474 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	4313      	orrs	r3, r2
 8008466:	604b      	str	r3, [r1, #4]
}
 8008468:	bf00      	nop
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	40023800 	.word	0x40023800
 8008478:	ffbf8000 	.word	0xffbf8000

0800847c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008484:	4908      	ldr	r1, [pc, #32]	; (80084a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008486:	4b08      	ldr	r3, [pc, #32]	; (80084a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4313      	orrs	r3, r2
 800848e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008490:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4013      	ands	r3, r2
 8008498:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800849a:	68fb      	ldr	r3, [r7, #12]
}
 800849c:	bf00      	nop
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr
 80084a8:	40023800 	.word	0x40023800

080084ac <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80084b4:	4908      	ldr	r1, [pc, #32]	; (80084d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80084b6:	4b08      	ldr	r3, [pc, #32]	; (80084d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80084b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4313      	orrs	r3, r2
 80084be:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80084c0:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80084c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4013      	ands	r3, r2
 80084c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80084ca:	68fb      	ldr	r3, [r7, #12]
}
 80084cc:	bf00      	nop
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	40023800 	.word	0x40023800

080084dc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80084e4:	4906      	ldr	r1, [pc, #24]	; (8008500 <LL_FLASH_SetLatency+0x24>)
 80084e6:	4b06      	ldr	r3, [pc, #24]	; (8008500 <LL_FLASH_SetLatency+0x24>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f023 020f 	bic.w	r2, r3, #15
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	600b      	str	r3, [r1, #0]
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	40023c00 	.word	0x40023c00

08008504 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8008504:	b480      	push	{r7}
 8008506:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8008508:	4b04      	ldr	r3, [pc, #16]	; (800851c <LL_FLASH_GetLatency+0x18>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 030f 	and.w	r3, r3, #15
}
 8008510:	4618      	mov	r0, r3
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	40023c00 	.word	0x40023c00

08008520 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8008528:	4906      	ldr	r1, [pc, #24]	; (8008544 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800852a:	4b06      	ldr	r3, [pc, #24]	; (8008544 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4313      	orrs	r3, r2
 8008536:	600b      	str	r3, [r1, #0]
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	40007000 	.word	0x40007000

08008548 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800854c:	4a05      	ldr	r2, [pc, #20]	; (8008564 <LL_PWR_EnableBkUpAccess+0x1c>)
 800854e:	4b05      	ldr	r3, [pc, #20]	; (8008564 <LL_PWR_EnableBkUpAccess+0x1c>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008556:	6013      	str	r3, [r2, #0]
}
 8008558:	bf00      	nop
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	40007000 	.word	0x40007000

08008568 <main>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);

int main(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	af00      	add	r7, sp, #0
	HAL_Init();
 800856c:	f7fa f976 	bl	800285c <HAL_Init>
	SystemClock_Config();
 8008570:	f000 f824 	bl	80085bc <SystemClock_Config>

	RTC_Init();
 8008574:	f000 f954 	bl	8008820 <RTC_Init>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008578:	2004      	movs	r0, #4
 800857a:	f7ff ff7f 	bl	800847c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800857e:	2080      	movs	r0, #128	; 0x80
 8008580:	f7ff ff7c 	bl	800847c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008584:	2001      	movs	r0, #1
 8008586:	f7ff ff79 	bl	800847c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800858a:	2002      	movs	r0, #2
 800858c:	f7ff ff76 	bl	800847c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8008590:	2008      	movs	r0, #8
 8008592:	f7ff ff73 	bl	800847c <LL_AHB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8008596:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800859a:	f7ff ff87 	bl	80084ac <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800859e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80085a2:	f7ff ff83 	bl	80084ac <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80085a6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80085aa:	f7ff ff7f 	bl	80084ac <LL_APB1_GRP1_EnableClock>
//  MX_USART1_UART_Init();
//  MX_USART2_UART_Init();
//  MX_USART3_UART_Init();
//  MX_FATFS_Init();

	osKernelInitialize();
 80085ae:	f7fb fd99 	bl	80040e4 <osKernelInitialize>
	MX_FREERTOS_Init();
 80085b2:	f7ff fdf9 	bl	80081a8 <MX_FREERTOS_Init>
	osKernelStart();
 80085b6:	f7fb fdc9 	bl	800414c <osKernelStart>

	while (1) {}
 80085ba:	e7fe      	b.n	80085ba <main+0x52>

080085bc <SystemClock_Config>:
}


void SystemClock_Config(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80085c0:	2005      	movs	r0, #5
 80085c2:	f7ff ff8b 	bl	80084dc <LL_FLASH_SetLatency>

	if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
 80085c6:	f7ff ff9d 	bl	8008504 <LL_FLASH_GetLatency>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b05      	cmp	r3, #5
 80085ce:	d001      	beq.n	80085d4 <SystemClock_Config+0x18>
	{
	Error_Handler();
 80085d0:	f000 f866 	bl	80086a0 <Error_Handler>
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80085d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80085d8:	f7ff ffa2 	bl	8008520 <LL_PWR_SetRegulVoltageScaling>
	LL_RCC_HSI_SetCalibTrimming(16);
 80085dc:	2010      	movs	r0, #16
 80085de:	f7ff fe29 	bl	8008234 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_HSI_Enable();
 80085e2:	f7ff fe05 	bl	80081f0 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while(LL_RCC_HSI_IsReady() != 1) {}
 80085e6:	bf00      	nop
 80085e8:	f7ff fe12 	bl	8008210 <LL_RCC_HSI_IsReady>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d1fa      	bne.n	80085e8 <SystemClock_Config+0x2c>
	LL_RCC_LSI_Enable();
 80085f2:	f7ff fe35 	bl	8008260 <LL_RCC_LSI_Enable>

	/* Wait till LSI is ready */
	while(LL_RCC_LSI_IsReady() != 1) {}
 80085f6:	bf00      	nop
 80085f8:	f7ff fe42 	bl	8008280 <LL_RCC_LSI_IsReady>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d1fa      	bne.n	80085f8 <SystemClock_Config+0x3c>
	LL_PWR_EnableBkUpAccess();
 8008602:	f7ff ffa1 	bl	8008548 <LL_PWR_EnableBkUpAccess>
	LL_RCC_ForceBackupDomainReset();
 8008606:	f7ff fecf 	bl	80083a8 <LL_RCC_ForceBackupDomainReset>
	LL_RCC_ReleaseBackupDomainReset();
 800860a:	f7ff fedd 	bl	80083c8 <LL_RCC_ReleaseBackupDomainReset>
	LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 800860e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008612:	f7ff fea5 	bl	8008360 <LL_RCC_SetRTCClockSource>
	LL_RCC_EnableRTC();
 8008616:	f7ff feb7 	bl	8008388 <LL_RCC_EnableRTC>
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_2);
 800861a:	2300      	movs	r3, #0
 800861c:	22a8      	movs	r2, #168	; 0xa8
 800861e:	2108      	movs	r1, #8
 8008620:	2000      	movs	r0, #0
 8008622:	f7ff ff05 	bl	8008430 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8008626:	f7ff fedf 	bl	80083e8 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1) {}
 800862a:	bf00      	nop
 800862c:	f7ff feec 	bl	8008408 <LL_RCC_PLL_IsReady>
 8008630:	4603      	mov	r3, r0
 8008632:	2b01      	cmp	r3, #1
 8008634:	d1fa      	bne.n	800862c <SystemClock_Config+0x70>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8008636:	2000      	movs	r0, #0
 8008638:	f7ff fe56 	bl	80082e8 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800863c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8008640:	f7ff fe66 	bl	8008310 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8008644:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008648:	f7ff fe76 	bl	8008338 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800864c:	2002      	movs	r0, #2
 800864e:	f7ff fe29 	bl	80082a4 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {}
 8008652:	bf00      	nop
 8008654:	f7ff fe3a 	bl	80082cc <LL_RCC_GetSysClkSource>
 8008658:	4603      	mov	r3, r0
 800865a:	2b08      	cmp	r3, #8
 800865c:	d1fa      	bne.n	8008654 <SystemClock_Config+0x98>
	LL_SetSystemCoreClock(168000000);
 800865e:	4806      	ldr	r0, [pc, #24]	; (8008678 <SystemClock_Config+0xbc>)
 8008660:	f7fb fd28 	bl	80040b4 <LL_SetSystemCoreClock>

	/* Update the time base */
	if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8008664:	2000      	movs	r0, #0
 8008666:	f000 fa47 	bl	8008af8 <HAL_InitTick>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8008670:	f000 f816 	bl	80086a0 <Error_Handler>
	};
}
 8008674:	bf00      	nop
 8008676:	bd80      	pop	{r7, pc}
 8008678:	0a037a00 	.word	0x0a037a00

0800867c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a04      	ldr	r2, [pc, #16]	; (800869c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d101      	bne.n	8008692 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800868e:	f7fa f907 	bl	80028a0 <HAL_IncTick>
	}
}
 8008692:	bf00      	nop
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	40010000 	.word	0x40010000

080086a0 <Error_Handler>:

void Error_Handler(void)
{
 80086a0:	b480      	push	{r7}
 80086a2:	af00      	add	r7, sp, #0
}
 80086a4:	bf00      	nop
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
	...

080086b0 <LL_RCC_EnableRTC>:
{
 80086b0:	b480      	push	{r7}
 80086b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80086b4:	4a05      	ldr	r2, [pc, #20]	; (80086cc <LL_RCC_EnableRTC+0x1c>)
 80086b6:	4b05      	ldr	r3, [pc, #20]	; (80086cc <LL_RCC_EnableRTC+0x1c>)
 80086b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086be:	6713      	str	r3, [r2, #112]	; 0x70
}
 80086c0:	bf00      	nop
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	40023800 	.word	0x40023800

080086d0 <LL_RTC_DisableInitMode>:
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086de:	60da      	str	r2, [r3, #12]
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <LL_RTC_SetAsynchPrescaler>:
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	041b      	lsls	r3, r3, #16
 8008702:	431a      	orrs	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	611a      	str	r2, [r3, #16]
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <LL_RTC_SetSynchPrescaler>:
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008726:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	431a      	orrs	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	611a      	str	r2, [r3, #16]
}
 8008732:	bf00      	nop
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <LL_RTC_EnableWriteProtection>:
{
 800873e:	b480      	push	{r7}
 8008740:	b083      	sub	sp, #12
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	22ff      	movs	r2, #255	; 0xff
 800874a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <LL_RTC_DisableWriteProtection>:
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	22ca      	movs	r2, #202	; 0xca
 8008764:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2253      	movs	r2, #83	; 0x53
 800876a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <LL_RTC_TIME_GetHour>:
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU))) >> RTC_TR_HU_Pos);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	0c1b      	lsrs	r3, r3, #16
 8008786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800878a:	4618      	mov	r0, r3
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <LL_RTC_TIME_GetMinute>:
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU))>> RTC_TR_MNU_Pos);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	0a1b      	lsrs	r3, r3, #8
 80087a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <LL_RTC_DATE_GetWeekDay>:
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->DR, RTC_DR_WDU) >> RTC_DR_WDU_Pos);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	0b5b      	lsrs	r3, r3, #13
 80087c2:	f003 0307 	and.w	r3, r3, #7
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <LL_RTC_BAK_SetRegister>:
{
 80087d2:	b490      	push	{r4, r7}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t)(&(RTCx->BKP0R));
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3350      	adds	r3, #80	; 0x50
 80087e2:	461c      	mov	r4, r3
  tmp += (BackupRegister * 4U);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	441c      	add	r4, r3
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80087ea:	4622      	mov	r2, r4
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6013      	str	r3, [r2, #0]
}
 80087f0:	bf00      	nop
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bc90      	pop	{r4, r7}
 80087f8:	4770      	bx	lr

080087fa <LL_RTC_BAK_GetRegister>:
{
 80087fa:	b490      	push	{r4, r7}
 80087fc:	b082      	sub	sp, #8
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t)(&(RTCx->BKP0R));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	3350      	adds	r3, #80	; 0x50
 8008808:	461c      	mov	r4, r3
  tmp += (BackupRegister * 4U);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	441c      	add	r4, r3
  return (*(__IO uint32_t *)tmp);
 8008810:	4623      	mov	r3, r4
 8008812:	681b      	ldr	r3, [r3, #0]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bc90      	pop	{r4, r7}
 800881c:	4770      	bx	lr
	...

08008820 <RTC_Init>:
#include "rtc.h"

void RTC_Init(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
	LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8008826:	f107 030c 	add.w	r3, r7, #12
 800882a:	2200      	movs	r2, #0
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	605a      	str	r2, [r3, #4]
 8008830:	609a      	str	r2, [r3, #8]
	LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8008832:	1d3b      	adds	r3, r7, #4
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	605a      	str	r2, [r3, #4]
	LL_RTC_DateTypeDef RTC_DateStruct = {0};
 800883a:	2300      	movs	r3, #0
 800883c:	603b      	str	r3, [r7, #0]

	LL_RCC_EnableRTC();
 800883e:	f7ff ff37 	bl	80086b0 <LL_RCC_EnableRTC>

	RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8008842:	2300      	movs	r3, #0
 8008844:	60fb      	str	r3, [r7, #12]
	RTC_InitStruct.AsynchPrescaler = 127;
 8008846:	237f      	movs	r3, #127	; 0x7f
 8008848:	613b      	str	r3, [r7, #16]
	RTC_InitStruct.SynchPrescaler = 255;
 800884a:	23ff      	movs	r3, #255	; 0xff
 800884c:	617b      	str	r3, [r7, #20]
	LL_RTC_Init(RTC, &RTC_InitStruct);
 800884e:	f107 030c 	add.w	r3, r7, #12
 8008852:	4619      	mov	r1, r3
 8008854:	481a      	ldr	r0, [pc, #104]	; (80088c0 <RTC_Init+0xa0>)
 8008856:	f7fa ff83 	bl	8003760 <LL_RTC_Init>
	LL_RTC_SetAsynchPrescaler(RTC, 127);
 800885a:	217f      	movs	r1, #127	; 0x7f
 800885c:	4818      	ldr	r0, [pc, #96]	; (80088c0 <RTC_Init+0xa0>)
 800885e:	f7ff ff45 	bl	80086ec <LL_RTC_SetAsynchPrescaler>
	LL_RTC_SetSynchPrescaler(RTC, 255);
 8008862:	21ff      	movs	r1, #255	; 0xff
 8008864:	4816      	ldr	r0, [pc, #88]	; (80088c0 <RTC_Init+0xa0>)
 8008866:	f7ff ff55 	bl	8008714 <LL_RTC_SetSynchPrescaler>

	if(LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0) != 0x32F2)
 800886a:	2100      	movs	r1, #0
 800886c:	4814      	ldr	r0, [pc, #80]	; (80088c0 <RTC_Init+0xa0>)
 800886e:	f7ff ffc4 	bl	80087fa <LL_RTC_BAK_GetRegister>
 8008872:	4602      	mov	r2, r0
 8008874:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8008878:	429a      	cmp	r2, r3
 800887a:	d01d      	beq.n	80088b8 <RTC_Init+0x98>
	{
		RTC_TimeStruct.Hours = 0;
 800887c:	2300      	movs	r3, #0
 800887e:	723b      	strb	r3, [r7, #8]
		RTC_TimeStruct.Minutes = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	727b      	strb	r3, [r7, #9]
		RTC_TimeStruct.Seconds = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	72bb      	strb	r3, [r7, #10]
		LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_TimeStruct);
 8008888:	1d3b      	adds	r3, r7, #4
 800888a:	461a      	mov	r2, r3
 800888c:	2101      	movs	r1, #1
 800888e:	480c      	ldr	r0, [pc, #48]	; (80088c0 <RTC_Init+0xa0>)
 8008890:	f7fa ff96 	bl	80037c0 <LL_RTC_TIME_Init>
		RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;
 8008894:	2301      	movs	r3, #1
 8008896:	703b      	strb	r3, [r7, #0]
		RTC_DateStruct.Month = LL_RTC_MONTH_JANUARY;
 8008898:	2301      	movs	r3, #1
 800889a:	707b      	strb	r3, [r7, #1]
		RTC_DateStruct.Year = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	70fb      	strb	r3, [r7, #3]
		LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_DateStruct);
 80088a0:	463b      	mov	r3, r7
 80088a2:	461a      	mov	r2, r3
 80088a4:	2101      	movs	r1, #1
 80088a6:	4806      	ldr	r0, [pc, #24]	; (80088c0 <RTC_Init+0xa0>)
 80088a8:	f7fb f832 	bl	8003910 <LL_RTC_DATE_Init>
		LL_RTC_BAK_SetRegister(RTC,LL_RTC_BKP_DR0,0x32F2);
 80088ac:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80088b0:	2100      	movs	r1, #0
 80088b2:	4803      	ldr	r0, [pc, #12]	; (80088c0 <RTC_Init+0xa0>)
 80088b4:	f7ff ff8d 	bl	80087d2 <LL_RTC_BAK_SetRegister>
	}

}
 80088b8:	bf00      	nop
 80088ba:	3718      	adds	r7, #24
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	40002800 	.word	0x40002800

080088c4 <RTC_GetTime>:

void RTC_GetTime(struct tm* time)
{
 80088c4:	b590      	push	{r4, r7, lr}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
	time->tm_hour = __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 80088cc:	4839      	ldr	r0, [pc, #228]	; (80089b4 <RTC_GetTime+0xf0>)
 80088ce:	f7ff ff53 	bl	8008778 <LL_RTC_TIME_GetHour>
 80088d2:	4603      	mov	r3, r0
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	111b      	asrs	r3, r3, #4
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	f003 030f 	and.w	r3, r3, #15
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	461a      	mov	r2, r3
 80088e2:	0092      	lsls	r2, r2, #2
 80088e4:	4413      	add	r3, r2
 80088e6:	005b      	lsls	r3, r3, #1
 80088e8:	b2dc      	uxtb	r4, r3
 80088ea:	4832      	ldr	r0, [pc, #200]	; (80089b4 <RTC_GetTime+0xf0>)
 80088ec:	f7ff ff44 	bl	8008778 <LL_RTC_TIME_GetHour>
 80088f0:	4603      	mov	r3, r0
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	f003 030f 	and.w	r3, r3, #15
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	4423      	add	r3, r4
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	461a      	mov	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	609a      	str	r2, [r3, #8]
	time->tm_min = 	__LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8008904:	482b      	ldr	r0, [pc, #172]	; (80089b4 <RTC_GetTime+0xf0>)
 8008906:	f7ff ff46 	bl	8008796 <LL_RTC_TIME_GetMinute>
 800890a:	4603      	mov	r3, r0
 800890c:	b2db      	uxtb	r3, r3
 800890e:	111b      	asrs	r3, r3, #4
 8008910:	b2db      	uxtb	r3, r3
 8008912:	f003 030f 	and.w	r3, r3, #15
 8008916:	b2db      	uxtb	r3, r3
 8008918:	461a      	mov	r2, r3
 800891a:	0092      	lsls	r2, r2, #2
 800891c:	4413      	add	r3, r2
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	b2dc      	uxtb	r4, r3
 8008922:	4824      	ldr	r0, [pc, #144]	; (80089b4 <RTC_GetTime+0xf0>)
 8008924:	f7ff ff37 	bl	8008796 <LL_RTC_TIME_GetMinute>
 8008928:	4603      	mov	r3, r0
 800892a:	b2db      	uxtb	r3, r3
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	b2db      	uxtb	r3, r3
 8008932:	4423      	add	r3, r4
 8008934:	b2db      	uxtb	r3, r3
 8008936:	461a      	mov	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	605a      	str	r2, [r3, #4]

	// RTC HAS DIF WEEK DAY MASKS
	//tm  0 - sunday 6 - saturday
	//rtc 1 - monday 7 - sunday
	switch(LL_RTC_DATE_GetWeekDay(RTC))
 800893c:	481d      	ldr	r0, [pc, #116]	; (80089b4 <RTC_GetTime+0xf0>)
 800893e:	f7ff ff39 	bl	80087b4 <LL_RTC_DATE_GetWeekDay>
 8008942:	4603      	mov	r3, r0
 8008944:	3b01      	subs	r3, #1
 8008946:	2b06      	cmp	r3, #6
 8008948:	d82c      	bhi.n	80089a4 <RTC_GetTime+0xe0>
 800894a:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <RTC_GetTime+0x8c>)
 800894c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008950:	0800896d 	.word	0x0800896d
 8008954:	08008975 	.word	0x08008975
 8008958:	0800897d 	.word	0x0800897d
 800895c:	08008985 	.word	0x08008985
 8008960:	0800898d 	.word	0x0800898d
 8008964:	08008995 	.word	0x08008995
 8008968:	0800899d 	.word	0x0800899d
	{
	case LL_RTC_WEEKDAY_MONDAY: 	time->tm_wday = 1; break;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	619a      	str	r2, [r3, #24]
 8008972:	e01b      	b.n	80089ac <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_TUESDAY: 	time->tm_wday = 2; break;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	619a      	str	r2, [r3, #24]
 800897a:	e017      	b.n	80089ac <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_WEDNESDAY: 	time->tm_wday = 3; break;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2203      	movs	r2, #3
 8008980:	619a      	str	r2, [r3, #24]
 8008982:	e013      	b.n	80089ac <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_THURSDAY: 	time->tm_wday = 4; break;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2204      	movs	r2, #4
 8008988:	619a      	str	r2, [r3, #24]
 800898a:	e00f      	b.n	80089ac <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_FRIDAY: 	time->tm_wday = 5; break;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2205      	movs	r2, #5
 8008990:	619a      	str	r2, [r3, #24]
 8008992:	e00b      	b.n	80089ac <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_SATURDAY: 	time->tm_wday = 6; break;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2206      	movs	r2, #6
 8008998:	619a      	str	r2, [r3, #24]
 800899a:	e007      	b.n	80089ac <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_SUNDAY: 	time->tm_wday = 0; break;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	619a      	str	r2, [r3, #24]
 80089a2:	e003      	b.n	80089ac <RTC_GetTime+0xe8>
	default: time->tm_wday = 0; break;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	619a      	str	r2, [r3, #24]
 80089aa:	bf00      	nop
	}
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd90      	pop	{r4, r7, pc}
 80089b4:	40002800 	.word	0x40002800

080089b8 <RTC_SetTime>:

void RTC_SetTime(struct tm* time)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
	LL_RTC_DisableWriteProtection(RTC);
 80089c0:	4836      	ldr	r0, [pc, #216]	; (8008a9c <RTC_SetTime+0xe4>)
 80089c2:	f7ff fec9 	bl	8008758 <LL_RTC_DisableWriteProtection>
	LL_RTC_EnterInitMode(RTC);
 80089c6:	4835      	ldr	r0, [pc, #212]	; (8008a9c <RTC_SetTime+0xe4>)
 80089c8:	f7fb f848 	bl	8003a5c <LL_RTC_EnterInitMode>

	LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 80089cc:	f107 0310 	add.w	r3, r7, #16
 80089d0:	2200      	movs	r2, #0
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	605a      	str	r2, [r3, #4]
	LL_RTC_DateTypeDef RTC_DateStruct = {0};
 80089d6:	2300      	movs	r3, #0
 80089d8:	60fb      	str	r3, [r7, #12]

	RTC_TimeStruct.Hours = time->tm_hour;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	753b      	strb	r3, [r7, #20]
	RTC_TimeStruct.Minutes = time->tm_min;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	757b      	strb	r3, [r7, #21]
	RTC_TimeStruct.Seconds = time->tm_sec;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	75bb      	strb	r3, [r7, #22]
	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 80089f2:	f107 0310 	add.w	r3, r7, #16
 80089f6:	461a      	mov	r2, r3
 80089f8:	2100      	movs	r1, #0
 80089fa:	4828      	ldr	r0, [pc, #160]	; (8008a9c <RTC_SetTime+0xe4>)
 80089fc:	f7fa fee0 	bl	80037c0 <LL_RTC_TIME_Init>

	switch(time->tm_wday)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	2b06      	cmp	r3, #6
 8008a06:	d826      	bhi.n	8008a56 <RTC_SetTime+0x9e>
 8008a08:	a201      	add	r2, pc, #4	; (adr r2, 8008a10 <RTC_SetTime+0x58>)
 8008a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0e:	bf00      	nop
 8008a10:	08008a2d 	.word	0x08008a2d
 8008a14:	08008a33 	.word	0x08008a33
 8008a18:	08008a39 	.word	0x08008a39
 8008a1c:	08008a3f 	.word	0x08008a3f
 8008a20:	08008a45 	.word	0x08008a45
 8008a24:	08008a4b 	.word	0x08008a4b
 8008a28:	08008a51 	.word	0x08008a51
	{
	case 0:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_SUNDAY;		break;
 8008a2c:	2307      	movs	r3, #7
 8008a2e:	733b      	strb	r3, [r7, #12]
 8008a30:	e014      	b.n	8008a5c <RTC_SetTime+0xa4>
	case 1:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY; 	break;
 8008a32:	2301      	movs	r3, #1
 8008a34:	733b      	strb	r3, [r7, #12]
 8008a36:	e011      	b.n	8008a5c <RTC_SetTime+0xa4>
	case 2:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_TUESDAY; 	break;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	733b      	strb	r3, [r7, #12]
 8008a3c:	e00e      	b.n	8008a5c <RTC_SetTime+0xa4>
	case 3: RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_WEDNESDAY; 	break;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	733b      	strb	r3, [r7, #12]
 8008a42:	e00b      	b.n	8008a5c <RTC_SetTime+0xa4>
	case 4:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_THURSDAY; 	break;
 8008a44:	2304      	movs	r3, #4
 8008a46:	733b      	strb	r3, [r7, #12]
 8008a48:	e008      	b.n	8008a5c <RTC_SetTime+0xa4>
	case 5:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_FRIDAY; 	break;
 8008a4a:	2305      	movs	r3, #5
 8008a4c:	733b      	strb	r3, [r7, #12]
 8008a4e:	e005      	b.n	8008a5c <RTC_SetTime+0xa4>
	case 6:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_SATURDAY;	break;
 8008a50:	2306      	movs	r3, #6
 8008a52:	733b      	strb	r3, [r7, #12]
 8008a54:	e002      	b.n	8008a5c <RTC_SetTime+0xa4>
	default: RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_SUNDAY; 	break;
 8008a56:	2307      	movs	r3, #7
 8008a58:	733b      	strb	r3, [r7, #12]
 8008a5a:	bf00      	nop
	}

	RTC_DateStruct.Day = time->tm_mday;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	73bb      	strb	r3, [r7, #14]
	RTC_DateStruct.Month = time->tm_mon + 1;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	737b      	strb	r3, [r7, #13]
	RTC_DateStruct.Year = time->tm_year;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	73fb      	strb	r3, [r7, #15]
	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8008a78:	f107 030c 	add.w	r3, r7, #12
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	2100      	movs	r1, #0
 8008a80:	4806      	ldr	r0, [pc, #24]	; (8008a9c <RTC_SetTime+0xe4>)
 8008a82:	f7fa ff45 	bl	8003910 <LL_RTC_DATE_Init>

	LL_RTC_DisableInitMode(RTC);
 8008a86:	4805      	ldr	r0, [pc, #20]	; (8008a9c <RTC_SetTime+0xe4>)
 8008a88:	f7ff fe22 	bl	80086d0 <LL_RTC_DisableInitMode>
	LL_RTC_EnableWriteProtection(RTC);
 8008a8c:	4803      	ldr	r0, [pc, #12]	; (8008a9c <RTC_SetTime+0xe4>)
 8008a8e:	f7ff fe56 	bl	800873e <LL_RTC_EnableWriteProtection>
}
 8008a92:	bf00      	nop
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	40002800 	.word	0x40002800

08008aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	607b      	str	r3, [r7, #4]
 8008aaa:	4a12      	ldr	r2, [pc, #72]	; (8008af4 <HAL_MspInit+0x54>)
 8008aac:	4b11      	ldr	r3, [pc, #68]	; (8008af4 <HAL_MspInit+0x54>)
 8008aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8008ab6:	4b0f      	ldr	r3, [pc, #60]	; (8008af4 <HAL_MspInit+0x54>)
 8008ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008abe:	607b      	str	r3, [r7, #4]
 8008ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	603b      	str	r3, [r7, #0]
 8008ac6:	4a0b      	ldr	r2, [pc, #44]	; (8008af4 <HAL_MspInit+0x54>)
 8008ac8:	4b0a      	ldr	r3, [pc, #40]	; (8008af4 <HAL_MspInit+0x54>)
 8008aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8008ad2:	4b08      	ldr	r3, [pc, #32]	; (8008af4 <HAL_MspInit+0x54>)
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ada:	603b      	str	r3, [r7, #0]
 8008adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008ade:	2200      	movs	r2, #0
 8008ae0:	210f      	movs	r1, #15
 8008ae2:	f06f 0001 	mvn.w	r0, #1
 8008ae6:	f7f9 ffa5 	bl	8002a34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008aea:	bf00      	nop
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	40023800 	.word	0x40023800

08008af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b08c      	sub	sp, #48	; 0x30
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8008b08:	2200      	movs	r2, #0
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	2019      	movs	r0, #25
 8008b0e:	f7f9 ff91 	bl	8002a34 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8008b12:	2019      	movs	r0, #25
 8008b14:	f7f9 ffaa 	bl	8002a6c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8008b18:	2300      	movs	r3, #0
 8008b1a:	60fb      	str	r3, [r7, #12]
 8008b1c:	4a1f      	ldr	r2, [pc, #124]	; (8008b9c <HAL_InitTick+0xa4>)
 8008b1e:	4b1f      	ldr	r3, [pc, #124]	; (8008b9c <HAL_InitTick+0xa4>)
 8008b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b22:	f043 0301 	orr.w	r3, r3, #1
 8008b26:	6453      	str	r3, [r2, #68]	; 0x44
 8008b28:	4b1c      	ldr	r3, [pc, #112]	; (8008b9c <HAL_InitTick+0xa4>)
 8008b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b2c:	f003 0301 	and.w	r3, r3, #1
 8008b30:	60fb      	str	r3, [r7, #12]
 8008b32:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008b34:	f107 0210 	add.w	r2, r7, #16
 8008b38:	f107 0314 	add.w	r3, r7, #20
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7f9 ffc2 	bl	8002ac8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8008b44:	f7f9 ffac 	bl	8002aa0 <HAL_RCC_GetPCLK2Freq>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	005b      	lsls	r3, r3, #1
 8008b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	4a13      	ldr	r2, [pc, #76]	; (8008ba0 <HAL_InitTick+0xa8>)
 8008b52:	fba2 2303 	umull	r2, r3, r2, r3
 8008b56:	0c9b      	lsrs	r3, r3, #18
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8008b5c:	4b11      	ldr	r3, [pc, #68]	; (8008ba4 <HAL_InitTick+0xac>)
 8008b5e:	4a12      	ldr	r2, [pc, #72]	; (8008ba8 <HAL_InitTick+0xb0>)
 8008b60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8008b62:	4b10      	ldr	r3, [pc, #64]	; (8008ba4 <HAL_InitTick+0xac>)
 8008b64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008b68:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8008b6a:	4a0e      	ldr	r2, [pc, #56]	; (8008ba4 <HAL_InitTick+0xac>)
 8008b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8008b70:	4b0c      	ldr	r3, [pc, #48]	; (8008ba4 <HAL_InitTick+0xac>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b76:	4b0b      	ldr	r3, [pc, #44]	; (8008ba4 <HAL_InitTick+0xac>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8008b7c:	4809      	ldr	r0, [pc, #36]	; (8008ba4 <HAL_InitTick+0xac>)
 8008b7e:	f7f9 ffd5 	bl	8002b2c <HAL_TIM_Base_Init>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d104      	bne.n	8008b92 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8008b88:	4806      	ldr	r0, [pc, #24]	; (8008ba4 <HAL_InitTick+0xac>)
 8008b8a:	f7fa f804 	bl	8002b96 <HAL_TIM_Base_Start_IT>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	e000      	b.n	8008b94 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3730      	adds	r7, #48	; 0x30
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	40023800 	.word	0x40023800
 8008ba0:	431bde83 	.word	0x431bde83
 8008ba4:	200157b4 	.word	0x200157b4
 8008ba8:	40010000 	.word	0x40010000

08008bac <NMI_Handler>:
#include "task.h"

extern TIM_HandleTypeDef htim1;

void NMI_Handler(void)
{
 8008bac:	b480      	push	{r7}
 8008bae:	af00      	add	r7, sp, #0

}
 8008bb0:	bf00      	nop
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <HardFault_Handler>:

void HardFault_Handler(void)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	af00      	add	r7, sp, #0
	while (1)
 8008bbe:	e7fe      	b.n	8008bbe <HardFault_Handler+0x4>

08008bc0 <MemManage_Handler>:

	}
}

void MemManage_Handler(void)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	af00      	add	r7, sp, #0
	while (1)
 8008bc4:	e7fe      	b.n	8008bc4 <MemManage_Handler+0x4>

08008bc6 <BusFault_Handler>:

	}
}

void BusFault_Handler(void)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	af00      	add	r7, sp, #0
	while (1)
 8008bca:	e7fe      	b.n	8008bca <BusFault_Handler+0x4>

08008bcc <UsageFault_Handler>:

	}
}

void UsageFault_Handler(void)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	af00      	add	r7, sp, #0
	while (1)
 8008bd0:	e7fe      	b.n	8008bd0 <UsageFault_Handler+0x4>

08008bd2 <DebugMon_Handler>:

	}
}

void DebugMon_Handler(void)
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	af00      	add	r7, sp, #0

}
 8008bd6:	bf00      	nop
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim1);
 8008be4:	4802      	ldr	r0, [pc, #8]	; (8008bf0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8008be6:	f7f9 fffa 	bl	8002bde <HAL_TIM_IRQHandler>
}
 8008bea:	bf00      	nop
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	200157b4 	.word	0x200157b4

08008bf4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008bfc:	4b11      	ldr	r3, [pc, #68]	; (8008c44 <_sbrk+0x50>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d102      	bne.n	8008c0a <_sbrk+0x16>
		heap_end = &end;
 8008c04:	4b0f      	ldr	r3, [pc, #60]	; (8008c44 <_sbrk+0x50>)
 8008c06:	4a10      	ldr	r2, [pc, #64]	; (8008c48 <_sbrk+0x54>)
 8008c08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008c0a:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <_sbrk+0x50>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008c10:	4b0c      	ldr	r3, [pc, #48]	; (8008c44 <_sbrk+0x50>)
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4413      	add	r3, r2
 8008c18:	466a      	mov	r2, sp
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d907      	bls.n	8008c2e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8008c1e:	f000 f855 	bl	8008ccc <__errno>
 8008c22:	4602      	mov	r2, r0
 8008c24:	230c      	movs	r3, #12
 8008c26:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008c28:	f04f 33ff 	mov.w	r3, #4294967295
 8008c2c:	e006      	b.n	8008c3c <_sbrk+0x48>
	}

	heap_end += incr;
 8008c2e:	4b05      	ldr	r3, [pc, #20]	; (8008c44 <_sbrk+0x50>)
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4413      	add	r3, r2
 8008c36:	4a03      	ldr	r2, [pc, #12]	; (8008c44 <_sbrk+0x50>)
 8008c38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	20008b74 	.word	0x20008b74
 8008c48:	200157f8 	.word	0x200157f8

08008c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008c50:	4a08      	ldr	r2, [pc, #32]	; (8008c74 <SystemInit+0x28>)
 8008c52:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <SystemInit+0x28>)
 8008c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008c60:	4b04      	ldr	r3, [pc, #16]	; (8008c74 <SystemInit+0x28>)
 8008c62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008c66:	609a      	str	r2, [r3, #8]
#endif
}
 8008c68:	bf00      	nop
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	e000ed00 	.word	0xe000ed00

08008c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008cb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008c7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008c7e:	e003      	b.n	8008c88 <LoopCopyDataInit>

08008c80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008c80:	4b0c      	ldr	r3, [pc, #48]	; (8008cb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008c82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008c84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008c86:	3104      	adds	r1, #4

08008c88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008c88:	480b      	ldr	r0, [pc, #44]	; (8008cb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008c8a:	4b0c      	ldr	r3, [pc, #48]	; (8008cbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008c8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008c8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008c90:	d3f6      	bcc.n	8008c80 <CopyDataInit>
  ldr  r2, =_sbss
 8008c92:	4a0b      	ldr	r2, [pc, #44]	; (8008cc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008c94:	e002      	b.n	8008c9c <LoopFillZerobss>

08008c96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008c96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008c98:	f842 3b04 	str.w	r3, [r2], #4

08008c9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008c9c:	4b09      	ldr	r3, [pc, #36]	; (8008cc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008c9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008ca0:	d3f9      	bcc.n	8008c96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008ca2:	f7ff ffd3 	bl	8008c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008ca6:	f000 f817 	bl	8008cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008caa:	f7ff fc5d 	bl	8008568 <main>
  bx  lr    
 8008cae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008cb0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008cb4:	0800b354 	.word	0x0800b354
  ldr  r0, =_sdata
 8008cb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008cbc:	20000228 	.word	0x20000228
  ldr  r2, =_sbss
 8008cc0:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 8008cc4:	200157f8 	.word	0x200157f8

08008cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008cc8:	e7fe      	b.n	8008cc8 <ADC_IRQHandler>
	...

08008ccc <__errno>:
 8008ccc:	4b01      	ldr	r3, [pc, #4]	; (8008cd4 <__errno+0x8>)
 8008cce:	6818      	ldr	r0, [r3, #0]
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	20000010 	.word	0x20000010

08008cd8 <__libc_init_array>:
 8008cd8:	b570      	push	{r4, r5, r6, lr}
 8008cda:	4e0d      	ldr	r6, [pc, #52]	; (8008d10 <__libc_init_array+0x38>)
 8008cdc:	4c0d      	ldr	r4, [pc, #52]	; (8008d14 <__libc_init_array+0x3c>)
 8008cde:	1ba4      	subs	r4, r4, r6
 8008ce0:	10a4      	asrs	r4, r4, #2
 8008ce2:	2500      	movs	r5, #0
 8008ce4:	42a5      	cmp	r5, r4
 8008ce6:	d109      	bne.n	8008cfc <__libc_init_array+0x24>
 8008ce8:	4e0b      	ldr	r6, [pc, #44]	; (8008d18 <__libc_init_array+0x40>)
 8008cea:	4c0c      	ldr	r4, [pc, #48]	; (8008d1c <__libc_init_array+0x44>)
 8008cec:	f002 f830 	bl	800ad50 <_init>
 8008cf0:	1ba4      	subs	r4, r4, r6
 8008cf2:	10a4      	asrs	r4, r4, #2
 8008cf4:	2500      	movs	r5, #0
 8008cf6:	42a5      	cmp	r5, r4
 8008cf8:	d105      	bne.n	8008d06 <__libc_init_array+0x2e>
 8008cfa:	bd70      	pop	{r4, r5, r6, pc}
 8008cfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d00:	4798      	blx	r3
 8008d02:	3501      	adds	r5, #1
 8008d04:	e7ee      	b.n	8008ce4 <__libc_init_array+0xc>
 8008d06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d0a:	4798      	blx	r3
 8008d0c:	3501      	adds	r5, #1
 8008d0e:	e7f2      	b.n	8008cf6 <__libc_init_array+0x1e>
 8008d10:	0800b34c 	.word	0x0800b34c
 8008d14:	0800b34c 	.word	0x0800b34c
 8008d18:	0800b34c 	.word	0x0800b34c
 8008d1c:	0800b350 	.word	0x0800b350

08008d20 <localtime_r>:
 8008d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d24:	460c      	mov	r4, r1
 8008d26:	4680      	mov	r8, r0
 8008d28:	f000 ff08 	bl	8009b3c <__gettzinfo>
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4607      	mov	r7, r0
 8008d30:	4640      	mov	r0, r8
 8008d32:	f000 ff07 	bl	8009b44 <gmtime_r>
 8008d36:	6946      	ldr	r6, [r0, #20]
 8008d38:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8008d3c:	07b3      	lsls	r3, r6, #30
 8008d3e:	4604      	mov	r4, r0
 8008d40:	d105      	bne.n	8008d4e <localtime_r+0x2e>
 8008d42:	2264      	movs	r2, #100	; 0x64
 8008d44:	fb96 f3f2 	sdiv	r3, r6, r2
 8008d48:	fb02 6313 	mls	r3, r2, r3, r6
 8008d4c:	b9fb      	cbnz	r3, 8008d8e <localtime_r+0x6e>
 8008d4e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008d52:	fb96 f5f3 	sdiv	r5, r6, r3
 8008d56:	fb03 6515 	mls	r5, r3, r5, r6
 8008d5a:	fab5 f585 	clz	r5, r5
 8008d5e:	096d      	lsrs	r5, r5, #5
 8008d60:	4b5f      	ldr	r3, [pc, #380]	; (8008ee0 <localtime_r+0x1c0>)
 8008d62:	2230      	movs	r2, #48	; 0x30
 8008d64:	fb02 3505 	mla	r5, r2, r5, r3
 8008d68:	f000 fd02 	bl	8009770 <__tz_lock>
 8008d6c:	f000 fd02 	bl	8009774 <_tzset_unlocked>
 8008d70:	4b5c      	ldr	r3, [pc, #368]	; (8008ee4 <localtime_r+0x1c4>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	b1e3      	cbz	r3, 8008db0 <localtime_r+0x90>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	429e      	cmp	r6, r3
 8008d7a:	d10a      	bne.n	8008d92 <localtime_r+0x72>
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d82:	69fa      	ldr	r2, [r7, #28]
 8008d84:	b969      	cbnz	r1, 8008da2 <localtime_r+0x82>
 8008d86:	4293      	cmp	r3, r2
 8008d88:	db0d      	blt.n	8008da6 <localtime_r+0x86>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e010      	b.n	8008db0 <localtime_r+0x90>
 8008d8e:	2501      	movs	r5, #1
 8008d90:	e7e6      	b.n	8008d60 <localtime_r+0x40>
 8008d92:	4630      	mov	r0, r6
 8008d94:	f000 fc44 	bl	8009620 <__tzcalc_limits>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d1ef      	bne.n	8008d7c <localtime_r+0x5c>
 8008d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008da0:	e006      	b.n	8008db0 <localtime_r+0x90>
 8008da2:	4293      	cmp	r3, r2
 8008da4:	db55      	blt.n	8008e52 <localtime_r+0x132>
 8008da6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008da8:	4293      	cmp	r3, r2
 8008daa:	bfac      	ite	ge
 8008dac:	2300      	movge	r3, #0
 8008dae:	2301      	movlt	r3, #1
 8008db0:	6223      	str	r3, [r4, #32]
 8008db2:	6a23      	ldr	r3, [r4, #32]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	bf0c      	ite	eq
 8008db8:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8008dba:	6a39      	ldrne	r1, [r7, #32]
 8008dbc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008dc0:	203c      	movs	r0, #60	; 0x3c
 8008dc2:	fb91 f6f3 	sdiv	r6, r1, r3
 8008dc6:	fb03 1316 	mls	r3, r3, r6, r1
 8008dca:	6861      	ldr	r1, [r4, #4]
 8008dcc:	fb93 f2f0 	sdiv	r2, r3, r0
 8008dd0:	fb00 3012 	mls	r0, r0, r2, r3
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	1a89      	subs	r1, r1, r2
 8008dd8:	68a2      	ldr	r2, [r4, #8]
 8008dda:	6061      	str	r1, [r4, #4]
 8008ddc:	1a1b      	subs	r3, r3, r0
 8008dde:	1b92      	subs	r2, r2, r6
 8008de0:	2b3b      	cmp	r3, #59	; 0x3b
 8008de2:	6023      	str	r3, [r4, #0]
 8008de4:	60a2      	str	r2, [r4, #8]
 8008de6:	dd36      	ble.n	8008e56 <localtime_r+0x136>
 8008de8:	3101      	adds	r1, #1
 8008dea:	6061      	str	r1, [r4, #4]
 8008dec:	3b3c      	subs	r3, #60	; 0x3c
 8008dee:	6023      	str	r3, [r4, #0]
 8008df0:	6863      	ldr	r3, [r4, #4]
 8008df2:	2b3b      	cmp	r3, #59	; 0x3b
 8008df4:	dd35      	ble.n	8008e62 <localtime_r+0x142>
 8008df6:	3201      	adds	r2, #1
 8008df8:	60a2      	str	r2, [r4, #8]
 8008dfa:	3b3c      	subs	r3, #60	; 0x3c
 8008dfc:	6063      	str	r3, [r4, #4]
 8008dfe:	68a3      	ldr	r3, [r4, #8]
 8008e00:	2b17      	cmp	r3, #23
 8008e02:	dd34      	ble.n	8008e6e <localtime_r+0x14e>
 8008e04:	69e2      	ldr	r2, [r4, #28]
 8008e06:	3201      	adds	r2, #1
 8008e08:	61e2      	str	r2, [r4, #28]
 8008e0a:	69a2      	ldr	r2, [r4, #24]
 8008e0c:	3201      	adds	r2, #1
 8008e0e:	2a06      	cmp	r2, #6
 8008e10:	bfc8      	it	gt
 8008e12:	2200      	movgt	r2, #0
 8008e14:	61a2      	str	r2, [r4, #24]
 8008e16:	68e2      	ldr	r2, [r4, #12]
 8008e18:	3b18      	subs	r3, #24
 8008e1a:	3201      	adds	r2, #1
 8008e1c:	60a3      	str	r3, [r4, #8]
 8008e1e:	6923      	ldr	r3, [r4, #16]
 8008e20:	60e2      	str	r2, [r4, #12]
 8008e22:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8008e26:	428a      	cmp	r2, r1
 8008e28:	dd0e      	ble.n	8008e48 <localtime_r+0x128>
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	2b0c      	cmp	r3, #12
 8008e2e:	bf0c      	ite	eq
 8008e30:	6963      	ldreq	r3, [r4, #20]
 8008e32:	6123      	strne	r3, [r4, #16]
 8008e34:	eba2 0201 	sub.w	r2, r2, r1
 8008e38:	60e2      	str	r2, [r4, #12]
 8008e3a:	bf01      	itttt	eq
 8008e3c:	3301      	addeq	r3, #1
 8008e3e:	2200      	moveq	r2, #0
 8008e40:	6122      	streq	r2, [r4, #16]
 8008e42:	6163      	streq	r3, [r4, #20]
 8008e44:	bf08      	it	eq
 8008e46:	61e2      	streq	r2, [r4, #28]
 8008e48:	f000 fc93 	bl	8009772 <__tz_unlock>
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e52:	2300      	movs	r3, #0
 8008e54:	e7ac      	b.n	8008db0 <localtime_r+0x90>
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	daca      	bge.n	8008df0 <localtime_r+0xd0>
 8008e5a:	3901      	subs	r1, #1
 8008e5c:	6061      	str	r1, [r4, #4]
 8008e5e:	333c      	adds	r3, #60	; 0x3c
 8008e60:	e7c5      	b.n	8008dee <localtime_r+0xce>
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	dacb      	bge.n	8008dfe <localtime_r+0xde>
 8008e66:	3a01      	subs	r2, #1
 8008e68:	60a2      	str	r2, [r4, #8]
 8008e6a:	333c      	adds	r3, #60	; 0x3c
 8008e6c:	e7c6      	b.n	8008dfc <localtime_r+0xdc>
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	daea      	bge.n	8008e48 <localtime_r+0x128>
 8008e72:	69e2      	ldr	r2, [r4, #28]
 8008e74:	3a01      	subs	r2, #1
 8008e76:	61e2      	str	r2, [r4, #28]
 8008e78:	69a2      	ldr	r2, [r4, #24]
 8008e7a:	3a01      	subs	r2, #1
 8008e7c:	bf48      	it	mi
 8008e7e:	2206      	movmi	r2, #6
 8008e80:	61a2      	str	r2, [r4, #24]
 8008e82:	68e2      	ldr	r2, [r4, #12]
 8008e84:	3318      	adds	r3, #24
 8008e86:	3a01      	subs	r2, #1
 8008e88:	60e2      	str	r2, [r4, #12]
 8008e8a:	60a3      	str	r3, [r4, #8]
 8008e8c:	2a00      	cmp	r2, #0
 8008e8e:	d1db      	bne.n	8008e48 <localtime_r+0x128>
 8008e90:	6923      	ldr	r3, [r4, #16]
 8008e92:	3b01      	subs	r3, #1
 8008e94:	d405      	bmi.n	8008ea2 <localtime_r+0x182>
 8008e96:	6123      	str	r3, [r4, #16]
 8008e98:	6923      	ldr	r3, [r4, #16]
 8008e9a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8008e9e:	60e3      	str	r3, [r4, #12]
 8008ea0:	e7d2      	b.n	8008e48 <localtime_r+0x128>
 8008ea2:	230b      	movs	r3, #11
 8008ea4:	6123      	str	r3, [r4, #16]
 8008ea6:	6963      	ldr	r3, [r4, #20]
 8008ea8:	1e5a      	subs	r2, r3, #1
 8008eaa:	f012 0f03 	tst.w	r2, #3
 8008eae:	6162      	str	r2, [r4, #20]
 8008eb0:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8008eb4:	d105      	bne.n	8008ec2 <localtime_r+0x1a2>
 8008eb6:	2164      	movs	r1, #100	; 0x64
 8008eb8:	fb92 f3f1 	sdiv	r3, r2, r1
 8008ebc:	fb01 2313 	mls	r3, r1, r3, r2
 8008ec0:	b963      	cbnz	r3, 8008edc <localtime_r+0x1bc>
 8008ec2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008ec6:	fb92 f3f1 	sdiv	r3, r2, r1
 8008eca:	fb01 2313 	mls	r3, r1, r3, r2
 8008ece:	fab3 f383 	clz	r3, r3
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8008ed8:	61e3      	str	r3, [r4, #28]
 8008eda:	e7dd      	b.n	8008e98 <localtime_r+0x178>
 8008edc:	2301      	movs	r3, #1
 8008ede:	e7f9      	b.n	8008ed4 <localtime_r+0x1b4>
 8008ee0:	0800b0ec 	.word	0x0800b0ec
 8008ee4:	20008b94 	.word	0x20008b94

08008ee8 <memcmp>:
 8008ee8:	b510      	push	{r4, lr}
 8008eea:	3901      	subs	r1, #1
 8008eec:	4402      	add	r2, r0
 8008eee:	4290      	cmp	r0, r2
 8008ef0:	d101      	bne.n	8008ef6 <memcmp+0xe>
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	bd10      	pop	{r4, pc}
 8008ef6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008efa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008efe:	42a3      	cmp	r3, r4
 8008f00:	d0f5      	beq.n	8008eee <memcmp+0x6>
 8008f02:	1b18      	subs	r0, r3, r4
 8008f04:	bd10      	pop	{r4, pc}

08008f06 <memcpy>:
 8008f06:	b510      	push	{r4, lr}
 8008f08:	1e43      	subs	r3, r0, #1
 8008f0a:	440a      	add	r2, r1
 8008f0c:	4291      	cmp	r1, r2
 8008f0e:	d100      	bne.n	8008f12 <memcpy+0xc>
 8008f10:	bd10      	pop	{r4, pc}
 8008f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f1a:	e7f7      	b.n	8008f0c <memcpy+0x6>

08008f1c <memset>:
 8008f1c:	4402      	add	r2, r0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d100      	bne.n	8008f26 <memset+0xa>
 8008f24:	4770      	bx	lr
 8008f26:	f803 1b01 	strb.w	r1, [r3], #1
 8008f2a:	e7f9      	b.n	8008f20 <memset+0x4>

08008f2c <validate_structure>:
 8008f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f2e:	6801      	ldr	r1, [r0, #0]
 8008f30:	293b      	cmp	r1, #59	; 0x3b
 8008f32:	4604      	mov	r4, r0
 8008f34:	d911      	bls.n	8008f5a <validate_structure+0x2e>
 8008f36:	223c      	movs	r2, #60	; 0x3c
 8008f38:	4668      	mov	r0, sp
 8008f3a:	f000 fda3 	bl	8009a84 <div>
 8008f3e:	9a01      	ldr	r2, [sp, #4]
 8008f40:	6863      	ldr	r3, [r4, #4]
 8008f42:	9900      	ldr	r1, [sp, #0]
 8008f44:	2a00      	cmp	r2, #0
 8008f46:	440b      	add	r3, r1
 8008f48:	6063      	str	r3, [r4, #4]
 8008f4a:	bfbb      	ittet	lt
 8008f4c:	323c      	addlt	r2, #60	; 0x3c
 8008f4e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008f52:	6022      	strge	r2, [r4, #0]
 8008f54:	6022      	strlt	r2, [r4, #0]
 8008f56:	bfb8      	it	lt
 8008f58:	6063      	strlt	r3, [r4, #4]
 8008f5a:	6861      	ldr	r1, [r4, #4]
 8008f5c:	293b      	cmp	r1, #59	; 0x3b
 8008f5e:	d911      	bls.n	8008f84 <validate_structure+0x58>
 8008f60:	223c      	movs	r2, #60	; 0x3c
 8008f62:	4668      	mov	r0, sp
 8008f64:	f000 fd8e 	bl	8009a84 <div>
 8008f68:	9a01      	ldr	r2, [sp, #4]
 8008f6a:	68a3      	ldr	r3, [r4, #8]
 8008f6c:	9900      	ldr	r1, [sp, #0]
 8008f6e:	2a00      	cmp	r2, #0
 8008f70:	440b      	add	r3, r1
 8008f72:	60a3      	str	r3, [r4, #8]
 8008f74:	bfbb      	ittet	lt
 8008f76:	323c      	addlt	r2, #60	; 0x3c
 8008f78:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008f7c:	6062      	strge	r2, [r4, #4]
 8008f7e:	6062      	strlt	r2, [r4, #4]
 8008f80:	bfb8      	it	lt
 8008f82:	60a3      	strlt	r3, [r4, #8]
 8008f84:	68a1      	ldr	r1, [r4, #8]
 8008f86:	2917      	cmp	r1, #23
 8008f88:	d911      	bls.n	8008fae <validate_structure+0x82>
 8008f8a:	2218      	movs	r2, #24
 8008f8c:	4668      	mov	r0, sp
 8008f8e:	f000 fd79 	bl	8009a84 <div>
 8008f92:	9a01      	ldr	r2, [sp, #4]
 8008f94:	68e3      	ldr	r3, [r4, #12]
 8008f96:	9900      	ldr	r1, [sp, #0]
 8008f98:	2a00      	cmp	r2, #0
 8008f9a:	440b      	add	r3, r1
 8008f9c:	60e3      	str	r3, [r4, #12]
 8008f9e:	bfbb      	ittet	lt
 8008fa0:	3218      	addlt	r2, #24
 8008fa2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008fa6:	60a2      	strge	r2, [r4, #8]
 8008fa8:	60a2      	strlt	r2, [r4, #8]
 8008faa:	bfb8      	it	lt
 8008fac:	60e3      	strlt	r3, [r4, #12]
 8008fae:	6921      	ldr	r1, [r4, #16]
 8008fb0:	290b      	cmp	r1, #11
 8008fb2:	d911      	bls.n	8008fd8 <validate_structure+0xac>
 8008fb4:	220c      	movs	r2, #12
 8008fb6:	4668      	mov	r0, sp
 8008fb8:	f000 fd64 	bl	8009a84 <div>
 8008fbc:	9a01      	ldr	r2, [sp, #4]
 8008fbe:	6963      	ldr	r3, [r4, #20]
 8008fc0:	9900      	ldr	r1, [sp, #0]
 8008fc2:	2a00      	cmp	r2, #0
 8008fc4:	440b      	add	r3, r1
 8008fc6:	6163      	str	r3, [r4, #20]
 8008fc8:	bfbb      	ittet	lt
 8008fca:	320c      	addlt	r2, #12
 8008fcc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008fd0:	6122      	strge	r2, [r4, #16]
 8008fd2:	6122      	strlt	r2, [r4, #16]
 8008fd4:	bfb8      	it	lt
 8008fd6:	6163      	strlt	r3, [r4, #20]
 8008fd8:	6963      	ldr	r3, [r4, #20]
 8008fda:	0799      	lsls	r1, r3, #30
 8008fdc:	d143      	bne.n	8009066 <validate_structure+0x13a>
 8008fde:	2164      	movs	r1, #100	; 0x64
 8008fe0:	fb93 f2f1 	sdiv	r2, r3, r1
 8008fe4:	fb01 3212 	mls	r2, r1, r2, r3
 8008fe8:	2a00      	cmp	r2, #0
 8008fea:	d13e      	bne.n	800906a <validate_structure+0x13e>
 8008fec:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8008ff0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008ff4:	fb93 f2f1 	sdiv	r2, r3, r1
 8008ff8:	fb01 3312 	mls	r3, r1, r2, r3
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	bf14      	ite	ne
 8009000:	231c      	movne	r3, #28
 8009002:	231d      	moveq	r3, #29
 8009004:	68e2      	ldr	r2, [r4, #12]
 8009006:	2a00      	cmp	r2, #0
 8009008:	dd31      	ble.n	800906e <validate_structure+0x142>
 800900a:	4f37      	ldr	r7, [pc, #220]	; (80090e8 <validate_structure+0x1bc>)
 800900c:	2602      	movs	r6, #2
 800900e:	f04f 0e00 	mov.w	lr, #0
 8009012:	2064      	movs	r0, #100	; 0x64
 8009014:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8009018:	6921      	ldr	r1, [r4, #16]
 800901a:	68e2      	ldr	r2, [r4, #12]
 800901c:	2901      	cmp	r1, #1
 800901e:	d05d      	beq.n	80090dc <validate_structure+0x1b0>
 8009020:	f857 c021 	ldr.w	ip, [r7, r1, lsl #2]
 8009024:	4562      	cmp	r2, ip
 8009026:	dd2c      	ble.n	8009082 <validate_structure+0x156>
 8009028:	3101      	adds	r1, #1
 800902a:	eba2 020c 	sub.w	r2, r2, ip
 800902e:	290c      	cmp	r1, #12
 8009030:	60e2      	str	r2, [r4, #12]
 8009032:	6121      	str	r1, [r4, #16]
 8009034:	d1f0      	bne.n	8009018 <validate_structure+0xec>
 8009036:	6963      	ldr	r3, [r4, #20]
 8009038:	f8c4 e010 	str.w	lr, [r4, #16]
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	0791      	lsls	r1, r2, #30
 8009040:	6162      	str	r2, [r4, #20]
 8009042:	d147      	bne.n	80090d4 <validate_structure+0x1a8>
 8009044:	fb92 f1f0 	sdiv	r1, r2, r0
 8009048:	fb00 2211 	mls	r2, r0, r1, r2
 800904c:	2a00      	cmp	r2, #0
 800904e:	d143      	bne.n	80090d8 <validate_structure+0x1ac>
 8009050:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8009054:	fb93 f2f5 	sdiv	r2, r3, r5
 8009058:	fb05 3312 	mls	r3, r5, r2, r3
 800905c:	2b00      	cmp	r3, #0
 800905e:	bf14      	ite	ne
 8009060:	231c      	movne	r3, #28
 8009062:	231d      	moveq	r3, #29
 8009064:	e7d8      	b.n	8009018 <validate_structure+0xec>
 8009066:	231c      	movs	r3, #28
 8009068:	e7cc      	b.n	8009004 <validate_structure+0xd8>
 800906a:	231d      	movs	r3, #29
 800906c:	e7ca      	b.n	8009004 <validate_structure+0xd8>
 800906e:	4f1e      	ldr	r7, [pc, #120]	; (80090e8 <validate_structure+0x1bc>)
 8009070:	260b      	movs	r6, #11
 8009072:	2064      	movs	r0, #100	; 0x64
 8009074:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8009078:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800907c:	f1be 0f00 	cmp.w	lr, #0
 8009080:	dd01      	ble.n	8009086 <validate_structure+0x15a>
 8009082:	b003      	add	sp, #12
 8009084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009086:	6921      	ldr	r1, [r4, #16]
 8009088:	3901      	subs	r1, #1
 800908a:	6121      	str	r1, [r4, #16]
 800908c:	3101      	adds	r1, #1
 800908e:	d114      	bne.n	80090ba <validate_structure+0x18e>
 8009090:	6963      	ldr	r3, [r4, #20]
 8009092:	6126      	str	r6, [r4, #16]
 8009094:	1e59      	subs	r1, r3, #1
 8009096:	078a      	lsls	r2, r1, #30
 8009098:	6161      	str	r1, [r4, #20]
 800909a:	d117      	bne.n	80090cc <validate_structure+0x1a0>
 800909c:	fb91 f2f0 	sdiv	r2, r1, r0
 80090a0:	fb00 1112 	mls	r1, r0, r2, r1
 80090a4:	b9a1      	cbnz	r1, 80090d0 <validate_structure+0x1a4>
 80090a6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80090aa:	fb93 f2f5 	sdiv	r2, r3, r5
 80090ae:	fb05 3312 	mls	r3, r5, r2, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	bf14      	ite	ne
 80090b6:	231c      	movne	r3, #28
 80090b8:	231d      	moveq	r3, #29
 80090ba:	6922      	ldr	r2, [r4, #16]
 80090bc:	2a01      	cmp	r2, #1
 80090be:	bf14      	ite	ne
 80090c0:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80090c4:	461a      	moveq	r2, r3
 80090c6:	4472      	add	r2, lr
 80090c8:	60e2      	str	r2, [r4, #12]
 80090ca:	e7d5      	b.n	8009078 <validate_structure+0x14c>
 80090cc:	231c      	movs	r3, #28
 80090ce:	e7f4      	b.n	80090ba <validate_structure+0x18e>
 80090d0:	231d      	movs	r3, #29
 80090d2:	e7f2      	b.n	80090ba <validate_structure+0x18e>
 80090d4:	231c      	movs	r3, #28
 80090d6:	e79f      	b.n	8009018 <validate_structure+0xec>
 80090d8:	231d      	movs	r3, #29
 80090da:	e79d      	b.n	8009018 <validate_structure+0xec>
 80090dc:	4293      	cmp	r3, r2
 80090de:	dad0      	bge.n	8009082 <validate_structure+0x156>
 80090e0:	1ad2      	subs	r2, r2, r3
 80090e2:	60e2      	str	r2, [r4, #12]
 80090e4:	6126      	str	r6, [r4, #16]
 80090e6:	e797      	b.n	8009018 <validate_structure+0xec>
 80090e8:	0800b08c 	.word	0x0800b08c

080090ec <mktime>:
 80090ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f0:	4681      	mov	r9, r0
 80090f2:	f000 fd23 	bl	8009b3c <__gettzinfo>
 80090f6:	4680      	mov	r8, r0
 80090f8:	4648      	mov	r0, r9
 80090fa:	f7ff ff17 	bl	8008f2c <validate_structure>
 80090fe:	e899 0081 	ldmia.w	r9, {r0, r7}
 8009102:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009106:	4ab4      	ldr	r2, [pc, #720]	; (80093d8 <mktime+0x2ec>)
 8009108:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800910c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009110:	253c      	movs	r5, #60	; 0x3c
 8009112:	fb05 0707 	mla	r7, r5, r7, r0
 8009116:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800911a:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 800911e:	3c01      	subs	r4, #1
 8009120:	2b01      	cmp	r3, #1
 8009122:	fb05 7000 	mla	r0, r5, r0, r7
 8009126:	4414      	add	r4, r2
 8009128:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800912c:	dd11      	ble.n	8009152 <mktime+0x66>
 800912e:	0799      	lsls	r1, r3, #30
 8009130:	d10f      	bne.n	8009152 <mktime+0x66>
 8009132:	2164      	movs	r1, #100	; 0x64
 8009134:	fb93 f2f1 	sdiv	r2, r3, r1
 8009138:	fb01 3212 	mls	r2, r1, r2, r3
 800913c:	b942      	cbnz	r2, 8009150 <mktime+0x64>
 800913e:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8009142:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009146:	fb95 f2f1 	sdiv	r2, r5, r1
 800914a:	fb01 5212 	mls	r2, r1, r2, r5
 800914e:	b902      	cbnz	r2, 8009152 <mktime+0x66>
 8009150:	3401      	adds	r4, #1
 8009152:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 8009156:	3210      	adds	r2, #16
 8009158:	f644 6120 	movw	r1, #20000	; 0x4e20
 800915c:	428a      	cmp	r2, r1
 800915e:	f8c9 401c 	str.w	r4, [r9, #28]
 8009162:	f200 812d 	bhi.w	80093c0 <mktime+0x2d4>
 8009166:	2b46      	cmp	r3, #70	; 0x46
 8009168:	dd70      	ble.n	800924c <mktime+0x160>
 800916a:	2546      	movs	r5, #70	; 0x46
 800916c:	f240 176d 	movw	r7, #365	; 0x16d
 8009170:	2164      	movs	r1, #100	; 0x64
 8009172:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8009176:	07aa      	lsls	r2, r5, #30
 8009178:	d162      	bne.n	8009240 <mktime+0x154>
 800917a:	fb95 f2f1 	sdiv	r2, r5, r1
 800917e:	fb01 5212 	mls	r2, r1, r2, r5
 8009182:	2a00      	cmp	r2, #0
 8009184:	d15f      	bne.n	8009246 <mktime+0x15a>
 8009186:	f205 7e6c 	addw	lr, r5, #1900	; 0x76c
 800918a:	fb9e f2f6 	sdiv	r2, lr, r6
 800918e:	fb06 e212 	mls	r2, r6, r2, lr
 8009192:	2a00      	cmp	r2, #0
 8009194:	bf14      	ite	ne
 8009196:	463a      	movne	r2, r7
 8009198:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800919c:	3501      	adds	r5, #1
 800919e:	42ab      	cmp	r3, r5
 80091a0:	4414      	add	r4, r2
 80091a2:	d1e8      	bne.n	8009176 <mktime+0x8a>
 80091a4:	4f8d      	ldr	r7, [pc, #564]	; (80093dc <mktime+0x2f0>)
 80091a6:	fb07 0704 	mla	r7, r7, r4, r0
 80091aa:	f000 fae1 	bl	8009770 <__tz_lock>
 80091ae:	f000 fae1 	bl	8009774 <_tzset_unlocked>
 80091b2:	4b8b      	ldr	r3, [pc, #556]	; (80093e0 <mktime+0x2f4>)
 80091b4:	681e      	ldr	r6, [r3, #0]
 80091b6:	2e00      	cmp	r6, #0
 80091b8:	f000 810a 	beq.w	80093d0 <mktime+0x2e4>
 80091bc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80091c0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	bfa8      	it	ge
 80091c8:	2301      	movge	r3, #1
 80091ca:	469a      	mov	sl, r3
 80091cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80091d0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80091d4:	4298      	cmp	r0, r3
 80091d6:	d17c      	bne.n	80092d2 <mktime+0x1e6>
 80091d8:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 80091dc:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80091e0:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 80091e4:	f8d8 101c 	ldr.w	r1, [r8, #28]
 80091e8:	1ad6      	subs	r6, r2, r3
 80091ea:	42b7      	cmp	r7, r6
 80091ec:	eba1 0100 	sub.w	r1, r1, r0
 80091f0:	da76      	bge.n	80092e0 <mktime+0x1f4>
 80091f2:	f8d8 2000 	ldr.w	r2, [r8]
 80091f6:	2a00      	cmp	r2, #0
 80091f8:	d076      	beq.n	80092e8 <mktime+0x1fc>
 80091fa:	428f      	cmp	r7, r1
 80091fc:	f2c0 80e3 	blt.w	80093c6 <mktime+0x2da>
 8009200:	42b7      	cmp	r7, r6
 8009202:	bfac      	ite	ge
 8009204:	2600      	movge	r6, #0
 8009206:	2601      	movlt	r6, #1
 8009208:	f1ba 0f00 	cmp.w	sl, #0
 800920c:	da72      	bge.n	80092f4 <mktime+0x208>
 800920e:	2e01      	cmp	r6, #1
 8009210:	f040 80de 	bne.w	80093d0 <mktime+0x2e4>
 8009214:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 8009218:	2601      	movs	r6, #1
 800921a:	443d      	add	r5, r7
 800921c:	f000 faa9 	bl	8009772 <__tz_unlock>
 8009220:	3404      	adds	r4, #4
 8009222:	2307      	movs	r3, #7
 8009224:	fb94 f3f3 	sdiv	r3, r4, r3
 8009228:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800922c:	1ae4      	subs	r4, r4, r3
 800922e:	bf48      	it	mi
 8009230:	3407      	addmi	r4, #7
 8009232:	f8c9 6020 	str.w	r6, [r9, #32]
 8009236:	f8c9 4018 	str.w	r4, [r9, #24]
 800923a:	4628      	mov	r0, r5
 800923c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009240:	f240 126d 	movw	r2, #365	; 0x16d
 8009244:	e7aa      	b.n	800919c <mktime+0xb0>
 8009246:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800924a:	e7a7      	b.n	800919c <mktime+0xb0>
 800924c:	d01e      	beq.n	800928c <mktime+0x1a0>
 800924e:	2245      	movs	r2, #69	; 0x45
 8009250:	f240 176d 	movw	r7, #365	; 0x16d
 8009254:	2564      	movs	r5, #100	; 0x64
 8009256:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800925a:	429a      	cmp	r2, r3
 800925c:	dc18      	bgt.n	8009290 <mktime+0x1a4>
 800925e:	079d      	lsls	r5, r3, #30
 8009260:	d131      	bne.n	80092c6 <mktime+0x1da>
 8009262:	2164      	movs	r1, #100	; 0x64
 8009264:	fb93 f2f1 	sdiv	r2, r3, r1
 8009268:	fb01 3212 	mls	r2, r1, r2, r3
 800926c:	bb72      	cbnz	r2, 80092cc <mktime+0x1e0>
 800926e:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8009272:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009276:	fb95 f2f1 	sdiv	r2, r5, r1
 800927a:	fb01 5212 	mls	r2, r1, r2, r5
 800927e:	2a00      	cmp	r2, #0
 8009280:	f240 126d 	movw	r2, #365	; 0x16d
 8009284:	bf08      	it	eq
 8009286:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800928a:	1aa4      	subs	r4, r4, r2
 800928c:	461d      	mov	r5, r3
 800928e:	e789      	b.n	80091a4 <mktime+0xb8>
 8009290:	0791      	lsls	r1, r2, #30
 8009292:	d112      	bne.n	80092ba <mktime+0x1ce>
 8009294:	fb92 f1f5 	sdiv	r1, r2, r5
 8009298:	fb05 2111 	mls	r1, r5, r1, r2
 800929c:	b981      	cbnz	r1, 80092c0 <mktime+0x1d4>
 800929e:	f202 7e6c 	addw	lr, r2, #1900	; 0x76c
 80092a2:	fb9e f1f6 	sdiv	r1, lr, r6
 80092a6:	fb06 e111 	mls	r1, r6, r1, lr
 80092aa:	2900      	cmp	r1, #0
 80092ac:	bf14      	ite	ne
 80092ae:	4639      	movne	r1, r7
 80092b0:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
 80092b4:	1a64      	subs	r4, r4, r1
 80092b6:	3a01      	subs	r2, #1
 80092b8:	e7cf      	b.n	800925a <mktime+0x16e>
 80092ba:	f240 116d 	movw	r1, #365	; 0x16d
 80092be:	e7f9      	b.n	80092b4 <mktime+0x1c8>
 80092c0:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80092c4:	e7f6      	b.n	80092b4 <mktime+0x1c8>
 80092c6:	f240 126d 	movw	r2, #365	; 0x16d
 80092ca:	e7de      	b.n	800928a <mktime+0x19e>
 80092cc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80092d0:	e7db      	b.n	800928a <mktime+0x19e>
 80092d2:	f000 f9a5 	bl	8009620 <__tzcalc_limits>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	f47f af7e 	bne.w	80091d8 <mktime+0xec>
 80092dc:	4656      	mov	r6, sl
 80092de:	e796      	b.n	800920e <mktime+0x122>
 80092e0:	1a12      	subs	r2, r2, r0
 80092e2:	4297      	cmp	r7, r2
 80092e4:	dbfa      	blt.n	80092dc <mktime+0x1f0>
 80092e6:	e784      	b.n	80091f2 <mktime+0x106>
 80092e8:	428f      	cmp	r7, r1
 80092ea:	db89      	blt.n	8009200 <mktime+0x114>
 80092ec:	f1ba 0f00 	cmp.w	sl, #0
 80092f0:	db90      	blt.n	8009214 <mktime+0x128>
 80092f2:	2601      	movs	r6, #1
 80092f4:	ea8a 0a06 	eor.w	sl, sl, r6
 80092f8:	f1ba 0f01 	cmp.w	sl, #1
 80092fc:	d187      	bne.n	800920e <mktime+0x122>
 80092fe:	1a1b      	subs	r3, r3, r0
 8009300:	b906      	cbnz	r6, 8009304 <mktime+0x218>
 8009302:	425b      	negs	r3, r3
 8009304:	f8d9 2000 	ldr.w	r2, [r9]
 8009308:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800930c:	441a      	add	r2, r3
 800930e:	f8c9 2000 	str.w	r2, [r9]
 8009312:	4648      	mov	r0, r9
 8009314:	441f      	add	r7, r3
 8009316:	f7ff fe09 	bl	8008f2c <validate_structure>
 800931a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800931e:	ebb3 030a 	subs.w	r3, r3, sl
 8009322:	f43f af74 	beq.w	800920e <mktime+0x122>
 8009326:	2b01      	cmp	r3, #1
 8009328:	dc21      	bgt.n	800936e <mktime+0x282>
 800932a:	1c98      	adds	r0, r3, #2
 800932c:	bfd8      	it	le
 800932e:	2301      	movle	r3, #1
 8009330:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009334:	441c      	add	r4, r3
 8009336:	189b      	adds	r3, r3, r2
 8009338:	d522      	bpl.n	8009380 <mktime+0x294>
 800933a:	1e6a      	subs	r2, r5, #1
 800933c:	0791      	lsls	r1, r2, #30
 800933e:	d119      	bne.n	8009374 <mktime+0x288>
 8009340:	2164      	movs	r1, #100	; 0x64
 8009342:	fb92 f3f1 	sdiv	r3, r2, r1
 8009346:	fb01 2313 	mls	r3, r1, r3, r2
 800934a:	b9b3      	cbnz	r3, 800937a <mktime+0x28e>
 800934c:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 8009350:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009354:	fb95 f3f2 	sdiv	r3, r5, r2
 8009358:	fb02 5513 	mls	r5, r2, r3, r5
 800935c:	2d00      	cmp	r5, #0
 800935e:	f240 136d 	movw	r3, #365	; 0x16d
 8009362:	bf18      	it	ne
 8009364:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8009368:	f8c9 301c 	str.w	r3, [r9, #28]
 800936c:	e74f      	b.n	800920e <mktime+0x122>
 800936e:	f04f 33ff 	mov.w	r3, #4294967295
 8009372:	e7dd      	b.n	8009330 <mktime+0x244>
 8009374:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8009378:	e7f6      	b.n	8009368 <mktime+0x27c>
 800937a:	f240 136d 	movw	r3, #365	; 0x16d
 800937e:	e7f3      	b.n	8009368 <mktime+0x27c>
 8009380:	07aa      	lsls	r2, r5, #30
 8009382:	d117      	bne.n	80093b4 <mktime+0x2c8>
 8009384:	2164      	movs	r1, #100	; 0x64
 8009386:	fb95 f2f1 	sdiv	r2, r5, r1
 800938a:	fb01 5212 	mls	r2, r1, r2, r5
 800938e:	b9a2      	cbnz	r2, 80093ba <mktime+0x2ce>
 8009390:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8009394:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009398:	fb95 f2f1 	sdiv	r2, r5, r1
 800939c:	fb01 5512 	mls	r5, r1, r2, r5
 80093a0:	2d00      	cmp	r5, #0
 80093a2:	f240 126d 	movw	r2, #365	; 0x16d
 80093a6:	bf08      	it	eq
 80093a8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80093ac:	429a      	cmp	r2, r3
 80093ae:	bfd8      	it	le
 80093b0:	1a9b      	suble	r3, r3, r2
 80093b2:	e7d9      	b.n	8009368 <mktime+0x27c>
 80093b4:	f240 126d 	movw	r2, #365	; 0x16d
 80093b8:	e7f8      	b.n	80093ac <mktime+0x2c0>
 80093ba:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80093be:	e7f5      	b.n	80093ac <mktime+0x2c0>
 80093c0:	f04f 35ff 	mov.w	r5, #4294967295
 80093c4:	e739      	b.n	800923a <mktime+0x14e>
 80093c6:	f1ba 0f00 	cmp.w	sl, #0
 80093ca:	f04f 0600 	mov.w	r6, #0
 80093ce:	da91      	bge.n	80092f4 <mktime+0x208>
 80093d0:	f8d8 5020 	ldr.w	r5, [r8, #32]
 80093d4:	443d      	add	r5, r7
 80093d6:	e721      	b.n	800921c <mktime+0x130>
 80093d8:	0800b0bc 	.word	0x0800b0bc
 80093dc:	00015180 	.word	0x00015180
 80093e0:	20008b94 	.word	0x20008b94

080093e4 <siprintf>:
 80093e4:	b40e      	push	{r1, r2, r3}
 80093e6:	b500      	push	{lr}
 80093e8:	b09c      	sub	sp, #112	; 0x70
 80093ea:	f44f 7102 	mov.w	r1, #520	; 0x208
 80093ee:	ab1d      	add	r3, sp, #116	; 0x74
 80093f0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80093f4:	9002      	str	r0, [sp, #8]
 80093f6:	9006      	str	r0, [sp, #24]
 80093f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093fc:	480a      	ldr	r0, [pc, #40]	; (8009428 <siprintf+0x44>)
 80093fe:	9104      	str	r1, [sp, #16]
 8009400:	9107      	str	r1, [sp, #28]
 8009402:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009406:	f853 2b04 	ldr.w	r2, [r3], #4
 800940a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800940e:	6800      	ldr	r0, [r0, #0]
 8009410:	9301      	str	r3, [sp, #4]
 8009412:	a902      	add	r1, sp, #8
 8009414:	f000 fd64 	bl	8009ee0 <_svfiprintf_r>
 8009418:	9b02      	ldr	r3, [sp, #8]
 800941a:	2200      	movs	r2, #0
 800941c:	701a      	strb	r2, [r3, #0]
 800941e:	b01c      	add	sp, #112	; 0x70
 8009420:	f85d eb04 	ldr.w	lr, [sp], #4
 8009424:	b003      	add	sp, #12
 8009426:	4770      	bx	lr
 8009428:	20000010 	.word	0x20000010

0800942c <strcat>:
 800942c:	b510      	push	{r4, lr}
 800942e:	4602      	mov	r2, r0
 8009430:	4613      	mov	r3, r2
 8009432:	3201      	adds	r2, #1
 8009434:	781c      	ldrb	r4, [r3, #0]
 8009436:	2c00      	cmp	r4, #0
 8009438:	d1fa      	bne.n	8009430 <strcat+0x4>
 800943a:	3b01      	subs	r3, #1
 800943c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009440:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009444:	2a00      	cmp	r2, #0
 8009446:	d1f9      	bne.n	800943c <strcat+0x10>
 8009448:	bd10      	pop	{r4, pc}

0800944a <strchr>:
 800944a:	b2c9      	uxtb	r1, r1
 800944c:	4603      	mov	r3, r0
 800944e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009452:	b11a      	cbz	r2, 800945c <strchr+0x12>
 8009454:	4291      	cmp	r1, r2
 8009456:	d1f9      	bne.n	800944c <strchr+0x2>
 8009458:	4618      	mov	r0, r3
 800945a:	4770      	bx	lr
 800945c:	2900      	cmp	r1, #0
 800945e:	bf0c      	ite	eq
 8009460:	4618      	moveq	r0, r3
 8009462:	2000      	movne	r0, #0
 8009464:	4770      	bx	lr

08009466 <strcpy>:
 8009466:	4603      	mov	r3, r0
 8009468:	f811 2b01 	ldrb.w	r2, [r1], #1
 800946c:	f803 2b01 	strb.w	r2, [r3], #1
 8009470:	2a00      	cmp	r2, #0
 8009472:	d1f9      	bne.n	8009468 <strcpy+0x2>
 8009474:	4770      	bx	lr

08009476 <strncmp>:
 8009476:	b510      	push	{r4, lr}
 8009478:	b16a      	cbz	r2, 8009496 <strncmp+0x20>
 800947a:	3901      	subs	r1, #1
 800947c:	1884      	adds	r4, r0, r2
 800947e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009482:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009486:	4293      	cmp	r3, r2
 8009488:	d103      	bne.n	8009492 <strncmp+0x1c>
 800948a:	42a0      	cmp	r0, r4
 800948c:	d001      	beq.n	8009492 <strncmp+0x1c>
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1f5      	bne.n	800947e <strncmp+0x8>
 8009492:	1a98      	subs	r0, r3, r2
 8009494:	bd10      	pop	{r4, pc}
 8009496:	4610      	mov	r0, r2
 8009498:	bd10      	pop	{r4, pc}

0800949a <strstr>:
 800949a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800949c:	7803      	ldrb	r3, [r0, #0]
 800949e:	b133      	cbz	r3, 80094ae <strstr+0x14>
 80094a0:	4603      	mov	r3, r0
 80094a2:	4618      	mov	r0, r3
 80094a4:	1c5e      	adds	r6, r3, #1
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	b933      	cbnz	r3, 80094b8 <strstr+0x1e>
 80094aa:	4618      	mov	r0, r3
 80094ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ae:	780b      	ldrb	r3, [r1, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	bf18      	it	ne
 80094b4:	2000      	movne	r0, #0
 80094b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094b8:	1e4d      	subs	r5, r1, #1
 80094ba:	1e44      	subs	r4, r0, #1
 80094bc:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80094c0:	2a00      	cmp	r2, #0
 80094c2:	d0f3      	beq.n	80094ac <strstr+0x12>
 80094c4:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80094c8:	4297      	cmp	r7, r2
 80094ca:	4633      	mov	r3, r6
 80094cc:	d0f6      	beq.n	80094bc <strstr+0x22>
 80094ce:	e7e8      	b.n	80094a2 <strstr+0x8>

080094d0 <_strtol_l.isra.0>:
 80094d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d4:	4680      	mov	r8, r0
 80094d6:	4689      	mov	r9, r1
 80094d8:	4692      	mov	sl, r2
 80094da:	461f      	mov	r7, r3
 80094dc:	468b      	mov	fp, r1
 80094de:	465d      	mov	r5, fp
 80094e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80094e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094e6:	f000 fbc7 	bl	8009c78 <__locale_ctype_ptr_l>
 80094ea:	4420      	add	r0, r4
 80094ec:	7846      	ldrb	r6, [r0, #1]
 80094ee:	f016 0608 	ands.w	r6, r6, #8
 80094f2:	d10b      	bne.n	800950c <_strtol_l.isra.0+0x3c>
 80094f4:	2c2d      	cmp	r4, #45	; 0x2d
 80094f6:	d10b      	bne.n	8009510 <_strtol_l.isra.0+0x40>
 80094f8:	782c      	ldrb	r4, [r5, #0]
 80094fa:	2601      	movs	r6, #1
 80094fc:	f10b 0502 	add.w	r5, fp, #2
 8009500:	b167      	cbz	r7, 800951c <_strtol_l.isra.0+0x4c>
 8009502:	2f10      	cmp	r7, #16
 8009504:	d114      	bne.n	8009530 <_strtol_l.isra.0+0x60>
 8009506:	2c30      	cmp	r4, #48	; 0x30
 8009508:	d00a      	beq.n	8009520 <_strtol_l.isra.0+0x50>
 800950a:	e011      	b.n	8009530 <_strtol_l.isra.0+0x60>
 800950c:	46ab      	mov	fp, r5
 800950e:	e7e6      	b.n	80094de <_strtol_l.isra.0+0xe>
 8009510:	2c2b      	cmp	r4, #43	; 0x2b
 8009512:	bf04      	itt	eq
 8009514:	782c      	ldrbeq	r4, [r5, #0]
 8009516:	f10b 0502 	addeq.w	r5, fp, #2
 800951a:	e7f1      	b.n	8009500 <_strtol_l.isra.0+0x30>
 800951c:	2c30      	cmp	r4, #48	; 0x30
 800951e:	d127      	bne.n	8009570 <_strtol_l.isra.0+0xa0>
 8009520:	782b      	ldrb	r3, [r5, #0]
 8009522:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009526:	2b58      	cmp	r3, #88	; 0x58
 8009528:	d14b      	bne.n	80095c2 <_strtol_l.isra.0+0xf2>
 800952a:	786c      	ldrb	r4, [r5, #1]
 800952c:	2710      	movs	r7, #16
 800952e:	3502      	adds	r5, #2
 8009530:	2e00      	cmp	r6, #0
 8009532:	bf0c      	ite	eq
 8009534:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009538:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800953c:	2200      	movs	r2, #0
 800953e:	fbb1 fef7 	udiv	lr, r1, r7
 8009542:	4610      	mov	r0, r2
 8009544:	fb07 1c1e 	mls	ip, r7, lr, r1
 8009548:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800954c:	2b09      	cmp	r3, #9
 800954e:	d811      	bhi.n	8009574 <_strtol_l.isra.0+0xa4>
 8009550:	461c      	mov	r4, r3
 8009552:	42a7      	cmp	r7, r4
 8009554:	dd1d      	ble.n	8009592 <_strtol_l.isra.0+0xc2>
 8009556:	1c53      	adds	r3, r2, #1
 8009558:	d007      	beq.n	800956a <_strtol_l.isra.0+0x9a>
 800955a:	4586      	cmp	lr, r0
 800955c:	d316      	bcc.n	800958c <_strtol_l.isra.0+0xbc>
 800955e:	d101      	bne.n	8009564 <_strtol_l.isra.0+0x94>
 8009560:	45a4      	cmp	ip, r4
 8009562:	db13      	blt.n	800958c <_strtol_l.isra.0+0xbc>
 8009564:	fb00 4007 	mla	r0, r0, r7, r4
 8009568:	2201      	movs	r2, #1
 800956a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800956e:	e7eb      	b.n	8009548 <_strtol_l.isra.0+0x78>
 8009570:	270a      	movs	r7, #10
 8009572:	e7dd      	b.n	8009530 <_strtol_l.isra.0+0x60>
 8009574:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009578:	2b19      	cmp	r3, #25
 800957a:	d801      	bhi.n	8009580 <_strtol_l.isra.0+0xb0>
 800957c:	3c37      	subs	r4, #55	; 0x37
 800957e:	e7e8      	b.n	8009552 <_strtol_l.isra.0+0x82>
 8009580:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009584:	2b19      	cmp	r3, #25
 8009586:	d804      	bhi.n	8009592 <_strtol_l.isra.0+0xc2>
 8009588:	3c57      	subs	r4, #87	; 0x57
 800958a:	e7e2      	b.n	8009552 <_strtol_l.isra.0+0x82>
 800958c:	f04f 32ff 	mov.w	r2, #4294967295
 8009590:	e7eb      	b.n	800956a <_strtol_l.isra.0+0x9a>
 8009592:	1c53      	adds	r3, r2, #1
 8009594:	d108      	bne.n	80095a8 <_strtol_l.isra.0+0xd8>
 8009596:	2322      	movs	r3, #34	; 0x22
 8009598:	f8c8 3000 	str.w	r3, [r8]
 800959c:	4608      	mov	r0, r1
 800959e:	f1ba 0f00 	cmp.w	sl, #0
 80095a2:	d107      	bne.n	80095b4 <_strtol_l.isra.0+0xe4>
 80095a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a8:	b106      	cbz	r6, 80095ac <_strtol_l.isra.0+0xdc>
 80095aa:	4240      	negs	r0, r0
 80095ac:	f1ba 0f00 	cmp.w	sl, #0
 80095b0:	d00c      	beq.n	80095cc <_strtol_l.isra.0+0xfc>
 80095b2:	b122      	cbz	r2, 80095be <_strtol_l.isra.0+0xee>
 80095b4:	3d01      	subs	r5, #1
 80095b6:	f8ca 5000 	str.w	r5, [sl]
 80095ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095be:	464d      	mov	r5, r9
 80095c0:	e7f9      	b.n	80095b6 <_strtol_l.isra.0+0xe6>
 80095c2:	2430      	movs	r4, #48	; 0x30
 80095c4:	2f00      	cmp	r7, #0
 80095c6:	d1b3      	bne.n	8009530 <_strtol_l.isra.0+0x60>
 80095c8:	2708      	movs	r7, #8
 80095ca:	e7b1      	b.n	8009530 <_strtol_l.isra.0+0x60>
 80095cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095d0 <_strtol_r>:
 80095d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095d2:	4c06      	ldr	r4, [pc, #24]	; (80095ec <_strtol_r+0x1c>)
 80095d4:	4d06      	ldr	r5, [pc, #24]	; (80095f0 <_strtol_r+0x20>)
 80095d6:	6824      	ldr	r4, [r4, #0]
 80095d8:	6a24      	ldr	r4, [r4, #32]
 80095da:	2c00      	cmp	r4, #0
 80095dc:	bf08      	it	eq
 80095de:	462c      	moveq	r4, r5
 80095e0:	9400      	str	r4, [sp, #0]
 80095e2:	f7ff ff75 	bl	80094d0 <_strtol_l.isra.0>
 80095e6:	b003      	add	sp, #12
 80095e8:	bd30      	pop	{r4, r5, pc}
 80095ea:	bf00      	nop
 80095ec:	20000010 	.word	0x20000010
 80095f0:	200000bc 	.word	0x200000bc

080095f4 <strtol>:
 80095f4:	4b08      	ldr	r3, [pc, #32]	; (8009618 <strtol+0x24>)
 80095f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095f8:	681c      	ldr	r4, [r3, #0]
 80095fa:	4d08      	ldr	r5, [pc, #32]	; (800961c <strtol+0x28>)
 80095fc:	6a23      	ldr	r3, [r4, #32]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	bf08      	it	eq
 8009602:	462b      	moveq	r3, r5
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	4613      	mov	r3, r2
 8009608:	460a      	mov	r2, r1
 800960a:	4601      	mov	r1, r0
 800960c:	4620      	mov	r0, r4
 800960e:	f7ff ff5f 	bl	80094d0 <_strtol_l.isra.0>
 8009612:	b003      	add	sp, #12
 8009614:	bd30      	pop	{r4, r5, pc}
 8009616:	bf00      	nop
 8009618:	20000010 	.word	0x20000010
 800961c:	200000bc 	.word	0x200000bc

08009620 <__tzcalc_limits>:
 8009620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009624:	4604      	mov	r4, r0
 8009626:	f000 fa89 	bl	8009b3c <__gettzinfo>
 800962a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800962e:	429c      	cmp	r4, r3
 8009630:	f340 8098 	ble.w	8009764 <__tzcalc_limits+0x144>
 8009634:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8009638:	18e3      	adds	r3, r4, r3
 800963a:	109b      	asrs	r3, r3, #2
 800963c:	f240 126d 	movw	r2, #365	; 0x16d
 8009640:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 8009644:	fb02 3505 	mla	r5, r2, r5, r3
 8009648:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800964c:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 8009650:	fb93 f3f2 	sdiv	r3, r3, r2
 8009654:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8009658:	441d      	add	r5, r3
 800965a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800965e:	18a2      	adds	r2, r4, r2
 8009660:	fb94 f7f3 	sdiv	r7, r4, r3
 8009664:	fb92 f2f3 	sdiv	r2, r2, r3
 8009668:	fb03 4717 	mls	r7, r3, r7, r4
 800966c:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8009670:	4415      	add	r5, r2
 8009672:	fab7 fe87 	clz	lr, r7
 8009676:	2264      	movs	r2, #100	; 0x64
 8009678:	9301      	str	r3, [sp, #4]
 800967a:	f004 0303 	and.w	r3, r4, #3
 800967e:	fb94 f6f2 	sdiv	r6, r4, r2
 8009682:	6044      	str	r4, [r0, #4]
 8009684:	fb02 4616 	mls	r6, r2, r6, r4
 8009688:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800968c:	4601      	mov	r1, r0
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 8009694:	7a0b      	ldrb	r3, [r1, #8]
 8009696:	2b4a      	cmp	r3, #74	; 0x4a
 8009698:	d123      	bne.n	80096e2 <__tzcalc_limits+0xc2>
 800969a:	694c      	ldr	r4, [r1, #20]
 800969c:	9a00      	ldr	r2, [sp, #0]
 800969e:	192b      	adds	r3, r5, r4
 80096a0:	b902      	cbnz	r2, 80096a4 <__tzcalc_limits+0x84>
 80096a2:	b906      	cbnz	r6, 80096a6 <__tzcalc_limits+0x86>
 80096a4:	b9df      	cbnz	r7, 80096de <__tzcalc_limits+0xbe>
 80096a6:	2c3b      	cmp	r4, #59	; 0x3b
 80096a8:	bfd4      	ite	le
 80096aa:	2400      	movle	r4, #0
 80096ac:	2401      	movgt	r4, #1
 80096ae:	441c      	add	r4, r3
 80096b0:	3c01      	subs	r4, #1
 80096b2:	4b2d      	ldr	r3, [pc, #180]	; (8009768 <__tzcalc_limits+0x148>)
 80096b4:	698a      	ldr	r2, [r1, #24]
 80096b6:	fb03 2404 	mla	r4, r3, r4, r2
 80096ba:	6a0b      	ldr	r3, [r1, #32]
 80096bc:	441c      	add	r4, r3
 80096be:	f841 4f1c 	str.w	r4, [r1, #28]!
 80096c2:	9b01      	ldr	r3, [sp, #4]
 80096c4:	428b      	cmp	r3, r1
 80096c6:	d1e5      	bne.n	8009694 <__tzcalc_limits+0x74>
 80096c8:	69c3      	ldr	r3, [r0, #28]
 80096ca:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80096cc:	4293      	cmp	r3, r2
 80096ce:	bfac      	ite	ge
 80096d0:	2300      	movge	r3, #0
 80096d2:	2301      	movlt	r3, #1
 80096d4:	6003      	str	r3, [r0, #0]
 80096d6:	2001      	movs	r0, #1
 80096d8:	b003      	add	sp, #12
 80096da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096de:	2400      	movs	r4, #0
 80096e0:	e7e5      	b.n	80096ae <__tzcalc_limits+0x8e>
 80096e2:	2b44      	cmp	r3, #68	; 0x44
 80096e4:	d102      	bne.n	80096ec <__tzcalc_limits+0xcc>
 80096e6:	694b      	ldr	r3, [r1, #20]
 80096e8:	18ec      	adds	r4, r5, r3
 80096ea:	e7e2      	b.n	80096b2 <__tzcalc_limits+0x92>
 80096ec:	9b00      	ldr	r3, [sp, #0]
 80096ee:	bb7b      	cbnz	r3, 8009750 <__tzcalc_limits+0x130>
 80096f0:	2e00      	cmp	r6, #0
 80096f2:	bf0c      	ite	eq
 80096f4:	46f0      	moveq	r8, lr
 80096f6:	f04f 0801 	movne.w	r8, #1
 80096fa:	4b1c      	ldr	r3, [pc, #112]	; (800976c <__tzcalc_limits+0x14c>)
 80096fc:	68cc      	ldr	r4, [r1, #12]
 80096fe:	2230      	movs	r2, #48	; 0x30
 8009700:	fb02 3808 	mla	r8, r2, r8, r3
 8009704:	f1a8 0a04 	sub.w	sl, r8, #4
 8009708:	462b      	mov	r3, r5
 800970a:	f04f 0901 	mov.w	r9, #1
 800970e:	45a1      	cmp	r9, r4
 8009710:	db20      	blt.n	8009754 <__tzcalc_limits+0x134>
 8009712:	2c01      	cmp	r4, #1
 8009714:	bfb8      	it	lt
 8009716:	2401      	movlt	r4, #1
 8009718:	46a1      	mov	r9, r4
 800971a:	f103 0b04 	add.w	fp, r3, #4
 800971e:	2207      	movs	r2, #7
 8009720:	694c      	ldr	r4, [r1, #20]
 8009722:	fb9b faf2 	sdiv	sl, fp, r2
 8009726:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800972a:	ebab 0a0a 	sub.w	sl, fp, sl
 800972e:	ebb4 0a0a 	subs.w	sl, r4, sl
 8009732:	690c      	ldr	r4, [r1, #16]
 8009734:	44e1      	add	r9, ip
 8009736:	f104 34ff 	add.w	r4, r4, #4294967295
 800973a:	bf48      	it	mi
 800973c:	4492      	addmi	sl, r2
 800973e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8009742:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 8009746:	4454      	add	r4, sl
 8009748:	4544      	cmp	r4, r8
 800974a:	da09      	bge.n	8009760 <__tzcalc_limits+0x140>
 800974c:	441c      	add	r4, r3
 800974e:	e7b0      	b.n	80096b2 <__tzcalc_limits+0x92>
 8009750:	46f0      	mov	r8, lr
 8009752:	e7d2      	b.n	80096fa <__tzcalc_limits+0xda>
 8009754:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8009758:	f109 0901 	add.w	r9, r9, #1
 800975c:	445b      	add	r3, fp
 800975e:	e7d6      	b.n	800970e <__tzcalc_limits+0xee>
 8009760:	3c07      	subs	r4, #7
 8009762:	e7f1      	b.n	8009748 <__tzcalc_limits+0x128>
 8009764:	2000      	movs	r0, #0
 8009766:	e7b7      	b.n	80096d8 <__tzcalc_limits+0xb8>
 8009768:	00015180 	.word	0x00015180
 800976c:	0800b0ec 	.word	0x0800b0ec

08009770 <__tz_lock>:
 8009770:	4770      	bx	lr

08009772 <__tz_unlock>:
 8009772:	4770      	bx	lr

08009774 <_tzset_unlocked>:
 8009774:	4b01      	ldr	r3, [pc, #4]	; (800977c <_tzset_unlocked+0x8>)
 8009776:	6818      	ldr	r0, [r3, #0]
 8009778:	f000 b802 	b.w	8009780 <_tzset_unlocked_r>
 800977c:	20000010 	.word	0x20000010

08009780 <_tzset_unlocked_r>:
 8009780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009784:	b08d      	sub	sp, #52	; 0x34
 8009786:	4607      	mov	r7, r0
 8009788:	f000 f9d8 	bl	8009b3c <__gettzinfo>
 800978c:	49b1      	ldr	r1, [pc, #708]	; (8009a54 <_tzset_unlocked_r+0x2d4>)
 800978e:	4eb2      	ldr	r6, [pc, #712]	; (8009a58 <_tzset_unlocked_r+0x2d8>)
 8009790:	4605      	mov	r5, r0
 8009792:	4638      	mov	r0, r7
 8009794:	f000 f9ca 	bl	8009b2c <_getenv_r>
 8009798:	4604      	mov	r4, r0
 800979a:	b970      	cbnz	r0, 80097ba <_tzset_unlocked_r+0x3a>
 800979c:	4baf      	ldr	r3, [pc, #700]	; (8009a5c <_tzset_unlocked_r+0x2dc>)
 800979e:	4ab0      	ldr	r2, [pc, #704]	; (8009a60 <_tzset_unlocked_r+0x2e0>)
 80097a0:	6018      	str	r0, [r3, #0]
 80097a2:	4bb0      	ldr	r3, [pc, #704]	; (8009a64 <_tzset_unlocked_r+0x2e4>)
 80097a4:	6018      	str	r0, [r3, #0]
 80097a6:	4bb0      	ldr	r3, [pc, #704]	; (8009a68 <_tzset_unlocked_r+0x2e8>)
 80097a8:	6830      	ldr	r0, [r6, #0]
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	605a      	str	r2, [r3, #4]
 80097ae:	f000 fa75 	bl	8009c9c <free>
 80097b2:	6034      	str	r4, [r6, #0]
 80097b4:	b00d      	add	sp, #52	; 0x34
 80097b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ba:	6831      	ldr	r1, [r6, #0]
 80097bc:	2900      	cmp	r1, #0
 80097be:	d160      	bne.n	8009882 <_tzset_unlocked_r+0x102>
 80097c0:	6830      	ldr	r0, [r6, #0]
 80097c2:	f000 fa6b 	bl	8009c9c <free>
 80097c6:	4620      	mov	r0, r4
 80097c8:	f7f6 fd02 	bl	80001d0 <strlen>
 80097cc:	1c41      	adds	r1, r0, #1
 80097ce:	4638      	mov	r0, r7
 80097d0:	f000 facc 	bl	8009d6c <_malloc_r>
 80097d4:	6030      	str	r0, [r6, #0]
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d158      	bne.n	800988c <_tzset_unlocked_r+0x10c>
 80097da:	7823      	ldrb	r3, [r4, #0]
 80097dc:	4aa3      	ldr	r2, [pc, #652]	; (8009a6c <_tzset_unlocked_r+0x2ec>)
 80097de:	49a4      	ldr	r1, [pc, #656]	; (8009a70 <_tzset_unlocked_r+0x2f0>)
 80097e0:	2b3a      	cmp	r3, #58	; 0x3a
 80097e2:	bf08      	it	eq
 80097e4:	3401      	addeq	r4, #1
 80097e6:	ae0a      	add	r6, sp, #40	; 0x28
 80097e8:	4633      	mov	r3, r6
 80097ea:	4620      	mov	r0, r4
 80097ec:	f000 fe12 	bl	800a414 <siscanf>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	dddf      	ble.n	80097b4 <_tzset_unlocked_r+0x34>
 80097f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f6:	18e7      	adds	r7, r4, r3
 80097f8:	5ce3      	ldrb	r3, [r4, r3]
 80097fa:	2b2d      	cmp	r3, #45	; 0x2d
 80097fc:	d14a      	bne.n	8009894 <_tzset_unlocked_r+0x114>
 80097fe:	3701      	adds	r7, #1
 8009800:	f04f 34ff 	mov.w	r4, #4294967295
 8009804:	f10d 0a20 	add.w	sl, sp, #32
 8009808:	f10d 0b1e 	add.w	fp, sp, #30
 800980c:	f04f 0800 	mov.w	r8, #0
 8009810:	9603      	str	r6, [sp, #12]
 8009812:	f8cd a008 	str.w	sl, [sp, #8]
 8009816:	9601      	str	r6, [sp, #4]
 8009818:	f8cd b000 	str.w	fp, [sp]
 800981c:	4633      	mov	r3, r6
 800981e:	aa07      	add	r2, sp, #28
 8009820:	4994      	ldr	r1, [pc, #592]	; (8009a74 <_tzset_unlocked_r+0x2f4>)
 8009822:	f8ad 801e 	strh.w	r8, [sp, #30]
 8009826:	4638      	mov	r0, r7
 8009828:	f8ad 8020 	strh.w	r8, [sp, #32]
 800982c:	f000 fdf2 	bl	800a414 <siscanf>
 8009830:	4540      	cmp	r0, r8
 8009832:	ddbf      	ble.n	80097b4 <_tzset_unlocked_r+0x34>
 8009834:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009838:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800983c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8009a80 <_tzset_unlocked_r+0x300>
 8009840:	213c      	movs	r1, #60	; 0x3c
 8009842:	fb01 2203 	mla	r2, r1, r3, r2
 8009846:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800984a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800984e:	fb01 2303 	mla	r3, r1, r3, r2
 8009852:	435c      	muls	r4, r3
 8009854:	622c      	str	r4, [r5, #32]
 8009856:	4c84      	ldr	r4, [pc, #528]	; (8009a68 <_tzset_unlocked_r+0x2e8>)
 8009858:	4b84      	ldr	r3, [pc, #528]	; (8009a6c <_tzset_unlocked_r+0x2ec>)
 800985a:	6023      	str	r3, [r4, #0]
 800985c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800985e:	4984      	ldr	r1, [pc, #528]	; (8009a70 <_tzset_unlocked_r+0x2f0>)
 8009860:	441f      	add	r7, r3
 8009862:	464a      	mov	r2, r9
 8009864:	4633      	mov	r3, r6
 8009866:	4638      	mov	r0, r7
 8009868:	f000 fdd4 	bl	800a414 <siscanf>
 800986c:	4540      	cmp	r0, r8
 800986e:	dc16      	bgt.n	800989e <_tzset_unlocked_r+0x11e>
 8009870:	6823      	ldr	r3, [r4, #0]
 8009872:	6063      	str	r3, [r4, #4]
 8009874:	4b79      	ldr	r3, [pc, #484]	; (8009a5c <_tzset_unlocked_r+0x2dc>)
 8009876:	6a2a      	ldr	r2, [r5, #32]
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	4b7a      	ldr	r3, [pc, #488]	; (8009a64 <_tzset_unlocked_r+0x2e4>)
 800987c:	f8c3 8000 	str.w	r8, [r3]
 8009880:	e798      	b.n	80097b4 <_tzset_unlocked_r+0x34>
 8009882:	f7f6 fcad 	bl	80001e0 <strcmp>
 8009886:	2800      	cmp	r0, #0
 8009888:	d094      	beq.n	80097b4 <_tzset_unlocked_r+0x34>
 800988a:	e799      	b.n	80097c0 <_tzset_unlocked_r+0x40>
 800988c:	4621      	mov	r1, r4
 800988e:	f7ff fdea 	bl	8009466 <strcpy>
 8009892:	e7a2      	b.n	80097da <_tzset_unlocked_r+0x5a>
 8009894:	2b2b      	cmp	r3, #43	; 0x2b
 8009896:	bf08      	it	eq
 8009898:	3701      	addeq	r7, #1
 800989a:	2401      	movs	r4, #1
 800989c:	e7b2      	b.n	8009804 <_tzset_unlocked_r+0x84>
 800989e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098a0:	f8c4 9004 	str.w	r9, [r4, #4]
 80098a4:	18fc      	adds	r4, r7, r3
 80098a6:	5cfb      	ldrb	r3, [r7, r3]
 80098a8:	2b2d      	cmp	r3, #45	; 0x2d
 80098aa:	f040 8092 	bne.w	80099d2 <_tzset_unlocked_r+0x252>
 80098ae:	3401      	adds	r4, #1
 80098b0:	f04f 37ff 	mov.w	r7, #4294967295
 80098b4:	2300      	movs	r3, #0
 80098b6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80098ba:	f8ad 301e 	strh.w	r3, [sp, #30]
 80098be:	f8ad 3020 	strh.w	r3, [sp, #32]
 80098c2:	930a      	str	r3, [sp, #40]	; 0x28
 80098c4:	9603      	str	r6, [sp, #12]
 80098c6:	f8cd a008 	str.w	sl, [sp, #8]
 80098ca:	9601      	str	r6, [sp, #4]
 80098cc:	f8cd b000 	str.w	fp, [sp]
 80098d0:	4633      	mov	r3, r6
 80098d2:	aa07      	add	r2, sp, #28
 80098d4:	4967      	ldr	r1, [pc, #412]	; (8009a74 <_tzset_unlocked_r+0x2f4>)
 80098d6:	4620      	mov	r0, r4
 80098d8:	f000 fd9c 	bl	800a414 <siscanf>
 80098dc:	2800      	cmp	r0, #0
 80098de:	dc7d      	bgt.n	80099dc <_tzset_unlocked_r+0x25c>
 80098e0:	6a2b      	ldr	r3, [r5, #32]
 80098e2:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80098e6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80098e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ea:	462f      	mov	r7, r5
 80098ec:	441c      	add	r4, r3
 80098ee:	f04f 0900 	mov.w	r9, #0
 80098f2:	7823      	ldrb	r3, [r4, #0]
 80098f4:	2b2c      	cmp	r3, #44	; 0x2c
 80098f6:	bf08      	it	eq
 80098f8:	3401      	addeq	r4, #1
 80098fa:	f894 8000 	ldrb.w	r8, [r4]
 80098fe:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8009902:	d17b      	bne.n	80099fc <_tzset_unlocked_r+0x27c>
 8009904:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8009908:	9302      	str	r3, [sp, #8]
 800990a:	ab09      	add	r3, sp, #36	; 0x24
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	9603      	str	r6, [sp, #12]
 8009910:	9601      	str	r6, [sp, #4]
 8009912:	4633      	mov	r3, r6
 8009914:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8009918:	4957      	ldr	r1, [pc, #348]	; (8009a78 <_tzset_unlocked_r+0x2f8>)
 800991a:	4620      	mov	r0, r4
 800991c:	f000 fd7a 	bl	800a414 <siscanf>
 8009920:	2803      	cmp	r0, #3
 8009922:	f47f af47 	bne.w	80097b4 <_tzset_unlocked_r+0x34>
 8009926:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800992a:	1e4b      	subs	r3, r1, #1
 800992c:	2b0b      	cmp	r3, #11
 800992e:	f63f af41 	bhi.w	80097b4 <_tzset_unlocked_r+0x34>
 8009932:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8009936:	1e53      	subs	r3, r2, #1
 8009938:	2b04      	cmp	r3, #4
 800993a:	f63f af3b 	bhi.w	80097b4 <_tzset_unlocked_r+0x34>
 800993e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009942:	2b06      	cmp	r3, #6
 8009944:	f63f af36 	bhi.w	80097b4 <_tzset_unlocked_r+0x34>
 8009948:	f887 8008 	strb.w	r8, [r7, #8]
 800994c:	60f9      	str	r1, [r7, #12]
 800994e:	613a      	str	r2, [r7, #16]
 8009950:	617b      	str	r3, [r7, #20]
 8009952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009954:	eb04 0803 	add.w	r8, r4, r3
 8009958:	2302      	movs	r3, #2
 800995a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800995e:	2300      	movs	r3, #0
 8009960:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009964:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009968:	930a      	str	r3, [sp, #40]	; 0x28
 800996a:	f898 3000 	ldrb.w	r3, [r8]
 800996e:	2b2f      	cmp	r3, #47	; 0x2f
 8009970:	d10b      	bne.n	800998a <_tzset_unlocked_r+0x20a>
 8009972:	9603      	str	r6, [sp, #12]
 8009974:	f8cd a008 	str.w	sl, [sp, #8]
 8009978:	9601      	str	r6, [sp, #4]
 800997a:	f8cd b000 	str.w	fp, [sp]
 800997e:	4633      	mov	r3, r6
 8009980:	aa07      	add	r2, sp, #28
 8009982:	493e      	ldr	r1, [pc, #248]	; (8009a7c <_tzset_unlocked_r+0x2fc>)
 8009984:	4640      	mov	r0, r8
 8009986:	f000 fd45 	bl	800a414 <siscanf>
 800998a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800998e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009992:	213c      	movs	r1, #60	; 0x3c
 8009994:	fb01 2203 	mla	r2, r1, r3, r2
 8009998:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800999c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80099a0:	fb01 2303 	mla	r3, r1, r3, r2
 80099a4:	61bb      	str	r3, [r7, #24]
 80099a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80099a8:	f109 0901 	add.w	r9, r9, #1
 80099ac:	f1b9 0f02 	cmp.w	r9, #2
 80099b0:	4444      	add	r4, r8
 80099b2:	f107 071c 	add.w	r7, r7, #28
 80099b6:	d19c      	bne.n	80098f2 <_tzset_unlocked_r+0x172>
 80099b8:	6868      	ldr	r0, [r5, #4]
 80099ba:	f7ff fe31 	bl	8009620 <__tzcalc_limits>
 80099be:	4b27      	ldr	r3, [pc, #156]	; (8009a5c <_tzset_unlocked_r+0x2dc>)
 80099c0:	6a2a      	ldr	r2, [r5, #32]
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80099c6:	1a9b      	subs	r3, r3, r2
 80099c8:	4a26      	ldr	r2, [pc, #152]	; (8009a64 <_tzset_unlocked_r+0x2e4>)
 80099ca:	bf18      	it	ne
 80099cc:	2301      	movne	r3, #1
 80099ce:	6013      	str	r3, [r2, #0]
 80099d0:	e6f0      	b.n	80097b4 <_tzset_unlocked_r+0x34>
 80099d2:	2b2b      	cmp	r3, #43	; 0x2b
 80099d4:	bf08      	it	eq
 80099d6:	3401      	addeq	r4, #1
 80099d8:	2701      	movs	r7, #1
 80099da:	e76b      	b.n	80098b4 <_tzset_unlocked_r+0x134>
 80099dc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80099e0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80099e4:	213c      	movs	r1, #60	; 0x3c
 80099e6:	fb01 2203 	mla	r2, r1, r3, r2
 80099ea:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80099ee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80099f2:	fb01 2303 	mla	r3, r1, r3, r2
 80099f6:	435f      	muls	r7, r3
 80099f8:	63ef      	str	r7, [r5, #60]	; 0x3c
 80099fa:	e775      	b.n	80098e8 <_tzset_unlocked_r+0x168>
 80099fc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8009a00:	bf06      	itte	eq
 8009a02:	3401      	addeq	r4, #1
 8009a04:	4643      	moveq	r3, r8
 8009a06:	2344      	movne	r3, #68	; 0x44
 8009a08:	220a      	movs	r2, #10
 8009a0a:	a90b      	add	r1, sp, #44	; 0x2c
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	9305      	str	r3, [sp, #20]
 8009a10:	f000 fdbc 	bl	800a58c <strtoul>
 8009a14:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8009a18:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8009a1c:	4544      	cmp	r4, r8
 8009a1e:	9b05      	ldr	r3, [sp, #20]
 8009a20:	d114      	bne.n	8009a4c <_tzset_unlocked_r+0x2cc>
 8009a22:	234d      	movs	r3, #77	; 0x4d
 8009a24:	f1b9 0f00 	cmp.w	r9, #0
 8009a28:	d107      	bne.n	8009a3a <_tzset_unlocked_r+0x2ba>
 8009a2a:	722b      	strb	r3, [r5, #8]
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	60eb      	str	r3, [r5, #12]
 8009a30:	2302      	movs	r3, #2
 8009a32:	612b      	str	r3, [r5, #16]
 8009a34:	f8c5 9014 	str.w	r9, [r5, #20]
 8009a38:	e78e      	b.n	8009958 <_tzset_unlocked_r+0x1d8>
 8009a3a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009a3e:	230b      	movs	r3, #11
 8009a40:	62ab      	str	r3, [r5, #40]	; 0x28
 8009a42:	2301      	movs	r3, #1
 8009a44:	62eb      	str	r3, [r5, #44]	; 0x2c
 8009a46:	2300      	movs	r3, #0
 8009a48:	632b      	str	r3, [r5, #48]	; 0x30
 8009a4a:	e785      	b.n	8009958 <_tzset_unlocked_r+0x1d8>
 8009a4c:	b280      	uxth	r0, r0
 8009a4e:	723b      	strb	r3, [r7, #8]
 8009a50:	6178      	str	r0, [r7, #20]
 8009a52:	e781      	b.n	8009958 <_tzset_unlocked_r+0x1d8>
 8009a54:	0800b14c 	.word	0x0800b14c
 8009a58:	20008b90 	.word	0x20008b90
 8009a5c:	20008b98 	.word	0x20008b98
 8009a60:	0800b14f 	.word	0x0800b14f
 8009a64:	20008b94 	.word	0x20008b94
 8009a68:	20000074 	.word	0x20000074
 8009a6c:	20008b83 	.word	0x20008b83
 8009a70:	0800b153 	.word	0x0800b153
 8009a74:	0800b176 	.word	0x0800b176
 8009a78:	0800b162 	.word	0x0800b162
 8009a7c:	0800b175 	.word	0x0800b175
 8009a80:	20008b78 	.word	0x20008b78

08009a84 <div>:
 8009a84:	2900      	cmp	r1, #0
 8009a86:	b510      	push	{r4, lr}
 8009a88:	fb91 f4f2 	sdiv	r4, r1, r2
 8009a8c:	fb02 1314 	mls	r3, r2, r4, r1
 8009a90:	db06      	blt.n	8009aa0 <div+0x1c>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	da01      	bge.n	8009a9a <div+0x16>
 8009a96:	3401      	adds	r4, #1
 8009a98:	1a9b      	subs	r3, r3, r2
 8009a9a:	6004      	str	r4, [r0, #0]
 8009a9c:	6043      	str	r3, [r0, #4]
 8009a9e:	bd10      	pop	{r4, pc}
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	bfc4      	itt	gt
 8009aa4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8009aa8:	189b      	addgt	r3, r3, r2
 8009aaa:	e7f6      	b.n	8009a9a <div+0x16>

08009aac <_findenv_r>:
 8009aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab0:	4606      	mov	r6, r0
 8009ab2:	468a      	mov	sl, r1
 8009ab4:	4617      	mov	r7, r2
 8009ab6:	f000 fd8c 	bl	800a5d2 <__env_lock>
 8009aba:	4b1b      	ldr	r3, [pc, #108]	; (8009b28 <_findenv_r+0x7c>)
 8009abc:	f8d3 8000 	ldr.w	r8, [r3]
 8009ac0:	4699      	mov	r9, r3
 8009ac2:	f1b8 0f00 	cmp.w	r8, #0
 8009ac6:	d007      	beq.n	8009ad8 <_findenv_r+0x2c>
 8009ac8:	4654      	mov	r4, sl
 8009aca:	4623      	mov	r3, r4
 8009acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ad0:	b332      	cbz	r2, 8009b20 <_findenv_r+0x74>
 8009ad2:	2a3d      	cmp	r2, #61	; 0x3d
 8009ad4:	461c      	mov	r4, r3
 8009ad6:	d1f8      	bne.n	8009aca <_findenv_r+0x1e>
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f000 fd7b 	bl	800a5d4 <__env_unlock>
 8009ade:	2000      	movs	r0, #0
 8009ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae4:	f108 0804 	add.w	r8, r8, #4
 8009ae8:	f8d8 0000 	ldr.w	r0, [r8]
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d0f3      	beq.n	8009ad8 <_findenv_r+0x2c>
 8009af0:	4622      	mov	r2, r4
 8009af2:	4651      	mov	r1, sl
 8009af4:	f7ff fcbf 	bl	8009476 <strncmp>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d1f3      	bne.n	8009ae4 <_findenv_r+0x38>
 8009afc:	f8d8 3000 	ldr.w	r3, [r8]
 8009b00:	191d      	adds	r5, r3, r4
 8009b02:	5d1b      	ldrb	r3, [r3, r4]
 8009b04:	2b3d      	cmp	r3, #61	; 0x3d
 8009b06:	d1ed      	bne.n	8009ae4 <_findenv_r+0x38>
 8009b08:	f8d9 3000 	ldr.w	r3, [r9]
 8009b0c:	eba8 0303 	sub.w	r3, r8, r3
 8009b10:	109b      	asrs	r3, r3, #2
 8009b12:	4630      	mov	r0, r6
 8009b14:	603b      	str	r3, [r7, #0]
 8009b16:	f000 fd5d 	bl	800a5d4 <__env_unlock>
 8009b1a:	1c68      	adds	r0, r5, #1
 8009b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b20:	eba4 040a 	sub.w	r4, r4, sl
 8009b24:	e7e0      	b.n	8009ae8 <_findenv_r+0x3c>
 8009b26:	bf00      	nop
 8009b28:	20000008 	.word	0x20000008

08009b2c <_getenv_r>:
 8009b2c:	b507      	push	{r0, r1, r2, lr}
 8009b2e:	aa01      	add	r2, sp, #4
 8009b30:	f7ff ffbc 	bl	8009aac <_findenv_r>
 8009b34:	b003      	add	sp, #12
 8009b36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009b3c <__gettzinfo>:
 8009b3c:	4800      	ldr	r0, [pc, #0]	; (8009b40 <__gettzinfo+0x4>)
 8009b3e:	4770      	bx	lr
 8009b40:	2000007c 	.word	0x2000007c

08009b44 <gmtime_r>:
 8009b44:	6802      	ldr	r2, [r0, #0]
 8009b46:	4848      	ldr	r0, [pc, #288]	; (8009c68 <gmtime_r+0x124>)
 8009b48:	fb92 f3f0 	sdiv	r3, r2, r0
 8009b4c:	fb00 2013 	mls	r0, r0, r3, r2
 8009b50:	2800      	cmp	r0, #0
 8009b52:	bfb8      	it	lt
 8009b54:	f500 30a8 	addlt.w	r0, r0, #86016	; 0x15000
 8009b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b5a:	bfb8      	it	lt
 8009b5c:	f500 70c0 	addlt.w	r0, r0, #384	; 0x180
 8009b60:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8009b64:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8009b68:	fb90 f2f4 	sdiv	r2, r0, r4
 8009b6c:	fb04 0012 	mls	r0, r4, r2, r0
 8009b70:	f04f 043c 	mov.w	r4, #60	; 0x3c
 8009b74:	bfac      	ite	ge
 8009b76:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 8009b7a:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 8009b7e:	608a      	str	r2, [r1, #8]
 8009b80:	fb90 f2f4 	sdiv	r2, r0, r4
 8009b84:	fb04 0012 	mls	r0, r4, r2, r0
 8009b88:	604a      	str	r2, [r1, #4]
 8009b8a:	6008      	str	r0, [r1, #0]
 8009b8c:	2207      	movs	r2, #7
 8009b8e:	1cd8      	adds	r0, r3, #3
 8009b90:	fb90 f2f2 	sdiv	r2, r0, r2
 8009b94:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009b98:	1a82      	subs	r2, r0, r2
 8009b9a:	618a      	str	r2, [r1, #24]
 8009b9c:	4a33      	ldr	r2, [pc, #204]	; (8009c6c <gmtime_r+0x128>)
 8009b9e:	4c34      	ldr	r4, [pc, #208]	; (8009c70 <gmtime_r+0x12c>)
 8009ba0:	fb93 f4f4 	sdiv	r4, r3, r4
 8009ba4:	fb02 3304 	mla	r3, r2, r4, r3
 8009ba8:	f648 60ac 	movw	r0, #36524	; 0x8eac
 8009bac:	fbb3 f0f0 	udiv	r0, r3, r0
 8009bb0:	4418      	add	r0, r3
 8009bb2:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8009bb6:	fbb3 f2f7 	udiv	r2, r3, r7
 8009bba:	1a80      	subs	r0, r0, r2
 8009bbc:	4a2d      	ldr	r2, [pc, #180]	; (8009c74 <gmtime_r+0x130>)
 8009bbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8009bc2:	1a82      	subs	r2, r0, r2
 8009bc4:	f648 6094 	movw	r0, #36500	; 0x8e94
 8009bc8:	fbb2 f0f0 	udiv	r0, r2, r0
 8009bcc:	4403      	add	r3, r0
 8009bce:	f240 166d 	movw	r6, #365	; 0x16d
 8009bd2:	fbb2 f5f6 	udiv	r5, r2, r6
 8009bd6:	fbb2 f2f7 	udiv	r2, r2, r7
 8009bda:	1a9a      	subs	r2, r3, r2
 8009bdc:	fb06 2315 	mls	r3, r6, r5, r2
 8009be0:	2099      	movs	r0, #153	; 0x99
 8009be2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009be6:	1c5e      	adds	r6, r3, #1
 8009be8:	3202      	adds	r2, #2
 8009bea:	fbb2 f2f0 	udiv	r2, r2, r0
 8009bee:	2a0a      	cmp	r2, #10
 8009bf0:	fb00 f002 	mul.w	r0, r0, r2
 8009bf4:	f100 0002 	add.w	r0, r0, #2
 8009bf8:	f04f 0705 	mov.w	r7, #5
 8009bfc:	fbb0 f0f7 	udiv	r0, r0, r7
 8009c00:	eba6 0000 	sub.w	r0, r6, r0
 8009c04:	bf34      	ite	cc
 8009c06:	2602      	movcc	r6, #2
 8009c08:	f06f 0609 	mvncs.w	r6, #9
 8009c0c:	4416      	add	r6, r2
 8009c0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009c12:	fb02 5404 	mla	r4, r2, r4, r5
 8009c16:	2e01      	cmp	r6, #1
 8009c18:	bf98      	it	ls
 8009c1a:	3401      	addls	r4, #1
 8009c1c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009c20:	d30b      	bcc.n	8009c3a <gmtime_r+0xf6>
 8009c22:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009c26:	61cb      	str	r3, [r1, #28]
 8009c28:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	60c8      	str	r0, [r1, #12]
 8009c30:	614c      	str	r4, [r1, #20]
 8009c32:	610e      	str	r6, [r1, #16]
 8009c34:	620b      	str	r3, [r1, #32]
 8009c36:	4608      	mov	r0, r1
 8009c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c3a:	07aa      	lsls	r2, r5, #30
 8009c3c:	d105      	bne.n	8009c4a <gmtime_r+0x106>
 8009c3e:	2764      	movs	r7, #100	; 0x64
 8009c40:	fbb5 f2f7 	udiv	r2, r5, r7
 8009c44:	fb07 5212 	mls	r2, r7, r2, r5
 8009c48:	b95a      	cbnz	r2, 8009c62 <gmtime_r+0x11e>
 8009c4a:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8009c4e:	fbb5 f2f7 	udiv	r2, r5, r7
 8009c52:	fb07 5212 	mls	r2, r7, r2, r5
 8009c56:	fab2 f282 	clz	r2, r2
 8009c5a:	0952      	lsrs	r2, r2, #5
 8009c5c:	333b      	adds	r3, #59	; 0x3b
 8009c5e:	4413      	add	r3, r2
 8009c60:	e7e1      	b.n	8009c26 <gmtime_r+0xe2>
 8009c62:	2201      	movs	r2, #1
 8009c64:	e7fa      	b.n	8009c5c <gmtime_r+0x118>
 8009c66:	bf00      	nop
 8009c68:	00015180 	.word	0x00015180
 8009c6c:	fffdc54f 	.word	0xfffdc54f
 8009c70:	00023ab1 	.word	0x00023ab1
 8009c74:	00023ab0 	.word	0x00023ab0

08009c78 <__locale_ctype_ptr_l>:
 8009c78:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009c7c:	4770      	bx	lr
	...

08009c80 <__locale_ctype_ptr>:
 8009c80:	4b04      	ldr	r3, [pc, #16]	; (8009c94 <__locale_ctype_ptr+0x14>)
 8009c82:	4a05      	ldr	r2, [pc, #20]	; (8009c98 <__locale_ctype_ptr+0x18>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	6a1b      	ldr	r3, [r3, #32]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	bf08      	it	eq
 8009c8c:	4613      	moveq	r3, r2
 8009c8e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8009c92:	4770      	bx	lr
 8009c94:	20000010 	.word	0x20000010
 8009c98:	200000bc 	.word	0x200000bc

08009c9c <free>:
 8009c9c:	4b02      	ldr	r3, [pc, #8]	; (8009ca8 <free+0xc>)
 8009c9e:	4601      	mov	r1, r0
 8009ca0:	6818      	ldr	r0, [r3, #0]
 8009ca2:	f000 b815 	b.w	8009cd0 <_free_r>
 8009ca6:	bf00      	nop
 8009ca8:	20000010 	.word	0x20000010

08009cac <__ascii_mbtowc>:
 8009cac:	b082      	sub	sp, #8
 8009cae:	b901      	cbnz	r1, 8009cb2 <__ascii_mbtowc+0x6>
 8009cb0:	a901      	add	r1, sp, #4
 8009cb2:	b142      	cbz	r2, 8009cc6 <__ascii_mbtowc+0x1a>
 8009cb4:	b14b      	cbz	r3, 8009cca <__ascii_mbtowc+0x1e>
 8009cb6:	7813      	ldrb	r3, [r2, #0]
 8009cb8:	600b      	str	r3, [r1, #0]
 8009cba:	7812      	ldrb	r2, [r2, #0]
 8009cbc:	1c10      	adds	r0, r2, #0
 8009cbe:	bf18      	it	ne
 8009cc0:	2001      	movne	r0, #1
 8009cc2:	b002      	add	sp, #8
 8009cc4:	4770      	bx	lr
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	e7fb      	b.n	8009cc2 <__ascii_mbtowc+0x16>
 8009cca:	f06f 0001 	mvn.w	r0, #1
 8009cce:	e7f8      	b.n	8009cc2 <__ascii_mbtowc+0x16>

08009cd0 <_free_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	2900      	cmp	r1, #0
 8009cd6:	d045      	beq.n	8009d64 <_free_r+0x94>
 8009cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cdc:	1f0c      	subs	r4, r1, #4
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	bfb8      	it	lt
 8009ce2:	18e4      	addlt	r4, r4, r3
 8009ce4:	f000 fc91 	bl	800a60a <__malloc_lock>
 8009ce8:	4a1f      	ldr	r2, [pc, #124]	; (8009d68 <_free_r+0x98>)
 8009cea:	6813      	ldr	r3, [r2, #0]
 8009cec:	4610      	mov	r0, r2
 8009cee:	b933      	cbnz	r3, 8009cfe <_free_r+0x2e>
 8009cf0:	6063      	str	r3, [r4, #4]
 8009cf2:	6014      	str	r4, [r2, #0]
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cfa:	f000 bc87 	b.w	800a60c <__malloc_unlock>
 8009cfe:	42a3      	cmp	r3, r4
 8009d00:	d90c      	bls.n	8009d1c <_free_r+0x4c>
 8009d02:	6821      	ldr	r1, [r4, #0]
 8009d04:	1862      	adds	r2, r4, r1
 8009d06:	4293      	cmp	r3, r2
 8009d08:	bf04      	itt	eq
 8009d0a:	681a      	ldreq	r2, [r3, #0]
 8009d0c:	685b      	ldreq	r3, [r3, #4]
 8009d0e:	6063      	str	r3, [r4, #4]
 8009d10:	bf04      	itt	eq
 8009d12:	1852      	addeq	r2, r2, r1
 8009d14:	6022      	streq	r2, [r4, #0]
 8009d16:	6004      	str	r4, [r0, #0]
 8009d18:	e7ec      	b.n	8009cf4 <_free_r+0x24>
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	b10a      	cbz	r2, 8009d24 <_free_r+0x54>
 8009d20:	42a2      	cmp	r2, r4
 8009d22:	d9fa      	bls.n	8009d1a <_free_r+0x4a>
 8009d24:	6819      	ldr	r1, [r3, #0]
 8009d26:	1858      	adds	r0, r3, r1
 8009d28:	42a0      	cmp	r0, r4
 8009d2a:	d10b      	bne.n	8009d44 <_free_r+0x74>
 8009d2c:	6820      	ldr	r0, [r4, #0]
 8009d2e:	4401      	add	r1, r0
 8009d30:	1858      	adds	r0, r3, r1
 8009d32:	4282      	cmp	r2, r0
 8009d34:	6019      	str	r1, [r3, #0]
 8009d36:	d1dd      	bne.n	8009cf4 <_free_r+0x24>
 8009d38:	6810      	ldr	r0, [r2, #0]
 8009d3a:	6852      	ldr	r2, [r2, #4]
 8009d3c:	605a      	str	r2, [r3, #4]
 8009d3e:	4401      	add	r1, r0
 8009d40:	6019      	str	r1, [r3, #0]
 8009d42:	e7d7      	b.n	8009cf4 <_free_r+0x24>
 8009d44:	d902      	bls.n	8009d4c <_free_r+0x7c>
 8009d46:	230c      	movs	r3, #12
 8009d48:	602b      	str	r3, [r5, #0]
 8009d4a:	e7d3      	b.n	8009cf4 <_free_r+0x24>
 8009d4c:	6820      	ldr	r0, [r4, #0]
 8009d4e:	1821      	adds	r1, r4, r0
 8009d50:	428a      	cmp	r2, r1
 8009d52:	bf04      	itt	eq
 8009d54:	6811      	ldreq	r1, [r2, #0]
 8009d56:	6852      	ldreq	r2, [r2, #4]
 8009d58:	6062      	str	r2, [r4, #4]
 8009d5a:	bf04      	itt	eq
 8009d5c:	1809      	addeq	r1, r1, r0
 8009d5e:	6021      	streq	r1, [r4, #0]
 8009d60:	605c      	str	r4, [r3, #4]
 8009d62:	e7c7      	b.n	8009cf4 <_free_r+0x24>
 8009d64:	bd38      	pop	{r3, r4, r5, pc}
 8009d66:	bf00      	nop
 8009d68:	20008b9c 	.word	0x20008b9c

08009d6c <_malloc_r>:
 8009d6c:	b570      	push	{r4, r5, r6, lr}
 8009d6e:	1ccd      	adds	r5, r1, #3
 8009d70:	f025 0503 	bic.w	r5, r5, #3
 8009d74:	3508      	adds	r5, #8
 8009d76:	2d0c      	cmp	r5, #12
 8009d78:	bf38      	it	cc
 8009d7a:	250c      	movcc	r5, #12
 8009d7c:	2d00      	cmp	r5, #0
 8009d7e:	4606      	mov	r6, r0
 8009d80:	db01      	blt.n	8009d86 <_malloc_r+0x1a>
 8009d82:	42a9      	cmp	r1, r5
 8009d84:	d903      	bls.n	8009d8e <_malloc_r+0x22>
 8009d86:	230c      	movs	r3, #12
 8009d88:	6033      	str	r3, [r6, #0]
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	bd70      	pop	{r4, r5, r6, pc}
 8009d8e:	f000 fc3c 	bl	800a60a <__malloc_lock>
 8009d92:	4a23      	ldr	r2, [pc, #140]	; (8009e20 <_malloc_r+0xb4>)
 8009d94:	6814      	ldr	r4, [r2, #0]
 8009d96:	4621      	mov	r1, r4
 8009d98:	b991      	cbnz	r1, 8009dc0 <_malloc_r+0x54>
 8009d9a:	4c22      	ldr	r4, [pc, #136]	; (8009e24 <_malloc_r+0xb8>)
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	b91b      	cbnz	r3, 8009da8 <_malloc_r+0x3c>
 8009da0:	4630      	mov	r0, r6
 8009da2:	f000 fb27 	bl	800a3f4 <_sbrk_r>
 8009da6:	6020      	str	r0, [r4, #0]
 8009da8:	4629      	mov	r1, r5
 8009daa:	4630      	mov	r0, r6
 8009dac:	f000 fb22 	bl	800a3f4 <_sbrk_r>
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	d126      	bne.n	8009e02 <_malloc_r+0x96>
 8009db4:	230c      	movs	r3, #12
 8009db6:	6033      	str	r3, [r6, #0]
 8009db8:	4630      	mov	r0, r6
 8009dba:	f000 fc27 	bl	800a60c <__malloc_unlock>
 8009dbe:	e7e4      	b.n	8009d8a <_malloc_r+0x1e>
 8009dc0:	680b      	ldr	r3, [r1, #0]
 8009dc2:	1b5b      	subs	r3, r3, r5
 8009dc4:	d41a      	bmi.n	8009dfc <_malloc_r+0x90>
 8009dc6:	2b0b      	cmp	r3, #11
 8009dc8:	d90f      	bls.n	8009dea <_malloc_r+0x7e>
 8009dca:	600b      	str	r3, [r1, #0]
 8009dcc:	50cd      	str	r5, [r1, r3]
 8009dce:	18cc      	adds	r4, r1, r3
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	f000 fc1b 	bl	800a60c <__malloc_unlock>
 8009dd6:	f104 000b 	add.w	r0, r4, #11
 8009dda:	1d23      	adds	r3, r4, #4
 8009ddc:	f020 0007 	bic.w	r0, r0, #7
 8009de0:	1ac3      	subs	r3, r0, r3
 8009de2:	d01b      	beq.n	8009e1c <_malloc_r+0xb0>
 8009de4:	425a      	negs	r2, r3
 8009de6:	50e2      	str	r2, [r4, r3]
 8009de8:	bd70      	pop	{r4, r5, r6, pc}
 8009dea:	428c      	cmp	r4, r1
 8009dec:	bf0d      	iteet	eq
 8009dee:	6863      	ldreq	r3, [r4, #4]
 8009df0:	684b      	ldrne	r3, [r1, #4]
 8009df2:	6063      	strne	r3, [r4, #4]
 8009df4:	6013      	streq	r3, [r2, #0]
 8009df6:	bf18      	it	ne
 8009df8:	460c      	movne	r4, r1
 8009dfa:	e7e9      	b.n	8009dd0 <_malloc_r+0x64>
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	6849      	ldr	r1, [r1, #4]
 8009e00:	e7ca      	b.n	8009d98 <_malloc_r+0x2c>
 8009e02:	1cc4      	adds	r4, r0, #3
 8009e04:	f024 0403 	bic.w	r4, r4, #3
 8009e08:	42a0      	cmp	r0, r4
 8009e0a:	d005      	beq.n	8009e18 <_malloc_r+0xac>
 8009e0c:	1a21      	subs	r1, r4, r0
 8009e0e:	4630      	mov	r0, r6
 8009e10:	f000 faf0 	bl	800a3f4 <_sbrk_r>
 8009e14:	3001      	adds	r0, #1
 8009e16:	d0cd      	beq.n	8009db4 <_malloc_r+0x48>
 8009e18:	6025      	str	r5, [r4, #0]
 8009e1a:	e7d9      	b.n	8009dd0 <_malloc_r+0x64>
 8009e1c:	bd70      	pop	{r4, r5, r6, pc}
 8009e1e:	bf00      	nop
 8009e20:	20008b9c 	.word	0x20008b9c
 8009e24:	20008ba0 	.word	0x20008ba0

08009e28 <__ssputs_r>:
 8009e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e2c:	688e      	ldr	r6, [r1, #8]
 8009e2e:	429e      	cmp	r6, r3
 8009e30:	4682      	mov	sl, r0
 8009e32:	460c      	mov	r4, r1
 8009e34:	4691      	mov	r9, r2
 8009e36:	4698      	mov	r8, r3
 8009e38:	d835      	bhi.n	8009ea6 <__ssputs_r+0x7e>
 8009e3a:	898a      	ldrh	r2, [r1, #12]
 8009e3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e40:	d031      	beq.n	8009ea6 <__ssputs_r+0x7e>
 8009e42:	6825      	ldr	r5, [r4, #0]
 8009e44:	6909      	ldr	r1, [r1, #16]
 8009e46:	1a6f      	subs	r7, r5, r1
 8009e48:	6965      	ldr	r5, [r4, #20]
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e50:	fb95 f5f3 	sdiv	r5, r5, r3
 8009e54:	f108 0301 	add.w	r3, r8, #1
 8009e58:	443b      	add	r3, r7
 8009e5a:	429d      	cmp	r5, r3
 8009e5c:	bf38      	it	cc
 8009e5e:	461d      	movcc	r5, r3
 8009e60:	0553      	lsls	r3, r2, #21
 8009e62:	d531      	bpl.n	8009ec8 <__ssputs_r+0xa0>
 8009e64:	4629      	mov	r1, r5
 8009e66:	f7ff ff81 	bl	8009d6c <_malloc_r>
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	b950      	cbnz	r0, 8009e84 <__ssputs_r+0x5c>
 8009e6e:	230c      	movs	r3, #12
 8009e70:	f8ca 3000 	str.w	r3, [sl]
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e7a:	81a3      	strh	r3, [r4, #12]
 8009e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e84:	463a      	mov	r2, r7
 8009e86:	6921      	ldr	r1, [r4, #16]
 8009e88:	f7ff f83d 	bl	8008f06 <memcpy>
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e96:	81a3      	strh	r3, [r4, #12]
 8009e98:	6126      	str	r6, [r4, #16]
 8009e9a:	6165      	str	r5, [r4, #20]
 8009e9c:	443e      	add	r6, r7
 8009e9e:	1bed      	subs	r5, r5, r7
 8009ea0:	6026      	str	r6, [r4, #0]
 8009ea2:	60a5      	str	r5, [r4, #8]
 8009ea4:	4646      	mov	r6, r8
 8009ea6:	4546      	cmp	r6, r8
 8009ea8:	bf28      	it	cs
 8009eaa:	4646      	movcs	r6, r8
 8009eac:	4632      	mov	r2, r6
 8009eae:	4649      	mov	r1, r9
 8009eb0:	6820      	ldr	r0, [r4, #0]
 8009eb2:	f000 fb90 	bl	800a5d6 <memmove>
 8009eb6:	68a3      	ldr	r3, [r4, #8]
 8009eb8:	1b9b      	subs	r3, r3, r6
 8009eba:	60a3      	str	r3, [r4, #8]
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	441e      	add	r6, r3
 8009ec0:	6026      	str	r6, [r4, #0]
 8009ec2:	2000      	movs	r0, #0
 8009ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec8:	462a      	mov	r2, r5
 8009eca:	f000 fba0 	bl	800a60e <_realloc_r>
 8009ece:	4606      	mov	r6, r0
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	d1e1      	bne.n	8009e98 <__ssputs_r+0x70>
 8009ed4:	6921      	ldr	r1, [r4, #16]
 8009ed6:	4650      	mov	r0, sl
 8009ed8:	f7ff fefa 	bl	8009cd0 <_free_r>
 8009edc:	e7c7      	b.n	8009e6e <__ssputs_r+0x46>
	...

08009ee0 <_svfiprintf_r>:
 8009ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	b09d      	sub	sp, #116	; 0x74
 8009ee6:	4680      	mov	r8, r0
 8009ee8:	9303      	str	r3, [sp, #12]
 8009eea:	898b      	ldrh	r3, [r1, #12]
 8009eec:	061c      	lsls	r4, r3, #24
 8009eee:	460d      	mov	r5, r1
 8009ef0:	4616      	mov	r6, r2
 8009ef2:	d50f      	bpl.n	8009f14 <_svfiprintf_r+0x34>
 8009ef4:	690b      	ldr	r3, [r1, #16]
 8009ef6:	b96b      	cbnz	r3, 8009f14 <_svfiprintf_r+0x34>
 8009ef8:	2140      	movs	r1, #64	; 0x40
 8009efa:	f7ff ff37 	bl	8009d6c <_malloc_r>
 8009efe:	6028      	str	r0, [r5, #0]
 8009f00:	6128      	str	r0, [r5, #16]
 8009f02:	b928      	cbnz	r0, 8009f10 <_svfiprintf_r+0x30>
 8009f04:	230c      	movs	r3, #12
 8009f06:	f8c8 3000 	str.w	r3, [r8]
 8009f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f0e:	e0c5      	b.n	800a09c <_svfiprintf_r+0x1bc>
 8009f10:	2340      	movs	r3, #64	; 0x40
 8009f12:	616b      	str	r3, [r5, #20]
 8009f14:	2300      	movs	r3, #0
 8009f16:	9309      	str	r3, [sp, #36]	; 0x24
 8009f18:	2320      	movs	r3, #32
 8009f1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f1e:	2330      	movs	r3, #48	; 0x30
 8009f20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f24:	f04f 0b01 	mov.w	fp, #1
 8009f28:	4637      	mov	r7, r6
 8009f2a:	463c      	mov	r4, r7
 8009f2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d13c      	bne.n	8009fae <_svfiprintf_r+0xce>
 8009f34:	ebb7 0a06 	subs.w	sl, r7, r6
 8009f38:	d00b      	beq.n	8009f52 <_svfiprintf_r+0x72>
 8009f3a:	4653      	mov	r3, sl
 8009f3c:	4632      	mov	r2, r6
 8009f3e:	4629      	mov	r1, r5
 8009f40:	4640      	mov	r0, r8
 8009f42:	f7ff ff71 	bl	8009e28 <__ssputs_r>
 8009f46:	3001      	adds	r0, #1
 8009f48:	f000 80a3 	beq.w	800a092 <_svfiprintf_r+0x1b2>
 8009f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f4e:	4453      	add	r3, sl
 8009f50:	9309      	str	r3, [sp, #36]	; 0x24
 8009f52:	783b      	ldrb	r3, [r7, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f000 809c 	beq.w	800a092 <_svfiprintf_r+0x1b2>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f60:	9304      	str	r3, [sp, #16]
 8009f62:	9307      	str	r3, [sp, #28]
 8009f64:	9205      	str	r2, [sp, #20]
 8009f66:	9306      	str	r3, [sp, #24]
 8009f68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f6c:	931a      	str	r3, [sp, #104]	; 0x68
 8009f6e:	2205      	movs	r2, #5
 8009f70:	7821      	ldrb	r1, [r4, #0]
 8009f72:	4850      	ldr	r0, [pc, #320]	; (800a0b4 <_svfiprintf_r+0x1d4>)
 8009f74:	f7f6 f944 	bl	8000200 <memchr>
 8009f78:	1c67      	adds	r7, r4, #1
 8009f7a:	9b04      	ldr	r3, [sp, #16]
 8009f7c:	b9d8      	cbnz	r0, 8009fb6 <_svfiprintf_r+0xd6>
 8009f7e:	06d9      	lsls	r1, r3, #27
 8009f80:	bf44      	itt	mi
 8009f82:	2220      	movmi	r2, #32
 8009f84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009f88:	071a      	lsls	r2, r3, #28
 8009f8a:	bf44      	itt	mi
 8009f8c:	222b      	movmi	r2, #43	; 0x2b
 8009f8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009f92:	7822      	ldrb	r2, [r4, #0]
 8009f94:	2a2a      	cmp	r2, #42	; 0x2a
 8009f96:	d016      	beq.n	8009fc6 <_svfiprintf_r+0xe6>
 8009f98:	9a07      	ldr	r2, [sp, #28]
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	200a      	movs	r0, #10
 8009f9e:	4627      	mov	r7, r4
 8009fa0:	3401      	adds	r4, #1
 8009fa2:	783b      	ldrb	r3, [r7, #0]
 8009fa4:	3b30      	subs	r3, #48	; 0x30
 8009fa6:	2b09      	cmp	r3, #9
 8009fa8:	d951      	bls.n	800a04e <_svfiprintf_r+0x16e>
 8009faa:	b1c9      	cbz	r1, 8009fe0 <_svfiprintf_r+0x100>
 8009fac:	e011      	b.n	8009fd2 <_svfiprintf_r+0xf2>
 8009fae:	2b25      	cmp	r3, #37	; 0x25
 8009fb0:	d0c0      	beq.n	8009f34 <_svfiprintf_r+0x54>
 8009fb2:	4627      	mov	r7, r4
 8009fb4:	e7b9      	b.n	8009f2a <_svfiprintf_r+0x4a>
 8009fb6:	4a3f      	ldr	r2, [pc, #252]	; (800a0b4 <_svfiprintf_r+0x1d4>)
 8009fb8:	1a80      	subs	r0, r0, r2
 8009fba:	fa0b f000 	lsl.w	r0, fp, r0
 8009fbe:	4318      	orrs	r0, r3
 8009fc0:	9004      	str	r0, [sp, #16]
 8009fc2:	463c      	mov	r4, r7
 8009fc4:	e7d3      	b.n	8009f6e <_svfiprintf_r+0x8e>
 8009fc6:	9a03      	ldr	r2, [sp, #12]
 8009fc8:	1d11      	adds	r1, r2, #4
 8009fca:	6812      	ldr	r2, [r2, #0]
 8009fcc:	9103      	str	r1, [sp, #12]
 8009fce:	2a00      	cmp	r2, #0
 8009fd0:	db01      	blt.n	8009fd6 <_svfiprintf_r+0xf6>
 8009fd2:	9207      	str	r2, [sp, #28]
 8009fd4:	e004      	b.n	8009fe0 <_svfiprintf_r+0x100>
 8009fd6:	4252      	negs	r2, r2
 8009fd8:	f043 0302 	orr.w	r3, r3, #2
 8009fdc:	9207      	str	r2, [sp, #28]
 8009fde:	9304      	str	r3, [sp, #16]
 8009fe0:	783b      	ldrb	r3, [r7, #0]
 8009fe2:	2b2e      	cmp	r3, #46	; 0x2e
 8009fe4:	d10e      	bne.n	800a004 <_svfiprintf_r+0x124>
 8009fe6:	787b      	ldrb	r3, [r7, #1]
 8009fe8:	2b2a      	cmp	r3, #42	; 0x2a
 8009fea:	f107 0101 	add.w	r1, r7, #1
 8009fee:	d132      	bne.n	800a056 <_svfiprintf_r+0x176>
 8009ff0:	9b03      	ldr	r3, [sp, #12]
 8009ff2:	1d1a      	adds	r2, r3, #4
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	9203      	str	r2, [sp, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	bfb8      	it	lt
 8009ffc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a000:	3702      	adds	r7, #2
 800a002:	9305      	str	r3, [sp, #20]
 800a004:	4c2c      	ldr	r4, [pc, #176]	; (800a0b8 <_svfiprintf_r+0x1d8>)
 800a006:	7839      	ldrb	r1, [r7, #0]
 800a008:	2203      	movs	r2, #3
 800a00a:	4620      	mov	r0, r4
 800a00c:	f7f6 f8f8 	bl	8000200 <memchr>
 800a010:	b138      	cbz	r0, 800a022 <_svfiprintf_r+0x142>
 800a012:	2340      	movs	r3, #64	; 0x40
 800a014:	1b00      	subs	r0, r0, r4
 800a016:	fa03 f000 	lsl.w	r0, r3, r0
 800a01a:	9b04      	ldr	r3, [sp, #16]
 800a01c:	4303      	orrs	r3, r0
 800a01e:	9304      	str	r3, [sp, #16]
 800a020:	3701      	adds	r7, #1
 800a022:	7839      	ldrb	r1, [r7, #0]
 800a024:	4825      	ldr	r0, [pc, #148]	; (800a0bc <_svfiprintf_r+0x1dc>)
 800a026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a02a:	2206      	movs	r2, #6
 800a02c:	1c7e      	adds	r6, r7, #1
 800a02e:	f7f6 f8e7 	bl	8000200 <memchr>
 800a032:	2800      	cmp	r0, #0
 800a034:	d035      	beq.n	800a0a2 <_svfiprintf_r+0x1c2>
 800a036:	4b22      	ldr	r3, [pc, #136]	; (800a0c0 <_svfiprintf_r+0x1e0>)
 800a038:	b9fb      	cbnz	r3, 800a07a <_svfiprintf_r+0x19a>
 800a03a:	9b03      	ldr	r3, [sp, #12]
 800a03c:	3307      	adds	r3, #7
 800a03e:	f023 0307 	bic.w	r3, r3, #7
 800a042:	3308      	adds	r3, #8
 800a044:	9303      	str	r3, [sp, #12]
 800a046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a048:	444b      	add	r3, r9
 800a04a:	9309      	str	r3, [sp, #36]	; 0x24
 800a04c:	e76c      	b.n	8009f28 <_svfiprintf_r+0x48>
 800a04e:	fb00 3202 	mla	r2, r0, r2, r3
 800a052:	2101      	movs	r1, #1
 800a054:	e7a3      	b.n	8009f9e <_svfiprintf_r+0xbe>
 800a056:	2300      	movs	r3, #0
 800a058:	9305      	str	r3, [sp, #20]
 800a05a:	4618      	mov	r0, r3
 800a05c:	240a      	movs	r4, #10
 800a05e:	460f      	mov	r7, r1
 800a060:	3101      	adds	r1, #1
 800a062:	783a      	ldrb	r2, [r7, #0]
 800a064:	3a30      	subs	r2, #48	; 0x30
 800a066:	2a09      	cmp	r2, #9
 800a068:	d903      	bls.n	800a072 <_svfiprintf_r+0x192>
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d0ca      	beq.n	800a004 <_svfiprintf_r+0x124>
 800a06e:	9005      	str	r0, [sp, #20]
 800a070:	e7c8      	b.n	800a004 <_svfiprintf_r+0x124>
 800a072:	fb04 2000 	mla	r0, r4, r0, r2
 800a076:	2301      	movs	r3, #1
 800a078:	e7f1      	b.n	800a05e <_svfiprintf_r+0x17e>
 800a07a:	ab03      	add	r3, sp, #12
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	462a      	mov	r2, r5
 800a080:	4b10      	ldr	r3, [pc, #64]	; (800a0c4 <_svfiprintf_r+0x1e4>)
 800a082:	a904      	add	r1, sp, #16
 800a084:	4640      	mov	r0, r8
 800a086:	f3af 8000 	nop.w
 800a08a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a08e:	4681      	mov	r9, r0
 800a090:	d1d9      	bne.n	800a046 <_svfiprintf_r+0x166>
 800a092:	89ab      	ldrh	r3, [r5, #12]
 800a094:	065b      	lsls	r3, r3, #25
 800a096:	f53f af38 	bmi.w	8009f0a <_svfiprintf_r+0x2a>
 800a09a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a09c:	b01d      	add	sp, #116	; 0x74
 800a09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a2:	ab03      	add	r3, sp, #12
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	462a      	mov	r2, r5
 800a0a8:	4b06      	ldr	r3, [pc, #24]	; (800a0c4 <_svfiprintf_r+0x1e4>)
 800a0aa:	a904      	add	r1, sp, #16
 800a0ac:	4640      	mov	r0, r8
 800a0ae:	f000 f881 	bl	800a1b4 <_printf_i>
 800a0b2:	e7ea      	b.n	800a08a <_svfiprintf_r+0x1aa>
 800a0b4:	0800b192 	.word	0x0800b192
 800a0b8:	0800b198 	.word	0x0800b198
 800a0bc:	0800b19c 	.word	0x0800b19c
 800a0c0:	00000000 	.word	0x00000000
 800a0c4:	08009e29 	.word	0x08009e29

0800a0c8 <_printf_common>:
 800a0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0cc:	4691      	mov	r9, r2
 800a0ce:	461f      	mov	r7, r3
 800a0d0:	688a      	ldr	r2, [r1, #8]
 800a0d2:	690b      	ldr	r3, [r1, #16]
 800a0d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	bfb8      	it	lt
 800a0dc:	4613      	movlt	r3, r2
 800a0de:	f8c9 3000 	str.w	r3, [r9]
 800a0e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	460c      	mov	r4, r1
 800a0ea:	b112      	cbz	r2, 800a0f2 <_printf_common+0x2a>
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	f8c9 3000 	str.w	r3, [r9]
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	0699      	lsls	r1, r3, #26
 800a0f6:	bf42      	ittt	mi
 800a0f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a0fc:	3302      	addmi	r3, #2
 800a0fe:	f8c9 3000 	strmi.w	r3, [r9]
 800a102:	6825      	ldr	r5, [r4, #0]
 800a104:	f015 0506 	ands.w	r5, r5, #6
 800a108:	d107      	bne.n	800a11a <_printf_common+0x52>
 800a10a:	f104 0a19 	add.w	sl, r4, #25
 800a10e:	68e3      	ldr	r3, [r4, #12]
 800a110:	f8d9 2000 	ldr.w	r2, [r9]
 800a114:	1a9b      	subs	r3, r3, r2
 800a116:	429d      	cmp	r5, r3
 800a118:	db29      	blt.n	800a16e <_printf_common+0xa6>
 800a11a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a11e:	6822      	ldr	r2, [r4, #0]
 800a120:	3300      	adds	r3, #0
 800a122:	bf18      	it	ne
 800a124:	2301      	movne	r3, #1
 800a126:	0692      	lsls	r2, r2, #26
 800a128:	d42e      	bmi.n	800a188 <_printf_common+0xc0>
 800a12a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a12e:	4639      	mov	r1, r7
 800a130:	4630      	mov	r0, r6
 800a132:	47c0      	blx	r8
 800a134:	3001      	adds	r0, #1
 800a136:	d021      	beq.n	800a17c <_printf_common+0xb4>
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	68e5      	ldr	r5, [r4, #12]
 800a13c:	f8d9 2000 	ldr.w	r2, [r9]
 800a140:	f003 0306 	and.w	r3, r3, #6
 800a144:	2b04      	cmp	r3, #4
 800a146:	bf08      	it	eq
 800a148:	1aad      	subeq	r5, r5, r2
 800a14a:	68a3      	ldr	r3, [r4, #8]
 800a14c:	6922      	ldr	r2, [r4, #16]
 800a14e:	bf0c      	ite	eq
 800a150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a154:	2500      	movne	r5, #0
 800a156:	4293      	cmp	r3, r2
 800a158:	bfc4      	itt	gt
 800a15a:	1a9b      	subgt	r3, r3, r2
 800a15c:	18ed      	addgt	r5, r5, r3
 800a15e:	f04f 0900 	mov.w	r9, #0
 800a162:	341a      	adds	r4, #26
 800a164:	454d      	cmp	r5, r9
 800a166:	d11b      	bne.n	800a1a0 <_printf_common+0xd8>
 800a168:	2000      	movs	r0, #0
 800a16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a16e:	2301      	movs	r3, #1
 800a170:	4652      	mov	r2, sl
 800a172:	4639      	mov	r1, r7
 800a174:	4630      	mov	r0, r6
 800a176:	47c0      	blx	r8
 800a178:	3001      	adds	r0, #1
 800a17a:	d103      	bne.n	800a184 <_printf_common+0xbc>
 800a17c:	f04f 30ff 	mov.w	r0, #4294967295
 800a180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a184:	3501      	adds	r5, #1
 800a186:	e7c2      	b.n	800a10e <_printf_common+0x46>
 800a188:	18e1      	adds	r1, r4, r3
 800a18a:	1c5a      	adds	r2, r3, #1
 800a18c:	2030      	movs	r0, #48	; 0x30
 800a18e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a192:	4422      	add	r2, r4
 800a194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a198:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a19c:	3302      	adds	r3, #2
 800a19e:	e7c4      	b.n	800a12a <_printf_common+0x62>
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	4622      	mov	r2, r4
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	47c0      	blx	r8
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	d0e6      	beq.n	800a17c <_printf_common+0xb4>
 800a1ae:	f109 0901 	add.w	r9, r9, #1
 800a1b2:	e7d7      	b.n	800a164 <_printf_common+0x9c>

0800a1b4 <_printf_i>:
 800a1b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1b8:	4617      	mov	r7, r2
 800a1ba:	7e0a      	ldrb	r2, [r1, #24]
 800a1bc:	b085      	sub	sp, #20
 800a1be:	2a6e      	cmp	r2, #110	; 0x6e
 800a1c0:	4698      	mov	r8, r3
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1c8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800a1cc:	f000 80bc 	beq.w	800a348 <_printf_i+0x194>
 800a1d0:	d81a      	bhi.n	800a208 <_printf_i+0x54>
 800a1d2:	2a63      	cmp	r2, #99	; 0x63
 800a1d4:	d02e      	beq.n	800a234 <_printf_i+0x80>
 800a1d6:	d80a      	bhi.n	800a1ee <_printf_i+0x3a>
 800a1d8:	2a00      	cmp	r2, #0
 800a1da:	f000 80c8 	beq.w	800a36e <_printf_i+0x1ba>
 800a1de:	2a58      	cmp	r2, #88	; 0x58
 800a1e0:	f000 808a 	beq.w	800a2f8 <_printf_i+0x144>
 800a1e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1e8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800a1ec:	e02a      	b.n	800a244 <_printf_i+0x90>
 800a1ee:	2a64      	cmp	r2, #100	; 0x64
 800a1f0:	d001      	beq.n	800a1f6 <_printf_i+0x42>
 800a1f2:	2a69      	cmp	r2, #105	; 0x69
 800a1f4:	d1f6      	bne.n	800a1e4 <_printf_i+0x30>
 800a1f6:	6821      	ldr	r1, [r4, #0]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a1fe:	d023      	beq.n	800a248 <_printf_i+0x94>
 800a200:	1d11      	adds	r1, r2, #4
 800a202:	6019      	str	r1, [r3, #0]
 800a204:	6813      	ldr	r3, [r2, #0]
 800a206:	e027      	b.n	800a258 <_printf_i+0xa4>
 800a208:	2a73      	cmp	r2, #115	; 0x73
 800a20a:	f000 80b4 	beq.w	800a376 <_printf_i+0x1c2>
 800a20e:	d808      	bhi.n	800a222 <_printf_i+0x6e>
 800a210:	2a6f      	cmp	r2, #111	; 0x6f
 800a212:	d02a      	beq.n	800a26a <_printf_i+0xb6>
 800a214:	2a70      	cmp	r2, #112	; 0x70
 800a216:	d1e5      	bne.n	800a1e4 <_printf_i+0x30>
 800a218:	680a      	ldr	r2, [r1, #0]
 800a21a:	f042 0220 	orr.w	r2, r2, #32
 800a21e:	600a      	str	r2, [r1, #0]
 800a220:	e003      	b.n	800a22a <_printf_i+0x76>
 800a222:	2a75      	cmp	r2, #117	; 0x75
 800a224:	d021      	beq.n	800a26a <_printf_i+0xb6>
 800a226:	2a78      	cmp	r2, #120	; 0x78
 800a228:	d1dc      	bne.n	800a1e4 <_printf_i+0x30>
 800a22a:	2278      	movs	r2, #120	; 0x78
 800a22c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800a230:	496e      	ldr	r1, [pc, #440]	; (800a3ec <_printf_i+0x238>)
 800a232:	e064      	b.n	800a2fe <_printf_i+0x14a>
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800a23a:	1d11      	adds	r1, r2, #4
 800a23c:	6019      	str	r1, [r3, #0]
 800a23e:	6813      	ldr	r3, [r2, #0]
 800a240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a244:	2301      	movs	r3, #1
 800a246:	e0a3      	b.n	800a390 <_printf_i+0x1dc>
 800a248:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a24c:	f102 0104 	add.w	r1, r2, #4
 800a250:	6019      	str	r1, [r3, #0]
 800a252:	d0d7      	beq.n	800a204 <_printf_i+0x50>
 800a254:	f9b2 3000 	ldrsh.w	r3, [r2]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	da03      	bge.n	800a264 <_printf_i+0xb0>
 800a25c:	222d      	movs	r2, #45	; 0x2d
 800a25e:	425b      	negs	r3, r3
 800a260:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a264:	4962      	ldr	r1, [pc, #392]	; (800a3f0 <_printf_i+0x23c>)
 800a266:	220a      	movs	r2, #10
 800a268:	e017      	b.n	800a29a <_printf_i+0xe6>
 800a26a:	6820      	ldr	r0, [r4, #0]
 800a26c:	6819      	ldr	r1, [r3, #0]
 800a26e:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a272:	d003      	beq.n	800a27c <_printf_i+0xc8>
 800a274:	1d08      	adds	r0, r1, #4
 800a276:	6018      	str	r0, [r3, #0]
 800a278:	680b      	ldr	r3, [r1, #0]
 800a27a:	e006      	b.n	800a28a <_printf_i+0xd6>
 800a27c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a280:	f101 0004 	add.w	r0, r1, #4
 800a284:	6018      	str	r0, [r3, #0]
 800a286:	d0f7      	beq.n	800a278 <_printf_i+0xc4>
 800a288:	880b      	ldrh	r3, [r1, #0]
 800a28a:	4959      	ldr	r1, [pc, #356]	; (800a3f0 <_printf_i+0x23c>)
 800a28c:	2a6f      	cmp	r2, #111	; 0x6f
 800a28e:	bf14      	ite	ne
 800a290:	220a      	movne	r2, #10
 800a292:	2208      	moveq	r2, #8
 800a294:	2000      	movs	r0, #0
 800a296:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800a29a:	6865      	ldr	r5, [r4, #4]
 800a29c:	60a5      	str	r5, [r4, #8]
 800a29e:	2d00      	cmp	r5, #0
 800a2a0:	f2c0 809c 	blt.w	800a3dc <_printf_i+0x228>
 800a2a4:	6820      	ldr	r0, [r4, #0]
 800a2a6:	f020 0004 	bic.w	r0, r0, #4
 800a2aa:	6020      	str	r0, [r4, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d13f      	bne.n	800a330 <_printf_i+0x17c>
 800a2b0:	2d00      	cmp	r5, #0
 800a2b2:	f040 8095 	bne.w	800a3e0 <_printf_i+0x22c>
 800a2b6:	4675      	mov	r5, lr
 800a2b8:	2a08      	cmp	r2, #8
 800a2ba:	d10b      	bne.n	800a2d4 <_printf_i+0x120>
 800a2bc:	6823      	ldr	r3, [r4, #0]
 800a2be:	07da      	lsls	r2, r3, #31
 800a2c0:	d508      	bpl.n	800a2d4 <_printf_i+0x120>
 800a2c2:	6923      	ldr	r3, [r4, #16]
 800a2c4:	6862      	ldr	r2, [r4, #4]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	bfde      	ittt	le
 800a2ca:	2330      	movle	r3, #48	; 0x30
 800a2cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a2d4:	ebae 0305 	sub.w	r3, lr, r5
 800a2d8:	6123      	str	r3, [r4, #16]
 800a2da:	f8cd 8000 	str.w	r8, [sp]
 800a2de:	463b      	mov	r3, r7
 800a2e0:	aa03      	add	r2, sp, #12
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f7ff feef 	bl	800a0c8 <_printf_common>
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	d155      	bne.n	800a39a <_printf_i+0x1e6>
 800a2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f2:	b005      	add	sp, #20
 800a2f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2f8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800a2fc:	493c      	ldr	r1, [pc, #240]	; (800a3f0 <_printf_i+0x23c>)
 800a2fe:	6822      	ldr	r2, [r4, #0]
 800a300:	6818      	ldr	r0, [r3, #0]
 800a302:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a306:	f100 0504 	add.w	r5, r0, #4
 800a30a:	601d      	str	r5, [r3, #0]
 800a30c:	d001      	beq.n	800a312 <_printf_i+0x15e>
 800a30e:	6803      	ldr	r3, [r0, #0]
 800a310:	e002      	b.n	800a318 <_printf_i+0x164>
 800a312:	0655      	lsls	r5, r2, #25
 800a314:	d5fb      	bpl.n	800a30e <_printf_i+0x15a>
 800a316:	8803      	ldrh	r3, [r0, #0]
 800a318:	07d0      	lsls	r0, r2, #31
 800a31a:	bf44      	itt	mi
 800a31c:	f042 0220 	orrmi.w	r2, r2, #32
 800a320:	6022      	strmi	r2, [r4, #0]
 800a322:	b91b      	cbnz	r3, 800a32c <_printf_i+0x178>
 800a324:	6822      	ldr	r2, [r4, #0]
 800a326:	f022 0220 	bic.w	r2, r2, #32
 800a32a:	6022      	str	r2, [r4, #0]
 800a32c:	2210      	movs	r2, #16
 800a32e:	e7b1      	b.n	800a294 <_printf_i+0xe0>
 800a330:	4675      	mov	r5, lr
 800a332:	fbb3 f0f2 	udiv	r0, r3, r2
 800a336:	fb02 3310 	mls	r3, r2, r0, r3
 800a33a:	5ccb      	ldrb	r3, [r1, r3]
 800a33c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a340:	4603      	mov	r3, r0
 800a342:	2800      	cmp	r0, #0
 800a344:	d1f5      	bne.n	800a332 <_printf_i+0x17e>
 800a346:	e7b7      	b.n	800a2b8 <_printf_i+0x104>
 800a348:	6808      	ldr	r0, [r1, #0]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	6949      	ldr	r1, [r1, #20]
 800a34e:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a352:	d004      	beq.n	800a35e <_printf_i+0x1aa>
 800a354:	1d10      	adds	r0, r2, #4
 800a356:	6018      	str	r0, [r3, #0]
 800a358:	6813      	ldr	r3, [r2, #0]
 800a35a:	6019      	str	r1, [r3, #0]
 800a35c:	e007      	b.n	800a36e <_printf_i+0x1ba>
 800a35e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a362:	f102 0004 	add.w	r0, r2, #4
 800a366:	6018      	str	r0, [r3, #0]
 800a368:	6813      	ldr	r3, [r2, #0]
 800a36a:	d0f6      	beq.n	800a35a <_printf_i+0x1a6>
 800a36c:	8019      	strh	r1, [r3, #0]
 800a36e:	2300      	movs	r3, #0
 800a370:	6123      	str	r3, [r4, #16]
 800a372:	4675      	mov	r5, lr
 800a374:	e7b1      	b.n	800a2da <_printf_i+0x126>
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	1d11      	adds	r1, r2, #4
 800a37a:	6019      	str	r1, [r3, #0]
 800a37c:	6815      	ldr	r5, [r2, #0]
 800a37e:	6862      	ldr	r2, [r4, #4]
 800a380:	2100      	movs	r1, #0
 800a382:	4628      	mov	r0, r5
 800a384:	f7f5 ff3c 	bl	8000200 <memchr>
 800a388:	b108      	cbz	r0, 800a38e <_printf_i+0x1da>
 800a38a:	1b40      	subs	r0, r0, r5
 800a38c:	6060      	str	r0, [r4, #4]
 800a38e:	6863      	ldr	r3, [r4, #4]
 800a390:	6123      	str	r3, [r4, #16]
 800a392:	2300      	movs	r3, #0
 800a394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a398:	e79f      	b.n	800a2da <_printf_i+0x126>
 800a39a:	6923      	ldr	r3, [r4, #16]
 800a39c:	462a      	mov	r2, r5
 800a39e:	4639      	mov	r1, r7
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	47c0      	blx	r8
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	d0a2      	beq.n	800a2ee <_printf_i+0x13a>
 800a3a8:	6823      	ldr	r3, [r4, #0]
 800a3aa:	079b      	lsls	r3, r3, #30
 800a3ac:	d507      	bpl.n	800a3be <_printf_i+0x20a>
 800a3ae:	2500      	movs	r5, #0
 800a3b0:	f104 0919 	add.w	r9, r4, #25
 800a3b4:	68e3      	ldr	r3, [r4, #12]
 800a3b6:	9a03      	ldr	r2, [sp, #12]
 800a3b8:	1a9b      	subs	r3, r3, r2
 800a3ba:	429d      	cmp	r5, r3
 800a3bc:	db05      	blt.n	800a3ca <_printf_i+0x216>
 800a3be:	68e0      	ldr	r0, [r4, #12]
 800a3c0:	9b03      	ldr	r3, [sp, #12]
 800a3c2:	4298      	cmp	r0, r3
 800a3c4:	bfb8      	it	lt
 800a3c6:	4618      	movlt	r0, r3
 800a3c8:	e793      	b.n	800a2f2 <_printf_i+0x13e>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	464a      	mov	r2, r9
 800a3ce:	4639      	mov	r1, r7
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	47c0      	blx	r8
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	d08a      	beq.n	800a2ee <_printf_i+0x13a>
 800a3d8:	3501      	adds	r5, #1
 800a3da:	e7eb      	b.n	800a3b4 <_printf_i+0x200>
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1a7      	bne.n	800a330 <_printf_i+0x17c>
 800a3e0:	780b      	ldrb	r3, [r1, #0]
 800a3e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3ea:	e765      	b.n	800a2b8 <_printf_i+0x104>
 800a3ec:	0800b1b4 	.word	0x0800b1b4
 800a3f0:	0800b1a3 	.word	0x0800b1a3

0800a3f4 <_sbrk_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4c06      	ldr	r4, [pc, #24]	; (800a410 <_sbrk_r+0x1c>)
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4605      	mov	r5, r0
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	6023      	str	r3, [r4, #0]
 800a400:	f7fe fbf8 	bl	8008bf4 <_sbrk>
 800a404:	1c43      	adds	r3, r0, #1
 800a406:	d102      	bne.n	800a40e <_sbrk_r+0x1a>
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	b103      	cbz	r3, 800a40e <_sbrk_r+0x1a>
 800a40c:	602b      	str	r3, [r5, #0]
 800a40e:	bd38      	pop	{r3, r4, r5, pc}
 800a410:	200157f4 	.word	0x200157f4

0800a414 <siscanf>:
 800a414:	b40e      	push	{r1, r2, r3}
 800a416:	b530      	push	{r4, r5, lr}
 800a418:	b09c      	sub	sp, #112	; 0x70
 800a41a:	ac1f      	add	r4, sp, #124	; 0x7c
 800a41c:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a420:	f854 5b04 	ldr.w	r5, [r4], #4
 800a424:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a428:	9002      	str	r0, [sp, #8]
 800a42a:	9006      	str	r0, [sp, #24]
 800a42c:	f7f5 fed0 	bl	80001d0 <strlen>
 800a430:	4b0b      	ldr	r3, [pc, #44]	; (800a460 <siscanf+0x4c>)
 800a432:	9003      	str	r0, [sp, #12]
 800a434:	9007      	str	r0, [sp, #28]
 800a436:	930b      	str	r3, [sp, #44]	; 0x2c
 800a438:	480a      	ldr	r0, [pc, #40]	; (800a464 <siscanf+0x50>)
 800a43a:	9401      	str	r4, [sp, #4]
 800a43c:	2300      	movs	r3, #0
 800a43e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a440:	9314      	str	r3, [sp, #80]	; 0x50
 800a442:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a446:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a44a:	462a      	mov	r2, r5
 800a44c:	4623      	mov	r3, r4
 800a44e:	a902      	add	r1, sp, #8
 800a450:	6800      	ldr	r0, [r0, #0]
 800a452:	f000 f95d 	bl	800a710 <__ssvfiscanf_r>
 800a456:	b01c      	add	sp, #112	; 0x70
 800a458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a45c:	b003      	add	sp, #12
 800a45e:	4770      	bx	lr
 800a460:	0800a469 	.word	0x0800a469
 800a464:	20000010 	.word	0x20000010

0800a468 <__seofread>:
 800a468:	2000      	movs	r0, #0
 800a46a:	4770      	bx	lr

0800a46c <_strtoul_l.isra.0>:
 800a46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a470:	4680      	mov	r8, r0
 800a472:	4689      	mov	r9, r1
 800a474:	4692      	mov	sl, r2
 800a476:	461e      	mov	r6, r3
 800a478:	460f      	mov	r7, r1
 800a47a:	463d      	mov	r5, r7
 800a47c:	9808      	ldr	r0, [sp, #32]
 800a47e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a482:	f7ff fbf9 	bl	8009c78 <__locale_ctype_ptr_l>
 800a486:	4420      	add	r0, r4
 800a488:	7843      	ldrb	r3, [r0, #1]
 800a48a:	f013 0308 	ands.w	r3, r3, #8
 800a48e:	d10a      	bne.n	800a4a6 <_strtoul_l.isra.0+0x3a>
 800a490:	2c2d      	cmp	r4, #45	; 0x2d
 800a492:	d10a      	bne.n	800a4aa <_strtoul_l.isra.0+0x3e>
 800a494:	782c      	ldrb	r4, [r5, #0]
 800a496:	2301      	movs	r3, #1
 800a498:	1cbd      	adds	r5, r7, #2
 800a49a:	b15e      	cbz	r6, 800a4b4 <_strtoul_l.isra.0+0x48>
 800a49c:	2e10      	cmp	r6, #16
 800a49e:	d113      	bne.n	800a4c8 <_strtoul_l.isra.0+0x5c>
 800a4a0:	2c30      	cmp	r4, #48	; 0x30
 800a4a2:	d009      	beq.n	800a4b8 <_strtoul_l.isra.0+0x4c>
 800a4a4:	e010      	b.n	800a4c8 <_strtoul_l.isra.0+0x5c>
 800a4a6:	462f      	mov	r7, r5
 800a4a8:	e7e7      	b.n	800a47a <_strtoul_l.isra.0+0xe>
 800a4aa:	2c2b      	cmp	r4, #43	; 0x2b
 800a4ac:	bf04      	itt	eq
 800a4ae:	782c      	ldrbeq	r4, [r5, #0]
 800a4b0:	1cbd      	addeq	r5, r7, #2
 800a4b2:	e7f2      	b.n	800a49a <_strtoul_l.isra.0+0x2e>
 800a4b4:	2c30      	cmp	r4, #48	; 0x30
 800a4b6:	d125      	bne.n	800a504 <_strtoul_l.isra.0+0x98>
 800a4b8:	782a      	ldrb	r2, [r5, #0]
 800a4ba:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a4be:	2a58      	cmp	r2, #88	; 0x58
 800a4c0:	d14a      	bne.n	800a558 <_strtoul_l.isra.0+0xec>
 800a4c2:	786c      	ldrb	r4, [r5, #1]
 800a4c4:	2610      	movs	r6, #16
 800a4c6:	3502      	adds	r5, #2
 800a4c8:	f04f 31ff 	mov.w	r1, #4294967295
 800a4cc:	2700      	movs	r7, #0
 800a4ce:	fbb1 f1f6 	udiv	r1, r1, r6
 800a4d2:	fb06 fe01 	mul.w	lr, r6, r1
 800a4d6:	ea6f 0e0e 	mvn.w	lr, lr
 800a4da:	4638      	mov	r0, r7
 800a4dc:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800a4e0:	2a09      	cmp	r2, #9
 800a4e2:	d811      	bhi.n	800a508 <_strtoul_l.isra.0+0x9c>
 800a4e4:	4614      	mov	r4, r2
 800a4e6:	42a6      	cmp	r6, r4
 800a4e8:	dd1d      	ble.n	800a526 <_strtoul_l.isra.0+0xba>
 800a4ea:	2f00      	cmp	r7, #0
 800a4ec:	db18      	blt.n	800a520 <_strtoul_l.isra.0+0xb4>
 800a4ee:	4281      	cmp	r1, r0
 800a4f0:	d316      	bcc.n	800a520 <_strtoul_l.isra.0+0xb4>
 800a4f2:	d101      	bne.n	800a4f8 <_strtoul_l.isra.0+0x8c>
 800a4f4:	45a6      	cmp	lr, r4
 800a4f6:	db13      	blt.n	800a520 <_strtoul_l.isra.0+0xb4>
 800a4f8:	fb00 4006 	mla	r0, r0, r6, r4
 800a4fc:	2701      	movs	r7, #1
 800a4fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a502:	e7eb      	b.n	800a4dc <_strtoul_l.isra.0+0x70>
 800a504:	260a      	movs	r6, #10
 800a506:	e7df      	b.n	800a4c8 <_strtoul_l.isra.0+0x5c>
 800a508:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800a50c:	2a19      	cmp	r2, #25
 800a50e:	d801      	bhi.n	800a514 <_strtoul_l.isra.0+0xa8>
 800a510:	3c37      	subs	r4, #55	; 0x37
 800a512:	e7e8      	b.n	800a4e6 <_strtoul_l.isra.0+0x7a>
 800a514:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800a518:	2a19      	cmp	r2, #25
 800a51a:	d804      	bhi.n	800a526 <_strtoul_l.isra.0+0xba>
 800a51c:	3c57      	subs	r4, #87	; 0x57
 800a51e:	e7e2      	b.n	800a4e6 <_strtoul_l.isra.0+0x7a>
 800a520:	f04f 37ff 	mov.w	r7, #4294967295
 800a524:	e7eb      	b.n	800a4fe <_strtoul_l.isra.0+0x92>
 800a526:	2f00      	cmp	r7, #0
 800a528:	da09      	bge.n	800a53e <_strtoul_l.isra.0+0xd2>
 800a52a:	2322      	movs	r3, #34	; 0x22
 800a52c:	f8c8 3000 	str.w	r3, [r8]
 800a530:	f04f 30ff 	mov.w	r0, #4294967295
 800a534:	f1ba 0f00 	cmp.w	sl, #0
 800a538:	d107      	bne.n	800a54a <_strtoul_l.isra.0+0xde>
 800a53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a53e:	b103      	cbz	r3, 800a542 <_strtoul_l.isra.0+0xd6>
 800a540:	4240      	negs	r0, r0
 800a542:	f1ba 0f00 	cmp.w	sl, #0
 800a546:	d00c      	beq.n	800a562 <_strtoul_l.isra.0+0xf6>
 800a548:	b127      	cbz	r7, 800a554 <_strtoul_l.isra.0+0xe8>
 800a54a:	3d01      	subs	r5, #1
 800a54c:	f8ca 5000 	str.w	r5, [sl]
 800a550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a554:	464d      	mov	r5, r9
 800a556:	e7f9      	b.n	800a54c <_strtoul_l.isra.0+0xe0>
 800a558:	2430      	movs	r4, #48	; 0x30
 800a55a:	2e00      	cmp	r6, #0
 800a55c:	d1b4      	bne.n	800a4c8 <_strtoul_l.isra.0+0x5c>
 800a55e:	2608      	movs	r6, #8
 800a560:	e7b2      	b.n	800a4c8 <_strtoul_l.isra.0+0x5c>
 800a562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800a568 <_strtoul_r>:
 800a568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a56a:	4c06      	ldr	r4, [pc, #24]	; (800a584 <_strtoul_r+0x1c>)
 800a56c:	4d06      	ldr	r5, [pc, #24]	; (800a588 <_strtoul_r+0x20>)
 800a56e:	6824      	ldr	r4, [r4, #0]
 800a570:	6a24      	ldr	r4, [r4, #32]
 800a572:	2c00      	cmp	r4, #0
 800a574:	bf08      	it	eq
 800a576:	462c      	moveq	r4, r5
 800a578:	9400      	str	r4, [sp, #0]
 800a57a:	f7ff ff77 	bl	800a46c <_strtoul_l.isra.0>
 800a57e:	b003      	add	sp, #12
 800a580:	bd30      	pop	{r4, r5, pc}
 800a582:	bf00      	nop
 800a584:	20000010 	.word	0x20000010
 800a588:	200000bc 	.word	0x200000bc

0800a58c <strtoul>:
 800a58c:	4b08      	ldr	r3, [pc, #32]	; (800a5b0 <strtoul+0x24>)
 800a58e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a590:	681c      	ldr	r4, [r3, #0]
 800a592:	4d08      	ldr	r5, [pc, #32]	; (800a5b4 <strtoul+0x28>)
 800a594:	6a23      	ldr	r3, [r4, #32]
 800a596:	2b00      	cmp	r3, #0
 800a598:	bf08      	it	eq
 800a59a:	462b      	moveq	r3, r5
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	460a      	mov	r2, r1
 800a5a2:	4601      	mov	r1, r0
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f7ff ff61 	bl	800a46c <_strtoul_l.isra.0>
 800a5aa:	b003      	add	sp, #12
 800a5ac:	bd30      	pop	{r4, r5, pc}
 800a5ae:	bf00      	nop
 800a5b0:	20000010 	.word	0x20000010
 800a5b4:	200000bc 	.word	0x200000bc

0800a5b8 <__ascii_wctomb>:
 800a5b8:	b149      	cbz	r1, 800a5ce <__ascii_wctomb+0x16>
 800a5ba:	2aff      	cmp	r2, #255	; 0xff
 800a5bc:	bf85      	ittet	hi
 800a5be:	238a      	movhi	r3, #138	; 0x8a
 800a5c0:	6003      	strhi	r3, [r0, #0]
 800a5c2:	700a      	strbls	r2, [r1, #0]
 800a5c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a5c8:	bf98      	it	ls
 800a5ca:	2001      	movls	r0, #1
 800a5cc:	4770      	bx	lr
 800a5ce:	4608      	mov	r0, r1
 800a5d0:	4770      	bx	lr

0800a5d2 <__env_lock>:
 800a5d2:	4770      	bx	lr

0800a5d4 <__env_unlock>:
 800a5d4:	4770      	bx	lr

0800a5d6 <memmove>:
 800a5d6:	4288      	cmp	r0, r1
 800a5d8:	b510      	push	{r4, lr}
 800a5da:	eb01 0302 	add.w	r3, r1, r2
 800a5de:	d803      	bhi.n	800a5e8 <memmove+0x12>
 800a5e0:	1e42      	subs	r2, r0, #1
 800a5e2:	4299      	cmp	r1, r3
 800a5e4:	d10c      	bne.n	800a600 <memmove+0x2a>
 800a5e6:	bd10      	pop	{r4, pc}
 800a5e8:	4298      	cmp	r0, r3
 800a5ea:	d2f9      	bcs.n	800a5e0 <memmove+0xa>
 800a5ec:	1881      	adds	r1, r0, r2
 800a5ee:	1ad2      	subs	r2, r2, r3
 800a5f0:	42d3      	cmn	r3, r2
 800a5f2:	d100      	bne.n	800a5f6 <memmove+0x20>
 800a5f4:	bd10      	pop	{r4, pc}
 800a5f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a5fe:	e7f7      	b.n	800a5f0 <memmove+0x1a>
 800a600:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a604:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a608:	e7eb      	b.n	800a5e2 <memmove+0xc>

0800a60a <__malloc_lock>:
 800a60a:	4770      	bx	lr

0800a60c <__malloc_unlock>:
 800a60c:	4770      	bx	lr

0800a60e <_realloc_r>:
 800a60e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a610:	4607      	mov	r7, r0
 800a612:	4614      	mov	r4, r2
 800a614:	460e      	mov	r6, r1
 800a616:	b921      	cbnz	r1, 800a622 <_realloc_r+0x14>
 800a618:	4611      	mov	r1, r2
 800a61a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a61e:	f7ff bba5 	b.w	8009d6c <_malloc_r>
 800a622:	b922      	cbnz	r2, 800a62e <_realloc_r+0x20>
 800a624:	f7ff fb54 	bl	8009cd0 <_free_r>
 800a628:	4625      	mov	r5, r4
 800a62a:	4628      	mov	r0, r5
 800a62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a62e:	f000 fb86 	bl	800ad3e <_malloc_usable_size_r>
 800a632:	4284      	cmp	r4, r0
 800a634:	d90f      	bls.n	800a656 <_realloc_r+0x48>
 800a636:	4621      	mov	r1, r4
 800a638:	4638      	mov	r0, r7
 800a63a:	f7ff fb97 	bl	8009d6c <_malloc_r>
 800a63e:	4605      	mov	r5, r0
 800a640:	2800      	cmp	r0, #0
 800a642:	d0f2      	beq.n	800a62a <_realloc_r+0x1c>
 800a644:	4631      	mov	r1, r6
 800a646:	4622      	mov	r2, r4
 800a648:	f7fe fc5d 	bl	8008f06 <memcpy>
 800a64c:	4631      	mov	r1, r6
 800a64e:	4638      	mov	r0, r7
 800a650:	f7ff fb3e 	bl	8009cd0 <_free_r>
 800a654:	e7e9      	b.n	800a62a <_realloc_r+0x1c>
 800a656:	4635      	mov	r5, r6
 800a658:	e7e7      	b.n	800a62a <_realloc_r+0x1c>

0800a65a <_sungetc_r>:
 800a65a:	b538      	push	{r3, r4, r5, lr}
 800a65c:	1c4b      	adds	r3, r1, #1
 800a65e:	4614      	mov	r4, r2
 800a660:	d103      	bne.n	800a66a <_sungetc_r+0x10>
 800a662:	f04f 35ff 	mov.w	r5, #4294967295
 800a666:	4628      	mov	r0, r5
 800a668:	bd38      	pop	{r3, r4, r5, pc}
 800a66a:	8993      	ldrh	r3, [r2, #12]
 800a66c:	f023 0320 	bic.w	r3, r3, #32
 800a670:	8193      	strh	r3, [r2, #12]
 800a672:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a674:	6852      	ldr	r2, [r2, #4]
 800a676:	b2cd      	uxtb	r5, r1
 800a678:	b18b      	cbz	r3, 800a69e <_sungetc_r+0x44>
 800a67a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a67c:	429a      	cmp	r2, r3
 800a67e:	da08      	bge.n	800a692 <_sungetc_r+0x38>
 800a680:	6823      	ldr	r3, [r4, #0]
 800a682:	1e5a      	subs	r2, r3, #1
 800a684:	6022      	str	r2, [r4, #0]
 800a686:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a68a:	6863      	ldr	r3, [r4, #4]
 800a68c:	3301      	adds	r3, #1
 800a68e:	6063      	str	r3, [r4, #4]
 800a690:	e7e9      	b.n	800a666 <_sungetc_r+0xc>
 800a692:	4621      	mov	r1, r4
 800a694:	f000 fb18 	bl	800acc8 <__submore>
 800a698:	2800      	cmp	r0, #0
 800a69a:	d0f1      	beq.n	800a680 <_sungetc_r+0x26>
 800a69c:	e7e1      	b.n	800a662 <_sungetc_r+0x8>
 800a69e:	6921      	ldr	r1, [r4, #16]
 800a6a0:	6823      	ldr	r3, [r4, #0]
 800a6a2:	b151      	cbz	r1, 800a6ba <_sungetc_r+0x60>
 800a6a4:	4299      	cmp	r1, r3
 800a6a6:	d208      	bcs.n	800a6ba <_sungetc_r+0x60>
 800a6a8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a6ac:	428d      	cmp	r5, r1
 800a6ae:	d104      	bne.n	800a6ba <_sungetc_r+0x60>
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	3201      	adds	r2, #1
 800a6b4:	6023      	str	r3, [r4, #0]
 800a6b6:	6062      	str	r2, [r4, #4]
 800a6b8:	e7d5      	b.n	800a666 <_sungetc_r+0xc>
 800a6ba:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a6bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6c0:	6363      	str	r3, [r4, #52]	; 0x34
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	63a3      	str	r3, [r4, #56]	; 0x38
 800a6c6:	4623      	mov	r3, r4
 800a6c8:	6422      	str	r2, [r4, #64]	; 0x40
 800a6ca:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a6ce:	6023      	str	r3, [r4, #0]
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e7dc      	b.n	800a68e <_sungetc_r+0x34>

0800a6d4 <__ssrefill_r>:
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a6da:	b169      	cbz	r1, 800a6f8 <__ssrefill_r+0x24>
 800a6dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6e0:	4299      	cmp	r1, r3
 800a6e2:	d001      	beq.n	800a6e8 <__ssrefill_r+0x14>
 800a6e4:	f7ff faf4 	bl	8009cd0 <_free_r>
 800a6e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6ea:	6063      	str	r3, [r4, #4]
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	6360      	str	r0, [r4, #52]	; 0x34
 800a6f0:	b113      	cbz	r3, 800a6f8 <__ssrefill_r+0x24>
 800a6f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a6f4:	6023      	str	r3, [r4, #0]
 800a6f6:	bd10      	pop	{r4, pc}
 800a6f8:	6923      	ldr	r3, [r4, #16]
 800a6fa:	6023      	str	r3, [r4, #0]
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	6063      	str	r3, [r4, #4]
 800a700:	89a3      	ldrh	r3, [r4, #12]
 800a702:	f043 0320 	orr.w	r3, r3, #32
 800a706:	81a3      	strh	r3, [r4, #12]
 800a708:	f04f 30ff 	mov.w	r0, #4294967295
 800a70c:	bd10      	pop	{r4, pc}
	...

0800a710 <__ssvfiscanf_r>:
 800a710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a714:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800a718:	f10d 080c 	add.w	r8, sp, #12
 800a71c:	9301      	str	r3, [sp, #4]
 800a71e:	2300      	movs	r3, #0
 800a720:	9346      	str	r3, [sp, #280]	; 0x118
 800a722:	9347      	str	r3, [sp, #284]	; 0x11c
 800a724:	4ba0      	ldr	r3, [pc, #640]	; (800a9a8 <__ssvfiscanf_r+0x298>)
 800a726:	93a2      	str	r3, [sp, #648]	; 0x288
 800a728:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800a9b0 <__ssvfiscanf_r+0x2a0>
 800a72c:	4b9f      	ldr	r3, [pc, #636]	; (800a9ac <__ssvfiscanf_r+0x29c>)
 800a72e:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800a732:	4606      	mov	r6, r0
 800a734:	460c      	mov	r4, r1
 800a736:	93a3      	str	r3, [sp, #652]	; 0x28c
 800a738:	4692      	mov	sl, r2
 800a73a:	270a      	movs	r7, #10
 800a73c:	f89a 3000 	ldrb.w	r3, [sl]
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 812f 	beq.w	800a9a4 <__ssvfiscanf_r+0x294>
 800a746:	f7ff fa9b 	bl	8009c80 <__locale_ctype_ptr>
 800a74a:	f89a b000 	ldrb.w	fp, [sl]
 800a74e:	4458      	add	r0, fp
 800a750:	7843      	ldrb	r3, [r0, #1]
 800a752:	f013 0308 	ands.w	r3, r3, #8
 800a756:	d143      	bne.n	800a7e0 <__ssvfiscanf_r+0xd0>
 800a758:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800a75c:	f10a 0501 	add.w	r5, sl, #1
 800a760:	f040 8099 	bne.w	800a896 <__ssvfiscanf_r+0x186>
 800a764:	9345      	str	r3, [sp, #276]	; 0x114
 800a766:	9343      	str	r3, [sp, #268]	; 0x10c
 800a768:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a76c:	2b2a      	cmp	r3, #42	; 0x2a
 800a76e:	d103      	bne.n	800a778 <__ssvfiscanf_r+0x68>
 800a770:	2310      	movs	r3, #16
 800a772:	9343      	str	r3, [sp, #268]	; 0x10c
 800a774:	f10a 0502 	add.w	r5, sl, #2
 800a778:	7829      	ldrb	r1, [r5, #0]
 800a77a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a77e:	2a09      	cmp	r2, #9
 800a780:	46aa      	mov	sl, r5
 800a782:	f105 0501 	add.w	r5, r5, #1
 800a786:	d941      	bls.n	800a80c <__ssvfiscanf_r+0xfc>
 800a788:	2203      	movs	r2, #3
 800a78a:	4889      	ldr	r0, [pc, #548]	; (800a9b0 <__ssvfiscanf_r+0x2a0>)
 800a78c:	f7f5 fd38 	bl	8000200 <memchr>
 800a790:	b138      	cbz	r0, 800a7a2 <__ssvfiscanf_r+0x92>
 800a792:	eba0 0309 	sub.w	r3, r0, r9
 800a796:	2001      	movs	r0, #1
 800a798:	4098      	lsls	r0, r3
 800a79a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a79c:	4318      	orrs	r0, r3
 800a79e:	9043      	str	r0, [sp, #268]	; 0x10c
 800a7a0:	46aa      	mov	sl, r5
 800a7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a6:	2b67      	cmp	r3, #103	; 0x67
 800a7a8:	f10a 0501 	add.w	r5, sl, #1
 800a7ac:	d84a      	bhi.n	800a844 <__ssvfiscanf_r+0x134>
 800a7ae:	2b65      	cmp	r3, #101	; 0x65
 800a7b0:	f080 80b7 	bcs.w	800a922 <__ssvfiscanf_r+0x212>
 800a7b4:	2b47      	cmp	r3, #71	; 0x47
 800a7b6:	d82f      	bhi.n	800a818 <__ssvfiscanf_r+0x108>
 800a7b8:	2b45      	cmp	r3, #69	; 0x45
 800a7ba:	f080 80b2 	bcs.w	800a922 <__ssvfiscanf_r+0x212>
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f000 8082 	beq.w	800a8c8 <__ssvfiscanf_r+0x1b8>
 800a7c4:	2b25      	cmp	r3, #37	; 0x25
 800a7c6:	d066      	beq.n	800a896 <__ssvfiscanf_r+0x186>
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	9349      	str	r3, [sp, #292]	; 0x124
 800a7cc:	9744      	str	r7, [sp, #272]	; 0x110
 800a7ce:	e045      	b.n	800a85c <__ssvfiscanf_r+0x14c>
 800a7d0:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800a7d2:	3101      	adds	r1, #1
 800a7d4:	9147      	str	r1, [sp, #284]	; 0x11c
 800a7d6:	6861      	ldr	r1, [r4, #4]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	3901      	subs	r1, #1
 800a7dc:	6061      	str	r1, [r4, #4]
 800a7de:	6023      	str	r3, [r4, #0]
 800a7e0:	6863      	ldr	r3, [r4, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	dd0b      	ble.n	800a7fe <__ssvfiscanf_r+0xee>
 800a7e6:	f7ff fa4b 	bl	8009c80 <__locale_ctype_ptr>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	7819      	ldrb	r1, [r3, #0]
 800a7ee:	4408      	add	r0, r1
 800a7f0:	7841      	ldrb	r1, [r0, #1]
 800a7f2:	070d      	lsls	r5, r1, #28
 800a7f4:	d4ec      	bmi.n	800a7d0 <__ssvfiscanf_r+0xc0>
 800a7f6:	f10a 0501 	add.w	r5, sl, #1
 800a7fa:	46aa      	mov	sl, r5
 800a7fc:	e79e      	b.n	800a73c <__ssvfiscanf_r+0x2c>
 800a7fe:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a800:	4621      	mov	r1, r4
 800a802:	4630      	mov	r0, r6
 800a804:	4798      	blx	r3
 800a806:	2800      	cmp	r0, #0
 800a808:	d0ed      	beq.n	800a7e6 <__ssvfiscanf_r+0xd6>
 800a80a:	e7f4      	b.n	800a7f6 <__ssvfiscanf_r+0xe6>
 800a80c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a80e:	fb07 1303 	mla	r3, r7, r3, r1
 800a812:	3b30      	subs	r3, #48	; 0x30
 800a814:	9345      	str	r3, [sp, #276]	; 0x114
 800a816:	e7af      	b.n	800a778 <__ssvfiscanf_r+0x68>
 800a818:	2b5b      	cmp	r3, #91	; 0x5b
 800a81a:	d061      	beq.n	800a8e0 <__ssvfiscanf_r+0x1d0>
 800a81c:	d80c      	bhi.n	800a838 <__ssvfiscanf_r+0x128>
 800a81e:	2b58      	cmp	r3, #88	; 0x58
 800a820:	d1d2      	bne.n	800a7c8 <__ssvfiscanf_r+0xb8>
 800a822:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a828:	9243      	str	r2, [sp, #268]	; 0x10c
 800a82a:	2210      	movs	r2, #16
 800a82c:	9244      	str	r2, [sp, #272]	; 0x110
 800a82e:	2b6f      	cmp	r3, #111	; 0x6f
 800a830:	bfb4      	ite	lt
 800a832:	2303      	movlt	r3, #3
 800a834:	2304      	movge	r3, #4
 800a836:	e010      	b.n	800a85a <__ssvfiscanf_r+0x14a>
 800a838:	2b63      	cmp	r3, #99	; 0x63
 800a83a:	d05c      	beq.n	800a8f6 <__ssvfiscanf_r+0x1e6>
 800a83c:	2b64      	cmp	r3, #100	; 0x64
 800a83e:	d1c3      	bne.n	800a7c8 <__ssvfiscanf_r+0xb8>
 800a840:	9744      	str	r7, [sp, #272]	; 0x110
 800a842:	e7f4      	b.n	800a82e <__ssvfiscanf_r+0x11e>
 800a844:	2b70      	cmp	r3, #112	; 0x70
 800a846:	d042      	beq.n	800a8ce <__ssvfiscanf_r+0x1be>
 800a848:	d81d      	bhi.n	800a886 <__ssvfiscanf_r+0x176>
 800a84a:	2b6e      	cmp	r3, #110	; 0x6e
 800a84c:	d059      	beq.n	800a902 <__ssvfiscanf_r+0x1f2>
 800a84e:	d843      	bhi.n	800a8d8 <__ssvfiscanf_r+0x1c8>
 800a850:	2b69      	cmp	r3, #105	; 0x69
 800a852:	d1b9      	bne.n	800a7c8 <__ssvfiscanf_r+0xb8>
 800a854:	2300      	movs	r3, #0
 800a856:	9344      	str	r3, [sp, #272]	; 0x110
 800a858:	2303      	movs	r3, #3
 800a85a:	9349      	str	r3, [sp, #292]	; 0x124
 800a85c:	6863      	ldr	r3, [r4, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	dd61      	ble.n	800a926 <__ssvfiscanf_r+0x216>
 800a862:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a864:	0659      	lsls	r1, r3, #25
 800a866:	d56f      	bpl.n	800a948 <__ssvfiscanf_r+0x238>
 800a868:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	dc7c      	bgt.n	800a968 <__ssvfiscanf_r+0x258>
 800a86e:	ab01      	add	r3, sp, #4
 800a870:	4622      	mov	r2, r4
 800a872:	a943      	add	r1, sp, #268	; 0x10c
 800a874:	4630      	mov	r0, r6
 800a876:	f000 f89f 	bl	800a9b8 <_scanf_chars>
 800a87a:	2801      	cmp	r0, #1
 800a87c:	f000 8092 	beq.w	800a9a4 <__ssvfiscanf_r+0x294>
 800a880:	2802      	cmp	r0, #2
 800a882:	d1ba      	bne.n	800a7fa <__ssvfiscanf_r+0xea>
 800a884:	e01d      	b.n	800a8c2 <__ssvfiscanf_r+0x1b2>
 800a886:	2b75      	cmp	r3, #117	; 0x75
 800a888:	d0da      	beq.n	800a840 <__ssvfiscanf_r+0x130>
 800a88a:	2b78      	cmp	r3, #120	; 0x78
 800a88c:	d0c9      	beq.n	800a822 <__ssvfiscanf_r+0x112>
 800a88e:	2b73      	cmp	r3, #115	; 0x73
 800a890:	d19a      	bne.n	800a7c8 <__ssvfiscanf_r+0xb8>
 800a892:	2302      	movs	r3, #2
 800a894:	e7e1      	b.n	800a85a <__ssvfiscanf_r+0x14a>
 800a896:	6863      	ldr	r3, [r4, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	dd0c      	ble.n	800a8b6 <__ssvfiscanf_r+0x1a6>
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	781a      	ldrb	r2, [r3, #0]
 800a8a0:	4593      	cmp	fp, r2
 800a8a2:	d17f      	bne.n	800a9a4 <__ssvfiscanf_r+0x294>
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	6862      	ldr	r2, [r4, #4]
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a8ac:	3a01      	subs	r2, #1
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	6062      	str	r2, [r4, #4]
 800a8b2:	9347      	str	r3, [sp, #284]	; 0x11c
 800a8b4:	e7a1      	b.n	800a7fa <__ssvfiscanf_r+0xea>
 800a8b6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	4798      	blx	r3
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d0ec      	beq.n	800a89c <__ssvfiscanf_r+0x18c>
 800a8c2:	9846      	ldr	r0, [sp, #280]	; 0x118
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d163      	bne.n	800a990 <__ssvfiscanf_r+0x280>
 800a8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8cc:	e066      	b.n	800a99c <__ssvfiscanf_r+0x28c>
 800a8ce:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a8d0:	f042 0220 	orr.w	r2, r2, #32
 800a8d4:	9243      	str	r2, [sp, #268]	; 0x10c
 800a8d6:	e7a4      	b.n	800a822 <__ssvfiscanf_r+0x112>
 800a8d8:	2308      	movs	r3, #8
 800a8da:	9344      	str	r3, [sp, #272]	; 0x110
 800a8dc:	2304      	movs	r3, #4
 800a8de:	e7bc      	b.n	800a85a <__ssvfiscanf_r+0x14a>
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	f000 f9c0 	bl	800ac68 <__sccl>
 800a8e8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a8ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ee:	9343      	str	r3, [sp, #268]	; 0x10c
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e7b1      	b.n	800a85a <__ssvfiscanf_r+0x14a>
 800a8f6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a8f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8fc:	9343      	str	r3, [sp, #268]	; 0x10c
 800a8fe:	2300      	movs	r3, #0
 800a900:	e7ab      	b.n	800a85a <__ssvfiscanf_r+0x14a>
 800a902:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a904:	06d0      	lsls	r0, r2, #27
 800a906:	f53f af78 	bmi.w	800a7fa <__ssvfiscanf_r+0xea>
 800a90a:	f012 0f01 	tst.w	r2, #1
 800a90e:	9a01      	ldr	r2, [sp, #4]
 800a910:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a912:	f102 0104 	add.w	r1, r2, #4
 800a916:	9101      	str	r1, [sp, #4]
 800a918:	6812      	ldr	r2, [r2, #0]
 800a91a:	bf14      	ite	ne
 800a91c:	8013      	strhne	r3, [r2, #0]
 800a91e:	6013      	streq	r3, [r2, #0]
 800a920:	e76b      	b.n	800a7fa <__ssvfiscanf_r+0xea>
 800a922:	2305      	movs	r3, #5
 800a924:	e799      	b.n	800a85a <__ssvfiscanf_r+0x14a>
 800a926:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a928:	4621      	mov	r1, r4
 800a92a:	4630      	mov	r0, r6
 800a92c:	4798      	blx	r3
 800a92e:	2800      	cmp	r0, #0
 800a930:	d097      	beq.n	800a862 <__ssvfiscanf_r+0x152>
 800a932:	e7c6      	b.n	800a8c2 <__ssvfiscanf_r+0x1b2>
 800a934:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800a936:	3201      	adds	r2, #1
 800a938:	9247      	str	r2, [sp, #284]	; 0x11c
 800a93a:	6862      	ldr	r2, [r4, #4]
 800a93c:	3a01      	subs	r2, #1
 800a93e:	2a00      	cmp	r2, #0
 800a940:	6062      	str	r2, [r4, #4]
 800a942:	dd0a      	ble.n	800a95a <__ssvfiscanf_r+0x24a>
 800a944:	3301      	adds	r3, #1
 800a946:	6023      	str	r3, [r4, #0]
 800a948:	f7ff f99a 	bl	8009c80 <__locale_ctype_ptr>
 800a94c:	6823      	ldr	r3, [r4, #0]
 800a94e:	781a      	ldrb	r2, [r3, #0]
 800a950:	4410      	add	r0, r2
 800a952:	7842      	ldrb	r2, [r0, #1]
 800a954:	0712      	lsls	r2, r2, #28
 800a956:	d4ed      	bmi.n	800a934 <__ssvfiscanf_r+0x224>
 800a958:	e786      	b.n	800a868 <__ssvfiscanf_r+0x158>
 800a95a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a95c:	4621      	mov	r1, r4
 800a95e:	4630      	mov	r0, r6
 800a960:	4798      	blx	r3
 800a962:	2800      	cmp	r0, #0
 800a964:	d0f0      	beq.n	800a948 <__ssvfiscanf_r+0x238>
 800a966:	e7ac      	b.n	800a8c2 <__ssvfiscanf_r+0x1b2>
 800a968:	2b04      	cmp	r3, #4
 800a96a:	dc06      	bgt.n	800a97a <__ssvfiscanf_r+0x26a>
 800a96c:	ab01      	add	r3, sp, #4
 800a96e:	4622      	mov	r2, r4
 800a970:	a943      	add	r1, sp, #268	; 0x10c
 800a972:	4630      	mov	r0, r6
 800a974:	f000 f884 	bl	800aa80 <_scanf_i>
 800a978:	e77f      	b.n	800a87a <__ssvfiscanf_r+0x16a>
 800a97a:	4b0e      	ldr	r3, [pc, #56]	; (800a9b4 <__ssvfiscanf_r+0x2a4>)
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f43f af3c 	beq.w	800a7fa <__ssvfiscanf_r+0xea>
 800a982:	ab01      	add	r3, sp, #4
 800a984:	4622      	mov	r2, r4
 800a986:	a943      	add	r1, sp, #268	; 0x10c
 800a988:	4630      	mov	r0, r6
 800a98a:	f3af 8000 	nop.w
 800a98e:	e774      	b.n	800a87a <__ssvfiscanf_r+0x16a>
 800a990:	89a3      	ldrh	r3, [r4, #12]
 800a992:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a996:	bf18      	it	ne
 800a998:	f04f 30ff 	movne.w	r0, #4294967295
 800a99c:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800a9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a4:	9846      	ldr	r0, [sp, #280]	; 0x118
 800a9a6:	e7f9      	b.n	800a99c <__ssvfiscanf_r+0x28c>
 800a9a8:	0800a65b 	.word	0x0800a65b
 800a9ac:	0800a6d5 	.word	0x0800a6d5
 800a9b0:	0800b198 	.word	0x0800b198
 800a9b4:	00000000 	.word	0x00000000

0800a9b8 <_scanf_chars>:
 800a9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9bc:	4615      	mov	r5, r2
 800a9be:	688a      	ldr	r2, [r1, #8]
 800a9c0:	4680      	mov	r8, r0
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	b932      	cbnz	r2, 800a9d4 <_scanf_chars+0x1c>
 800a9c6:	698a      	ldr	r2, [r1, #24]
 800a9c8:	2a00      	cmp	r2, #0
 800a9ca:	bf0c      	ite	eq
 800a9cc:	2201      	moveq	r2, #1
 800a9ce:	f04f 32ff 	movne.w	r2, #4294967295
 800a9d2:	608a      	str	r2, [r1, #8]
 800a9d4:	6822      	ldr	r2, [r4, #0]
 800a9d6:	06d1      	lsls	r1, r2, #27
 800a9d8:	bf5f      	itttt	pl
 800a9da:	681a      	ldrpl	r2, [r3, #0]
 800a9dc:	1d11      	addpl	r1, r2, #4
 800a9de:	6019      	strpl	r1, [r3, #0]
 800a9e0:	6817      	ldrpl	r7, [r2, #0]
 800a9e2:	2600      	movs	r6, #0
 800a9e4:	69a3      	ldr	r3, [r4, #24]
 800a9e6:	b1db      	cbz	r3, 800aa20 <_scanf_chars+0x68>
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d107      	bne.n	800a9fc <_scanf_chars+0x44>
 800a9ec:	682b      	ldr	r3, [r5, #0]
 800a9ee:	6962      	ldr	r2, [r4, #20]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	5cd3      	ldrb	r3, [r2, r3]
 800a9f4:	b9a3      	cbnz	r3, 800aa20 <_scanf_chars+0x68>
 800a9f6:	2e00      	cmp	r6, #0
 800a9f8:	d132      	bne.n	800aa60 <_scanf_chars+0xa8>
 800a9fa:	e006      	b.n	800aa0a <_scanf_chars+0x52>
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d007      	beq.n	800aa10 <_scanf_chars+0x58>
 800aa00:	2e00      	cmp	r6, #0
 800aa02:	d12d      	bne.n	800aa60 <_scanf_chars+0xa8>
 800aa04:	69a3      	ldr	r3, [r4, #24]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d12a      	bne.n	800aa60 <_scanf_chars+0xa8>
 800aa0a:	2001      	movs	r0, #1
 800aa0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa10:	f7ff f936 	bl	8009c80 <__locale_ctype_ptr>
 800aa14:	682b      	ldr	r3, [r5, #0]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	4418      	add	r0, r3
 800aa1a:	7843      	ldrb	r3, [r0, #1]
 800aa1c:	071b      	lsls	r3, r3, #28
 800aa1e:	d4ef      	bmi.n	800aa00 <_scanf_chars+0x48>
 800aa20:	6823      	ldr	r3, [r4, #0]
 800aa22:	06da      	lsls	r2, r3, #27
 800aa24:	bf5e      	ittt	pl
 800aa26:	682b      	ldrpl	r3, [r5, #0]
 800aa28:	781b      	ldrbpl	r3, [r3, #0]
 800aa2a:	703b      	strbpl	r3, [r7, #0]
 800aa2c:	682a      	ldr	r2, [r5, #0]
 800aa2e:	686b      	ldr	r3, [r5, #4]
 800aa30:	f102 0201 	add.w	r2, r2, #1
 800aa34:	602a      	str	r2, [r5, #0]
 800aa36:	68a2      	ldr	r2, [r4, #8]
 800aa38:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa3c:	f102 32ff 	add.w	r2, r2, #4294967295
 800aa40:	606b      	str	r3, [r5, #4]
 800aa42:	f106 0601 	add.w	r6, r6, #1
 800aa46:	bf58      	it	pl
 800aa48:	3701      	addpl	r7, #1
 800aa4a:	60a2      	str	r2, [r4, #8]
 800aa4c:	b142      	cbz	r2, 800aa60 <_scanf_chars+0xa8>
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	dcc8      	bgt.n	800a9e4 <_scanf_chars+0x2c>
 800aa52:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa56:	4629      	mov	r1, r5
 800aa58:	4640      	mov	r0, r8
 800aa5a:	4798      	blx	r3
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d0c1      	beq.n	800a9e4 <_scanf_chars+0x2c>
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	f013 0310 	ands.w	r3, r3, #16
 800aa66:	d105      	bne.n	800aa74 <_scanf_chars+0xbc>
 800aa68:	68e2      	ldr	r2, [r4, #12]
 800aa6a:	3201      	adds	r2, #1
 800aa6c:	60e2      	str	r2, [r4, #12]
 800aa6e:	69a2      	ldr	r2, [r4, #24]
 800aa70:	b102      	cbz	r2, 800aa74 <_scanf_chars+0xbc>
 800aa72:	703b      	strb	r3, [r7, #0]
 800aa74:	6923      	ldr	r3, [r4, #16]
 800aa76:	441e      	add	r6, r3
 800aa78:	6126      	str	r6, [r4, #16]
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aa80 <_scanf_i>:
 800aa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	469a      	mov	sl, r3
 800aa86:	4b74      	ldr	r3, [pc, #464]	; (800ac58 <_scanf_i+0x1d8>)
 800aa88:	460c      	mov	r4, r1
 800aa8a:	4683      	mov	fp, r0
 800aa8c:	4616      	mov	r6, r2
 800aa8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aa92:	b087      	sub	sp, #28
 800aa94:	ab03      	add	r3, sp, #12
 800aa96:	68a7      	ldr	r7, [r4, #8]
 800aa98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800aa9c:	4b6f      	ldr	r3, [pc, #444]	; (800ac5c <_scanf_i+0x1dc>)
 800aa9e:	69a1      	ldr	r1, [r4, #24]
 800aaa0:	4a6f      	ldr	r2, [pc, #444]	; (800ac60 <_scanf_i+0x1e0>)
 800aaa2:	2903      	cmp	r1, #3
 800aaa4:	bf18      	it	ne
 800aaa6:	461a      	movne	r2, r3
 800aaa8:	1e7b      	subs	r3, r7, #1
 800aaaa:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800aaae:	bf84      	itt	hi
 800aab0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aab4:	60a3      	strhi	r3, [r4, #8]
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	9200      	str	r2, [sp, #0]
 800aaba:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800aabe:	bf88      	it	hi
 800aac0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aac4:	f104 091c 	add.w	r9, r4, #28
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	bf8c      	ite	hi
 800aacc:	197f      	addhi	r7, r7, r5
 800aace:	2700      	movls	r7, #0
 800aad0:	464b      	mov	r3, r9
 800aad2:	f04f 0800 	mov.w	r8, #0
 800aad6:	9301      	str	r3, [sp, #4]
 800aad8:	6831      	ldr	r1, [r6, #0]
 800aada:	ab03      	add	r3, sp, #12
 800aadc:	2202      	movs	r2, #2
 800aade:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800aae2:	7809      	ldrb	r1, [r1, #0]
 800aae4:	f7f5 fb8c 	bl	8000200 <memchr>
 800aae8:	9b01      	ldr	r3, [sp, #4]
 800aaea:	b328      	cbz	r0, 800ab38 <_scanf_i+0xb8>
 800aaec:	f1b8 0f01 	cmp.w	r8, #1
 800aaf0:	d156      	bne.n	800aba0 <_scanf_i+0x120>
 800aaf2:	6862      	ldr	r2, [r4, #4]
 800aaf4:	b92a      	cbnz	r2, 800ab02 <_scanf_i+0x82>
 800aaf6:	2208      	movs	r2, #8
 800aaf8:	6062      	str	r2, [r4, #4]
 800aafa:	6822      	ldr	r2, [r4, #0]
 800aafc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab00:	6022      	str	r2, [r4, #0]
 800ab02:	6822      	ldr	r2, [r4, #0]
 800ab04:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ab08:	6022      	str	r2, [r4, #0]
 800ab0a:	68a2      	ldr	r2, [r4, #8]
 800ab0c:	1e51      	subs	r1, r2, #1
 800ab0e:	60a1      	str	r1, [r4, #8]
 800ab10:	b192      	cbz	r2, 800ab38 <_scanf_i+0xb8>
 800ab12:	6832      	ldr	r2, [r6, #0]
 800ab14:	1c51      	adds	r1, r2, #1
 800ab16:	6031      	str	r1, [r6, #0]
 800ab18:	7812      	ldrb	r2, [r2, #0]
 800ab1a:	701a      	strb	r2, [r3, #0]
 800ab1c:	1c5d      	adds	r5, r3, #1
 800ab1e:	6873      	ldr	r3, [r6, #4]
 800ab20:	3b01      	subs	r3, #1
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	6073      	str	r3, [r6, #4]
 800ab26:	dc06      	bgt.n	800ab36 <_scanf_i+0xb6>
 800ab28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ab2c:	4631      	mov	r1, r6
 800ab2e:	4658      	mov	r0, fp
 800ab30:	4798      	blx	r3
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d176      	bne.n	800ac24 <_scanf_i+0x1a4>
 800ab36:	462b      	mov	r3, r5
 800ab38:	f108 0801 	add.w	r8, r8, #1
 800ab3c:	f1b8 0f03 	cmp.w	r8, #3
 800ab40:	d1c9      	bne.n	800aad6 <_scanf_i+0x56>
 800ab42:	6862      	ldr	r2, [r4, #4]
 800ab44:	b90a      	cbnz	r2, 800ab4a <_scanf_i+0xca>
 800ab46:	220a      	movs	r2, #10
 800ab48:	6062      	str	r2, [r4, #4]
 800ab4a:	6862      	ldr	r2, [r4, #4]
 800ab4c:	4945      	ldr	r1, [pc, #276]	; (800ac64 <_scanf_i+0x1e4>)
 800ab4e:	6960      	ldr	r0, [r4, #20]
 800ab50:	9301      	str	r3, [sp, #4]
 800ab52:	1a89      	subs	r1, r1, r2
 800ab54:	f000 f888 	bl	800ac68 <__sccl>
 800ab58:	9b01      	ldr	r3, [sp, #4]
 800ab5a:	f04f 0800 	mov.w	r8, #0
 800ab5e:	461d      	mov	r5, r3
 800ab60:	68a3      	ldr	r3, [r4, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d038      	beq.n	800abd8 <_scanf_i+0x158>
 800ab66:	6831      	ldr	r1, [r6, #0]
 800ab68:	6960      	ldr	r0, [r4, #20]
 800ab6a:	780a      	ldrb	r2, [r1, #0]
 800ab6c:	5c80      	ldrb	r0, [r0, r2]
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	d032      	beq.n	800abd8 <_scanf_i+0x158>
 800ab72:	2a30      	cmp	r2, #48	; 0x30
 800ab74:	6822      	ldr	r2, [r4, #0]
 800ab76:	d121      	bne.n	800abbc <_scanf_i+0x13c>
 800ab78:	0510      	lsls	r0, r2, #20
 800ab7a:	d51f      	bpl.n	800abbc <_scanf_i+0x13c>
 800ab7c:	f108 0801 	add.w	r8, r8, #1
 800ab80:	b117      	cbz	r7, 800ab88 <_scanf_i+0x108>
 800ab82:	3301      	adds	r3, #1
 800ab84:	3f01      	subs	r7, #1
 800ab86:	60a3      	str	r3, [r4, #8]
 800ab88:	6873      	ldr	r3, [r6, #4]
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	6073      	str	r3, [r6, #4]
 800ab90:	dd1b      	ble.n	800abca <_scanf_i+0x14a>
 800ab92:	6833      	ldr	r3, [r6, #0]
 800ab94:	3301      	adds	r3, #1
 800ab96:	6033      	str	r3, [r6, #0]
 800ab98:	68a3      	ldr	r3, [r4, #8]
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	60a3      	str	r3, [r4, #8]
 800ab9e:	e7df      	b.n	800ab60 <_scanf_i+0xe0>
 800aba0:	f1b8 0f02 	cmp.w	r8, #2
 800aba4:	d1b1      	bne.n	800ab0a <_scanf_i+0x8a>
 800aba6:	6822      	ldr	r2, [r4, #0]
 800aba8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800abac:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800abb0:	d1c2      	bne.n	800ab38 <_scanf_i+0xb8>
 800abb2:	2110      	movs	r1, #16
 800abb4:	6061      	str	r1, [r4, #4]
 800abb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abba:	e7a5      	b.n	800ab08 <_scanf_i+0x88>
 800abbc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800abc0:	6022      	str	r2, [r4, #0]
 800abc2:	780b      	ldrb	r3, [r1, #0]
 800abc4:	702b      	strb	r3, [r5, #0]
 800abc6:	3501      	adds	r5, #1
 800abc8:	e7de      	b.n	800ab88 <_scanf_i+0x108>
 800abca:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800abce:	4631      	mov	r1, r6
 800abd0:	4658      	mov	r0, fp
 800abd2:	4798      	blx	r3
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d0df      	beq.n	800ab98 <_scanf_i+0x118>
 800abd8:	6823      	ldr	r3, [r4, #0]
 800abda:	05d9      	lsls	r1, r3, #23
 800abdc:	d50c      	bpl.n	800abf8 <_scanf_i+0x178>
 800abde:	454d      	cmp	r5, r9
 800abe0:	d908      	bls.n	800abf4 <_scanf_i+0x174>
 800abe2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800abe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abea:	4632      	mov	r2, r6
 800abec:	4658      	mov	r0, fp
 800abee:	4798      	blx	r3
 800abf0:	1e6f      	subs	r7, r5, #1
 800abf2:	463d      	mov	r5, r7
 800abf4:	454d      	cmp	r5, r9
 800abf6:	d02c      	beq.n	800ac52 <_scanf_i+0x1d2>
 800abf8:	6822      	ldr	r2, [r4, #0]
 800abfa:	f012 0210 	ands.w	r2, r2, #16
 800abfe:	d11e      	bne.n	800ac3e <_scanf_i+0x1be>
 800ac00:	702a      	strb	r2, [r5, #0]
 800ac02:	6863      	ldr	r3, [r4, #4]
 800ac04:	9e00      	ldr	r6, [sp, #0]
 800ac06:	4649      	mov	r1, r9
 800ac08:	4658      	mov	r0, fp
 800ac0a:	47b0      	blx	r6
 800ac0c:	6822      	ldr	r2, [r4, #0]
 800ac0e:	f8da 3000 	ldr.w	r3, [sl]
 800ac12:	f012 0f20 	tst.w	r2, #32
 800ac16:	d008      	beq.n	800ac2a <_scanf_i+0x1aa>
 800ac18:	1d1a      	adds	r2, r3, #4
 800ac1a:	f8ca 2000 	str.w	r2, [sl]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6018      	str	r0, [r3, #0]
 800ac22:	e009      	b.n	800ac38 <_scanf_i+0x1b8>
 800ac24:	f04f 0800 	mov.w	r8, #0
 800ac28:	e7d6      	b.n	800abd8 <_scanf_i+0x158>
 800ac2a:	07d2      	lsls	r2, r2, #31
 800ac2c:	d5f4      	bpl.n	800ac18 <_scanf_i+0x198>
 800ac2e:	1d1a      	adds	r2, r3, #4
 800ac30:	f8ca 2000 	str.w	r2, [sl]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	8018      	strh	r0, [r3, #0]
 800ac38:	68e3      	ldr	r3, [r4, #12]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	60e3      	str	r3, [r4, #12]
 800ac3e:	eba5 0509 	sub.w	r5, r5, r9
 800ac42:	44a8      	add	r8, r5
 800ac44:	6925      	ldr	r5, [r4, #16]
 800ac46:	4445      	add	r5, r8
 800ac48:	6125      	str	r5, [r4, #16]
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	b007      	add	sp, #28
 800ac4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac52:	2001      	movs	r0, #1
 800ac54:	e7fa      	b.n	800ac4c <_scanf_i+0x1cc>
 800ac56:	bf00      	nop
 800ac58:	0800b034 	.word	0x0800b034
 800ac5c:	0800a569 	.word	0x0800a569
 800ac60:	080095d1 	.word	0x080095d1
 800ac64:	0800b2d6 	.word	0x0800b2d6

0800ac68 <__sccl>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	780b      	ldrb	r3, [r1, #0]
 800ac6c:	2b5e      	cmp	r3, #94	; 0x5e
 800ac6e:	bf13      	iteet	ne
 800ac70:	1c4a      	addne	r2, r1, #1
 800ac72:	1c8a      	addeq	r2, r1, #2
 800ac74:	784b      	ldrbeq	r3, [r1, #1]
 800ac76:	2100      	movne	r1, #0
 800ac78:	bf08      	it	eq
 800ac7a:	2101      	moveq	r1, #1
 800ac7c:	1e44      	subs	r4, r0, #1
 800ac7e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800ac82:	f804 1f01 	strb.w	r1, [r4, #1]!
 800ac86:	42a5      	cmp	r5, r4
 800ac88:	d1fb      	bne.n	800ac82 <__sccl+0x1a>
 800ac8a:	b913      	cbnz	r3, 800ac92 <__sccl+0x2a>
 800ac8c:	3a01      	subs	r2, #1
 800ac8e:	4610      	mov	r0, r2
 800ac90:	bd70      	pop	{r4, r5, r6, pc}
 800ac92:	f081 0401 	eor.w	r4, r1, #1
 800ac96:	54c4      	strb	r4, [r0, r3]
 800ac98:	4611      	mov	r1, r2
 800ac9a:	780d      	ldrb	r5, [r1, #0]
 800ac9c:	2d2d      	cmp	r5, #45	; 0x2d
 800ac9e:	f101 0201 	add.w	r2, r1, #1
 800aca2:	d006      	beq.n	800acb2 <__sccl+0x4a>
 800aca4:	2d5d      	cmp	r5, #93	; 0x5d
 800aca6:	d0f2      	beq.n	800ac8e <__sccl+0x26>
 800aca8:	b90d      	cbnz	r5, 800acae <__sccl+0x46>
 800acaa:	460a      	mov	r2, r1
 800acac:	e7ef      	b.n	800ac8e <__sccl+0x26>
 800acae:	462b      	mov	r3, r5
 800acb0:	e7f1      	b.n	800ac96 <__sccl+0x2e>
 800acb2:	784e      	ldrb	r6, [r1, #1]
 800acb4:	2e5d      	cmp	r6, #93	; 0x5d
 800acb6:	d0fa      	beq.n	800acae <__sccl+0x46>
 800acb8:	42b3      	cmp	r3, r6
 800acba:	dcf8      	bgt.n	800acae <__sccl+0x46>
 800acbc:	3102      	adds	r1, #2
 800acbe:	3301      	adds	r3, #1
 800acc0:	429e      	cmp	r6, r3
 800acc2:	54c4      	strb	r4, [r0, r3]
 800acc4:	dcfb      	bgt.n	800acbe <__sccl+0x56>
 800acc6:	e7e8      	b.n	800ac9a <__sccl+0x32>

0800acc8 <__submore>:
 800acc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800accc:	460c      	mov	r4, r1
 800acce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800acd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acd4:	4299      	cmp	r1, r3
 800acd6:	d11e      	bne.n	800ad16 <__submore+0x4e>
 800acd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800acdc:	f7ff f846 	bl	8009d6c <_malloc_r>
 800ace0:	b918      	cbnz	r0, 800acea <__submore+0x22>
 800ace2:	f04f 30ff 	mov.w	r0, #4294967295
 800ace6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acee:	63a3      	str	r3, [r4, #56]	; 0x38
 800acf0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800acf4:	6360      	str	r0, [r4, #52]	; 0x34
 800acf6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800acfa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800acfe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ad02:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ad06:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ad0a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ad0e:	6020      	str	r0, [r4, #0]
 800ad10:	2000      	movs	r0, #0
 800ad12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad16:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ad18:	0077      	lsls	r7, r6, #1
 800ad1a:	463a      	mov	r2, r7
 800ad1c:	f7ff fc77 	bl	800a60e <_realloc_r>
 800ad20:	4605      	mov	r5, r0
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d0dd      	beq.n	800ace2 <__submore+0x1a>
 800ad26:	eb00 0806 	add.w	r8, r0, r6
 800ad2a:	4601      	mov	r1, r0
 800ad2c:	4632      	mov	r2, r6
 800ad2e:	4640      	mov	r0, r8
 800ad30:	f7fe f8e9 	bl	8008f06 <memcpy>
 800ad34:	f8c4 8000 	str.w	r8, [r4]
 800ad38:	6365      	str	r5, [r4, #52]	; 0x34
 800ad3a:	63a7      	str	r7, [r4, #56]	; 0x38
 800ad3c:	e7e8      	b.n	800ad10 <__submore+0x48>

0800ad3e <_malloc_usable_size_r>:
 800ad3e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800ad42:	2800      	cmp	r0, #0
 800ad44:	f1a0 0004 	sub.w	r0, r0, #4
 800ad48:	bfbc      	itt	lt
 800ad4a:	580b      	ldrlt	r3, [r1, r0]
 800ad4c:	18c0      	addlt	r0, r0, r3
 800ad4e:	4770      	bx	lr

0800ad50 <_init>:
 800ad50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad52:	bf00      	nop
 800ad54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad56:	bc08      	pop	{r3}
 800ad58:	469e      	mov	lr, r3
 800ad5a:	4770      	bx	lr

0800ad5c <_fini>:
 800ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5e:	bf00      	nop
 800ad60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad62:	bc08      	pop	{r3}
 800ad64:	469e      	mov	lr, r3
 800ad66:	4770      	bx	lr
