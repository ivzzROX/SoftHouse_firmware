
dip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08009ca4  08009ca4  00019ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a1bc  0800a1bc  0001a1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a1c4  0800a1c4  0001a1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a1c8  0800a1c8  0001a1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000228  20000000  0800a1cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020228  2**0
                  CONTENTS
  8 .bss          000147d0  20000228  20000228  00020228  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200149f8  200149f8  00020228  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 11 .debug_info   00026c70  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005a45  00000000  00000000  00046ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001c30  00000000  00000000  0004c910  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000019b0  00000000  00000000  0004e540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e6d0  00000000  00000000  0004fef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008456  00000000  00000000  0005e5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00066a16  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007e3c  00000000  00000000  00066a94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c8c 	.word	0x08009c8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08009c8c 	.word	0x08009c8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <bit_proces>:
#include "ino.h"

#include <stdio.h>

uint8_t bit_proces(struct OP* op_arr, uint16_t op_n)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
	if ( op_arr[0].log == FIRST)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	7a1b      	ldrb	r3, [r3, #8]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	f040 8082 	bne.w	80006ca <bit_proces+0x11a>
	{
		uint16_t temp = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	81fb      	strh	r3, [r7, #14]
		uint16_t state = Sensor_CheckValue(op_arr[0].addr, op_arr[0].trigger_value);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	881a      	ldrh	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	4619      	mov	r1, r3
 80005d4:	4610      	mov	r0, r2
 80005d6:	f006 fb95 	bl	8006d04 <Sensor_CheckValue>
 80005da:	4603      	mov	r3, r0
 80005dc:	81bb      	strh	r3, [r7, #12]

		for (uint16_t i = 1; i < op_n; ++i)
 80005de:	2301      	movs	r3, #1
 80005e0:	817b      	strh	r3, [r7, #10]
 80005e2:	e06b      	b.n	80006bc <bit_proces+0x10c>
		{
			if (op_arr[i].type == DATA)
 80005e4:	897a      	ldrh	r2, [r7, #10]
 80005e6:	4613      	mov	r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4413      	add	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	461a      	mov	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4413      	add	r3, r2
 80005f4:	7a5b      	ldrb	r3, [r3, #9]
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	d116      	bne.n	8000628 <bit_proces+0x78>
			{
				temp = Sensor_CheckValue(op_arr[i].addr, op_arr[i].trigger_value);
 80005fa:	897a      	ldrh	r2, [r7, #10]
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	461a      	mov	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	8818      	ldrh	r0, [r3, #0]
 800060c:	897a      	ldrh	r2, [r7, #10]
 800060e:	4613      	mov	r3, r2
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	4413      	add	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	461a      	mov	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4413      	add	r3, r2
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	4619      	mov	r1, r3
 8000620:	f006 fb70 	bl	8006d04 <Sensor_CheckValue>
 8000624:	4603      	mov	r3, r0
 8000626:	81fb      	strh	r3, [r7, #14]
			}

			if (op_arr[i].type == STATE)
 8000628:	897a      	ldrh	r2, [r7, #10]
 800062a:	4613      	mov	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	4413      	add	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	461a      	mov	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4413      	add	r3, r2
 8000638:	7a5b      	ldrb	r3, [r3, #9]
 800063a:	2b03      	cmp	r3, #3
 800063c:	d109      	bne.n	8000652 <bit_proces+0xa2>
			{
				temp = op_arr[i].addr;
 800063e:	897a      	ldrh	r2, [r7, #10]
 8000640:	4613      	mov	r3, r2
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	4413      	add	r3, r2
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	461a      	mov	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	81fb      	strh	r3, [r7, #14]
			}

			switch (op_arr[i].log)
 8000652:	897a      	ldrh	r2, [r7, #10]
 8000654:	4613      	mov	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	461a      	mov	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	7a1b      	ldrb	r3, [r3, #8]
 8000664:	3b02      	subs	r3, #2
 8000666:	2b03      	cmp	r3, #3
 8000668:	d824      	bhi.n	80006b4 <bit_proces+0x104>
 800066a:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <bit_proces+0xc0>)
 800066c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000670:	08000681 	.word	0x08000681
 8000674:	0800068b 	.word	0x0800068b
 8000678:	08000695 	.word	0x08000695
 800067c:	080006a5 	.word	0x080006a5
			{
			case OR:
			{
				state |= temp;
 8000680:	89ba      	ldrh	r2, [r7, #12]
 8000682:	89fb      	ldrh	r3, [r7, #14]
 8000684:	4313      	orrs	r3, r2
 8000686:	81bb      	strh	r3, [r7, #12]
				break;
 8000688:	e015      	b.n	80006b6 <bit_proces+0x106>
			}

			case AND:
			{
				state &= temp;
 800068a:	89ba      	ldrh	r2, [r7, #12]
 800068c:	89fb      	ldrh	r3, [r7, #14]
 800068e:	4013      	ands	r3, r2
 8000690:	81bb      	strh	r3, [r7, #12]
				break;
 8000692:	e010      	b.n	80006b6 <bit_proces+0x106>
			}

			case NOR:
			{
				state |= temp;
 8000694:	89ba      	ldrh	r2, [r7, #12]
 8000696:	89fb      	ldrh	r3, [r7, #14]
 8000698:	4313      	orrs	r3, r2
 800069a:	81bb      	strh	r3, [r7, #12]
				state = ~state;
 800069c:	89bb      	ldrh	r3, [r7, #12]
 800069e:	43db      	mvns	r3, r3
 80006a0:	81bb      	strh	r3, [r7, #12]
				break;
 80006a2:	e008      	b.n	80006b6 <bit_proces+0x106>
			}

			case NAND:
			{
				state &= temp;
 80006a4:	89ba      	ldrh	r2, [r7, #12]
 80006a6:	89fb      	ldrh	r3, [r7, #14]
 80006a8:	4013      	ands	r3, r2
 80006aa:	81bb      	strh	r3, [r7, #12]
				state = ~state;
 80006ac:	89bb      	ldrh	r3, [r7, #12]
 80006ae:	43db      	mvns	r3, r3
 80006b0:	81bb      	strh	r3, [r7, #12]
				break;
 80006b2:	e000      	b.n	80006b6 <bit_proces+0x106>
			}

			default:
				break;
 80006b4:	bf00      	nop
		for (uint16_t i = 1; i < op_n; ++i)
 80006b6:	897b      	ldrh	r3, [r7, #10]
 80006b8:	3301      	adds	r3, #1
 80006ba:	817b      	strh	r3, [r7, #10]
 80006bc:	897a      	ldrh	r2, [r7, #10]
 80006be:	887b      	ldrh	r3, [r7, #2]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d38f      	bcc.n	80005e4 <bit_proces+0x34>
			}
		}

		return state;
 80006c4:	89bb      	ldrh	r3, [r7, #12]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	e000      	b.n	80006cc <bit_proces+0x11c>
	}
	return 0;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <map_op_on_root>:

uint8_t map_op_on_root(struct OP* op, struct OP_ROOT* root, uint16_t root_n)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b087      	sub	sp, #28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	4613      	mov	r3, r2
 80006e0:	80fb      	strh	r3, [r7, #6]
	if (root[0].type == PMO || root[0].type == INO || root[0].type == TLGRM)
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b05      	cmp	r3, #5
 80006e8:	d007      	beq.n	80006fa <map_op_on_root+0x26>
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b06      	cmp	r3, #6
 80006f0:	d003      	beq.n	80006fa <map_op_on_root+0x26>
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b07      	cmp	r3, #7
 80006f8:	d101      	bne.n	80006fe <map_op_on_root+0x2a>
	{
		return 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e039      	b.n	8000772 <map_op_on_root+0x9e>
	}

	root[0].operation = op;
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	68fa      	ldr	r2, [r7, #12]
 8000702:	605a      	str	r2, [r3, #4]
	uint32_t offset = root[0].operation_n;
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	891b      	ldrh	r3, [r3, #8]
 8000708:	617b      	str	r3, [r7, #20]

	for (uint16_t i = 1; i < root_n; ++i)
 800070a:	2301      	movs	r3, #1
 800070c:	827b      	strh	r3, [r7, #18]
 800070e:	e02b      	b.n	8000768 <map_op_on_root+0x94>
	{
		if (root[i].type == BRCH)
 8000710:	8a7a      	ldrh	r2, [r7, #18]
 8000712:	4613      	mov	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	461a      	mov	r2, r3
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	4413      	add	r3, r2
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b02      	cmp	r3, #2
 8000724:	d11d      	bne.n	8000762 <map_op_on_root+0x8e>
		{
			root[i].operation = op + offset;
 8000726:	8a7a      	ldrh	r2, [r7, #18]
 8000728:	4613      	mov	r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	461a      	mov	r2, r3
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	1899      	adds	r1, r3, r2
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	4613      	mov	r3, r2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	4413      	add	r3, r2
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	461a      	mov	r2, r3
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	4413      	add	r3, r2
 8000746:	604b      	str	r3, [r1, #4]
			offset += root[i].operation_n;
 8000748:	8a7a      	ldrh	r2, [r7, #18]
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	461a      	mov	r2, r3
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	4413      	add	r3, r2
 8000758:	891b      	ldrh	r3, [r3, #8]
 800075a:	461a      	mov	r2, r3
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	4413      	add	r3, r2
 8000760:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 1; i < root_n; ++i)
 8000762:	8a7b      	ldrh	r3, [r7, #18]
 8000764:	3301      	adds	r3, #1
 8000766:	827b      	strh	r3, [r7, #18]
 8000768:	8a7a      	ldrh	r2, [r7, #18]
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	429a      	cmp	r2, r3
 800076e:	d3cf      	bcc.n	8000710 <map_op_on_root+0x3c>
		}
	}
	return 1;
 8000770:	2301      	movs	r3, #1
}
 8000772:	4618      	mov	r0, r3
 8000774:	371c      	adds	r7, #28
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
	...

08000780 <start_bit_engine>:

uint8_t start_bit_engine(struct OP_ROOT* root, uint16_t root_n, uint16_t ino)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b089      	sub	sp, #36	; 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	807b      	strh	r3, [r7, #2]
 800078c:	4613      	mov	r3, r2
 800078e:	803b      	strh	r3, [r7, #0]
	if (root == NULL)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <start_bit_engine+0x1a>
	{
		return 0;
 8000796:	2300      	movs	r3, #0
 8000798:	e129      	b.n	80009ee <start_bit_engine+0x26e>
	}

	for (int32_t i = root_n - 1; i >= 0; --i)
 800079a:	887b      	ldrh	r3, [r7, #2]
 800079c:	3b01      	subs	r3, #1
 800079e:	61fb      	str	r3, [r7, #28]
 80007a0:	e120      	b.n	80009e4 <start_bit_engine+0x264>
	{
		switch(root[i].type)
 80007a2:	69fa      	ldr	r2, [r7, #28]
 80007a4:	4613      	mov	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	461a      	mov	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	3b02      	subs	r3, #2
 80007b6:	2b05      	cmp	r3, #5
 80007b8:	f200 8111 	bhi.w	80009de <start_bit_engine+0x25e>
 80007bc:	a201      	add	r2, pc, #4	; (adr r2, 80007c4 <start_bit_engine+0x44>)
 80007be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c2:	bf00      	nop
 80007c4:	080008ed 	.word	0x080008ed
 80007c8:	080007dd 	.word	0x080007dd
 80007cc:	0800080d 	.word	0x0800080d
 80007d0:	080008ad 	.word	0x080008ad
 80007d4:	0800083d 	.word	0x0800083d
 80007d8:	08000875 	.word	0x08000875
		{
		case TIME:
		{
			root[i].result = is_cur_time((struct TM*)root[i].operation);
 80007dc:	69fa      	ldr	r2, [r7, #28]
 80007de:	4613      	mov	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	461a      	mov	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	189c      	adds	r4, r3, r2
 80007ec:	69fa      	ldr	r2, [r7, #28]
 80007ee:	4613      	mov	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	461a      	mov	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4413      	add	r3, r2
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 f91e 	bl	8001a40 <is_cur_time>
 8000804:	4603      	mov	r3, r0
 8000806:	b29b      	uxth	r3, r3
 8000808:	8223      	strh	r3, [r4, #16]
			break;
 800080a:	e0e8      	b.n	80009de <start_bit_engine+0x25e>
		}

		case WEEK:
		{
			root[i].result = is_cur_day_of_week(root[i].operation_n);
 800080c:	69fa      	ldr	r2, [r7, #28]
 800080e:	4613      	mov	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4413      	add	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	461a      	mov	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	189c      	adds	r4, r3, r2
 800081c:	69fa      	ldr	r2, [r7, #28]
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	461a      	mov	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4413      	add	r3, r2
 800082c:	891b      	ldrh	r3, [r3, #8]
 800082e:	4618      	mov	r0, r3
 8000830:	f001 f944 	bl	8001abc <is_cur_day_of_week>
 8000834:	4603      	mov	r3, r0
 8000836:	b29b      	uxth	r3, r3
 8000838:	8223      	strh	r3, [r4, #16]
			break;
 800083a:	e0d0      	b.n	80009de <start_bit_engine+0x25e>
		}

		case INO:
		{
			uint16_t ino_pin = root[i].operation_n - 200;
 800083c:	69fa      	ldr	r2, [r7, #28]
 800083e:	4613      	mov	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	461a      	mov	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4413      	add	r3, r2
 800084c:	891b      	ldrh	r3, [r3, #8]
 800084e:	3bc8      	subs	r3, #200	; 0xc8
 8000850:	82fb      	strh	r3, [r7, #22]
			root[i].result = INO_GetValue(ino_pin);
 8000852:	69fa      	ldr	r2, [r7, #28]
 8000854:	4613      	mov	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4413      	add	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	461a      	mov	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	189c      	adds	r4, r3, r2
 8000862:	8afb      	ldrh	r3, [r7, #22]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f005 ff0c 	bl	8006684 <INO_GetValue>
 800086c:	4603      	mov	r3, r0
 800086e:	b29b      	uxth	r3, r3
 8000870:	8223      	strh	r3, [r4, #16]
			break;
 8000872:	e0b4      	b.n	80009de <start_bit_engine+0x25e>
		}

		case TLGRM:
		{
			uint16_t tg_key = root[i].operation_n - 600;
 8000874:	69fa      	ldr	r2, [r7, #28]
 8000876:	4613      	mov	r3, r2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4413      	add	r3, r2
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	461a      	mov	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4413      	add	r3, r2
 8000884:	891b      	ldrh	r3, [r3, #8]
 8000886:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800088a:	82bb      	strh	r3, [r7, #20]
			root[i].result = Telegram_GetValue(tg_key);
 800088c:	69fa      	ldr	r2, [r7, #28]
 800088e:	4613      	mov	r3, r2
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	4413      	add	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	189c      	adds	r4, r3, r2
 800089c:	8abb      	ldrh	r3, [r7, #20]
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 f8aa 	bl	80019f8 <Telegram_GetValue>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	8223      	strh	r3, [r4, #16]
			break;
 80008aa:	e098      	b.n	80009de <start_bit_engine+0x25e>
		}

		case PMO:
		{
			uint16_t link_out = root[i].operation_n - 800;
 80008ac:	69fa      	ldr	r2, [r7, #28]
 80008ae:	4613      	mov	r3, r2
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	461a      	mov	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4413      	add	r3, r2
 80008bc:	891b      	ldrh	r3, [r3, #8]
 80008be:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80008c2:	827b      	strh	r3, [r7, #18]
			root[i].result = ino & (1 << link_out);
 80008c4:	69fa      	ldr	r2, [r7, #28]
 80008c6:	4613      	mov	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	461a      	mov	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	8a7a      	ldrh	r2, [r7, #18]
 80008d6:	2101      	movs	r1, #1
 80008d8:	fa01 f202 	lsl.w	r2, r1, r2
 80008dc:	b211      	sxth	r1, r2
 80008de:	f9b7 2000 	ldrsh.w	r2, [r7]
 80008e2:	400a      	ands	r2, r1
 80008e4:	b212      	sxth	r2, r2
 80008e6:	b292      	uxth	r2, r2
 80008e8:	821a      	strh	r2, [r3, #16]
			break;
 80008ea:	e078      	b.n	80009de <start_bit_engine+0x25e>
		}

		case BRCH:
			for (uint16_t o = 1; o < root[i].operation_n; ++o)
 80008ec:	2301      	movs	r3, #1
 80008ee:	837b      	strh	r3, [r7, #26]
 80008f0:	e048      	b.n	8000984 <start_bit_engine+0x204>
			{
				struct OP* op_arr = (struct OP*)root[i].operation;
 80008f2:	69fa      	ldr	r2, [r7, #28]
 80008f4:	4613      	mov	r3, r2
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	4413      	add	r3, r2
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	461a      	mov	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	60fb      	str	r3, [r7, #12]
				if (op_arr[o].type == STATE)
 8000906:	8b7a      	ldrh	r2, [r7, #26]
 8000908:	4613      	mov	r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	4413      	add	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	461a      	mov	r2, r3
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	4413      	add	r3, r2
 8000916:	7a5b      	ldrb	r3, [r3, #9]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d130      	bne.n	800097e <start_bit_engine+0x1fe>
				{
					/*
						if operration type is state,
						engine need to find result of this state and set it
					*/
					for (uint16_t n = 1; n < root_n; ++n)
 800091c:	2301      	movs	r3, #1
 800091e:	833b      	strh	r3, [r7, #24]
 8000920:	e029      	b.n	8000976 <start_bit_engine+0x1f6>
					{
						if (op_arr[o].root_id == root[n].id)
 8000922:	8b7a      	ldrh	r2, [r7, #26]
 8000924:	4613      	mov	r3, r2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	4413      	add	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	461a      	mov	r2, r3
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	4413      	add	r3, r2
 8000932:	7a99      	ldrb	r1, [r3, #10]
 8000934:	8b3a      	ldrh	r2, [r7, #24]
 8000936:	4613      	mov	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	461a      	mov	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4413      	add	r3, r2
 8000944:	7bdb      	ldrb	r3, [r3, #15]
 8000946:	4299      	cmp	r1, r3
 8000948:	d112      	bne.n	8000970 <start_bit_engine+0x1f0>
						{
							op_arr[o].addr = root[n].result;
 800094a:	8b7a      	ldrh	r2, [r7, #26]
 800094c:	4613      	mov	r3, r2
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	4413      	add	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	461a      	mov	r2, r3
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	1899      	adds	r1, r3, r2
 800095a:	8b3a      	ldrh	r2, [r7, #24]
 800095c:	4613      	mov	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4413      	add	r3, r2
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	461a      	mov	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	8a1b      	ldrh	r3, [r3, #16]
 800096c:	800b      	strh	r3, [r1, #0]
							break;
 800096e:	e006      	b.n	800097e <start_bit_engine+0x1fe>
					for (uint16_t n = 1; n < root_n; ++n)
 8000970:	8b3b      	ldrh	r3, [r7, #24]
 8000972:	3301      	adds	r3, #1
 8000974:	833b      	strh	r3, [r7, #24]
 8000976:	8b3a      	ldrh	r2, [r7, #24]
 8000978:	887b      	ldrh	r3, [r7, #2]
 800097a:	429a      	cmp	r2, r3
 800097c:	d3d1      	bcc.n	8000922 <start_bit_engine+0x1a2>
			for (uint16_t o = 1; o < root[i].operation_n; ++o)
 800097e:	8b7b      	ldrh	r3, [r7, #26]
 8000980:	3301      	adds	r3, #1
 8000982:	837b      	strh	r3, [r7, #26]
 8000984:	69fa      	ldr	r2, [r7, #28]
 8000986:	4613      	mov	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	461a      	mov	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4413      	add	r3, r2
 8000994:	891b      	ldrh	r3, [r3, #8]
 8000996:	8b7a      	ldrh	r2, [r7, #26]
 8000998:	429a      	cmp	r2, r3
 800099a:	d3aa      	bcc.n	80008f2 <start_bit_engine+0x172>
						}
					}
				}
			}
			root[i].result = bit_proces((struct OP*)root[i].operation, root[i].operation_n);
 800099c:	69fa      	ldr	r2, [r7, #28]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	461a      	mov	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	189c      	adds	r4, r3, r2
 80009ac:	69fa      	ldr	r2, [r7, #28]
 80009ae:	4613      	mov	r3, r2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	4413      	add	r3, r2
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	461a      	mov	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	6858      	ldr	r0, [r3, #4]
 80009be:	69fa      	ldr	r2, [r7, #28]
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	461a      	mov	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	891b      	ldrh	r3, [r3, #8]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f7ff fded 	bl	80005b0 <bit_proces>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29b      	uxth	r3, r3
 80009da:	8223      	strh	r3, [r4, #16]
			break;
 80009dc:	bf00      	nop
	for (int32_t i = root_n - 1; i >= 0; --i)
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f6bf aedb 	bge.w	80007a2 <start_bit_engine+0x22>
		}
	}

	return 1;
 80009ec:	2301      	movs	r3, #1
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3724      	adds	r7, #36	; 0x24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd90      	pop	{r4, r7, pc}
 80009f6:	bf00      	nop

080009f8 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 80009f8:	b480      	push	{r7}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	685a      	ldr	r2, [r3, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d301      	bcc.n	8000a12 <jsmn_alloc_token+0x1a>
    return NULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e014      	b.n	8000a3c <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	1c59      	adds	r1, r3, #1
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	6051      	str	r1, [r2, #4]
 8000a1c:	011b      	lsls	r3, r3, #4
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	4413      	add	r3, r2
 8000a22:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8000a3a:	697b      	ldr	r3, [r7, #20]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	371c      	adds	r7, #28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	460b      	mov	r3, r1
 8000a56:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	7afa      	ldrb	r2, [r7, #11]
 8000a5c:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	605a      	str	r2, [r3, #4]
  token->end = end;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	683a      	ldr	r2, [r7, #0]
 8000a68:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
 8000a88:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000a90:	e034      	b.n	8000afc <jsmn_parse_primitive+0x80>
    switch (js[parser->pos]) {
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b20      	cmp	r3, #32
 8000a9e:	d03a      	beq.n	8000b16 <jsmn_parse_primitive+0x9a>
 8000aa0:	2b20      	cmp	r3, #32
 8000aa2:	dc06      	bgt.n	8000ab2 <jsmn_parse_primitive+0x36>
 8000aa4:	2b09      	cmp	r3, #9
 8000aa6:	db0f      	blt.n	8000ac8 <jsmn_parse_primitive+0x4c>
 8000aa8:	2b0a      	cmp	r3, #10
 8000aaa:	dd34      	ble.n	8000b16 <jsmn_parse_primitive+0x9a>
 8000aac:	2b0d      	cmp	r3, #13
 8000aae:	d032      	beq.n	8000b16 <jsmn_parse_primitive+0x9a>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8000ab0:	e00a      	b.n	8000ac8 <jsmn_parse_primitive+0x4c>
    switch (js[parser->pos]) {
 8000ab2:	2b3a      	cmp	r3, #58	; 0x3a
 8000ab4:	d02f      	beq.n	8000b16 <jsmn_parse_primitive+0x9a>
 8000ab6:	2b3a      	cmp	r3, #58	; 0x3a
 8000ab8:	dc02      	bgt.n	8000ac0 <jsmn_parse_primitive+0x44>
 8000aba:	2b2c      	cmp	r3, #44	; 0x2c
 8000abc:	d02b      	beq.n	8000b16 <jsmn_parse_primitive+0x9a>
      break;
 8000abe:	e003      	b.n	8000ac8 <jsmn_parse_primitive+0x4c>
    switch (js[parser->pos]) {
 8000ac0:	2b5d      	cmp	r3, #93	; 0x5d
 8000ac2:	d028      	beq.n	8000b16 <jsmn_parse_primitive+0x9a>
 8000ac4:	2b7d      	cmp	r3, #125	; 0x7d
 8000ac6:	d026      	beq.n	8000b16 <jsmn_parse_primitive+0x9a>
      break;
 8000ac8:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b1f      	cmp	r3, #31
 8000ad6:	d906      	bls.n	8000ae6 <jsmn_parse_primitive+0x6a>
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	68ba      	ldr	r2, [r7, #8]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b7e      	cmp	r3, #126	; 0x7e
 8000ae4:	d905      	bls.n	8000af2 <jsmn_parse_primitive+0x76>
      parser->pos = start;
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8000aec:	f06f 0301 	mvn.w	r3, #1
 8000af0:	e038      	b.n	8000b64 <jsmn_parse_primitive+0xe8>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d208      	bcs.n	8000b18 <jsmn_parse_primitive+0x9c>
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1be      	bne.n	8000a92 <jsmn_parse_primitive+0x16>
 8000b14:	e000      	b.n	8000b18 <jsmn_parse_primitive+0x9c>
      goto found;
 8000b16:	bf00      	nop
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
  if (tokens == NULL) {
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d106      	bne.n	8000b2c <jsmn_parse_primitive+0xb0>
    parser->pos--;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	1e5a      	subs	r2, r3, #1
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	601a      	str	r2, [r3, #0]
    return 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e01b      	b.n	8000b64 <jsmn_parse_primitive+0xe8>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000b2c:	6a3a      	ldr	r2, [r7, #32]
 8000b2e:	6839      	ldr	r1, [r7, #0]
 8000b30:	68f8      	ldr	r0, [r7, #12]
 8000b32:	f7ff ff61 	bl	80009f8 <jsmn_alloc_token>
 8000b36:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d105      	bne.n	8000b4a <jsmn_parse_primitive+0xce>
    parser->pos = start;
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	e00c      	b.n	8000b64 <jsmn_parse_primitive+0xe8>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	2104      	movs	r1, #4
 8000b52:	6938      	ldr	r0, [r7, #16]
 8000b54:	f7ff ff78 	bl	8000a48 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	1e5a      	subs	r2, r3, #1
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	601a      	str	r2, [r3, #0]
  return 0;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
 8000b78:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	61bb      	str	r3, [r7, #24]

  parser->pos++;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	1c5a      	adds	r2, r3, #1
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	601a      	str	r2, [r3, #0]

  /* Skip starting quote */
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000b8a:	e14c      	b.n	8000e26 <jsmn_parse_string+0x2ba>
    char c = js[parser->pos];
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68ba      	ldr	r2, [r7, #8]
 8000b92:	4413      	add	r3, r2
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
 8000b9a:	2b22      	cmp	r3, #34	; 0x22
 8000b9c:	d11d      	bne.n	8000bda <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <jsmn_parse_string+0x3c>
        return 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e150      	b.n	8000e4a <jsmn_parse_string+0x2de>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000baa:	6839      	ldr	r1, [r7, #0]
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f7ff ff23 	bl	80009f8 <jsmn_alloc_token>
 8000bb2:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d105      	bne.n	8000bc6 <jsmn_parse_string+0x5a>
        parser->pos = start;
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc4:	e141      	b.n	8000e4a <jsmn_parse_string+0x2de>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	1c5a      	adds	r2, r3, #1
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2103      	movs	r1, #3
 8000bd0:	6938      	ldr	r0, [r7, #16]
 8000bd2:	f7ff ff39 	bl	8000a48 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e137      	b.n	8000e4a <jsmn_parse_string+0x2de>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
 8000bdc:	2b5c      	cmp	r3, #92	; 0x5c
 8000bde:	f040 811d 	bne.w	8000e1c <jsmn_parse_string+0x2b0>
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	f080 8116 	bcs.w	8000e1c <jsmn_parse_string+0x2b0>
      int i;
      parser->pos++;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	4413      	add	r3, r2
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	3b22      	subs	r3, #34	; 0x22
 8000c06:	2b53      	cmp	r3, #83	; 0x53
 8000c08:	f200 8101 	bhi.w	8000e0e <jsmn_parse_string+0x2a2>
 8000c0c:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <jsmn_parse_string+0xa8>)
 8000c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c12:	bf00      	nop
 8000c14:	08000e1b 	.word	0x08000e1b
 8000c18:	08000e0f 	.word	0x08000e0f
 8000c1c:	08000e0f 	.word	0x08000e0f
 8000c20:	08000e0f 	.word	0x08000e0f
 8000c24:	08000e0f 	.word	0x08000e0f
 8000c28:	08000e0f 	.word	0x08000e0f
 8000c2c:	08000e0f 	.word	0x08000e0f
 8000c30:	08000e0f 	.word	0x08000e0f
 8000c34:	08000e0f 	.word	0x08000e0f
 8000c38:	08000e0f 	.word	0x08000e0f
 8000c3c:	08000e0f 	.word	0x08000e0f
 8000c40:	08000e0f 	.word	0x08000e0f
 8000c44:	08000e0f 	.word	0x08000e0f
 8000c48:	08000e1b 	.word	0x08000e1b
 8000c4c:	08000e0f 	.word	0x08000e0f
 8000c50:	08000e0f 	.word	0x08000e0f
 8000c54:	08000e0f 	.word	0x08000e0f
 8000c58:	08000e0f 	.word	0x08000e0f
 8000c5c:	08000e0f 	.word	0x08000e0f
 8000c60:	08000e0f 	.word	0x08000e0f
 8000c64:	08000e0f 	.word	0x08000e0f
 8000c68:	08000e0f 	.word	0x08000e0f
 8000c6c:	08000e0f 	.word	0x08000e0f
 8000c70:	08000e0f 	.word	0x08000e0f
 8000c74:	08000e0f 	.word	0x08000e0f
 8000c78:	08000e0f 	.word	0x08000e0f
 8000c7c:	08000e0f 	.word	0x08000e0f
 8000c80:	08000e0f 	.word	0x08000e0f
 8000c84:	08000e0f 	.word	0x08000e0f
 8000c88:	08000e0f 	.word	0x08000e0f
 8000c8c:	08000e0f 	.word	0x08000e0f
 8000c90:	08000e0f 	.word	0x08000e0f
 8000c94:	08000e0f 	.word	0x08000e0f
 8000c98:	08000e0f 	.word	0x08000e0f
 8000c9c:	08000e0f 	.word	0x08000e0f
 8000ca0:	08000e0f 	.word	0x08000e0f
 8000ca4:	08000e0f 	.word	0x08000e0f
 8000ca8:	08000e0f 	.word	0x08000e0f
 8000cac:	08000e0f 	.word	0x08000e0f
 8000cb0:	08000e0f 	.word	0x08000e0f
 8000cb4:	08000e0f 	.word	0x08000e0f
 8000cb8:	08000e0f 	.word	0x08000e0f
 8000cbc:	08000e0f 	.word	0x08000e0f
 8000cc0:	08000e0f 	.word	0x08000e0f
 8000cc4:	08000e0f 	.word	0x08000e0f
 8000cc8:	08000e0f 	.word	0x08000e0f
 8000ccc:	08000e0f 	.word	0x08000e0f
 8000cd0:	08000e0f 	.word	0x08000e0f
 8000cd4:	08000e0f 	.word	0x08000e0f
 8000cd8:	08000e0f 	.word	0x08000e0f
 8000cdc:	08000e0f 	.word	0x08000e0f
 8000ce0:	08000e0f 	.word	0x08000e0f
 8000ce4:	08000e0f 	.word	0x08000e0f
 8000ce8:	08000e0f 	.word	0x08000e0f
 8000cec:	08000e0f 	.word	0x08000e0f
 8000cf0:	08000e0f 	.word	0x08000e0f
 8000cf4:	08000e0f 	.word	0x08000e0f
 8000cf8:	08000e0f 	.word	0x08000e0f
 8000cfc:	08000e1b 	.word	0x08000e1b
 8000d00:	08000e0f 	.word	0x08000e0f
 8000d04:	08000e0f 	.word	0x08000e0f
 8000d08:	08000e0f 	.word	0x08000e0f
 8000d0c:	08000e0f 	.word	0x08000e0f
 8000d10:	08000e0f 	.word	0x08000e0f
 8000d14:	08000e1b 	.word	0x08000e1b
 8000d18:	08000e0f 	.word	0x08000e0f
 8000d1c:	08000e0f 	.word	0x08000e0f
 8000d20:	08000e0f 	.word	0x08000e0f
 8000d24:	08000e1b 	.word	0x08000e1b
 8000d28:	08000e0f 	.word	0x08000e0f
 8000d2c:	08000e0f 	.word	0x08000e0f
 8000d30:	08000e0f 	.word	0x08000e0f
 8000d34:	08000e0f 	.word	0x08000e0f
 8000d38:	08000e0f 	.word	0x08000e0f
 8000d3c:	08000e0f 	.word	0x08000e0f
 8000d40:	08000e0f 	.word	0x08000e0f
 8000d44:	08000e1b 	.word	0x08000e1b
 8000d48:	08000e0f 	.word	0x08000e0f
 8000d4c:	08000e0f 	.word	0x08000e0f
 8000d50:	08000e0f 	.word	0x08000e0f
 8000d54:	08000e1b 	.word	0x08000e1b
 8000d58:	08000e0f 	.word	0x08000e0f
 8000d5c:	08000e1b 	.word	0x08000e1b
 8000d60:	08000d65 	.word	0x08000d65
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	e037      	b.n	8000de4 <jsmn_parse_string+0x278>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68ba      	ldr	r2, [r7, #8]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b2f      	cmp	r3, #47	; 0x2f
 8000d80:	d906      	bls.n	8000d90 <jsmn_parse_string+0x224>
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	4413      	add	r3, r2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b39      	cmp	r3, #57	; 0x39
 8000d8e:	d921      	bls.n	8000dd4 <jsmn_parse_string+0x268>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	4413      	add	r3, r2
 8000d98:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8000d9a:	2b40      	cmp	r3, #64	; 0x40
 8000d9c:	d906      	bls.n	8000dac <jsmn_parse_string+0x240>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	4413      	add	r3, r2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b46      	cmp	r3, #70	; 0x46
 8000daa:	d913      	bls.n	8000dd4 <jsmn_parse_string+0x268>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	4413      	add	r3, r2
 8000db4:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8000db6:	2b60      	cmp	r3, #96	; 0x60
 8000db8:	d906      	bls.n	8000dc8 <jsmn_parse_string+0x25c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b66      	cmp	r3, #102	; 0x66
 8000dc6:	d905      	bls.n	8000dd4 <jsmn_parse_string+0x268>
            parser->pos = start;
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8000dce:	f06f 0301 	mvn.w	r3, #1
 8000dd2:	e03a      	b.n	8000e4a <jsmn_parse_string+0x2de>
          }
          parser->pos++;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	1c5a      	adds	r2, r3, #1
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	601a      	str	r2, [r3, #0]
             i++) {
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3301      	adds	r3, #1
 8000de2:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	dc0b      	bgt.n	8000e02 <jsmn_parse_string+0x296>
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d206      	bcs.n	8000e02 <jsmn_parse_string+0x296>
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1b8      	bne.n	8000d74 <jsmn_parse_string+0x208>
        }
        parser->pos--;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	1e5a      	subs	r2, r3, #1
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	601a      	str	r2, [r3, #0]
        break;
 8000e0c:	e006      	b.n	8000e1c <jsmn_parse_string+0x2b0>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8000e14:	f06f 0301 	mvn.w	r3, #1
 8000e18:	e017      	b.n	8000e4a <jsmn_parse_string+0x2de>
        break;
 8000e1a:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <jsmn_parse_string+0x2d4>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	4413      	add	r3, r2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f47f aea6 	bne.w	8000b8c <jsmn_parse_string+0x20>
      }
    }
  }
  parser->pos = start;
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 8000e46:	f06f 0302 	mvn.w	r3, #2
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3720      	adds	r7, #32
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop

08000e54 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	; 0x30
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000e68:	e15f      	b.n	800112a <jsmn_parse+0x2d6>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	4413      	add	r3, r2
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8000e76:	7ffb      	ldrb	r3, [r7, #31]
 8000e78:	2b2c      	cmp	r3, #44	; 0x2c
 8000e7a:	f000 80dd 	beq.w	8001038 <jsmn_parse+0x1e4>
 8000e7e:	2b2c      	cmp	r3, #44	; 0x2c
 8000e80:	dc10      	bgt.n	8000ea4 <jsmn_parse+0x50>
 8000e82:	2b0d      	cmp	r3, #13
 8000e84:	f000 8141 	beq.w	800110a <jsmn_parse+0x2b6>
 8000e88:	2b0d      	cmp	r3, #13
 8000e8a:	dc04      	bgt.n	8000e96 <jsmn_parse+0x42>
 8000e8c:	3b09      	subs	r3, #9
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	f200 8119 	bhi.w	80010c6 <jsmn_parse+0x272>
      break;
    case '\t':
    case '\r':
    case '\n':
    case ' ':
      break;
 8000e94:	e139      	b.n	800110a <jsmn_parse+0x2b6>
    switch (c) {
 8000e96:	2b20      	cmp	r3, #32
 8000e98:	f000 8137 	beq.w	800110a <jsmn_parse+0x2b6>
 8000e9c:	2b22      	cmp	r3, #34	; 0x22
 8000e9e:	f000 80a1 	beq.w	8000fe4 <jsmn_parse+0x190>
 8000ea2:	e110      	b.n	80010c6 <jsmn_parse+0x272>
 8000ea4:	2b5d      	cmp	r3, #93	; 0x5d
 8000ea6:	d043      	beq.n	8000f30 <jsmn_parse+0xdc>
 8000ea8:	2b5d      	cmp	r3, #93	; 0x5d
 8000eaa:	dc05      	bgt.n	8000eb8 <jsmn_parse+0x64>
 8000eac:	2b3a      	cmp	r3, #58	; 0x3a
 8000eae:	f000 80bc 	beq.w	800102a <jsmn_parse+0x1d6>
 8000eb2:	2b5b      	cmp	r3, #91	; 0x5b
 8000eb4:	d005      	beq.n	8000ec2 <jsmn_parse+0x6e>
 8000eb6:	e106      	b.n	80010c6 <jsmn_parse+0x272>
 8000eb8:	2b7b      	cmp	r3, #123	; 0x7b
 8000eba:	d002      	beq.n	8000ec2 <jsmn_parse+0x6e>
 8000ebc:	2b7d      	cmp	r3, #125	; 0x7d
 8000ebe:	d037      	beq.n	8000f30 <jsmn_parse+0xdc>
 8000ec0:	e101      	b.n	80010c6 <jsmn_parse+0x272>
      count++;
 8000ec2:	6a3b      	ldr	r3, [r7, #32]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 811f 	beq.w	800110e <jsmn_parse+0x2ba>
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ed2:	6839      	ldr	r1, [r7, #0]
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f7ff fd8f 	bl	80009f8 <jsmn_alloc_token>
 8000eda:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <jsmn_parse+0x94>
        return JSMN_ERROR_NOMEM;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	e14f      	b.n	8001188 <jsmn_parse+0x334>
      if (parser->toksuper != -1) {
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d00a      	beq.n	8000f08 <jsmn_parse+0xb4>
        jsmntok_t *t = &tokens[parser->toksuper];
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        t->size++;
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	1c5a      	adds	r2, r3, #1
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	60da      	str	r2, [r3, #12]
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8000f08:	7ffb      	ldrb	r3, [r7, #31]
 8000f0a:	2b7b      	cmp	r3, #123	; 0x7b
 8000f0c:	d101      	bne.n	8000f12 <jsmn_parse+0xbe>
 8000f0e:	2201      	movs	r2, #1
 8000f10:	e000      	b.n	8000f14 <jsmn_parse+0xc0>
 8000f12:	2202      	movs	r2, #2
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	461a      	mov	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	609a      	str	r2, [r3, #8]
      break;
 8000f2e:	e0f7      	b.n	8001120 <jsmn_parse+0x2cc>
      if (tokens == NULL) {
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 80ed 	beq.w	8001112 <jsmn_parse+0x2be>
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8000f38:	7ffb      	ldrb	r3, [r7, #31]
 8000f3a:	2b7d      	cmp	r3, #125	; 0x7d
 8000f3c:	d101      	bne.n	8000f42 <jsmn_parse+0xee>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <jsmn_parse+0xf0>
 8000f42:	2302      	movs	r3, #2
 8000f44:	77bb      	strb	r3, [r7, #30]
      for (i = parser->toknext - 1; i >= 0; i--) {
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f4e:	e024      	b.n	8000f9a <jsmn_parse+0x146>
        token = &tokens[i];
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	011b      	lsls	r3, r3, #4
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f62:	d017      	beq.n	8000f94 <jsmn_parse+0x140>
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6c:	d112      	bne.n	8000f94 <jsmn_parse+0x140>
          if (token->type != type) {
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	7fba      	ldrb	r2, [r7, #30]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d002      	beq.n	8000f7e <jsmn_parse+0x12a>
            return JSMN_ERROR_INVAL;
 8000f78:	f06f 0301 	mvn.w	r3, #1
 8000f7c:	e104      	b.n	8001188 <jsmn_parse+0x334>
          parser->toksuper = -1;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	609a      	str	r2, [r3, #8]
          break;
 8000f92:	e005      	b.n	8000fa0 <jsmn_parse+0x14c>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8000f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f96:	3b01      	subs	r3, #1
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	dad7      	bge.n	8000f50 <jsmn_parse+0xfc>
      if (i == -1) {
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa6:	d119      	bne.n	8000fdc <jsmn_parse+0x188>
        return JSMN_ERROR_INVAL;
 8000fa8:	f06f 0301 	mvn.w	r3, #1
 8000fac:	e0ec      	b.n	8001188 <jsmn_parse+0x334>
        token = &tokens[i];
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	011b      	lsls	r3, r3, #4
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d009      	beq.n	8000fd6 <jsmn_parse+0x182>
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fca:	d104      	bne.n	8000fd6 <jsmn_parse+0x182>
          parser->toksuper = i;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd0:	609a      	str	r2, [r3, #8]
          break;
 8000fd2:	bf00      	nop
      break;
 8000fd4:	e0a4      	b.n	8001120 <jsmn_parse+0x2cc>
      for (; i >= 0; i--) {
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	dae5      	bge.n	8000fae <jsmn_parse+0x15a>
      break;
 8000fe2:	e09d      	b.n	8001120 <jsmn_parse+0x2cc>
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8000fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f7ff fdbc 	bl	8000b6c <jsmn_parse_string>
 8000ff4:	6178      	str	r0, [r7, #20]
      if (r < 0) {
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	da01      	bge.n	8001000 <jsmn_parse+0x1ac>
        return r;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	e0c3      	b.n	8001188 <jsmn_parse+0x334>
      count++;
 8001000:	6a3b      	ldr	r3, [r7, #32]
 8001002:	3301      	adds	r3, #1
 8001004:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100e:	f000 8082 	beq.w	8001116 <jsmn_parse+0x2c2>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d07e      	beq.n	8001116 <jsmn_parse+0x2c2>
        tokens[parser->toksuper].size++;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	4413      	add	r3, r2
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	3201      	adds	r2, #1
 8001026:	60da      	str	r2, [r3, #12]
      break;
 8001028:	e075      	b.n	8001116 <jsmn_parse+0x2c2>
    case ':':
      parser->toksuper = parser->toknext - 1;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	461a      	mov	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	609a      	str	r2, [r3, #8]
      break;
 8001036:	e073      	b.n	8001120 <jsmn_parse+0x2cc>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d06d      	beq.n	800111a <jsmn_parse+0x2c6>
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001046:	d068      	beq.n	800111a <jsmn_parse+0x2c6>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	4413      	add	r3, r2
 8001052:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8001054:	2b02      	cmp	r3, #2
 8001056:	d060      	beq.n	800111a <jsmn_parse+0x2c6>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	011b      	lsls	r3, r3, #4
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8001064:	2b01      	cmp	r3, #1
 8001066:	d058      	beq.n	800111a <jsmn_parse+0x2c6>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	3b01      	subs	r3, #1
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
 8001070:	e025      	b.n	80010be <jsmn_parse+0x26a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	4413      	add	r3, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d006      	beq.n	800108e <jsmn_parse+0x23a>
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d114      	bne.n	80010b8 <jsmn_parse+0x264>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	4413      	add	r3, r2
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d00c      	beq.n	80010b8 <jsmn_parse+0x264>
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d104      	bne.n	80010b8 <jsmn_parse+0x264>
              parser->toksuper = i;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b2:	609a      	str	r2, [r3, #8]
              break;
 80010b4:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 80010b6:	e030      	b.n	800111a <jsmn_parse+0x2c6>
        for (i = parser->toknext - 1; i >= 0; i--) {
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	3b01      	subs	r3, #1
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	dad6      	bge.n	8001072 <jsmn_parse+0x21e>
      break;
 80010c4:	e029      	b.n	800111a <jsmn_parse+0x2c6>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 80010c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f7ff fcd3 	bl	8000a7c <jsmn_parse_primitive>
 80010d6:	6178      	str	r0, [r7, #20]
      if (r < 0) {
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	da01      	bge.n	80010e2 <jsmn_parse+0x28e>
        return r;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	e052      	b.n	8001188 <jsmn_parse+0x334>
      }
      count++;
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	3301      	adds	r3, #1
 80010e6:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d015      	beq.n	800111e <jsmn_parse+0x2ca>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d012      	beq.n	800111e <jsmn_parse+0x2ca>
        tokens[parser->toksuper].size++;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	4413      	add	r3, r2
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	3201      	adds	r2, #1
 8001106:	60da      	str	r2, [r3, #12]
      }
      break;
 8001108:	e009      	b.n	800111e <jsmn_parse+0x2ca>
      break;
 800110a:	bf00      	nop
 800110c:	e008      	b.n	8001120 <jsmn_parse+0x2cc>
        break;
 800110e:	bf00      	nop
 8001110:	e006      	b.n	8001120 <jsmn_parse+0x2cc>
        break;
 8001112:	bf00      	nop
 8001114:	e004      	b.n	8001120 <jsmn_parse+0x2cc>
      break;
 8001116:	bf00      	nop
 8001118:	e002      	b.n	8001120 <jsmn_parse+0x2cc>
      break;
 800111a:	bf00      	nop
 800111c:	e000      	b.n	8001120 <jsmn_parse+0x2cc>
      break;
 800111e:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	d207      	bcs.n	8001144 <jsmn_parse+0x2f0>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68ba      	ldr	r2, [r7, #8]
 800113a:	4413      	add	r3, r2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	f47f ae93 	bne.w	8000e6a <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d01d      	beq.n	8001186 <jsmn_parse+0x332>
    for (i = parser->toknext - 1; i >= 0; i--) {
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
 8001152:	e015      	b.n	8001180 <jsmn_parse+0x32c>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	4413      	add	r3, r2
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001162:	d00a      	beq.n	800117a <jsmn_parse+0x326>
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	4413      	add	r3, r2
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001172:	d102      	bne.n	800117a <jsmn_parse+0x326>
        return JSMN_ERROR_PART;
 8001174:	f06f 0302 	mvn.w	r3, #2
 8001178:	e006      	b.n	8001188 <jsmn_parse+0x334>
    for (i = parser->toknext - 1; i >= 0; i--) {
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	3b01      	subs	r3, #1
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	2b00      	cmp	r3, #0
 8001184:	dae6      	bge.n	8001154 <jsmn_parse+0x300>
      }
    }
  }

  return count;
 8001186:	6a3b      	ldr	r3, [r7, #32]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f04f 32ff 	mov.w	r2, #4294967295
 80011aa:	609a      	str	r2, [r3, #8]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <jsoneq>:
#include "jsmn.h"

#include <string.h>
#include <stdlib.h>

static int jsoneq(const char* json, jsmntok_t* tok, const char* s) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d11e      	bne.n	800120a <jsoneq+0x52>
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7fe ffff 	bl	80001d0 <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4619      	mov	r1, r3
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	4299      	cmp	r1, r3
 80011e2:	d112      	bne.n	800120a <jsoneq+0x52>
		strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	461a      	mov	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1898      	adds	r0, r3, r2
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	f007 f8ec 	bl	80083d8 <strncmp>
 8001200:	4603      	mov	r3, r0
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <jsoneq+0x52>
		return 0;
 8001206:	2300      	movs	r3, #0
 8001208:	e001      	b.n	800120e <jsoneq+0x56>
	}
	return -1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <json_get_op>:

int json_get_op(const char* input, struct OP* out, struct OP_ROOT* root, struct TM* time)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	f6ad 0d64 	subw	sp, sp, #2148	; 0x864
 800121e:	af02      	add	r7, sp, #8
 8001220:	f107 040c 	add.w	r4, r7, #12
 8001224:	6020      	str	r0, [r4, #0]
 8001226:	f107 0008 	add.w	r0, r7, #8
 800122a:	6001      	str	r1, [r0, #0]
 800122c:	1d39      	adds	r1, r7, #4
 800122e:	600a      	str	r2, [r1, #0]
 8001230:	463a      	mov	r2, r7
 8001232:	6013      	str	r3, [r2, #0]
	int counter = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
	int tm_counter = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
	int root_counter = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
	int i;
	int r;
	jsmn_parser p;
	jsmntok_t t[128];

	jsmn_init(&p);
 8001246:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ffa0 	bl	8001190 <jsmn_init>
	r = jsmn_parse(&p, input, strlen(input), t, sizeof(t) / sizeof(t[0]));
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	f7fe ffbb 	bl	80001d0 <strlen>
 800125a:	4604      	mov	r4, r0
 800125c:	f107 0218 	add.w	r2, r7, #24
 8001260:	f107 010c 	add.w	r1, r7, #12
 8001264:	f607 0018 	addw	r0, r7, #2072	; 0x818
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	4613      	mov	r3, r2
 800126e:	4622      	mov	r2, r4
 8001270:	6809      	ldr	r1, [r1, #0]
 8001272:	f7ff fdef 	bl	8000e54 <jsmn_parse>
 8001276:	f8c7 0834 	str.w	r0, [r7, #2100]	; 0x834

	if (r < 1 || t[0].type != JSMN_OBJECT)
 800127a:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 800127e:	2b00      	cmp	r3, #0
 8001280:	dd04      	ble.n	800128c <json_get_op+0x74>
 8001282:	f107 0318 	add.w	r3, r7, #24
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d001      	beq.n	8001290 <json_get_op+0x78>
	{
		return 0;
 800128c:	2300      	movs	r3, #0
 800128e:	e3ad      	b.n	80019ec <json_get_op+0x7d4>
	}

	for (i = 1; i < r; i++) {
 8001290:	2301      	movs	r3, #1
 8001292:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 8001296:	e3a0      	b.n	80019da <json_get_op+0x7c2>

		if (jsoneq(input, &t[i], "OUT") == 0)
 8001298:	f107 0218 	add.w	r2, r7, #24
 800129c:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	18d1      	adds	r1, r2, r3
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4ab2      	ldr	r2, [pc, #712]	; (8001574 <json_get_op+0x35c>)
 80012aa:	6818      	ldr	r0, [r3, #0]
 80012ac:	f7ff ff84 	bl	80011b8 <jsoneq>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d105      	bne.n	80012c2 <json_get_op+0xaa>
		{
			i++;
 80012b6:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 80012ba:	3301      	adds	r3, #1
 80012bc:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 80012c0:	e386      	b.n	80019d0 <json_get_op+0x7b8>
		}

		else if (jsoneq(input, &t[i], "brch") == 0)
 80012c2:	f107 0218 	add.w	r2, r7, #24
 80012c6:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	18d1      	adds	r1, r2, r3
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	4aa9      	ldr	r2, [pc, #676]	; (8001578 <json_get_op+0x360>)
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	f7ff ff6f 	bl	80011b8 <jsoneq>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f040 8254 	bne.w	800178a <json_get_op+0x572>
		{
			if (t[i + 1].type != JSMN_ARRAY)
 80012e2:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 80012e6:	3301      	adds	r3, #1
 80012e8:	f107 0218 	add.w	r2, r7, #24
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	4413      	add	r3, r2
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	f040 8369 	bne.w	80019ca <json_get_op+0x7b2>
			{
				continue;
			}

			int j = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
			for (j; j < t[i + 1].size; ++j)
 80012fe:	e222      	b.n	8001746 <json_get_op+0x52e>
			{
				jsmntok_t* g = &t[i + j + 2];
 8001300:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8001304:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8001308:	4413      	add	r3, r2
 800130a:	3302      	adds	r3, #2
 800130c:	f107 0218 	add.w	r2, r7, #24
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	4413      	add	r3, r2
 8001314:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830

				char* p_stt = (char*)input + g->start + 1;
 8001318:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	3301      	adds	r3, #1
 8001320:	f107 020c 	add.w	r2, r7, #12
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	4413      	add	r3, r2
 8001328:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
				char* p_end = NULL;
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]

				memcpy(root[j].name, p_stt, 3);
 8001334:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	461a      	mov	r2, r3
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	330a      	adds	r3, #10
 800134a:	2203      	movs	r2, #3
 800134c:	f8d7 182c 	ldr.w	r1, [r7, #2092]	; 0x82c
 8001350:	4618      	mov	r0, r3
 8001352:	f006 fff4 	bl	800833e <memcpy>
				root[j].name[3] = 0; // manually null terminated
 8001356:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	461a      	mov	r2, r3
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4413      	add	r3, r2
 800136a:	2200      	movs	r2, #0
 800136c:	735a      	strb	r2, [r3, #13]
				root[j].id = j;
 800136e:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	461a      	mov	r2, r3
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4413      	add	r3, r2
 8001382:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	73da      	strb	r2, [r3, #15]

				if (root[j].name[0] == 'i') //ino
 800138a:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	461a      	mov	r2, r3
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4413      	add	r3, r2
 800139e:	7a9b      	ldrb	r3, [r3, #10]
 80013a0:	2b69      	cmp	r3, #105	; 0x69
 80013a2:	d12f      	bne.n	8001404 <json_get_op+0x1ec>
				{
					root[j].type = INO;
 80013a4:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	461a      	mov	r2, r3
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	2206      	movs	r2, #6
 80013ba:	701a      	strb	r2, [r3, #0]
					root[j].operation = NULL;
 80013bc:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	461a      	mov	r2, r3
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
					root[j].operation_n = strtol(p_stt + 4, NULL, 10) + 200; //save inp to op number
 80013d4:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	461a      	mov	r2, r3
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	189c      	adds	r4, r3, r2
 80013e8:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80013ec:	3304      	adds	r3, #4
 80013ee:	220a      	movs	r2, #10
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f007 f8b0 	bl	8008558 <strtol>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	33c8      	adds	r3, #200	; 0xc8
 80013fe:	b29b      	uxth	r3, r3
 8001400:	8123      	strh	r3, [r4, #8]
					continue;
 8001402:	e19b      	b.n	800173c <json_get_op+0x524>
				}

				if (root[j].name[0] == 'g') //telegram
 8001404:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	461a      	mov	r2, r3
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	7a9b      	ldrb	r3, [r3, #10]
 800141a:	2b67      	cmp	r3, #103	; 0x67
 800141c:	d130      	bne.n	8001480 <json_get_op+0x268>
				{
					root[j].type = TLGRM;
 800141e:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	461a      	mov	r2, r3
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4413      	add	r3, r2
 8001432:	2207      	movs	r2, #7
 8001434:	701a      	strb	r2, [r3, #0]
					root[j].operation = NULL;
 8001436:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	461a      	mov	r2, r3
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4413      	add	r3, r2
 800144a:	2200      	movs	r2, #0
 800144c:	605a      	str	r2, [r3, #4]
					root[j].operation_n = strtol(p_stt + 4, NULL, 10) + 600;
 800144e:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	461a      	mov	r2, r3
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	189c      	adds	r4, r3, r2
 8001462:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8001466:	3304      	adds	r3, #4
 8001468:	220a      	movs	r2, #10
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f007 f873 	bl	8008558 <strtol>
 8001472:	4603      	mov	r3, r0
 8001474:	b29b      	uxth	r3, r3
 8001476:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800147a:	b29b      	uxth	r3, r3
 800147c:	8123      	strh	r3, [r4, #8]
					continue;
 800147e:	e15d      	b.n	800173c <json_get_op+0x524>
				}

				if (root[j].name[0] == 'p') //pmo
 8001480:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	461a      	mov	r2, r3
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4413      	add	r3, r2
 8001494:	7a9b      	ldrb	r3, [r3, #10]
 8001496:	2b70      	cmp	r3, #112	; 0x70
 8001498:	d130      	bne.n	80014fc <json_get_op+0x2e4>
				{
					root[j].type = PMO;
 800149a:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	461a      	mov	r2, r3
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4413      	add	r3, r2
 80014ae:	2205      	movs	r2, #5
 80014b0:	701a      	strb	r2, [r3, #0]
					root[j].operation = NULL;
 80014b2:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	461a      	mov	r2, r3
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
					root[j].operation_n = strtol(p_stt + 4, NULL, 10) + 800;
 80014ca:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	461a      	mov	r2, r3
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	189c      	adds	r4, r3, r2
 80014de:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80014e2:	3304      	adds	r3, #4
 80014e4:	220a      	movs	r2, #10
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f007 f835 	bl	8008558 <strtol>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	8123      	strh	r3, [r4, #8]
					continue;
 80014fa:	e11f      	b.n	800173c <json_get_op+0x524>
				}

				if (root[j].name[0] == 'w') //week
 80014fc:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	461a      	mov	r2, r3
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	7a9b      	ldrb	r3, [r3, #10]
 8001512:	2b77      	cmp	r3, #119	; 0x77
 8001514:	d132      	bne.n	800157c <json_get_op+0x364>
				{
					root[j].type = WEEK;
 8001516:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	461a      	mov	r2, r3
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4413      	add	r3, r2
 800152a:	2204      	movs	r2, #4
 800152c:	701a      	strb	r2, [r3, #0]
					root[j].operation = NULL;
 800152e:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	461a      	mov	r2, r3
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4413      	add	r3, r2
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]
					root[j].operation_n = strtol(p_stt + 4, NULL, 16); //save value to op number
 8001546:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	461a      	mov	r2, r3
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	189c      	adds	r4, r3, r2
 800155a:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 800155e:	3304      	adds	r3, #4
 8001560:	2210      	movs	r2, #16
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f006 fff7 	bl	8008558 <strtol>
 800156a:	4603      	mov	r3, r0
 800156c:	b29b      	uxth	r3, r3
 800156e:	8123      	strh	r3, [r4, #8]
					continue;
 8001570:	e0e4      	b.n	800173c <json_get_op+0x524>
 8001572:	bf00      	nop
 8001574:	08009ca4 	.word	0x08009ca4
 8001578:	08009ca8 	.word	0x08009ca8
				}

				if (root[j].name[0] == 't') //time
 800157c:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	461a      	mov	r2, r3
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	7a9b      	ldrb	r3, [r3, #10]
 8001592:	2b74      	cmp	r3, #116	; 0x74
 8001594:	f040 8089 	bne.w	80016aa <json_get_op+0x492>
				{
					root[j].type = TIME;
 8001598:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	461a      	mov	r2, r3
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	2203      	movs	r2, #3
 80015ae:	701a      	strb	r2, [r3, #0]

					time[tm_counter].from.tm_hour = strtol(p_stt + 4, &p_end, 10);
 80015b0:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	461a      	mov	r2, r3
 80015be:	463b      	mov	r3, r7
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	189c      	adds	r4, r3, r2
 80015c4:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80015c8:	3304      	adds	r3, #4
 80015ca:	f107 0114 	add.w	r1, r7, #20
 80015ce:	220a      	movs	r2, #10
 80015d0:	4618      	mov	r0, r3
 80015d2:	f006 ffc1 	bl	8008558 <strtol>
 80015d6:	4603      	mov	r3, r0
 80015d8:	60a3      	str	r3, [r4, #8]
					time[tm_counter].from.tm_min =  strtol(p_end + 1, &p_end, 10);
 80015da:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 80015de:	4613      	mov	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	461a      	mov	r2, r3
 80015e8:	463b      	mov	r3, r7
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	189c      	adds	r4, r3, r2
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	f107 0114 	add.w	r1, r7, #20
 80015fa:	220a      	movs	r2, #10
 80015fc:	4618      	mov	r0, r3
 80015fe:	f006 ffab 	bl	8008558 <strtol>
 8001602:	4603      	mov	r3, r0
 8001604:	6063      	str	r3, [r4, #4]

					time[tm_counter].to.tm_hour = strtol(p_end + 1, &p_end, 10);
 8001606:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	461a      	mov	r2, r3
 8001614:	463b      	mov	r3, r7
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	189c      	adds	r4, r3, r2
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	f107 0114 	add.w	r1, r7, #20
 8001626:	220a      	movs	r2, #10
 8001628:	4618      	mov	r0, r3
 800162a:	f006 ff95 	bl	8008558 <strtol>
 800162e:	4603      	mov	r3, r0
 8001630:	62e3      	str	r3, [r4, #44]	; 0x2c
					time[tm_counter].to.tm_min =  strtol(p_end + 1, NULL, 10);
 8001632:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	461a      	mov	r2, r3
 8001640:	463b      	mov	r3, r7
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	189c      	adds	r4, r3, r2
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	220a      	movs	r2, #10
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f006 ff80 	bl	8008558 <strtol>
 8001658:	4603      	mov	r3, r0
 800165a:	62a3      	str	r3, [r4, #40]	; 0x28

					root[j].operation = time + tm_counter;
 800165c:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	461a      	mov	r2, r3
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	1899      	adds	r1, r3, r2
 8001670:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 8001674:	4613      	mov	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4413      	add	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	461a      	mov	r2, r3
 800167e:	463b      	mov	r3, r7
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
					root[j].operation_n = 0;
 8001686:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	461a      	mov	r2, r3
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4413      	add	r3, r2
 800169a:	2200      	movs	r2, #0
 800169c:	811a      	strh	r2, [r3, #8]

					tm_counter++;
 800169e:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80016a2:	3301      	adds	r3, #1
 80016a4:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
					continue;
 80016a8:	e048      	b.n	800173c <json_get_op+0x524>
				}

				if (root[j].name[0] == 's' || root[j].name[0] == 'o') // state or out
 80016aa:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	461a      	mov	r2, r3
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	7a9b      	ldrb	r3, [r3, #10]
 80016c0:	2b73      	cmp	r3, #115	; 0x73
 80016c2:	d00c      	beq.n	80016de <json_get_op+0x4c6>
 80016c4:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	461a      	mov	r2, r3
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	7a9b      	ldrb	r3, [r3, #10]
 80016da:	2b6f      	cmp	r3, #111	; 0x6f
 80016dc:	d12e      	bne.n	800173c <json_get_op+0x524>
				{
					root[j].type = BRCH;
 80016de:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	461a      	mov	r2, r3
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4413      	add	r3, r2
 80016f2:	2202      	movs	r2, #2
 80016f4:	701a      	strb	r2, [r3, #0]
					root[j].operation = NULL;
 80016f6:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	461a      	mov	r2, r3
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4413      	add	r3, r2
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
					root[j].operation_n = strtol(p_stt + 4, &p_end, 10);
 800170e:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	461a      	mov	r2, r3
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	189c      	adds	r4, r3, r2
 8001722:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8001726:	3304      	adds	r3, #4
 8001728:	f107 0114 	add.w	r1, r7, #20
 800172c:	220a      	movs	r2, #10
 800172e:	4618      	mov	r0, r3
 8001730:	f006 ff12 	bl	8008558 <strtol>
 8001734:	4603      	mov	r3, r0
 8001736:	b29b      	uxth	r3, r3
 8001738:	8123      	strh	r3, [r4, #8]
					continue;
 800173a:	bf00      	nop
			for (j; j < t[i + 1].size; ++j)
 800173c:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8001740:	3301      	adds	r3, #1
 8001742:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 8001746:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 800174a:	3301      	adds	r3, #1
 800174c:	f107 0218 	add.w	r2, r7, #24
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	4413      	add	r3, r2
 8001754:	330c      	adds	r3, #12
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 800175c:	429a      	cmp	r2, r3
 800175e:	f73f adcf 	bgt.w	8001300 <json_get_op+0xe8>
				}
			}
			root_counter = j;
 8001762:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8001766:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
			i += t[i + 1].size + 1;
 800176a:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 800176e:	3301      	adds	r3, #1
 8001770:	f107 0218 	add.w	r2, r7, #24
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4413      	add	r3, r2
 8001778:	330c      	adds	r3, #12
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8001782:	4413      	add	r3, r2
 8001784:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 8001788:	e122      	b.n	80019d0 <json_get_op+0x7b8>
//			return 1;
//		}

		else
		{
			if (t[i + 1].type != JSMN_ARRAY)
 800178a:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 800178e:	3301      	adds	r3, #1
 8001790:	f107 0218 	add.w	r2, r7, #24
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	4413      	add	r3, r2
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b02      	cmp	r3, #2
 800179c:	f040 8117 	bne.w	80019ce <json_get_op+0x7b6>
			{
				continue;
			}

			for (int j = 0; j < t[i + 1].size; j++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
 80017a6:	e0f2      	b.n	800198e <json_get_op+0x776>
			{
				jsmntok_t* g = &t[i + j + 2];
 80017a8:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 80017ac:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 80017b0:	4413      	add	r3, r2
 80017b2:	3302      	adds	r3, #2
 80017b4:	f107 0218 	add.w	r2, r7, #24
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	4413      	add	r3, r2
 80017bc:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
				char* p_stt = (char*)input + g->start + 1;
 80017c0:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	3301      	adds	r3, #1
 80017c8:	f107 020c 	add.w	r2, r7, #12
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
				char* p_end = NULL;
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
				int root_id = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c

				for (int r = 0; r < root_counter; ++r)
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
 80017e8:	e026      	b.n	8001838 <json_get_op+0x620>
				{
					if (memcmp(p_stt, root[r].name, 3) == 0)
 80017ea:	f8d7 2838 	ldr.w	r2, [r7, #2104]	; 0x838
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	461a      	mov	r2, r3
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	330a      	adds	r3, #10
 8001800:	2203      	movs	r2, #3
 8001802:	4619      	mov	r1, r3
 8001804:	f8d7 0824 	ldr.w	r0, [r7, #2084]	; 0x824
 8001808:	f006 fd8a 	bl	8008320 <memcmp>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10d      	bne.n	800182e <json_get_op+0x616>
					{
						root_id = root[r].id;
 8001812:	f8d7 2838 	ldr.w	r2, [r7, #2104]	; 0x838
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	461a      	mov	r2, r3
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4413      	add	r3, r2
 8001826:	7bdb      	ldrb	r3, [r3, #15]
 8001828:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
						break;
 800182c:	e00a      	b.n	8001844 <json_get_op+0x62c>
				for (int r = 0; r < root_counter; ++r)
 800182e:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8001832:	3301      	adds	r3, #1
 8001834:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
 8001838:	f8d7 2838 	ldr.w	r2, [r7, #2104]	; 0x838
 800183c:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8001840:	429a      	cmp	r2, r3
 8001842:	dbd2      	blt.n	80017ea <json_get_op+0x5d2>
					}
				}

				if (root_id > 0)
 8001844:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001848:	2b00      	cmp	r3, #0
 800184a:	dd44      	ble.n	80018d6 <json_get_op+0x6be>
				{
					out[counter].addr = 0;
 800184c:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	461a      	mov	r2, r3
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4413      	add	r3, r2
 8001862:	2200      	movs	r2, #0
 8001864:	801a      	strh	r2, [r3, #0]
					out[counter].log = (enum LG)strtol(p_stt + 5, NULL, 10);
 8001866:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	461a      	mov	r2, r3
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	189c      	adds	r4, r3, r2
 800187c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8001880:	3305      	adds	r3, #5
 8001882:	220a      	movs	r2, #10
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f006 fe66 	bl	8008558 <strtol>
 800188c:	4603      	mov	r3, r0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	7223      	strb	r3, [r4, #8]
					out[counter].root_id = root_id;
 8001892:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	461a      	mov	r2, r3
 80018a0:	f107 0308 	add.w	r3, r7, #8
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	f8d7 283c 	ldr.w	r2, [r7, #2108]	; 0x83c
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	729a      	strb	r2, [r3, #10]
					out[counter].type = STATE;
 80018b0:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	461a      	mov	r2, r3
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	2203      	movs	r2, #3
 80018c8:	725a      	strb	r2, [r3, #9]

					counter++;
 80018ca:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 80018ce:	3301      	adds	r3, #1
 80018d0:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 80018d4:	e056      	b.n	8001984 <json_get_op+0x76c>
					continue;
				}

				out[counter].addr = strtol(p_stt, &p_end, 16); //10
 80018d6:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	461a      	mov	r2, r3
 80018e4:	f107 0308 	add.w	r3, r7, #8
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	189c      	adds	r4, r3, r2
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	2210      	movs	r2, #16
 80018f2:	4619      	mov	r1, r3
 80018f4:	f8d7 0824 	ldr.w	r0, [r7, #2084]	; 0x824
 80018f8:	f006 fe2e 	bl	8008558 <strtol>
 80018fc:	4603      	mov	r3, r0
 80018fe:	b29b      	uxth	r3, r3
 8001900:	8023      	strh	r3, [r4, #0]
				out[counter].log = (enum LG)strtol(p_end + 1, &p_end, 10);
 8001902:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	461a      	mov	r2, r3
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	189c      	adds	r4, r3, r2
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	f107 0110 	add.w	r1, r7, #16
 8001924:	220a      	movs	r2, #10
 8001926:	4618      	mov	r0, r3
 8001928:	f006 fe16 	bl	8008558 <strtol>
 800192c:	4603      	mov	r3, r0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	7223      	strb	r3, [r4, #8]
				out[counter].trigger_value = strtol(p_end + 1, &p_end, 10);
 8001932:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	461a      	mov	r2, r3
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	189c      	adds	r4, r3, r2
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	f107 0110 	add.w	r1, r7, #16
 8001954:	220a      	movs	r2, #10
 8001956:	4618      	mov	r0, r3
 8001958:	f006 fdfe 	bl	8008558 <strtol>
 800195c:	4603      	mov	r3, r0
 800195e:	6063      	str	r3, [r4, #4]
				out[counter].type = DATA;
 8001960:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	461a      	mov	r2, r3
 800196e:	f107 0308 	add.w	r3, r7, #8
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4413      	add	r3, r2
 8001976:	2202      	movs	r2, #2
 8001978:	725a      	strb	r2, [r3, #9]

				counter++;
 800197a:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 800197e:	3301      	adds	r3, #1
 8001980:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
			for (int j = 0; j < t[i + 1].size; j++)
 8001984:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8001988:	3301      	adds	r3, #1
 800198a:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
 800198e:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8001992:	3301      	adds	r3, #1
 8001994:	f107 0218 	add.w	r2, r7, #24
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	4413      	add	r3, r2
 800199c:	330c      	adds	r3, #12
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f73f aeff 	bgt.w	80017a8 <json_get_op+0x590>
			}
			i += t[i + 1].size + 1;
 80019aa:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 80019ae:	3301      	adds	r3, #1
 80019b0:	f107 0218 	add.w	r2, r7, #24
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	4413      	add	r3, r2
 80019b8:	330c      	adds	r3, #12
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 80019c2:	4413      	add	r3, r2
 80019c4:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 80019c8:	e002      	b.n	80019d0 <json_get_op+0x7b8>
				continue;
 80019ca:	bf00      	nop
 80019cc:	e000      	b.n	80019d0 <json_get_op+0x7b8>
				continue;
 80019ce:	bf00      	nop
	for (i = 1; i < r; i++) {
 80019d0:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 80019d4:	3301      	adds	r3, #1
 80019d6:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 80019da:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 80019de:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80019e2:	429a      	cmp	r2, r3
 80019e4:	f6ff ac58 	blt.w	8001298 <json_get_op+0x80>
		}
	}

	return root_counter;
 80019e8:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	f607 075c 	addw	r7, r7, #2140	; 0x85c
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd90      	pop	{r4, r7, pc}
 80019f6:	bf00      	nop

080019f8 <Telegram_GetValue>:
{

}

uint8_t Telegram_GetValue(uint16_t key)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < TG_MAX; ++i) {
 8001a02:	2300      	movs	r3, #0
 8001a04:	81fb      	strh	r3, [r7, #14]
 8001a06:	e00f      	b.n	8001a28 <Telegram_GetValue+0x30>
		if (tg[i].key == key) {
 8001a08:	89fb      	ldrh	r3, [r7, #14]
 8001a0a:	4a0c      	ldr	r2, [pc, #48]	; (8001a3c <Telegram_GetValue+0x44>)
 8001a0c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001a10:	88fa      	ldrh	r2, [r7, #6]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d105      	bne.n	8001a22 <Telegram_GetValue+0x2a>
			return tg[i].value;
 8001a16:	89fb      	ldrh	r3, [r7, #14]
 8001a18:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <Telegram_GetValue+0x44>)
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	789b      	ldrb	r3, [r3, #2]
 8001a20:	e006      	b.n	8001a30 <Telegram_GetValue+0x38>
	for(uint16_t i = 0; i < TG_MAX; ++i) {
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	3301      	adds	r3, #1
 8001a26:	81fb      	strh	r3, [r7, #14]
 8001a28:	89fb      	ldrh	r3, [r7, #14]
 8001a2a:	2bff      	cmp	r3, #255	; 0xff
 8001a2c:	d9ec      	bls.n	8001a08 <Telegram_GetValue+0x10>
		}
	}
	return 0;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	20000244 	.word	0x20000244

08001a40 <is_cur_time>:
#include "rtc.h"

#include <time.h>

uint8_t is_cur_time(struct TM* ft)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	; 0x30
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	struct tm time_info = { 0 };
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	2224      	movs	r2, #36	; 0x24
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f006 fc7f 	bl	8008354 <memset>
	RTC_GetTime(&time_info);
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f006 f94e 	bl	8007cfc <RTC_GetTime>

	if (time_info.tm_hour == ft->from.tm_hour &&
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d10b      	bne.n	8001a82 <is_cur_time+0x42>
		time_info.tm_min >= ft->from.tm_min &&
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
	if (time_info.tm_hour == ft->from.tm_hour &&
 8001a70:	429a      	cmp	r2, r3
 8001a72:	db06      	blt.n	8001a82 <is_cur_time+0x42>
		time_info.tm_hour < ft->to.tm_hour)
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		time_info.tm_min >= ft->from.tm_min &&
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	da01      	bge.n	8001a82 <is_cur_time+0x42>
	{
		return 1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e018      	b.n	8001ab4 <is_cur_time+0x74>
	}

	if (time_info.tm_hour > ft->from.tm_hour &&
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dd06      	ble.n	8001a9a <is_cur_time+0x5a>
		time_info.tm_hour < ft->to.tm_hour)
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	if (time_info.tm_hour > ft->from.tm_hour &&
 8001a92:	429a      	cmp	r2, r3
 8001a94:	da01      	bge.n	8001a9a <is_cur_time+0x5a>
	{
		return 1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00c      	b.n	8001ab4 <is_cur_time+0x74>
	}

	if (time_info.tm_hour == ft->to.tm_hour &&
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d106      	bne.n	8001ab2 <is_cur_time+0x72>
		time_info.tm_min <= ft->to.tm_min)
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (time_info.tm_hour == ft->to.tm_hour &&
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	dc01      	bgt.n	8001ab2 <is_cur_time+0x72>
	{
		return 1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <is_cur_time+0x74>
	}

	return 0;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3730      	adds	r7, #48	; 0x30
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <is_cur_day_of_week>:

uint8_t is_cur_day_of_week(uint16_t data)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08c      	sub	sp, #48	; 0x30
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
	struct tm time_info = { 0 };
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2224      	movs	r2, #36	; 0x24
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f006 fc40 	bl	8008354 <memset>
	RTC_GetTime(&time_info);
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f006 f90f 	bl	8007cfc <RTC_GetTime>

	if (data & (1 << time_info.tm_wday))
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	fa42 f303 	asr.w	r3, r2, r3
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <is_cur_day_of_week+0x36>
	{
		return 1;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <is_cur_day_of_week+0x38>
	}
	return 0;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3730      	adds	r7, #48	; 0x30
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <ESP_Init>:
struct ring_buffer_struct UART2_rx_data;
char request[1024];
static f_ptr delay;

void ESP_Init(f_ptr delay_function)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	RingBuffInit(&UART2_rx_data);
 8001b04:	4808      	ldr	r0, [pc, #32]	; (8001b28 <ESP_Init+0x2c>)
 8001b06:	f000 f99b 	bl	8001e40 <RingBuffInit>
	UART2_Init(&UART2_rx_data);
 8001b0a:	4807      	ldr	r0, [pc, #28]	; (8001b28 <ESP_Init+0x2c>)
 8001b0c:	f005 fa7a 	bl	8007004 <UART2_Init>

	UART2_SendData("\r\n", 2);
 8001b10:	2102      	movs	r1, #2
 8001b12:	4806      	ldr	r0, [pc, #24]	; (8001b2c <ESP_Init+0x30>)
 8001b14:	f005 fb06 	bl	8007124 <UART2_SendData>

	delay = delay_function;
 8001b18:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <ESP_Init+0x34>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20008d24 	.word	0x20008d24
 8001b2c:	08009cb0 	.word	0x08009cb0
 8001b30:	20000644 	.word	0x20000644

08001b34 <requestFlush>:
	char test_str[] = "uart2 work\r\n";
	UART2_SendData(test_str, sizeof(test_str));
}

static void requestFlush()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	memset(request, 0, 1024);
 8001b38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4802      	ldr	r0, [pc, #8]	; (8001b48 <requestFlush+0x14>)
 8001b40:	f006 fc08 	bl	8008354 <memset>
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20009d28 	.word	0x20009d28

08001b4c <charCallBack>:

static uint8_t charCallBack(char * key, uint16_t bias)
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
	char * temp = RingBuffGetArray(&UART2_rx_data) + bias;
 8001b58:	4810      	ldr	r0, [pc, #64]	; (8001b9c <charCallBack+0x50>)
 8001b5a:	f000 f9ba 	bl	8001ed2 <RingBuffGetArray>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	887b      	ldrh	r3, [r7, #2]
 8001b62:	4413      	add	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
	if(key != NULL && strlen(temp) >= strlen(key))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d012      	beq.n	8001b92 <charCallBack+0x46>
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f7fe fb2f 	bl	80001d0 <strlen>
 8001b72:	4604      	mov	r4, r0
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7fe fb2b 	bl	80001d0 <strlen>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	429c      	cmp	r4, r3
 8001b7e:	d308      	bcc.n	8001b92 <charCallBack+0x46>
	{
		if(strstr(temp, key) != NULL)
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f006 fc3a 	bl	80083fc <strstr>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <charCallBack+0x46>
		{
			return 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <charCallBack+0x48>
		}
	}

	return 0;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd90      	pop	{r4, r7, pc}
 8001b9c:	20008d24 	.word	0x20008d24

08001ba0 <waitCallBack>:

static uint8_t waitCallBack(char * aim, uint16_t ms)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
	for( ; ms > 0; --ms)
 8001bac:	e012      	b.n	8001bd4 <waitCallBack+0x34>
	{
		if(charCallBack(aim, 0))
 8001bae:	2100      	movs	r1, #0
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ffcb 	bl	8001b4c <charCallBack>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d004      	beq.n	8001bc6 <waitCallBack+0x26>
		{
			RingBuffClear(&UART2_rx_data);
 8001bbc:	480b      	ldr	r0, [pc, #44]	; (8001bec <waitCallBack+0x4c>)
 8001bbe:	f000 f96e 	bl	8001e9e <RingBuffClear>
			return 1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00d      	b.n	8001be2 <waitCallBack+0x42>
		}
		delay(1);
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <waitCallBack+0x50>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2001      	movs	r0, #1
 8001bcc:	4798      	blx	r3
	for( ; ms > 0; --ms)
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	807b      	strh	r3, [r7, #2]
 8001bd4:	887b      	ldrh	r3, [r7, #2]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1e9      	bne.n	8001bae <waitCallBack+0xe>
	}
	RingBuffClear(&UART2_rx_data);
 8001bda:	4804      	ldr	r0, [pc, #16]	; (8001bec <waitCallBack+0x4c>)
 8001bdc:	f000 f95f 	bl	8001e9e <RingBuffClear>
	return 0;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20008d24 	.word	0x20008d24
 8001bf0:	20000644 	.word	0x20000644

08001bf4 <ESP_GetRxData>:

char* ESP_GetRxData()
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	return RingBuffGetArray(&UART2_rx_data);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <ESP_GetRxData+0x10>)
 8001bfa:	f000 f96a 	bl	8001ed2 <RingBuffGetArray>
 8001bfe:	4603      	mov	r3, r0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20008d24 	.word	0x20008d24

08001c08 <ESP_SetMode>:

uint8_t ESP_SetMode(uint8_t mode)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
	requestFlush();
 8001c12:	f7ff ff8f 	bl	8001b34 <requestFlush>
	sprintf(request, "AT+CWMODE=%d\r\n", mode);
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4915      	ldr	r1, [pc, #84]	; (8001c70 <ESP_SetMode+0x68>)
 8001c1c:	4815      	ldr	r0, [pc, #84]	; (8001c74 <ESP_SetMode+0x6c>)
 8001c1e:	f006 fba1 	bl	8008364 <siprintf>
	RingBuffClear(&UART2_rx_data);
 8001c22:	4815      	ldr	r0, [pc, #84]	; (8001c78 <ESP_SetMode+0x70>)
 8001c24:	f000 f93b 	bl	8001e9e <RingBuffClear>
	UART2_SendData(request, strlen(request));
 8001c28:	4812      	ldr	r0, [pc, #72]	; (8001c74 <ESP_SetMode+0x6c>)
 8001c2a:	f7fe fad1 	bl	80001d0 <strlen>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4619      	mov	r1, r3
 8001c32:	4810      	ldr	r0, [pc, #64]	; (8001c74 <ESP_SetMode+0x6c>)
 8001c34:	f005 fa76 	bl	8007124 <UART2_SendData>

	if(waitCallBack("OK", 2000))
 8001c38:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001c3c:	480f      	ldr	r0, [pc, #60]	; (8001c7c <ESP_SetMode+0x74>)
 8001c3e:	f7ff ffaf 	bl	8001ba0 <waitCallBack>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00e      	beq.n	8001c66 <ESP_SetMode+0x5e>
	{
		UART2_SendData("AT+RST\r\n", 8);
 8001c48:	2108      	movs	r1, #8
 8001c4a:	480d      	ldr	r0, [pc, #52]	; (8001c80 <ESP_SetMode+0x78>)
 8001c4c:	f005 fa6a 	bl	8007124 <UART2_SendData>
		if(waitCallBack("ready", 2000))
 8001c50:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001c54:	480b      	ldr	r0, [pc, #44]	; (8001c84 <ESP_SetMode+0x7c>)
 8001c56:	f7ff ffa3 	bl	8001ba0 <waitCallBack>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <ESP_SetMode+0x5c>
		{
			return 1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e001      	b.n	8001c68 <ESP_SetMode+0x60>
		}
		else asm("NOP");
 8001c64:	bf00      	nop
	}

	return 0;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	08009cc4 	.word	0x08009cc4
 8001c74:	20009d28 	.word	0x20009d28
 8001c78:	20008d24 	.word	0x20008d24
 8001c7c:	08009cd4 	.word	0x08009cd4
 8001c80:	08009cd8 	.word	0x08009cd8
 8001c84:	08009ce4 	.word	0x08009ce4

08001c88 <ESP_SetCipmuxZero>:

uint8_t ESP_SetCipmuxZero()
{
 8001c88:	b598      	push	{r3, r4, r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
	requestFlush();
 8001c8c:	f7ff ff52 	bl	8001b34 <requestFlush>
	sprintf(request, "AT+CIPMUX=0\r\n");
 8001c90:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <ESP_SetCipmuxZero+0x4c>)
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <ESP_SetCipmuxZero+0x50>)
 8001c94:	4614      	mov	r4, r2
 8001c96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001c98:	6020      	str	r0, [r4, #0]
 8001c9a:	6061      	str	r1, [r4, #4]
 8001c9c:	60a2      	str	r2, [r4, #8]
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	81a3      	strh	r3, [r4, #12]
	UART2_SendData(request, strlen(request));
 8001ca2:	480c      	ldr	r0, [pc, #48]	; (8001cd4 <ESP_SetCipmuxZero+0x4c>)
 8001ca4:	f7fe fa94 	bl	80001d0 <strlen>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4619      	mov	r1, r3
 8001cac:	4809      	ldr	r0, [pc, #36]	; (8001cd4 <ESP_SetCipmuxZero+0x4c>)
 8001cae:	f005 fa39 	bl	8007124 <UART2_SendData>
	RingBuffClear(&UART2_rx_data);
 8001cb2:	480a      	ldr	r0, [pc, #40]	; (8001cdc <ESP_SetCipmuxZero+0x54>)
 8001cb4:	f000 f8f3 	bl	8001e9e <RingBuffClear>

	if(waitCallBack("OK", 500))
 8001cb8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001cbc:	4808      	ldr	r0, [pc, #32]	; (8001ce0 <ESP_SetCipmuxZero+0x58>)
 8001cbe:	f7ff ff6f 	bl	8001ba0 <waitCallBack>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <ESP_SetCipmuxZero+0x44>
	{
		return 1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <ESP_SetCipmuxZero+0x46>
	}
	return 0;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	bd98      	pop	{r3, r4, r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20009d28 	.word	0x20009d28
 8001cd8:	08009cec 	.word	0x08009cec
 8001cdc:	20008d24 	.word	0x20008d24
 8001ce0:	08009cd4 	.word	0x08009cd4

08001ce4 <ESP_SetParamsSoftAP>:

uint8_t ESP_SetParamsSoftAP(char* ssid, char* password)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
	if(ssid != NULL && password != NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01f      	beq.n	8001d34 <ESP_SetParamsSoftAP+0x50>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01c      	beq.n	8001d34 <ESP_SetParamsSoftAP+0x50>
	{
		requestFlush();
 8001cfa:	f7ff ff1b 	bl	8001b34 <requestFlush>
		sprintf(request, "AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", ssid, password);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	490f      	ldr	r1, [pc, #60]	; (8001d40 <ESP_SetParamsSoftAP+0x5c>)
 8001d04:	480f      	ldr	r0, [pc, #60]	; (8001d44 <ESP_SetParamsSoftAP+0x60>)
 8001d06:	f006 fb2d 	bl	8008364 <siprintf>
		RingBuffClear(&UART2_rx_data);
 8001d0a:	480f      	ldr	r0, [pc, #60]	; (8001d48 <ESP_SetParamsSoftAP+0x64>)
 8001d0c:	f000 f8c7 	bl	8001e9e <RingBuffClear>
		UART2_SendData(request, strlen(request));
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <ESP_SetParamsSoftAP+0x60>)
 8001d12:	f7fe fa5d 	bl	80001d0 <strlen>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4619      	mov	r1, r3
 8001d1a:	480a      	ldr	r0, [pc, #40]	; (8001d44 <ESP_SetParamsSoftAP+0x60>)
 8001d1c:	f005 fa02 	bl	8007124 <UART2_SendData>

		if(waitCallBack("OK", 10000))
 8001d20:	f242 7110 	movw	r1, #10000	; 0x2710
 8001d24:	4809      	ldr	r0, [pc, #36]	; (8001d4c <ESP_SetParamsSoftAP+0x68>)
 8001d26:	f7ff ff3b 	bl	8001ba0 <waitCallBack>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <ESP_SetParamsSoftAP+0x50>
		{
			return 1;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <ESP_SetParamsSoftAP+0x52>
		}
	}
	return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	08009cfc 	.word	0x08009cfc
 8001d44:	20009d28 	.word	0x20009d28
 8001d48:	20008d24 	.word	0x20008d24
 8001d4c:	08009cd4 	.word	0x08009cd4

08001d50 <ESP_SendData>:

	return 0;
}

uint8_t ESP_SendData(const char *url, uint16_t port, const char *data, uint32_t dataLength, uint8_t flagRN)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	817b      	strh	r3, [r7, #10]
	requestFlush();
 8001d60:	f7ff fee8 	bl	8001b34 <requestFlush>
	sprintf(request, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", url, port);
 8001d64:	897b      	ldrh	r3, [r7, #10]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	492d      	ldr	r1, [pc, #180]	; (8001e20 <ESP_SendData+0xd0>)
 8001d6a:	482e      	ldr	r0, [pc, #184]	; (8001e24 <ESP_SendData+0xd4>)
 8001d6c:	f006 fafa 	bl	8008364 <siprintf>
	RingBuffClear(&UART2_rx_data);
 8001d70:	482d      	ldr	r0, [pc, #180]	; (8001e28 <ESP_SendData+0xd8>)
 8001d72:	f000 f894 	bl	8001e9e <RingBuffClear>
	UART2_SendData(request, strlen(request));
 8001d76:	482b      	ldr	r0, [pc, #172]	; (8001e24 <ESP_SendData+0xd4>)
 8001d78:	f7fe fa2a 	bl	80001d0 <strlen>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4828      	ldr	r0, [pc, #160]	; (8001e24 <ESP_SendData+0xd4>)
 8001d82:	f005 f9cf 	bl	8007124 <UART2_SendData>
	delay(1000);
 8001d86:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <ESP_SendData+0xdc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d8e:	4798      	blx	r3

	if(waitCallBack("OK", 1000))
 8001d90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d94:	4826      	ldr	r0, [pc, #152]	; (8001e30 <ESP_SendData+0xe0>)
 8001d96:	f7ff ff03 	bl	8001ba0 <waitCallBack>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d039      	beq.n	8001e14 <ESP_SendData+0xc4>
	{
		requestFlush();
 8001da0:	f7ff fec8 	bl	8001b34 <requestFlush>
		sprintf(request, "AT+CIPSEND=%lu\r\n", dataLength);
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	4923      	ldr	r1, [pc, #140]	; (8001e34 <ESP_SendData+0xe4>)
 8001da8:	481e      	ldr	r0, [pc, #120]	; (8001e24 <ESP_SendData+0xd4>)
 8001daa:	f006 fadb 	bl	8008364 <siprintf>
		RingBuffClear(&UART2_rx_data);
 8001dae:	481e      	ldr	r0, [pc, #120]	; (8001e28 <ESP_SendData+0xd8>)
 8001db0:	f000 f875 	bl	8001e9e <RingBuffClear>
		UART2_SendData(request, strlen(request));
 8001db4:	481b      	ldr	r0, [pc, #108]	; (8001e24 <ESP_SendData+0xd4>)
 8001db6:	f7fe fa0b 	bl	80001d0 <strlen>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4819      	ldr	r0, [pc, #100]	; (8001e24 <ESP_SendData+0xd4>)
 8001dc0:	f005 f9b0 	bl	8007124 <UART2_SendData>
		delay(10);
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <ESP_SendData+0xdc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	200a      	movs	r0, #10
 8001dca:	4798      	blx	r3

		if(waitCallBack(">", 1000) && data != NULL)
 8001dcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dd0:	4819      	ldr	r0, [pc, #100]	; (8001e38 <ESP_SendData+0xe8>)
 8001dd2:	f7ff fee5 	bl	8001ba0 <waitCallBack>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01b      	beq.n	8001e14 <ESP_SendData+0xc4>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d018      	beq.n	8001e14 <ESP_SendData+0xc4>
		{
			for(int i = 0; i < dataLength; i++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e009      	b.n	8001dfc <ESP_SendData+0xac>
			{
				UART2_SendData_byte(data[i]);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f005 f97f 	bl	80070f4 <UART2_SendData_byte>
			for(int i = 0; i < dataLength; i++)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d3f1      	bcc.n	8001de8 <ESP_SendData+0x98>
			}
			if(flagRN)
 8001e04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <ESP_SendData+0xc4>
			{
				UART2_SendData("\r\n", 2);
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	480b      	ldr	r0, [pc, #44]	; (8001e3c <ESP_SendData+0xec>)
 8001e10:	f005 f988 	bl	8007124 <UART2_SendData>
			}
		}
	}

	return 0;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	08009d34 	.word	0x08009d34
 8001e24:	20009d28 	.word	0x20009d28
 8001e28:	20008d24 	.word	0x20008d24
 8001e2c:	20000644 	.word	0x20000644
 8001e30:	08009cd4 	.word	0x08009cd4
 8001e34:	08009d50 	.word	0x08009d50
 8001e38:	08009d64 	.word	0x08009d64
 8001e3c:	08009cb0 	.word	0x08009cb0

08001e40 <RingBuffInit>:
 */

#include "ring_buffer.h"

void RingBuffInit(struct ring_buffer_struct *rng)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	rng->index_in = rng->index_out = 0;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	805a      	strh	r2, [r3, #2]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	885a      	ldrh	r2, [r3, #2]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	801a      	strh	r2, [r3, #0]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <RingBuffPush>:

void RingBuffPush(struct ring_buffer_struct *rng, char element)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	70fb      	strb	r3, [r7, #3]
	rng->buffer[rng->index_in++] = element;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	b291      	uxth	r1, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	8011      	strh	r1, [r2, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	711a      	strb	r2, [r3, #4]
	rng->index_in &= BUF_MASK;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	801a      	strh	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <RingBuffClear>:
	}
	return 0;
}

void RingBuffClear(struct ring_buffer_struct *rng)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
	memset(rng->buffer, 0, BUF_SIZE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f006 fa4f 	bl	8008354 <memset>
	rng->buffer[0] = 0;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	711a      	strb	r2, [r3, #4]
	rng->index_out = rng->index_in = 0;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	801a      	strh	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	805a      	strh	r2, [r3, #2]
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <RingBuffGetArray>:
{
	return (rng->index_in - rng->index_out) & BUF_MASK;
}

char * RingBuffGetArray(struct ring_buffer_struct *rng)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
	return ((char *)rng->buffer);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3304      	adds	r3, #4
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <HAL_Init+0x40>)
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_Init+0x40>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001efc:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <HAL_Init+0x40>)
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_Init+0x40>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f08:	4a08      	ldr	r2, [pc, #32]	; (8001f2c <HAL_Init+0x40>)
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_Init+0x40>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f000 f8ca 	bl	80020ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f006 f808 	bl	8007f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f20:	f005 ffda 	bl	8007ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023c00 	.word	0x40023c00

08001f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_IncTick+0x20>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_IncTick+0x24>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <HAL_IncTick+0x24>)
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000000 	.word	0x20000000
 8001f54:	2000a128 	.word	0x2000a128

08001f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f74:	4013      	ands	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8a:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	60d3      	str	r3, [r2, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	f003 0307 	and.w	r3, r3, #7
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	db0b      	blt.n	8001fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fce:	4909      	ldr	r1, [pc, #36]	; (8001ff4 <__NVIC_EnableIRQ+0x38>)
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	79fa      	ldrb	r2, [r7, #7]
 8001fd8:	f002 021f 	and.w	r2, r2, #31
 8001fdc:	2001      	movs	r0, #1
 8001fde:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000e100 	.word	0xe000e100

08001ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	2b00      	cmp	r3, #0
 800200a:	db0a      	blt.n	8002022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200c:	490d      	ldr	r1, [pc, #52]	; (8002044 <__NVIC_SetPriority+0x4c>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	440b      	add	r3, r1
 800201c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002020:	e00a      	b.n	8002038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	4909      	ldr	r1, [pc, #36]	; (8002048 <__NVIC_SetPriority+0x50>)
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3b04      	subs	r3, #4
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	440b      	add	r3, r1
 8002036:	761a      	strb	r2, [r3, #24]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	; 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f1c3 0307 	rsb	r3, r3, #7
 8002066:	2b04      	cmp	r3, #4
 8002068:	bf28      	it	cs
 800206a:	2304      	movcs	r3, #4
 800206c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3304      	adds	r3, #4
 8002072:	2b06      	cmp	r3, #6
 8002074:	d902      	bls.n	800207c <NVIC_EncodePriority+0x30>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3b03      	subs	r3, #3
 800207a:	e000      	b.n	800207e <NVIC_EncodePriority+0x32>
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	2201      	movs	r2, #1
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	1e5a      	subs	r2, r3, #1
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	401a      	ands	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002092:	2101      	movs	r1, #1
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	1e59      	subs	r1, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	4313      	orrs	r3, r2
         );
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ff4e 	bl	8001f58 <__NVIC_SetPriorityGrouping>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d6:	f7ff ff63 	bl	8001fa0 <__NVIC_GetPriorityGrouping>
 80020da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	6978      	ldr	r0, [r7, #20]
 80020e2:	f7ff ffb3 	bl	800204c <NVIC_EncodePriority>
 80020e6:	4602      	mov	r2, r0
 80020e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff82 	bl	8001ff8 <__NVIC_SetPriority>
}
 80020f4:	bf00      	nop
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff56 	bl	8001fbc <__NVIC_EnableIRQ>
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <HAL_RCC_GetHCLKFreq+0x14>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	2000000c 	.word	0x2000000c

08002130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002134:	f7ff fff0 	bl	8002118 <HAL_RCC_GetHCLKFreq>
 8002138:	4601      	mov	r1, r0
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	0b5b      	lsrs	r3, r3, #13
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	4a03      	ldr	r2, [pc, #12]	; (8002154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002146:	5cd3      	ldrb	r3, [r2, r3]
 8002148:	fa21 f303 	lsr.w	r3, r1, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800
 8002154:	08009f5c 	.word	0x08009f5c

08002158 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	220f      	movs	r2, #15
 8002166:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_RCC_GetClockConfig+0x5c>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0203 	and.w	r2, r3, #3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_RCC_GetClockConfig+0x5c>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	08db      	lsrs	r3, r3, #3
 8002192:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <HAL_RCC_GetClockConfig+0x60>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 020f 	and.w	r2, r3, #15
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	601a      	str	r2, [r3, #0]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40023c00 	.word	0x40023c00

080021bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e01d      	b.n	800220a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f815 	bl	8002212 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f000 f968 	bl	80024d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	68d2      	ldr	r2, [r2, #12]
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b06      	cmp	r3, #6
 800224e:	d007      	beq.n	8002260 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b02      	cmp	r3, #2
 8002282:	d122      	bne.n	80022ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b02      	cmp	r3, #2
 8002290:	d11b      	bne.n	80022ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f06f 0202 	mvn.w	r2, #2
 800229a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f8ee 	bl	8002492 <HAL_TIM_IC_CaptureCallback>
 80022b6:	e005      	b.n	80022c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f8e0 	bl	800247e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f8f1 	bl	80024a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d122      	bne.n	800231e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d11b      	bne.n	800231e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f06f 0204 	mvn.w	r2, #4
 80022ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f8c4 	bl	8002492 <HAL_TIM_IC_CaptureCallback>
 800230a:	e005      	b.n	8002318 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f8b6 	bl	800247e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f8c7 	bl	80024a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b08      	cmp	r3, #8
 800232a:	d122      	bne.n	8002372 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b08      	cmp	r3, #8
 8002338:	d11b      	bne.n	8002372 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f06f 0208 	mvn.w	r2, #8
 8002342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2204      	movs	r2, #4
 8002348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f89a 	bl	8002492 <HAL_TIM_IC_CaptureCallback>
 800235e:	e005      	b.n	800236c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f88c 	bl	800247e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f89d 	bl	80024a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b10      	cmp	r3, #16
 800237e:	d122      	bne.n	80023c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b10      	cmp	r3, #16
 800238c:	d11b      	bne.n	80023c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f06f 0210 	mvn.w	r2, #16
 8002396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2208      	movs	r2, #8
 800239c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f870 	bl	8002492 <HAL_TIM_IC_CaptureCallback>
 80023b2:	e005      	b.n	80023c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f862 	bl	800247e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f873 	bl	80024a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d10e      	bne.n	80023f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d107      	bne.n	80023f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f06f 0201 	mvn.w	r2, #1
 80023ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f005 fb61 	bl	8007ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d10e      	bne.n	800241e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240a:	2b80      	cmp	r3, #128	; 0x80
 800240c:	d107      	bne.n	800241e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f903 	bl	8002624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	d10e      	bne.n	800244a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002436:	2b40      	cmp	r3, #64	; 0x40
 8002438:	d107      	bne.n	800244a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f838 	bl	80024ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b20      	cmp	r3, #32
 8002456:	d10e      	bne.n	8002476 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	2b20      	cmp	r3, #32
 8002464:	d107      	bne.n	8002476 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f06f 0220 	mvn.w	r2, #32
 800246e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f8cd 	bl	8002610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a40      	ldr	r2, [pc, #256]	; (80025e4 <TIM_Base_SetConfig+0x114>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d013      	beq.n	8002510 <TIM_Base_SetConfig+0x40>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ee:	d00f      	beq.n	8002510 <TIM_Base_SetConfig+0x40>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a3d      	ldr	r2, [pc, #244]	; (80025e8 <TIM_Base_SetConfig+0x118>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00b      	beq.n	8002510 <TIM_Base_SetConfig+0x40>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a3c      	ldr	r2, [pc, #240]	; (80025ec <TIM_Base_SetConfig+0x11c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d007      	beq.n	8002510 <TIM_Base_SetConfig+0x40>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a3b      	ldr	r2, [pc, #236]	; (80025f0 <TIM_Base_SetConfig+0x120>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d003      	beq.n	8002510 <TIM_Base_SetConfig+0x40>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a3a      	ldr	r2, [pc, #232]	; (80025f4 <TIM_Base_SetConfig+0x124>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d108      	bne.n	8002522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a2f      	ldr	r2, [pc, #188]	; (80025e4 <TIM_Base_SetConfig+0x114>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d02b      	beq.n	8002582 <TIM_Base_SetConfig+0xb2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002530:	d027      	beq.n	8002582 <TIM_Base_SetConfig+0xb2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a2c      	ldr	r2, [pc, #176]	; (80025e8 <TIM_Base_SetConfig+0x118>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d023      	beq.n	8002582 <TIM_Base_SetConfig+0xb2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a2b      	ldr	r2, [pc, #172]	; (80025ec <TIM_Base_SetConfig+0x11c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01f      	beq.n	8002582 <TIM_Base_SetConfig+0xb2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a2a      	ldr	r2, [pc, #168]	; (80025f0 <TIM_Base_SetConfig+0x120>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d01b      	beq.n	8002582 <TIM_Base_SetConfig+0xb2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a29      	ldr	r2, [pc, #164]	; (80025f4 <TIM_Base_SetConfig+0x124>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d017      	beq.n	8002582 <TIM_Base_SetConfig+0xb2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a28      	ldr	r2, [pc, #160]	; (80025f8 <TIM_Base_SetConfig+0x128>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <TIM_Base_SetConfig+0xb2>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a27      	ldr	r2, [pc, #156]	; (80025fc <TIM_Base_SetConfig+0x12c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00f      	beq.n	8002582 <TIM_Base_SetConfig+0xb2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a26      	ldr	r2, [pc, #152]	; (8002600 <TIM_Base_SetConfig+0x130>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00b      	beq.n	8002582 <TIM_Base_SetConfig+0xb2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a25      	ldr	r2, [pc, #148]	; (8002604 <TIM_Base_SetConfig+0x134>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d007      	beq.n	8002582 <TIM_Base_SetConfig+0xb2>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a24      	ldr	r2, [pc, #144]	; (8002608 <TIM_Base_SetConfig+0x138>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d003      	beq.n	8002582 <TIM_Base_SetConfig+0xb2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a23      	ldr	r2, [pc, #140]	; (800260c <TIM_Base_SetConfig+0x13c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d108      	bne.n	8002594 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <TIM_Base_SetConfig+0x114>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d003      	beq.n	80025c8 <TIM_Base_SetConfig+0xf8>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <TIM_Base_SetConfig+0x124>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d103      	bne.n	80025d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	615a      	str	r2, [r3, #20]
}
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40010000 	.word	0x40010000
 80025e8:	40000400 	.word	0x40000400
 80025ec:	40000800 	.word	0x40000800
 80025f0:	40000c00 	.word	0x40000c00
 80025f4:	40010400 	.word	0x40010400
 80025f8:	40014000 	.word	0x40014000
 80025fc:	40014400 	.word	0x40014400
 8002600:	40014800 	.word	0x40014800
 8002604:	40001800 	.word	0x40001800
 8002608:	40001c00 	.word	0x40001c00
 800260c:	40002000 	.word	0x40002000

08002610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2103      	movs	r1, #3
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	401a      	ands	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	61bb      	str	r3, [r7, #24]
  return result;
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	fa01 f303 	lsl.w	r3, r1, r3
 8002684:	431a      	orrs	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	601a      	str	r2, [r3, #0]
}
 800268a:	bf00      	nop
 800268c:	3724      	adds	r7, #36	; 0x24
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002696:	b480      	push	{r7}
 8002698:	b085      	sub	sp, #20
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	401a      	ands	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	fb01 f303 	mul.w	r3, r1, r3
 80026b4:	431a      	orrs	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	605a      	str	r2, [r3, #4]
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b089      	sub	sp, #36	; 0x24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	613b      	str	r3, [r7, #16]
  return result;
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2103      	movs	r1, #3
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	401a      	ands	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	61bb      	str	r3, [r7, #24]
  return result;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	fab3 f383 	clz	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	431a      	orrs	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002718:	bf00      	nop
 800271a:	3724      	adds	r7, #36	; 0x24
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	613b      	str	r3, [r7, #16]
  return result;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2103      	movs	r1, #3
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	401a      	ands	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	61bb      	str	r3, [r7, #24]
  return result;
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	431a      	orrs	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	60da      	str	r2, [r3, #12]
}
 8002776:	bf00      	nop
 8002778:	3724      	adds	r7, #36	; 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002782:	b480      	push	{r7}
 8002784:	b089      	sub	sp, #36	; 0x24
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a1a      	ldr	r2, [r3, #32]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	613b      	str	r3, [r7, #16]
  return result;
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	210f      	movs	r1, #15
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	401a      	ands	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	61bb      	str	r3, [r7, #24]
  return result;
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	431a      	orrs	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80027d4:	bf00      	nop
 80027d6:	3724      	adds	r7, #36	; 0x24
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	613b      	str	r3, [r7, #16]
  return result;
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	210f      	movs	r1, #15
 800280a:	fa01 f303 	lsl.w	r3, r1, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	401a      	ands	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	61bb      	str	r3, [r7, #24]
  return result;
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	431a      	orrs	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002836:	bf00      	nop
 8002838:	3724      	adds	r7, #36	; 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b088      	sub	sp, #32
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800284c:	2300      	movs	r3, #0
 800284e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	613b      	str	r3, [r7, #16]
  return result;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800286c:	e050      	b.n	8002910 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	2101      	movs	r1, #1
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d042      	beq.n	800290a <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d003      	beq.n	8002894 <LL_GPIO_Init+0x52>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d10d      	bne.n	80028b0 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	461a      	mov	r2, r3
 800289a:	69b9      	ldr	r1, [r7, #24]
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff12 	bl	80026c6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	461a      	mov	r2, r3
 80028a8:	69b9      	ldr	r1, [r7, #24]
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff fef3 	bl	8002696 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	461a      	mov	r2, r3
 80028b6:	69b9      	ldr	r1, [r7, #24]
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff33 	bl	8002724 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d11a      	bne.n	80028fc <LL_GPIO_Init+0xba>
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	60bb      	str	r3, [r7, #8]
  return result;
 80028d2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b07      	cmp	r3, #7
 80028dc:	d807      	bhi.n	80028ee <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	461a      	mov	r2, r3
 80028e4:	69b9      	ldr	r1, [r7, #24]
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff ff4b 	bl	8002782 <LL_GPIO_SetAFPin_0_7>
 80028ec:	e006      	b.n	80028fc <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	461a      	mov	r2, r3
 80028f4:	69b9      	ldr	r1, [r7, #24]
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ff72 	bl	80027e0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	461a      	mov	r2, r3
 8002902:	69b9      	ldr	r1, [r7, #24]
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fe97 	bl	8002638 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3301      	adds	r3, #1
 800290e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	fa22 f303 	lsr.w	r3, r2, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1a7      	bne.n	800286e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3720      	adds	r7, #32
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <LL_RCC_GetSysClkSource+0x18>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 030c 	and.w	r3, r3, #12
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800

08002944 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002948:	4b04      	ldr	r3, [pc, #16]	; (800295c <LL_RCC_GetAHBPrescaler+0x18>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800

08002960 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002964:	4b04      	ldr	r3, [pc, #16]	; (8002978 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800

0800297c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800

08002998 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <LL_RCC_PLL_GetMainSource+0x18>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800

080029b4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <LL_RCC_PLL_GetN+0x18>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	099b      	lsrs	r3, r3, #6
 80029be:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	40023800 	.word	0x40023800

080029d0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <LL_RCC_PLL_GetP+0x18>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800

080029ec <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <LL_RCC_PLL_GetDivider+0x18>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800

08002a08 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002a10:	f000 f820 	bl	8002a54 <RCC_GetSystemClockFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 f83e 	bl	8002aa0 <RCC_GetHCLKClockFreq>
 8002a24:	4602      	mov	r2, r0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f84c 	bl	8002acc <RCC_GetPCLK1ClockFreq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f858 	bl	8002af4 <RCC_GetPCLK2ClockFreq>
 8002a44:	4602      	mov	r2, r0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	60da      	str	r2, [r3, #12]
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002a5e:	f7ff ff63 	bl	8002928 <LL_RCC_GetSysClkSource>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d006      	beq.n	8002a76 <RCC_GetSystemClockFreq+0x22>
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d007      	beq.n	8002a7c <RCC_GetSystemClockFreq+0x28>
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <RCC_GetSystemClockFreq+0x44>)
 8002a72:	607b      	str	r3, [r7, #4]
      break;
 8002a74:	e00a      	b.n	8002a8c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <RCC_GetSystemClockFreq+0x48>)
 8002a78:	607b      	str	r3, [r7, #4]
      break;
 8002a7a:	e007      	b.n	8002a8c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002a7c:	2008      	movs	r0, #8
 8002a7e:	f000 f84d 	bl	8002b1c <RCC_PLL_GetFreqDomain_SYS>
 8002a82:	6078      	str	r0, [r7, #4]
      break;
 8002a84:	e002      	b.n	8002a8c <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002a86:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <RCC_GetSystemClockFreq+0x44>)
 8002a88:	607b      	str	r3, [r7, #4]
      break;
 8002a8a:	bf00      	nop
  }

  return frequency;
 8002a8c:	687b      	ldr	r3, [r7, #4]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	00f42400 	.word	0x00f42400
 8002a9c:	007a1200 	.word	0x007a1200

08002aa0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002aa8:	f7ff ff4c 	bl	8002944 <LL_RCC_GetAHBPrescaler>
 8002aac:	4603      	mov	r3, r0
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <RCC_GetHCLKClockFreq+0x28>)
 8002ab6:	5cd3      	ldrb	r3, [r2, r3]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	40d3      	lsrs	r3, r2
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	08009f4c 	.word	0x08009f4c

08002acc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002ad4:	f7ff ff44 	bl	8002960 <LL_RCC_GetAPB1Prescaler>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	0a9b      	lsrs	r3, r3, #10
 8002adc:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <RCC_GetPCLK1ClockFreq+0x24>)
 8002ade:	5cd3      	ldrb	r3, [r2, r3]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	40d3      	lsrs	r3, r2
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	08009f5c 	.word	0x08009f5c

08002af4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002afc:	f7ff ff3e 	bl	800297c <LL_RCC_GetAPB2Prescaler>
 8002b00:	4603      	mov	r3, r0
 8002b02:	0b5b      	lsrs	r3, r3, #13
 8002b04:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <RCC_GetPCLK2ClockFreq+0x24>)
 8002b06:	5cd3      	ldrb	r3, [r2, r3]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	40d3      	lsrs	r3, r2
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	08009f5c 	.word	0x08009f5c

08002b1c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002b30:	f7ff ff32 	bl	8002998 <LL_RCC_PLL_GetMainSource>
 8002b34:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8002b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b40:	d003      	beq.n	8002b4a <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8002b42:	e005      	b.n	8002b50 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002b46:	617b      	str	r3, [r7, #20]
      break;
 8002b48:	e005      	b.n	8002b56 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002b4a:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002b4c:	617b      	str	r3, [r7, #20]
      break;
 8002b4e:	e002      	b.n	8002b56 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002b52:	617b      	str	r3, [r7, #20]
      break;
 8002b54:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d113      	bne.n	8002b84 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002b5c:	f7ff ff46 	bl	80029ec <LL_RCC_PLL_GetDivider>
 8002b60:	4602      	mov	r2, r0
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	fbb3 f4f2 	udiv	r4, r3, r2
 8002b68:	f7ff ff24 	bl	80029b4 <LL_RCC_PLL_GetN>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	fb03 f404 	mul.w	r4, r3, r4
 8002b72:	f7ff ff2d 	bl	80029d0 <LL_RCC_PLL_GetP>
 8002b76:	4603      	mov	r3, r0
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002b82:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002b84:	693b      	ldr	r3, [r7, #16]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd90      	pop	{r4, r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	00f42400 	.word	0x00f42400
 8002b94:	007a1200 	.word	0x007a1200

08002b98 <LL_RTC_SetHourFormat>:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetHourFormat(RTC_TypeDef *RTCx, uint32_t HourFormat)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <LL_RTC_GetHourFormat>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  */
__STATIC_INLINE uint32_t LL_RTC_GetHourFormat(RTC_TypeDef *RTCx)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f04f 32ff 	mov.w	r2, #4294967295
 8002be8:	60da      	str	r2, [r3, #12]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c04:	60da      	str	r2, [r3, #12]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <LL_RTC_IsShadowRegBypassEnabled>:
  * @rmtoll CR           BYPSHAD       LL_RTC_IsShadowRegBypassEnabled
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsShadowRegBypassEnabled(RTC_TypeDef *RTCx)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	bf0c      	ite	eq
 8002c26:	2301      	moveq	r3, #1
 8002c28:	2300      	movne	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	041b      	lsls	r3, r3, #16
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	611a      	str	r2, [r3, #16]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	611a      	str	r2, [r3, #16]
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	22ff      	movs	r2, #255	; 0xff
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	22ca      	movs	r2, #202	; 0xca
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2253      	movs	r2, #83	; 0x53
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_RTC_TIME_Config>:
  * @param  Minutes Value between Min_Data=0x00 and Max_Data=0x59
  * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TIME_Config(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 8002cc4:	b490      	push	{r4, r7}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;

  temp = Format12_24                                                                                    | \
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8002ce4:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8002cea:	ea42 0403 	orr.w	r4, r2, r3
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8002cf6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cfa:	ea43 0204 	orr.w	r2, r3, r4
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	601a      	str	r2, [r3, #0]
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc90      	pop	{r4, r7}
 8002d0a:	4770      	bx	lr

08002d0c <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 8002d0c:	b490      	push	{r4, r7}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;
 8002d1a:	2400      	movs	r4, #0

  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	041b      	lsls	r3, r3, #16
 8002d24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8002d28:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	021b      	lsls	r3, r3, #8
 8002d2e:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8002d30:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8002d36:	ea42 0403 	orr.w	r4, r2, r3

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <LL_RTC_DATE_Config+0x48>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	ea43 0204 	orr.w	r2, r3, r4
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	605a      	str	r2, [r3, #4]
}
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc90      	pop	{r4, r7}
 8002d52:	4770      	bx	lr
 8002d54:	ff0000c0 	.word	0xff0000c0

08002d58 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d68:	2b40      	cmp	r3, #64	; 0x40
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	bf0c      	ite	eq
 8002d92:	2301      	moveq	r3, #1
 8002d94:	2300      	movne	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db4:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	60da      	str	r2, [r3, #12]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd8:	bf0c      	ite	eq
 8002dda:	2301      	moveq	r3, #1
 8002ddc:	2300      	movne	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000e010 	.word	0xe000e010

08002df0 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ff50 	bl	8002ca4 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f971 	bl	80030ec <LL_RTC_EnterInitMode>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d016      	beq.n	8002e3e <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4619      	mov	r1, r3
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff febe 	bl	8002b98 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ff1c 	bl	8002c60 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ff02 	bl	8002c38 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff fede 	bl	8002bf6 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ff23 	bl	8002c8a <LL_RTC_EnableWriteProtection>

  return status;
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 8002e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e52:	b089      	sub	sp, #36	; 0x24
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7ff fea9 	bl	8002bbe <LL_RTC_GetHourFormat>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10c      	bne.n	8002e8c <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	e008      	b.n	8002e8c <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7ff fe9f 	bl	8002bbe <LL_RTC_GetHourFormat>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f7ff ff09 	bl	8002ca4 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f92a 	bl	80030ec <LL_RTC_EnterInitMode>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d073      	beq.n	8002f86 <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00f      	beq.n	8002ec4 <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6819      	ldr	r1, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	791b      	ldrb	r3, [r3, #4]
 8002eac:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8002eb2:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	4603      	mov	r3, r0
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7ff ff01 	bl	8002cc4 <LL_RTC_TIME_Config>
 8002ec2:	e04f      	b.n	8002f64 <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681c      	ldr	r4, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	791b      	ldrb	r3, [r3, #4]
 8002ecc:	4a32      	ldr	r2, [pc, #200]	; (8002f98 <LL_RTC_TIME_Init+0x148>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	08db      	lsrs	r3, r3, #3
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	b2d8      	uxtb	r0, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	791a      	ldrb	r2, [r3, #4]
 8002ede:	4b2e      	ldr	r3, [pc, #184]	; (8002f98 <LL_RTC_TIME_Init+0x148>)
 8002ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee4:	08d9      	lsrs	r1, r3, #3
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	4303      	orrs	r3, r0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	795b      	ldrb	r3, [r3, #5]
 8002efc:	4a26      	ldr	r2, [pc, #152]	; (8002f98 <LL_RTC_TIME_Init+0x148>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	08db      	lsrs	r3, r3, #3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	b2d8      	uxtb	r0, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	795a      	ldrb	r2, [r3, #5]
 8002f0e:	4b22      	ldr	r3, [pc, #136]	; (8002f98 <LL_RTC_TIME_Init+0x148>)
 8002f10:	fba3 1302 	umull	r1, r3, r3, r2
 8002f14:	08d9      	lsrs	r1, r3, #3
 8002f16:	460b      	mov	r3, r1
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	4303      	orrs	r3, r0
 8002f24:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8002f26:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	799b      	ldrb	r3, [r3, #6]
 8002f2c:	4a1a      	ldr	r2, [pc, #104]	; (8002f98 <LL_RTC_TIME_Init+0x148>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	08db      	lsrs	r3, r3, #3
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	b2d8      	uxtb	r0, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	799a      	ldrb	r2, [r3, #6]
 8002f3e:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <LL_RTC_TIME_Init+0x148>)
 8002f40:	fba3 1302 	umull	r1, r3, r3, r2
 8002f44:	08d9      	lsrs	r1, r3, #3
 8002f46:	460b      	mov	r3, r1
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	4303      	orrs	r3, r0
 8002f54:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	4633      	mov	r3, r6
 8002f5a:	462a      	mov	r2, r5
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff feb0 	bl	8002cc4 <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTC);
 8002f64:	480d      	ldr	r0, [pc, #52]	; (8002f9c <LL_RTC_TIME_Init+0x14c>)
 8002f66:	f7ff fe46 	bl	8002bf6 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f7ff fe51 	bl	8002c12 <LL_RTC_IsShadowRegBypassEnabled>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f8ed 	bl	8003156 <LL_RTC_WaitForSynchro>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	75fb      	strb	r3, [r7, #23]
 8002f80:	e001      	b.n	8002f86 <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 8002f82:	2300      	movs	r3, #0
 8002f84:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f7ff fe7f 	bl	8002c8a <LL_RTC_EnableWriteProtection>

  return status;
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f96:	bf00      	nop
 8002f98:	cccccccd 	.word	0xcccccccd
 8002f9c:	40002800 	.word	0x40002800

08002fa0 <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 8002fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa2:	b089      	sub	sp, #36	; 0x24
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10e      	bne.n	8002fd4 <LL_RTC_DATE_Init+0x34>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	785b      	ldrb	r3, [r3, #1]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	785b      	ldrb	r3, [r3, #1]
 8002fc6:	f023 0310 	bic.w	r3, r3, #16
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	330a      	adds	r3, #10
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7ff fe65 	bl	8002ca4 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f886 	bl	80030ec <LL_RTC_EnterInitMode>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d075      	beq.n	80030d2 <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d010      	beq.n	800300e <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	789b      	ldrb	r3, [r3, #2]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	785b      	ldrb	r3, [r3, #1]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	78db      	ldrb	r3, [r3, #3]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	4603      	mov	r3, r0
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f7ff fe80 	bl	8002d0c <LL_RTC_DATE_Config>
 800300c:	e050      	b.n	80030b0 <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	461c      	mov	r4, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	789b      	ldrb	r3, [r3, #2]
 8003018:	4a32      	ldr	r2, [pc, #200]	; (80030e4 <LL_RTC_DATE_Init+0x144>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	08db      	lsrs	r3, r3, #3
 8003020:	b2db      	uxtb	r3, r3
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	b2d8      	uxtb	r0, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	789a      	ldrb	r2, [r3, #2]
 800302a:	4b2e      	ldr	r3, [pc, #184]	; (80030e4 <LL_RTC_DATE_Init+0x144>)
 800302c:	fba3 1302 	umull	r1, r3, r3, r2
 8003030:	08d9      	lsrs	r1, r3, #3
 8003032:	460b      	mov	r3, r1
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	4303      	orrs	r3, r0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	785b      	ldrb	r3, [r3, #1]
 8003048:	4a26      	ldr	r2, [pc, #152]	; (80030e4 <LL_RTC_DATE_Init+0x144>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	08db      	lsrs	r3, r3, #3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	b2d8      	uxtb	r0, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	785a      	ldrb	r2, [r3, #1]
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <LL_RTC_DATE_Init+0x144>)
 800305c:	fba3 1302 	umull	r1, r3, r3, r2
 8003060:	08d9      	lsrs	r1, r3, #3
 8003062:	460b      	mov	r3, r1
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	4303      	orrs	r3, r0
 8003070:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8003072:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	78db      	ldrb	r3, [r3, #3]
 8003078:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <LL_RTC_DATE_Init+0x144>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	08db      	lsrs	r3, r3, #3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	b2d8      	uxtb	r0, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	78da      	ldrb	r2, [r3, #3]
 800308a:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <LL_RTC_DATE_Init+0x144>)
 800308c:	fba3 1302 	umull	r1, r3, r3, r2
 8003090:	08d9      	lsrs	r1, r3, #3
 8003092:	460b      	mov	r3, r1
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	4303      	orrs	r3, r0
 80030a0:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	4633      	mov	r3, r6
 80030a6:	462a      	mov	r2, r5
 80030a8:	4621      	mov	r1, r4
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f7ff fe2e 	bl	8002d0c <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTC);
 80030b0:	480d      	ldr	r0, [pc, #52]	; (80030e8 <LL_RTC_DATE_Init+0x148>)
 80030b2:	f7ff fda0 	bl	8002bf6 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f7ff fdab 	bl	8002c12 <LL_RTC_IsShadowRegBypassEnabled>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d105      	bne.n	80030ce <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f847 	bl	8003156 <LL_RTC_WaitForSynchro>
 80030c8:	4603      	mov	r3, r0
 80030ca:	75fb      	strb	r3, [r7, #23]
 80030cc:	e001      	b.n	80030d2 <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 80030ce:	2300      	movs	r3, #0
 80030d0:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f7ff fdd9 	bl	8002c8a <LL_RTC_EnableWriteProtection>

  return status;
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e2:	bf00      	nop
 80030e4:	cccccccd 	.word	0xcccccccd
 80030e8:	40002800 	.word	0x40002800

080030ec <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 80030f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030f8:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 80030fa:	2300      	movs	r3, #0
 80030fc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff fe28 	bl	8002d58 <LL_RTC_IsActiveFlag_INIT>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d11e      	bne.n	800314c <LL_RTC_EnterInitMode+0x60>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fd63 	bl	8002bda <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff fe1f 	bl	8002d58 <LL_RTC_IsActiveFlag_INIT>
 800311a:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 800311c:	e010      	b.n	8003140 <LL_RTC_EnterInitMode+0x54>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800311e:	f7ff fe53 	bl	8002dc8 <LL_SYSTICK_IsActiveCounterFlag>
 8003122:	4603      	mov	r3, r0
 8003124:	2b01      	cmp	r3, #1
 8003126:	d102      	bne.n	800312e <LL_RTC_EnterInitMode+0x42>
      {
        timeout --;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	3b01      	subs	r3, #1
 800312c:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fe12 	bl	8002d58 <LL_RTC_IsActiveFlag_INIT>
 8003134:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <LL_RTC_EnterInitMode+0x54>
      {
        status = ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <LL_RTC_EnterInitMode+0x60>
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d1e8      	bne.n	800311e <LL_RTC_EnterInitMode+0x32>
      }
    }
  }
  return status;
 800314c:	7dfb      	ldrb	r3, [r7, #23]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b086      	sub	sp, #24
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 800315e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003162:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8003164:	2300      	movs	r3, #0
 8003166:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff fe19 	bl	8002da4 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff fe03 	bl	8002d7e <LL_RTC_IsActiveFlag_RS>
 8003178:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 800317a:	e010      	b.n	800319e <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800317c:	f7ff fe24 	bl	8002dc8 <LL_SYSTICK_IsActiveCounterFlag>
 8003180:	4603      	mov	r3, r0
 8003182:	2b01      	cmp	r3, #1
 8003184:	d102      	bne.n	800318c <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3b01      	subs	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff fdf6 	bl	8002d7e <LL_RTC_IsActiveFlag_RS>
 8003192:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <LL_RTC_WaitForSynchro+0x54>
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e8      	bne.n	800317c <LL_RTC_WaitForSynchro+0x26>
    }
  }

  if (status != ERROR)
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d01e      	beq.n	80031ee <LL_RTC_WaitForSynchro+0x98>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 80031b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031b4:	60fb      	str	r3, [r7, #12]
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff fde1 	bl	8002d7e <LL_RTC_IsActiveFlag_RS>
 80031bc:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 80031be:	e010      	b.n	80031e2 <LL_RTC_WaitForSynchro+0x8c>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80031c0:	f7ff fe02 	bl	8002dc8 <LL_SYSTICK_IsActiveCounterFlag>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d102      	bne.n	80031d0 <LL_RTC_WaitForSynchro+0x7a>
      {
        timeout--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff fdd4 	bl	8002d7e <LL_RTC_IsActiveFlag_RS>
 80031d6:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <LL_RTC_WaitForSynchro+0x8c>
      {
        status = ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <LL_RTC_WaitForSynchro+0x98>
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d1e8      	bne.n	80031c0 <LL_RTC_WaitForSynchro+0x6a>
      }
    }
  }

  return (status);
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003208:	2b40      	cmp	r3, #64	; 0x40
 800320a:	d101      	bne.n	8003210 <LL_SPI_IsEnabled+0x18>
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <LL_SPI_IsEnabled+0x1a>
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	461a      	mov	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	611a      	str	r2, [r3, #16]
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff ffd3 	bl	80031f8 <LL_SPI_IsEnabled>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d139      	bne.n	80032cc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003260:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	6811      	ldr	r1, [r2, #0]
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	6852      	ldr	r2, [r2, #4]
 800326c:	4311      	orrs	r1, r2
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	6892      	ldr	r2, [r2, #8]
 8003272:	4311      	orrs	r1, r2
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	68d2      	ldr	r2, [r2, #12]
 8003278:	4311      	orrs	r1, r2
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	6912      	ldr	r2, [r2, #16]
 800327e:	4311      	orrs	r1, r2
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	6952      	ldr	r2, [r2, #20]
 8003284:	4311      	orrs	r1, r2
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	6992      	ldr	r2, [r2, #24]
 800328a:	4311      	orrs	r1, r2
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	69d2      	ldr	r2, [r2, #28]
 8003290:	4311      	orrs	r1, r2
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	6a12      	ldr	r2, [r2, #32]
 8003296:	430a      	orrs	r2, r1
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f023 0204 	bic.w	r2, r3, #4
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	0c1b      	lsrs	r3, r3, #16
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ba:	d105      	bne.n	80032c8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	4619      	mov	r1, r3
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff ffab 	bl	800321e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	61da      	str	r2, [r3, #28]
  return status;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f6:	bf0c      	ite	eq
 80032f8:	2301      	moveq	r3, #1
 80032fa:	2300      	movne	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	611a      	str	r2, [r3, #16]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	615a      	str	r2, [r3, #20]
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8003358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800335c:	b091      	sub	sp, #68	; 0x44
 800335e:	af00      	add	r7, sp, #0
 8003360:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003362:	63b9      	str	r1, [r7, #56]	; 0x38
 8003364:	637a      	str	r2, [r7, #52]	; 0x34
 8003366:	633b      	str	r3, [r7, #48]	; 0x30
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336e:	f040 80a7 	bne.w	80034c0 <LL_USART_SetBaudRate+0x168>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	4619      	mov	r1, r3
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	460b      	mov	r3, r1
 800337c:	4614      	mov	r4, r2
 800337e:	18db      	adds	r3, r3, r3
 8003380:	eb44 0404 	adc.w	r4, r4, r4
 8003384:	185b      	adds	r3, r3, r1
 8003386:	eb44 0402 	adc.w	r4, r4, r2
 800338a:	00e6      	lsls	r6, r4, #3
 800338c:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8003390:	00dd      	lsls	r5, r3, #3
 8003392:	462b      	mov	r3, r5
 8003394:	4634      	mov	r4, r6
 8003396:	185d      	adds	r5, r3, r1
 8003398:	eb44 0602 	adc.w	r6, r4, r2
 800339c:	4628      	mov	r0, r5
 800339e:	4631      	mov	r1, r6
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	f04f 0400 	mov.w	r4, #0
 80033a6:	18db      	adds	r3, r3, r3
 80033a8:	eb44 0404 	adc.w	r4, r4, r4
 80033ac:	461a      	mov	r2, r3
 80033ae:	4623      	mov	r3, r4
 80033b0:	f7fc ff76 	bl	80002a0 <__aeabi_uldivmod>
 80033b4:	4603      	mov	r3, r0
 80033b6:	460c      	mov	r4, r1
 80033b8:	461a      	mov	r2, r3
 80033ba:	4ba1      	ldr	r3, [pc, #644]	; (8003640 <LL_USART_SetBaudRate+0x2e8>)
 80033bc:	fba3 2302 	umull	r2, r3, r3, r2
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	b29d      	uxth	r5, r3
 80033c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ca:	4619      	mov	r1, r3
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4614      	mov	r4, r2
 80033d4:	18db      	adds	r3, r3, r3
 80033d6:	eb44 0404 	adc.w	r4, r4, r4
 80033da:	185b      	adds	r3, r3, r1
 80033dc:	eb44 0402 	adc.w	r4, r4, r2
 80033e0:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 80033e4:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 80033e8:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 80033ec:	4653      	mov	r3, sl
 80033ee:	465c      	mov	r4, fp
 80033f0:	eb13 0a01 	adds.w	sl, r3, r1
 80033f4:	eb44 0b02 	adc.w	fp, r4, r2
 80033f8:	4650      	mov	r0, sl
 80033fa:	4659      	mov	r1, fp
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	f04f 0400 	mov.w	r4, #0
 8003402:	18db      	adds	r3, r3, r3
 8003404:	eb44 0404 	adc.w	r4, r4, r4
 8003408:	461a      	mov	r2, r3
 800340a:	4623      	mov	r3, r4
 800340c:	f7fc ff48 	bl	80002a0 <__aeabi_uldivmod>
 8003410:	4603      	mov	r3, r0
 8003412:	460c      	mov	r4, r1
 8003414:	461a      	mov	r2, r3
 8003416:	4b8a      	ldr	r3, [pc, #552]	; (8003640 <LL_USART_SetBaudRate+0x2e8>)
 8003418:	fba3 1302 	umull	r1, r3, r3, r2
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	2164      	movs	r1, #100	; 0x64
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	3332      	adds	r3, #50	; 0x32
 800342a:	4a85      	ldr	r2, [pc, #532]	; (8003640 <LL_USART_SetBaudRate+0x2e8>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	b29b      	uxth	r3, r3
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	b29b      	uxth	r3, r3
 8003438:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800343c:	b29b      	uxth	r3, r3
 800343e:	442b      	add	r3, r5
 8003440:	b29d      	uxth	r5, r3
 8003442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003444:	4619      	mov	r1, r3
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	460b      	mov	r3, r1
 800344c:	4614      	mov	r4, r2
 800344e:	18db      	adds	r3, r3, r3
 8003450:	eb44 0404 	adc.w	r4, r4, r4
 8003454:	185b      	adds	r3, r3, r1
 8003456:	eb44 0402 	adc.w	r4, r4, r2
 800345a:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800345e:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003462:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003466:	4643      	mov	r3, r8
 8003468:	464c      	mov	r4, r9
 800346a:	eb13 0801 	adds.w	r8, r3, r1
 800346e:	eb44 0902 	adc.w	r9, r4, r2
 8003472:	4640      	mov	r0, r8
 8003474:	4649      	mov	r1, r9
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	f04f 0400 	mov.w	r4, #0
 800347c:	18db      	adds	r3, r3, r3
 800347e:	eb44 0404 	adc.w	r4, r4, r4
 8003482:	461a      	mov	r2, r3
 8003484:	4623      	mov	r3, r4
 8003486:	f7fc ff0b 	bl	80002a0 <__aeabi_uldivmod>
 800348a:	4603      	mov	r3, r0
 800348c:	460c      	mov	r4, r1
 800348e:	461a      	mov	r2, r3
 8003490:	4b6b      	ldr	r3, [pc, #428]	; (8003640 <LL_USART_SetBaudRate+0x2e8>)
 8003492:	fba3 1302 	umull	r1, r3, r3, r2
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	2164      	movs	r1, #100	; 0x64
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	3332      	adds	r3, #50	; 0x32
 80034a4:	4a66      	ldr	r2, [pc, #408]	; (8003640 <LL_USART_SetBaudRate+0x2e8>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	442b      	add	r3, r5
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80034be:	e0ba      	b.n	8003636 <LL_USART_SetBaudRate+0x2de>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80034c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c2:	4619      	mov	r1, r3
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4614      	mov	r4, r2
 80034cc:	18db      	adds	r3, r3, r3
 80034ce:	eb44 0404 	adc.w	r4, r4, r4
 80034d2:	185b      	adds	r3, r3, r1
 80034d4:	eb44 0402 	adc.w	r4, r4, r2
 80034d8:	00e0      	lsls	r0, r4, #3
 80034da:	6178      	str	r0, [r7, #20]
 80034dc:	6978      	ldr	r0, [r7, #20]
 80034de:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80034e2:	6178      	str	r0, [r7, #20]
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80034ec:	185d      	adds	r5, r3, r1
 80034ee:	eb44 0602 	adc.w	r6, r4, r2
 80034f2:	4628      	mov	r0, r5
 80034f4:	4631      	mov	r1, r6
 80034f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f8:	f04f 0400 	mov.w	r4, #0
 80034fc:	00a2      	lsls	r2, r4, #2
 80034fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003502:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003506:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	62bb      	str	r3, [r7, #40]	; 0x28
 800350c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003510:	f7fc fec6 	bl	80002a0 <__aeabi_uldivmod>
 8003514:	4603      	mov	r3, r0
 8003516:	460c      	mov	r4, r1
 8003518:	461a      	mov	r2, r3
 800351a:	4b49      	ldr	r3, [pc, #292]	; (8003640 <LL_USART_SetBaudRate+0x2e8>)
 800351c:	fba3 2302 	umull	r2, r3, r3, r2
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	b29b      	uxth	r3, r3
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	b29d      	uxth	r5, r3
 8003528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352a:	4619      	mov	r1, r3
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	460b      	mov	r3, r1
 8003532:	4614      	mov	r4, r2
 8003534:	18db      	adds	r3, r3, r3
 8003536:	eb44 0404 	adc.w	r4, r4, r4
 800353a:	185b      	adds	r3, r3, r1
 800353c:	eb44 0402 	adc.w	r4, r4, r2
 8003540:	00e0      	lsls	r0, r4, #3
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003554:	eb13 0801 	adds.w	r8, r3, r1
 8003558:	eb44 0902 	adc.w	r9, r4, r2
 800355c:	4640      	mov	r0, r8
 800355e:	4649      	mov	r1, r9
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	f04f 0400 	mov.w	r4, #0
 8003566:	00a2      	lsls	r2, r4, #2
 8003568:	627a      	str	r2, [r7, #36]	; 0x24
 800356a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003570:	627a      	str	r2, [r7, #36]	; 0x24
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	623b      	str	r3, [r7, #32]
 8003576:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800357a:	f7fc fe91 	bl	80002a0 <__aeabi_uldivmod>
 800357e:	4603      	mov	r3, r0
 8003580:	460c      	mov	r4, r1
 8003582:	461a      	mov	r2, r3
 8003584:	4b2e      	ldr	r3, [pc, #184]	; (8003640 <LL_USART_SetBaudRate+0x2e8>)
 8003586:	fba3 1302 	umull	r1, r3, r3, r2
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2164      	movs	r1, #100	; 0x64
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	3332      	adds	r3, #50	; 0x32
 8003598:	4a29      	ldr	r2, [pc, #164]	; (8003640 <LL_USART_SetBaudRate+0x2e8>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	442b      	add	r3, r5
 80035aa:	b29d      	uxth	r5, r3
 80035ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ae:	4619      	mov	r1, r3
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4614      	mov	r4, r2
 80035b8:	18db      	adds	r3, r3, r3
 80035ba:	eb44 0404 	adc.w	r4, r4, r4
 80035be:	185b      	adds	r3, r3, r1
 80035c0:	eb44 0402 	adc.w	r4, r4, r2
 80035c4:	00e0      	lsls	r0, r4, #3
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	e897 0018 	ldmia.w	r7, {r3, r4}
 80035d8:	eb13 0801 	adds.w	r8, r3, r1
 80035dc:	eb44 0902 	adc.w	r9, r4, r2
 80035e0:	4640      	mov	r0, r8
 80035e2:	4649      	mov	r1, r9
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	f04f 0400 	mov.w	r4, #0
 80035ea:	00a2      	lsls	r2, r4, #2
 80035ec:	61fa      	str	r2, [r7, #28]
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80035f4:	61fa      	str	r2, [r7, #28]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035fe:	f7fc fe4f 	bl	80002a0 <__aeabi_uldivmod>
 8003602:	4603      	mov	r3, r0
 8003604:	460c      	mov	r4, r1
 8003606:	461a      	mov	r2, r3
 8003608:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <LL_USART_SetBaudRate+0x2e8>)
 800360a:	fba3 1302 	umull	r1, r3, r3, r2
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	2164      	movs	r1, #100	; 0x64
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	3332      	adds	r3, #50	; 0x32
 800361c:	4a08      	ldr	r2, [pc, #32]	; (8003640 <LL_USART_SetBaudRate+0x2e8>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	b29b      	uxth	r3, r3
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	b29b      	uxth	r3, r3
 800362c:	442b      	add	r3, r5
 800362e:	b29b      	uxth	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003634:	609a      	str	r2, [r3, #8]
}
 8003636:	bf00      	nop
 8003638:	3744      	adds	r7, #68	; 0x44
 800363a:	46bd      	mov	sp, r7
 800363c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003640:	51eb851f 	.word	0x51eb851f

08003644 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff fe43 	bl	80032e2 <LL_USART_IsEnabled>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d15e      	bne.n	8003720 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800366a:	f023 030c 	bic.w	r3, r3, #12
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	6851      	ldr	r1, [r2, #4]
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	68d2      	ldr	r2, [r2, #12]
 8003676:	4311      	orrs	r1, r2
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	6912      	ldr	r2, [r2, #16]
 800367c:	4311      	orrs	r1, r2
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	6992      	ldr	r2, [r2, #24]
 8003682:	430a      	orrs	r2, r1
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	4619      	mov	r1, r3
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff fe3a 	bl	800330a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	4619      	mov	r1, r3
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff fe47 	bl	8003330 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80036a2:	f107 0308 	add.w	r3, r7, #8
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff f9ae 	bl	8002a08 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a1f      	ldr	r2, [pc, #124]	; (800372c <LL_USART_Init+0xe8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d102      	bne.n	80036ba <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	e021      	b.n	80036fe <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a1c      	ldr	r2, [pc, #112]	; (8003730 <LL_USART_Init+0xec>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d102      	bne.n	80036c8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	61bb      	str	r3, [r7, #24]
 80036c6:	e01a      	b.n	80036fe <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a1a      	ldr	r2, [pc, #104]	; (8003734 <LL_USART_Init+0xf0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d102      	bne.n	80036d6 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	e013      	b.n	80036fe <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a17      	ldr	r2, [pc, #92]	; (8003738 <LL_USART_Init+0xf4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d102      	bne.n	80036e4 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	e00c      	b.n	80036fe <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <LL_USART_Init+0xf8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d102      	bne.n	80036f2 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	e005      	b.n	80036fe <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a12      	ldr	r2, [pc, #72]	; (8003740 <LL_USART_Init+0xfc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00d      	beq.n	8003720 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d009      	beq.n	8003720 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800370c:	2300      	movs	r3, #0
 800370e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	699a      	ldr	r2, [r3, #24]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69b9      	ldr	r1, [r7, #24]
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff fe1c 	bl	8003358 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003720:	7ffb      	ldrb	r3, [r7, #31]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40011000 	.word	0x40011000
 8003730:	40004400 	.word	0x40004400
 8003734:	40004800 	.word	0x40004800
 8003738:	40011400 	.word	0x40011400
 800373c:	40004c00 	.word	0x40004c00
 8003740:	40005000 	.word	0x40005000

08003744 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800374c:	4a04      	ldr	r2, [pc, #16]	; (8003760 <LL_SetSystemCoreClock+0x1c>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6013      	str	r3, [r2, #0]
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	2000000c 	.word	0x2000000c

08003764 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800377a:	f3ef 8305 	mrs	r3, IPSR
 800377e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003780:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10f      	bne.n	80037a6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003786:	f3ef 8310 	mrs	r3, PRIMASK
 800378a:	607b      	str	r3, [r7, #4]
  return(result);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d105      	bne.n	800379e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003792:	f3ef 8311 	mrs	r3, BASEPRI
 8003796:	603b      	str	r3, [r7, #0]
  return(result);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <osKernelInitialize+0x3a>
 800379e:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <osKernelInitialize+0x64>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d103      	bne.n	80037ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80037a6:	f06f 0305 	mvn.w	r3, #5
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e00c      	b.n	80037c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <osKernelInitialize+0x64>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d105      	bne.n	80037c2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80037b6:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <osKernelInitialize+0x64>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	e002      	b.n	80037c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80037c2:	f04f 33ff 	mov.w	r3, #4294967295
 80037c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80037c8:	68fb      	ldr	r3, [r7, #12]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000648 	.word	0x20000648

080037dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037e2:	f3ef 8305 	mrs	r3, IPSR
 80037e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80037e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ee:	f3ef 8310 	mrs	r3, PRIMASK
 80037f2:	607b      	str	r3, [r7, #4]
  return(result);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d105      	bne.n	8003806 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037fa:	f3ef 8311 	mrs	r3, BASEPRI
 80037fe:	603b      	str	r3, [r7, #0]
  return(result);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <osKernelStart+0x3a>
 8003806:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <osKernelStart+0x68>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d103      	bne.n	8003816 <osKernelStart+0x3a>
    stat = osErrorISR;
 800380e:	f06f 0305 	mvn.w	r3, #5
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	e010      	b.n	8003838 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <osKernelStart+0x68>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d109      	bne.n	8003832 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800381e:	f7ff ffa1 	bl	8003764 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <osKernelStart+0x68>)
 8003824:	2202      	movs	r2, #2
 8003826:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003828:	f001 fc86 	bl	8005138 <vTaskStartScheduler>
      stat = osOK;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e002      	b.n	8003838 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
 8003836:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003838:	68fb      	ldr	r3, [r7, #12]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000648 	.word	0x20000648

08003848 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003848:	b580      	push	{r7, lr}
 800384a:	b090      	sub	sp, #64	; 0x40
 800384c:	af04      	add	r7, sp, #16
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003858:	f3ef 8305 	mrs	r3, IPSR
 800385c:	61fb      	str	r3, [r7, #28]
  return(result);
 800385e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003860:	2b00      	cmp	r3, #0
 8003862:	f040 808f 	bne.w	8003984 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003866:	f3ef 8310 	mrs	r3, PRIMASK
 800386a:	61bb      	str	r3, [r7, #24]
  return(result);
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d105      	bne.n	800387e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003872:	f3ef 8311 	mrs	r3, BASEPRI
 8003876:	617b      	str	r3, [r7, #20]
  return(result);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <osThreadNew+0x3e>
 800387e:	4b44      	ldr	r3, [pc, #272]	; (8003990 <osThreadNew+0x148>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d07e      	beq.n	8003984 <osThreadNew+0x13c>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d07b      	beq.n	8003984 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003890:	2318      	movs	r3, #24
 8003892:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003894:	2300      	movs	r3, #0
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003898:	f04f 33ff 	mov.w	r3, #4294967295
 800389c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d045      	beq.n	8003930 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <osThreadNew+0x6a>
        name = attr->name;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <osThreadNew+0x90>
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	2b38      	cmp	r3, #56	; 0x38
 80038ca:	d805      	bhi.n	80038d8 <osThreadNew+0x90>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <osThreadNew+0x94>
        return (NULL);
 80038d8:	2300      	movs	r3, #0
 80038da:	e054      	b.n	8003986 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	089b      	lsrs	r3, r3, #2
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00e      	beq.n	8003912 <osThreadNew+0xca>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2b5b      	cmp	r3, #91	; 0x5b
 80038fa:	d90a      	bls.n	8003912 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003900:	2b00      	cmp	r3, #0
 8003902:	d006      	beq.n	8003912 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <osThreadNew+0xca>
        mem = 1;
 800390c:	2301      	movs	r3, #1
 800390e:	623b      	str	r3, [r7, #32]
 8003910:	e010      	b.n	8003934 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10c      	bne.n	8003934 <osThreadNew+0xec>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d108      	bne.n	8003934 <osThreadNew+0xec>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d104      	bne.n	8003934 <osThreadNew+0xec>
          mem = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	623b      	str	r3, [r7, #32]
 800392e:	e001      	b.n	8003934 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d110      	bne.n	800395c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003942:	9202      	str	r2, [sp, #8]
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800394e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f001 fa1f 	bl	8004d94 <xTaskCreateStatic>
 8003956:	4603      	mov	r3, r0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	e013      	b.n	8003984 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d110      	bne.n	8003984 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	b29a      	uxth	r2, r3
 8003966:	f107 0310 	add.w	r3, r7, #16
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f001 fa67 	bl	8004e48 <xTaskCreate>
 800397a:	4603      	mov	r3, r0
 800397c:	2b01      	cmp	r3, #1
 800397e:	d001      	beq.n	8003984 <osThreadNew+0x13c>
          hTask = NULL;
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003984:	693b      	ldr	r3, [r7, #16]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3730      	adds	r7, #48	; 0x30
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000648 	.word	0x20000648

08003994 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800399c:	f3ef 8305 	mrs	r3, IPSR
 80039a0:	613b      	str	r3, [r7, #16]
  return(result);
 80039a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10f      	bne.n	80039c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a8:	f3ef 8310 	mrs	r3, PRIMASK
 80039ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d105      	bne.n	80039c0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039b4:	f3ef 8311 	mrs	r3, BASEPRI
 80039b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <osDelay+0x3c>
 80039c0:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <osDelay+0x58>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d103      	bne.n	80039d0 <osDelay+0x3c>
    stat = osErrorISR;
 80039c8:	f06f 0305 	mvn.w	r3, #5
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	e007      	b.n	80039e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f001 fb78 	bl	80050d0 <vTaskDelay>
    }
  }

  return (stat);
 80039e0:	697b      	ldr	r3, [r7, #20]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20000648 	.word	0x20000648

080039f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4a07      	ldr	r2, [pc, #28]	; (8003a1c <vApplicationGetIdleTaskMemory+0x2c>)
 8003a00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4a06      	ldr	r2, [pc, #24]	; (8003a20 <vApplicationGetIdleTaskMemory+0x30>)
 8003a06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2280      	movs	r2, #128	; 0x80
 8003a0c:	601a      	str	r2, [r3, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	2000064c 	.word	0x2000064c
 8003a20:	200006a8 	.word	0x200006a8

08003a24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a07      	ldr	r2, [pc, #28]	; (8003a50 <vApplicationGetTimerTaskMemory+0x2c>)
 8003a34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	4a06      	ldr	r2, [pc, #24]	; (8003a54 <vApplicationGetTimerTaskMemory+0x30>)
 8003a3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a42:	601a      	str	r2, [r3, #0]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	200008a8 	.word	0x200008a8
 8003a54:	20000904 	.word	0x20000904

08003a58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f103 0208 	add.w	r2, r3, #8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f103 0208 	add.w	r2, r3, #8
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f103 0208 	add.w	r2, r3, #8
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	601a      	str	r2, [r3, #0]
}
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003afa:	b480      	push	{r7}
 8003afc:	b085      	sub	sp, #20
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b10:	d103      	bne.n	8003b1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	e00c      	b.n	8003b34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	e002      	b.n	8003b28 <vListInsert+0x2e>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d9f6      	bls.n	8003b22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	601a      	str	r2, [r3, #0]
}
 8003b60:	bf00      	nop
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6892      	ldr	r2, [r2, #8]
 8003b82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6852      	ldr	r2, [r2, #4]
 8003b8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d103      	bne.n	8003ba0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	1e5a      	subs	r2, r3, #1
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3b04      	subs	r3, #4
 8003bd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	3b04      	subs	r3, #4
 8003bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f023 0201 	bic.w	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3b04      	subs	r3, #4
 8003bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003bf0:	4a0c      	ldr	r2, [pc, #48]	; (8003c24 <pxPortInitialiseStack+0x64>)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3b14      	subs	r3, #20
 8003bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3b04      	subs	r3, #4
 8003c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f06f 0202 	mvn.w	r2, #2
 8003c0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3b20      	subs	r3, #32
 8003c14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c16:	68fb      	ldr	r3, [r7, #12]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	08003c29 	.word	0x08003c29

08003c28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c32:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <prvTaskExitError+0x50>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3a:	d009      	beq.n	8003c50 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	e7fe      	b.n	8003c4e <prvTaskExitError+0x26>
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c62:	bf00      	nop
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0fc      	beq.n	8003c64 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000004 	.word	0x20000004
 8003c7c:	00000000 	.word	0x00000000

08003c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c80:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <pxCurrentTCBConst2>)
 8003c82:	6819      	ldr	r1, [r3, #0]
 8003c84:	6808      	ldr	r0, [r1, #0]
 8003c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8a:	f380 8809 	msr	PSP, r0
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f04f 0000 	mov.w	r0, #0
 8003c96:	f380 8811 	msr	BASEPRI, r0
 8003c9a:	4770      	bx	lr
 8003c9c:	f3af 8000 	nop.w

08003ca0 <pxCurrentTCBConst2>:
 8003ca0:	20008524 	.word	0x20008524
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop

08003ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ca8:	4808      	ldr	r0, [pc, #32]	; (8003ccc <prvPortStartFirstTask+0x24>)
 8003caa:	6800      	ldr	r0, [r0, #0]
 8003cac:	6800      	ldr	r0, [r0, #0]
 8003cae:	f380 8808 	msr	MSP, r0
 8003cb2:	f04f 0000 	mov.w	r0, #0
 8003cb6:	f380 8814 	msr	CONTROL, r0
 8003cba:	b662      	cpsie	i
 8003cbc:	b661      	cpsie	f
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	df00      	svc	0
 8003cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003cca:	bf00      	nop
 8003ccc:	e000ed08 	.word	0xe000ed08

08003cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003cd6:	4b44      	ldr	r3, [pc, #272]	; (8003de8 <xPortStartScheduler+0x118>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a44      	ldr	r2, [pc, #272]	; (8003dec <xPortStartScheduler+0x11c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d109      	bne.n	8003cf4 <xPortStartScheduler+0x24>
 8003ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	e7fe      	b.n	8003cf2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003cf4:	4b3c      	ldr	r3, [pc, #240]	; (8003de8 <xPortStartScheduler+0x118>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a3d      	ldr	r2, [pc, #244]	; (8003df0 <xPortStartScheduler+0x120>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d109      	bne.n	8003d12 <xPortStartScheduler+0x42>
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	e7fe      	b.n	8003d10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d12:	4b38      	ldr	r3, [pc, #224]	; (8003df4 <xPortStartScheduler+0x124>)
 8003d14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	22ff      	movs	r2, #255	; 0xff
 8003d22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	4b30      	ldr	r3, [pc, #192]	; (8003df8 <xPortStartScheduler+0x128>)
 8003d38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d3a:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <xPortStartScheduler+0x12c>)
 8003d3c:	2207      	movs	r2, #7
 8003d3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d40:	e009      	b.n	8003d56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003d42:	4b2e      	ldr	r3, [pc, #184]	; (8003dfc <xPortStartScheduler+0x12c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	4a2c      	ldr	r2, [pc, #176]	; (8003dfc <xPortStartScheduler+0x12c>)
 8003d4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5e:	2b80      	cmp	r3, #128	; 0x80
 8003d60:	d0ef      	beq.n	8003d42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d62:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <xPortStartScheduler+0x12c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f1c3 0307 	rsb	r3, r3, #7
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d009      	beq.n	8003d82 <xPortStartScheduler+0xb2>
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	e7fe      	b.n	8003d80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d82:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <xPortStartScheduler+0x12c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	4a1c      	ldr	r2, [pc, #112]	; (8003dfc <xPortStartScheduler+0x12c>)
 8003d8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <xPortStartScheduler+0x12c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d94:	4a19      	ldr	r2, [pc, #100]	; (8003dfc <xPortStartScheduler+0x12c>)
 8003d96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003da0:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <xPortStartScheduler+0x130>)
 8003da2:	4b17      	ldr	r3, [pc, #92]	; (8003e00 <xPortStartScheduler+0x130>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003daa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003dac:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <xPortStartScheduler+0x130>)
 8003dae:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <xPortStartScheduler+0x130>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003db6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003db8:	f000 f8d6 	bl	8003f68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003dbc:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <xPortStartScheduler+0x134>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003dc2:	f000 f8f5 	bl	8003fb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003dc6:	4a10      	ldr	r2, [pc, #64]	; (8003e08 <xPortStartScheduler+0x138>)
 8003dc8:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <xPortStartScheduler+0x138>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003dd0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003dd2:	f7ff ff69 	bl	8003ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003dd6:	f001 fb85 	bl	80054e4 <vTaskSwitchContext>
	prvTaskExitError();
 8003dda:	f7ff ff25 	bl	8003c28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	e000ed00 	.word	0xe000ed00
 8003dec:	410fc271 	.word	0x410fc271
 8003df0:	410fc270 	.word	0x410fc270
 8003df4:	e000e400 	.word	0xe000e400
 8003df8:	20000d04 	.word	0x20000d04
 8003dfc:	20000d08 	.word	0x20000d08
 8003e00:	e000ed20 	.word	0xe000ed20
 8003e04:	20000004 	.word	0x20000004
 8003e08:	e000ef34 	.word	0xe000ef34

08003e0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e24:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <vPortEnterCritical+0x54>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	4a0d      	ldr	r2, [pc, #52]	; (8003e60 <vPortEnterCritical+0x54>)
 8003e2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e2e:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <vPortEnterCritical+0x54>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d10e      	bne.n	8003e54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e36:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <vPortEnterCritical+0x58>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <vPortEnterCritical+0x48>
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	e7fe      	b.n	8003e52 <vPortEnterCritical+0x46>
	}
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	20000004 	.word	0x20000004
 8003e64:	e000ed04 	.word	0xe000ed04

08003e68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e6e:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <vPortExitCritical+0x4c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <vPortExitCritical+0x22>
 8003e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	607b      	str	r3, [r7, #4]
 8003e88:	e7fe      	b.n	8003e88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <vPortExitCritical+0x4c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	4a08      	ldr	r2, [pc, #32]	; (8003eb4 <vPortExitCritical+0x4c>)
 8003e92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e94:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <vPortExitCritical+0x4c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d104      	bne.n	8003ea6 <vPortExitCritical+0x3e>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000004 	.word	0x20000004
	...

08003ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ec0:	f3ef 8009 	mrs	r0, PSP
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	4b15      	ldr	r3, [pc, #84]	; (8003f20 <pxCurrentTCBConst>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	f01e 0f10 	tst.w	lr, #16
 8003ed0:	bf08      	it	eq
 8003ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eda:	6010      	str	r0, [r2, #0]
 8003edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ee4:	f380 8811 	msr	BASEPRI, r0
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f001 faf8 	bl	80054e4 <vTaskSwitchContext>
 8003ef4:	f04f 0000 	mov.w	r0, #0
 8003ef8:	f380 8811 	msr	BASEPRI, r0
 8003efc:	bc09      	pop	{r0, r3}
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	6808      	ldr	r0, [r1, #0]
 8003f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f06:	f01e 0f10 	tst.w	lr, #16
 8003f0a:	bf08      	it	eq
 8003f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f10:	f380 8809 	msr	PSP, r0
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	f3af 8000 	nop.w

08003f20 <pxCurrentTCBConst>:
 8003f20:	20008524 	.word	0x20008524
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop

08003f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f40:	f001 fa18 	bl	8005374 <xTaskIncrementTick>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f4a:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <SysTick_Handler+0x3c>)
 8003f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	2300      	movs	r3, #0
 8003f54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f5c:	bf00      	nop
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	e000ed04 	.word	0xe000ed04

08003f68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <vPortSetupTimerInterrupt+0x34>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f72:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <vPortSetupTimerInterrupt+0x38>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f78:	4a0a      	ldr	r2, [pc, #40]	; (8003fa4 <vPortSetupTimerInterrupt+0x3c>)
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <vPortSetupTimerInterrupt+0x40>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	490b      	ldr	r1, [pc, #44]	; (8003fac <vPortSetupTimerInterrupt+0x44>)
 8003f80:	fba1 1303 	umull	r1, r3, r1, r3
 8003f84:	099b      	lsrs	r3, r3, #6
 8003f86:	3b01      	subs	r3, #1
 8003f88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f8a:	4b04      	ldr	r3, [pc, #16]	; (8003f9c <vPortSetupTimerInterrupt+0x34>)
 8003f8c:	2207      	movs	r2, #7
 8003f8e:	601a      	str	r2, [r3, #0]
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	e000e010 	.word	0xe000e010
 8003fa0:	e000e018 	.word	0xe000e018
 8003fa4:	e000e014 	.word	0xe000e014
 8003fa8:	2000000c 	.word	0x2000000c
 8003fac:	10624dd3 	.word	0x10624dd3

08003fb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003fb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003fc0 <vPortEnableVFP+0x10>
 8003fb4:	6801      	ldr	r1, [r0, #0]
 8003fb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003fba:	6001      	str	r1, [r0, #0]
 8003fbc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003fbe:	bf00      	nop
 8003fc0:	e000ed88 	.word	0xe000ed88

08003fc4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003fca:	f3ef 8305 	mrs	r3, IPSR
 8003fce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b0f      	cmp	r3, #15
 8003fd4:	d913      	bls.n	8003ffe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003fd6:	4a16      	ldr	r2, [pc, #88]	; (8004030 <vPortValidateInterruptPriority+0x6c>)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003fe0:	4b14      	ldr	r3, [pc, #80]	; (8004034 <vPortValidateInterruptPriority+0x70>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	7afa      	ldrb	r2, [r7, #11]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d209      	bcs.n	8003ffe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	607b      	str	r3, [r7, #4]
 8003ffc:	e7fe      	b.n	8003ffc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <vPortValidateInterruptPriority+0x74>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004006:	4b0d      	ldr	r3, [pc, #52]	; (800403c <vPortValidateInterruptPriority+0x78>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d909      	bls.n	8004022 <vPortValidateInterruptPriority+0x5e>
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	e7fe      	b.n	8004020 <vPortValidateInterruptPriority+0x5c>
	}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	e000e3f0 	.word	0xe000e3f0
 8004034:	20000d04 	.word	0x20000d04
 8004038:	e000ed0c 	.word	0xe000ed0c
 800403c:	20000d08 	.word	0x20000d08

08004040 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	; 0x28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004048:	2300      	movs	r3, #0
 800404a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800404c:	f001 f8d8 	bl	8005200 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004050:	4b57      	ldr	r3, [pc, #348]	; (80041b0 <pvPortMalloc+0x170>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004058:	f000 f90c 	bl	8004274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800405c:	4b55      	ldr	r3, [pc, #340]	; (80041b4 <pvPortMalloc+0x174>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4013      	ands	r3, r2
 8004064:	2b00      	cmp	r3, #0
 8004066:	f040 808c 	bne.w	8004182 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01c      	beq.n	80040aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004070:	2208      	movs	r2, #8
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4413      	add	r3, r2
 8004076:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	2b00      	cmp	r3, #0
 8004080:	d013      	beq.n	80040aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f023 0307 	bic.w	r3, r3, #7
 8004088:	3308      	adds	r3, #8
 800408a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <pvPortMalloc+0x6a>
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	e7fe      	b.n	80040a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d068      	beq.n	8004182 <pvPortMalloc+0x142>
 80040b0:	4b41      	ldr	r3, [pc, #260]	; (80041b8 <pvPortMalloc+0x178>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d863      	bhi.n	8004182 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80040ba:	4b40      	ldr	r3, [pc, #256]	; (80041bc <pvPortMalloc+0x17c>)
 80040bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80040be:	4b3f      	ldr	r3, [pc, #252]	; (80041bc <pvPortMalloc+0x17c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040c4:	e004      	b.n	80040d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d203      	bcs.n	80040e2 <pvPortMalloc+0xa2>
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f1      	bne.n	80040c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040e2:	4b33      	ldr	r3, [pc, #204]	; (80041b0 <pvPortMalloc+0x170>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d04a      	beq.n	8004182 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2208      	movs	r2, #8
 80040f2:	4413      	add	r3, r2
 80040f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	1ad2      	subs	r2, r2, r3
 8004106:	2308      	movs	r3, #8
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	429a      	cmp	r2, r3
 800410c:	d91e      	bls.n	800414c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800410e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4413      	add	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <pvPortMalloc+0xf4>
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	e7fe      	b.n	8004132 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	1ad2      	subs	r2, r2, r3
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004146:	69b8      	ldr	r0, [r7, #24]
 8004148:	f000 f8f6 	bl	8004338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800414c:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <pvPortMalloc+0x178>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	4a18      	ldr	r2, [pc, #96]	; (80041b8 <pvPortMalloc+0x178>)
 8004158:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800415a:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <pvPortMalloc+0x178>)
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <pvPortMalloc+0x180>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d203      	bcs.n	800416e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004166:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <pvPortMalloc+0x178>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a15      	ldr	r2, [pc, #84]	; (80041c0 <pvPortMalloc+0x180>)
 800416c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <pvPortMalloc+0x174>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	431a      	orrs	r2, r3
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004182:	f001 f84b 	bl	800521c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <pvPortMalloc+0x164>
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e7fe      	b.n	80041a2 <pvPortMalloc+0x162>
	return pvReturn;
 80041a4:	69fb      	ldr	r3, [r7, #28]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3728      	adds	r7, #40	; 0x28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20008514 	.word	0x20008514
 80041b4:	20008520 	.word	0x20008520
 80041b8:	20008518 	.word	0x20008518
 80041bc:	2000850c 	.word	0x2000850c
 80041c0:	2000851c 	.word	0x2000851c

080041c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d046      	beq.n	8004264 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80041d6:	2308      	movs	r3, #8
 80041d8:	425b      	negs	r3, r3
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4413      	add	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	4b20      	ldr	r3, [pc, #128]	; (800426c <vPortFree+0xa8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <vPortFree+0x42>
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e7fe      	b.n	8004204 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <vPortFree+0x5e>
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	e7fe      	b.n	8004220 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	4b11      	ldr	r3, [pc, #68]	; (800426c <vPortFree+0xa8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4013      	ands	r3, r2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d019      	beq.n	8004264 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d115      	bne.n	8004264 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <vPortFree+0xa8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	43db      	mvns	r3, r3
 8004242:	401a      	ands	r2, r3
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004248:	f000 ffda 	bl	8005200 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	4b07      	ldr	r3, [pc, #28]	; (8004270 <vPortFree+0xac>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4413      	add	r3, r2
 8004256:	4a06      	ldr	r2, [pc, #24]	; (8004270 <vPortFree+0xac>)
 8004258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800425a:	6938      	ldr	r0, [r7, #16]
 800425c:	f000 f86c 	bl	8004338 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004260:	f000 ffdc 	bl	800521c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004264:	bf00      	nop
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20008520 	.word	0x20008520
 8004270:	20008518 	.word	0x20008518

08004274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800427a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800427e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004280:	4b27      	ldr	r3, [pc, #156]	; (8004320 <prvHeapInit+0xac>)
 8004282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00c      	beq.n	80042a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3307      	adds	r3, #7
 8004292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0307 	bic.w	r3, r3, #7
 800429a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	4a1f      	ldr	r2, [pc, #124]	; (8004320 <prvHeapInit+0xac>)
 80042a4:	4413      	add	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042ac:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <prvHeapInit+0xb0>)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042b2:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <prvHeapInit+0xb0>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4413      	add	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80042c0:	2208      	movs	r2, #8
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0307 	bic.w	r3, r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4a15      	ldr	r2, [pc, #84]	; (8004328 <prvHeapInit+0xb4>)
 80042d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80042d6:	4b14      	ldr	r3, [pc, #80]	; (8004328 <prvHeapInit+0xb4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <prvHeapInit+0xb4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	1ad2      	subs	r2, r2, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80042f4:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <prvHeapInit+0xb4>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a0a      	ldr	r2, [pc, #40]	; (800432c <prvHeapInit+0xb8>)
 8004302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4a09      	ldr	r2, [pc, #36]	; (8004330 <prvHeapInit+0xbc>)
 800430a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <prvHeapInit+0xc0>)
 800430e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004312:	601a      	str	r2, [r3, #0]
}
 8004314:	bf00      	nop
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	20000d0c 	.word	0x20000d0c
 8004324:	2000850c 	.word	0x2000850c
 8004328:	20008514 	.word	0x20008514
 800432c:	2000851c 	.word	0x2000851c
 8004330:	20008518 	.word	0x20008518
 8004334:	20008520 	.word	0x20008520

08004338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004340:	4b28      	ldr	r3, [pc, #160]	; (80043e4 <prvInsertBlockIntoFreeList+0xac>)
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e002      	b.n	800434c <prvInsertBlockIntoFreeList+0x14>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	d3f7      	bcc.n	8004346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	441a      	add	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	d108      	bne.n	800437a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	441a      	add	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	441a      	add	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d118      	bne.n	80043c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d00d      	beq.n	80043b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	441a      	add	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	e008      	b.n	80043c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <prvInsertBlockIntoFreeList+0xb0>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e003      	b.n	80043c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d002      	beq.n	80043d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	2000850c 	.word	0x2000850c
 80043e8:	20008514 	.word	0x20008514

080043ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <xQueueGenericReset+0x28>
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	e7fe      	b.n	8004412 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004414:	f7ff fcfa 	bl	8003e0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004420:	68f9      	ldr	r1, [r7, #12]
 8004422:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	441a      	add	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004444:	3b01      	subs	r3, #1
 8004446:	68f9      	ldr	r1, [r7, #12]
 8004448:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800444a:	fb01 f303 	mul.w	r3, r1, r3
 800444e:	441a      	add	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	22ff      	movs	r2, #255	; 0xff
 8004458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	22ff      	movs	r2, #255	; 0xff
 8004460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d114      	bne.n	8004494 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d01a      	beq.n	80044a8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	3310      	adds	r3, #16
 8004476:	4618      	mov	r0, r3
 8004478:	f001 f8de 	bl	8005638 <xTaskRemoveFromEventList>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d012      	beq.n	80044a8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004482:	4b0d      	ldr	r3, [pc, #52]	; (80044b8 <xQueueGenericReset+0xcc>)
 8004484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	e009      	b.n	80044a8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3310      	adds	r3, #16
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fadd 	bl	8003a58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3324      	adds	r3, #36	; 0x24
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fad8 	bl	8003a58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044a8:	f7ff fcde 	bl	8003e68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044ac:	2301      	movs	r3, #1
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08e      	sub	sp, #56	; 0x38
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d109      	bne.n	80044e4 <xQueueGenericCreateStatic+0x28>
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e2:	e7fe      	b.n	80044e2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <xQueueGenericCreateStatic+0x42>
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
 80044fc:	e7fe      	b.n	80044fc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <xQueueGenericCreateStatic+0x4e>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <xQueueGenericCreateStatic+0x52>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <xQueueGenericCreateStatic+0x54>
 800450e:	2300      	movs	r3, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d109      	bne.n	8004528 <xQueueGenericCreateStatic+0x6c>
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	623b      	str	r3, [r7, #32]
 8004526:	e7fe      	b.n	8004526 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d102      	bne.n	8004534 <xQueueGenericCreateStatic+0x78>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <xQueueGenericCreateStatic+0x7c>
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <xQueueGenericCreateStatic+0x7e>
 8004538:	2300      	movs	r3, #0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <xQueueGenericCreateStatic+0x96>
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	e7fe      	b.n	8004550 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004552:	2350      	movs	r3, #80	; 0x50
 8004554:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b50      	cmp	r3, #80	; 0x50
 800455a:	d009      	beq.n	8004570 <xQueueGenericCreateStatic+0xb4>
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	e7fe      	b.n	800456e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004570:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00d      	beq.n	8004598 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004584:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f805 	bl	80045a2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800459a:	4618      	mov	r0, r3
 800459c:	3730      	adds	r7, #48	; 0x30
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
 80045ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d103      	bne.n	80045be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	e002      	b.n	80045c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045d0:	2101      	movs	r1, #1
 80045d2:	69b8      	ldr	r0, [r7, #24]
 80045d4:	f7ff ff0a 	bl	80043ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	78fa      	ldrb	r2, [r7, #3]
 80045dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045e0:	bf00      	nop
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08e      	sub	sp, #56	; 0x38
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045f6:	2300      	movs	r3, #0
 80045f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	2b00      	cmp	r3, #0
 8004602:	d109      	bne.n	8004618 <xQueueGenericSend+0x30>
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
 8004616:	e7fe      	b.n	8004616 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <xQueueGenericSend+0x3e>
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <xQueueGenericSend+0x42>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <xQueueGenericSend+0x44>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d109      	bne.n	8004644 <xQueueGenericSend+0x5c>
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
 8004642:	e7fe      	b.n	8004642 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d103      	bne.n	8004652 <xQueueGenericSend+0x6a>
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <xQueueGenericSend+0x6e>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <xQueueGenericSend+0x70>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d109      	bne.n	8004670 <xQueueGenericSend+0x88>
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	623b      	str	r3, [r7, #32]
 800466e:	e7fe      	b.n	800466e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004670:	f001 f998 	bl	80059a4 <xTaskGetSchedulerState>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d102      	bne.n	8004680 <xQueueGenericSend+0x98>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <xQueueGenericSend+0x9c>
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <xQueueGenericSend+0x9e>
 8004684:	2300      	movs	r3, #0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <xQueueGenericSend+0xb6>
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	61fb      	str	r3, [r7, #28]
 800469c:	e7fe      	b.n	800469c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800469e:	f7ff fbb5 	bl	8003e0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d302      	bcc.n	80046b4 <xQueueGenericSend+0xcc>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d129      	bne.n	8004708 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	68b9      	ldr	r1, [r7, #8]
 80046b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ba:	f000 f9ff 	bl	8004abc <prvCopyDataToQueue>
 80046be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d010      	beq.n	80046ea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	3324      	adds	r3, #36	; 0x24
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 ffb3 	bl	8005638 <xTaskRemoveFromEventList>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d013      	beq.n	8004700 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046d8:	4b3f      	ldr	r3, [pc, #252]	; (80047d8 <xQueueGenericSend+0x1f0>)
 80046da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	e00a      	b.n	8004700 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046f0:	4b39      	ldr	r3, [pc, #228]	; (80047d8 <xQueueGenericSend+0x1f0>)
 80046f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004700:	f7ff fbb2 	bl	8003e68 <vPortExitCritical>
				return pdPASS;
 8004704:	2301      	movs	r3, #1
 8004706:	e063      	b.n	80047d0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d103      	bne.n	8004716 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800470e:	f7ff fbab 	bl	8003e68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004712:	2300      	movs	r3, #0
 8004714:	e05c      	b.n	80047d0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800471c:	f107 0314 	add.w	r3, r7, #20
 8004720:	4618      	mov	r0, r3
 8004722:	f000 ffeb 	bl	80056fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004726:	2301      	movs	r3, #1
 8004728:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800472a:	f7ff fb9d 	bl	8003e68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800472e:	f000 fd67 	bl	8005200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004732:	f7ff fb6b 	bl	8003e0c <vPortEnterCritical>
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800473c:	b25b      	sxtb	r3, r3
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d103      	bne.n	800474c <xQueueGenericSend+0x164>
 8004744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004752:	b25b      	sxtb	r3, r3
 8004754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004758:	d103      	bne.n	8004762 <xQueueGenericSend+0x17a>
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004762:	f7ff fb81 	bl	8003e68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004766:	1d3a      	adds	r2, r7, #4
 8004768:	f107 0314 	add.w	r3, r7, #20
 800476c:	4611      	mov	r1, r2
 800476e:	4618      	mov	r0, r3
 8004770:	f000 ffda 	bl	8005728 <xTaskCheckForTimeOut>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d124      	bne.n	80047c4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800477a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800477c:	f000 fa96 	bl	8004cac <prvIsQueueFull>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d018      	beq.n	80047b8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	3310      	adds	r3, #16
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f000 ff04 	bl	800559c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004796:	f000 fa21 	bl	8004bdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800479a:	f000 fd3f 	bl	800521c <xTaskResumeAll>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f47f af7c 	bne.w	800469e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80047a6:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <xQueueGenericSend+0x1f0>)
 80047a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	e772      	b.n	800469e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ba:	f000 fa0f 	bl	8004bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047be:	f000 fd2d 	bl	800521c <xTaskResumeAll>
 80047c2:	e76c      	b.n	800469e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047c6:	f000 fa09 	bl	8004bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047ca:	f000 fd27 	bl	800521c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3738      	adds	r7, #56	; 0x38
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08e      	sub	sp, #56	; 0x38
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d109      	bne.n	8004808 <xQueueGenericSendFromISR+0x2c>
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
 8004806:	e7fe      	b.n	8004806 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d103      	bne.n	8004816 <xQueueGenericSendFromISR+0x3a>
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <xQueueGenericSendFromISR+0x3e>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <xQueueGenericSendFromISR+0x40>
 800481a:	2300      	movs	r3, #0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d109      	bne.n	8004834 <xQueueGenericSendFromISR+0x58>
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	623b      	str	r3, [r7, #32]
 8004832:	e7fe      	b.n	8004832 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d103      	bne.n	8004842 <xQueueGenericSendFromISR+0x66>
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <xQueueGenericSendFromISR+0x6a>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <xQueueGenericSendFromISR+0x6c>
 8004846:	2300      	movs	r3, #0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d109      	bne.n	8004860 <xQueueGenericSendFromISR+0x84>
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	e7fe      	b.n	800485e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004860:	f7ff fbb0 	bl	8003fc4 <vPortValidateInterruptPriority>
	__asm volatile
 8004864:	f3ef 8211 	mrs	r2, BASEPRI
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	61ba      	str	r2, [r7, #24]
 800487a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800487c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800487e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004888:	429a      	cmp	r2, r3
 800488a:	d302      	bcc.n	8004892 <xQueueGenericSendFromISR+0xb6>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d12c      	bne.n	80048ec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	68b9      	ldr	r1, [r7, #8]
 80048a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048a2:	f000 f90b 	bl	8004abc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80048aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ae:	d112      	bne.n	80048d6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d016      	beq.n	80048e6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	3324      	adds	r3, #36	; 0x24
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 febb 	bl	8005638 <xTaskRemoveFromEventList>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00e      	beq.n	80048e6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00b      	beq.n	80048e6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	e007      	b.n	80048e6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048da:	3301      	adds	r3, #1
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	b25a      	sxtb	r2, r3
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80048e6:	2301      	movs	r3, #1
 80048e8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80048ea:	e001      	b.n	80048f0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	637b      	str	r3, [r7, #52]	; 0x34
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3738      	adds	r7, #56	; 0x38
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08c      	sub	sp, #48	; 0x30
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004910:	2300      	movs	r3, #0
 8004912:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491a:	2b00      	cmp	r3, #0
 800491c:	d109      	bne.n	8004932 <xQueueReceive+0x2e>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	623b      	str	r3, [r7, #32]
 8004930:	e7fe      	b.n	8004930 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d103      	bne.n	8004940 <xQueueReceive+0x3c>
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <xQueueReceive+0x40>
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <xQueueReceive+0x42>
 8004944:	2300      	movs	r3, #0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <xQueueReceive+0x5a>
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	e7fe      	b.n	800495c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800495e:	f001 f821 	bl	80059a4 <xTaskGetSchedulerState>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <xQueueReceive+0x6a>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <xQueueReceive+0x6e>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <xQueueReceive+0x70>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d109      	bne.n	800498c <xQueueReceive+0x88>
 8004978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	e7fe      	b.n	800498a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800498c:	f7ff fa3e 	bl	8003e0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01f      	beq.n	80049dc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800499c:	68b9      	ldr	r1, [r7, #8]
 800499e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049a0:	f000 f8f6 	bl	8004b90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	1e5a      	subs	r2, r3, #1
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00f      	beq.n	80049d4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	3310      	adds	r3, #16
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fe3d 	bl	8005638 <xTaskRemoveFromEventList>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049c4:	4b3c      	ldr	r3, [pc, #240]	; (8004ab8 <xQueueReceive+0x1b4>)
 80049c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049d4:	f7ff fa48 	bl	8003e68 <vPortExitCritical>
				return pdPASS;
 80049d8:	2301      	movs	r3, #1
 80049da:	e069      	b.n	8004ab0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049e2:	f7ff fa41 	bl	8003e68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e062      	b.n	8004ab0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d106      	bne.n	80049fe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049f0:	f107 0310 	add.w	r3, r7, #16
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fe81 	bl	80056fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049fa:	2301      	movs	r3, #1
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049fe:	f7ff fa33 	bl	8003e68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a02:	f000 fbfd 	bl	8005200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a06:	f7ff fa01 	bl	8003e0c <vPortEnterCritical>
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a10:	b25b      	sxtb	r3, r3
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	d103      	bne.n	8004a20 <xQueueReceive+0x11c>
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a26:	b25b      	sxtb	r3, r3
 8004a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2c:	d103      	bne.n	8004a36 <xQueueReceive+0x132>
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a36:	f7ff fa17 	bl	8003e68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a3a:	1d3a      	adds	r2, r7, #4
 8004a3c:	f107 0310 	add.w	r3, r7, #16
 8004a40:	4611      	mov	r1, r2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fe70 	bl	8005728 <xTaskCheckForTimeOut>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d123      	bne.n	8004a96 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a50:	f000 f916 	bl	8004c80 <prvIsQueueEmpty>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d017      	beq.n	8004a8a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	3324      	adds	r3, #36	; 0x24
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4611      	mov	r1, r2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fd9a 	bl	800559c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a6a:	f000 f8b7 	bl	8004bdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a6e:	f000 fbd5 	bl	800521c <xTaskResumeAll>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d189      	bne.n	800498c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004a78:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <xQueueReceive+0x1b4>)
 8004a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	e780      	b.n	800498c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a8c:	f000 f8a6 	bl	8004bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a90:	f000 fbc4 	bl	800521c <xTaskResumeAll>
 8004a94:	e77a      	b.n	800498c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a98:	f000 f8a0 	bl	8004bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a9c:	f000 fbbe 	bl	800521c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa2:	f000 f8ed 	bl	8004c80 <prvIsQueueEmpty>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f43f af6f 	beq.w	800498c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004aae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3730      	adds	r7, #48	; 0x30
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10d      	bne.n	8004af6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d14d      	bne.n	8004b7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 ff7a 	bl	80059e0 <xTaskPriorityDisinherit>
 8004aec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	609a      	str	r2, [r3, #8]
 8004af4:	e043      	b.n	8004b7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d119      	bne.n	8004b30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6858      	ldr	r0, [r3, #4]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	461a      	mov	r2, r3
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	f003 fc19 	bl	800833e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	441a      	add	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d32b      	bcc.n	8004b7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	605a      	str	r2, [r3, #4]
 8004b2e:	e026      	b.n	8004b7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	68d8      	ldr	r0, [r3, #12]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	461a      	mov	r2, r3
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	f003 fbff 	bl	800833e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	425b      	negs	r3, r3
 8004b4a:	441a      	add	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d207      	bcs.n	8004b6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	425b      	negs	r3, r3
 8004b66:	441a      	add	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d105      	bne.n	8004b7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b86:	697b      	ldr	r3, [r7, #20]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d018      	beq.n	8004bd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	441a      	add	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d303      	bcc.n	8004bc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68d9      	ldr	r1, [r3, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	461a      	mov	r2, r3
 8004bce:	6838      	ldr	r0, [r7, #0]
 8004bd0:	f003 fbb5 	bl	800833e <memcpy>
	}
}
 8004bd4:	bf00      	nop
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004be4:	f7ff f912 	bl	8003e0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bf0:	e011      	b.n	8004c16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d012      	beq.n	8004c20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3324      	adds	r3, #36	; 0x24
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fd1a 	bl	8005638 <xTaskRemoveFromEventList>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c0a:	f000 fded 	bl	80057e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	dce9      	bgt.n	8004bf2 <prvUnlockQueue+0x16>
 8004c1e:	e000      	b.n	8004c22 <prvUnlockQueue+0x46>
					break;
 8004c20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	22ff      	movs	r2, #255	; 0xff
 8004c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c2a:	f7ff f91d 	bl	8003e68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c2e:	f7ff f8ed 	bl	8003e0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c3a:	e011      	b.n	8004c60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d012      	beq.n	8004c6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3310      	adds	r3, #16
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fcf5 	bl	8005638 <xTaskRemoveFromEventList>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c54:	f000 fdc8 	bl	80057e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c58:	7bbb      	ldrb	r3, [r7, #14]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	dce9      	bgt.n	8004c3c <prvUnlockQueue+0x60>
 8004c68:	e000      	b.n	8004c6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	22ff      	movs	r2, #255	; 0xff
 8004c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c74:	f7ff f8f8 	bl	8003e68 <vPortExitCritical>
}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c88:	f7ff f8c0 	bl	8003e0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c94:	2301      	movs	r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e001      	b.n	8004c9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c9e:	f7ff f8e3 	bl	8003e68 <vPortExitCritical>

	return xReturn;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cb4:	f7ff f8aa 	bl	8003e0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d102      	bne.n	8004cca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	e001      	b.n	8004cce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cce:	f7ff f8cb 	bl	8003e68 <vPortExitCritical>

	return xReturn;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	e014      	b.n	8004d16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004cec:	4a0e      	ldr	r2, [pc, #56]	; (8004d28 <vQueueAddToRegistry+0x4c>)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10b      	bne.n	8004d10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004cf8:	490b      	ldr	r1, [pc, #44]	; (8004d28 <vQueueAddToRegistry+0x4c>)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d02:	4a09      	ldr	r2, [pc, #36]	; (8004d28 <vQueueAddToRegistry+0x4c>)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	4413      	add	r3, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d0e:	e005      	b.n	8004d1c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3301      	adds	r3, #1
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b07      	cmp	r3, #7
 8004d1a:	d9e7      	bls.n	8004cec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	2000a12c 	.word	0x2000a12c

08004d2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d3c:	f7ff f866 	bl	8003e0c <vPortEnterCritical>
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d46:	b25b      	sxtb	r3, r3
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4c:	d103      	bne.n	8004d56 <vQueueWaitForMessageRestricted+0x2a>
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d5c:	b25b      	sxtb	r3, r3
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d103      	bne.n	8004d6c <vQueueWaitForMessageRestricted+0x40>
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d6c:	f7ff f87c 	bl	8003e68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	3324      	adds	r3, #36	; 0x24
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	68b9      	ldr	r1, [r7, #8]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fc2f 	bl	80055e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d86:	6978      	ldr	r0, [r7, #20]
 8004d88:	f7ff ff28 	bl	8004bdc <prvUnlockQueue>
	}
 8004d8c:	bf00      	nop
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08e      	sub	sp, #56	; 0x38
 8004d98:	af04      	add	r7, sp, #16
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d109      	bne.n	8004dbc <xTaskCreateStatic+0x28>
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	623b      	str	r3, [r7, #32]
 8004dba:	e7fe      	b.n	8004dba <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <xTaskCreateStatic+0x42>
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	e7fe      	b.n	8004dd4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004dd6:	235c      	movs	r3, #92	; 0x5c
 8004dd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b5c      	cmp	r3, #92	; 0x5c
 8004dde:	d009      	beq.n	8004df4 <xTaskCreateStatic+0x60>
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	e7fe      	b.n	8004df2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004df4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d01e      	beq.n	8004e3a <xTaskCreateStatic+0xa6>
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d01b      	beq.n	8004e3a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e14:	2300      	movs	r3, #0
 8004e16:	9303      	str	r3, [sp, #12]
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	9302      	str	r3, [sp, #8]
 8004e1c:	f107 0314 	add.w	r3, r7, #20
 8004e20:	9301      	str	r3, [sp, #4]
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f850 	bl	8004ed2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e34:	f000 f8dc 	bl	8004ff0 <prvAddNewTaskToReadyList>
 8004e38:	e001      	b.n	8004e3e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e3e:	697b      	ldr	r3, [r7, #20]
	}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3728      	adds	r7, #40	; 0x28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08c      	sub	sp, #48	; 0x30
 8004e4c:	af04      	add	r7, sp, #16
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	4613      	mov	r3, r2
 8004e56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff f8ef 	bl	8004040 <pvPortMalloc>
 8004e62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00e      	beq.n	8004e88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e6a:	205c      	movs	r0, #92	; 0x5c
 8004e6c:	f7ff f8e8 	bl	8004040 <pvPortMalloc>
 8004e70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30
 8004e7e:	e005      	b.n	8004e8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e80:	6978      	ldr	r0, [r7, #20]
 8004e82:	f7ff f99f 	bl	80041c4 <vPortFree>
 8004e86:	e001      	b.n	8004e8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d017      	beq.n	8004ec2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e9a:	88fa      	ldrh	r2, [r7, #6]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	9303      	str	r3, [sp, #12]
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	9302      	str	r3, [sp, #8]
 8004ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea6:	9301      	str	r3, [sp, #4]
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f80e 	bl	8004ed2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004eb6:	69f8      	ldr	r0, [r7, #28]
 8004eb8:	f000 f89a 	bl	8004ff0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	61bb      	str	r3, [r7, #24]
 8004ec0:	e002      	b.n	8004ec8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ec8:	69bb      	ldr	r3, [r7, #24]
	}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3720      	adds	r7, #32
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b088      	sub	sp, #32
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	607a      	str	r2, [r7, #4]
 8004ede:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	461a      	mov	r2, r3
 8004eea:	21a5      	movs	r1, #165	; 0xa5
 8004eec:	f003 fa32 	bl	8008354 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004efa:	3b01      	subs	r3, #1
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	f023 0307 	bic.w	r3, r3, #7
 8004f08:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <prvInitialiseNewTask+0x56>
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	e7fe      	b.n	8004f26 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01f      	beq.n	8004f6e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	e012      	b.n	8004f5a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4413      	add	r3, r2
 8004f3a:	7819      	ldrb	r1, [r3, #0]
 8004f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4413      	add	r3, r2
 8004f42:	3334      	adds	r3, #52	; 0x34
 8004f44:	460a      	mov	r2, r1
 8004f46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d006      	beq.n	8004f62 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	3301      	adds	r3, #1
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	2b0f      	cmp	r3, #15
 8004f5e:	d9e9      	bls.n	8004f34 <prvInitialiseNewTask+0x62>
 8004f60:	e000      	b.n	8004f64 <prvInitialiseNewTask+0x92>
			{
				break;
 8004f62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f6c:	e003      	b.n	8004f76 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	2b37      	cmp	r3, #55	; 0x37
 8004f7a:	d901      	bls.n	8004f80 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f7c:	2337      	movs	r3, #55	; 0x37
 8004f7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	2200      	movs	r2, #0
 8004f90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	3304      	adds	r3, #4
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fe fd7e 	bl	8003a98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	3318      	adds	r3, #24
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fe fd79 	bl	8003a98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004faa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	68f9      	ldr	r1, [r7, #12]
 8004fce:	69b8      	ldr	r0, [r7, #24]
 8004fd0:	f7fe fdf6 	bl	8003bc0 <pxPortInitialiseStack>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fe6:	bf00      	nop
 8004fe8:	3720      	adds	r7, #32
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ff8:	f7fe ff08 	bl	8003e0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ffc:	4b2d      	ldr	r3, [pc, #180]	; (80050b4 <prvAddNewTaskToReadyList+0xc4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3301      	adds	r3, #1
 8005002:	4a2c      	ldr	r2, [pc, #176]	; (80050b4 <prvAddNewTaskToReadyList+0xc4>)
 8005004:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005006:	4b2c      	ldr	r3, [pc, #176]	; (80050b8 <prvAddNewTaskToReadyList+0xc8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d109      	bne.n	8005022 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800500e:	4a2a      	ldr	r2, [pc, #168]	; (80050b8 <prvAddNewTaskToReadyList+0xc8>)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005014:	4b27      	ldr	r3, [pc, #156]	; (80050b4 <prvAddNewTaskToReadyList+0xc4>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d110      	bne.n	800503e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800501c:	f000 fc08 	bl	8005830 <prvInitialiseTaskLists>
 8005020:	e00d      	b.n	800503e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005022:	4b26      	ldr	r3, [pc, #152]	; (80050bc <prvAddNewTaskToReadyList+0xcc>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800502a:	4b23      	ldr	r3, [pc, #140]	; (80050b8 <prvAddNewTaskToReadyList+0xc8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	429a      	cmp	r2, r3
 8005036:	d802      	bhi.n	800503e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005038:	4a1f      	ldr	r2, [pc, #124]	; (80050b8 <prvAddNewTaskToReadyList+0xc8>)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800503e:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <prvAddNewTaskToReadyList+0xd0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3301      	adds	r3, #1
 8005044:	4a1e      	ldr	r2, [pc, #120]	; (80050c0 <prvAddNewTaskToReadyList+0xd0>)
 8005046:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005048:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <prvAddNewTaskToReadyList+0xd0>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005054:	4b1b      	ldr	r3, [pc, #108]	; (80050c4 <prvAddNewTaskToReadyList+0xd4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d903      	bls.n	8005064 <prvAddNewTaskToReadyList+0x74>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	4a18      	ldr	r2, [pc, #96]	; (80050c4 <prvAddNewTaskToReadyList+0xd4>)
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4a15      	ldr	r2, [pc, #84]	; (80050c8 <prvAddNewTaskToReadyList+0xd8>)
 8005072:	441a      	add	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3304      	adds	r3, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f7fe fd19 	bl	8003ab2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005080:	f7fe fef2 	bl	8003e68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005084:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <prvAddNewTaskToReadyList+0xcc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00e      	beq.n	80050aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800508c:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <prvAddNewTaskToReadyList+0xc8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	429a      	cmp	r2, r3
 8005098:	d207      	bcs.n	80050aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800509a:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <prvAddNewTaskToReadyList+0xdc>)
 800509c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050aa:	bf00      	nop
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	200089f8 	.word	0x200089f8
 80050b8:	20008524 	.word	0x20008524
 80050bc:	20008a04 	.word	0x20008a04
 80050c0:	20008a14 	.word	0x20008a14
 80050c4:	20008a00 	.word	0x20008a00
 80050c8:	20008528 	.word	0x20008528
 80050cc:	e000ed04 	.word	0xe000ed04

080050d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d016      	beq.n	8005110 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050e2:	4b13      	ldr	r3, [pc, #76]	; (8005130 <vTaskDelay+0x60>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <vTaskDelay+0x2e>
 80050ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	60bb      	str	r3, [r7, #8]
 80050fc:	e7fe      	b.n	80050fc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80050fe:	f000 f87f 	bl	8005200 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005102:	2100      	movs	r1, #0
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fcd7 	bl	8005ab8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800510a:	f000 f887 	bl	800521c <xTaskResumeAll>
 800510e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d107      	bne.n	8005126 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005116:	4b07      	ldr	r3, [pc, #28]	; (8005134 <vTaskDelay+0x64>)
 8005118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005126:	bf00      	nop
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20008a20 	.word	0x20008a20
 8005134:	e000ed04 	.word	0xe000ed04

08005138 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	; 0x28
 800513c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005142:	2300      	movs	r3, #0
 8005144:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005146:	463a      	mov	r2, r7
 8005148:	1d39      	adds	r1, r7, #4
 800514a:	f107 0308 	add.w	r3, r7, #8
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe fc4e 	bl	80039f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	9202      	str	r2, [sp, #8]
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	2300      	movs	r3, #0
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	2300      	movs	r3, #0
 8005164:	460a      	mov	r2, r1
 8005166:	4920      	ldr	r1, [pc, #128]	; (80051e8 <vTaskStartScheduler+0xb0>)
 8005168:	4820      	ldr	r0, [pc, #128]	; (80051ec <vTaskStartScheduler+0xb4>)
 800516a:	f7ff fe13 	bl	8004d94 <xTaskCreateStatic>
 800516e:	4602      	mov	r2, r0
 8005170:	4b1f      	ldr	r3, [pc, #124]	; (80051f0 <vTaskStartScheduler+0xb8>)
 8005172:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005174:	4b1e      	ldr	r3, [pc, #120]	; (80051f0 <vTaskStartScheduler+0xb8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800517c:	2301      	movs	r3, #1
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	e001      	b.n	8005186 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d102      	bne.n	8005192 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800518c:	f000 fce8 	bl	8005b60 <xTimerCreateTimerTask>
 8005190:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d115      	bne.n	80051c4 <vTaskStartScheduler+0x8c>
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051aa:	4b12      	ldr	r3, [pc, #72]	; (80051f4 <vTaskStartScheduler+0xbc>)
 80051ac:	f04f 32ff 	mov.w	r2, #4294967295
 80051b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051b2:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <vTaskStartScheduler+0xc0>)
 80051b4:	2201      	movs	r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051b8:	4b10      	ldr	r3, [pc, #64]	; (80051fc <vTaskStartScheduler+0xc4>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051be:	f7fe fd87 	bl	8003cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051c2:	e00d      	b.n	80051e0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ca:	d109      	bne.n	80051e0 <vTaskStartScheduler+0xa8>
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	e7fe      	b.n	80051de <vTaskStartScheduler+0xa6>
}
 80051e0:	bf00      	nop
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	08009d68 	.word	0x08009d68
 80051ec:	08005801 	.word	0x08005801
 80051f0:	20008a1c 	.word	0x20008a1c
 80051f4:	20008a18 	.word	0x20008a18
 80051f8:	20008a04 	.word	0x20008a04
 80051fc:	200089fc 	.word	0x200089fc

08005200 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005204:	4b04      	ldr	r3, [pc, #16]	; (8005218 <vTaskSuspendAll+0x18>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3301      	adds	r3, #1
 800520a:	4a03      	ldr	r2, [pc, #12]	; (8005218 <vTaskSuspendAll+0x18>)
 800520c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800520e:	bf00      	nop
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	20008a20 	.word	0x20008a20

0800521c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005226:	2300      	movs	r3, #0
 8005228:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800522a:	4b41      	ldr	r3, [pc, #260]	; (8005330 <xTaskResumeAll+0x114>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d109      	bne.n	8005246 <xTaskResumeAll+0x2a>
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	e7fe      	b.n	8005244 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005246:	f7fe fde1 	bl	8003e0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800524a:	4b39      	ldr	r3, [pc, #228]	; (8005330 <xTaskResumeAll+0x114>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3b01      	subs	r3, #1
 8005250:	4a37      	ldr	r2, [pc, #220]	; (8005330 <xTaskResumeAll+0x114>)
 8005252:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005254:	4b36      	ldr	r3, [pc, #216]	; (8005330 <xTaskResumeAll+0x114>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d162      	bne.n	8005322 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800525c:	4b35      	ldr	r3, [pc, #212]	; (8005334 <xTaskResumeAll+0x118>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d05e      	beq.n	8005322 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005264:	e02f      	b.n	80052c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005266:	4b34      	ldr	r3, [pc, #208]	; (8005338 <xTaskResumeAll+0x11c>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3318      	adds	r3, #24
 8005272:	4618      	mov	r0, r3
 8005274:	f7fe fc7a 	bl	8003b6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3304      	adds	r3, #4
 800527c:	4618      	mov	r0, r3
 800527e:	f7fe fc75 	bl	8003b6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005286:	4b2d      	ldr	r3, [pc, #180]	; (800533c <xTaskResumeAll+0x120>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d903      	bls.n	8005296 <xTaskResumeAll+0x7a>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005292:	4a2a      	ldr	r2, [pc, #168]	; (800533c <xTaskResumeAll+0x120>)
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4a27      	ldr	r2, [pc, #156]	; (8005340 <xTaskResumeAll+0x124>)
 80052a4:	441a      	add	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4619      	mov	r1, r3
 80052ac:	4610      	mov	r0, r2
 80052ae:	f7fe fc00 	bl	8003ab2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b6:	4b23      	ldr	r3, [pc, #140]	; (8005344 <xTaskResumeAll+0x128>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	429a      	cmp	r2, r3
 80052be:	d302      	bcc.n	80052c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80052c0:	4b21      	ldr	r3, [pc, #132]	; (8005348 <xTaskResumeAll+0x12c>)
 80052c2:	2201      	movs	r2, #1
 80052c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052c6:	4b1c      	ldr	r3, [pc, #112]	; (8005338 <xTaskResumeAll+0x11c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1cb      	bne.n	8005266 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052d4:	f000 fb46 	bl	8005964 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80052d8:	4b1c      	ldr	r3, [pc, #112]	; (800534c <xTaskResumeAll+0x130>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d010      	beq.n	8005306 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052e4:	f000 f846 	bl	8005374 <xTaskIncrementTick>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80052ee:	4b16      	ldr	r3, [pc, #88]	; (8005348 <xTaskResumeAll+0x12c>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f1      	bne.n	80052e4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005300:	4b12      	ldr	r3, [pc, #72]	; (800534c <xTaskResumeAll+0x130>)
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005306:	4b10      	ldr	r3, [pc, #64]	; (8005348 <xTaskResumeAll+0x12c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800530e:	2301      	movs	r3, #1
 8005310:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005312:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <xTaskResumeAll+0x134>)
 8005314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005322:	f7fe fda1 	bl	8003e68 <vPortExitCritical>

	return xAlreadyYielded;
 8005326:	68bb      	ldr	r3, [r7, #8]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20008a20 	.word	0x20008a20
 8005334:	200089f8 	.word	0x200089f8
 8005338:	200089b8 	.word	0x200089b8
 800533c:	20008a00 	.word	0x20008a00
 8005340:	20008528 	.word	0x20008528
 8005344:	20008524 	.word	0x20008524
 8005348:	20008a0c 	.word	0x20008a0c
 800534c:	20008a08 	.word	0x20008a08
 8005350:	e000ed04 	.word	0xe000ed04

08005354 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800535a:	4b05      	ldr	r3, [pc, #20]	; (8005370 <xTaskGetTickCount+0x1c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005360:	687b      	ldr	r3, [r7, #4]
}
 8005362:	4618      	mov	r0, r3
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	200089fc 	.word	0x200089fc

08005374 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800537a:	2300      	movs	r3, #0
 800537c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800537e:	4b4e      	ldr	r3, [pc, #312]	; (80054b8 <xTaskIncrementTick+0x144>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	f040 8088 	bne.w	8005498 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005388:	4b4c      	ldr	r3, [pc, #304]	; (80054bc <xTaskIncrementTick+0x148>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3301      	adds	r3, #1
 800538e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005390:	4a4a      	ldr	r2, [pc, #296]	; (80054bc <xTaskIncrementTick+0x148>)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d11f      	bne.n	80053dc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800539c:	4b48      	ldr	r3, [pc, #288]	; (80054c0 <xTaskIncrementTick+0x14c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d009      	beq.n	80053ba <xTaskIncrementTick+0x46>
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	e7fe      	b.n	80053b8 <xTaskIncrementTick+0x44>
 80053ba:	4b41      	ldr	r3, [pc, #260]	; (80054c0 <xTaskIncrementTick+0x14c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	4b40      	ldr	r3, [pc, #256]	; (80054c4 <xTaskIncrementTick+0x150>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a3e      	ldr	r2, [pc, #248]	; (80054c0 <xTaskIncrementTick+0x14c>)
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	4a3e      	ldr	r2, [pc, #248]	; (80054c4 <xTaskIncrementTick+0x150>)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	4b3e      	ldr	r3, [pc, #248]	; (80054c8 <xTaskIncrementTick+0x154>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3301      	adds	r3, #1
 80053d4:	4a3c      	ldr	r2, [pc, #240]	; (80054c8 <xTaskIncrementTick+0x154>)
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	f000 fac4 	bl	8005964 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053dc:	4b3b      	ldr	r3, [pc, #236]	; (80054cc <xTaskIncrementTick+0x158>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d349      	bcc.n	800547a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053e6:	4b36      	ldr	r3, [pc, #216]	; (80054c0 <xTaskIncrementTick+0x14c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d104      	bne.n	80053fa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053f0:	4b36      	ldr	r3, [pc, #216]	; (80054cc <xTaskIncrementTick+0x158>)
 80053f2:	f04f 32ff 	mov.w	r2, #4294967295
 80053f6:	601a      	str	r2, [r3, #0]
					break;
 80053f8:	e03f      	b.n	800547a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053fa:	4b31      	ldr	r3, [pc, #196]	; (80054c0 <xTaskIncrementTick+0x14c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	429a      	cmp	r2, r3
 8005410:	d203      	bcs.n	800541a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005412:	4a2e      	ldr	r2, [pc, #184]	; (80054cc <xTaskIncrementTick+0x158>)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005418:	e02f      	b.n	800547a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	3304      	adds	r3, #4
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe fba4 	bl	8003b6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005428:	2b00      	cmp	r3, #0
 800542a:	d004      	beq.n	8005436 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	3318      	adds	r3, #24
 8005430:	4618      	mov	r0, r3
 8005432:	f7fe fb9b 	bl	8003b6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543a:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <xTaskIncrementTick+0x15c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d903      	bls.n	800544a <xTaskIncrementTick+0xd6>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	4a22      	ldr	r2, [pc, #136]	; (80054d0 <xTaskIncrementTick+0x15c>)
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <xTaskIncrementTick+0x160>)
 8005458:	441a      	add	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	3304      	adds	r3, #4
 800545e:	4619      	mov	r1, r3
 8005460:	4610      	mov	r0, r2
 8005462:	f7fe fb26 	bl	8003ab2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546a:	4b1b      	ldr	r3, [pc, #108]	; (80054d8 <xTaskIncrementTick+0x164>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	429a      	cmp	r2, r3
 8005472:	d3b8      	bcc.n	80053e6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005474:	2301      	movs	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005478:	e7b5      	b.n	80053e6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800547a:	4b17      	ldr	r3, [pc, #92]	; (80054d8 <xTaskIncrementTick+0x164>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005480:	4914      	ldr	r1, [pc, #80]	; (80054d4 <xTaskIncrementTick+0x160>)
 8005482:	4613      	mov	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	440b      	add	r3, r1
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d907      	bls.n	80054a2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005492:	2301      	movs	r3, #1
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	e004      	b.n	80054a2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005498:	4b10      	ldr	r3, [pc, #64]	; (80054dc <xTaskIncrementTick+0x168>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	4a0f      	ldr	r2, [pc, #60]	; (80054dc <xTaskIncrementTick+0x168>)
 80054a0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80054a2:	4b0f      	ldr	r3, [pc, #60]	; (80054e0 <xTaskIncrementTick+0x16c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80054aa:	2301      	movs	r3, #1
 80054ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80054ae:	697b      	ldr	r3, [r7, #20]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20008a20 	.word	0x20008a20
 80054bc:	200089fc 	.word	0x200089fc
 80054c0:	200089b0 	.word	0x200089b0
 80054c4:	200089b4 	.word	0x200089b4
 80054c8:	20008a10 	.word	0x20008a10
 80054cc:	20008a18 	.word	0x20008a18
 80054d0:	20008a00 	.word	0x20008a00
 80054d4:	20008528 	.word	0x20008528
 80054d8:	20008524 	.word	0x20008524
 80054dc:	20008a08 	.word	0x20008a08
 80054e0:	20008a0c 	.word	0x20008a0c

080054e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054ea:	4b27      	ldr	r3, [pc, #156]	; (8005588 <vTaskSwitchContext+0xa4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054f2:	4b26      	ldr	r3, [pc, #152]	; (800558c <vTaskSwitchContext+0xa8>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054f8:	e040      	b.n	800557c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80054fa:	4b24      	ldr	r3, [pc, #144]	; (800558c <vTaskSwitchContext+0xa8>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005500:	4b23      	ldr	r3, [pc, #140]	; (8005590 <vTaskSwitchContext+0xac>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e00f      	b.n	8005528 <vTaskSwitchContext+0x44>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <vTaskSwitchContext+0x3e>
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	607b      	str	r3, [r7, #4]
 8005520:	e7fe      	b.n	8005520 <vTaskSwitchContext+0x3c>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3b01      	subs	r3, #1
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	491a      	ldr	r1, [pc, #104]	; (8005594 <vTaskSwitchContext+0xb0>)
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0e5      	beq.n	8005508 <vTaskSwitchContext+0x24>
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4a13      	ldr	r2, [pc, #76]	; (8005594 <vTaskSwitchContext+0xb0>)
 8005548:	4413      	add	r3, r2
 800554a:	60bb      	str	r3, [r7, #8]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	605a      	str	r2, [r3, #4]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	3308      	adds	r3, #8
 800555e:	429a      	cmp	r2, r3
 8005560:	d104      	bne.n	800556c <vTaskSwitchContext+0x88>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	605a      	str	r2, [r3, #4]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	4a09      	ldr	r2, [pc, #36]	; (8005598 <vTaskSwitchContext+0xb4>)
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	4a06      	ldr	r2, [pc, #24]	; (8005590 <vTaskSwitchContext+0xac>)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6013      	str	r3, [r2, #0]
}
 800557c:	bf00      	nop
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	20008a20 	.word	0x20008a20
 800558c:	20008a0c 	.word	0x20008a0c
 8005590:	20008a00 	.word	0x20008a00
 8005594:	20008528 	.word	0x20008528
 8005598:	20008524 	.word	0x20008524

0800559c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d109      	bne.n	80055c0 <vTaskPlaceOnEventList+0x24>
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	e7fe      	b.n	80055be <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055c0:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <vTaskPlaceOnEventList+0x44>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3318      	adds	r3, #24
 80055c6:	4619      	mov	r1, r3
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7fe fa96 	bl	8003afa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055ce:	2101      	movs	r1, #1
 80055d0:	6838      	ldr	r0, [r7, #0]
 80055d2:	f000 fa71 	bl	8005ab8 <prvAddCurrentTaskToDelayedList>
}
 80055d6:	bf00      	nop
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20008524 	.word	0x20008524

080055e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <vTaskPlaceOnEventListRestricted+0x26>
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	e7fe      	b.n	8005608 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800560a:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <vTaskPlaceOnEventListRestricted+0x50>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3318      	adds	r3, #24
 8005610:	4619      	mov	r1, r3
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f7fe fa4d 	bl	8003ab2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800561e:	f04f 33ff 	mov.w	r3, #4294967295
 8005622:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	68b8      	ldr	r0, [r7, #8]
 8005628:	f000 fa46 	bl	8005ab8 <prvAddCurrentTaskToDelayedList>
	}
 800562c:	bf00      	nop
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	20008524 	.word	0x20008524

08005638 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <xTaskRemoveFromEventList+0x2a>
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	e7fe      	b.n	8005660 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	3318      	adds	r3, #24
 8005666:	4618      	mov	r0, r3
 8005668:	f7fe fa80 	bl	8003b6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800566c:	4b1d      	ldr	r3, [pc, #116]	; (80056e4 <xTaskRemoveFromEventList+0xac>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d11d      	bne.n	80056b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	3304      	adds	r3, #4
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe fa77 	bl	8003b6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005682:	4b19      	ldr	r3, [pc, #100]	; (80056e8 <xTaskRemoveFromEventList+0xb0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d903      	bls.n	8005692 <xTaskRemoveFromEventList+0x5a>
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	4a16      	ldr	r2, [pc, #88]	; (80056e8 <xTaskRemoveFromEventList+0xb0>)
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005696:	4613      	mov	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4a13      	ldr	r2, [pc, #76]	; (80056ec <xTaskRemoveFromEventList+0xb4>)
 80056a0:	441a      	add	r2, r3
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	3304      	adds	r3, #4
 80056a6:	4619      	mov	r1, r3
 80056a8:	4610      	mov	r0, r2
 80056aa:	f7fe fa02 	bl	8003ab2 <vListInsertEnd>
 80056ae:	e005      	b.n	80056bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	3318      	adds	r3, #24
 80056b4:	4619      	mov	r1, r3
 80056b6:	480e      	ldr	r0, [pc, #56]	; (80056f0 <xTaskRemoveFromEventList+0xb8>)
 80056b8:	f7fe f9fb 	bl	8003ab2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c0:	4b0c      	ldr	r3, [pc, #48]	; (80056f4 <xTaskRemoveFromEventList+0xbc>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d905      	bls.n	80056d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056ca:	2301      	movs	r3, #1
 80056cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056ce:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <xTaskRemoveFromEventList+0xc0>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	e001      	b.n	80056da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056da:	697b      	ldr	r3, [r7, #20]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20008a20 	.word	0x20008a20
 80056e8:	20008a00 	.word	0x20008a00
 80056ec:	20008528 	.word	0x20008528
 80056f0:	200089b8 	.word	0x200089b8
 80056f4:	20008524 	.word	0x20008524
 80056f8:	20008a0c 	.word	0x20008a0c

080056fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005704:	4b06      	ldr	r3, [pc, #24]	; (8005720 <vTaskInternalSetTimeOutState+0x24>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <vTaskInternalSetTimeOutState+0x28>)
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	605a      	str	r2, [r3, #4]
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	20008a10 	.word	0x20008a10
 8005724:	200089fc 	.word	0x200089fc

08005728 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d109      	bne.n	800574c <xTaskCheckForTimeOut+0x24>
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	e7fe      	b.n	800574a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d109      	bne.n	8005766 <xTaskCheckForTimeOut+0x3e>
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	e7fe      	b.n	8005764 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005766:	f7fe fb51 	bl	8003e0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800576a:	4b1d      	ldr	r3, [pc, #116]	; (80057e0 <xTaskCheckForTimeOut+0xb8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d102      	bne.n	800578a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005784:	2300      	movs	r3, #0
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	e023      	b.n	80057d2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <xTaskCheckForTimeOut+0xbc>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d007      	beq.n	80057a6 <xTaskCheckForTimeOut+0x7e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	429a      	cmp	r2, r3
 800579e:	d802      	bhi.n	80057a6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057a0:	2301      	movs	r3, #1
 80057a2:	61fb      	str	r3, [r7, #28]
 80057a4:	e015      	b.n	80057d2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d90b      	bls.n	80057c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	1ad2      	subs	r2, r2, r3
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff ff9d 	bl	80056fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61fb      	str	r3, [r7, #28]
 80057c6:	e004      	b.n	80057d2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057ce:	2301      	movs	r3, #1
 80057d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057d2:	f7fe fb49 	bl	8003e68 <vPortExitCritical>

	return xReturn;
 80057d6:	69fb      	ldr	r3, [r7, #28]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3720      	adds	r7, #32
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	200089fc 	.word	0x200089fc
 80057e4:	20008a10 	.word	0x20008a10

080057e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057ec:	4b03      	ldr	r3, [pc, #12]	; (80057fc <vTaskMissedYield+0x14>)
 80057ee:	2201      	movs	r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
}
 80057f2:	bf00      	nop
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	20008a0c 	.word	0x20008a0c

08005800 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005808:	f000 f852 	bl	80058b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800580c:	4b06      	ldr	r3, [pc, #24]	; (8005828 <prvIdleTask+0x28>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d9f9      	bls.n	8005808 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <prvIdleTask+0x2c>)
 8005816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005824:	e7f0      	b.n	8005808 <prvIdleTask+0x8>
 8005826:	bf00      	nop
 8005828:	20008528 	.word	0x20008528
 800582c:	e000ed04 	.word	0xe000ed04

08005830 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005836:	2300      	movs	r3, #0
 8005838:	607b      	str	r3, [r7, #4]
 800583a:	e00c      	b.n	8005856 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	4613      	mov	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4a12      	ldr	r2, [pc, #72]	; (8005890 <prvInitialiseTaskLists+0x60>)
 8005848:	4413      	add	r3, r2
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe f904 	bl	8003a58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3301      	adds	r3, #1
 8005854:	607b      	str	r3, [r7, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b37      	cmp	r3, #55	; 0x37
 800585a:	d9ef      	bls.n	800583c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800585c:	480d      	ldr	r0, [pc, #52]	; (8005894 <prvInitialiseTaskLists+0x64>)
 800585e:	f7fe f8fb 	bl	8003a58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005862:	480d      	ldr	r0, [pc, #52]	; (8005898 <prvInitialiseTaskLists+0x68>)
 8005864:	f7fe f8f8 	bl	8003a58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005868:	480c      	ldr	r0, [pc, #48]	; (800589c <prvInitialiseTaskLists+0x6c>)
 800586a:	f7fe f8f5 	bl	8003a58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800586e:	480c      	ldr	r0, [pc, #48]	; (80058a0 <prvInitialiseTaskLists+0x70>)
 8005870:	f7fe f8f2 	bl	8003a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005874:	480b      	ldr	r0, [pc, #44]	; (80058a4 <prvInitialiseTaskLists+0x74>)
 8005876:	f7fe f8ef 	bl	8003a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800587a:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <prvInitialiseTaskLists+0x78>)
 800587c:	4a05      	ldr	r2, [pc, #20]	; (8005894 <prvInitialiseTaskLists+0x64>)
 800587e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005880:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <prvInitialiseTaskLists+0x7c>)
 8005882:	4a05      	ldr	r2, [pc, #20]	; (8005898 <prvInitialiseTaskLists+0x68>)
 8005884:	601a      	str	r2, [r3, #0]
}
 8005886:	bf00      	nop
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20008528 	.word	0x20008528
 8005894:	20008988 	.word	0x20008988
 8005898:	2000899c 	.word	0x2000899c
 800589c:	200089b8 	.word	0x200089b8
 80058a0:	200089cc 	.word	0x200089cc
 80058a4:	200089e4 	.word	0x200089e4
 80058a8:	200089b0 	.word	0x200089b0
 80058ac:	200089b4 	.word	0x200089b4

080058b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058b6:	e019      	b.n	80058ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058b8:	f7fe faa8 	bl	8003e0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058bc:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <prvCheckTasksWaitingTermination+0x4c>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3304      	adds	r3, #4
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fe f94f 	bl	8003b6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058ce:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <prvCheckTasksWaitingTermination+0x50>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	4a0a      	ldr	r2, [pc, #40]	; (8005900 <prvCheckTasksWaitingTermination+0x50>)
 80058d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058d8:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <prvCheckTasksWaitingTermination+0x54>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3b01      	subs	r3, #1
 80058de:	4a09      	ldr	r2, [pc, #36]	; (8005904 <prvCheckTasksWaitingTermination+0x54>)
 80058e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058e2:	f7fe fac1 	bl	8003e68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f80e 	bl	8005908 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058ec:	4b05      	ldr	r3, [pc, #20]	; (8005904 <prvCheckTasksWaitingTermination+0x54>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e1      	bne.n	80058b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058f4:	bf00      	nop
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	200089cc 	.word	0x200089cc
 8005900:	200089f8 	.word	0x200089f8
 8005904:	200089e0 	.word	0x200089e0

08005908 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005916:	2b00      	cmp	r3, #0
 8005918:	d108      	bne.n	800592c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	4618      	mov	r0, r3
 8005920:	f7fe fc50 	bl	80041c4 <vPortFree>
				vPortFree( pxTCB );
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7fe fc4d 	bl	80041c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800592a:	e017      	b.n	800595c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005932:	2b01      	cmp	r3, #1
 8005934:	d103      	bne.n	800593e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fe fc44 	bl	80041c4 <vPortFree>
	}
 800593c:	e00e      	b.n	800595c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005944:	2b02      	cmp	r3, #2
 8005946:	d009      	beq.n	800595c <prvDeleteTCB+0x54>
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	e7fe      	b.n	800595a <prvDeleteTCB+0x52>
	}
 800595c:	bf00      	nop
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800596a:	4b0c      	ldr	r3, [pc, #48]	; (800599c <prvResetNextTaskUnblockTime+0x38>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005974:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <prvResetNextTaskUnblockTime+0x3c>)
 8005976:	f04f 32ff 	mov.w	r2, #4294967295
 800597a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800597c:	e008      	b.n	8005990 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800597e:	4b07      	ldr	r3, [pc, #28]	; (800599c <prvResetNextTaskUnblockTime+0x38>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	4a04      	ldr	r2, [pc, #16]	; (80059a0 <prvResetNextTaskUnblockTime+0x3c>)
 800598e:	6013      	str	r3, [r2, #0]
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	200089b0 	.word	0x200089b0
 80059a0:	20008a18 	.word	0x20008a18

080059a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <xTaskGetSchedulerState+0x34>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d102      	bne.n	80059b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059b2:	2301      	movs	r3, #1
 80059b4:	607b      	str	r3, [r7, #4]
 80059b6:	e008      	b.n	80059ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059b8:	4b08      	ldr	r3, [pc, #32]	; (80059dc <xTaskGetSchedulerState+0x38>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d102      	bne.n	80059c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059c0:	2302      	movs	r3, #2
 80059c2:	607b      	str	r3, [r7, #4]
 80059c4:	e001      	b.n	80059ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059c6:	2300      	movs	r3, #0
 80059c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059ca:	687b      	ldr	r3, [r7, #4]
	}
 80059cc:	4618      	mov	r0, r3
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	20008a04 	.word	0x20008a04
 80059dc:	20008a20 	.word	0x20008a20

080059e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d054      	beq.n	8005aa0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059f6:	4b2d      	ldr	r3, [pc, #180]	; (8005aac <xTaskPriorityDisinherit+0xcc>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d009      	beq.n	8005a14 <xTaskPriorityDisinherit+0x34>
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	e7fe      	b.n	8005a12 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d109      	bne.n	8005a30 <xTaskPriorityDisinherit+0x50>
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	60bb      	str	r3, [r7, #8]
 8005a2e:	e7fe      	b.n	8005a2e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a34:	1e5a      	subs	r2, r3, #1
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d02c      	beq.n	8005aa0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d128      	bne.n	8005aa0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	3304      	adds	r3, #4
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fe f88a 	bl	8003b6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a70:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <xTaskPriorityDisinherit+0xd0>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d903      	bls.n	8005a80 <xTaskPriorityDisinherit+0xa0>
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	4a0c      	ldr	r2, [pc, #48]	; (8005ab0 <xTaskPriorityDisinherit+0xd0>)
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <xTaskPriorityDisinherit+0xd4>)
 8005a8e:	441a      	add	r2, r3
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	3304      	adds	r3, #4
 8005a94:	4619      	mov	r1, r3
 8005a96:	4610      	mov	r0, r2
 8005a98:	f7fe f80b 	bl	8003ab2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005aa0:	697b      	ldr	r3, [r7, #20]
	}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3718      	adds	r7, #24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	20008524 	.word	0x20008524
 8005ab0:	20008a00 	.word	0x20008a00
 8005ab4:	20008528 	.word	0x20008528

08005ab8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ac2:	4b21      	ldr	r3, [pc, #132]	; (8005b48 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ac8:	4b20      	ldr	r3, [pc, #128]	; (8005b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3304      	adds	r3, #4
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fe f84c 	bl	8003b6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ada:	d10a      	bne.n	8005af2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d007      	beq.n	8005af2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ae2:	4b1a      	ldr	r3, [pc, #104]	; (8005b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4819      	ldr	r0, [pc, #100]	; (8005b50 <prvAddCurrentTaskToDelayedList+0x98>)
 8005aec:	f7fd ffe1 	bl	8003ab2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005af0:	e026      	b.n	8005b40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4413      	add	r3, r2
 8005af8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005afa:	4b14      	ldr	r3, [pc, #80]	; (8005b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d209      	bcs.n	8005b1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b0a:	4b12      	ldr	r3, [pc, #72]	; (8005b54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3304      	adds	r3, #4
 8005b14:	4619      	mov	r1, r3
 8005b16:	4610      	mov	r0, r2
 8005b18:	f7fd ffef 	bl	8003afa <vListInsert>
}
 8005b1c:	e010      	b.n	8005b40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b1e:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3304      	adds	r3, #4
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	f7fd ffe5 	bl	8003afa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b30:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d202      	bcs.n	8005b40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b3a:	4a08      	ldr	r2, [pc, #32]	; (8005b5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	6013      	str	r3, [r2, #0]
}
 8005b40:	bf00      	nop
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	200089fc 	.word	0x200089fc
 8005b4c:	20008524 	.word	0x20008524
 8005b50:	200089e4 	.word	0x200089e4
 8005b54:	200089b4 	.word	0x200089b4
 8005b58:	200089b0 	.word	0x200089b0
 8005b5c:	20008a18 	.word	0x20008a18

08005b60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	; 0x28
 8005b64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b6a:	f000 faff 	bl	800616c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b6e:	4b1c      	ldr	r3, [pc, #112]	; (8005be0 <xTimerCreateTimerTask+0x80>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d021      	beq.n	8005bba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b7e:	1d3a      	adds	r2, r7, #4
 8005b80:	f107 0108 	add.w	r1, r7, #8
 8005b84:	f107 030c 	add.w	r3, r7, #12
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fd ff4b 	bl	8003a24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	9202      	str	r2, [sp, #8]
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	2302      	movs	r3, #2
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	460a      	mov	r2, r1
 8005ba0:	4910      	ldr	r1, [pc, #64]	; (8005be4 <xTimerCreateTimerTask+0x84>)
 8005ba2:	4811      	ldr	r0, [pc, #68]	; (8005be8 <xTimerCreateTimerTask+0x88>)
 8005ba4:	f7ff f8f6 	bl	8004d94 <xTaskCreateStatic>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	4b10      	ldr	r3, [pc, #64]	; (8005bec <xTimerCreateTimerTask+0x8c>)
 8005bac:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005bae:	4b0f      	ldr	r3, [pc, #60]	; (8005bec <xTimerCreateTimerTask+0x8c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <xTimerCreateTimerTask+0x74>
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	e7fe      	b.n	8005bd2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005bd4:	697b      	ldr	r3, [r7, #20]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20008a54 	.word	0x20008a54
 8005be4:	08009d70 	.word	0x08009d70
 8005be8:	08005d21 	.word	0x08005d21
 8005bec:	20008a58 	.word	0x20008a58

08005bf0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08a      	sub	sp, #40	; 0x28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d109      	bne.n	8005c1c <xTimerGenericCommand+0x2c>
 8005c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	623b      	str	r3, [r7, #32]
 8005c1a:	e7fe      	b.n	8005c1a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c1c:	4b19      	ldr	r3, [pc, #100]	; (8005c84 <xTimerGenericCommand+0x94>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d02a      	beq.n	8005c7a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b05      	cmp	r3, #5
 8005c34:	dc18      	bgt.n	8005c68 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c36:	f7ff feb5 	bl	80059a4 <xTaskGetSchedulerState>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d109      	bne.n	8005c54 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c40:	4b10      	ldr	r3, [pc, #64]	; (8005c84 <xTimerGenericCommand+0x94>)
 8005c42:	6818      	ldr	r0, [r3, #0]
 8005c44:	f107 0110 	add.w	r1, r7, #16
 8005c48:	2300      	movs	r3, #0
 8005c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c4c:	f7fe fccc 	bl	80045e8 <xQueueGenericSend>
 8005c50:	6278      	str	r0, [r7, #36]	; 0x24
 8005c52:	e012      	b.n	8005c7a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c54:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <xTimerGenericCommand+0x94>)
 8005c56:	6818      	ldr	r0, [r3, #0]
 8005c58:	f107 0110 	add.w	r1, r7, #16
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f7fe fcc2 	bl	80045e8 <xQueueGenericSend>
 8005c64:	6278      	str	r0, [r7, #36]	; 0x24
 8005c66:	e008      	b.n	8005c7a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c68:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <xTimerGenericCommand+0x94>)
 8005c6a:	6818      	ldr	r0, [r3, #0]
 8005c6c:	f107 0110 	add.w	r1, r7, #16
 8005c70:	2300      	movs	r3, #0
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	f7fe fdb2 	bl	80047dc <xQueueGenericSendFromISR>
 8005c78:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3728      	adds	r7, #40	; 0x28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20008a54 	.word	0x20008a54

08005c88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af02      	add	r7, sp, #8
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c92:	4b22      	ldr	r3, [pc, #136]	; (8005d1c <prvProcessExpiredTimer+0x94>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fd ff63 	bl	8003b6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d021      	beq.n	8005cf8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	699a      	ldr	r2, [r3, #24]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	18d1      	adds	r1, r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	6978      	ldr	r0, [r7, #20]
 8005cc2:	f000 f8d1 	bl	8005e68 <prvInsertTimerInActiveList>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01e      	beq.n	8005d0a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ccc:	2300      	movs	r3, #0
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	6978      	ldr	r0, [r7, #20]
 8005cd8:	f7ff ff8a 	bl	8005bf0 <xTimerGenericCommand>
 8005cdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d112      	bne.n	8005d0a <prvProcessExpiredTimer+0x82>
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	e7fe      	b.n	8005cf6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cfe:	f023 0301 	bic.w	r3, r3, #1
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	6978      	ldr	r0, [r7, #20]
 8005d10:	4798      	blx	r3
}
 8005d12:	bf00      	nop
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20008a4c 	.word	0x20008a4c

08005d20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d28:	f107 0308 	add.w	r3, r7, #8
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 f857 	bl	8005de0 <prvGetNextExpireTime>
 8005d32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	4619      	mov	r1, r3
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f803 	bl	8005d44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d3e:	f000 f8d5 	bl	8005eec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d42:	e7f1      	b.n	8005d28 <prvTimerTask+0x8>

08005d44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d4e:	f7ff fa57 	bl	8005200 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d52:	f107 0308 	add.w	r3, r7, #8
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 f866 	bl	8005e28 <prvSampleTimeNow>
 8005d5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d130      	bne.n	8005dc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10a      	bne.n	8005d80 <prvProcessTimerOrBlockTask+0x3c>
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d806      	bhi.n	8005d80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d72:	f7ff fa53 	bl	800521c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d76:	68f9      	ldr	r1, [r7, #12]
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff ff85 	bl	8005c88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d7e:	e024      	b.n	8005dca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d008      	beq.n	8005d98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d86:	4b13      	ldr	r3, [pc, #76]	; (8005dd4 <prvProcessTimerOrBlockTask+0x90>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <prvProcessTimerOrBlockTask+0x50>
 8005d90:	2301      	movs	r3, #1
 8005d92:	e000      	b.n	8005d96 <prvProcessTimerOrBlockTask+0x52>
 8005d94:	2300      	movs	r3, #0
 8005d96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d98:	4b0f      	ldr	r3, [pc, #60]	; (8005dd8 <prvProcessTimerOrBlockTask+0x94>)
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	4619      	mov	r1, r3
 8005da6:	f7fe ffc1 	bl	8004d2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005daa:	f7ff fa37 	bl	800521c <xTaskResumeAll>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10a      	bne.n	8005dca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005db4:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <prvProcessTimerOrBlockTask+0x98>)
 8005db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	f3bf 8f6f 	isb	sy
}
 8005dc4:	e001      	b.n	8005dca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005dc6:	f7ff fa29 	bl	800521c <xTaskResumeAll>
}
 8005dca:	bf00      	nop
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20008a50 	.word	0x20008a50
 8005dd8:	20008a54 	.word	0x20008a54
 8005ddc:	e000ed04 	.word	0xe000ed04

08005de0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005de8:	4b0e      	ldr	r3, [pc, #56]	; (8005e24 <prvGetNextExpireTime+0x44>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <prvGetNextExpireTime+0x16>
 8005df2:	2201      	movs	r2, #1
 8005df4:	e000      	b.n	8005df8 <prvGetNextExpireTime+0x18>
 8005df6:	2200      	movs	r2, #0
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d105      	bne.n	8005e10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e04:	4b07      	ldr	r3, [pc, #28]	; (8005e24 <prvGetNextExpireTime+0x44>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	e001      	b.n	8005e14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e14:	68fb      	ldr	r3, [r7, #12]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	20008a4c 	.word	0x20008a4c

08005e28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e30:	f7ff fa90 	bl	8005354 <xTaskGetTickCount>
 8005e34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e36:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <prvSampleTimeNow+0x3c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d205      	bcs.n	8005e4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e40:	f000 f930 	bl	80060a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e002      	b.n	8005e52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e52:	4a04      	ldr	r2, [pc, #16]	; (8005e64 <prvSampleTimeNow+0x3c>)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e58:	68fb      	ldr	r3, [r7, #12]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	20008a5c 	.word	0x20008a5c

08005e68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e76:	2300      	movs	r3, #0
 8005e78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d812      	bhi.n	8005eb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	1ad2      	subs	r2, r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d302      	bcc.n	8005ea2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	e01b      	b.n	8005eda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005ea2:	4b10      	ldr	r3, [pc, #64]	; (8005ee4 <prvInsertTimerInActiveList+0x7c>)
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4610      	mov	r0, r2
 8005eae:	f7fd fe24 	bl	8003afa <vListInsert>
 8005eb2:	e012      	b.n	8005eda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d206      	bcs.n	8005eca <prvInsertTimerInActiveList+0x62>
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d302      	bcc.n	8005eca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	e007      	b.n	8005eda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eca:	4b07      	ldr	r3, [pc, #28]	; (8005ee8 <prvInsertTimerInActiveList+0x80>)
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	f7fd fe10 	bl	8003afa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005eda:	697b      	ldr	r3, [r7, #20]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20008a50 	.word	0x20008a50
 8005ee8:	20008a4c 	.word	0x20008a4c

08005eec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08e      	sub	sp, #56	; 0x38
 8005ef0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ef2:	e0c6      	b.n	8006082 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	da17      	bge.n	8005f2a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005efa:	1d3b      	adds	r3, r7, #4
 8005efc:	3304      	adds	r3, #4
 8005efe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <prvProcessReceivedCommands+0x2e>
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	61fb      	str	r3, [r7, #28]
 8005f18:	e7fe      	b.n	8005f18 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f20:	6850      	ldr	r0, [r2, #4]
 8005f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f24:	6892      	ldr	r2, [r2, #8]
 8005f26:	4611      	mov	r1, r2
 8005f28:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f2c0 80a8 	blt.w	8006082 <prvProcessReceivedCommands+0x196>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d004      	beq.n	8005f48 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	3304      	adds	r3, #4
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fd fe12 	bl	8003b6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f48:	463b      	mov	r3, r7
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7ff ff6c 	bl	8005e28 <prvSampleTimeNow>
 8005f50:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b09      	cmp	r3, #9
 8005f56:	f200 8093 	bhi.w	8006080 <prvProcessReceivedCommands+0x194>
 8005f5a:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <prvProcessReceivedCommands+0x74>)
 8005f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f60:	08005f89 	.word	0x08005f89
 8005f64:	08005f89 	.word	0x08005f89
 8005f68:	08005f89 	.word	0x08005f89
 8005f6c:	08005ffb 	.word	0x08005ffb
 8005f70:	0800600f 	.word	0x0800600f
 8005f74:	08006057 	.word	0x08006057
 8005f78:	08005f89 	.word	0x08005f89
 8005f7c:	08005f89 	.word	0x08005f89
 8005f80:	08005ffb 	.word	0x08005ffb
 8005f84:	0800600f 	.word	0x0800600f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f8e:	f043 0301 	orr.w	r3, r3, #1
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	18d1      	adds	r1, r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fa8:	f7ff ff5e 	bl	8005e68 <prvInsertTimerInActiveList>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d067      	beq.n	8006082 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fc0:	f003 0304 	and.w	r3, r3, #4
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d05c      	beq.n	8006082 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	441a      	add	r2, r3
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fda:	f7ff fe09 	bl	8005bf0 <xTimerGenericCommand>
 8005fde:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d14d      	bne.n	8006082 <prvProcessReceivedCommands+0x196>
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	61bb      	str	r3, [r7, #24]
 8005ff8:	e7fe      	b.n	8005ff8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006000:	f023 0301 	bic.w	r3, r3, #1
 8006004:	b2da      	uxtb	r2, r3
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800600c:	e039      	b.n	8006082 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006014:	f043 0301 	orr.w	r3, r3, #1
 8006018:	b2da      	uxtb	r2, r3
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <prvProcessReceivedCommands+0x156>
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	e7fe      	b.n	8006040 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	18d1      	adds	r1, r2, r3
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006050:	f7ff ff0a 	bl	8005e68 <prvInsertTimerInActiveList>
					break;
 8006054:	e015      	b.n	8006082 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d103      	bne.n	800606c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006066:	f7fe f8ad 	bl	80041c4 <vPortFree>
 800606a:	e00a      	b.n	8006082 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	b2da      	uxtb	r2, r3
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800607e:	e000      	b.n	8006082 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
 8006080:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006082:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <prvProcessReceivedCommands+0x1b4>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	1d39      	adds	r1, r7, #4
 8006088:	2200      	movs	r2, #0
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe fc3a 	bl	8004904 <xQueueReceive>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	f47f af2e 	bne.w	8005ef4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006098:	bf00      	nop
 800609a:	3730      	adds	r7, #48	; 0x30
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20008a54 	.word	0x20008a54

080060a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060aa:	e047      	b.n	800613c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060ac:	4b2d      	ldr	r3, [pc, #180]	; (8006164 <prvSwitchTimerLists+0xc0>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060b6:	4b2b      	ldr	r3, [pc, #172]	; (8006164 <prvSwitchTimerLists+0xc0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	3304      	adds	r3, #4
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fd fd51 	bl	8003b6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	6938      	ldr	r0, [r7, #16]
 80060d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d02d      	beq.n	800613c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	699a      	ldr	r2, [r3, #24]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	4413      	add	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d90e      	bls.n	8006110 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060fe:	4b19      	ldr	r3, [pc, #100]	; (8006164 <prvSwitchTimerLists+0xc0>)
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	3304      	adds	r3, #4
 8006106:	4619      	mov	r1, r3
 8006108:	4610      	mov	r0, r2
 800610a:	f7fd fcf6 	bl	8003afa <vListInsert>
 800610e:	e015      	b.n	800613c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006110:	2300      	movs	r3, #0
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	2300      	movs	r3, #0
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	2100      	movs	r1, #0
 800611a:	6938      	ldr	r0, [r7, #16]
 800611c:	f7ff fd68 	bl	8005bf0 <xTimerGenericCommand>
 8006120:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d109      	bne.n	800613c <prvSwitchTimerLists+0x98>
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	603b      	str	r3, [r7, #0]
 800613a:	e7fe      	b.n	800613a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800613c:	4b09      	ldr	r3, [pc, #36]	; (8006164 <prvSwitchTimerLists+0xc0>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1b2      	bne.n	80060ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006146:	4b07      	ldr	r3, [pc, #28]	; (8006164 <prvSwitchTimerLists+0xc0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800614c:	4b06      	ldr	r3, [pc, #24]	; (8006168 <prvSwitchTimerLists+0xc4>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a04      	ldr	r2, [pc, #16]	; (8006164 <prvSwitchTimerLists+0xc0>)
 8006152:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006154:	4a04      	ldr	r2, [pc, #16]	; (8006168 <prvSwitchTimerLists+0xc4>)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6013      	str	r3, [r2, #0]
}
 800615a:	bf00      	nop
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20008a4c 	.word	0x20008a4c
 8006168:	20008a50 	.word	0x20008a50

0800616c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006172:	f7fd fe4b 	bl	8003e0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006176:	4b15      	ldr	r3, [pc, #84]	; (80061cc <prvCheckForValidListAndQueue+0x60>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d120      	bne.n	80061c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800617e:	4814      	ldr	r0, [pc, #80]	; (80061d0 <prvCheckForValidListAndQueue+0x64>)
 8006180:	f7fd fc6a 	bl	8003a58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006184:	4813      	ldr	r0, [pc, #76]	; (80061d4 <prvCheckForValidListAndQueue+0x68>)
 8006186:	f7fd fc67 	bl	8003a58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800618a:	4b13      	ldr	r3, [pc, #76]	; (80061d8 <prvCheckForValidListAndQueue+0x6c>)
 800618c:	4a10      	ldr	r2, [pc, #64]	; (80061d0 <prvCheckForValidListAndQueue+0x64>)
 800618e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006190:	4b12      	ldr	r3, [pc, #72]	; (80061dc <prvCheckForValidListAndQueue+0x70>)
 8006192:	4a10      	ldr	r2, [pc, #64]	; (80061d4 <prvCheckForValidListAndQueue+0x68>)
 8006194:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006196:	2300      	movs	r3, #0
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	4b11      	ldr	r3, [pc, #68]	; (80061e0 <prvCheckForValidListAndQueue+0x74>)
 800619c:	4a11      	ldr	r2, [pc, #68]	; (80061e4 <prvCheckForValidListAndQueue+0x78>)
 800619e:	2110      	movs	r1, #16
 80061a0:	200a      	movs	r0, #10
 80061a2:	f7fe f98b 	bl	80044bc <xQueueGenericCreateStatic>
 80061a6:	4602      	mov	r2, r0
 80061a8:	4b08      	ldr	r3, [pc, #32]	; (80061cc <prvCheckForValidListAndQueue+0x60>)
 80061aa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061ac:	4b07      	ldr	r3, [pc, #28]	; (80061cc <prvCheckForValidListAndQueue+0x60>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d005      	beq.n	80061c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061b4:	4b05      	ldr	r3, [pc, #20]	; (80061cc <prvCheckForValidListAndQueue+0x60>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	490b      	ldr	r1, [pc, #44]	; (80061e8 <prvCheckForValidListAndQueue+0x7c>)
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe fd8e 	bl	8004cdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061c0:	f7fd fe52 	bl	8003e68 <vPortExitCritical>
}
 80061c4:	bf00      	nop
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	20008a54 	.word	0x20008a54
 80061d0:	20008a24 	.word	0x20008a24
 80061d4:	20008a38 	.word	0x20008a38
 80061d8:	20008a4c 	.word	0x20008a4c
 80061dc:	20008a50 	.word	0x20008a50
 80061e0:	20008b00 	.word	0x20008b00
 80061e4:	20008a60 	.word	0x20008a60
 80061e8:	08009d78 	.word	0x08009d78

080061ec <Get_OutValue>:
#include "task.h"

static uint16_t out_value = 0;

uint16_t Get_OutValue()
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
	return out_value;
 80061f0:	4b03      	ldr	r3, [pc, #12]	; (8006200 <Get_OutValue+0x14>)
 80061f2:	881b      	ldrh	r3, [r3, #0]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	20008b50 	.word	0x20008b50

08006204 <update_info_from_json>:

void update_info_from_json(char* buff, struct OUTPUTS* out, uint16_t out_n)
{
 8006204:	b590      	push	{r4, r7, lr}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	4613      	mov	r3, r2
 8006210:	80fb      	strh	r3, [r7, #6]
	out[out_n].branch_n = -1;
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	f640 1284 	movw	r2, #2436	; 0x984
 8006218:	fb02 f303 	mul.w	r3, r2, r3
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	4413      	add	r3, r2
 8006220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006224:	f8a3 2980 	strh.w	r2, [r3, #2432]	; 0x980
	out[out_n].branch_n = json_get_op(buff, out[out_n].par, out[out_n].root_par, out[out_n].tim);
 8006228:	88fb      	ldrh	r3, [r7, #6]
 800622a:	f640 1284 	movw	r2, #2436	; 0x984
 800622e:	fb02 f303 	mul.w	r3, r2, r3
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	18d4      	adds	r4, r2, r3
 8006236:	88fb      	ldrh	r3, [r7, #6]
 8006238:	f640 1284 	movw	r2, #2436	; 0x984
 800623c:	fb02 f303 	mul.w	r3, r2, r3
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	4413      	add	r3, r2
 8006244:	f503 7110 	add.w	r1, r3, #576	; 0x240
 8006248:	88fb      	ldrh	r3, [r7, #6]
 800624a:	f640 1284 	movw	r2, #2436	; 0x984
 800624e:	fb02 f303 	mul.w	r3, r2, r3
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6004 	add.w	r0, r3, #2112	; 0x840
 800625a:	88fb      	ldrh	r3, [r7, #6]
 800625c:	f640 1284 	movw	r2, #2436	; 0x984
 8006260:	fb02 f303 	mul.w	r3, r2, r3
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	4413      	add	r3, r2
 8006268:	4602      	mov	r2, r0
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7fa ffd4 	bl	8001218 <json_get_op>
 8006270:	4603      	mov	r3, r0
 8006272:	b29b      	uxth	r3, r3
 8006274:	f8a4 3980 	strh.w	r3, [r4, #2432]	; 0x980
	map_op_on_root(out[out_n].par, out[out_n].root_par, out[out_n].branch_n);
 8006278:	88fb      	ldrh	r3, [r7, #6]
 800627a:	f640 1284 	movw	r2, #2436	; 0x984
 800627e:	fb02 f303 	mul.w	r3, r2, r3
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	4413      	add	r3, r2
 8006286:	f503 7010 	add.w	r0, r3, #576	; 0x240
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	f640 1284 	movw	r2, #2436	; 0x984
 8006290:	fb02 f303 	mul.w	r3, r2, r3
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6104 	add.w	r1, r3, #2112	; 0x840
 800629c:	88fb      	ldrh	r3, [r7, #6]
 800629e:	f640 1284 	movw	r2, #2436	; 0x984
 80062a2:	fb02 f303 	mul.w	r3, r2, r3
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	4413      	add	r3, r2
 80062aa:	f8b3 3980 	ldrh.w	r3, [r3, #2432]	; 0x980
 80062ae:	461a      	mov	r2, r3
 80062b0:	f7fa fa10 	bl	80006d4 <map_op_on_root>
}
 80062b4:	bf00      	nop
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd90      	pop	{r4, r7, pc}

080062bc <clear_info>:

void clear_info(struct OUTPUTS* out, uint16_t out_n)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	460b      	mov	r3, r1
 80062c6:	807b      	strh	r3, [r7, #2]
	out[out_n].branch_n = 0;
 80062c8:	887b      	ldrh	r3, [r7, #2]
 80062ca:	f640 1284 	movw	r2, #2436	; 0x984
 80062ce:	fb02 f303 	mul.w	r3, r2, r3
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	4413      	add	r3, r2
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8a3 2980 	strh.w	r2, [r3, #2432]	; 0x980
	memset(out[out_n].par, 0, sizeof(struct OP));
 80062dc:	887b      	ldrh	r3, [r7, #2]
 80062de:	f640 1284 	movw	r2, #2436	; 0x984
 80062e2:	fb02 f303 	mul.w	r3, r2, r3
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80062ee:	220c      	movs	r2, #12
 80062f0:	2100      	movs	r1, #0
 80062f2:	4618      	mov	r0, r3
 80062f4:	f002 f82e 	bl	8008354 <memset>
	memset(out[out_n].tim, 0, sizeof(struct TM));
 80062f8:	887b      	ldrh	r3, [r7, #2]
 80062fa:	f640 1284 	movw	r2, #2436	; 0x984
 80062fe:	fb02 f303 	mul.w	r3, r2, r3
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	4413      	add	r3, r2
 8006306:	2248      	movs	r2, #72	; 0x48
 8006308:	2100      	movs	r1, #0
 800630a:	4618      	mov	r0, r3
 800630c:	f002 f822 	bl	8008354 <memset>
	memset(out[out_n].root_par, 0, sizeof(struct OP_ROOT));
 8006310:	887b      	ldrh	r3, [r7, #2]
 8006312:	f640 1284 	movw	r2, #2436	; 0x984
 8006316:	fb02 f303 	mul.w	r3, r2, r3
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8006322:	2214      	movs	r2, #20
 8006324:	2100      	movs	r1, #0
 8006326:	4618      	mov	r0, r3
 8006328:	f002 f814 	bl	8008354 <memset>
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <BitEngine_task>:

void BitEngine_task( void * pvParameters )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d009      	beq.n	8006356 <BitEngine_task+0x22>
 8006342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	60bb      	str	r3, [r7, #8]
 8006354:	e7fe      	b.n	8006354 <BitEngine_task+0x20>

    INO_Init();
 8006356:	f000 f979 	bl	800664c <INO_Init>

    for (uint8_t out_n = 0; out_n < 16; ++out_n)
 800635a:	2300      	movs	r3, #0
 800635c:	73fb      	strb	r3, [r7, #15]
 800635e:	e008      	b.n	8006372 <BitEngine_task+0x3e>
    {
    	clear_info(outputs, out_n);
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	b29b      	uxth	r3, r3
 8006364:	4619      	mov	r1, r3
 8006366:	4833      	ldr	r0, [pc, #204]	; (8006434 <BitEngine_task+0x100>)
 8006368:	f7ff ffa8 	bl	80062bc <clear_info>
    for (uint8_t out_n = 0; out_n < 16; ++out_n)
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	3301      	adds	r3, #1
 8006370:	73fb      	strb	r3, [r7, #15]
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	2b0f      	cmp	r3, #15
 8006376:	d9f3      	bls.n	8006360 <BitEngine_task+0x2c>
    }

    while(1)
    {
    	for (uint8_t i = 0; i < 16; ++i)
 8006378:	2300      	movs	r3, #0
 800637a:	73bb      	strb	r3, [r7, #14]
 800637c:	e052      	b.n	8006424 <BitEngine_task+0xf0>
    	{
			if (outputs[i].branch_n == 0 || outputs[i].branch_n > 1024)
 800637e:	7bbb      	ldrb	r3, [r7, #14]
 8006380:	4a2c      	ldr	r2, [pc, #176]	; (8006434 <BitEngine_task+0x100>)
 8006382:	f640 1184 	movw	r1, #2436	; 0x984
 8006386:	fb01 f303 	mul.w	r3, r1, r3
 800638a:	4413      	add	r3, r2
 800638c:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d042      	beq.n	800641c <BitEngine_task+0xe8>
 8006396:	7bbb      	ldrb	r3, [r7, #14]
 8006398:	4a26      	ldr	r2, [pc, #152]	; (8006434 <BitEngine_task+0x100>)
 800639a:	f640 1184 	movw	r1, #2436	; 0x984
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ae:	d835      	bhi.n	800641c <BitEngine_task+0xe8>
			{
				continue;
			}
			start_bit_engine(outputs[i].root_par, outputs[i].branch_n, out_value);
 80063b0:	7bbb      	ldrb	r3, [r7, #14]
 80063b2:	f640 1284 	movw	r2, #2436	; 0x984
 80063b6:	fb02 f303 	mul.w	r3, r2, r3
 80063ba:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 80063be:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <BitEngine_task+0x100>)
 80063c0:	1898      	adds	r0, r3, r2
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
 80063c4:	4a1b      	ldr	r2, [pc, #108]	; (8006434 <BitEngine_task+0x100>)
 80063c6:	f640 1184 	movw	r1, #2436	; 0x984
 80063ca:	fb01 f303 	mul.w	r3, r1, r3
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 80063d4:	8819      	ldrh	r1, [r3, #0]
 80063d6:	4b18      	ldr	r3, [pc, #96]	; (8006438 <BitEngine_task+0x104>)
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	f7fa f9d0 	bl	8000780 <start_bit_engine>

			if(outputs[i].root_par[0].result) {
 80063e0:	7bbb      	ldrb	r3, [r7, #14]
 80063e2:	4a14      	ldr	r2, [pc, #80]	; (8006434 <BitEngine_task+0x100>)
 80063e4:	f640 1184 	movw	r1, #2436	; 0x984
 80063e8:	fb01 f303 	mul.w	r3, r1, r3
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00d      	beq.n	8006414 <BitEngine_task+0xe0>
				out_value |= 1 << i;
 80063f8:	7bbb      	ldrb	r3, [r7, #14]
 80063fa:	2201      	movs	r2, #1
 80063fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006400:	b21a      	sxth	r2, r3
 8006402:	4b0d      	ldr	r3, [pc, #52]	; (8006438 <BitEngine_task+0x104>)
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b21b      	sxth	r3, r3
 8006408:	4313      	orrs	r3, r2
 800640a:	b21b      	sxth	r3, r3
 800640c:	b29a      	uxth	r2, r3
 800640e:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <BitEngine_task+0x104>)
 8006410:	801a      	strh	r2, [r3, #0]
 8006412:	e004      	b.n	800641e <BitEngine_task+0xea>
			} else {
				out_value &= 0 << i;
 8006414:	4b08      	ldr	r3, [pc, #32]	; (8006438 <BitEngine_task+0x104>)
 8006416:	2200      	movs	r2, #0
 8006418:	801a      	strh	r2, [r3, #0]
 800641a:	e000      	b.n	800641e <BitEngine_task+0xea>
				continue;
 800641c:	bf00      	nop
    	for (uint8_t i = 0; i < 16; ++i)
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	3301      	adds	r3, #1
 8006422:	73bb      	strb	r3, [r7, #14]
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	2b0f      	cmp	r3, #15
 8006428:	d9a9      	bls.n	800637e <BitEngine_task+0x4a>
			}
		}

    	vTaskDelay(pdMS_TO_TICKS(200));
 800642a:	20c8      	movs	r0, #200	; 0xc8
 800642c:	f7fe fe50 	bl	80050d0 <vTaskDelay>
    	for (uint8_t i = 0; i < 16; ++i)
 8006430:	e7a2      	b.n	8006378 <BitEngine_task+0x44>
 8006432:	bf00      	nop
 8006434:	2000a16c 	.word	0x2000a16c
 8006438:	20008b50 	.word	0x20008b50

0800643c <BitEngine_TaskInit>:
    }
}


void BitEngine_TaskInit( void )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 8006442:	2300      	movs	r3, #0
 8006444:	607b      	str	r3, [r7, #4]
	xTaskCreate(
 8006446:	1d3b      	adds	r3, r7, #4
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	2304      	movs	r3, #4
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	2301      	movs	r3, #1
 8006450:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006454:	4903      	ldr	r1, [pc, #12]	; (8006464 <BitEngine_TaskInit+0x28>)
 8006456:	4804      	ldr	r0, [pc, #16]	; (8006468 <BitEngine_TaskInit+0x2c>)
 8006458:	f7fe fcf6 	bl	8004e48 <xTaskCreate>
					4096,	 						 /* Stack size in words, not bytes. */
                    ( void * ) 1,     			 	 /* Parameter passed into the task. */
                    4,				 				 /* Priority at which the task is created. */
                    &xHandle );   			   	     /* Used to pass out the created task's handle. */

}
 800645c:	bf00      	nop
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	08009d80 	.word	0x08009d80
 8006468:	08006335 	.word	0x08006335

0800646c <ESP_GetJson>:
#include "task.h"

const char url_t[] = "192.168.1.210";

void ESP_GetJson()
{
 800646c:	b5b0      	push	{r4, r5, r7, lr}
 800646e:	b094      	sub	sp, #80	; 0x50
 8006470:	af02      	add	r7, sp, #8
	const char get_t[] = "GET http://192.168.1.210/test HTTP/1.1\r\nHost: 192.168.1.210\r\n\r\n";
 8006472:	4b1a      	ldr	r3, [pc, #104]	; (80064dc <ESP_GetJson+0x70>)
 8006474:	1d3c      	adds	r4, r7, #4
 8006476:	461d      	mov	r5, r3
 8006478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800647a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800647c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800647e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006484:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ESP_SendData(url_t, 5002, get_t, sizeof(get_t) - 1, 1);
 800648c:	1d3a      	adds	r2, r7, #4
 800648e:	2301      	movs	r3, #1
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	233f      	movs	r3, #63	; 0x3f
 8006494:	f241 318a 	movw	r1, #5002	; 0x138a
 8006498:	4811      	ldr	r0, [pc, #68]	; (80064e0 <ESP_GetJson+0x74>)
 800649a:	f7fb fc59 	bl	8001d50 <ESP_SendData>
	vTaskDelay(pdMS_TO_TICKS(1000));
 800649e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80064a2:	f7fe fe15 	bl	80050d0 <vTaskDelay>

	char* ptr = NULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	647b      	str	r3, [r7, #68]	; 0x44
	if( (ptr = strstr(ESP_GetRxData(), "{")) != NULL )
 80064aa:	f7fb fba3 	bl	8001bf4 <ESP_GetRxData>
 80064ae:	4603      	mov	r3, r0
 80064b0:	217b      	movs	r1, #123	; 0x7b
 80064b2:	4618      	mov	r0, r3
 80064b4:	f001 ff7a 	bl	80083ac <strchr>
 80064b8:	6478      	str	r0, [r7, #68]	; 0x44
 80064ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d008      	beq.n	80064d2 <ESP_GetJson+0x66>
	{
		clear_info(outputs, 0);
 80064c0:	2100      	movs	r1, #0
 80064c2:	4808      	ldr	r0, [pc, #32]	; (80064e4 <ESP_GetJson+0x78>)
 80064c4:	f7ff fefa 	bl	80062bc <clear_info>
		update_info_from_json(ptr, outputs, 0);
 80064c8:	2200      	movs	r2, #0
 80064ca:	4906      	ldr	r1, [pc, #24]	; (80064e4 <ESP_GetJson+0x78>)
 80064cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80064ce:	f7ff fe99 	bl	8006204 <update_info_from_json>
	}
}
 80064d2:	bf00      	nop
 80064d4:	3748      	adds	r7, #72	; 0x48
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bdb0      	pop	{r4, r5, r7, pc}
 80064da:	bf00      	nop
 80064dc:	08009d90 	.word	0x08009d90
 80064e0:	08009f18 	.word	0x08009f18
 80064e4:	2000a16c 	.word	0x2000a16c

080064e8 <ESP_UpdateTime>:

void ESP_UpdateTime()
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b0a0      	sub	sp, #128	; 0x80
 80064ec:	af02      	add	r7, sp, #8
	const char get_t[] = "GET http://192.168.1.210/timestamp HTTP/1.1\r\nHost: 192.168.1.210\r\n\r\n";
 80064ee:	4a2b      	ldr	r2, [pc, #172]	; (800659c <ESP_UpdateTime+0xb4>)
 80064f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064f4:	4611      	mov	r1, r2
 80064f6:	2245      	movs	r2, #69	; 0x45
 80064f8:	4618      	mov	r0, r3
 80064fa:	f001 ff20 	bl	800833e <memcpy>
	ESP_SendData(url_t, 5002, get_t, sizeof(get_t) - 1, 1);
 80064fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006502:	2301      	movs	r3, #1
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	2344      	movs	r3, #68	; 0x44
 8006508:	f241 318a 	movw	r1, #5002	; 0x138a
 800650c:	4824      	ldr	r0, [pc, #144]	; (80065a0 <ESP_UpdateTime+0xb8>)
 800650e:	f7fb fc1f 	bl	8001d50 <ESP_SendData>
	vTaskDelay(pdMS_TO_TICKS(1000));
 8006512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006516:	f7fe fddb 	bl	80050d0 <vTaskDelay>

	char* ptr_tm = NULL;
 800651a:	2300      	movs	r3, #0
 800651c:	677b      	str	r3, [r7, #116]	; 0x74
	char* ptr_tz = NULL;
 800651e:	2300      	movs	r3, #0
 8006520:	673b      	str	r3, [r7, #112]	; 0x70
	if( (ptr_tm = strstr(ESP_GetRxData(), "\"tm:")) != NULL
 8006522:	f7fb fb67 	bl	8001bf4 <ESP_GetRxData>
 8006526:	4603      	mov	r3, r0
 8006528:	491e      	ldr	r1, [pc, #120]	; (80065a4 <ESP_UpdateTime+0xbc>)
 800652a:	4618      	mov	r0, r3
 800652c:	f001 ff66 	bl	80083fc <strstr>
 8006530:	6778      	str	r0, [r7, #116]	; 0x74
 8006532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006534:	2b00      	cmp	r3, #0
 8006536:	d02d      	beq.n	8006594 <ESP_UpdateTime+0xac>
	 && (ptr_tz = strstr(ESP_GetRxData(),  ",tz:")) != NULL )
 8006538:	f7fb fb5c 	bl	8001bf4 <ESP_GetRxData>
 800653c:	4603      	mov	r3, r0
 800653e:	491a      	ldr	r1, [pc, #104]	; (80065a8 <ESP_UpdateTime+0xc0>)
 8006540:	4618      	mov	r0, r3
 8006542:	f001 ff5b 	bl	80083fc <strstr>
 8006546:	6738      	str	r0, [r7, #112]	; 0x70
 8006548:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800654a:	2b00      	cmp	r3, #0
 800654c:	d022      	beq.n	8006594 <ESP_UpdateTime+0xac>
	{
		struct tm tmp;
		long tm = strtol(ptr_tm + 4, NULL, 10);
 800654e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006550:	3304      	adds	r3, #4
 8006552:	220a      	movs	r2, #10
 8006554:	2100      	movs	r1, #0
 8006556:	4618      	mov	r0, r3
 8006558:	f001 fffe 	bl	8008558 <strtol>
 800655c:	4603      	mov	r3, r0
 800655e:	627b      	str	r3, [r7, #36]	; 0x24
		int8_t tz = strtol(ptr_tz + 4, NULL, 10);
 8006560:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006562:	3304      	adds	r3, #4
 8006564:	220a      	movs	r2, #10
 8006566:	2100      	movs	r1, #0
 8006568:	4618      	mov	r0, r3
 800656a:	f001 fff5 	bl	8008558 <strtol>
 800656e:	4603      	mov	r3, r0
 8006570:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		(void) localtime_r((time_t *)&tm, &tmp);
 8006574:	463a      	mov	r2, r7
 8006576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800657a:	4611      	mov	r1, r2
 800657c:	4618      	mov	r0, r3
 800657e:	f001 fdeb 	bl	8008158 <localtime_r>
		tmp.tm_hour += tz;
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006588:	4413      	add	r3, r2
 800658a:	60bb      	str	r3, [r7, #8]
		RTC_SetTime(&tmp);
 800658c:	463b      	mov	r3, r7
 800658e:	4618      	mov	r0, r3
 8006590:	f001 fc2e 	bl	8007df0 <RTC_SetTime>
	}
}
 8006594:	bf00      	nop
 8006596:	3778      	adds	r7, #120	; 0x78
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	08009de0 	.word	0x08009de0
 80065a0:	08009f18 	.word	0x08009f18
 80065a4:	08009dd0 	.word	0x08009dd0
 80065a8:	08009dd8 	.word	0x08009dd8

080065ac <ESP_Task>:

	ESP_SendData(url_t, 5002, buff, sizeof(buff) - 1, 1);
}

void ESP_Task( void * pvParameters )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d009      	beq.n	80065ce <ESP_Task+0x22>
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	e7fe      	b.n	80065cc <ESP_Task+0x20>

    ESP_Init(vTaskDelay);
 80065ce:	480a      	ldr	r0, [pc, #40]	; (80065f8 <ESP_Task+0x4c>)
 80065d0:	f7fb fa94 	bl	8001afc <ESP_Init>

    ESP_SetMode(ESP_MODE_BOTH);
 80065d4:	2003      	movs	r0, #3
 80065d6:	f7fb fb17 	bl	8001c08 <ESP_SetMode>
    ESP_SetCipmuxZero();
 80065da:	f7fb fb55 	bl	8001c88 <ESP_SetCipmuxZero>
    ESP_SetParamsSoftAP("DontTouchAnything", "save_809");
 80065de:	4907      	ldr	r1, [pc, #28]	; (80065fc <ESP_Task+0x50>)
 80065e0:	4807      	ldr	r0, [pc, #28]	; (8006600 <ESP_Task+0x54>)
 80065e2:	f7fb fb7f 	bl	8001ce4 <ESP_SetParamsSoftAP>

    ESP_UpdateTime();
 80065e6:	f7ff ff7f 	bl	80064e8 <ESP_UpdateTime>

    while(1)
    {
    	ESP_GetJson();
 80065ea:	f7ff ff3f 	bl	800646c <ESP_GetJson>
    	vTaskDelay(pdMS_TO_TICKS(1000));
 80065ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065f2:	f7fe fd6d 	bl	80050d0 <vTaskDelay>
    	ESP_GetJson();
 80065f6:	e7f8      	b.n	80065ea <ESP_Task+0x3e>
 80065f8:	080050d1 	.word	0x080050d1
 80065fc:	08009ea0 	.word	0x08009ea0
 8006600:	08009eac 	.word	0x08009eac

08006604 <ESP_TaskInit>:
    }
}

void ESP_TaskInit( void )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	607b      	str	r3, [r7, #4]
    xTaskCreate(
 800660e:	1d3b      	adds	r3, r7, #4
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	2304      	movs	r3, #4
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	2301      	movs	r3, #1
 8006618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800661c:	4903      	ldr	r1, [pc, #12]	; (800662c <ESP_TaskInit+0x28>)
 800661e:	4804      	ldr	r0, [pc, #16]	; (8006630 <ESP_TaskInit+0x2c>)
 8006620:	f7fe fc12 	bl	8004e48 <xTaskCreate>
                    "ESP_Task",    				 /* Text name for the task. */
					2048,	 					 /* Stack size in words, not bytes. */
                    ( void * ) 1,     		 	 /* Parameter passed into the task. */
                    4,				 			 /* Priority at which the task is created. */
                    &xHandle );   		   	     /* Used to pass out the created task's handle. */
}
 8006624:	bf00      	nop
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	08009ec0 	.word	0x08009ec0
 8006630:	080065ad 	.word	0x080065ad

08006634 <LL_GPIO_ReadInputPort>:
  * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
}
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <INO_Init>:
/*
 * INO - PE8-PE15 inputs pins
 */

void INO_Init()
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006652:	463b      	mov	r3, r7
 8006654:	2200      	movs	r2, #0
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	605a      	str	r2, [r3, #4]
 800665a:	609a      	str	r2, [r3, #8]
 800665c:	60da      	str	r2, [r3, #12]
 800665e:	611a      	str	r2, [r3, #16]
 8006660:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_8 || LL_GPIO_PIN_9 || LL_GPIO_PIN_10 || LL_GPIO_PIN_11
 8006662:	2301      	movs	r3, #1
 8006664:	603b      	str	r3, [r7, #0]
					 || LL_GPIO_PIN_12 || LL_GPIO_PIN_13 || LL_GPIO_PIN_14 || LL_GPIO_PIN_15;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8006666:	2300      	movs	r3, #0
 8006668:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800666a:	2302      	movs	r3, #2
 800666c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800666e:	463b      	mov	r3, r7
 8006670:	4619      	mov	r1, r3
 8006672:	4803      	ldr	r0, [pc, #12]	; (8006680 <INO_Init+0x34>)
 8006674:	f7fc f8e5 	bl	8002842 <LL_GPIO_Init>
}
 8006678:	bf00      	nop
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40021000 	.word	0x40021000

08006684 <INO_GetValue>:

uint8_t INO_GetValue(uint8_t pin)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	71fb      	strb	r3, [r7, #7]
	return LL_GPIO_ReadInputPort(GPIOE) & (1 << pin);
 800668e:	4808      	ldr	r0, [pc, #32]	; (80066b0 <INO_GetValue+0x2c>)
 8006690:	f7ff ffd0 	bl	8006634 <LL_GPIO_ReadInputPort>
 8006694:	4603      	mov	r3, r0
 8006696:	b2da      	uxtb	r2, r3
 8006698:	79fb      	ldrb	r3, [r7, #7]
 800669a:	2101      	movs	r1, #1
 800669c:	fa01 f303 	lsl.w	r3, r1, r3
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	4013      	ands	r3, r2
 80066a4:	b2db      	uxtb	r3, r3
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40021000 	.word	0x40021000

080066b4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	619a      	str	r2, [r3, #24]
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	041a      	lsls	r2, r3, #16
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	619a      	str	r2, [r3, #24]
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
	...

080066f0 <BoardLED_Init>:
#include "FreeRTOSConfig.h"
#include "FreeRTOS.h"
#include "task.h"

static void BoardLED_Init()
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066f6:	463b      	mov	r3, r7
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	605a      	str	r2, [r3, #4]
 80066fe:	609a      	str	r2, [r3, #8]
 8006700:	60da      	str	r2, [r3, #12]
 8006702:	611a      	str	r2, [r3, #16]
 8006704:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8006706:	2302      	movs	r3, #2
 8006708:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800670a:	2301      	movs	r3, #1
 800670c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800670e:	2302      	movs	r3, #2
 8006710:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8006712:	2301      	movs	r3, #1
 8006714:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006716:	463b      	mov	r3, r7
 8006718:	4619      	mov	r1, r3
 800671a:	4803      	ldr	r0, [pc, #12]	; (8006728 <BoardLED_Init+0x38>)
 800671c:	f7fc f891 	bl	8002842 <LL_GPIO_Init>
}
 8006720:	bf00      	nop
 8006722:	3718      	adds	r7, #24
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	40020000 	.word	0x40020000

0800672c <BoardLED_Set>:

static void BoardLED_Set(uint8_t val)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	4603      	mov	r3, r0
 8006734:	71fb      	strb	r3, [r7, #7]
	if(val) {
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d004      	beq.n	8006746 <BoardLED_Set+0x1a>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 800673c:	2102      	movs	r1, #2
 800673e:	4806      	ldr	r0, [pc, #24]	; (8006758 <BoardLED_Set+0x2c>)
 8006740:	f7ff ffb8 	bl	80066b4 <LL_GPIO_SetOutputPin>
	} else {
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
	}
}
 8006744:	e003      	b.n	800674e <BoardLED_Set+0x22>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8006746:	2102      	movs	r1, #2
 8006748:	4803      	ldr	r0, [pc, #12]	; (8006758 <BoardLED_Set+0x2c>)
 800674a:	f7ff ffc1 	bl	80066d0 <LL_GPIO_ResetOutputPin>
}
 800674e:	bf00      	nop
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	40020000 	.word	0x40020000

0800675c <Led_Task>:

void Led_Task( void * pvParameters )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d009      	beq.n	800677e <Led_Task+0x22>
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	e7fe      	b.n	800677c <Led_Task+0x20>

    BoardLED_Init();
 800677e:	f7ff ffb7 	bl	80066f0 <BoardLED_Init>
    while(1)
    {
    	BoardLED_Set(1);
 8006782:	2001      	movs	r0, #1
 8006784:	f7ff ffd2 	bl	800672c <BoardLED_Set>
    	vTaskDelay(pdMS_TO_TICKS(500));
 8006788:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800678c:	f7fe fca0 	bl	80050d0 <vTaskDelay>
    	BoardLED_Set(0);
 8006790:	2000      	movs	r0, #0
 8006792:	f7ff ffcb 	bl	800672c <BoardLED_Set>
    	vTaskDelay(pdMS_TO_TICKS(500));
 8006796:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800679a:	f7fe fc99 	bl	80050d0 <vTaskDelay>
    	BoardLED_Set(1);
 800679e:	e7f0      	b.n	8006782 <Led_Task+0x26>

080067a0 <Led_TaskInit>:
    }
}

void Led_TaskInit( void )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af02      	add	r7, sp, #8
	//BaseType_t xReturned;
	TaskHandle_t xHandle = NULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	607b      	str	r3, [r7, #4]

    //xReturned =
	xTaskCreate(
 80067aa:	1d3b      	adds	r3, r7, #4
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	2304      	movs	r3, #4
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	2301      	movs	r3, #1
 80067b4:	2280      	movs	r2, #128	; 0x80
 80067b6:	4904      	ldr	r1, [pc, #16]	; (80067c8 <Led_TaskInit+0x28>)
 80067b8:	4804      	ldr	r0, [pc, #16]	; (80067cc <Led_TaskInit+0x2c>)
 80067ba:	f7fe fb45 	bl	8004e48 <xTaskCreate>
                    "Led_Task",    				 /* Text name for the task. */
					128,	 					 /* Stack size in words, not bytes. */
                    ( void * ) 1,     		 	 /* Parameter passed into the task. */
                    4,				 			 /* Priority at which the task is created. */
                    &xHandle );   		   	     /* Used to pass out the created task's handle. */
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	08009ecc 	.word	0x08009ecc
 80067cc:	0800675d 	.word	0x0800675d

080067d0 <LL_SPI_Enable>:
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <LL_SPI_SetStandard>:
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f023 0210 	bic.w	r2, r3, #16
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	605a      	str	r2, [r3, #4]
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8006816:	b480      	push	{r7}
 8006818:	b085      	sub	sp, #20
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	460b      	mov	r3, r1
 8006820:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	330c      	adds	r3, #12
 8006826:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	78fa      	ldrb	r2, [r7, #3]
 800682c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800682e:	bf00      	nop
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <LL_GPIO_SetOutputPin>:
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	619a      	str	r2, [r3, #24]
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <LL_GPIO_ResetOutputPin>:
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	041a      	lsls	r2, r3, #16
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	619a      	str	r2, [r3, #24]
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <SPI2_Init>:
#include "FreeRTOS.h"
#include "task.h"


void SPI2_Init(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b090      	sub	sp, #64	; 0x40
 8006878:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800687a:	f107 0318 	add.w	r3, r7, #24
 800687e:	2228      	movs	r2, #40	; 0x28
 8006880:	2100      	movs	r1, #0
 8006882:	4618      	mov	r0, r3
 8006884:	f001 fd66 	bl	8008354 <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006888:	463b      	mov	r3, r7
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	605a      	str	r2, [r3, #4]
 8006890:	609a      	str	r2, [r3, #8]
 8006892:	60da      	str	r2, [r3, #12]
 8006894:	611a      	str	r2, [r3, #16]
 8006896:	615a      	str	r2, [r3, #20]
	/**SPI2 GPIO Configuration
	PC2   ------> SPI2_MISO
	PC3   ------> SPI2_MOSI
	PB13  ------> SPI2_SCK
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8006898:	230c      	movs	r3, #12
 800689a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800689c:	2302      	movs	r3, #2
 800689e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80068a0:	2303      	movs	r3, #3
 80068a2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80068a8:	2300      	movs	r3, #0
 80068aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80068ac:	2305      	movs	r3, #5
 80068ae:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068b0:	463b      	mov	r3, r7
 80068b2:	4619      	mov	r1, r3
 80068b4:	481d      	ldr	r0, [pc, #116]	; (800692c <SPI2_Init+0xb8>)
 80068b6:	f7fb ffc4 	bl	8002842 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80068ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068be:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80068c0:	2302      	movs	r3, #2
 80068c2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80068c4:	2303      	movs	r3, #3
 80068c6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80068c8:	2300      	movs	r3, #0
 80068ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80068cc:	2300      	movs	r3, #0
 80068ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80068d0:	2305      	movs	r3, #5
 80068d2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068d4:	463b      	mov	r3, r7
 80068d6:	4619      	mov	r1, r3
 80068d8:	4815      	ldr	r0, [pc, #84]	; (8006930 <SPI2_Init+0xbc>)
 80068da:	f7fb ffb2 	bl	8002842 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80068de:	2300      	movs	r3, #0
 80068e0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80068e2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80068e6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80068e8:	2300      	movs	r3, #0
 80068ea:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80068ec:	2300      	movs	r3, #0
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80068f0:	2300      	movs	r3, #0
 80068f2:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80068f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80068fa:	2310      	movs	r3, #16
 80068fc:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80068fe:	2300      	movs	r3, #0
 8006900:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8006902:	2300      	movs	r3, #0
 8006904:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8006906:	230a      	movs	r3, #10
 8006908:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(SPI2, &SPI_InitStruct);
 800690a:	f107 0318 	add.w	r3, r7, #24
 800690e:	4619      	mov	r1, r3
 8006910:	4808      	ldr	r0, [pc, #32]	; (8006934 <SPI2_Init+0xc0>)
 8006912:	f7fc fc94 	bl	800323e <LL_SPI_Init>
	LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8006916:	2100      	movs	r1, #0
 8006918:	4806      	ldr	r0, [pc, #24]	; (8006934 <SPI2_Init+0xc0>)
 800691a:	f7ff ff69 	bl	80067f0 <LL_SPI_SetStandard>
	LL_SPI_Enable(SPI2);
 800691e:	4805      	ldr	r0, [pc, #20]	; (8006934 <SPI2_Init+0xc0>)
 8006920:	f7ff ff56 	bl	80067d0 <LL_SPI_Enable>
}
 8006924:	bf00      	nop
 8006926:	3740      	adds	r7, #64	; 0x40
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	40020800 	.word	0x40020800
 8006930:	40020400 	.word	0x40020400
 8006934:	40003800 	.word	0x40003800

08006938 <SPI2_SendByte>:

static void SPI2_SendByte(uint8_t byte)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	4603      	mov	r3, r0
 8006940:	71fb      	strb	r3, [r7, #7]
	while (!(SPI2->SR & SPI_SR_TXE));
 8006942:	bf00      	nop
 8006944:	4b0a      	ldr	r3, [pc, #40]	; (8006970 <SPI2_SendByte+0x38>)
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0f9      	beq.n	8006944 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(SPI2, byte);
 8006950:	79fb      	ldrb	r3, [r7, #7]
 8006952:	4619      	mov	r1, r3
 8006954:	4806      	ldr	r0, [pc, #24]	; (8006970 <SPI2_SendByte+0x38>)
 8006956:	f7ff ff5e 	bl	8006816 <LL_SPI_TransmitData8>
	while (SPI2->SR & SPI_SR_BSY);
 800695a:	bf00      	nop
 800695c:	4b04      	ldr	r3, [pc, #16]	; (8006970 <SPI2_SendByte+0x38>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1f9      	bne.n	800695c <SPI2_SendByte+0x24>
}
 8006968:	bf00      	nop
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40003800 	.word	0x40003800

08006974 <GPIO_Init>:

static void GPIO_Init()
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800697a:	463b      	mov	r3, r7
 800697c:	2200      	movs	r2, #0
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	605a      	str	r2, [r3, #4]
 8006982:	609a      	str	r2, [r3, #8]
 8006984:	60da      	str	r2, [r3, #12]
 8006986:	611a      	str	r2, [r3, #16]
 8006988:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_1; //ST_CP latchPin
 800698a:	2302      	movs	r3, #2
 800698c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800698e:	2301      	movs	r3, #1
 8006990:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8006992:	2302      	movs	r3, #2
 8006994:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8006996:	2301      	movs	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800699a:	463b      	mov	r3, r7
 800699c:	4619      	mov	r1, r3
 800699e:	4803      	ldr	r0, [pc, #12]	; (80069ac <GPIO_Init+0x38>)
 80069a0:	f7fb ff4f 	bl	8002842 <LL_GPIO_Init>
}
 80069a4:	bf00      	nop
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40020800 	.word	0x40020800

080069b0 <LATCH_Set>:

static void LATCH_Set(uint8_t val)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4603      	mov	r3, r0
 80069b8:	71fb      	strb	r3, [r7, #7]
	if(val) {
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <LATCH_Set+0x1a>
		LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_1);
 80069c0:	2102      	movs	r1, #2
 80069c2:	4806      	ldr	r0, [pc, #24]	; (80069dc <LATCH_Set+0x2c>)
 80069c4:	f7ff ff39 	bl	800683a <LL_GPIO_SetOutputPin>
	} else {
		LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1);
	}
}
 80069c8:	e003      	b.n	80069d2 <LATCH_Set+0x22>
		LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1);
 80069ca:	2102      	movs	r1, #2
 80069cc:	4803      	ldr	r0, [pc, #12]	; (80069dc <LATCH_Set+0x2c>)
 80069ce:	f7ff ff42 	bl	8006856 <LL_GPIO_ResetOutputPin>
}
 80069d2:	bf00      	nop
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40020800 	.word	0x40020800

080069e0 <Relay_Task>:

void Relay_Task( void * pvParameters )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d009      	beq.n	8006a02 <Relay_Task+0x22>
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	60bb      	str	r3, [r7, #8]
 8006a00:	e7fe      	b.n	8006a00 <Relay_Task+0x20>

    uint16_t out_value = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	81bb      	strh	r3, [r7, #12]
    uint16_t prev_value = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	81fb      	strh	r3, [r7, #14]

    SPI2_Init();
 8006a0a:	f7ff ff33 	bl	8006874 <SPI2_Init>
    GPIO_Init();
 8006a0e:	f7ff ffb1 	bl	8006974 <GPIO_Init>

    while(1)
    {
    	out_value = Get_OutValue();
 8006a12:	f7ff fbeb 	bl	80061ec <Get_OutValue>
 8006a16:	4603      	mov	r3, r0
 8006a18:	81bb      	strh	r3, [r7, #12]
    	if(prev_value != out_value)
 8006a1a:	89fa      	ldrh	r2, [r7, #14]
 8006a1c:	89bb      	ldrh	r3, [r7, #12]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d013      	beq.n	8006a4a <Relay_Task+0x6a>
    	{
    		prev_value = out_value;
 8006a22:	89bb      	ldrh	r3, [r7, #12]
 8006a24:	81fb      	strh	r3, [r7, #14]
    		LATCH_Set(0);
 8006a26:	2000      	movs	r0, #0
 8006a28:	f7ff ffc2 	bl	80069b0 <LATCH_Set>
    		SPI2_SendByte((uint8_t)(out_value >> 8));
 8006a2c:	89bb      	ldrh	r3, [r7, #12]
 8006a2e:	0a1b      	lsrs	r3, r3, #8
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7ff ff7f 	bl	8006938 <SPI2_SendByte>
    		SPI2_SendByte((uint8_t)(out_value & 0xFF));
 8006a3a:	89bb      	ldrh	r3, [r7, #12]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff ff7a 	bl	8006938 <SPI2_SendByte>
    		LATCH_Set(1);
 8006a44:	2001      	movs	r0, #1
 8006a46:	f7ff ffb3 	bl	80069b0 <LATCH_Set>
    	}

    	vTaskDelay(pdMS_TO_TICKS(200));
 8006a4a:	20c8      	movs	r0, #200	; 0xc8
 8006a4c:	f7fe fb40 	bl	80050d0 <vTaskDelay>
    	out_value = Get_OutValue();
 8006a50:	e7df      	b.n	8006a12 <Relay_Task+0x32>
	...

08006a54 <Relay_TaskInit>:
    }
}

void Relay_TaskInit( void )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af02      	add	r7, sp, #8
	//BaseType_t xReturned;
	TaskHandle_t xHandle = NULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	607b      	str	r3, [r7, #4]

    //xReturned =
	xTaskCreate(
 8006a5e:	1d3b      	adds	r3, r7, #4
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	2304      	movs	r3, #4
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	2301      	movs	r3, #1
 8006a68:	2280      	movs	r2, #128	; 0x80
 8006a6a:	4904      	ldr	r1, [pc, #16]	; (8006a7c <Relay_TaskInit+0x28>)
 8006a6c:	4804      	ldr	r0, [pc, #16]	; (8006a80 <Relay_TaskInit+0x2c>)
 8006a6e:	f7fe f9eb 	bl	8004e48 <xTaskCreate>
                    "Relay_Task",    				 /* Text name for the task. */
					128,	 						 /* Stack size in words, not bytes. */
                    ( void * ) 1,     			 	 /* Parameter passed into the task. */
                    4,				 				 /* Priority at which the task is created. */
                    &xHandle );   			   	     /* Used to pass out the created task's handle. */
}
 8006a72:	bf00      	nop
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	08009ed8 	.word	0x08009ed8
 8006a80:	080069e1 	.word	0x080069e1

08006a84 <Sensor_ClearList>:
static uint8_t sensor_counter = 0;
static char buff[16] = { 0 };
static f_ptr delay;

void Sensor_ClearList()
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
	sensor_counter = 0;
 8006a88:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <Sensor_ClearList+0x1c>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	701a      	strb	r2, [r3, #0]
	memset(sensor_list, 0, sizeof(struct SENSOR) * SENSOR_MAX);
 8006a8e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006a92:	2100      	movs	r1, #0
 8006a94:	4803      	ldr	r0, [pc, #12]	; (8006aa4 <Sensor_ClearList+0x20>)
 8006a96:	f001 fc5d 	bl	8008354 <memset>
}
 8006a9a:	bf00      	nop
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20008b52 	.word	0x20008b52
 8006aa4:	20008ba4 	.word	0x20008ba4

08006aa8 <Sensor_Init>:

void Sensor_Init(f_ptr delay_function)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
	UART3_Init(&UART3_rx_data);
 8006ab0:	4806      	ldr	r0, [pc, #24]	; (8006acc <Sensor_Init+0x24>)
 8006ab2:	f000 fc9f 	bl	80073f4 <UART3_Init>
	Sensor_UpdateGpioInit();
 8006ab6:	f000 fd03 	bl	80074c0 <Sensor_UpdateGpioInit>
	Sensor_ClearList();
 8006aba:	f7ff ffe3 	bl	8006a84 <Sensor_ClearList>
	delay = delay_function;
 8006abe:	4a04      	ldr	r2, [pc, #16]	; (8006ad0 <Sensor_Init+0x28>)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6013      	str	r3, [r2, #0]
}
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	200139ac 	.word	0x200139ac
 8006ad0:	20008b64 	.word	0x20008b64

08006ad4 <Sensor_GPIOUpdateList>:

uint8_t Sensor_GPIOUpdateList()
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	af00      	add	r7, sp, #0
	return Sensor_GpioValue();
 8006ad8:	f000 fd0e 	bl	80074f8 <Sensor_GpioValue>
 8006adc:	4603      	mov	r3, r0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	bd80      	pop	{r7, pc}
	...

08006ae4 <Sensor_UpdateList>:

void Sensor_UpdateList()
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
	Sensor_ClearList();
 8006aea:	f7ff ffcb 	bl	8006a84 <Sensor_ClearList>

	for(uint32_t addr = 0; addr <= 0xFFFF; ++addr)
 8006aee:	2300      	movs	r3, #0
 8006af0:	607b      	str	r3, [r7, #4]
 8006af2:	e04f      	b.n	8006b94 <Sensor_UpdateList+0xb0>
	{
		RingBuffClear(&UART3_rx_data);
 8006af4:	482b      	ldr	r0, [pc, #172]	; (8006ba4 <Sensor_UpdateList+0xc0>)
 8006af6:	f7fb f9d2 	bl	8001e9e <RingBuffClear>

		sprintf(buff, "%04" PRIx16 "t", (uint16_t)addr);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	461a      	mov	r2, r3
 8006b00:	4929      	ldr	r1, [pc, #164]	; (8006ba8 <Sensor_UpdateList+0xc4>)
 8006b02:	482a      	ldr	r0, [pc, #168]	; (8006bac <Sensor_UpdateList+0xc8>)
 8006b04:	f001 fc2e 	bl	8008364 <siprintf>
		UART3_SendData(buff, 5);
 8006b08:	2105      	movs	r1, #5
 8006b0a:	4828      	ldr	r0, [pc, #160]	; (8006bac <Sensor_UpdateList+0xc8>)
 8006b0c:	f000 fd1a 	bl	8007544 <UART3_SendData>

		delay(1);
 8006b10:	4b27      	ldr	r3, [pc, #156]	; (8006bb0 <Sensor_UpdateList+0xcc>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2001      	movs	r0, #1
 8006b16:	4798      	blx	r3
		char* ptr = NULL;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	603b      	str	r3, [r7, #0]
		if( (ptr = strstr(RingBuffGetArray(&UART3_rx_data), "/")) != NULL )
 8006b1c:	4821      	ldr	r0, [pc, #132]	; (8006ba4 <Sensor_UpdateList+0xc0>)
 8006b1e:	f7fb f9d8 	bl	8001ed2 <RingBuffGetArray>
 8006b22:	4603      	mov	r3, r0
 8006b24:	212f      	movs	r1, #47	; 0x2f
 8006b26:	4618      	mov	r0, r3
 8006b28:	f001 fc40 	bl	80083ac <strchr>
 8006b2c:	6038      	str	r0, [r7, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d029      	beq.n	8006b88 <Sensor_UpdateList+0xa4>
		{
			sensor_list[sensor_counter].addr = addr;
 8006b34:	4b1f      	ldr	r3, [pc, #124]	; (8006bb4 <Sensor_UpdateList+0xd0>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	4619      	mov	r1, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	b298      	uxth	r0, r3
 8006b3e:	4a1e      	ldr	r2, [pc, #120]	; (8006bb8 <Sensor_UpdateList+0xd4>)
 8006b40:	460b      	mov	r3, r1
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	440b      	add	r3, r1
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	3302      	adds	r3, #2
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	801a      	strh	r2, [r3, #0]
			sensor_list[sensor_counter].type = (enum SENSOR_TYPE) *(ptr + 1);
 8006b50:	4b18      	ldr	r3, [pc, #96]	; (8006bb4 <Sensor_UpdateList+0xd0>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	4619      	mov	r1, r3
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	7818      	ldrb	r0, [r3, #0]
 8006b5c:	4a16      	ldr	r2, [pc, #88]	; (8006bb8 <Sensor_UpdateList+0xd4>)
 8006b5e:	460b      	mov	r3, r1
 8006b60:	005b      	lsls	r3, r3, #1
 8006b62:	440b      	add	r3, r1
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	4602      	mov	r2, r0
 8006b6a:	701a      	strb	r2, [r3, #0]
			sensor_counter++;
 8006b6c:	4b11      	ldr	r3, [pc, #68]	; (8006bb4 <Sensor_UpdateList+0xd0>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	3301      	adds	r3, #1
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	4b0f      	ldr	r3, [pc, #60]	; (8006bb4 <Sensor_UpdateList+0xd0>)
 8006b76:	701a      	strb	r2, [r3, #0]
			if(sensor_counter >= 16)
 8006b78:	4b0e      	ldr	r3, [pc, #56]	; (8006bb4 <Sensor_UpdateList+0xd0>)
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b0f      	cmp	r3, #15
 8006b7e:	d903      	bls.n	8006b88 <Sensor_UpdateList+0xa4>
			{
				UART3_SendData_byte('/');
 8006b80:	202f      	movs	r0, #47	; 0x2f
 8006b82:	f000 fcc7 	bl	8007514 <UART3_SendData_byte>
				return;
 8006b86:	e009      	b.n	8006b9c <Sensor_UpdateList+0xb8>
			}
		}
		UART3_SendData_byte('/');
 8006b88:	202f      	movs	r0, #47	; 0x2f
 8006b8a:	f000 fcc3 	bl	8007514 <UART3_SendData_byte>
	for(uint32_t addr = 0; addr <= 0xFFFF; ++addr)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3301      	adds	r3, #1
 8006b92:	607b      	str	r3, [r7, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b9a:	d3ab      	bcc.n	8006af4 <Sensor_UpdateList+0x10>
	}
}
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	200139ac 	.word	0x200139ac
 8006ba8:	08009ee4 	.word	0x08009ee4
 8006bac:	20008b54 	.word	0x20008b54
 8006bb0:	20008b64 	.word	0x20008b64
 8006bb4:	20008b52 	.word	0x20008b52
 8006bb8:	20008ba4 	.word	0x20008ba4

08006bbc <Sensor_UpdateValue>:

void Sensor_UpdateValue()
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	71fb      	strb	r3, [r7, #7]
 8006bc6:	e08a      	b.n	8006cde <Sensor_UpdateValue+0x122>
	{
		if(sensor_list[i].addr == 0) {
 8006bc8:	79fa      	ldrb	r2, [r7, #7]
 8006bca:	4949      	ldr	r1, [pc, #292]	; (8006cf0 <Sensor_UpdateValue+0x134>)
 8006bcc:	4613      	mov	r3, r2
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	440b      	add	r3, r1
 8006bd6:	3302      	adds	r3, #2
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d07b      	beq.n	8006cd6 <Sensor_UpdateValue+0x11a>
			continue;
		}

		RingBuffClear(&UART3_rx_data);
 8006bde:	4845      	ldr	r0, [pc, #276]	; (8006cf4 <Sensor_UpdateValue+0x138>)
 8006be0:	f7fb f95d 	bl	8001e9e <RingBuffClear>

		sprintf(buff, "%04" PRIx16 "v", sensor_list[i].addr);
 8006be4:	79fa      	ldrb	r2, [r7, #7]
 8006be6:	4942      	ldr	r1, [pc, #264]	; (8006cf0 <Sensor_UpdateValue+0x134>)
 8006be8:	4613      	mov	r3, r2
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	4413      	add	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	440b      	add	r3, r1
 8006bf2:	3302      	adds	r3, #2
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	493f      	ldr	r1, [pc, #252]	; (8006cf8 <Sensor_UpdateValue+0x13c>)
 8006bfa:	4840      	ldr	r0, [pc, #256]	; (8006cfc <Sensor_UpdateValue+0x140>)
 8006bfc:	f001 fbb2 	bl	8008364 <siprintf>
		UART3_SendData(buff, 5);
 8006c00:	2105      	movs	r1, #5
 8006c02:	483e      	ldr	r0, [pc, #248]	; (8006cfc <Sensor_UpdateValue+0x140>)
 8006c04:	f000 fc9e 	bl	8007544 <UART3_SendData>

		delay(5);
 8006c08:	4b3d      	ldr	r3, [pc, #244]	; (8006d00 <Sensor_UpdateValue+0x144>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2005      	movs	r0, #5
 8006c0e:	4798      	blx	r3
		char* ptr = NULL;
 8006c10:	2300      	movs	r3, #0
 8006c12:	603b      	str	r3, [r7, #0]
		if( (ptr = strstr(RingBuffGetArray(&UART3_rx_data), "/")) != NULL )
 8006c14:	4837      	ldr	r0, [pc, #220]	; (8006cf4 <Sensor_UpdateValue+0x138>)
 8006c16:	f7fb f95c 	bl	8001ed2 <RingBuffGetArray>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	212f      	movs	r1, #47	; 0x2f
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 fbc4 	bl	80083ac <strchr>
 8006c24:	6038      	str	r0, [r7, #0]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01c      	beq.n	8006c66 <Sensor_UpdateValue+0xaa>
		{
			sensor_list[i].value = *(ptr + 1) << 24 | *(ptr + 2) << 16 | *(ptr + 3) << 8 | *(ptr + 4);
 8006c2c:	79fa      	ldrb	r2, [r7, #7]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	3301      	adds	r3, #1
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	0619      	lsls	r1, r3, #24
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	3302      	adds	r3, #2
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	041b      	lsls	r3, r3, #16
 8006c3e:	4319      	orrs	r1, r3
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	3303      	adds	r3, #3
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	3104      	adds	r1, #4
 8006c4e:	7809      	ldrb	r1, [r1, #0]
 8006c50:	430b      	orrs	r3, r1
 8006c52:	4618      	mov	r0, r3
 8006c54:	4926      	ldr	r1, [pc, #152]	; (8006cf0 <Sensor_UpdateValue+0x134>)
 8006c56:	4613      	mov	r3, r2
 8006c58:	005b      	lsls	r3, r3, #1
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	440b      	add	r3, r1
 8006c60:	3304      	adds	r3, #4
 8006c62:	6018      	str	r0, [r3, #0]
 8006c64:	e033      	b.n	8006cce <Sensor_UpdateValue+0x112>
		} else {
			if(sensor_list[i].error_counter > REQ_TO_DISABLE)
 8006c66:	79fa      	ldrb	r2, [r7, #7]
 8006c68:	4921      	ldr	r1, [pc, #132]	; (8006cf0 <Sensor_UpdateValue+0x134>)
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	440b      	add	r3, r1
 8006c74:	3308      	adds	r3, #8
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b06      	cmp	r3, #6
 8006c7a:	d90a      	bls.n	8006c92 <Sensor_UpdateValue+0xd6>
			{
				sensor_list[i].addr = 0;
 8006c7c:	79fa      	ldrb	r2, [r7, #7]
 8006c7e:	491c      	ldr	r1, [pc, #112]	; (8006cf0 <Sensor_UpdateValue+0x134>)
 8006c80:	4613      	mov	r3, r2
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	440b      	add	r3, r1
 8006c8a:	3302      	adds	r3, #2
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	801a      	strh	r2, [r3, #0]
 8006c90:	e01d      	b.n	8006cce <Sensor_UpdateValue+0x112>
			} else {
				sensor_list[i].value = 0;
 8006c92:	79fa      	ldrb	r2, [r7, #7]
 8006c94:	4916      	ldr	r1, [pc, #88]	; (8006cf0 <Sensor_UpdateValue+0x134>)
 8006c96:	4613      	mov	r3, r2
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]
				sensor_list[i].error_counter++;
 8006ca6:	79fa      	ldrb	r2, [r7, #7]
 8006ca8:	4911      	ldr	r1, [pc, #68]	; (8006cf0 <Sensor_UpdateValue+0x134>)
 8006caa:	4613      	mov	r3, r2
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	4413      	add	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	440b      	add	r3, r1
 8006cb4:	3308      	adds	r3, #8
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	b2d8      	uxtb	r0, r3
 8006cbc:	490c      	ldr	r1, [pc, #48]	; (8006cf0 <Sensor_UpdateValue+0x134>)
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	3308      	adds	r3, #8
 8006cca:	4602      	mov	r2, r0
 8006ccc:	701a      	strb	r2, [r3, #0]
			}
		}

		UART3_SendData_byte('/');
 8006cce:	202f      	movs	r0, #47	; 0x2f
 8006cd0:	f000 fc20 	bl	8007514 <UART3_SendData_byte>
 8006cd4:	e000      	b.n	8006cd8 <Sensor_UpdateValue+0x11c>
			continue;
 8006cd6:	bf00      	nop
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8006cd8:	79fb      	ldrb	r3, [r7, #7]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	71fb      	strb	r3, [r7, #7]
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	2b1f      	cmp	r3, #31
 8006ce2:	f67f af71 	bls.w	8006bc8 <Sensor_UpdateValue+0xc>
	}
}
 8006ce6:	bf00      	nop
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20008ba4 	.word	0x20008ba4
 8006cf4:	200139ac 	.word	0x200139ac
 8006cf8:	08009eec 	.word	0x08009eec
 8006cfc:	20008b54 	.word	0x20008b54
 8006d00:	20008b64 	.word	0x20008b64

08006d04 <Sensor_CheckValue>:

uint8_t Sensor_CheckValue(uint16_t sen_addr, uint32_t value)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	6039      	str	r1, [r7, #0]
 8006d0e:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8006d10:	2300      	movs	r3, #0
 8006d12:	73fb      	strb	r3, [r7, #15]
 8006d14:	e01e      	b.n	8006d54 <Sensor_CheckValue+0x50>
	{
		if(sensor_list[i].addr == sen_addr)
 8006d16:	7bfa      	ldrb	r2, [r7, #15]
 8006d18:	4913      	ldr	r1, [pc, #76]	; (8006d68 <Sensor_CheckValue+0x64>)
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	4413      	add	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	440b      	add	r3, r1
 8006d24:	3302      	adds	r3, #2
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	88fa      	ldrh	r2, [r7, #6]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d10f      	bne.n	8006d4e <Sensor_CheckValue+0x4a>
		{
			return sensor_list[i].value >= value ? 1 : 0;
 8006d2e:	7bfa      	ldrb	r2, [r7, #15]
 8006d30:	490d      	ldr	r1, [pc, #52]	; (8006d68 <Sensor_CheckValue+0x64>)
 8006d32:	4613      	mov	r3, r2
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	4413      	add	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	440b      	add	r3, r1
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	bf2c      	ite	cs
 8006d46:	2301      	movcs	r3, #1
 8006d48:	2300      	movcc	r3, #0
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	e006      	b.n	8006d5c <Sensor_CheckValue+0x58>
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	3301      	adds	r3, #1
 8006d52:	73fb      	strb	r3, [r7, #15]
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	2b1f      	cmp	r3, #31
 8006d58:	d9dd      	bls.n	8006d16 <Sensor_CheckValue+0x12>
		}
	}
	return 0;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	20008ba4 	.word	0x20008ba4

08006d6c <Sensor_task>:
#include "FreeRTOS.h"
#include "task.h"


void Sensor_task( void * pvParameters )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d009      	beq.n	8006d8e <Sensor_task+0x22>
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	e7fe      	b.n	8006d8c <Sensor_task+0x20>

	Sensor_Init(vTaskDelay);
 8006d8e:	4809      	ldr	r0, [pc, #36]	; (8006db4 <Sensor_task+0x48>)
 8006d90:	f7ff fe8a 	bl	8006aa8 <Sensor_Init>
	Sensor_UpdateList();
 8006d94:	f7ff fea6 	bl	8006ae4 <Sensor_UpdateList>

	while(1)
	{
		if(Sensor_GPIOUpdateList())
 8006d98:	f7ff fe9c 	bl	8006ad4 <Sensor_GPIOUpdateList>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <Sensor_task+0x3a>
		{
			Sensor_UpdateList();
 8006da2:	f7ff fe9f 	bl	8006ae4 <Sensor_UpdateList>
		}

		Sensor_UpdateValue();
 8006da6:	f7ff ff09 	bl	8006bbc <Sensor_UpdateValue>

		vTaskDelay(pdMS_TO_TICKS(200));
 8006daa:	20c8      	movs	r0, #200	; 0xc8
 8006dac:	f7fe f990 	bl	80050d0 <vTaskDelay>
		if(Sensor_GPIOUpdateList())
 8006db0:	e7f2      	b.n	8006d98 <Sensor_task+0x2c>
 8006db2:	bf00      	nop
 8006db4:	080050d1 	.word	0x080050d1

08006db8 <Sensor_TaskInit>:
	}
}

void Sensor_TaskInit( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	603b      	str	r3, [r7, #0]

	BaseType_t xReturned =
 8006dc2:	463b      	mov	r3, r7
 8006dc4:	9301      	str	r3, [sp, #4]
 8006dc6:	2304      	movs	r3, #4
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	2301      	movs	r3, #1
 8006dcc:	2280      	movs	r2, #128	; 0x80
 8006dce:	4904      	ldr	r1, [pc, #16]	; (8006de0 <Sensor_TaskInit+0x28>)
 8006dd0:	4804      	ldr	r0, [pc, #16]	; (8006de4 <Sensor_TaskInit+0x2c>)
 8006dd2:	f7fe f839 	bl	8004e48 <xTaskCreate>
 8006dd6:	6078      	str	r0, [r7, #4]
					128,	 						 /* Stack size in words, not bytes. */
                    ( void * ) 1,     			 	 /* Parameter passed into the task. */
                    4,				 				 /* Priority at which the task is created. */
                    &xHandle );   			   	     /* Used to pass out the created task's handle. */

}
 8006dd8:	bf00      	nop
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	08009ef4 	.word	0x08009ef4
 8006de4:	08006d6d 	.word	0x08006d6d

08006de8 <__NVIC_GetPriorityGrouping>:
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006dec:	4b04      	ldr	r3, [pc, #16]	; (8006e00 <__NVIC_GetPriorityGrouping+0x18>)
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	0a1b      	lsrs	r3, r3, #8
 8006df2:	f003 0307 	and.w	r3, r3, #7
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	e000ed00 	.word	0xe000ed00

08006e04 <__NVIC_EnableIRQ>:
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	db0b      	blt.n	8006e2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e16:	4909      	ldr	r1, [pc, #36]	; (8006e3c <__NVIC_EnableIRQ+0x38>)
 8006e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	79fa      	ldrb	r2, [r7, #7]
 8006e20:	f002 021f 	and.w	r2, r2, #31
 8006e24:	2001      	movs	r0, #1
 8006e26:	fa00 f202 	lsl.w	r2, r0, r2
 8006e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006e2e:	bf00      	nop
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	e000e100 	.word	0xe000e100

08006e40 <__NVIC_SetPriority>:
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4603      	mov	r3, r0
 8006e48:	6039      	str	r1, [r7, #0]
 8006e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	db0a      	blt.n	8006e6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e54:	490d      	ldr	r1, [pc, #52]	; (8006e8c <__NVIC_SetPriority+0x4c>)
 8006e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	0112      	lsls	r2, r2, #4
 8006e60:	b2d2      	uxtb	r2, r2
 8006e62:	440b      	add	r3, r1
 8006e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006e68:	e00a      	b.n	8006e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e6a:	4909      	ldr	r1, [pc, #36]	; (8006e90 <__NVIC_SetPriority+0x50>)
 8006e6c:	79fb      	ldrb	r3, [r7, #7]
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	3b04      	subs	r3, #4
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	0112      	lsls	r2, r2, #4
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	440b      	add	r3, r1
 8006e7e:	761a      	strb	r2, [r3, #24]
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	e000e100 	.word	0xe000e100
 8006e90:	e000ed00 	.word	0xe000ed00

08006e94 <NVIC_EncodePriority>:
{
 8006e94:	b480      	push	{r7}
 8006e96:	b089      	sub	sp, #36	; 0x24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	f1c3 0307 	rsb	r3, r3, #7
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	bf28      	it	cs
 8006eb2:	2304      	movcs	r3, #4
 8006eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	2b06      	cmp	r3, #6
 8006ebc:	d902      	bls.n	8006ec4 <NVIC_EncodePriority+0x30>
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	3b03      	subs	r3, #3
 8006ec2:	e000      	b.n	8006ec6 <NVIC_EncodePriority+0x32>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ec8:	2201      	movs	r2, #1
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed0:	1e5a      	subs	r2, r3, #1
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	401a      	ands	r2, r3
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006eda:	2101      	movs	r1, #1
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee2:	1e59      	subs	r1, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ee8:	4313      	orrs	r3, r2
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3724      	adds	r7, #36	; 0x24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <LL_USART_Enable>:
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60da      	str	r2, [r3, #12]
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	615a      	str	r2, [r3, #20]
}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0320 	and.w	r3, r3, #32
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	bf0c      	ite	eq
 8006f56:	2301      	moveq	r3, #1
 8006f58:	2300      	movne	r3, #0
 8006f5a:	b2db      	uxtb	r3, r3
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f78:	2b40      	cmp	r3, #64	; 0x40
 8006f7a:	bf0c      	ite	eq
 8006f7c:	2301      	moveq	r3, #1
 8006f7e:	2300      	movne	r3, #0
 8006f80:	b2db      	uxtb	r3, r3
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f06f 0220 	mvn.w	r2, #32
 8006f9c:	601a      	str	r2, [r3, #0]
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f043 0220 	orr.w	r2, r3, #32
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	60da      	str	r2, [r3, #12]
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	b2db      	uxtb	r3, r3
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8006ff0:	78fa      	ldrb	r2, [r7, #3]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	605a      	str	r2, [r3, #4]
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
	...

08007004 <UART2_Init>:
#include "stm32f4xx_ll_utils.h"

static struct ring_buffer_struct* UART_rx_data;

void UART2_Init(struct ring_buffer_struct* rx_data)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b090      	sub	sp, #64	; 0x40
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
	LL_USART_InitTypeDef USART_InitStruct = {0};
 800700c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007010:	2200      	movs	r2, #0
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	605a      	str	r2, [r3, #4]
 8007016:	609a      	str	r2, [r3, #8]
 8007018:	60da      	str	r2, [r3, #12]
 800701a:	611a      	str	r2, [r3, #16]
 800701c:	615a      	str	r2, [r3, #20]
 800701e:	619a      	str	r2, [r3, #24]
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007020:	f107 030c 	add.w	r3, r7, #12
 8007024:	2200      	movs	r2, #0
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	605a      	str	r2, [r3, #4]
 800702a:	609a      	str	r2, [r3, #8]
 800702c:	60da      	str	r2, [r3, #12]
 800702e:	611a      	str	r2, [r3, #16]
 8007030:	615a      	str	r2, [r3, #20]

	/**USART2 GPIO Configuration
	PA3   ------> USART2_RX
	PD5   ------> USART2_TX
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8007032:	2308      	movs	r3, #8
 8007034:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007036:	2302      	movs	r3, #2
 8007038:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800703a:	2303      	movs	r3, #3
 800703c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800703e:	2300      	movs	r3, #0
 8007040:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007042:	2300      	movs	r3, #0
 8007044:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8007046:	2307      	movs	r3, #7
 8007048:	623b      	str	r3, [r7, #32]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800704a:	f107 030c 	add.w	r3, r7, #12
 800704e:	4619      	mov	r1, r3
 8007050:	4824      	ldr	r0, [pc, #144]	; (80070e4 <UART2_Init+0xe0>)
 8007052:	f7fb fbf6 	bl	8002842 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8007056:	2320      	movs	r3, #32
 8007058:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800705a:	2302      	movs	r3, #2
 800705c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800705e:	2303      	movs	r3, #3
 8007060:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007062:	2300      	movs	r3, #0
 8007064:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007066:	2300      	movs	r3, #0
 8007068:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800706a:	2307      	movs	r3, #7
 800706c:	623b      	str	r3, [r7, #32]
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800706e:	f107 030c 	add.w	r3, r7, #12
 8007072:	4619      	mov	r1, r3
 8007074:	481c      	ldr	r0, [pc, #112]	; (80070e8 <UART2_Init+0xe4>)
 8007076:	f7fb fbe4 	bl	8002842 <LL_GPIO_Init>

	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800707a:	f7ff feb5 	bl	8006de8 <__NVIC_GetPriorityGrouping>
 800707e:	4603      	mov	r3, r0
 8007080:	2200      	movs	r2, #0
 8007082:	2100      	movs	r1, #0
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff ff05 	bl	8006e94 <NVIC_EncodePriority>
 800708a:	4603      	mov	r3, r0
 800708c:	4619      	mov	r1, r3
 800708e:	2026      	movs	r0, #38	; 0x26
 8007090:	f7ff fed6 	bl	8006e40 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8007094:	2026      	movs	r0, #38	; 0x26
 8007096:	f7ff feb5 	bl	8006e04 <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 115200;
 800709a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80070a0:	2300      	movs	r3, #0
 80070a2:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80070a4:	2300      	movs	r3, #0
 80070a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80070a8:	2300      	movs	r3, #0
 80070aa:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80070ac:	230c      	movs	r3, #12
 80070ae:	637b      	str	r3, [r7, #52]	; 0x34
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	63bb      	str	r3, [r7, #56]	; 0x38
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80070b4:	2300      	movs	r3, #0
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_USART_Init(USART2, &USART_InitStruct);
 80070b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070bc:	4619      	mov	r1, r3
 80070be:	480b      	ldr	r0, [pc, #44]	; (80070ec <UART2_Init+0xe8>)
 80070c0:	f7fc fac0 	bl	8003644 <LL_USART_Init>
	LL_USART_EnableIT_RXNE(USART2);
 80070c4:	4809      	ldr	r0, [pc, #36]	; (80070ec <UART2_Init+0xe8>)
 80070c6:	f7ff ff70 	bl	8006faa <LL_USART_EnableIT_RXNE>
	LL_USART_ConfigAsyncMode(USART2);
 80070ca:	4808      	ldr	r0, [pc, #32]	; (80070ec <UART2_Init+0xe8>)
 80070cc:	f7ff ff23 	bl	8006f16 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART2);
 80070d0:	4806      	ldr	r0, [pc, #24]	; (80070ec <UART2_Init+0xe8>)
 80070d2:	f7ff ff10 	bl	8006ef6 <LL_USART_Enable>

	UART_rx_data = rx_data;
 80070d6:	4a06      	ldr	r2, [pc, #24]	; (80070f0 <UART2_Init+0xec>)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6013      	str	r3, [r2, #0]
}
 80070dc:	bf00      	nop
 80070de:	3740      	adds	r7, #64	; 0x40
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40020000 	.word	0x40020000
 80070e8:	40020c00 	.word	0x40020c00
 80070ec:	40004400 	.word	0x40004400
 80070f0:	20008b68 	.word	0x20008b68

080070f4 <UART2_SendData_byte>:

void UART2_SendData_byte(char data)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART2, data);
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	4619      	mov	r1, r3
 8007102:	4807      	ldr	r0, [pc, #28]	; (8007120 <UART2_SendData_byte+0x2c>)
 8007104:	f7ff ff6e 	bl	8006fe4 <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TC(USART2));
 8007108:	bf00      	nop
 800710a:	4805      	ldr	r0, [pc, #20]	; (8007120 <UART2_SendData_byte+0x2c>)
 800710c:	f7ff ff2c 	bl	8006f68 <LL_USART_IsActiveFlag_TC>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0f9      	beq.n	800710a <UART2_SendData_byte+0x16>
}
 8007116:	bf00      	nop
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	40004400 	.word	0x40004400

08007124 <UART2_SendData>:

void UART2_SendData(char* data, uint32_t data_length)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < data_length; ++i)
 800712e:	2300      	movs	r3, #0
 8007130:	60fb      	str	r3, [r7, #12]
 8007132:	e009      	b.n	8007148 <UART2_SendData+0x24>
	{
		UART2_SendData_byte(data[i]);
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4413      	add	r3, r2
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	4618      	mov	r0, r3
 800713e:	f7ff ffd9 	bl	80070f4 <UART2_SendData_byte>
	for(uint32_t i = 0; i < data_length; ++i)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3301      	adds	r3, #1
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	429a      	cmp	r2, r3
 800714e:	d3f1      	bcc.n	8007134 <UART2_SendData+0x10>
	}
}
 8007150:	bf00      	nop
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <UART2_CharReception_Callback>:

void UART2_CharReception_Callback(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
	__IO uint8_t received_char;
	received_char = LL_USART_ReceiveData8(USART2);
 800715e:	4808      	ldr	r0, [pc, #32]	; (8007180 <UART2_CharReception_Callback+0x28>)
 8007160:	f7ff ff33 	bl	8006fca <LL_USART_ReceiveData8>
 8007164:	4603      	mov	r3, r0
 8007166:	71fb      	strb	r3, [r7, #7]

	RingBuffPush(UART_rx_data, (char)received_char);
 8007168:	4b06      	ldr	r3, [pc, #24]	; (8007184 <UART2_CharReception_Callback+0x2c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	79fa      	ldrb	r2, [r7, #7]
 800716e:	b2d2      	uxtb	r2, r2
 8007170:	4611      	mov	r1, r2
 8007172:	4618      	mov	r0, r3
 8007174:	f7fa fe75 	bl	8001e62 <RingBuffPush>
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	40004400 	.word	0x40004400
 8007184:	20008b68 	.word	0x20008b68

08007188 <Error_Callback>:

static void Error_Callback(void)
{
 8007188:	b480      	push	{r7}
 800718a:	af00      	add	r7, sp, #0
	//dummy
}
 800718c:	bf00      	nop
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
	...

08007198 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART2)) {
 800719c:	4807      	ldr	r0, [pc, #28]	; (80071bc <USART2_IRQHandler+0x24>)
 800719e:	f7ff fed0 	bl	8006f42 <LL_USART_IsActiveFlag_RXNE>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d005      	beq.n	80071b4 <USART2_IRQHandler+0x1c>
		UART2_CharReception_Callback();
 80071a8:	f7ff ffd6 	bl	8007158 <UART2_CharReception_Callback>
		LL_USART_ClearFlag_RXNE(USART2);
 80071ac:	4803      	ldr	r0, [pc, #12]	; (80071bc <USART2_IRQHandler+0x24>)
 80071ae:	f7ff feee 	bl	8006f8e <LL_USART_ClearFlag_RXNE>
	} else {
		Error_Callback();
	}
}
 80071b2:	e001      	b.n	80071b8 <USART2_IRQHandler+0x20>
		Error_Callback();
 80071b4:	f7ff ffe8 	bl	8007188 <Error_Callback>
}
 80071b8:	bf00      	nop
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	40004400 	.word	0x40004400

080071c0 <__NVIC_GetPriorityGrouping>:
{
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071c4:	4b04      	ldr	r3, [pc, #16]	; (80071d8 <__NVIC_GetPriorityGrouping+0x18>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	0a1b      	lsrs	r3, r3, #8
 80071ca:	f003 0307 	and.w	r3, r3, #7
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	e000ed00 	.word	0xe000ed00

080071dc <__NVIC_EnableIRQ>:
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	db0b      	blt.n	8007206 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071ee:	4909      	ldr	r1, [pc, #36]	; (8007214 <__NVIC_EnableIRQ+0x38>)
 80071f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071f4:	095b      	lsrs	r3, r3, #5
 80071f6:	79fa      	ldrb	r2, [r7, #7]
 80071f8:	f002 021f 	and.w	r2, r2, #31
 80071fc:	2001      	movs	r0, #1
 80071fe:	fa00 f202 	lsl.w	r2, r0, r2
 8007202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	e000e100 	.word	0xe000e100

08007218 <__NVIC_SetPriority>:
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	4603      	mov	r3, r0
 8007220:	6039      	str	r1, [r7, #0]
 8007222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007228:	2b00      	cmp	r3, #0
 800722a:	db0a      	blt.n	8007242 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800722c:	490d      	ldr	r1, [pc, #52]	; (8007264 <__NVIC_SetPriority+0x4c>)
 800722e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	b2d2      	uxtb	r2, r2
 8007236:	0112      	lsls	r2, r2, #4
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	440b      	add	r3, r1
 800723c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007240:	e00a      	b.n	8007258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007242:	4909      	ldr	r1, [pc, #36]	; (8007268 <__NVIC_SetPriority+0x50>)
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	f003 030f 	and.w	r3, r3, #15
 800724a:	3b04      	subs	r3, #4
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	b2d2      	uxtb	r2, r2
 8007250:	0112      	lsls	r2, r2, #4
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	440b      	add	r3, r1
 8007256:	761a      	strb	r2, [r3, #24]
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	e000e100 	.word	0xe000e100
 8007268:	e000ed00 	.word	0xe000ed00

0800726c <NVIC_EncodePriority>:
{
 800726c:	b480      	push	{r7}
 800726e:	b089      	sub	sp, #36	; 0x24
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f003 0307 	and.w	r3, r3, #7
 800727e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	f1c3 0307 	rsb	r3, r3, #7
 8007286:	2b04      	cmp	r3, #4
 8007288:	bf28      	it	cs
 800728a:	2304      	movcs	r3, #4
 800728c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	3304      	adds	r3, #4
 8007292:	2b06      	cmp	r3, #6
 8007294:	d902      	bls.n	800729c <NVIC_EncodePriority+0x30>
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	3b03      	subs	r3, #3
 800729a:	e000      	b.n	800729e <NVIC_EncodePriority+0x32>
 800729c:	2300      	movs	r3, #0
 800729e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072a0:	2201      	movs	r2, #1
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	fa02 f303 	lsl.w	r3, r2, r3
 80072a8:	1e5a      	subs	r2, r3, #1
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	401a      	ands	r2, r3
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80072b2:	2101      	movs	r1, #1
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ba:	1e59      	subs	r1, r3, #1
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072c0:	4313      	orrs	r3, r2
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3724      	adds	r7, #36	; 0x24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <LL_GPIO_ReadInputPort>:
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <LL_USART_Enable>:
{
 80072e6:	b480      	push	{r7}
 80072e8:	b083      	sub	sp, #12
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	60da      	str	r2, [r3, #12]
}
 80072fa:	bf00      	nop
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <LL_USART_ConfigAsyncMode>:
{
 8007306:	b480      	push	{r7}
 8007308:	b083      	sub	sp, #12
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	615a      	str	r2, [r3, #20]
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <LL_USART_IsActiveFlag_RXNE>:
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0320 	and.w	r3, r3, #32
 8007342:	2b20      	cmp	r3, #32
 8007344:	bf0c      	ite	eq
 8007346:	2301      	moveq	r3, #1
 8007348:	2300      	movne	r3, #0
 800734a:	b2db      	uxtb	r3, r3
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <LL_USART_IsActiveFlag_TC>:
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007368:	2b40      	cmp	r3, #64	; 0x40
 800736a:	bf0c      	ite	eq
 800736c:	2301      	moveq	r3, #1
 800736e:	2300      	movne	r3, #0
 8007370:	b2db      	uxtb	r3, r3
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <LL_USART_ClearFlag_RXNE>:
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f06f 0220 	mvn.w	r2, #32
 800738c:	601a      	str	r2, [r3, #0]
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <LL_USART_EnableIT_RXNE>:
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	f043 0220 	orr.w	r2, r3, #32
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60da      	str	r2, [r3, #12]
}
 80073ae:	bf00      	nop
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <LL_USART_ReceiveData8>:
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	b2db      	uxtb	r3, r3
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <LL_USART_TransmitData8>:
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80073e0:	78fa      	ldrb	r2, [r7, #3]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	605a      	str	r2, [r3, #4]
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
	...

080073f4 <UART3_Init>:
#include "stm32f4xx_ll_utils.h"

static struct ring_buffer_struct* UART_rx_data;

void UART3_Init(struct ring_buffer_struct* rx_data)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b090      	sub	sp, #64	; 0x40
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
	LL_USART_InitTypeDef USART_InitStruct = {0};
 80073fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	605a      	str	r2, [r3, #4]
 8007406:	609a      	str	r2, [r3, #8]
 8007408:	60da      	str	r2, [r3, #12]
 800740a:	611a      	str	r2, [r3, #16]
 800740c:	615a      	str	r2, [r3, #20]
 800740e:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007410:	f107 030c 	add.w	r3, r7, #12
 8007414:	2200      	movs	r2, #0
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	605a      	str	r2, [r3, #4]
 800741a:	609a      	str	r2, [r3, #8]
 800741c:	60da      	str	r2, [r3, #12]
 800741e:	611a      	str	r2, [r3, #16]
 8007420:	615a      	str	r2, [r3, #20]

	/**USART3 GPIO Configuration
	PD8   ------> USART3_TX
	PD9   ------> USART3_RX
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8007422:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007426:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007428:	2302      	movs	r3, #2
 800742a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800742c:	2303      	movs	r3, #3
 800742e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007430:	2300      	movs	r3, #0
 8007432:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007434:	2300      	movs	r3, #0
 8007436:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8007438:	2307      	movs	r3, #7
 800743a:	623b      	str	r3, [r7, #32]
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800743c:	f107 030c 	add.w	r3, r7, #12
 8007440:	4619      	mov	r1, r3
 8007442:	481c      	ldr	r0, [pc, #112]	; (80074b4 <UART3_Init+0xc0>)
 8007444:	f7fb f9fd 	bl	8002842 <LL_GPIO_Init>

	NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007448:	f7ff feba 	bl	80071c0 <__NVIC_GetPriorityGrouping>
 800744c:	4603      	mov	r3, r0
 800744e:	2200      	movs	r2, #0
 8007450:	2100      	movs	r1, #0
 8007452:	4618      	mov	r0, r3
 8007454:	f7ff ff0a 	bl	800726c <NVIC_EncodePriority>
 8007458:	4603      	mov	r3, r0
 800745a:	4619      	mov	r1, r3
 800745c:	2027      	movs	r0, #39	; 0x27
 800745e:	f7ff fedb 	bl	8007218 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART3_IRQn);
 8007462:	2027      	movs	r0, #39	; 0x27
 8007464:	f7ff feba 	bl	80071dc <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 115200;
 8007468:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800746e:	2300      	movs	r3, #0
 8007470:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007472:	2300      	movs	r3, #0
 8007474:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007476:	2300      	movs	r3, #0
 8007478:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800747a:	230c      	movs	r3, #12
 800747c:	637b      	str	r3, [r7, #52]	; 0x34
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800747e:	2300      	movs	r3, #0
 8007480:	63bb      	str	r3, [r7, #56]	; 0x38
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007482:	2300      	movs	r3, #0
 8007484:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_USART_Init(USART3, &USART_InitStruct);
 8007486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800748a:	4619      	mov	r1, r3
 800748c:	480a      	ldr	r0, [pc, #40]	; (80074b8 <UART3_Init+0xc4>)
 800748e:	f7fc f8d9 	bl	8003644 <LL_USART_Init>
	LL_USART_EnableIT_RXNE(USART3);
 8007492:	4809      	ldr	r0, [pc, #36]	; (80074b8 <UART3_Init+0xc4>)
 8007494:	f7ff ff81 	bl	800739a <LL_USART_EnableIT_RXNE>
	LL_USART_ConfigAsyncMode(USART3);
 8007498:	4807      	ldr	r0, [pc, #28]	; (80074b8 <UART3_Init+0xc4>)
 800749a:	f7ff ff34 	bl	8007306 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART3);
 800749e:	4806      	ldr	r0, [pc, #24]	; (80074b8 <UART3_Init+0xc4>)
 80074a0:	f7ff ff21 	bl	80072e6 <LL_USART_Enable>

	UART_rx_data = rx_data;
 80074a4:	4a05      	ldr	r2, [pc, #20]	; (80074bc <UART3_Init+0xc8>)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6013      	str	r3, [r2, #0]
}
 80074aa:	bf00      	nop
 80074ac:	3740      	adds	r7, #64	; 0x40
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	40020c00 	.word	0x40020c00
 80074b8:	40004800 	.word	0x40004800
 80074bc:	20008b6c 	.word	0x20008b6c

080074c0 <Sensor_UpdateGpioInit>:

void Sensor_UpdateGpioInit()
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074c6:	463b      	mov	r3, r7
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	605a      	str	r2, [r3, #4]
 80074ce:	609a      	str	r2, [r3, #8]
 80074d0:	60da      	str	r2, [r3, #12]
 80074d2:	611a      	str	r2, [r3, #16]
 80074d4:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80074d6:	2301      	movs	r3, #1
 80074d8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80074da:	2300      	movs	r3, #0
 80074dc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80074de:	2302      	movs	r3, #2
 80074e0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074e2:	463b      	mov	r3, r7
 80074e4:	4619      	mov	r1, r3
 80074e6:	4803      	ldr	r0, [pc, #12]	; (80074f4 <Sensor_UpdateGpioInit+0x34>)
 80074e8:	f7fb f9ab 	bl	8002842 <LL_GPIO_Init>
}
 80074ec:	bf00      	nop
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	40020000 	.word	0x40020000

080074f8 <Sensor_GpioValue>:

uint8_t Sensor_GpioValue()
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
	return LL_GPIO_ReadInputPort(GPIOA) & LL_GPIO_PIN_0;
 80074fc:	4804      	ldr	r0, [pc, #16]	; (8007510 <Sensor_GpioValue+0x18>)
 80074fe:	f7ff fee6 	bl	80072ce <LL_GPIO_ReadInputPort>
 8007502:	4603      	mov	r3, r0
 8007504:	b2db      	uxtb	r3, r3
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	b2db      	uxtb	r3, r3
}
 800750c:	4618      	mov	r0, r3
 800750e:	bd80      	pop	{r7, pc}
 8007510:	40020000 	.word	0x40020000

08007514 <UART3_SendData_byte>:

void UART3_SendData_byte(char data)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART3, data);
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	4619      	mov	r1, r3
 8007522:	4807      	ldr	r0, [pc, #28]	; (8007540 <UART3_SendData_byte+0x2c>)
 8007524:	f7ff ff56 	bl	80073d4 <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TC(USART3));
 8007528:	bf00      	nop
 800752a:	4805      	ldr	r0, [pc, #20]	; (8007540 <UART3_SendData_byte+0x2c>)
 800752c:	f7ff ff14 	bl	8007358 <LL_USART_IsActiveFlag_TC>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0f9      	beq.n	800752a <UART3_SendData_byte+0x16>
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	40004800 	.word	0x40004800

08007544 <UART3_SendData>:

void UART3_SendData(char* data, uint32_t data_length)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < data_length; ++i)
 800754e:	2300      	movs	r3, #0
 8007550:	60fb      	str	r3, [r7, #12]
 8007552:	e009      	b.n	8007568 <UART3_SendData+0x24>
	{
		UART3_SendData_byte(data[i]);
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4413      	add	r3, r2
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	4618      	mov	r0, r3
 800755e:	f7ff ffd9 	bl	8007514 <UART3_SendData_byte>
	for(uint32_t i = 0; i < data_length; ++i)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	3301      	adds	r3, #1
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	429a      	cmp	r2, r3
 800756e:	d3f1      	bcc.n	8007554 <UART3_SendData+0x10>
	}
}
 8007570:	bf00      	nop
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <UART3_CharReception_Callback>:

void UART3_CharReception_Callback(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
	__IO uint8_t received_char;
	received_char = LL_USART_ReceiveData8(USART3);
 800757e:	4808      	ldr	r0, [pc, #32]	; (80075a0 <UART3_CharReception_Callback+0x28>)
 8007580:	f7ff ff1b 	bl	80073ba <LL_USART_ReceiveData8>
 8007584:	4603      	mov	r3, r0
 8007586:	71fb      	strb	r3, [r7, #7]

	RingBuffPush(UART_rx_data, (char)received_char);
 8007588:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <UART3_CharReception_Callback+0x2c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	79fa      	ldrb	r2, [r7, #7]
 800758e:	b2d2      	uxtb	r2, r2
 8007590:	4611      	mov	r1, r2
 8007592:	4618      	mov	r0, r3
 8007594:	f7fa fc65 	bl	8001e62 <RingBuffPush>
}
 8007598:	bf00      	nop
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	40004800 	.word	0x40004800
 80075a4:	20008b6c 	.word	0x20008b6c

080075a8 <Error_Callback>:

static void Error_Callback(void)
{
 80075a8:	b480      	push	{r7}
 80075aa:	af00      	add	r7, sp, #0
	//dummy
}
 80075ac:	bf00      	nop
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
	...

080075b8 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART3)) {
 80075bc:	4807      	ldr	r0, [pc, #28]	; (80075dc <USART3_IRQHandler+0x24>)
 80075be:	f7ff feb8 	bl	8007332 <LL_USART_IsActiveFlag_RXNE>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d005      	beq.n	80075d4 <USART3_IRQHandler+0x1c>
		UART3_CharReception_Callback();
 80075c8:	f7ff ffd6 	bl	8007578 <UART3_CharReception_Callback>
		LL_USART_ClearFlag_RXNE(USART3);
 80075cc:	4803      	ldr	r0, [pc, #12]	; (80075dc <USART3_IRQHandler+0x24>)
 80075ce:	f7ff fed6 	bl	800737e <LL_USART_ClearFlag_RXNE>
	} else {
		Error_Callback();
	}
}
 80075d2:	e001      	b.n	80075d8 <USART3_IRQHandler+0x20>
		Error_Callback();
 80075d4:	f7ff ffe8 	bl	80075a8 <Error_Callback>
}
 80075d8:	bf00      	nop
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	40004800 	.word	0x40004800

080075e0 <MX_FREERTOS_Init>:

void StartDefaultTask(void *argument);
void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

void MX_FREERTOS_Init(void)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	af00      	add	r7, sp, #0
	Led_TaskInit();
 80075e4:	f7ff f8dc 	bl	80067a0 <Led_TaskInit>
	Relay_TaskInit();
 80075e8:	f7ff fa34 	bl	8006a54 <Relay_TaskInit>

	ESP_TaskInit();
 80075ec:	f7ff f80a 	bl	8006604 <ESP_TaskInit>

	BitEngine_TaskInit();
 80075f0:	f7fe ff24 	bl	800643c <BitEngine_TaskInit>
	Sensor_TaskInit();
 80075f4:	f7ff fbe0 	bl	8006db8 <Sensor_TaskInit>

	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80075f8:	4a04      	ldr	r2, [pc, #16]	; (800760c <MX_FREERTOS_Init+0x2c>)
 80075fa:	2100      	movs	r1, #0
 80075fc:	4804      	ldr	r0, [pc, #16]	; (8007610 <MX_FREERTOS_Init+0x30>)
 80075fe:	f7fc f923 	bl	8003848 <osThreadNew>
 8007602:	4602      	mov	r2, r0
 8007604:	4b03      	ldr	r3, [pc, #12]	; (8007614 <MX_FREERTOS_Init+0x34>)
 8007606:	601a      	str	r2, [r3, #0]
}
 8007608:	bf00      	nop
 800760a:	bd80      	pop	{r7, pc}
 800760c:	08009f28 	.word	0x08009f28
 8007610:	08007619 	.word	0x08007619
 8007614:	200149b0 	.word	0x200149b0

08007618 <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 8007620:	2001      	movs	r0, #1
 8007622:	f7fc f9b7 	bl	8003994 <osDelay>
 8007626:	e7fb      	b.n	8007620 <StartDefaultTask+0x8>

08007628 <LL_RCC_HSI_Enable>:
{
 8007628:	b480      	push	{r7}
 800762a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800762c:	4a05      	ldr	r2, [pc, #20]	; (8007644 <LL_RCC_HSI_Enable+0x1c>)
 800762e:	4b05      	ldr	r3, [pc, #20]	; (8007644 <LL_RCC_HSI_Enable+0x1c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f043 0301 	orr.w	r3, r3, #1
 8007636:	6013      	str	r3, [r2, #0]
}
 8007638:	bf00      	nop
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40023800 	.word	0x40023800

08007648 <LL_RCC_HSI_IsReady>:
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800764c:	4b06      	ldr	r3, [pc, #24]	; (8007668 <LL_RCC_HSI_IsReady+0x20>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0302 	and.w	r3, r3, #2
 8007654:	2b02      	cmp	r3, #2
 8007656:	bf0c      	ite	eq
 8007658:	2301      	moveq	r3, #1
 800765a:	2300      	movne	r3, #0
 800765c:	b2db      	uxtb	r3, r3
}
 800765e:	4618      	mov	r0, r3
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	40023800 	.word	0x40023800

0800766c <LL_RCC_HSI_SetCalibTrimming>:
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8007674:	4907      	ldr	r1, [pc, #28]	; (8007694 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8007676:	4b07      	ldr	r3, [pc, #28]	; (8007694 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	4313      	orrs	r3, r2
 8007684:	600b      	str	r3, [r1, #0]
}
 8007686:	bf00      	nop
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	40023800 	.word	0x40023800

08007698 <LL_RCC_LSI_Enable>:
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800769c:	4a05      	ldr	r2, [pc, #20]	; (80076b4 <LL_RCC_LSI_Enable+0x1c>)
 800769e:	4b05      	ldr	r3, [pc, #20]	; (80076b4 <LL_RCC_LSI_Enable+0x1c>)
 80076a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076a2:	f043 0301 	orr.w	r3, r3, #1
 80076a6:	6753      	str	r3, [r2, #116]	; 0x74
}
 80076a8:	bf00      	nop
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	40023800 	.word	0x40023800

080076b8 <LL_RCC_LSI_IsReady>:
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 80076bc:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <LL_RCC_LSI_IsReady+0x20>)
 80076be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	bf0c      	ite	eq
 80076c8:	2301      	moveq	r3, #1
 80076ca:	2300      	movne	r3, #0
 80076cc:	b2db      	uxtb	r3, r3
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	40023800 	.word	0x40023800

080076dc <LL_RCC_SetSysClkSource>:
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80076e4:	4906      	ldr	r1, [pc, #24]	; (8007700 <LL_RCC_SetSysClkSource+0x24>)
 80076e6:	4b06      	ldr	r3, [pc, #24]	; (8007700 <LL_RCC_SetSysClkSource+0x24>)
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f023 0203 	bic.w	r2, r3, #3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	608b      	str	r3, [r1, #8]
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	40023800 	.word	0x40023800

08007704 <LL_RCC_GetSysClkSource>:
{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007708:	4b04      	ldr	r3, [pc, #16]	; (800771c <LL_RCC_GetSysClkSource+0x18>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f003 030c 	and.w	r3, r3, #12
}
 8007710:	4618      	mov	r0, r3
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	40023800 	.word	0x40023800

08007720 <LL_RCC_SetAHBPrescaler>:
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007728:	4906      	ldr	r1, [pc, #24]	; (8007744 <LL_RCC_SetAHBPrescaler+0x24>)
 800772a:	4b06      	ldr	r3, [pc, #24]	; (8007744 <LL_RCC_SetAHBPrescaler+0x24>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4313      	orrs	r3, r2
 8007736:	608b      	str	r3, [r1, #8]
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	40023800 	.word	0x40023800

08007748 <LL_RCC_SetAPB1Prescaler>:
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007750:	4906      	ldr	r1, [pc, #24]	; (800776c <LL_RCC_SetAPB1Prescaler+0x24>)
 8007752:	4b06      	ldr	r3, [pc, #24]	; (800776c <LL_RCC_SetAPB1Prescaler+0x24>)
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4313      	orrs	r3, r2
 800775e:	608b      	str	r3, [r1, #8]
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	40023800 	.word	0x40023800

08007770 <LL_RCC_SetAPB2Prescaler>:
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007778:	4906      	ldr	r1, [pc, #24]	; (8007794 <LL_RCC_SetAPB2Prescaler+0x24>)
 800777a:	4b06      	ldr	r3, [pc, #24]	; (8007794 <LL_RCC_SetAPB2Prescaler+0x24>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4313      	orrs	r3, r2
 8007786:	608b      	str	r3, [r1, #8]
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	40023800 	.word	0x40023800

08007798 <LL_RCC_SetRTCClockSource>:
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80077a0:	4906      	ldr	r1, [pc, #24]	; (80077bc <LL_RCC_SetRTCClockSource+0x24>)
 80077a2:	4b06      	ldr	r3, [pc, #24]	; (80077bc <LL_RCC_SetRTCClockSource+0x24>)
 80077a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	670b      	str	r3, [r1, #112]	; 0x70
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	40023800 	.word	0x40023800

080077c0 <LL_RCC_EnableRTC>:
{
 80077c0:	b480      	push	{r7}
 80077c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80077c4:	4a05      	ldr	r2, [pc, #20]	; (80077dc <LL_RCC_EnableRTC+0x1c>)
 80077c6:	4b05      	ldr	r3, [pc, #20]	; (80077dc <LL_RCC_EnableRTC+0x1c>)
 80077c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ce:	6713      	str	r3, [r2, #112]	; 0x70
}
 80077d0:	bf00      	nop
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	40023800 	.word	0x40023800

080077e0 <LL_RCC_ForceBackupDomainReset>:
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80077e4:	4a05      	ldr	r2, [pc, #20]	; (80077fc <LL_RCC_ForceBackupDomainReset+0x1c>)
 80077e6:	4b05      	ldr	r3, [pc, #20]	; (80077fc <LL_RCC_ForceBackupDomainReset+0x1c>)
 80077e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077ee:	6713      	str	r3, [r2, #112]	; 0x70
}
 80077f0:	bf00      	nop
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	40023800 	.word	0x40023800

08007800 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007804:	4a05      	ldr	r2, [pc, #20]	; (800781c <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8007806:	4b05      	ldr	r3, [pc, #20]	; (800781c <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8007808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800780e:	6713      	str	r3, [r2, #112]	; 0x70
}
 8007810:	bf00      	nop
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	40023800 	.word	0x40023800

08007820 <LL_RCC_PLL_Enable>:
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007824:	4a05      	ldr	r2, [pc, #20]	; (800783c <LL_RCC_PLL_Enable+0x1c>)
 8007826:	4b05      	ldr	r3, [pc, #20]	; (800783c <LL_RCC_PLL_Enable+0x1c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800782e:	6013      	str	r3, [r2, #0]
}
 8007830:	bf00      	nop
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	40023800 	.word	0x40023800

08007840 <LL_RCC_PLL_IsReady>:
{
 8007840:	b480      	push	{r7}
 8007842:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8007844:	4b07      	ldr	r3, [pc, #28]	; (8007864 <LL_RCC_PLL_IsReady+0x24>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800784c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007850:	bf0c      	ite	eq
 8007852:	2301      	moveq	r3, #1
 8007854:	2300      	movne	r3, #0
 8007856:	b2db      	uxtb	r3, r3
}
 8007858:	4618      	mov	r0, r3
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	40023800 	.word	0x40023800

08007868 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
 8007874:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8007876:	480d      	ldr	r0, [pc, #52]	; (80078ac <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8007878:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800787e:	4013      	ands	r3, r2
 8007880:	68f9      	ldr	r1, [r7, #12]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	4311      	orrs	r1, r2
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	0192      	lsls	r2, r2, #6
 800788a:	430a      	orrs	r2, r1
 800788c:	4313      	orrs	r3, r2
 800788e:	6043      	str	r3, [r0, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8007890:	4906      	ldr	r1, [pc, #24]	; (80078ac <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8007892:	4b06      	ldr	r3, [pc, #24]	; (80078ac <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	4313      	orrs	r3, r2
 800789e:	604b      	str	r3, [r1, #4]
}
 80078a0:	bf00      	nop
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	40023800 	.word	0x40023800
 80078b0:	ffbf8000 	.word	0xffbf8000

080078b4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80078bc:	4908      	ldr	r1, [pc, #32]	; (80078e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80078be:	4b08      	ldr	r3, [pc, #32]	; (80078e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80078c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80078c8:	4b05      	ldr	r3, [pc, #20]	; (80078e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80078ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4013      	ands	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80078d2:	68fb      	ldr	r3, [r7, #12]
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	40023800 	.word	0x40023800

080078e4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80078ec:	4908      	ldr	r1, [pc, #32]	; (8007910 <LL_APB1_GRP1_EnableClock+0x2c>)
 80078ee:	4b08      	ldr	r3, [pc, #32]	; (8007910 <LL_APB1_GRP1_EnableClock+0x2c>)
 80078f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80078f8:	4b05      	ldr	r3, [pc, #20]	; (8007910 <LL_APB1_GRP1_EnableClock+0x2c>)
 80078fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4013      	ands	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007902:	68fb      	ldr	r3, [r7, #12]
}
 8007904:	bf00      	nop
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	40023800 	.word	0x40023800

08007914 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800791c:	4906      	ldr	r1, [pc, #24]	; (8007938 <LL_FLASH_SetLatency+0x24>)
 800791e:	4b06      	ldr	r3, [pc, #24]	; (8007938 <LL_FLASH_SetLatency+0x24>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f023 020f 	bic.w	r2, r3, #15
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4313      	orrs	r3, r2
 800792a:	600b      	str	r3, [r1, #0]
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	40023c00 	.word	0x40023c00

0800793c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8007940:	4b04      	ldr	r3, [pc, #16]	; (8007954 <LL_FLASH_GetLatency+0x18>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 030f 	and.w	r3, r3, #15
}
 8007948:	4618      	mov	r0, r3
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	40023c00 	.word	0x40023c00

08007958 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8007960:	4906      	ldr	r1, [pc, #24]	; (800797c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8007962:	4b06      	ldr	r3, [pc, #24]	; (800797c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4313      	orrs	r3, r2
 800796e:	600b      	str	r3, [r1, #0]
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	40007000 	.word	0x40007000

08007980 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8007984:	4a05      	ldr	r2, [pc, #20]	; (800799c <LL_PWR_EnableBkUpAccess+0x1c>)
 8007986:	4b05      	ldr	r3, [pc, #20]	; (800799c <LL_PWR_EnableBkUpAccess+0x1c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800798e:	6013      	str	r3, [r2, #0]
}
 8007990:	bf00      	nop
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	40007000 	.word	0x40007000

080079a0 <main>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);

int main(void)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	af00      	add	r7, sp, #0
	HAL_Init();
 80079a4:	f7fa faa2 	bl	8001eec <HAL_Init>
	SystemClock_Config();
 80079a8:	f000 f824 	bl	80079f4 <SystemClock_Config>

	RTC_Init();
 80079ac:	f000 f954 	bl	8007c58 <RTC_Init>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80079b0:	2004      	movs	r0, #4
 80079b2:	f7ff ff7f 	bl	80078b4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80079b6:	2080      	movs	r0, #128	; 0x80
 80079b8:	f7ff ff7c 	bl	80078b4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80079bc:	2001      	movs	r0, #1
 80079be:	f7ff ff79 	bl	80078b4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80079c2:	2002      	movs	r0, #2
 80079c4:	f7ff ff76 	bl	80078b4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80079c8:	2008      	movs	r0, #8
 80079ca:	f7ff ff73 	bl	80078b4 <LL_AHB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80079ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80079d2:	f7ff ff87 	bl	80078e4 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80079d6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80079da:	f7ff ff83 	bl	80078e4 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80079de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80079e2:	f7ff ff7f 	bl	80078e4 <LL_APB1_GRP1_EnableClock>
//  MX_USART1_UART_Init();
//  MX_USART2_UART_Init();
//  MX_USART3_UART_Init();
//  MX_FATFS_Init();

	osKernelInitialize();
 80079e6:	f7fb fec5 	bl	8003774 <osKernelInitialize>
	MX_FREERTOS_Init();
 80079ea:	f7ff fdf9 	bl	80075e0 <MX_FREERTOS_Init>
	osKernelStart();
 80079ee:	f7fb fef5 	bl	80037dc <osKernelStart>

	while (1) {}
 80079f2:	e7fe      	b.n	80079f2 <main+0x52>

080079f4 <SystemClock_Config>:
}


void SystemClock_Config(void)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80079f8:	2005      	movs	r0, #5
 80079fa:	f7ff ff8b 	bl	8007914 <LL_FLASH_SetLatency>

	if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
 80079fe:	f7ff ff9d 	bl	800793c <LL_FLASH_GetLatency>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b05      	cmp	r3, #5
 8007a06:	d001      	beq.n	8007a0c <SystemClock_Config+0x18>
	{
	Error_Handler();
 8007a08:	f000 f866 	bl	8007ad8 <Error_Handler>
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8007a0c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007a10:	f7ff ffa2 	bl	8007958 <LL_PWR_SetRegulVoltageScaling>
	LL_RCC_HSI_SetCalibTrimming(16);
 8007a14:	2010      	movs	r0, #16
 8007a16:	f7ff fe29 	bl	800766c <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_HSI_Enable();
 8007a1a:	f7ff fe05 	bl	8007628 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while(LL_RCC_HSI_IsReady() != 1) {}
 8007a1e:	bf00      	nop
 8007a20:	f7ff fe12 	bl	8007648 <LL_RCC_HSI_IsReady>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d1fa      	bne.n	8007a20 <SystemClock_Config+0x2c>
	LL_RCC_LSI_Enable();
 8007a2a:	f7ff fe35 	bl	8007698 <LL_RCC_LSI_Enable>

	/* Wait till LSI is ready */
	while(LL_RCC_LSI_IsReady() != 1) {}
 8007a2e:	bf00      	nop
 8007a30:	f7ff fe42 	bl	80076b8 <LL_RCC_LSI_IsReady>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d1fa      	bne.n	8007a30 <SystemClock_Config+0x3c>
	LL_PWR_EnableBkUpAccess();
 8007a3a:	f7ff ffa1 	bl	8007980 <LL_PWR_EnableBkUpAccess>
	LL_RCC_ForceBackupDomainReset();
 8007a3e:	f7ff fecf 	bl	80077e0 <LL_RCC_ForceBackupDomainReset>
	LL_RCC_ReleaseBackupDomainReset();
 8007a42:	f7ff fedd 	bl	8007800 <LL_RCC_ReleaseBackupDomainReset>
	LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 8007a46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007a4a:	f7ff fea5 	bl	8007798 <LL_RCC_SetRTCClockSource>
	LL_RCC_EnableRTC();
 8007a4e:	f7ff feb7 	bl	80077c0 <LL_RCC_EnableRTC>
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_2);
 8007a52:	2300      	movs	r3, #0
 8007a54:	22a8      	movs	r2, #168	; 0xa8
 8007a56:	2108      	movs	r1, #8
 8007a58:	2000      	movs	r0, #0
 8007a5a:	f7ff ff05 	bl	8007868 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8007a5e:	f7ff fedf 	bl	8007820 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1) {}
 8007a62:	bf00      	nop
 8007a64:	f7ff feec 	bl	8007840 <LL_RCC_PLL_IsReady>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d1fa      	bne.n	8007a64 <SystemClock_Config+0x70>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8007a6e:	2000      	movs	r0, #0
 8007a70:	f7ff fe56 	bl	8007720 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8007a74:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8007a78:	f7ff fe66 	bl	8007748 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8007a7c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007a80:	f7ff fe76 	bl	8007770 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8007a84:	2002      	movs	r0, #2
 8007a86:	f7ff fe29 	bl	80076dc <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {}
 8007a8a:	bf00      	nop
 8007a8c:	f7ff fe3a 	bl	8007704 <LL_RCC_GetSysClkSource>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b08      	cmp	r3, #8
 8007a94:	d1fa      	bne.n	8007a8c <SystemClock_Config+0x98>
	LL_SetSystemCoreClock(168000000);
 8007a96:	4806      	ldr	r0, [pc, #24]	; (8007ab0 <SystemClock_Config+0xbc>)
 8007a98:	f7fb fe54 	bl	8003744 <LL_SetSystemCoreClock>

	/* Update the time base */
	if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	f000 fa47 	bl	8007f30 <HAL_InitTick>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8007aa8:	f000 f816 	bl	8007ad8 <Error_Handler>
	};
}
 8007aac:	bf00      	nop
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	0a037a00 	.word	0x0a037a00

08007ab4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a04      	ldr	r2, [pc, #16]	; (8007ad4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d101      	bne.n	8007aca <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8007ac6:	f7fa fa33 	bl	8001f30 <HAL_IncTick>
	}
}
 8007aca:	bf00      	nop
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	40010000 	.word	0x40010000

08007ad8 <Error_Handler>:

void Error_Handler(void)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	af00      	add	r7, sp, #0
}
 8007adc:	bf00      	nop
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
	...

08007ae8 <LL_RCC_EnableRTC>:
{
 8007ae8:	b480      	push	{r7}
 8007aea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8007aec:	4a05      	ldr	r2, [pc, #20]	; (8007b04 <LL_RCC_EnableRTC+0x1c>)
 8007aee:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <LL_RCC_EnableRTC+0x1c>)
 8007af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af6:	6713      	str	r3, [r2, #112]	; 0x70
}
 8007af8:	bf00      	nop
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	40023800 	.word	0x40023800

08007b08 <LL_RTC_DisableInitMode>:
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b16:	60da      	str	r2, [r3, #12]
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <LL_RTC_SetAsynchPrescaler>:
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	041b      	lsls	r3, r3, #16
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	611a      	str	r2, [r3, #16]
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <LL_RTC_SetSynchPrescaler>:
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007b5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	431a      	orrs	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	611a      	str	r2, [r3, #16]
}
 8007b6a:	bf00      	nop
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <LL_RTC_EnableWriteProtection>:
{
 8007b76:	b480      	push	{r7}
 8007b78:	b083      	sub	sp, #12
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	22ff      	movs	r2, #255	; 0xff
 8007b82:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <LL_RTC_DisableWriteProtection>:
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	22ca      	movs	r2, #202	; 0xca
 8007b9c:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2253      	movs	r2, #83	; 0x53
 8007ba2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <LL_RTC_TIME_GetHour>:
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU))) >> RTC_TR_HU_Pos);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	0c1b      	lsrs	r3, r3, #16
 8007bbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <LL_RTC_TIME_GetMinute>:
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU))>> RTC_TR_MNU_Pos);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	0a1b      	lsrs	r3, r3, #8
 8007bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <LL_RTC_DATE_GetWeekDay>:
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->DR, RTC_DR_WDU) >> RTC_DR_WDU_Pos);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	0b5b      	lsrs	r3, r3, #13
 8007bfa:	f003 0307 	and.w	r3, r3, #7
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <LL_RTC_BAK_SetRegister>:
{
 8007c0a:	b490      	push	{r4, r7}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	60b9      	str	r1, [r7, #8]
 8007c14:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t)(&(RTCx->BKP0R));
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3350      	adds	r3, #80	; 0x50
 8007c1a:	461c      	mov	r4, r3
  tmp += (BackupRegister * 4U);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	441c      	add	r4, r3
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007c22:	4622      	mov	r2, r4
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6013      	str	r3, [r2, #0]
}
 8007c28:	bf00      	nop
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bc90      	pop	{r4, r7}
 8007c30:	4770      	bx	lr

08007c32 <LL_RTC_BAK_GetRegister>:
{
 8007c32:	b490      	push	{r4, r7}
 8007c34:	b082      	sub	sp, #8
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t)(&(RTCx->BKP0R));
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3350      	adds	r3, #80	; 0x50
 8007c40:	461c      	mov	r4, r3
  tmp += (BackupRegister * 4U);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	441c      	add	r4, r3
  return (*(__IO uint32_t *)tmp);
 8007c48:	4623      	mov	r3, r4
 8007c4a:	681b      	ldr	r3, [r3, #0]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bc90      	pop	{r4, r7}
 8007c54:	4770      	bx	lr
	...

08007c58 <RTC_Init>:
#include "rtc.h"

void RTC_Init(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
	LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8007c5e:	f107 030c 	add.w	r3, r7, #12
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	605a      	str	r2, [r3, #4]
 8007c68:	609a      	str	r2, [r3, #8]
	LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8007c6a:	1d3b      	adds	r3, r7, #4
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	605a      	str	r2, [r3, #4]
	LL_RTC_DateTypeDef RTC_DateStruct = {0};
 8007c72:	2300      	movs	r3, #0
 8007c74:	603b      	str	r3, [r7, #0]

	LL_RCC_EnableRTC();
 8007c76:	f7ff ff37 	bl	8007ae8 <LL_RCC_EnableRTC>

	RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60fb      	str	r3, [r7, #12]
	RTC_InitStruct.AsynchPrescaler = 127;
 8007c7e:	237f      	movs	r3, #127	; 0x7f
 8007c80:	613b      	str	r3, [r7, #16]
	RTC_InitStruct.SynchPrescaler = 255;
 8007c82:	23ff      	movs	r3, #255	; 0xff
 8007c84:	617b      	str	r3, [r7, #20]
	LL_RTC_Init(RTC, &RTC_InitStruct);
 8007c86:	f107 030c 	add.w	r3, r7, #12
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	481a      	ldr	r0, [pc, #104]	; (8007cf8 <RTC_Init+0xa0>)
 8007c8e:	f7fb f8af 	bl	8002df0 <LL_RTC_Init>
	LL_RTC_SetAsynchPrescaler(RTC, 127);
 8007c92:	217f      	movs	r1, #127	; 0x7f
 8007c94:	4818      	ldr	r0, [pc, #96]	; (8007cf8 <RTC_Init+0xa0>)
 8007c96:	f7ff ff45 	bl	8007b24 <LL_RTC_SetAsynchPrescaler>
	LL_RTC_SetSynchPrescaler(RTC, 255);
 8007c9a:	21ff      	movs	r1, #255	; 0xff
 8007c9c:	4816      	ldr	r0, [pc, #88]	; (8007cf8 <RTC_Init+0xa0>)
 8007c9e:	f7ff ff55 	bl	8007b4c <LL_RTC_SetSynchPrescaler>

	if(LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0) != 0x32F2)
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	4814      	ldr	r0, [pc, #80]	; (8007cf8 <RTC_Init+0xa0>)
 8007ca6:	f7ff ffc4 	bl	8007c32 <LL_RTC_BAK_GetRegister>
 8007caa:	4602      	mov	r2, r0
 8007cac:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d01d      	beq.n	8007cf0 <RTC_Init+0x98>
	{
		RTC_TimeStruct.Hours = 0;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	723b      	strb	r3, [r7, #8]
		RTC_TimeStruct.Minutes = 0;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	727b      	strb	r3, [r7, #9]
		RTC_TimeStruct.Seconds = 0;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	72bb      	strb	r3, [r7, #10]
		LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_TimeStruct);
 8007cc0:	1d3b      	adds	r3, r7, #4
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	480c      	ldr	r0, [pc, #48]	; (8007cf8 <RTC_Init+0xa0>)
 8007cc8:	f7fb f8c2 	bl	8002e50 <LL_RTC_TIME_Init>
		RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	703b      	strb	r3, [r7, #0]
		RTC_DateStruct.Month = LL_RTC_MONTH_JANUARY;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	707b      	strb	r3, [r7, #1]
		RTC_DateStruct.Year = 0;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	70fb      	strb	r3, [r7, #3]
		LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_DateStruct);
 8007cd8:	463b      	mov	r3, r7
 8007cda:	461a      	mov	r2, r3
 8007cdc:	2101      	movs	r1, #1
 8007cde:	4806      	ldr	r0, [pc, #24]	; (8007cf8 <RTC_Init+0xa0>)
 8007ce0:	f7fb f95e 	bl	8002fa0 <LL_RTC_DATE_Init>
		LL_RTC_BAK_SetRegister(RTC,LL_RTC_BKP_DR0,0x32F2);
 8007ce4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8007ce8:	2100      	movs	r1, #0
 8007cea:	4803      	ldr	r0, [pc, #12]	; (8007cf8 <RTC_Init+0xa0>)
 8007cec:	f7ff ff8d 	bl	8007c0a <LL_RTC_BAK_SetRegister>
	}

}
 8007cf0:	bf00      	nop
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	40002800 	.word	0x40002800

08007cfc <RTC_GetTime>:

void RTC_GetTime(struct tm* time)
{
 8007cfc:	b590      	push	{r4, r7, lr}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	time->tm_hour = __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8007d04:	4839      	ldr	r0, [pc, #228]	; (8007dec <RTC_GetTime+0xf0>)
 8007d06:	f7ff ff53 	bl	8007bb0 <LL_RTC_TIME_GetHour>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	111b      	asrs	r3, r3, #4
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	f003 030f 	and.w	r3, r3, #15
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	0092      	lsls	r2, r2, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	005b      	lsls	r3, r3, #1
 8007d20:	b2dc      	uxtb	r4, r3
 8007d22:	4832      	ldr	r0, [pc, #200]	; (8007dec <RTC_GetTime+0xf0>)
 8007d24:	f7ff ff44 	bl	8007bb0 <LL_RTC_TIME_GetHour>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	f003 030f 	and.w	r3, r3, #15
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	4423      	add	r3, r4
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	461a      	mov	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	609a      	str	r2, [r3, #8]
	time->tm_min = 	__LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8007d3c:	482b      	ldr	r0, [pc, #172]	; (8007dec <RTC_GetTime+0xf0>)
 8007d3e:	f7ff ff46 	bl	8007bce <LL_RTC_TIME_GetMinute>
 8007d42:	4603      	mov	r3, r0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	111b      	asrs	r3, r3, #4
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	f003 030f 	and.w	r3, r3, #15
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	461a      	mov	r2, r3
 8007d52:	0092      	lsls	r2, r2, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	b2dc      	uxtb	r4, r3
 8007d5a:	4824      	ldr	r0, [pc, #144]	; (8007dec <RTC_GetTime+0xf0>)
 8007d5c:	f7ff ff37 	bl	8007bce <LL_RTC_TIME_GetMinute>
 8007d60:	4603      	mov	r3, r0
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f003 030f 	and.w	r3, r3, #15
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	4423      	add	r3, r4
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	461a      	mov	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	605a      	str	r2, [r3, #4]

	// RTC HAS DIF WEEK DAY MASKS
	//tm  0 - sunday 6 - saturday
	//rtc 1 - monday 7 - sunday
	switch(LL_RTC_DATE_GetWeekDay(RTC))
 8007d74:	481d      	ldr	r0, [pc, #116]	; (8007dec <RTC_GetTime+0xf0>)
 8007d76:	f7ff ff39 	bl	8007bec <LL_RTC_DATE_GetWeekDay>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	2b06      	cmp	r3, #6
 8007d80:	d82c      	bhi.n	8007ddc <RTC_GetTime+0xe0>
 8007d82:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <RTC_GetTime+0x8c>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007da5 	.word	0x08007da5
 8007d8c:	08007dad 	.word	0x08007dad
 8007d90:	08007db5 	.word	0x08007db5
 8007d94:	08007dbd 	.word	0x08007dbd
 8007d98:	08007dc5 	.word	0x08007dc5
 8007d9c:	08007dcd 	.word	0x08007dcd
 8007da0:	08007dd5 	.word	0x08007dd5
	{
	case LL_RTC_WEEKDAY_MONDAY: 	time->tm_wday = 1; break;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	619a      	str	r2, [r3, #24]
 8007daa:	e01b      	b.n	8007de4 <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_TUESDAY: 	time->tm_wday = 2; break;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	619a      	str	r2, [r3, #24]
 8007db2:	e017      	b.n	8007de4 <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_WEDNESDAY: 	time->tm_wday = 3; break;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2203      	movs	r2, #3
 8007db8:	619a      	str	r2, [r3, #24]
 8007dba:	e013      	b.n	8007de4 <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_THURSDAY: 	time->tm_wday = 4; break;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2204      	movs	r2, #4
 8007dc0:	619a      	str	r2, [r3, #24]
 8007dc2:	e00f      	b.n	8007de4 <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_FRIDAY: 	time->tm_wday = 5; break;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2205      	movs	r2, #5
 8007dc8:	619a      	str	r2, [r3, #24]
 8007dca:	e00b      	b.n	8007de4 <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_SATURDAY: 	time->tm_wday = 6; break;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2206      	movs	r2, #6
 8007dd0:	619a      	str	r2, [r3, #24]
 8007dd2:	e007      	b.n	8007de4 <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_SUNDAY: 	time->tm_wday = 0; break;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	619a      	str	r2, [r3, #24]
 8007dda:	e003      	b.n	8007de4 <RTC_GetTime+0xe8>
	default: time->tm_wday = 0; break;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	619a      	str	r2, [r3, #24]
 8007de2:	bf00      	nop
	}
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd90      	pop	{r4, r7, pc}
 8007dec:	40002800 	.word	0x40002800

08007df0 <RTC_SetTime>:

void RTC_SetTime(struct tm* time)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
	LL_RTC_DisableWriteProtection(RTC);
 8007df8:	4836      	ldr	r0, [pc, #216]	; (8007ed4 <RTC_SetTime+0xe4>)
 8007dfa:	f7ff fec9 	bl	8007b90 <LL_RTC_DisableWriteProtection>
	LL_RTC_EnterInitMode(RTC);
 8007dfe:	4835      	ldr	r0, [pc, #212]	; (8007ed4 <RTC_SetTime+0xe4>)
 8007e00:	f7fb f974 	bl	80030ec <LL_RTC_EnterInitMode>

	LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8007e04:	f107 0310 	add.w	r3, r7, #16
 8007e08:	2200      	movs	r2, #0
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	605a      	str	r2, [r3, #4]
	LL_RTC_DateTypeDef RTC_DateStruct = {0};
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60fb      	str	r3, [r7, #12]

	RTC_TimeStruct.Hours = time->tm_hour;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	753b      	strb	r3, [r7, #20]
	RTC_TimeStruct.Minutes = time->tm_min;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	757b      	strb	r3, [r7, #21]
	RTC_TimeStruct.Seconds = time->tm_sec;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	75bb      	strb	r3, [r7, #22]
	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8007e2a:	f107 0310 	add.w	r3, r7, #16
 8007e2e:	461a      	mov	r2, r3
 8007e30:	2100      	movs	r1, #0
 8007e32:	4828      	ldr	r0, [pc, #160]	; (8007ed4 <RTC_SetTime+0xe4>)
 8007e34:	f7fb f80c 	bl	8002e50 <LL_RTC_TIME_Init>

	switch(time->tm_wday)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	2b06      	cmp	r3, #6
 8007e3e:	d826      	bhi.n	8007e8e <RTC_SetTime+0x9e>
 8007e40:	a201      	add	r2, pc, #4	; (adr r2, 8007e48 <RTC_SetTime+0x58>)
 8007e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e46:	bf00      	nop
 8007e48:	08007e65 	.word	0x08007e65
 8007e4c:	08007e6b 	.word	0x08007e6b
 8007e50:	08007e71 	.word	0x08007e71
 8007e54:	08007e77 	.word	0x08007e77
 8007e58:	08007e7d 	.word	0x08007e7d
 8007e5c:	08007e83 	.word	0x08007e83
 8007e60:	08007e89 	.word	0x08007e89
	{
	case 0:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_SUNDAY;		break;
 8007e64:	2307      	movs	r3, #7
 8007e66:	733b      	strb	r3, [r7, #12]
 8007e68:	e014      	b.n	8007e94 <RTC_SetTime+0xa4>
	case 1:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY; 	break;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	733b      	strb	r3, [r7, #12]
 8007e6e:	e011      	b.n	8007e94 <RTC_SetTime+0xa4>
	case 2:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_TUESDAY; 	break;
 8007e70:	2302      	movs	r3, #2
 8007e72:	733b      	strb	r3, [r7, #12]
 8007e74:	e00e      	b.n	8007e94 <RTC_SetTime+0xa4>
	case 3: RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_WEDNESDAY; 	break;
 8007e76:	2303      	movs	r3, #3
 8007e78:	733b      	strb	r3, [r7, #12]
 8007e7a:	e00b      	b.n	8007e94 <RTC_SetTime+0xa4>
	case 4:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_THURSDAY; 	break;
 8007e7c:	2304      	movs	r3, #4
 8007e7e:	733b      	strb	r3, [r7, #12]
 8007e80:	e008      	b.n	8007e94 <RTC_SetTime+0xa4>
	case 5:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_FRIDAY; 	break;
 8007e82:	2305      	movs	r3, #5
 8007e84:	733b      	strb	r3, [r7, #12]
 8007e86:	e005      	b.n	8007e94 <RTC_SetTime+0xa4>
	case 6:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_SATURDAY;	break;
 8007e88:	2306      	movs	r3, #6
 8007e8a:	733b      	strb	r3, [r7, #12]
 8007e8c:	e002      	b.n	8007e94 <RTC_SetTime+0xa4>
	default: RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_SUNDAY; 	break;
 8007e8e:	2307      	movs	r3, #7
 8007e90:	733b      	strb	r3, [r7, #12]
 8007e92:	bf00      	nop
	}

	RTC_DateStruct.Day = time->tm_mday;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	73bb      	strb	r3, [r7, #14]
	RTC_DateStruct.Month = time->tm_mon + 1;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	737b      	strb	r3, [r7, #13]
	RTC_DateStruct.Year = time->tm_year;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	73fb      	strb	r3, [r7, #15]
	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8007eb0:	f107 030c 	add.w	r3, r7, #12
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	4806      	ldr	r0, [pc, #24]	; (8007ed4 <RTC_SetTime+0xe4>)
 8007eba:	f7fb f871 	bl	8002fa0 <LL_RTC_DATE_Init>

	LL_RTC_DisableInitMode(RTC);
 8007ebe:	4805      	ldr	r0, [pc, #20]	; (8007ed4 <RTC_SetTime+0xe4>)
 8007ec0:	f7ff fe22 	bl	8007b08 <LL_RTC_DisableInitMode>
	LL_RTC_EnableWriteProtection(RTC);
 8007ec4:	4803      	ldr	r0, [pc, #12]	; (8007ed4 <RTC_SetTime+0xe4>)
 8007ec6:	f7ff fe56 	bl	8007b76 <LL_RTC_EnableWriteProtection>
}
 8007eca:	bf00      	nop
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	40002800 	.word	0x40002800

08007ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ede:	2300      	movs	r3, #0
 8007ee0:	607b      	str	r3, [r7, #4]
 8007ee2:	4a12      	ldr	r2, [pc, #72]	; (8007f2c <HAL_MspInit+0x54>)
 8007ee4:	4b11      	ldr	r3, [pc, #68]	; (8007f2c <HAL_MspInit+0x54>)
 8007ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007eec:	6453      	str	r3, [r2, #68]	; 0x44
 8007eee:	4b0f      	ldr	r3, [pc, #60]	; (8007f2c <HAL_MspInit+0x54>)
 8007ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ef6:	607b      	str	r3, [r7, #4]
 8007ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007efa:	2300      	movs	r3, #0
 8007efc:	603b      	str	r3, [r7, #0]
 8007efe:	4a0b      	ldr	r2, [pc, #44]	; (8007f2c <HAL_MspInit+0x54>)
 8007f00:	4b0a      	ldr	r3, [pc, #40]	; (8007f2c <HAL_MspInit+0x54>)
 8007f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f08:	6413      	str	r3, [r2, #64]	; 0x40
 8007f0a:	4b08      	ldr	r3, [pc, #32]	; (8007f2c <HAL_MspInit+0x54>)
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f12:	603b      	str	r3, [r7, #0]
 8007f14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007f16:	2200      	movs	r2, #0
 8007f18:	210f      	movs	r1, #15
 8007f1a:	f06f 0001 	mvn.w	r0, #1
 8007f1e:	f7fa f8d1 	bl	80020c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	40023800 	.word	0x40023800

08007f30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08c      	sub	sp, #48	; 0x30
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8007f40:	2200      	movs	r2, #0
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	2019      	movs	r0, #25
 8007f46:	f7fa f8bd 	bl	80020c4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8007f4a:	2019      	movs	r0, #25
 8007f4c:	f7fa f8d6 	bl	80020fc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007f50:	2300      	movs	r3, #0
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	4a1f      	ldr	r2, [pc, #124]	; (8007fd4 <HAL_InitTick+0xa4>)
 8007f56:	4b1f      	ldr	r3, [pc, #124]	; (8007fd4 <HAL_InitTick+0xa4>)
 8007f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5a:	f043 0301 	orr.w	r3, r3, #1
 8007f5e:	6453      	str	r3, [r2, #68]	; 0x44
 8007f60:	4b1c      	ldr	r3, [pc, #112]	; (8007fd4 <HAL_InitTick+0xa4>)
 8007f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	60fb      	str	r3, [r7, #12]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007f6c:	f107 0210 	add.w	r2, r7, #16
 8007f70:	f107 0314 	add.w	r3, r7, #20
 8007f74:	4611      	mov	r1, r2
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fa f8ee 	bl	8002158 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8007f7c:	f7fa f8d8 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 8007f80:	4603      	mov	r3, r0
 8007f82:	005b      	lsls	r3, r3, #1
 8007f84:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f88:	4a13      	ldr	r2, [pc, #76]	; (8007fd8 <HAL_InitTick+0xa8>)
 8007f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8e:	0c9b      	lsrs	r3, r3, #18
 8007f90:	3b01      	subs	r3, #1
 8007f92:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007f94:	4b11      	ldr	r3, [pc, #68]	; (8007fdc <HAL_InitTick+0xac>)
 8007f96:	4a12      	ldr	r2, [pc, #72]	; (8007fe0 <HAL_InitTick+0xb0>)
 8007f98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8007f9a:	4b10      	ldr	r3, [pc, #64]	; (8007fdc <HAL_InitTick+0xac>)
 8007f9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007fa0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007fa2:	4a0e      	ldr	r2, [pc, #56]	; (8007fdc <HAL_InitTick+0xac>)
 8007fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007fa8:	4b0c      	ldr	r3, [pc, #48]	; (8007fdc <HAL_InitTick+0xac>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fae:	4b0b      	ldr	r3, [pc, #44]	; (8007fdc <HAL_InitTick+0xac>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8007fb4:	4809      	ldr	r0, [pc, #36]	; (8007fdc <HAL_InitTick+0xac>)
 8007fb6:	f7fa f901 	bl	80021bc <HAL_TIM_Base_Init>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d104      	bne.n	8007fca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8007fc0:	4806      	ldr	r0, [pc, #24]	; (8007fdc <HAL_InitTick+0xac>)
 8007fc2:	f7fa f930 	bl	8002226 <HAL_TIM_Base_Start_IT>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	e000      	b.n	8007fcc <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3730      	adds	r7, #48	; 0x30
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	40023800 	.word	0x40023800
 8007fd8:	431bde83 	.word	0x431bde83
 8007fdc:	200149b4 	.word	0x200149b4
 8007fe0:	40010000 	.word	0x40010000

08007fe4 <NMI_Handler>:
#include "task.h"

extern TIM_HandleTypeDef htim1;

void NMI_Handler(void)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	af00      	add	r7, sp, #0

}
 8007fe8:	bf00      	nop
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	af00      	add	r7, sp, #0
	while (1)
 8007ff6:	e7fe      	b.n	8007ff6 <HardFault_Handler+0x4>

08007ff8 <MemManage_Handler>:

	}
}

void MemManage_Handler(void)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
	while (1)
 8007ffc:	e7fe      	b.n	8007ffc <MemManage_Handler+0x4>

08007ffe <BusFault_Handler>:

	}
}

void BusFault_Handler(void)
{
 8007ffe:	b480      	push	{r7}
 8008000:	af00      	add	r7, sp, #0
	while (1)
 8008002:	e7fe      	b.n	8008002 <BusFault_Handler+0x4>

08008004 <UsageFault_Handler>:

	}
}

void UsageFault_Handler(void)
{
 8008004:	b480      	push	{r7}
 8008006:	af00      	add	r7, sp, #0
	while (1)
 8008008:	e7fe      	b.n	8008008 <UsageFault_Handler+0x4>

0800800a <DebugMon_Handler>:

	}
}

void DebugMon_Handler(void)
{
 800800a:	b480      	push	{r7}
 800800c:	af00      	add	r7, sp, #0

}
 800800e:	bf00      	nop
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim1);
 800801c:	4802      	ldr	r0, [pc, #8]	; (8008028 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800801e:	f7fa f926 	bl	800226e <HAL_TIM_IRQHandler>
}
 8008022:	bf00      	nop
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	200149b4 	.word	0x200149b4

0800802c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008034:	4b11      	ldr	r3, [pc, #68]	; (800807c <_sbrk+0x50>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d102      	bne.n	8008042 <_sbrk+0x16>
		heap_end = &end;
 800803c:	4b0f      	ldr	r3, [pc, #60]	; (800807c <_sbrk+0x50>)
 800803e:	4a10      	ldr	r2, [pc, #64]	; (8008080 <_sbrk+0x54>)
 8008040:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008042:	4b0e      	ldr	r3, [pc, #56]	; (800807c <_sbrk+0x50>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008048:	4b0c      	ldr	r3, [pc, #48]	; (800807c <_sbrk+0x50>)
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4413      	add	r3, r2
 8008050:	466a      	mov	r2, sp
 8008052:	4293      	cmp	r3, r2
 8008054:	d907      	bls.n	8008066 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8008056:	f000 f855 	bl	8008104 <__errno>
 800805a:	4602      	mov	r2, r0
 800805c:	230c      	movs	r3, #12
 800805e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008060:	f04f 33ff 	mov.w	r3, #4294967295
 8008064:	e006      	b.n	8008074 <_sbrk+0x48>
	}

	heap_end += incr;
 8008066:	4b05      	ldr	r3, [pc, #20]	; (800807c <_sbrk+0x50>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4413      	add	r3, r2
 800806e:	4a03      	ldr	r2, [pc, #12]	; (800807c <_sbrk+0x50>)
 8008070:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008072:	68fb      	ldr	r3, [r7, #12]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20008b74 	.word	0x20008b74
 8008080:	200149f8 	.word	0x200149f8

08008084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008084:	b480      	push	{r7}
 8008086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008088:	4a08      	ldr	r2, [pc, #32]	; (80080ac <SystemInit+0x28>)
 800808a:	4b08      	ldr	r3, [pc, #32]	; (80080ac <SystemInit+0x28>)
 800808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008098:	4b04      	ldr	r3, [pc, #16]	; (80080ac <SystemInit+0x28>)
 800809a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800809e:	609a      	str	r2, [r3, #8]
#endif
}
 80080a0:	bf00      	nop
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	e000ed00 	.word	0xe000ed00

080080b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80080b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80080e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80080b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80080b6:	e003      	b.n	80080c0 <LoopCopyDataInit>

080080b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80080b8:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80080ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80080bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80080be:	3104      	adds	r1, #4

080080c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80080c0:	480b      	ldr	r0, [pc, #44]	; (80080f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80080c2:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80080c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80080c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80080c8:	d3f6      	bcc.n	80080b8 <CopyDataInit>
  ldr  r2, =_sbss
 80080ca:	4a0b      	ldr	r2, [pc, #44]	; (80080f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80080cc:	e002      	b.n	80080d4 <LoopFillZerobss>

080080ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80080ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80080d0:	f842 3b04 	str.w	r3, [r2], #4

080080d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80080d4:	4b09      	ldr	r3, [pc, #36]	; (80080fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80080d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80080d8:	d3f9      	bcc.n	80080ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80080da:	f7ff ffd3 	bl	8008084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80080de:	f000 f817 	bl	8008110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80080e2:	f7ff fc5d 	bl	80079a0 <main>
  bx  lr    
 80080e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80080e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80080ec:	0800a1cc 	.word	0x0800a1cc
  ldr  r0, =_sdata
 80080f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80080f4:	20000228 	.word	0x20000228
  ldr  r2, =_sbss
 80080f8:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 80080fc:	200149f8 	.word	0x200149f8

08008100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008100:	e7fe      	b.n	8008100 <ADC_IRQHandler>
	...

08008104 <__errno>:
 8008104:	4b01      	ldr	r3, [pc, #4]	; (800810c <__errno+0x8>)
 8008106:	6818      	ldr	r0, [r3, #0]
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	20000010 	.word	0x20000010

08008110 <__libc_init_array>:
 8008110:	b570      	push	{r4, r5, r6, lr}
 8008112:	4e0d      	ldr	r6, [pc, #52]	; (8008148 <__libc_init_array+0x38>)
 8008114:	4c0d      	ldr	r4, [pc, #52]	; (800814c <__libc_init_array+0x3c>)
 8008116:	1ba4      	subs	r4, r4, r6
 8008118:	10a4      	asrs	r4, r4, #2
 800811a:	2500      	movs	r5, #0
 800811c:	42a5      	cmp	r5, r4
 800811e:	d109      	bne.n	8008134 <__libc_init_array+0x24>
 8008120:	4e0b      	ldr	r6, [pc, #44]	; (8008150 <__libc_init_array+0x40>)
 8008122:	4c0c      	ldr	r4, [pc, #48]	; (8008154 <__libc_init_array+0x44>)
 8008124:	f001 fdb2 	bl	8009c8c <_init>
 8008128:	1ba4      	subs	r4, r4, r6
 800812a:	10a4      	asrs	r4, r4, #2
 800812c:	2500      	movs	r5, #0
 800812e:	42a5      	cmp	r5, r4
 8008130:	d105      	bne.n	800813e <__libc_init_array+0x2e>
 8008132:	bd70      	pop	{r4, r5, r6, pc}
 8008134:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008138:	4798      	blx	r3
 800813a:	3501      	adds	r5, #1
 800813c:	e7ee      	b.n	800811c <__libc_init_array+0xc>
 800813e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008142:	4798      	blx	r3
 8008144:	3501      	adds	r5, #1
 8008146:	e7f2      	b.n	800812e <__libc_init_array+0x1e>
 8008148:	0800a1c4 	.word	0x0800a1c4
 800814c:	0800a1c4 	.word	0x0800a1c4
 8008150:	0800a1c4 	.word	0x0800a1c4
 8008154:	0800a1c8 	.word	0x0800a1c8

08008158 <localtime_r>:
 8008158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800815c:	460c      	mov	r4, r1
 800815e:	4680      	mov	r8, r0
 8008160:	f000 fc8a 	bl	8008a78 <__gettzinfo>
 8008164:	4621      	mov	r1, r4
 8008166:	4607      	mov	r7, r0
 8008168:	4640      	mov	r0, r8
 800816a:	f000 fc89 	bl	8008a80 <gmtime_r>
 800816e:	6946      	ldr	r6, [r0, #20]
 8008170:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8008174:	07b3      	lsls	r3, r6, #30
 8008176:	4604      	mov	r4, r0
 8008178:	d105      	bne.n	8008186 <localtime_r+0x2e>
 800817a:	2264      	movs	r2, #100	; 0x64
 800817c:	fb96 f3f2 	sdiv	r3, r6, r2
 8008180:	fb02 6313 	mls	r3, r2, r3, r6
 8008184:	b9fb      	cbnz	r3, 80081c6 <localtime_r+0x6e>
 8008186:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800818a:	fb96 f5f3 	sdiv	r5, r6, r3
 800818e:	fb03 6515 	mls	r5, r3, r5, r6
 8008192:	fab5 f585 	clz	r5, r5
 8008196:	096d      	lsrs	r5, r5, #5
 8008198:	4b5f      	ldr	r3, [pc, #380]	; (8008318 <localtime_r+0x1c0>)
 800819a:	2230      	movs	r2, #48	; 0x30
 800819c:	fb02 3505 	mla	r5, r2, r5, r3
 80081a0:	f000 fa98 	bl	80086d4 <__tz_lock>
 80081a4:	f000 fa98 	bl	80086d8 <_tzset_unlocked>
 80081a8:	4b5c      	ldr	r3, [pc, #368]	; (800831c <localtime_r+0x1c4>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	b1e3      	cbz	r3, 80081e8 <localtime_r+0x90>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	429e      	cmp	r6, r3
 80081b2:	d10a      	bne.n	80081ca <localtime_r+0x72>
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	f8d8 3000 	ldr.w	r3, [r8]
 80081ba:	69fa      	ldr	r2, [r7, #28]
 80081bc:	b969      	cbnz	r1, 80081da <localtime_r+0x82>
 80081be:	4293      	cmp	r3, r2
 80081c0:	db0d      	blt.n	80081de <localtime_r+0x86>
 80081c2:	2301      	movs	r3, #1
 80081c4:	e010      	b.n	80081e8 <localtime_r+0x90>
 80081c6:	2501      	movs	r5, #1
 80081c8:	e7e6      	b.n	8008198 <localtime_r+0x40>
 80081ca:	4630      	mov	r0, r6
 80081cc:	f000 f9da 	bl	8008584 <__tzcalc_limits>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d1ef      	bne.n	80081b4 <localtime_r+0x5c>
 80081d4:	f04f 33ff 	mov.w	r3, #4294967295
 80081d8:	e006      	b.n	80081e8 <localtime_r+0x90>
 80081da:	4293      	cmp	r3, r2
 80081dc:	db55      	blt.n	800828a <localtime_r+0x132>
 80081de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081e0:	4293      	cmp	r3, r2
 80081e2:	bfac      	ite	ge
 80081e4:	2300      	movge	r3, #0
 80081e6:	2301      	movlt	r3, #1
 80081e8:	6223      	str	r3, [r4, #32]
 80081ea:	6a23      	ldr	r3, [r4, #32]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	bf0c      	ite	eq
 80081f0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80081f2:	6a39      	ldrne	r1, [r7, #32]
 80081f4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80081f8:	203c      	movs	r0, #60	; 0x3c
 80081fa:	fb91 f6f3 	sdiv	r6, r1, r3
 80081fe:	fb03 1316 	mls	r3, r3, r6, r1
 8008202:	6861      	ldr	r1, [r4, #4]
 8008204:	fb93 f2f0 	sdiv	r2, r3, r0
 8008208:	fb00 3012 	mls	r0, r0, r2, r3
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	1a89      	subs	r1, r1, r2
 8008210:	68a2      	ldr	r2, [r4, #8]
 8008212:	6061      	str	r1, [r4, #4]
 8008214:	1a1b      	subs	r3, r3, r0
 8008216:	1b92      	subs	r2, r2, r6
 8008218:	2b3b      	cmp	r3, #59	; 0x3b
 800821a:	6023      	str	r3, [r4, #0]
 800821c:	60a2      	str	r2, [r4, #8]
 800821e:	dd36      	ble.n	800828e <localtime_r+0x136>
 8008220:	3101      	adds	r1, #1
 8008222:	6061      	str	r1, [r4, #4]
 8008224:	3b3c      	subs	r3, #60	; 0x3c
 8008226:	6023      	str	r3, [r4, #0]
 8008228:	6863      	ldr	r3, [r4, #4]
 800822a:	2b3b      	cmp	r3, #59	; 0x3b
 800822c:	dd35      	ble.n	800829a <localtime_r+0x142>
 800822e:	3201      	adds	r2, #1
 8008230:	60a2      	str	r2, [r4, #8]
 8008232:	3b3c      	subs	r3, #60	; 0x3c
 8008234:	6063      	str	r3, [r4, #4]
 8008236:	68a3      	ldr	r3, [r4, #8]
 8008238:	2b17      	cmp	r3, #23
 800823a:	dd34      	ble.n	80082a6 <localtime_r+0x14e>
 800823c:	69e2      	ldr	r2, [r4, #28]
 800823e:	3201      	adds	r2, #1
 8008240:	61e2      	str	r2, [r4, #28]
 8008242:	69a2      	ldr	r2, [r4, #24]
 8008244:	3201      	adds	r2, #1
 8008246:	2a06      	cmp	r2, #6
 8008248:	bfc8      	it	gt
 800824a:	2200      	movgt	r2, #0
 800824c:	61a2      	str	r2, [r4, #24]
 800824e:	68e2      	ldr	r2, [r4, #12]
 8008250:	3b18      	subs	r3, #24
 8008252:	3201      	adds	r2, #1
 8008254:	60a3      	str	r3, [r4, #8]
 8008256:	6923      	ldr	r3, [r4, #16]
 8008258:	60e2      	str	r2, [r4, #12]
 800825a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800825e:	428a      	cmp	r2, r1
 8008260:	dd0e      	ble.n	8008280 <localtime_r+0x128>
 8008262:	3301      	adds	r3, #1
 8008264:	2b0c      	cmp	r3, #12
 8008266:	bf0c      	ite	eq
 8008268:	6963      	ldreq	r3, [r4, #20]
 800826a:	6123      	strne	r3, [r4, #16]
 800826c:	eba2 0201 	sub.w	r2, r2, r1
 8008270:	60e2      	str	r2, [r4, #12]
 8008272:	bf01      	itttt	eq
 8008274:	3301      	addeq	r3, #1
 8008276:	2200      	moveq	r2, #0
 8008278:	6122      	streq	r2, [r4, #16]
 800827a:	6163      	streq	r3, [r4, #20]
 800827c:	bf08      	it	eq
 800827e:	61e2      	streq	r2, [r4, #28]
 8008280:	f000 fa29 	bl	80086d6 <__tz_unlock>
 8008284:	4620      	mov	r0, r4
 8008286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800828a:	2300      	movs	r3, #0
 800828c:	e7ac      	b.n	80081e8 <localtime_r+0x90>
 800828e:	2b00      	cmp	r3, #0
 8008290:	daca      	bge.n	8008228 <localtime_r+0xd0>
 8008292:	3901      	subs	r1, #1
 8008294:	6061      	str	r1, [r4, #4]
 8008296:	333c      	adds	r3, #60	; 0x3c
 8008298:	e7c5      	b.n	8008226 <localtime_r+0xce>
 800829a:	2b00      	cmp	r3, #0
 800829c:	dacb      	bge.n	8008236 <localtime_r+0xde>
 800829e:	3a01      	subs	r2, #1
 80082a0:	60a2      	str	r2, [r4, #8]
 80082a2:	333c      	adds	r3, #60	; 0x3c
 80082a4:	e7c6      	b.n	8008234 <localtime_r+0xdc>
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	daea      	bge.n	8008280 <localtime_r+0x128>
 80082aa:	69e2      	ldr	r2, [r4, #28]
 80082ac:	3a01      	subs	r2, #1
 80082ae:	61e2      	str	r2, [r4, #28]
 80082b0:	69a2      	ldr	r2, [r4, #24]
 80082b2:	3a01      	subs	r2, #1
 80082b4:	bf48      	it	mi
 80082b6:	2206      	movmi	r2, #6
 80082b8:	61a2      	str	r2, [r4, #24]
 80082ba:	68e2      	ldr	r2, [r4, #12]
 80082bc:	3318      	adds	r3, #24
 80082be:	3a01      	subs	r2, #1
 80082c0:	60e2      	str	r2, [r4, #12]
 80082c2:	60a3      	str	r3, [r4, #8]
 80082c4:	2a00      	cmp	r2, #0
 80082c6:	d1db      	bne.n	8008280 <localtime_r+0x128>
 80082c8:	6923      	ldr	r3, [r4, #16]
 80082ca:	3b01      	subs	r3, #1
 80082cc:	d405      	bmi.n	80082da <localtime_r+0x182>
 80082ce:	6123      	str	r3, [r4, #16]
 80082d0:	6923      	ldr	r3, [r4, #16]
 80082d2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80082d6:	60e3      	str	r3, [r4, #12]
 80082d8:	e7d2      	b.n	8008280 <localtime_r+0x128>
 80082da:	230b      	movs	r3, #11
 80082dc:	6123      	str	r3, [r4, #16]
 80082de:	6963      	ldr	r3, [r4, #20]
 80082e0:	1e5a      	subs	r2, r3, #1
 80082e2:	f012 0f03 	tst.w	r2, #3
 80082e6:	6162      	str	r2, [r4, #20]
 80082e8:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80082ec:	d105      	bne.n	80082fa <localtime_r+0x1a2>
 80082ee:	2164      	movs	r1, #100	; 0x64
 80082f0:	fb92 f3f1 	sdiv	r3, r2, r1
 80082f4:	fb01 2313 	mls	r3, r1, r3, r2
 80082f8:	b963      	cbnz	r3, 8008314 <localtime_r+0x1bc>
 80082fa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80082fe:	fb92 f3f1 	sdiv	r3, r2, r1
 8008302:	fb01 2313 	mls	r3, r1, r3, r2
 8008306:	fab3 f383 	clz	r3, r3
 800830a:	095b      	lsrs	r3, r3, #5
 800830c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8008310:	61e3      	str	r3, [r4, #28]
 8008312:	e7dd      	b.n	80082d0 <localtime_r+0x178>
 8008314:	2301      	movs	r3, #1
 8008316:	e7f9      	b.n	800830c <localtime_r+0x1b4>
 8008318:	08009f64 	.word	0x08009f64
 800831c:	20008b94 	.word	0x20008b94

08008320 <memcmp>:
 8008320:	b510      	push	{r4, lr}
 8008322:	3901      	subs	r1, #1
 8008324:	4402      	add	r2, r0
 8008326:	4290      	cmp	r0, r2
 8008328:	d101      	bne.n	800832e <memcmp+0xe>
 800832a:	2000      	movs	r0, #0
 800832c:	bd10      	pop	{r4, pc}
 800832e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008332:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008336:	42a3      	cmp	r3, r4
 8008338:	d0f5      	beq.n	8008326 <memcmp+0x6>
 800833a:	1b18      	subs	r0, r3, r4
 800833c:	bd10      	pop	{r4, pc}

0800833e <memcpy>:
 800833e:	b510      	push	{r4, lr}
 8008340:	1e43      	subs	r3, r0, #1
 8008342:	440a      	add	r2, r1
 8008344:	4291      	cmp	r1, r2
 8008346:	d100      	bne.n	800834a <memcpy+0xc>
 8008348:	bd10      	pop	{r4, pc}
 800834a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800834e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008352:	e7f7      	b.n	8008344 <memcpy+0x6>

08008354 <memset>:
 8008354:	4402      	add	r2, r0
 8008356:	4603      	mov	r3, r0
 8008358:	4293      	cmp	r3, r2
 800835a:	d100      	bne.n	800835e <memset+0xa>
 800835c:	4770      	bx	lr
 800835e:	f803 1b01 	strb.w	r1, [r3], #1
 8008362:	e7f9      	b.n	8008358 <memset+0x4>

08008364 <siprintf>:
 8008364:	b40e      	push	{r1, r2, r3}
 8008366:	b500      	push	{lr}
 8008368:	b09c      	sub	sp, #112	; 0x70
 800836a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800836e:	ab1d      	add	r3, sp, #116	; 0x74
 8008370:	f8ad 1014 	strh.w	r1, [sp, #20]
 8008374:	9002      	str	r0, [sp, #8]
 8008376:	9006      	str	r0, [sp, #24]
 8008378:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800837c:	480a      	ldr	r0, [pc, #40]	; (80083a8 <siprintf+0x44>)
 800837e:	9104      	str	r1, [sp, #16]
 8008380:	9107      	str	r1, [sp, #28]
 8008382:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008386:	f853 2b04 	ldr.w	r2, [r3], #4
 800838a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800838e:	6800      	ldr	r0, [r0, #0]
 8008390:	9301      	str	r3, [sp, #4]
 8008392:	a902      	add	r1, sp, #8
 8008394:	f000 fd42 	bl	8008e1c <_svfiprintf_r>
 8008398:	9b02      	ldr	r3, [sp, #8]
 800839a:	2200      	movs	r2, #0
 800839c:	701a      	strb	r2, [r3, #0]
 800839e:	b01c      	add	sp, #112	; 0x70
 80083a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083a4:	b003      	add	sp, #12
 80083a6:	4770      	bx	lr
 80083a8:	20000010 	.word	0x20000010

080083ac <strchr>:
 80083ac:	b2c9      	uxtb	r1, r1
 80083ae:	4603      	mov	r3, r0
 80083b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083b4:	b11a      	cbz	r2, 80083be <strchr+0x12>
 80083b6:	4291      	cmp	r1, r2
 80083b8:	d1f9      	bne.n	80083ae <strchr+0x2>
 80083ba:	4618      	mov	r0, r3
 80083bc:	4770      	bx	lr
 80083be:	2900      	cmp	r1, #0
 80083c0:	bf0c      	ite	eq
 80083c2:	4618      	moveq	r0, r3
 80083c4:	2000      	movne	r0, #0
 80083c6:	4770      	bx	lr

080083c8 <strcpy>:
 80083c8:	4603      	mov	r3, r0
 80083ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083ce:	f803 2b01 	strb.w	r2, [r3], #1
 80083d2:	2a00      	cmp	r2, #0
 80083d4:	d1f9      	bne.n	80083ca <strcpy+0x2>
 80083d6:	4770      	bx	lr

080083d8 <strncmp>:
 80083d8:	b510      	push	{r4, lr}
 80083da:	b16a      	cbz	r2, 80083f8 <strncmp+0x20>
 80083dc:	3901      	subs	r1, #1
 80083de:	1884      	adds	r4, r0, r2
 80083e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80083e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d103      	bne.n	80083f4 <strncmp+0x1c>
 80083ec:	42a0      	cmp	r0, r4
 80083ee:	d001      	beq.n	80083f4 <strncmp+0x1c>
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1f5      	bne.n	80083e0 <strncmp+0x8>
 80083f4:	1a98      	subs	r0, r3, r2
 80083f6:	bd10      	pop	{r4, pc}
 80083f8:	4610      	mov	r0, r2
 80083fa:	bd10      	pop	{r4, pc}

080083fc <strstr>:
 80083fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083fe:	7803      	ldrb	r3, [r0, #0]
 8008400:	b133      	cbz	r3, 8008410 <strstr+0x14>
 8008402:	4603      	mov	r3, r0
 8008404:	4618      	mov	r0, r3
 8008406:	1c5e      	adds	r6, r3, #1
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	b933      	cbnz	r3, 800841a <strstr+0x1e>
 800840c:	4618      	mov	r0, r3
 800840e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008410:	780b      	ldrb	r3, [r1, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	bf18      	it	ne
 8008416:	2000      	movne	r0, #0
 8008418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800841a:	1e4d      	subs	r5, r1, #1
 800841c:	1e44      	subs	r4, r0, #1
 800841e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8008422:	2a00      	cmp	r2, #0
 8008424:	d0f3      	beq.n	800840e <strstr+0x12>
 8008426:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800842a:	4297      	cmp	r7, r2
 800842c:	4633      	mov	r3, r6
 800842e:	d0f6      	beq.n	800841e <strstr+0x22>
 8008430:	e7e8      	b.n	8008404 <strstr+0x8>

08008432 <_strtol_l.isra.0>:
 8008432:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008436:	4680      	mov	r8, r0
 8008438:	4689      	mov	r9, r1
 800843a:	4692      	mov	sl, r2
 800843c:	461f      	mov	r7, r3
 800843e:	468b      	mov	fp, r1
 8008440:	465d      	mov	r5, fp
 8008442:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008444:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008448:	f000 fbb4 	bl	8008bb4 <__locale_ctype_ptr_l>
 800844c:	4420      	add	r0, r4
 800844e:	7846      	ldrb	r6, [r0, #1]
 8008450:	f016 0608 	ands.w	r6, r6, #8
 8008454:	d10b      	bne.n	800846e <_strtol_l.isra.0+0x3c>
 8008456:	2c2d      	cmp	r4, #45	; 0x2d
 8008458:	d10b      	bne.n	8008472 <_strtol_l.isra.0+0x40>
 800845a:	782c      	ldrb	r4, [r5, #0]
 800845c:	2601      	movs	r6, #1
 800845e:	f10b 0502 	add.w	r5, fp, #2
 8008462:	b167      	cbz	r7, 800847e <_strtol_l.isra.0+0x4c>
 8008464:	2f10      	cmp	r7, #16
 8008466:	d114      	bne.n	8008492 <_strtol_l.isra.0+0x60>
 8008468:	2c30      	cmp	r4, #48	; 0x30
 800846a:	d00a      	beq.n	8008482 <_strtol_l.isra.0+0x50>
 800846c:	e011      	b.n	8008492 <_strtol_l.isra.0+0x60>
 800846e:	46ab      	mov	fp, r5
 8008470:	e7e6      	b.n	8008440 <_strtol_l.isra.0+0xe>
 8008472:	2c2b      	cmp	r4, #43	; 0x2b
 8008474:	bf04      	itt	eq
 8008476:	782c      	ldrbeq	r4, [r5, #0]
 8008478:	f10b 0502 	addeq.w	r5, fp, #2
 800847c:	e7f1      	b.n	8008462 <_strtol_l.isra.0+0x30>
 800847e:	2c30      	cmp	r4, #48	; 0x30
 8008480:	d127      	bne.n	80084d2 <_strtol_l.isra.0+0xa0>
 8008482:	782b      	ldrb	r3, [r5, #0]
 8008484:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008488:	2b58      	cmp	r3, #88	; 0x58
 800848a:	d14b      	bne.n	8008524 <_strtol_l.isra.0+0xf2>
 800848c:	786c      	ldrb	r4, [r5, #1]
 800848e:	2710      	movs	r7, #16
 8008490:	3502      	adds	r5, #2
 8008492:	2e00      	cmp	r6, #0
 8008494:	bf0c      	ite	eq
 8008496:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800849a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800849e:	2200      	movs	r2, #0
 80084a0:	fbb1 fef7 	udiv	lr, r1, r7
 80084a4:	4610      	mov	r0, r2
 80084a6:	fb07 1c1e 	mls	ip, r7, lr, r1
 80084aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80084ae:	2b09      	cmp	r3, #9
 80084b0:	d811      	bhi.n	80084d6 <_strtol_l.isra.0+0xa4>
 80084b2:	461c      	mov	r4, r3
 80084b4:	42a7      	cmp	r7, r4
 80084b6:	dd1d      	ble.n	80084f4 <_strtol_l.isra.0+0xc2>
 80084b8:	1c53      	adds	r3, r2, #1
 80084ba:	d007      	beq.n	80084cc <_strtol_l.isra.0+0x9a>
 80084bc:	4586      	cmp	lr, r0
 80084be:	d316      	bcc.n	80084ee <_strtol_l.isra.0+0xbc>
 80084c0:	d101      	bne.n	80084c6 <_strtol_l.isra.0+0x94>
 80084c2:	45a4      	cmp	ip, r4
 80084c4:	db13      	blt.n	80084ee <_strtol_l.isra.0+0xbc>
 80084c6:	fb00 4007 	mla	r0, r0, r7, r4
 80084ca:	2201      	movs	r2, #1
 80084cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084d0:	e7eb      	b.n	80084aa <_strtol_l.isra.0+0x78>
 80084d2:	270a      	movs	r7, #10
 80084d4:	e7dd      	b.n	8008492 <_strtol_l.isra.0+0x60>
 80084d6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80084da:	2b19      	cmp	r3, #25
 80084dc:	d801      	bhi.n	80084e2 <_strtol_l.isra.0+0xb0>
 80084de:	3c37      	subs	r4, #55	; 0x37
 80084e0:	e7e8      	b.n	80084b4 <_strtol_l.isra.0+0x82>
 80084e2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80084e6:	2b19      	cmp	r3, #25
 80084e8:	d804      	bhi.n	80084f4 <_strtol_l.isra.0+0xc2>
 80084ea:	3c57      	subs	r4, #87	; 0x57
 80084ec:	e7e2      	b.n	80084b4 <_strtol_l.isra.0+0x82>
 80084ee:	f04f 32ff 	mov.w	r2, #4294967295
 80084f2:	e7eb      	b.n	80084cc <_strtol_l.isra.0+0x9a>
 80084f4:	1c53      	adds	r3, r2, #1
 80084f6:	d108      	bne.n	800850a <_strtol_l.isra.0+0xd8>
 80084f8:	2322      	movs	r3, #34	; 0x22
 80084fa:	f8c8 3000 	str.w	r3, [r8]
 80084fe:	4608      	mov	r0, r1
 8008500:	f1ba 0f00 	cmp.w	sl, #0
 8008504:	d107      	bne.n	8008516 <_strtol_l.isra.0+0xe4>
 8008506:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850a:	b106      	cbz	r6, 800850e <_strtol_l.isra.0+0xdc>
 800850c:	4240      	negs	r0, r0
 800850e:	f1ba 0f00 	cmp.w	sl, #0
 8008512:	d00c      	beq.n	800852e <_strtol_l.isra.0+0xfc>
 8008514:	b122      	cbz	r2, 8008520 <_strtol_l.isra.0+0xee>
 8008516:	3d01      	subs	r5, #1
 8008518:	f8ca 5000 	str.w	r5, [sl]
 800851c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008520:	464d      	mov	r5, r9
 8008522:	e7f9      	b.n	8008518 <_strtol_l.isra.0+0xe6>
 8008524:	2430      	movs	r4, #48	; 0x30
 8008526:	2f00      	cmp	r7, #0
 8008528:	d1b3      	bne.n	8008492 <_strtol_l.isra.0+0x60>
 800852a:	2708      	movs	r7, #8
 800852c:	e7b1      	b.n	8008492 <_strtol_l.isra.0+0x60>
 800852e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008534 <_strtol_r>:
 8008534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008536:	4c06      	ldr	r4, [pc, #24]	; (8008550 <_strtol_r+0x1c>)
 8008538:	4d06      	ldr	r5, [pc, #24]	; (8008554 <_strtol_r+0x20>)
 800853a:	6824      	ldr	r4, [r4, #0]
 800853c:	6a24      	ldr	r4, [r4, #32]
 800853e:	2c00      	cmp	r4, #0
 8008540:	bf08      	it	eq
 8008542:	462c      	moveq	r4, r5
 8008544:	9400      	str	r4, [sp, #0]
 8008546:	f7ff ff74 	bl	8008432 <_strtol_l.isra.0>
 800854a:	b003      	add	sp, #12
 800854c:	bd30      	pop	{r4, r5, pc}
 800854e:	bf00      	nop
 8008550:	20000010 	.word	0x20000010
 8008554:	200000bc 	.word	0x200000bc

08008558 <strtol>:
 8008558:	4b08      	ldr	r3, [pc, #32]	; (800857c <strtol+0x24>)
 800855a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800855c:	681c      	ldr	r4, [r3, #0]
 800855e:	4d08      	ldr	r5, [pc, #32]	; (8008580 <strtol+0x28>)
 8008560:	6a23      	ldr	r3, [r4, #32]
 8008562:	2b00      	cmp	r3, #0
 8008564:	bf08      	it	eq
 8008566:	462b      	moveq	r3, r5
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	4613      	mov	r3, r2
 800856c:	460a      	mov	r2, r1
 800856e:	4601      	mov	r1, r0
 8008570:	4620      	mov	r0, r4
 8008572:	f7ff ff5e 	bl	8008432 <_strtol_l.isra.0>
 8008576:	b003      	add	sp, #12
 8008578:	bd30      	pop	{r4, r5, pc}
 800857a:	bf00      	nop
 800857c:	20000010 	.word	0x20000010
 8008580:	200000bc 	.word	0x200000bc

08008584 <__tzcalc_limits>:
 8008584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008588:	4604      	mov	r4, r0
 800858a:	f000 fa75 	bl	8008a78 <__gettzinfo>
 800858e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8008592:	429c      	cmp	r4, r3
 8008594:	f340 8098 	ble.w	80086c8 <__tzcalc_limits+0x144>
 8008598:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800859c:	18e3      	adds	r3, r4, r3
 800859e:	109b      	asrs	r3, r3, #2
 80085a0:	f240 126d 	movw	r2, #365	; 0x16d
 80085a4:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 80085a8:	fb02 3505 	mla	r5, r2, r5, r3
 80085ac:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80085b0:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 80085b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80085b8:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80085bc:	441d      	add	r5, r3
 80085be:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80085c2:	18a2      	adds	r2, r4, r2
 80085c4:	fb94 f7f3 	sdiv	r7, r4, r3
 80085c8:	fb92 f2f3 	sdiv	r2, r2, r3
 80085cc:	fb03 4717 	mls	r7, r3, r7, r4
 80085d0:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80085d4:	4415      	add	r5, r2
 80085d6:	fab7 fe87 	clz	lr, r7
 80085da:	2264      	movs	r2, #100	; 0x64
 80085dc:	9301      	str	r3, [sp, #4]
 80085de:	f004 0303 	and.w	r3, r4, #3
 80085e2:	fb94 f6f2 	sdiv	r6, r4, r2
 80085e6:	6044      	str	r4, [r0, #4]
 80085e8:	fb02 4616 	mls	r6, r2, r6, r4
 80085ec:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80085f0:	4601      	mov	r1, r0
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 80085f8:	7a0b      	ldrb	r3, [r1, #8]
 80085fa:	2b4a      	cmp	r3, #74	; 0x4a
 80085fc:	d123      	bne.n	8008646 <__tzcalc_limits+0xc2>
 80085fe:	694c      	ldr	r4, [r1, #20]
 8008600:	9a00      	ldr	r2, [sp, #0]
 8008602:	192b      	adds	r3, r5, r4
 8008604:	b902      	cbnz	r2, 8008608 <__tzcalc_limits+0x84>
 8008606:	b906      	cbnz	r6, 800860a <__tzcalc_limits+0x86>
 8008608:	b9df      	cbnz	r7, 8008642 <__tzcalc_limits+0xbe>
 800860a:	2c3b      	cmp	r4, #59	; 0x3b
 800860c:	bfd4      	ite	le
 800860e:	2400      	movle	r4, #0
 8008610:	2401      	movgt	r4, #1
 8008612:	441c      	add	r4, r3
 8008614:	3c01      	subs	r4, #1
 8008616:	4b2d      	ldr	r3, [pc, #180]	; (80086cc <__tzcalc_limits+0x148>)
 8008618:	698a      	ldr	r2, [r1, #24]
 800861a:	fb03 2404 	mla	r4, r3, r4, r2
 800861e:	6a0b      	ldr	r3, [r1, #32]
 8008620:	441c      	add	r4, r3
 8008622:	f841 4f1c 	str.w	r4, [r1, #28]!
 8008626:	9b01      	ldr	r3, [sp, #4]
 8008628:	428b      	cmp	r3, r1
 800862a:	d1e5      	bne.n	80085f8 <__tzcalc_limits+0x74>
 800862c:	69c3      	ldr	r3, [r0, #28]
 800862e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008630:	4293      	cmp	r3, r2
 8008632:	bfac      	ite	ge
 8008634:	2300      	movge	r3, #0
 8008636:	2301      	movlt	r3, #1
 8008638:	6003      	str	r3, [r0, #0]
 800863a:	2001      	movs	r0, #1
 800863c:	b003      	add	sp, #12
 800863e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008642:	2400      	movs	r4, #0
 8008644:	e7e5      	b.n	8008612 <__tzcalc_limits+0x8e>
 8008646:	2b44      	cmp	r3, #68	; 0x44
 8008648:	d102      	bne.n	8008650 <__tzcalc_limits+0xcc>
 800864a:	694b      	ldr	r3, [r1, #20]
 800864c:	18ec      	adds	r4, r5, r3
 800864e:	e7e2      	b.n	8008616 <__tzcalc_limits+0x92>
 8008650:	9b00      	ldr	r3, [sp, #0]
 8008652:	bb7b      	cbnz	r3, 80086b4 <__tzcalc_limits+0x130>
 8008654:	2e00      	cmp	r6, #0
 8008656:	bf0c      	ite	eq
 8008658:	46f0      	moveq	r8, lr
 800865a:	f04f 0801 	movne.w	r8, #1
 800865e:	4b1c      	ldr	r3, [pc, #112]	; (80086d0 <__tzcalc_limits+0x14c>)
 8008660:	68cc      	ldr	r4, [r1, #12]
 8008662:	2230      	movs	r2, #48	; 0x30
 8008664:	fb02 3808 	mla	r8, r2, r8, r3
 8008668:	f1a8 0a04 	sub.w	sl, r8, #4
 800866c:	462b      	mov	r3, r5
 800866e:	f04f 0901 	mov.w	r9, #1
 8008672:	45a1      	cmp	r9, r4
 8008674:	db20      	blt.n	80086b8 <__tzcalc_limits+0x134>
 8008676:	2c01      	cmp	r4, #1
 8008678:	bfb8      	it	lt
 800867a:	2401      	movlt	r4, #1
 800867c:	46a1      	mov	r9, r4
 800867e:	f103 0b04 	add.w	fp, r3, #4
 8008682:	2207      	movs	r2, #7
 8008684:	694c      	ldr	r4, [r1, #20]
 8008686:	fb9b faf2 	sdiv	sl, fp, r2
 800868a:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800868e:	ebab 0a0a 	sub.w	sl, fp, sl
 8008692:	ebb4 0a0a 	subs.w	sl, r4, sl
 8008696:	690c      	ldr	r4, [r1, #16]
 8008698:	44e1      	add	r9, ip
 800869a:	f104 34ff 	add.w	r4, r4, #4294967295
 800869e:	bf48      	it	mi
 80086a0:	4492      	addmi	sl, r2
 80086a2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80086a6:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 80086aa:	4454      	add	r4, sl
 80086ac:	4544      	cmp	r4, r8
 80086ae:	da09      	bge.n	80086c4 <__tzcalc_limits+0x140>
 80086b0:	441c      	add	r4, r3
 80086b2:	e7b0      	b.n	8008616 <__tzcalc_limits+0x92>
 80086b4:	46f0      	mov	r8, lr
 80086b6:	e7d2      	b.n	800865e <__tzcalc_limits+0xda>
 80086b8:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80086bc:	f109 0901 	add.w	r9, r9, #1
 80086c0:	445b      	add	r3, fp
 80086c2:	e7d6      	b.n	8008672 <__tzcalc_limits+0xee>
 80086c4:	3c07      	subs	r4, #7
 80086c6:	e7f1      	b.n	80086ac <__tzcalc_limits+0x128>
 80086c8:	2000      	movs	r0, #0
 80086ca:	e7b7      	b.n	800863c <__tzcalc_limits+0xb8>
 80086cc:	00015180 	.word	0x00015180
 80086d0:	08009f64 	.word	0x08009f64

080086d4 <__tz_lock>:
 80086d4:	4770      	bx	lr

080086d6 <__tz_unlock>:
 80086d6:	4770      	bx	lr

080086d8 <_tzset_unlocked>:
 80086d8:	4b01      	ldr	r3, [pc, #4]	; (80086e0 <_tzset_unlocked+0x8>)
 80086da:	6818      	ldr	r0, [r3, #0]
 80086dc:	f000 b802 	b.w	80086e4 <_tzset_unlocked_r>
 80086e0:	20000010 	.word	0x20000010

080086e4 <_tzset_unlocked_r>:
 80086e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e8:	b08d      	sub	sp, #52	; 0x34
 80086ea:	4607      	mov	r7, r0
 80086ec:	f000 f9c4 	bl	8008a78 <__gettzinfo>
 80086f0:	49b1      	ldr	r1, [pc, #708]	; (80089b8 <_tzset_unlocked_r+0x2d4>)
 80086f2:	4eb2      	ldr	r6, [pc, #712]	; (80089bc <_tzset_unlocked_r+0x2d8>)
 80086f4:	4605      	mov	r5, r0
 80086f6:	4638      	mov	r0, r7
 80086f8:	f000 f9b6 	bl	8008a68 <_getenv_r>
 80086fc:	4604      	mov	r4, r0
 80086fe:	b970      	cbnz	r0, 800871e <_tzset_unlocked_r+0x3a>
 8008700:	4baf      	ldr	r3, [pc, #700]	; (80089c0 <_tzset_unlocked_r+0x2dc>)
 8008702:	4ab0      	ldr	r2, [pc, #704]	; (80089c4 <_tzset_unlocked_r+0x2e0>)
 8008704:	6018      	str	r0, [r3, #0]
 8008706:	4bb0      	ldr	r3, [pc, #704]	; (80089c8 <_tzset_unlocked_r+0x2e4>)
 8008708:	6018      	str	r0, [r3, #0]
 800870a:	4bb0      	ldr	r3, [pc, #704]	; (80089cc <_tzset_unlocked_r+0x2e8>)
 800870c:	6830      	ldr	r0, [r6, #0]
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	605a      	str	r2, [r3, #4]
 8008712:	f000 fa61 	bl	8008bd8 <free>
 8008716:	6034      	str	r4, [r6, #0]
 8008718:	b00d      	add	sp, #52	; 0x34
 800871a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871e:	6831      	ldr	r1, [r6, #0]
 8008720:	2900      	cmp	r1, #0
 8008722:	d160      	bne.n	80087e6 <_tzset_unlocked_r+0x102>
 8008724:	6830      	ldr	r0, [r6, #0]
 8008726:	f000 fa57 	bl	8008bd8 <free>
 800872a:	4620      	mov	r0, r4
 800872c:	f7f7 fd50 	bl	80001d0 <strlen>
 8008730:	1c41      	adds	r1, r0, #1
 8008732:	4638      	mov	r0, r7
 8008734:	f000 fab8 	bl	8008ca8 <_malloc_r>
 8008738:	6030      	str	r0, [r6, #0]
 800873a:	2800      	cmp	r0, #0
 800873c:	d158      	bne.n	80087f0 <_tzset_unlocked_r+0x10c>
 800873e:	7823      	ldrb	r3, [r4, #0]
 8008740:	4aa3      	ldr	r2, [pc, #652]	; (80089d0 <_tzset_unlocked_r+0x2ec>)
 8008742:	49a4      	ldr	r1, [pc, #656]	; (80089d4 <_tzset_unlocked_r+0x2f0>)
 8008744:	2b3a      	cmp	r3, #58	; 0x3a
 8008746:	bf08      	it	eq
 8008748:	3401      	addeq	r4, #1
 800874a:	ae0a      	add	r6, sp, #40	; 0x28
 800874c:	4633      	mov	r3, r6
 800874e:	4620      	mov	r0, r4
 8008750:	f000 fdfe 	bl	8009350 <siscanf>
 8008754:	2800      	cmp	r0, #0
 8008756:	dddf      	ble.n	8008718 <_tzset_unlocked_r+0x34>
 8008758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800875a:	18e7      	adds	r7, r4, r3
 800875c:	5ce3      	ldrb	r3, [r4, r3]
 800875e:	2b2d      	cmp	r3, #45	; 0x2d
 8008760:	d14a      	bne.n	80087f8 <_tzset_unlocked_r+0x114>
 8008762:	3701      	adds	r7, #1
 8008764:	f04f 34ff 	mov.w	r4, #4294967295
 8008768:	f10d 0a20 	add.w	sl, sp, #32
 800876c:	f10d 0b1e 	add.w	fp, sp, #30
 8008770:	f04f 0800 	mov.w	r8, #0
 8008774:	9603      	str	r6, [sp, #12]
 8008776:	f8cd a008 	str.w	sl, [sp, #8]
 800877a:	9601      	str	r6, [sp, #4]
 800877c:	f8cd b000 	str.w	fp, [sp]
 8008780:	4633      	mov	r3, r6
 8008782:	aa07      	add	r2, sp, #28
 8008784:	4994      	ldr	r1, [pc, #592]	; (80089d8 <_tzset_unlocked_r+0x2f4>)
 8008786:	f8ad 801e 	strh.w	r8, [sp, #30]
 800878a:	4638      	mov	r0, r7
 800878c:	f8ad 8020 	strh.w	r8, [sp, #32]
 8008790:	f000 fdde 	bl	8009350 <siscanf>
 8008794:	4540      	cmp	r0, r8
 8008796:	ddbf      	ble.n	8008718 <_tzset_unlocked_r+0x34>
 8008798:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800879c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80087a0:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80089e4 <_tzset_unlocked_r+0x300>
 80087a4:	213c      	movs	r1, #60	; 0x3c
 80087a6:	fb01 2203 	mla	r2, r1, r3, r2
 80087aa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80087ae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80087b2:	fb01 2303 	mla	r3, r1, r3, r2
 80087b6:	435c      	muls	r4, r3
 80087b8:	622c      	str	r4, [r5, #32]
 80087ba:	4c84      	ldr	r4, [pc, #528]	; (80089cc <_tzset_unlocked_r+0x2e8>)
 80087bc:	4b84      	ldr	r3, [pc, #528]	; (80089d0 <_tzset_unlocked_r+0x2ec>)
 80087be:	6023      	str	r3, [r4, #0]
 80087c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c2:	4984      	ldr	r1, [pc, #528]	; (80089d4 <_tzset_unlocked_r+0x2f0>)
 80087c4:	441f      	add	r7, r3
 80087c6:	464a      	mov	r2, r9
 80087c8:	4633      	mov	r3, r6
 80087ca:	4638      	mov	r0, r7
 80087cc:	f000 fdc0 	bl	8009350 <siscanf>
 80087d0:	4540      	cmp	r0, r8
 80087d2:	dc16      	bgt.n	8008802 <_tzset_unlocked_r+0x11e>
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	6063      	str	r3, [r4, #4]
 80087d8:	4b79      	ldr	r3, [pc, #484]	; (80089c0 <_tzset_unlocked_r+0x2dc>)
 80087da:	6a2a      	ldr	r2, [r5, #32]
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	4b7a      	ldr	r3, [pc, #488]	; (80089c8 <_tzset_unlocked_r+0x2e4>)
 80087e0:	f8c3 8000 	str.w	r8, [r3]
 80087e4:	e798      	b.n	8008718 <_tzset_unlocked_r+0x34>
 80087e6:	f7f7 fcfb 	bl	80001e0 <strcmp>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d094      	beq.n	8008718 <_tzset_unlocked_r+0x34>
 80087ee:	e799      	b.n	8008724 <_tzset_unlocked_r+0x40>
 80087f0:	4621      	mov	r1, r4
 80087f2:	f7ff fde9 	bl	80083c8 <strcpy>
 80087f6:	e7a2      	b.n	800873e <_tzset_unlocked_r+0x5a>
 80087f8:	2b2b      	cmp	r3, #43	; 0x2b
 80087fa:	bf08      	it	eq
 80087fc:	3701      	addeq	r7, #1
 80087fe:	2401      	movs	r4, #1
 8008800:	e7b2      	b.n	8008768 <_tzset_unlocked_r+0x84>
 8008802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008804:	f8c4 9004 	str.w	r9, [r4, #4]
 8008808:	18fc      	adds	r4, r7, r3
 800880a:	5cfb      	ldrb	r3, [r7, r3]
 800880c:	2b2d      	cmp	r3, #45	; 0x2d
 800880e:	f040 8092 	bne.w	8008936 <_tzset_unlocked_r+0x252>
 8008812:	3401      	adds	r4, #1
 8008814:	f04f 37ff 	mov.w	r7, #4294967295
 8008818:	2300      	movs	r3, #0
 800881a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800881e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008822:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008826:	930a      	str	r3, [sp, #40]	; 0x28
 8008828:	9603      	str	r6, [sp, #12]
 800882a:	f8cd a008 	str.w	sl, [sp, #8]
 800882e:	9601      	str	r6, [sp, #4]
 8008830:	f8cd b000 	str.w	fp, [sp]
 8008834:	4633      	mov	r3, r6
 8008836:	aa07      	add	r2, sp, #28
 8008838:	4967      	ldr	r1, [pc, #412]	; (80089d8 <_tzset_unlocked_r+0x2f4>)
 800883a:	4620      	mov	r0, r4
 800883c:	f000 fd88 	bl	8009350 <siscanf>
 8008840:	2800      	cmp	r0, #0
 8008842:	dc7d      	bgt.n	8008940 <_tzset_unlocked_r+0x25c>
 8008844:	6a2b      	ldr	r3, [r5, #32]
 8008846:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800884a:	63eb      	str	r3, [r5, #60]	; 0x3c
 800884c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800884e:	462f      	mov	r7, r5
 8008850:	441c      	add	r4, r3
 8008852:	f04f 0900 	mov.w	r9, #0
 8008856:	7823      	ldrb	r3, [r4, #0]
 8008858:	2b2c      	cmp	r3, #44	; 0x2c
 800885a:	bf08      	it	eq
 800885c:	3401      	addeq	r4, #1
 800885e:	f894 8000 	ldrb.w	r8, [r4]
 8008862:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8008866:	d17b      	bne.n	8008960 <_tzset_unlocked_r+0x27c>
 8008868:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800886c:	9302      	str	r3, [sp, #8]
 800886e:	ab09      	add	r3, sp, #36	; 0x24
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	9603      	str	r6, [sp, #12]
 8008874:	9601      	str	r6, [sp, #4]
 8008876:	4633      	mov	r3, r6
 8008878:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800887c:	4957      	ldr	r1, [pc, #348]	; (80089dc <_tzset_unlocked_r+0x2f8>)
 800887e:	4620      	mov	r0, r4
 8008880:	f000 fd66 	bl	8009350 <siscanf>
 8008884:	2803      	cmp	r0, #3
 8008886:	f47f af47 	bne.w	8008718 <_tzset_unlocked_r+0x34>
 800888a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800888e:	1e4b      	subs	r3, r1, #1
 8008890:	2b0b      	cmp	r3, #11
 8008892:	f63f af41 	bhi.w	8008718 <_tzset_unlocked_r+0x34>
 8008896:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800889a:	1e53      	subs	r3, r2, #1
 800889c:	2b04      	cmp	r3, #4
 800889e:	f63f af3b 	bhi.w	8008718 <_tzset_unlocked_r+0x34>
 80088a2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80088a6:	2b06      	cmp	r3, #6
 80088a8:	f63f af36 	bhi.w	8008718 <_tzset_unlocked_r+0x34>
 80088ac:	f887 8008 	strb.w	r8, [r7, #8]
 80088b0:	60f9      	str	r1, [r7, #12]
 80088b2:	613a      	str	r2, [r7, #16]
 80088b4:	617b      	str	r3, [r7, #20]
 80088b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088b8:	eb04 0803 	add.w	r8, r4, r3
 80088bc:	2302      	movs	r3, #2
 80088be:	f8ad 301c 	strh.w	r3, [sp, #28]
 80088c2:	2300      	movs	r3, #0
 80088c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80088c8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80088cc:	930a      	str	r3, [sp, #40]	; 0x28
 80088ce:	f898 3000 	ldrb.w	r3, [r8]
 80088d2:	2b2f      	cmp	r3, #47	; 0x2f
 80088d4:	d10b      	bne.n	80088ee <_tzset_unlocked_r+0x20a>
 80088d6:	9603      	str	r6, [sp, #12]
 80088d8:	f8cd a008 	str.w	sl, [sp, #8]
 80088dc:	9601      	str	r6, [sp, #4]
 80088de:	f8cd b000 	str.w	fp, [sp]
 80088e2:	4633      	mov	r3, r6
 80088e4:	aa07      	add	r2, sp, #28
 80088e6:	493e      	ldr	r1, [pc, #248]	; (80089e0 <_tzset_unlocked_r+0x2fc>)
 80088e8:	4640      	mov	r0, r8
 80088ea:	f000 fd31 	bl	8009350 <siscanf>
 80088ee:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80088f2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80088f6:	213c      	movs	r1, #60	; 0x3c
 80088f8:	fb01 2203 	mla	r2, r1, r3, r2
 80088fc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8008900:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008904:	fb01 2303 	mla	r3, r1, r3, r2
 8008908:	61bb      	str	r3, [r7, #24]
 800890a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800890c:	f109 0901 	add.w	r9, r9, #1
 8008910:	f1b9 0f02 	cmp.w	r9, #2
 8008914:	4444      	add	r4, r8
 8008916:	f107 071c 	add.w	r7, r7, #28
 800891a:	d19c      	bne.n	8008856 <_tzset_unlocked_r+0x172>
 800891c:	6868      	ldr	r0, [r5, #4]
 800891e:	f7ff fe31 	bl	8008584 <__tzcalc_limits>
 8008922:	4b27      	ldr	r3, [pc, #156]	; (80089c0 <_tzset_unlocked_r+0x2dc>)
 8008924:	6a2a      	ldr	r2, [r5, #32]
 8008926:	601a      	str	r2, [r3, #0]
 8008928:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800892a:	1a9b      	subs	r3, r3, r2
 800892c:	4a26      	ldr	r2, [pc, #152]	; (80089c8 <_tzset_unlocked_r+0x2e4>)
 800892e:	bf18      	it	ne
 8008930:	2301      	movne	r3, #1
 8008932:	6013      	str	r3, [r2, #0]
 8008934:	e6f0      	b.n	8008718 <_tzset_unlocked_r+0x34>
 8008936:	2b2b      	cmp	r3, #43	; 0x2b
 8008938:	bf08      	it	eq
 800893a:	3401      	addeq	r4, #1
 800893c:	2701      	movs	r7, #1
 800893e:	e76b      	b.n	8008818 <_tzset_unlocked_r+0x134>
 8008940:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8008944:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8008948:	213c      	movs	r1, #60	; 0x3c
 800894a:	fb01 2203 	mla	r2, r1, r3, r2
 800894e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8008952:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008956:	fb01 2303 	mla	r3, r1, r3, r2
 800895a:	435f      	muls	r7, r3
 800895c:	63ef      	str	r7, [r5, #60]	; 0x3c
 800895e:	e775      	b.n	800884c <_tzset_unlocked_r+0x168>
 8008960:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8008964:	bf06      	itte	eq
 8008966:	3401      	addeq	r4, #1
 8008968:	4643      	moveq	r3, r8
 800896a:	2344      	movne	r3, #68	; 0x44
 800896c:	220a      	movs	r2, #10
 800896e:	a90b      	add	r1, sp, #44	; 0x2c
 8008970:	4620      	mov	r0, r4
 8008972:	9305      	str	r3, [sp, #20]
 8008974:	f000 fda8 	bl	80094c8 <strtoul>
 8008978:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800897c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8008980:	4544      	cmp	r4, r8
 8008982:	9b05      	ldr	r3, [sp, #20]
 8008984:	d114      	bne.n	80089b0 <_tzset_unlocked_r+0x2cc>
 8008986:	234d      	movs	r3, #77	; 0x4d
 8008988:	f1b9 0f00 	cmp.w	r9, #0
 800898c:	d107      	bne.n	800899e <_tzset_unlocked_r+0x2ba>
 800898e:	722b      	strb	r3, [r5, #8]
 8008990:	2303      	movs	r3, #3
 8008992:	60eb      	str	r3, [r5, #12]
 8008994:	2302      	movs	r3, #2
 8008996:	612b      	str	r3, [r5, #16]
 8008998:	f8c5 9014 	str.w	r9, [r5, #20]
 800899c:	e78e      	b.n	80088bc <_tzset_unlocked_r+0x1d8>
 800899e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 80089a2:	230b      	movs	r3, #11
 80089a4:	62ab      	str	r3, [r5, #40]	; 0x28
 80089a6:	2301      	movs	r3, #1
 80089a8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80089aa:	2300      	movs	r3, #0
 80089ac:	632b      	str	r3, [r5, #48]	; 0x30
 80089ae:	e785      	b.n	80088bc <_tzset_unlocked_r+0x1d8>
 80089b0:	b280      	uxth	r0, r0
 80089b2:	723b      	strb	r3, [r7, #8]
 80089b4:	6178      	str	r0, [r7, #20]
 80089b6:	e781      	b.n	80088bc <_tzset_unlocked_r+0x1d8>
 80089b8:	08009fc4 	.word	0x08009fc4
 80089bc:	20008b90 	.word	0x20008b90
 80089c0:	20008b98 	.word	0x20008b98
 80089c4:	08009fc7 	.word	0x08009fc7
 80089c8:	20008b94 	.word	0x20008b94
 80089cc:	20000074 	.word	0x20000074
 80089d0:	20008b83 	.word	0x20008b83
 80089d4:	08009fcb 	.word	0x08009fcb
 80089d8:	08009fee 	.word	0x08009fee
 80089dc:	08009fda 	.word	0x08009fda
 80089e0:	08009fed 	.word	0x08009fed
 80089e4:	20008b78 	.word	0x20008b78

080089e8 <_findenv_r>:
 80089e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ec:	4606      	mov	r6, r0
 80089ee:	468a      	mov	sl, r1
 80089f0:	4617      	mov	r7, r2
 80089f2:	f000 fd8c 	bl	800950e <__env_lock>
 80089f6:	4b1b      	ldr	r3, [pc, #108]	; (8008a64 <_findenv_r+0x7c>)
 80089f8:	f8d3 8000 	ldr.w	r8, [r3]
 80089fc:	4699      	mov	r9, r3
 80089fe:	f1b8 0f00 	cmp.w	r8, #0
 8008a02:	d007      	beq.n	8008a14 <_findenv_r+0x2c>
 8008a04:	4654      	mov	r4, sl
 8008a06:	4623      	mov	r3, r4
 8008a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a0c:	b332      	cbz	r2, 8008a5c <_findenv_r+0x74>
 8008a0e:	2a3d      	cmp	r2, #61	; 0x3d
 8008a10:	461c      	mov	r4, r3
 8008a12:	d1f8      	bne.n	8008a06 <_findenv_r+0x1e>
 8008a14:	4630      	mov	r0, r6
 8008a16:	f000 fd7b 	bl	8009510 <__env_unlock>
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a20:	f108 0804 	add.w	r8, r8, #4
 8008a24:	f8d8 0000 	ldr.w	r0, [r8]
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	d0f3      	beq.n	8008a14 <_findenv_r+0x2c>
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	4651      	mov	r1, sl
 8008a30:	f7ff fcd2 	bl	80083d8 <strncmp>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d1f3      	bne.n	8008a20 <_findenv_r+0x38>
 8008a38:	f8d8 3000 	ldr.w	r3, [r8]
 8008a3c:	191d      	adds	r5, r3, r4
 8008a3e:	5d1b      	ldrb	r3, [r3, r4]
 8008a40:	2b3d      	cmp	r3, #61	; 0x3d
 8008a42:	d1ed      	bne.n	8008a20 <_findenv_r+0x38>
 8008a44:	f8d9 3000 	ldr.w	r3, [r9]
 8008a48:	eba8 0303 	sub.w	r3, r8, r3
 8008a4c:	109b      	asrs	r3, r3, #2
 8008a4e:	4630      	mov	r0, r6
 8008a50:	603b      	str	r3, [r7, #0]
 8008a52:	f000 fd5d 	bl	8009510 <__env_unlock>
 8008a56:	1c68      	adds	r0, r5, #1
 8008a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a5c:	eba4 040a 	sub.w	r4, r4, sl
 8008a60:	e7e0      	b.n	8008a24 <_findenv_r+0x3c>
 8008a62:	bf00      	nop
 8008a64:	20000008 	.word	0x20000008

08008a68 <_getenv_r>:
 8008a68:	b507      	push	{r0, r1, r2, lr}
 8008a6a:	aa01      	add	r2, sp, #4
 8008a6c:	f7ff ffbc 	bl	80089e8 <_findenv_r>
 8008a70:	b003      	add	sp, #12
 8008a72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008a78 <__gettzinfo>:
 8008a78:	4800      	ldr	r0, [pc, #0]	; (8008a7c <__gettzinfo+0x4>)
 8008a7a:	4770      	bx	lr
 8008a7c:	2000007c 	.word	0x2000007c

08008a80 <gmtime_r>:
 8008a80:	6802      	ldr	r2, [r0, #0]
 8008a82:	4848      	ldr	r0, [pc, #288]	; (8008ba4 <gmtime_r+0x124>)
 8008a84:	fb92 f3f0 	sdiv	r3, r2, r0
 8008a88:	fb00 2013 	mls	r0, r0, r3, r2
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	bfb8      	it	lt
 8008a90:	f500 30a8 	addlt.w	r0, r0, #86016	; 0x15000
 8008a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a96:	bfb8      	it	lt
 8008a98:	f500 70c0 	addlt.w	r0, r0, #384	; 0x180
 8008a9c:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8008aa0:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8008aa4:	fb90 f2f4 	sdiv	r2, r0, r4
 8008aa8:	fb04 0012 	mls	r0, r4, r2, r0
 8008aac:	f04f 043c 	mov.w	r4, #60	; 0x3c
 8008ab0:	bfac      	ite	ge
 8008ab2:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 8008ab6:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 8008aba:	608a      	str	r2, [r1, #8]
 8008abc:	fb90 f2f4 	sdiv	r2, r0, r4
 8008ac0:	fb04 0012 	mls	r0, r4, r2, r0
 8008ac4:	604a      	str	r2, [r1, #4]
 8008ac6:	6008      	str	r0, [r1, #0]
 8008ac8:	2207      	movs	r2, #7
 8008aca:	1cd8      	adds	r0, r3, #3
 8008acc:	fb90 f2f2 	sdiv	r2, r0, r2
 8008ad0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8008ad4:	1a82      	subs	r2, r0, r2
 8008ad6:	618a      	str	r2, [r1, #24]
 8008ad8:	4a33      	ldr	r2, [pc, #204]	; (8008ba8 <gmtime_r+0x128>)
 8008ada:	4c34      	ldr	r4, [pc, #208]	; (8008bac <gmtime_r+0x12c>)
 8008adc:	fb93 f4f4 	sdiv	r4, r3, r4
 8008ae0:	fb02 3304 	mla	r3, r2, r4, r3
 8008ae4:	f648 60ac 	movw	r0, #36524	; 0x8eac
 8008ae8:	fbb3 f0f0 	udiv	r0, r3, r0
 8008aec:	4418      	add	r0, r3
 8008aee:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8008af2:	fbb3 f2f7 	udiv	r2, r3, r7
 8008af6:	1a80      	subs	r0, r0, r2
 8008af8:	4a2d      	ldr	r2, [pc, #180]	; (8008bb0 <gmtime_r+0x130>)
 8008afa:	fbb3 f2f2 	udiv	r2, r3, r2
 8008afe:	1a82      	subs	r2, r0, r2
 8008b00:	f648 6094 	movw	r0, #36500	; 0x8e94
 8008b04:	fbb2 f0f0 	udiv	r0, r2, r0
 8008b08:	4403      	add	r3, r0
 8008b0a:	f240 166d 	movw	r6, #365	; 0x16d
 8008b0e:	fbb2 f5f6 	udiv	r5, r2, r6
 8008b12:	fbb2 f2f7 	udiv	r2, r2, r7
 8008b16:	1a9a      	subs	r2, r3, r2
 8008b18:	fb06 2315 	mls	r3, r6, r5, r2
 8008b1c:	2099      	movs	r0, #153	; 0x99
 8008b1e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008b22:	1c5e      	adds	r6, r3, #1
 8008b24:	3202      	adds	r2, #2
 8008b26:	fbb2 f2f0 	udiv	r2, r2, r0
 8008b2a:	2a0a      	cmp	r2, #10
 8008b2c:	fb00 f002 	mul.w	r0, r0, r2
 8008b30:	f100 0002 	add.w	r0, r0, #2
 8008b34:	f04f 0705 	mov.w	r7, #5
 8008b38:	fbb0 f0f7 	udiv	r0, r0, r7
 8008b3c:	eba6 0000 	sub.w	r0, r6, r0
 8008b40:	bf34      	ite	cc
 8008b42:	2602      	movcc	r6, #2
 8008b44:	f06f 0609 	mvncs.w	r6, #9
 8008b48:	4416      	add	r6, r2
 8008b4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008b4e:	fb02 5404 	mla	r4, r2, r4, r5
 8008b52:	2e01      	cmp	r6, #1
 8008b54:	bf98      	it	ls
 8008b56:	3401      	addls	r4, #1
 8008b58:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8008b5c:	d30b      	bcc.n	8008b76 <gmtime_r+0xf6>
 8008b5e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008b62:	61cb      	str	r3, [r1, #28]
 8008b64:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
 8008b68:	2300      	movs	r3, #0
 8008b6a:	60c8      	str	r0, [r1, #12]
 8008b6c:	614c      	str	r4, [r1, #20]
 8008b6e:	610e      	str	r6, [r1, #16]
 8008b70:	620b      	str	r3, [r1, #32]
 8008b72:	4608      	mov	r0, r1
 8008b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b76:	07aa      	lsls	r2, r5, #30
 8008b78:	d105      	bne.n	8008b86 <gmtime_r+0x106>
 8008b7a:	2764      	movs	r7, #100	; 0x64
 8008b7c:	fbb5 f2f7 	udiv	r2, r5, r7
 8008b80:	fb07 5212 	mls	r2, r7, r2, r5
 8008b84:	b95a      	cbnz	r2, 8008b9e <gmtime_r+0x11e>
 8008b86:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8008b8a:	fbb5 f2f7 	udiv	r2, r5, r7
 8008b8e:	fb07 5212 	mls	r2, r7, r2, r5
 8008b92:	fab2 f282 	clz	r2, r2
 8008b96:	0952      	lsrs	r2, r2, #5
 8008b98:	333b      	adds	r3, #59	; 0x3b
 8008b9a:	4413      	add	r3, r2
 8008b9c:	e7e1      	b.n	8008b62 <gmtime_r+0xe2>
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	e7fa      	b.n	8008b98 <gmtime_r+0x118>
 8008ba2:	bf00      	nop
 8008ba4:	00015180 	.word	0x00015180
 8008ba8:	fffdc54f 	.word	0xfffdc54f
 8008bac:	00023ab1 	.word	0x00023ab1
 8008bb0:	00023ab0 	.word	0x00023ab0

08008bb4 <__locale_ctype_ptr_l>:
 8008bb4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008bb8:	4770      	bx	lr
	...

08008bbc <__locale_ctype_ptr>:
 8008bbc:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <__locale_ctype_ptr+0x14>)
 8008bbe:	4a05      	ldr	r2, [pc, #20]	; (8008bd4 <__locale_ctype_ptr+0x18>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	bf08      	it	eq
 8008bc8:	4613      	moveq	r3, r2
 8008bca:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008bce:	4770      	bx	lr
 8008bd0:	20000010 	.word	0x20000010
 8008bd4:	200000bc 	.word	0x200000bc

08008bd8 <free>:
 8008bd8:	4b02      	ldr	r3, [pc, #8]	; (8008be4 <free+0xc>)
 8008bda:	4601      	mov	r1, r0
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	f000 b815 	b.w	8008c0c <_free_r>
 8008be2:	bf00      	nop
 8008be4:	20000010 	.word	0x20000010

08008be8 <__ascii_mbtowc>:
 8008be8:	b082      	sub	sp, #8
 8008bea:	b901      	cbnz	r1, 8008bee <__ascii_mbtowc+0x6>
 8008bec:	a901      	add	r1, sp, #4
 8008bee:	b142      	cbz	r2, 8008c02 <__ascii_mbtowc+0x1a>
 8008bf0:	b14b      	cbz	r3, 8008c06 <__ascii_mbtowc+0x1e>
 8008bf2:	7813      	ldrb	r3, [r2, #0]
 8008bf4:	600b      	str	r3, [r1, #0]
 8008bf6:	7812      	ldrb	r2, [r2, #0]
 8008bf8:	1c10      	adds	r0, r2, #0
 8008bfa:	bf18      	it	ne
 8008bfc:	2001      	movne	r0, #1
 8008bfe:	b002      	add	sp, #8
 8008c00:	4770      	bx	lr
 8008c02:	4610      	mov	r0, r2
 8008c04:	e7fb      	b.n	8008bfe <__ascii_mbtowc+0x16>
 8008c06:	f06f 0001 	mvn.w	r0, #1
 8008c0a:	e7f8      	b.n	8008bfe <__ascii_mbtowc+0x16>

08008c0c <_free_r>:
 8008c0c:	b538      	push	{r3, r4, r5, lr}
 8008c0e:	4605      	mov	r5, r0
 8008c10:	2900      	cmp	r1, #0
 8008c12:	d045      	beq.n	8008ca0 <_free_r+0x94>
 8008c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c18:	1f0c      	subs	r4, r1, #4
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	bfb8      	it	lt
 8008c1e:	18e4      	addlt	r4, r4, r3
 8008c20:	f000 fc91 	bl	8009546 <__malloc_lock>
 8008c24:	4a1f      	ldr	r2, [pc, #124]	; (8008ca4 <_free_r+0x98>)
 8008c26:	6813      	ldr	r3, [r2, #0]
 8008c28:	4610      	mov	r0, r2
 8008c2a:	b933      	cbnz	r3, 8008c3a <_free_r+0x2e>
 8008c2c:	6063      	str	r3, [r4, #4]
 8008c2e:	6014      	str	r4, [r2, #0]
 8008c30:	4628      	mov	r0, r5
 8008c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c36:	f000 bc87 	b.w	8009548 <__malloc_unlock>
 8008c3a:	42a3      	cmp	r3, r4
 8008c3c:	d90c      	bls.n	8008c58 <_free_r+0x4c>
 8008c3e:	6821      	ldr	r1, [r4, #0]
 8008c40:	1862      	adds	r2, r4, r1
 8008c42:	4293      	cmp	r3, r2
 8008c44:	bf04      	itt	eq
 8008c46:	681a      	ldreq	r2, [r3, #0]
 8008c48:	685b      	ldreq	r3, [r3, #4]
 8008c4a:	6063      	str	r3, [r4, #4]
 8008c4c:	bf04      	itt	eq
 8008c4e:	1852      	addeq	r2, r2, r1
 8008c50:	6022      	streq	r2, [r4, #0]
 8008c52:	6004      	str	r4, [r0, #0]
 8008c54:	e7ec      	b.n	8008c30 <_free_r+0x24>
 8008c56:	4613      	mov	r3, r2
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	b10a      	cbz	r2, 8008c60 <_free_r+0x54>
 8008c5c:	42a2      	cmp	r2, r4
 8008c5e:	d9fa      	bls.n	8008c56 <_free_r+0x4a>
 8008c60:	6819      	ldr	r1, [r3, #0]
 8008c62:	1858      	adds	r0, r3, r1
 8008c64:	42a0      	cmp	r0, r4
 8008c66:	d10b      	bne.n	8008c80 <_free_r+0x74>
 8008c68:	6820      	ldr	r0, [r4, #0]
 8008c6a:	4401      	add	r1, r0
 8008c6c:	1858      	adds	r0, r3, r1
 8008c6e:	4282      	cmp	r2, r0
 8008c70:	6019      	str	r1, [r3, #0]
 8008c72:	d1dd      	bne.n	8008c30 <_free_r+0x24>
 8008c74:	6810      	ldr	r0, [r2, #0]
 8008c76:	6852      	ldr	r2, [r2, #4]
 8008c78:	605a      	str	r2, [r3, #4]
 8008c7a:	4401      	add	r1, r0
 8008c7c:	6019      	str	r1, [r3, #0]
 8008c7e:	e7d7      	b.n	8008c30 <_free_r+0x24>
 8008c80:	d902      	bls.n	8008c88 <_free_r+0x7c>
 8008c82:	230c      	movs	r3, #12
 8008c84:	602b      	str	r3, [r5, #0]
 8008c86:	e7d3      	b.n	8008c30 <_free_r+0x24>
 8008c88:	6820      	ldr	r0, [r4, #0]
 8008c8a:	1821      	adds	r1, r4, r0
 8008c8c:	428a      	cmp	r2, r1
 8008c8e:	bf04      	itt	eq
 8008c90:	6811      	ldreq	r1, [r2, #0]
 8008c92:	6852      	ldreq	r2, [r2, #4]
 8008c94:	6062      	str	r2, [r4, #4]
 8008c96:	bf04      	itt	eq
 8008c98:	1809      	addeq	r1, r1, r0
 8008c9a:	6021      	streq	r1, [r4, #0]
 8008c9c:	605c      	str	r4, [r3, #4]
 8008c9e:	e7c7      	b.n	8008c30 <_free_r+0x24>
 8008ca0:	bd38      	pop	{r3, r4, r5, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20008b9c 	.word	0x20008b9c

08008ca8 <_malloc_r>:
 8008ca8:	b570      	push	{r4, r5, r6, lr}
 8008caa:	1ccd      	adds	r5, r1, #3
 8008cac:	f025 0503 	bic.w	r5, r5, #3
 8008cb0:	3508      	adds	r5, #8
 8008cb2:	2d0c      	cmp	r5, #12
 8008cb4:	bf38      	it	cc
 8008cb6:	250c      	movcc	r5, #12
 8008cb8:	2d00      	cmp	r5, #0
 8008cba:	4606      	mov	r6, r0
 8008cbc:	db01      	blt.n	8008cc2 <_malloc_r+0x1a>
 8008cbe:	42a9      	cmp	r1, r5
 8008cc0:	d903      	bls.n	8008cca <_malloc_r+0x22>
 8008cc2:	230c      	movs	r3, #12
 8008cc4:	6033      	str	r3, [r6, #0]
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	bd70      	pop	{r4, r5, r6, pc}
 8008cca:	f000 fc3c 	bl	8009546 <__malloc_lock>
 8008cce:	4a23      	ldr	r2, [pc, #140]	; (8008d5c <_malloc_r+0xb4>)
 8008cd0:	6814      	ldr	r4, [r2, #0]
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	b991      	cbnz	r1, 8008cfc <_malloc_r+0x54>
 8008cd6:	4c22      	ldr	r4, [pc, #136]	; (8008d60 <_malloc_r+0xb8>)
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	b91b      	cbnz	r3, 8008ce4 <_malloc_r+0x3c>
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f000 fb27 	bl	8009330 <_sbrk_r>
 8008ce2:	6020      	str	r0, [r4, #0]
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f000 fb22 	bl	8009330 <_sbrk_r>
 8008cec:	1c43      	adds	r3, r0, #1
 8008cee:	d126      	bne.n	8008d3e <_malloc_r+0x96>
 8008cf0:	230c      	movs	r3, #12
 8008cf2:	6033      	str	r3, [r6, #0]
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	f000 fc27 	bl	8009548 <__malloc_unlock>
 8008cfa:	e7e4      	b.n	8008cc6 <_malloc_r+0x1e>
 8008cfc:	680b      	ldr	r3, [r1, #0]
 8008cfe:	1b5b      	subs	r3, r3, r5
 8008d00:	d41a      	bmi.n	8008d38 <_malloc_r+0x90>
 8008d02:	2b0b      	cmp	r3, #11
 8008d04:	d90f      	bls.n	8008d26 <_malloc_r+0x7e>
 8008d06:	600b      	str	r3, [r1, #0]
 8008d08:	50cd      	str	r5, [r1, r3]
 8008d0a:	18cc      	adds	r4, r1, r3
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f000 fc1b 	bl	8009548 <__malloc_unlock>
 8008d12:	f104 000b 	add.w	r0, r4, #11
 8008d16:	1d23      	adds	r3, r4, #4
 8008d18:	f020 0007 	bic.w	r0, r0, #7
 8008d1c:	1ac3      	subs	r3, r0, r3
 8008d1e:	d01b      	beq.n	8008d58 <_malloc_r+0xb0>
 8008d20:	425a      	negs	r2, r3
 8008d22:	50e2      	str	r2, [r4, r3]
 8008d24:	bd70      	pop	{r4, r5, r6, pc}
 8008d26:	428c      	cmp	r4, r1
 8008d28:	bf0d      	iteet	eq
 8008d2a:	6863      	ldreq	r3, [r4, #4]
 8008d2c:	684b      	ldrne	r3, [r1, #4]
 8008d2e:	6063      	strne	r3, [r4, #4]
 8008d30:	6013      	streq	r3, [r2, #0]
 8008d32:	bf18      	it	ne
 8008d34:	460c      	movne	r4, r1
 8008d36:	e7e9      	b.n	8008d0c <_malloc_r+0x64>
 8008d38:	460c      	mov	r4, r1
 8008d3a:	6849      	ldr	r1, [r1, #4]
 8008d3c:	e7ca      	b.n	8008cd4 <_malloc_r+0x2c>
 8008d3e:	1cc4      	adds	r4, r0, #3
 8008d40:	f024 0403 	bic.w	r4, r4, #3
 8008d44:	42a0      	cmp	r0, r4
 8008d46:	d005      	beq.n	8008d54 <_malloc_r+0xac>
 8008d48:	1a21      	subs	r1, r4, r0
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f000 faf0 	bl	8009330 <_sbrk_r>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d0cd      	beq.n	8008cf0 <_malloc_r+0x48>
 8008d54:	6025      	str	r5, [r4, #0]
 8008d56:	e7d9      	b.n	8008d0c <_malloc_r+0x64>
 8008d58:	bd70      	pop	{r4, r5, r6, pc}
 8008d5a:	bf00      	nop
 8008d5c:	20008b9c 	.word	0x20008b9c
 8008d60:	20008ba0 	.word	0x20008ba0

08008d64 <__ssputs_r>:
 8008d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d68:	688e      	ldr	r6, [r1, #8]
 8008d6a:	429e      	cmp	r6, r3
 8008d6c:	4682      	mov	sl, r0
 8008d6e:	460c      	mov	r4, r1
 8008d70:	4691      	mov	r9, r2
 8008d72:	4698      	mov	r8, r3
 8008d74:	d835      	bhi.n	8008de2 <__ssputs_r+0x7e>
 8008d76:	898a      	ldrh	r2, [r1, #12]
 8008d78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d7c:	d031      	beq.n	8008de2 <__ssputs_r+0x7e>
 8008d7e:	6825      	ldr	r5, [r4, #0]
 8008d80:	6909      	ldr	r1, [r1, #16]
 8008d82:	1a6f      	subs	r7, r5, r1
 8008d84:	6965      	ldr	r5, [r4, #20]
 8008d86:	2302      	movs	r3, #2
 8008d88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008d90:	f108 0301 	add.w	r3, r8, #1
 8008d94:	443b      	add	r3, r7
 8008d96:	429d      	cmp	r5, r3
 8008d98:	bf38      	it	cc
 8008d9a:	461d      	movcc	r5, r3
 8008d9c:	0553      	lsls	r3, r2, #21
 8008d9e:	d531      	bpl.n	8008e04 <__ssputs_r+0xa0>
 8008da0:	4629      	mov	r1, r5
 8008da2:	f7ff ff81 	bl	8008ca8 <_malloc_r>
 8008da6:	4606      	mov	r6, r0
 8008da8:	b950      	cbnz	r0, 8008dc0 <__ssputs_r+0x5c>
 8008daa:	230c      	movs	r3, #12
 8008dac:	f8ca 3000 	str.w	r3, [sl]
 8008db0:	89a3      	ldrh	r3, [r4, #12]
 8008db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db6:	81a3      	strh	r3, [r4, #12]
 8008db8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc0:	463a      	mov	r2, r7
 8008dc2:	6921      	ldr	r1, [r4, #16]
 8008dc4:	f7ff fabb 	bl	800833e <memcpy>
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd2:	81a3      	strh	r3, [r4, #12]
 8008dd4:	6126      	str	r6, [r4, #16]
 8008dd6:	6165      	str	r5, [r4, #20]
 8008dd8:	443e      	add	r6, r7
 8008dda:	1bed      	subs	r5, r5, r7
 8008ddc:	6026      	str	r6, [r4, #0]
 8008dde:	60a5      	str	r5, [r4, #8]
 8008de0:	4646      	mov	r6, r8
 8008de2:	4546      	cmp	r6, r8
 8008de4:	bf28      	it	cs
 8008de6:	4646      	movcs	r6, r8
 8008de8:	4632      	mov	r2, r6
 8008dea:	4649      	mov	r1, r9
 8008dec:	6820      	ldr	r0, [r4, #0]
 8008dee:	f000 fb90 	bl	8009512 <memmove>
 8008df2:	68a3      	ldr	r3, [r4, #8]
 8008df4:	1b9b      	subs	r3, r3, r6
 8008df6:	60a3      	str	r3, [r4, #8]
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	441e      	add	r6, r3
 8008dfc:	6026      	str	r6, [r4, #0]
 8008dfe:	2000      	movs	r0, #0
 8008e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e04:	462a      	mov	r2, r5
 8008e06:	f000 fba0 	bl	800954a <_realloc_r>
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d1e1      	bne.n	8008dd4 <__ssputs_r+0x70>
 8008e10:	6921      	ldr	r1, [r4, #16]
 8008e12:	4650      	mov	r0, sl
 8008e14:	f7ff fefa 	bl	8008c0c <_free_r>
 8008e18:	e7c7      	b.n	8008daa <__ssputs_r+0x46>
	...

08008e1c <_svfiprintf_r>:
 8008e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e20:	b09d      	sub	sp, #116	; 0x74
 8008e22:	4680      	mov	r8, r0
 8008e24:	9303      	str	r3, [sp, #12]
 8008e26:	898b      	ldrh	r3, [r1, #12]
 8008e28:	061c      	lsls	r4, r3, #24
 8008e2a:	460d      	mov	r5, r1
 8008e2c:	4616      	mov	r6, r2
 8008e2e:	d50f      	bpl.n	8008e50 <_svfiprintf_r+0x34>
 8008e30:	690b      	ldr	r3, [r1, #16]
 8008e32:	b96b      	cbnz	r3, 8008e50 <_svfiprintf_r+0x34>
 8008e34:	2140      	movs	r1, #64	; 0x40
 8008e36:	f7ff ff37 	bl	8008ca8 <_malloc_r>
 8008e3a:	6028      	str	r0, [r5, #0]
 8008e3c:	6128      	str	r0, [r5, #16]
 8008e3e:	b928      	cbnz	r0, 8008e4c <_svfiprintf_r+0x30>
 8008e40:	230c      	movs	r3, #12
 8008e42:	f8c8 3000 	str.w	r3, [r8]
 8008e46:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4a:	e0c5      	b.n	8008fd8 <_svfiprintf_r+0x1bc>
 8008e4c:	2340      	movs	r3, #64	; 0x40
 8008e4e:	616b      	str	r3, [r5, #20]
 8008e50:	2300      	movs	r3, #0
 8008e52:	9309      	str	r3, [sp, #36]	; 0x24
 8008e54:	2320      	movs	r3, #32
 8008e56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e5a:	2330      	movs	r3, #48	; 0x30
 8008e5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e60:	f04f 0b01 	mov.w	fp, #1
 8008e64:	4637      	mov	r7, r6
 8008e66:	463c      	mov	r4, r7
 8008e68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d13c      	bne.n	8008eea <_svfiprintf_r+0xce>
 8008e70:	ebb7 0a06 	subs.w	sl, r7, r6
 8008e74:	d00b      	beq.n	8008e8e <_svfiprintf_r+0x72>
 8008e76:	4653      	mov	r3, sl
 8008e78:	4632      	mov	r2, r6
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	4640      	mov	r0, r8
 8008e7e:	f7ff ff71 	bl	8008d64 <__ssputs_r>
 8008e82:	3001      	adds	r0, #1
 8008e84:	f000 80a3 	beq.w	8008fce <_svfiprintf_r+0x1b2>
 8008e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8a:	4453      	add	r3, sl
 8008e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e8e:	783b      	ldrb	r3, [r7, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 809c 	beq.w	8008fce <_svfiprintf_r+0x1b2>
 8008e96:	2300      	movs	r3, #0
 8008e98:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9c:	9304      	str	r3, [sp, #16]
 8008e9e:	9307      	str	r3, [sp, #28]
 8008ea0:	9205      	str	r2, [sp, #20]
 8008ea2:	9306      	str	r3, [sp, #24]
 8008ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8008eaa:	2205      	movs	r2, #5
 8008eac:	7821      	ldrb	r1, [r4, #0]
 8008eae:	4850      	ldr	r0, [pc, #320]	; (8008ff0 <_svfiprintf_r+0x1d4>)
 8008eb0:	f7f7 f9a6 	bl	8000200 <memchr>
 8008eb4:	1c67      	adds	r7, r4, #1
 8008eb6:	9b04      	ldr	r3, [sp, #16]
 8008eb8:	b9d8      	cbnz	r0, 8008ef2 <_svfiprintf_r+0xd6>
 8008eba:	06d9      	lsls	r1, r3, #27
 8008ebc:	bf44      	itt	mi
 8008ebe:	2220      	movmi	r2, #32
 8008ec0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ec4:	071a      	lsls	r2, r3, #28
 8008ec6:	bf44      	itt	mi
 8008ec8:	222b      	movmi	r2, #43	; 0x2b
 8008eca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ece:	7822      	ldrb	r2, [r4, #0]
 8008ed0:	2a2a      	cmp	r2, #42	; 0x2a
 8008ed2:	d016      	beq.n	8008f02 <_svfiprintf_r+0xe6>
 8008ed4:	9a07      	ldr	r2, [sp, #28]
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	200a      	movs	r0, #10
 8008eda:	4627      	mov	r7, r4
 8008edc:	3401      	adds	r4, #1
 8008ede:	783b      	ldrb	r3, [r7, #0]
 8008ee0:	3b30      	subs	r3, #48	; 0x30
 8008ee2:	2b09      	cmp	r3, #9
 8008ee4:	d951      	bls.n	8008f8a <_svfiprintf_r+0x16e>
 8008ee6:	b1c9      	cbz	r1, 8008f1c <_svfiprintf_r+0x100>
 8008ee8:	e011      	b.n	8008f0e <_svfiprintf_r+0xf2>
 8008eea:	2b25      	cmp	r3, #37	; 0x25
 8008eec:	d0c0      	beq.n	8008e70 <_svfiprintf_r+0x54>
 8008eee:	4627      	mov	r7, r4
 8008ef0:	e7b9      	b.n	8008e66 <_svfiprintf_r+0x4a>
 8008ef2:	4a3f      	ldr	r2, [pc, #252]	; (8008ff0 <_svfiprintf_r+0x1d4>)
 8008ef4:	1a80      	subs	r0, r0, r2
 8008ef6:	fa0b f000 	lsl.w	r0, fp, r0
 8008efa:	4318      	orrs	r0, r3
 8008efc:	9004      	str	r0, [sp, #16]
 8008efe:	463c      	mov	r4, r7
 8008f00:	e7d3      	b.n	8008eaa <_svfiprintf_r+0x8e>
 8008f02:	9a03      	ldr	r2, [sp, #12]
 8008f04:	1d11      	adds	r1, r2, #4
 8008f06:	6812      	ldr	r2, [r2, #0]
 8008f08:	9103      	str	r1, [sp, #12]
 8008f0a:	2a00      	cmp	r2, #0
 8008f0c:	db01      	blt.n	8008f12 <_svfiprintf_r+0xf6>
 8008f0e:	9207      	str	r2, [sp, #28]
 8008f10:	e004      	b.n	8008f1c <_svfiprintf_r+0x100>
 8008f12:	4252      	negs	r2, r2
 8008f14:	f043 0302 	orr.w	r3, r3, #2
 8008f18:	9207      	str	r2, [sp, #28]
 8008f1a:	9304      	str	r3, [sp, #16]
 8008f1c:	783b      	ldrb	r3, [r7, #0]
 8008f1e:	2b2e      	cmp	r3, #46	; 0x2e
 8008f20:	d10e      	bne.n	8008f40 <_svfiprintf_r+0x124>
 8008f22:	787b      	ldrb	r3, [r7, #1]
 8008f24:	2b2a      	cmp	r3, #42	; 0x2a
 8008f26:	f107 0101 	add.w	r1, r7, #1
 8008f2a:	d132      	bne.n	8008f92 <_svfiprintf_r+0x176>
 8008f2c:	9b03      	ldr	r3, [sp, #12]
 8008f2e:	1d1a      	adds	r2, r3, #4
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	9203      	str	r2, [sp, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	bfb8      	it	lt
 8008f38:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f3c:	3702      	adds	r7, #2
 8008f3e:	9305      	str	r3, [sp, #20]
 8008f40:	4c2c      	ldr	r4, [pc, #176]	; (8008ff4 <_svfiprintf_r+0x1d8>)
 8008f42:	7839      	ldrb	r1, [r7, #0]
 8008f44:	2203      	movs	r2, #3
 8008f46:	4620      	mov	r0, r4
 8008f48:	f7f7 f95a 	bl	8000200 <memchr>
 8008f4c:	b138      	cbz	r0, 8008f5e <_svfiprintf_r+0x142>
 8008f4e:	2340      	movs	r3, #64	; 0x40
 8008f50:	1b00      	subs	r0, r0, r4
 8008f52:	fa03 f000 	lsl.w	r0, r3, r0
 8008f56:	9b04      	ldr	r3, [sp, #16]
 8008f58:	4303      	orrs	r3, r0
 8008f5a:	9304      	str	r3, [sp, #16]
 8008f5c:	3701      	adds	r7, #1
 8008f5e:	7839      	ldrb	r1, [r7, #0]
 8008f60:	4825      	ldr	r0, [pc, #148]	; (8008ff8 <_svfiprintf_r+0x1dc>)
 8008f62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f66:	2206      	movs	r2, #6
 8008f68:	1c7e      	adds	r6, r7, #1
 8008f6a:	f7f7 f949 	bl	8000200 <memchr>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d035      	beq.n	8008fde <_svfiprintf_r+0x1c2>
 8008f72:	4b22      	ldr	r3, [pc, #136]	; (8008ffc <_svfiprintf_r+0x1e0>)
 8008f74:	b9fb      	cbnz	r3, 8008fb6 <_svfiprintf_r+0x19a>
 8008f76:	9b03      	ldr	r3, [sp, #12]
 8008f78:	3307      	adds	r3, #7
 8008f7a:	f023 0307 	bic.w	r3, r3, #7
 8008f7e:	3308      	adds	r3, #8
 8008f80:	9303      	str	r3, [sp, #12]
 8008f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f84:	444b      	add	r3, r9
 8008f86:	9309      	str	r3, [sp, #36]	; 0x24
 8008f88:	e76c      	b.n	8008e64 <_svfiprintf_r+0x48>
 8008f8a:	fb00 3202 	mla	r2, r0, r2, r3
 8008f8e:	2101      	movs	r1, #1
 8008f90:	e7a3      	b.n	8008eda <_svfiprintf_r+0xbe>
 8008f92:	2300      	movs	r3, #0
 8008f94:	9305      	str	r3, [sp, #20]
 8008f96:	4618      	mov	r0, r3
 8008f98:	240a      	movs	r4, #10
 8008f9a:	460f      	mov	r7, r1
 8008f9c:	3101      	adds	r1, #1
 8008f9e:	783a      	ldrb	r2, [r7, #0]
 8008fa0:	3a30      	subs	r2, #48	; 0x30
 8008fa2:	2a09      	cmp	r2, #9
 8008fa4:	d903      	bls.n	8008fae <_svfiprintf_r+0x192>
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d0ca      	beq.n	8008f40 <_svfiprintf_r+0x124>
 8008faa:	9005      	str	r0, [sp, #20]
 8008fac:	e7c8      	b.n	8008f40 <_svfiprintf_r+0x124>
 8008fae:	fb04 2000 	mla	r0, r4, r0, r2
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e7f1      	b.n	8008f9a <_svfiprintf_r+0x17e>
 8008fb6:	ab03      	add	r3, sp, #12
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	462a      	mov	r2, r5
 8008fbc:	4b10      	ldr	r3, [pc, #64]	; (8009000 <_svfiprintf_r+0x1e4>)
 8008fbe:	a904      	add	r1, sp, #16
 8008fc0:	4640      	mov	r0, r8
 8008fc2:	f3af 8000 	nop.w
 8008fc6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008fca:	4681      	mov	r9, r0
 8008fcc:	d1d9      	bne.n	8008f82 <_svfiprintf_r+0x166>
 8008fce:	89ab      	ldrh	r3, [r5, #12]
 8008fd0:	065b      	lsls	r3, r3, #25
 8008fd2:	f53f af38 	bmi.w	8008e46 <_svfiprintf_r+0x2a>
 8008fd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fd8:	b01d      	add	sp, #116	; 0x74
 8008fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fde:	ab03      	add	r3, sp, #12
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	462a      	mov	r2, r5
 8008fe4:	4b06      	ldr	r3, [pc, #24]	; (8009000 <_svfiprintf_r+0x1e4>)
 8008fe6:	a904      	add	r1, sp, #16
 8008fe8:	4640      	mov	r0, r8
 8008fea:	f000 f881 	bl	80090f0 <_printf_i>
 8008fee:	e7ea      	b.n	8008fc6 <_svfiprintf_r+0x1aa>
 8008ff0:	0800a06a 	.word	0x0800a06a
 8008ff4:	0800a070 	.word	0x0800a070
 8008ff8:	0800a074 	.word	0x0800a074
 8008ffc:	00000000 	.word	0x00000000
 8009000:	08008d65 	.word	0x08008d65

08009004 <_printf_common>:
 8009004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009008:	4691      	mov	r9, r2
 800900a:	461f      	mov	r7, r3
 800900c:	688a      	ldr	r2, [r1, #8]
 800900e:	690b      	ldr	r3, [r1, #16]
 8009010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009014:	4293      	cmp	r3, r2
 8009016:	bfb8      	it	lt
 8009018:	4613      	movlt	r3, r2
 800901a:	f8c9 3000 	str.w	r3, [r9]
 800901e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009022:	4606      	mov	r6, r0
 8009024:	460c      	mov	r4, r1
 8009026:	b112      	cbz	r2, 800902e <_printf_common+0x2a>
 8009028:	3301      	adds	r3, #1
 800902a:	f8c9 3000 	str.w	r3, [r9]
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	0699      	lsls	r1, r3, #26
 8009032:	bf42      	ittt	mi
 8009034:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009038:	3302      	addmi	r3, #2
 800903a:	f8c9 3000 	strmi.w	r3, [r9]
 800903e:	6825      	ldr	r5, [r4, #0]
 8009040:	f015 0506 	ands.w	r5, r5, #6
 8009044:	d107      	bne.n	8009056 <_printf_common+0x52>
 8009046:	f104 0a19 	add.w	sl, r4, #25
 800904a:	68e3      	ldr	r3, [r4, #12]
 800904c:	f8d9 2000 	ldr.w	r2, [r9]
 8009050:	1a9b      	subs	r3, r3, r2
 8009052:	429d      	cmp	r5, r3
 8009054:	db29      	blt.n	80090aa <_printf_common+0xa6>
 8009056:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800905a:	6822      	ldr	r2, [r4, #0]
 800905c:	3300      	adds	r3, #0
 800905e:	bf18      	it	ne
 8009060:	2301      	movne	r3, #1
 8009062:	0692      	lsls	r2, r2, #26
 8009064:	d42e      	bmi.n	80090c4 <_printf_common+0xc0>
 8009066:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800906a:	4639      	mov	r1, r7
 800906c:	4630      	mov	r0, r6
 800906e:	47c0      	blx	r8
 8009070:	3001      	adds	r0, #1
 8009072:	d021      	beq.n	80090b8 <_printf_common+0xb4>
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	68e5      	ldr	r5, [r4, #12]
 8009078:	f8d9 2000 	ldr.w	r2, [r9]
 800907c:	f003 0306 	and.w	r3, r3, #6
 8009080:	2b04      	cmp	r3, #4
 8009082:	bf08      	it	eq
 8009084:	1aad      	subeq	r5, r5, r2
 8009086:	68a3      	ldr	r3, [r4, #8]
 8009088:	6922      	ldr	r2, [r4, #16]
 800908a:	bf0c      	ite	eq
 800908c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009090:	2500      	movne	r5, #0
 8009092:	4293      	cmp	r3, r2
 8009094:	bfc4      	itt	gt
 8009096:	1a9b      	subgt	r3, r3, r2
 8009098:	18ed      	addgt	r5, r5, r3
 800909a:	f04f 0900 	mov.w	r9, #0
 800909e:	341a      	adds	r4, #26
 80090a0:	454d      	cmp	r5, r9
 80090a2:	d11b      	bne.n	80090dc <_printf_common+0xd8>
 80090a4:	2000      	movs	r0, #0
 80090a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090aa:	2301      	movs	r3, #1
 80090ac:	4652      	mov	r2, sl
 80090ae:	4639      	mov	r1, r7
 80090b0:	4630      	mov	r0, r6
 80090b2:	47c0      	blx	r8
 80090b4:	3001      	adds	r0, #1
 80090b6:	d103      	bne.n	80090c0 <_printf_common+0xbc>
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295
 80090bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c0:	3501      	adds	r5, #1
 80090c2:	e7c2      	b.n	800904a <_printf_common+0x46>
 80090c4:	18e1      	adds	r1, r4, r3
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	2030      	movs	r0, #48	; 0x30
 80090ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090ce:	4422      	add	r2, r4
 80090d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090d8:	3302      	adds	r3, #2
 80090da:	e7c4      	b.n	8009066 <_printf_common+0x62>
 80090dc:	2301      	movs	r3, #1
 80090de:	4622      	mov	r2, r4
 80090e0:	4639      	mov	r1, r7
 80090e2:	4630      	mov	r0, r6
 80090e4:	47c0      	blx	r8
 80090e6:	3001      	adds	r0, #1
 80090e8:	d0e6      	beq.n	80090b8 <_printf_common+0xb4>
 80090ea:	f109 0901 	add.w	r9, r9, #1
 80090ee:	e7d7      	b.n	80090a0 <_printf_common+0x9c>

080090f0 <_printf_i>:
 80090f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090f4:	4617      	mov	r7, r2
 80090f6:	7e0a      	ldrb	r2, [r1, #24]
 80090f8:	b085      	sub	sp, #20
 80090fa:	2a6e      	cmp	r2, #110	; 0x6e
 80090fc:	4698      	mov	r8, r3
 80090fe:	4606      	mov	r6, r0
 8009100:	460c      	mov	r4, r1
 8009102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009104:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8009108:	f000 80bc 	beq.w	8009284 <_printf_i+0x194>
 800910c:	d81a      	bhi.n	8009144 <_printf_i+0x54>
 800910e:	2a63      	cmp	r2, #99	; 0x63
 8009110:	d02e      	beq.n	8009170 <_printf_i+0x80>
 8009112:	d80a      	bhi.n	800912a <_printf_i+0x3a>
 8009114:	2a00      	cmp	r2, #0
 8009116:	f000 80c8 	beq.w	80092aa <_printf_i+0x1ba>
 800911a:	2a58      	cmp	r2, #88	; 0x58
 800911c:	f000 808a 	beq.w	8009234 <_printf_i+0x144>
 8009120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009124:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8009128:	e02a      	b.n	8009180 <_printf_i+0x90>
 800912a:	2a64      	cmp	r2, #100	; 0x64
 800912c:	d001      	beq.n	8009132 <_printf_i+0x42>
 800912e:	2a69      	cmp	r2, #105	; 0x69
 8009130:	d1f6      	bne.n	8009120 <_printf_i+0x30>
 8009132:	6821      	ldr	r1, [r4, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	f011 0f80 	tst.w	r1, #128	; 0x80
 800913a:	d023      	beq.n	8009184 <_printf_i+0x94>
 800913c:	1d11      	adds	r1, r2, #4
 800913e:	6019      	str	r1, [r3, #0]
 8009140:	6813      	ldr	r3, [r2, #0]
 8009142:	e027      	b.n	8009194 <_printf_i+0xa4>
 8009144:	2a73      	cmp	r2, #115	; 0x73
 8009146:	f000 80b4 	beq.w	80092b2 <_printf_i+0x1c2>
 800914a:	d808      	bhi.n	800915e <_printf_i+0x6e>
 800914c:	2a6f      	cmp	r2, #111	; 0x6f
 800914e:	d02a      	beq.n	80091a6 <_printf_i+0xb6>
 8009150:	2a70      	cmp	r2, #112	; 0x70
 8009152:	d1e5      	bne.n	8009120 <_printf_i+0x30>
 8009154:	680a      	ldr	r2, [r1, #0]
 8009156:	f042 0220 	orr.w	r2, r2, #32
 800915a:	600a      	str	r2, [r1, #0]
 800915c:	e003      	b.n	8009166 <_printf_i+0x76>
 800915e:	2a75      	cmp	r2, #117	; 0x75
 8009160:	d021      	beq.n	80091a6 <_printf_i+0xb6>
 8009162:	2a78      	cmp	r2, #120	; 0x78
 8009164:	d1dc      	bne.n	8009120 <_printf_i+0x30>
 8009166:	2278      	movs	r2, #120	; 0x78
 8009168:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800916c:	496e      	ldr	r1, [pc, #440]	; (8009328 <_printf_i+0x238>)
 800916e:	e064      	b.n	800923a <_printf_i+0x14a>
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8009176:	1d11      	adds	r1, r2, #4
 8009178:	6019      	str	r1, [r3, #0]
 800917a:	6813      	ldr	r3, [r2, #0]
 800917c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009180:	2301      	movs	r3, #1
 8009182:	e0a3      	b.n	80092cc <_printf_i+0x1dc>
 8009184:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009188:	f102 0104 	add.w	r1, r2, #4
 800918c:	6019      	str	r1, [r3, #0]
 800918e:	d0d7      	beq.n	8009140 <_printf_i+0x50>
 8009190:	f9b2 3000 	ldrsh.w	r3, [r2]
 8009194:	2b00      	cmp	r3, #0
 8009196:	da03      	bge.n	80091a0 <_printf_i+0xb0>
 8009198:	222d      	movs	r2, #45	; 0x2d
 800919a:	425b      	negs	r3, r3
 800919c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80091a0:	4962      	ldr	r1, [pc, #392]	; (800932c <_printf_i+0x23c>)
 80091a2:	220a      	movs	r2, #10
 80091a4:	e017      	b.n	80091d6 <_printf_i+0xe6>
 80091a6:	6820      	ldr	r0, [r4, #0]
 80091a8:	6819      	ldr	r1, [r3, #0]
 80091aa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80091ae:	d003      	beq.n	80091b8 <_printf_i+0xc8>
 80091b0:	1d08      	adds	r0, r1, #4
 80091b2:	6018      	str	r0, [r3, #0]
 80091b4:	680b      	ldr	r3, [r1, #0]
 80091b6:	e006      	b.n	80091c6 <_printf_i+0xd6>
 80091b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80091bc:	f101 0004 	add.w	r0, r1, #4
 80091c0:	6018      	str	r0, [r3, #0]
 80091c2:	d0f7      	beq.n	80091b4 <_printf_i+0xc4>
 80091c4:	880b      	ldrh	r3, [r1, #0]
 80091c6:	4959      	ldr	r1, [pc, #356]	; (800932c <_printf_i+0x23c>)
 80091c8:	2a6f      	cmp	r2, #111	; 0x6f
 80091ca:	bf14      	ite	ne
 80091cc:	220a      	movne	r2, #10
 80091ce:	2208      	moveq	r2, #8
 80091d0:	2000      	movs	r0, #0
 80091d2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80091d6:	6865      	ldr	r5, [r4, #4]
 80091d8:	60a5      	str	r5, [r4, #8]
 80091da:	2d00      	cmp	r5, #0
 80091dc:	f2c0 809c 	blt.w	8009318 <_printf_i+0x228>
 80091e0:	6820      	ldr	r0, [r4, #0]
 80091e2:	f020 0004 	bic.w	r0, r0, #4
 80091e6:	6020      	str	r0, [r4, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d13f      	bne.n	800926c <_printf_i+0x17c>
 80091ec:	2d00      	cmp	r5, #0
 80091ee:	f040 8095 	bne.w	800931c <_printf_i+0x22c>
 80091f2:	4675      	mov	r5, lr
 80091f4:	2a08      	cmp	r2, #8
 80091f6:	d10b      	bne.n	8009210 <_printf_i+0x120>
 80091f8:	6823      	ldr	r3, [r4, #0]
 80091fa:	07da      	lsls	r2, r3, #31
 80091fc:	d508      	bpl.n	8009210 <_printf_i+0x120>
 80091fe:	6923      	ldr	r3, [r4, #16]
 8009200:	6862      	ldr	r2, [r4, #4]
 8009202:	429a      	cmp	r2, r3
 8009204:	bfde      	ittt	le
 8009206:	2330      	movle	r3, #48	; 0x30
 8009208:	f805 3c01 	strble.w	r3, [r5, #-1]
 800920c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009210:	ebae 0305 	sub.w	r3, lr, r5
 8009214:	6123      	str	r3, [r4, #16]
 8009216:	f8cd 8000 	str.w	r8, [sp]
 800921a:	463b      	mov	r3, r7
 800921c:	aa03      	add	r2, sp, #12
 800921e:	4621      	mov	r1, r4
 8009220:	4630      	mov	r0, r6
 8009222:	f7ff feef 	bl	8009004 <_printf_common>
 8009226:	3001      	adds	r0, #1
 8009228:	d155      	bne.n	80092d6 <_printf_i+0x1e6>
 800922a:	f04f 30ff 	mov.w	r0, #4294967295
 800922e:	b005      	add	sp, #20
 8009230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009234:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8009238:	493c      	ldr	r1, [pc, #240]	; (800932c <_printf_i+0x23c>)
 800923a:	6822      	ldr	r2, [r4, #0]
 800923c:	6818      	ldr	r0, [r3, #0]
 800923e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009242:	f100 0504 	add.w	r5, r0, #4
 8009246:	601d      	str	r5, [r3, #0]
 8009248:	d001      	beq.n	800924e <_printf_i+0x15e>
 800924a:	6803      	ldr	r3, [r0, #0]
 800924c:	e002      	b.n	8009254 <_printf_i+0x164>
 800924e:	0655      	lsls	r5, r2, #25
 8009250:	d5fb      	bpl.n	800924a <_printf_i+0x15a>
 8009252:	8803      	ldrh	r3, [r0, #0]
 8009254:	07d0      	lsls	r0, r2, #31
 8009256:	bf44      	itt	mi
 8009258:	f042 0220 	orrmi.w	r2, r2, #32
 800925c:	6022      	strmi	r2, [r4, #0]
 800925e:	b91b      	cbnz	r3, 8009268 <_printf_i+0x178>
 8009260:	6822      	ldr	r2, [r4, #0]
 8009262:	f022 0220 	bic.w	r2, r2, #32
 8009266:	6022      	str	r2, [r4, #0]
 8009268:	2210      	movs	r2, #16
 800926a:	e7b1      	b.n	80091d0 <_printf_i+0xe0>
 800926c:	4675      	mov	r5, lr
 800926e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009272:	fb02 3310 	mls	r3, r2, r0, r3
 8009276:	5ccb      	ldrb	r3, [r1, r3]
 8009278:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800927c:	4603      	mov	r3, r0
 800927e:	2800      	cmp	r0, #0
 8009280:	d1f5      	bne.n	800926e <_printf_i+0x17e>
 8009282:	e7b7      	b.n	80091f4 <_printf_i+0x104>
 8009284:	6808      	ldr	r0, [r1, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	6949      	ldr	r1, [r1, #20]
 800928a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800928e:	d004      	beq.n	800929a <_printf_i+0x1aa>
 8009290:	1d10      	adds	r0, r2, #4
 8009292:	6018      	str	r0, [r3, #0]
 8009294:	6813      	ldr	r3, [r2, #0]
 8009296:	6019      	str	r1, [r3, #0]
 8009298:	e007      	b.n	80092aa <_printf_i+0x1ba>
 800929a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800929e:	f102 0004 	add.w	r0, r2, #4
 80092a2:	6018      	str	r0, [r3, #0]
 80092a4:	6813      	ldr	r3, [r2, #0]
 80092a6:	d0f6      	beq.n	8009296 <_printf_i+0x1a6>
 80092a8:	8019      	strh	r1, [r3, #0]
 80092aa:	2300      	movs	r3, #0
 80092ac:	6123      	str	r3, [r4, #16]
 80092ae:	4675      	mov	r5, lr
 80092b0:	e7b1      	b.n	8009216 <_printf_i+0x126>
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	1d11      	adds	r1, r2, #4
 80092b6:	6019      	str	r1, [r3, #0]
 80092b8:	6815      	ldr	r5, [r2, #0]
 80092ba:	6862      	ldr	r2, [r4, #4]
 80092bc:	2100      	movs	r1, #0
 80092be:	4628      	mov	r0, r5
 80092c0:	f7f6 ff9e 	bl	8000200 <memchr>
 80092c4:	b108      	cbz	r0, 80092ca <_printf_i+0x1da>
 80092c6:	1b40      	subs	r0, r0, r5
 80092c8:	6060      	str	r0, [r4, #4]
 80092ca:	6863      	ldr	r3, [r4, #4]
 80092cc:	6123      	str	r3, [r4, #16]
 80092ce:	2300      	movs	r3, #0
 80092d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092d4:	e79f      	b.n	8009216 <_printf_i+0x126>
 80092d6:	6923      	ldr	r3, [r4, #16]
 80092d8:	462a      	mov	r2, r5
 80092da:	4639      	mov	r1, r7
 80092dc:	4630      	mov	r0, r6
 80092de:	47c0      	blx	r8
 80092e0:	3001      	adds	r0, #1
 80092e2:	d0a2      	beq.n	800922a <_printf_i+0x13a>
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	079b      	lsls	r3, r3, #30
 80092e8:	d507      	bpl.n	80092fa <_printf_i+0x20a>
 80092ea:	2500      	movs	r5, #0
 80092ec:	f104 0919 	add.w	r9, r4, #25
 80092f0:	68e3      	ldr	r3, [r4, #12]
 80092f2:	9a03      	ldr	r2, [sp, #12]
 80092f4:	1a9b      	subs	r3, r3, r2
 80092f6:	429d      	cmp	r5, r3
 80092f8:	db05      	blt.n	8009306 <_printf_i+0x216>
 80092fa:	68e0      	ldr	r0, [r4, #12]
 80092fc:	9b03      	ldr	r3, [sp, #12]
 80092fe:	4298      	cmp	r0, r3
 8009300:	bfb8      	it	lt
 8009302:	4618      	movlt	r0, r3
 8009304:	e793      	b.n	800922e <_printf_i+0x13e>
 8009306:	2301      	movs	r3, #1
 8009308:	464a      	mov	r2, r9
 800930a:	4639      	mov	r1, r7
 800930c:	4630      	mov	r0, r6
 800930e:	47c0      	blx	r8
 8009310:	3001      	adds	r0, #1
 8009312:	d08a      	beq.n	800922a <_printf_i+0x13a>
 8009314:	3501      	adds	r5, #1
 8009316:	e7eb      	b.n	80092f0 <_printf_i+0x200>
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1a7      	bne.n	800926c <_printf_i+0x17c>
 800931c:	780b      	ldrb	r3, [r1, #0]
 800931e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009322:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009326:	e765      	b.n	80091f4 <_printf_i+0x104>
 8009328:	0800a08c 	.word	0x0800a08c
 800932c:	0800a07b 	.word	0x0800a07b

08009330 <_sbrk_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4c06      	ldr	r4, [pc, #24]	; (800934c <_sbrk_r+0x1c>)
 8009334:	2300      	movs	r3, #0
 8009336:	4605      	mov	r5, r0
 8009338:	4608      	mov	r0, r1
 800933a:	6023      	str	r3, [r4, #0]
 800933c:	f7fe fe76 	bl	800802c <_sbrk>
 8009340:	1c43      	adds	r3, r0, #1
 8009342:	d102      	bne.n	800934a <_sbrk_r+0x1a>
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	b103      	cbz	r3, 800934a <_sbrk_r+0x1a>
 8009348:	602b      	str	r3, [r5, #0]
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	200149f4 	.word	0x200149f4

08009350 <siscanf>:
 8009350:	b40e      	push	{r1, r2, r3}
 8009352:	b530      	push	{r4, r5, lr}
 8009354:	b09c      	sub	sp, #112	; 0x70
 8009356:	ac1f      	add	r4, sp, #124	; 0x7c
 8009358:	f44f 7201 	mov.w	r2, #516	; 0x204
 800935c:	f854 5b04 	ldr.w	r5, [r4], #4
 8009360:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009364:	9002      	str	r0, [sp, #8]
 8009366:	9006      	str	r0, [sp, #24]
 8009368:	f7f6 ff32 	bl	80001d0 <strlen>
 800936c:	4b0b      	ldr	r3, [pc, #44]	; (800939c <siscanf+0x4c>)
 800936e:	9003      	str	r0, [sp, #12]
 8009370:	9007      	str	r0, [sp, #28]
 8009372:	930b      	str	r3, [sp, #44]	; 0x2c
 8009374:	480a      	ldr	r0, [pc, #40]	; (80093a0 <siscanf+0x50>)
 8009376:	9401      	str	r4, [sp, #4]
 8009378:	2300      	movs	r3, #0
 800937a:	930f      	str	r3, [sp, #60]	; 0x3c
 800937c:	9314      	str	r3, [sp, #80]	; 0x50
 800937e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009382:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009386:	462a      	mov	r2, r5
 8009388:	4623      	mov	r3, r4
 800938a:	a902      	add	r1, sp, #8
 800938c:	6800      	ldr	r0, [r0, #0]
 800938e:	f000 f95d 	bl	800964c <__ssvfiscanf_r>
 8009392:	b01c      	add	sp, #112	; 0x70
 8009394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009398:	b003      	add	sp, #12
 800939a:	4770      	bx	lr
 800939c:	080093a5 	.word	0x080093a5
 80093a0:	20000010 	.word	0x20000010

080093a4 <__seofread>:
 80093a4:	2000      	movs	r0, #0
 80093a6:	4770      	bx	lr

080093a8 <_strtoul_l.isra.0>:
 80093a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093ac:	4680      	mov	r8, r0
 80093ae:	4689      	mov	r9, r1
 80093b0:	4692      	mov	sl, r2
 80093b2:	461e      	mov	r6, r3
 80093b4:	460f      	mov	r7, r1
 80093b6:	463d      	mov	r5, r7
 80093b8:	9808      	ldr	r0, [sp, #32]
 80093ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093be:	f7ff fbf9 	bl	8008bb4 <__locale_ctype_ptr_l>
 80093c2:	4420      	add	r0, r4
 80093c4:	7843      	ldrb	r3, [r0, #1]
 80093c6:	f013 0308 	ands.w	r3, r3, #8
 80093ca:	d10a      	bne.n	80093e2 <_strtoul_l.isra.0+0x3a>
 80093cc:	2c2d      	cmp	r4, #45	; 0x2d
 80093ce:	d10a      	bne.n	80093e6 <_strtoul_l.isra.0+0x3e>
 80093d0:	782c      	ldrb	r4, [r5, #0]
 80093d2:	2301      	movs	r3, #1
 80093d4:	1cbd      	adds	r5, r7, #2
 80093d6:	b15e      	cbz	r6, 80093f0 <_strtoul_l.isra.0+0x48>
 80093d8:	2e10      	cmp	r6, #16
 80093da:	d113      	bne.n	8009404 <_strtoul_l.isra.0+0x5c>
 80093dc:	2c30      	cmp	r4, #48	; 0x30
 80093de:	d009      	beq.n	80093f4 <_strtoul_l.isra.0+0x4c>
 80093e0:	e010      	b.n	8009404 <_strtoul_l.isra.0+0x5c>
 80093e2:	462f      	mov	r7, r5
 80093e4:	e7e7      	b.n	80093b6 <_strtoul_l.isra.0+0xe>
 80093e6:	2c2b      	cmp	r4, #43	; 0x2b
 80093e8:	bf04      	itt	eq
 80093ea:	782c      	ldrbeq	r4, [r5, #0]
 80093ec:	1cbd      	addeq	r5, r7, #2
 80093ee:	e7f2      	b.n	80093d6 <_strtoul_l.isra.0+0x2e>
 80093f0:	2c30      	cmp	r4, #48	; 0x30
 80093f2:	d125      	bne.n	8009440 <_strtoul_l.isra.0+0x98>
 80093f4:	782a      	ldrb	r2, [r5, #0]
 80093f6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80093fa:	2a58      	cmp	r2, #88	; 0x58
 80093fc:	d14a      	bne.n	8009494 <_strtoul_l.isra.0+0xec>
 80093fe:	786c      	ldrb	r4, [r5, #1]
 8009400:	2610      	movs	r6, #16
 8009402:	3502      	adds	r5, #2
 8009404:	f04f 31ff 	mov.w	r1, #4294967295
 8009408:	2700      	movs	r7, #0
 800940a:	fbb1 f1f6 	udiv	r1, r1, r6
 800940e:	fb06 fe01 	mul.w	lr, r6, r1
 8009412:	ea6f 0e0e 	mvn.w	lr, lr
 8009416:	4638      	mov	r0, r7
 8009418:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800941c:	2a09      	cmp	r2, #9
 800941e:	d811      	bhi.n	8009444 <_strtoul_l.isra.0+0x9c>
 8009420:	4614      	mov	r4, r2
 8009422:	42a6      	cmp	r6, r4
 8009424:	dd1d      	ble.n	8009462 <_strtoul_l.isra.0+0xba>
 8009426:	2f00      	cmp	r7, #0
 8009428:	db18      	blt.n	800945c <_strtoul_l.isra.0+0xb4>
 800942a:	4281      	cmp	r1, r0
 800942c:	d316      	bcc.n	800945c <_strtoul_l.isra.0+0xb4>
 800942e:	d101      	bne.n	8009434 <_strtoul_l.isra.0+0x8c>
 8009430:	45a6      	cmp	lr, r4
 8009432:	db13      	blt.n	800945c <_strtoul_l.isra.0+0xb4>
 8009434:	fb00 4006 	mla	r0, r0, r6, r4
 8009438:	2701      	movs	r7, #1
 800943a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800943e:	e7eb      	b.n	8009418 <_strtoul_l.isra.0+0x70>
 8009440:	260a      	movs	r6, #10
 8009442:	e7df      	b.n	8009404 <_strtoul_l.isra.0+0x5c>
 8009444:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8009448:	2a19      	cmp	r2, #25
 800944a:	d801      	bhi.n	8009450 <_strtoul_l.isra.0+0xa8>
 800944c:	3c37      	subs	r4, #55	; 0x37
 800944e:	e7e8      	b.n	8009422 <_strtoul_l.isra.0+0x7a>
 8009450:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8009454:	2a19      	cmp	r2, #25
 8009456:	d804      	bhi.n	8009462 <_strtoul_l.isra.0+0xba>
 8009458:	3c57      	subs	r4, #87	; 0x57
 800945a:	e7e2      	b.n	8009422 <_strtoul_l.isra.0+0x7a>
 800945c:	f04f 37ff 	mov.w	r7, #4294967295
 8009460:	e7eb      	b.n	800943a <_strtoul_l.isra.0+0x92>
 8009462:	2f00      	cmp	r7, #0
 8009464:	da09      	bge.n	800947a <_strtoul_l.isra.0+0xd2>
 8009466:	2322      	movs	r3, #34	; 0x22
 8009468:	f8c8 3000 	str.w	r3, [r8]
 800946c:	f04f 30ff 	mov.w	r0, #4294967295
 8009470:	f1ba 0f00 	cmp.w	sl, #0
 8009474:	d107      	bne.n	8009486 <_strtoul_l.isra.0+0xde>
 8009476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800947a:	b103      	cbz	r3, 800947e <_strtoul_l.isra.0+0xd6>
 800947c:	4240      	negs	r0, r0
 800947e:	f1ba 0f00 	cmp.w	sl, #0
 8009482:	d00c      	beq.n	800949e <_strtoul_l.isra.0+0xf6>
 8009484:	b127      	cbz	r7, 8009490 <_strtoul_l.isra.0+0xe8>
 8009486:	3d01      	subs	r5, #1
 8009488:	f8ca 5000 	str.w	r5, [sl]
 800948c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009490:	464d      	mov	r5, r9
 8009492:	e7f9      	b.n	8009488 <_strtoul_l.isra.0+0xe0>
 8009494:	2430      	movs	r4, #48	; 0x30
 8009496:	2e00      	cmp	r6, #0
 8009498:	d1b4      	bne.n	8009404 <_strtoul_l.isra.0+0x5c>
 800949a:	2608      	movs	r6, #8
 800949c:	e7b2      	b.n	8009404 <_strtoul_l.isra.0+0x5c>
 800949e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080094a4 <_strtoul_r>:
 80094a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094a6:	4c06      	ldr	r4, [pc, #24]	; (80094c0 <_strtoul_r+0x1c>)
 80094a8:	4d06      	ldr	r5, [pc, #24]	; (80094c4 <_strtoul_r+0x20>)
 80094aa:	6824      	ldr	r4, [r4, #0]
 80094ac:	6a24      	ldr	r4, [r4, #32]
 80094ae:	2c00      	cmp	r4, #0
 80094b0:	bf08      	it	eq
 80094b2:	462c      	moveq	r4, r5
 80094b4:	9400      	str	r4, [sp, #0]
 80094b6:	f7ff ff77 	bl	80093a8 <_strtoul_l.isra.0>
 80094ba:	b003      	add	sp, #12
 80094bc:	bd30      	pop	{r4, r5, pc}
 80094be:	bf00      	nop
 80094c0:	20000010 	.word	0x20000010
 80094c4:	200000bc 	.word	0x200000bc

080094c8 <strtoul>:
 80094c8:	4b08      	ldr	r3, [pc, #32]	; (80094ec <strtoul+0x24>)
 80094ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094cc:	681c      	ldr	r4, [r3, #0]
 80094ce:	4d08      	ldr	r5, [pc, #32]	; (80094f0 <strtoul+0x28>)
 80094d0:	6a23      	ldr	r3, [r4, #32]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	bf08      	it	eq
 80094d6:	462b      	moveq	r3, r5
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	4613      	mov	r3, r2
 80094dc:	460a      	mov	r2, r1
 80094de:	4601      	mov	r1, r0
 80094e0:	4620      	mov	r0, r4
 80094e2:	f7ff ff61 	bl	80093a8 <_strtoul_l.isra.0>
 80094e6:	b003      	add	sp, #12
 80094e8:	bd30      	pop	{r4, r5, pc}
 80094ea:	bf00      	nop
 80094ec:	20000010 	.word	0x20000010
 80094f0:	200000bc 	.word	0x200000bc

080094f4 <__ascii_wctomb>:
 80094f4:	b149      	cbz	r1, 800950a <__ascii_wctomb+0x16>
 80094f6:	2aff      	cmp	r2, #255	; 0xff
 80094f8:	bf85      	ittet	hi
 80094fa:	238a      	movhi	r3, #138	; 0x8a
 80094fc:	6003      	strhi	r3, [r0, #0]
 80094fe:	700a      	strbls	r2, [r1, #0]
 8009500:	f04f 30ff 	movhi.w	r0, #4294967295
 8009504:	bf98      	it	ls
 8009506:	2001      	movls	r0, #1
 8009508:	4770      	bx	lr
 800950a:	4608      	mov	r0, r1
 800950c:	4770      	bx	lr

0800950e <__env_lock>:
 800950e:	4770      	bx	lr

08009510 <__env_unlock>:
 8009510:	4770      	bx	lr

08009512 <memmove>:
 8009512:	4288      	cmp	r0, r1
 8009514:	b510      	push	{r4, lr}
 8009516:	eb01 0302 	add.w	r3, r1, r2
 800951a:	d803      	bhi.n	8009524 <memmove+0x12>
 800951c:	1e42      	subs	r2, r0, #1
 800951e:	4299      	cmp	r1, r3
 8009520:	d10c      	bne.n	800953c <memmove+0x2a>
 8009522:	bd10      	pop	{r4, pc}
 8009524:	4298      	cmp	r0, r3
 8009526:	d2f9      	bcs.n	800951c <memmove+0xa>
 8009528:	1881      	adds	r1, r0, r2
 800952a:	1ad2      	subs	r2, r2, r3
 800952c:	42d3      	cmn	r3, r2
 800952e:	d100      	bne.n	8009532 <memmove+0x20>
 8009530:	bd10      	pop	{r4, pc}
 8009532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009536:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800953a:	e7f7      	b.n	800952c <memmove+0x1a>
 800953c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009540:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009544:	e7eb      	b.n	800951e <memmove+0xc>

08009546 <__malloc_lock>:
 8009546:	4770      	bx	lr

08009548 <__malloc_unlock>:
 8009548:	4770      	bx	lr

0800954a <_realloc_r>:
 800954a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954c:	4607      	mov	r7, r0
 800954e:	4614      	mov	r4, r2
 8009550:	460e      	mov	r6, r1
 8009552:	b921      	cbnz	r1, 800955e <_realloc_r+0x14>
 8009554:	4611      	mov	r1, r2
 8009556:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800955a:	f7ff bba5 	b.w	8008ca8 <_malloc_r>
 800955e:	b922      	cbnz	r2, 800956a <_realloc_r+0x20>
 8009560:	f7ff fb54 	bl	8008c0c <_free_r>
 8009564:	4625      	mov	r5, r4
 8009566:	4628      	mov	r0, r5
 8009568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800956a:	f000 fb86 	bl	8009c7a <_malloc_usable_size_r>
 800956e:	4284      	cmp	r4, r0
 8009570:	d90f      	bls.n	8009592 <_realloc_r+0x48>
 8009572:	4621      	mov	r1, r4
 8009574:	4638      	mov	r0, r7
 8009576:	f7ff fb97 	bl	8008ca8 <_malloc_r>
 800957a:	4605      	mov	r5, r0
 800957c:	2800      	cmp	r0, #0
 800957e:	d0f2      	beq.n	8009566 <_realloc_r+0x1c>
 8009580:	4631      	mov	r1, r6
 8009582:	4622      	mov	r2, r4
 8009584:	f7fe fedb 	bl	800833e <memcpy>
 8009588:	4631      	mov	r1, r6
 800958a:	4638      	mov	r0, r7
 800958c:	f7ff fb3e 	bl	8008c0c <_free_r>
 8009590:	e7e9      	b.n	8009566 <_realloc_r+0x1c>
 8009592:	4635      	mov	r5, r6
 8009594:	e7e7      	b.n	8009566 <_realloc_r+0x1c>

08009596 <_sungetc_r>:
 8009596:	b538      	push	{r3, r4, r5, lr}
 8009598:	1c4b      	adds	r3, r1, #1
 800959a:	4614      	mov	r4, r2
 800959c:	d103      	bne.n	80095a6 <_sungetc_r+0x10>
 800959e:	f04f 35ff 	mov.w	r5, #4294967295
 80095a2:	4628      	mov	r0, r5
 80095a4:	bd38      	pop	{r3, r4, r5, pc}
 80095a6:	8993      	ldrh	r3, [r2, #12]
 80095a8:	f023 0320 	bic.w	r3, r3, #32
 80095ac:	8193      	strh	r3, [r2, #12]
 80095ae:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80095b0:	6852      	ldr	r2, [r2, #4]
 80095b2:	b2cd      	uxtb	r5, r1
 80095b4:	b18b      	cbz	r3, 80095da <_sungetc_r+0x44>
 80095b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80095b8:	429a      	cmp	r2, r3
 80095ba:	da08      	bge.n	80095ce <_sungetc_r+0x38>
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	1e5a      	subs	r2, r3, #1
 80095c0:	6022      	str	r2, [r4, #0]
 80095c2:	f803 5c01 	strb.w	r5, [r3, #-1]
 80095c6:	6863      	ldr	r3, [r4, #4]
 80095c8:	3301      	adds	r3, #1
 80095ca:	6063      	str	r3, [r4, #4]
 80095cc:	e7e9      	b.n	80095a2 <_sungetc_r+0xc>
 80095ce:	4621      	mov	r1, r4
 80095d0:	f000 fb18 	bl	8009c04 <__submore>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d0f1      	beq.n	80095bc <_sungetc_r+0x26>
 80095d8:	e7e1      	b.n	800959e <_sungetc_r+0x8>
 80095da:	6921      	ldr	r1, [r4, #16]
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	b151      	cbz	r1, 80095f6 <_sungetc_r+0x60>
 80095e0:	4299      	cmp	r1, r3
 80095e2:	d208      	bcs.n	80095f6 <_sungetc_r+0x60>
 80095e4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80095e8:	428d      	cmp	r5, r1
 80095ea:	d104      	bne.n	80095f6 <_sungetc_r+0x60>
 80095ec:	3b01      	subs	r3, #1
 80095ee:	3201      	adds	r2, #1
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	6062      	str	r2, [r4, #4]
 80095f4:	e7d5      	b.n	80095a2 <_sungetc_r+0xc>
 80095f6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80095f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095fc:	6363      	str	r3, [r4, #52]	; 0x34
 80095fe:	2303      	movs	r3, #3
 8009600:	63a3      	str	r3, [r4, #56]	; 0x38
 8009602:	4623      	mov	r3, r4
 8009604:	6422      	str	r2, [r4, #64]	; 0x40
 8009606:	f803 5f46 	strb.w	r5, [r3, #70]!
 800960a:	6023      	str	r3, [r4, #0]
 800960c:	2301      	movs	r3, #1
 800960e:	e7dc      	b.n	80095ca <_sungetc_r+0x34>

08009610 <__ssrefill_r>:
 8009610:	b510      	push	{r4, lr}
 8009612:	460c      	mov	r4, r1
 8009614:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009616:	b169      	cbz	r1, 8009634 <__ssrefill_r+0x24>
 8009618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800961c:	4299      	cmp	r1, r3
 800961e:	d001      	beq.n	8009624 <__ssrefill_r+0x14>
 8009620:	f7ff faf4 	bl	8008c0c <_free_r>
 8009624:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009626:	6063      	str	r3, [r4, #4]
 8009628:	2000      	movs	r0, #0
 800962a:	6360      	str	r0, [r4, #52]	; 0x34
 800962c:	b113      	cbz	r3, 8009634 <__ssrefill_r+0x24>
 800962e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	bd10      	pop	{r4, pc}
 8009634:	6923      	ldr	r3, [r4, #16]
 8009636:	6023      	str	r3, [r4, #0]
 8009638:	2300      	movs	r3, #0
 800963a:	6063      	str	r3, [r4, #4]
 800963c:	89a3      	ldrh	r3, [r4, #12]
 800963e:	f043 0320 	orr.w	r3, r3, #32
 8009642:	81a3      	strh	r3, [r4, #12]
 8009644:	f04f 30ff 	mov.w	r0, #4294967295
 8009648:	bd10      	pop	{r4, pc}
	...

0800964c <__ssvfiscanf_r>:
 800964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009650:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8009654:	f10d 080c 	add.w	r8, sp, #12
 8009658:	9301      	str	r3, [sp, #4]
 800965a:	2300      	movs	r3, #0
 800965c:	9346      	str	r3, [sp, #280]	; 0x118
 800965e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009660:	4ba0      	ldr	r3, [pc, #640]	; (80098e4 <__ssvfiscanf_r+0x298>)
 8009662:	93a2      	str	r3, [sp, #648]	; 0x288
 8009664:	f8df 9284 	ldr.w	r9, [pc, #644]	; 80098ec <__ssvfiscanf_r+0x2a0>
 8009668:	4b9f      	ldr	r3, [pc, #636]	; (80098e8 <__ssvfiscanf_r+0x29c>)
 800966a:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800966e:	4606      	mov	r6, r0
 8009670:	460c      	mov	r4, r1
 8009672:	93a3      	str	r3, [sp, #652]	; 0x28c
 8009674:	4692      	mov	sl, r2
 8009676:	270a      	movs	r7, #10
 8009678:	f89a 3000 	ldrb.w	r3, [sl]
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 812f 	beq.w	80098e0 <__ssvfiscanf_r+0x294>
 8009682:	f7ff fa9b 	bl	8008bbc <__locale_ctype_ptr>
 8009686:	f89a b000 	ldrb.w	fp, [sl]
 800968a:	4458      	add	r0, fp
 800968c:	7843      	ldrb	r3, [r0, #1]
 800968e:	f013 0308 	ands.w	r3, r3, #8
 8009692:	d143      	bne.n	800971c <__ssvfiscanf_r+0xd0>
 8009694:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8009698:	f10a 0501 	add.w	r5, sl, #1
 800969c:	f040 8099 	bne.w	80097d2 <__ssvfiscanf_r+0x186>
 80096a0:	9345      	str	r3, [sp, #276]	; 0x114
 80096a2:	9343      	str	r3, [sp, #268]	; 0x10c
 80096a4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80096a8:	2b2a      	cmp	r3, #42	; 0x2a
 80096aa:	d103      	bne.n	80096b4 <__ssvfiscanf_r+0x68>
 80096ac:	2310      	movs	r3, #16
 80096ae:	9343      	str	r3, [sp, #268]	; 0x10c
 80096b0:	f10a 0502 	add.w	r5, sl, #2
 80096b4:	7829      	ldrb	r1, [r5, #0]
 80096b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80096ba:	2a09      	cmp	r2, #9
 80096bc:	46aa      	mov	sl, r5
 80096be:	f105 0501 	add.w	r5, r5, #1
 80096c2:	d941      	bls.n	8009748 <__ssvfiscanf_r+0xfc>
 80096c4:	2203      	movs	r2, #3
 80096c6:	4889      	ldr	r0, [pc, #548]	; (80098ec <__ssvfiscanf_r+0x2a0>)
 80096c8:	f7f6 fd9a 	bl	8000200 <memchr>
 80096cc:	b138      	cbz	r0, 80096de <__ssvfiscanf_r+0x92>
 80096ce:	eba0 0309 	sub.w	r3, r0, r9
 80096d2:	2001      	movs	r0, #1
 80096d4:	4098      	lsls	r0, r3
 80096d6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80096d8:	4318      	orrs	r0, r3
 80096da:	9043      	str	r0, [sp, #268]	; 0x10c
 80096dc:	46aa      	mov	sl, r5
 80096de:	f89a 3000 	ldrb.w	r3, [sl]
 80096e2:	2b67      	cmp	r3, #103	; 0x67
 80096e4:	f10a 0501 	add.w	r5, sl, #1
 80096e8:	d84a      	bhi.n	8009780 <__ssvfiscanf_r+0x134>
 80096ea:	2b65      	cmp	r3, #101	; 0x65
 80096ec:	f080 80b7 	bcs.w	800985e <__ssvfiscanf_r+0x212>
 80096f0:	2b47      	cmp	r3, #71	; 0x47
 80096f2:	d82f      	bhi.n	8009754 <__ssvfiscanf_r+0x108>
 80096f4:	2b45      	cmp	r3, #69	; 0x45
 80096f6:	f080 80b2 	bcs.w	800985e <__ssvfiscanf_r+0x212>
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 8082 	beq.w	8009804 <__ssvfiscanf_r+0x1b8>
 8009700:	2b25      	cmp	r3, #37	; 0x25
 8009702:	d066      	beq.n	80097d2 <__ssvfiscanf_r+0x186>
 8009704:	2303      	movs	r3, #3
 8009706:	9349      	str	r3, [sp, #292]	; 0x124
 8009708:	9744      	str	r7, [sp, #272]	; 0x110
 800970a:	e045      	b.n	8009798 <__ssvfiscanf_r+0x14c>
 800970c:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800970e:	3101      	adds	r1, #1
 8009710:	9147      	str	r1, [sp, #284]	; 0x11c
 8009712:	6861      	ldr	r1, [r4, #4]
 8009714:	3301      	adds	r3, #1
 8009716:	3901      	subs	r1, #1
 8009718:	6061      	str	r1, [r4, #4]
 800971a:	6023      	str	r3, [r4, #0]
 800971c:	6863      	ldr	r3, [r4, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	dd0b      	ble.n	800973a <__ssvfiscanf_r+0xee>
 8009722:	f7ff fa4b 	bl	8008bbc <__locale_ctype_ptr>
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	7819      	ldrb	r1, [r3, #0]
 800972a:	4408      	add	r0, r1
 800972c:	7841      	ldrb	r1, [r0, #1]
 800972e:	070d      	lsls	r5, r1, #28
 8009730:	d4ec      	bmi.n	800970c <__ssvfiscanf_r+0xc0>
 8009732:	f10a 0501 	add.w	r5, sl, #1
 8009736:	46aa      	mov	sl, r5
 8009738:	e79e      	b.n	8009678 <__ssvfiscanf_r+0x2c>
 800973a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800973c:	4621      	mov	r1, r4
 800973e:	4630      	mov	r0, r6
 8009740:	4798      	blx	r3
 8009742:	2800      	cmp	r0, #0
 8009744:	d0ed      	beq.n	8009722 <__ssvfiscanf_r+0xd6>
 8009746:	e7f4      	b.n	8009732 <__ssvfiscanf_r+0xe6>
 8009748:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800974a:	fb07 1303 	mla	r3, r7, r3, r1
 800974e:	3b30      	subs	r3, #48	; 0x30
 8009750:	9345      	str	r3, [sp, #276]	; 0x114
 8009752:	e7af      	b.n	80096b4 <__ssvfiscanf_r+0x68>
 8009754:	2b5b      	cmp	r3, #91	; 0x5b
 8009756:	d061      	beq.n	800981c <__ssvfiscanf_r+0x1d0>
 8009758:	d80c      	bhi.n	8009774 <__ssvfiscanf_r+0x128>
 800975a:	2b58      	cmp	r3, #88	; 0x58
 800975c:	d1d2      	bne.n	8009704 <__ssvfiscanf_r+0xb8>
 800975e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8009760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009764:	9243      	str	r2, [sp, #268]	; 0x10c
 8009766:	2210      	movs	r2, #16
 8009768:	9244      	str	r2, [sp, #272]	; 0x110
 800976a:	2b6f      	cmp	r3, #111	; 0x6f
 800976c:	bfb4      	ite	lt
 800976e:	2303      	movlt	r3, #3
 8009770:	2304      	movge	r3, #4
 8009772:	e010      	b.n	8009796 <__ssvfiscanf_r+0x14a>
 8009774:	2b63      	cmp	r3, #99	; 0x63
 8009776:	d05c      	beq.n	8009832 <__ssvfiscanf_r+0x1e6>
 8009778:	2b64      	cmp	r3, #100	; 0x64
 800977a:	d1c3      	bne.n	8009704 <__ssvfiscanf_r+0xb8>
 800977c:	9744      	str	r7, [sp, #272]	; 0x110
 800977e:	e7f4      	b.n	800976a <__ssvfiscanf_r+0x11e>
 8009780:	2b70      	cmp	r3, #112	; 0x70
 8009782:	d042      	beq.n	800980a <__ssvfiscanf_r+0x1be>
 8009784:	d81d      	bhi.n	80097c2 <__ssvfiscanf_r+0x176>
 8009786:	2b6e      	cmp	r3, #110	; 0x6e
 8009788:	d059      	beq.n	800983e <__ssvfiscanf_r+0x1f2>
 800978a:	d843      	bhi.n	8009814 <__ssvfiscanf_r+0x1c8>
 800978c:	2b69      	cmp	r3, #105	; 0x69
 800978e:	d1b9      	bne.n	8009704 <__ssvfiscanf_r+0xb8>
 8009790:	2300      	movs	r3, #0
 8009792:	9344      	str	r3, [sp, #272]	; 0x110
 8009794:	2303      	movs	r3, #3
 8009796:	9349      	str	r3, [sp, #292]	; 0x124
 8009798:	6863      	ldr	r3, [r4, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	dd61      	ble.n	8009862 <__ssvfiscanf_r+0x216>
 800979e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80097a0:	0659      	lsls	r1, r3, #25
 80097a2:	d56f      	bpl.n	8009884 <__ssvfiscanf_r+0x238>
 80097a4:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	dc7c      	bgt.n	80098a4 <__ssvfiscanf_r+0x258>
 80097aa:	ab01      	add	r3, sp, #4
 80097ac:	4622      	mov	r2, r4
 80097ae:	a943      	add	r1, sp, #268	; 0x10c
 80097b0:	4630      	mov	r0, r6
 80097b2:	f000 f89f 	bl	80098f4 <_scanf_chars>
 80097b6:	2801      	cmp	r0, #1
 80097b8:	f000 8092 	beq.w	80098e0 <__ssvfiscanf_r+0x294>
 80097bc:	2802      	cmp	r0, #2
 80097be:	d1ba      	bne.n	8009736 <__ssvfiscanf_r+0xea>
 80097c0:	e01d      	b.n	80097fe <__ssvfiscanf_r+0x1b2>
 80097c2:	2b75      	cmp	r3, #117	; 0x75
 80097c4:	d0da      	beq.n	800977c <__ssvfiscanf_r+0x130>
 80097c6:	2b78      	cmp	r3, #120	; 0x78
 80097c8:	d0c9      	beq.n	800975e <__ssvfiscanf_r+0x112>
 80097ca:	2b73      	cmp	r3, #115	; 0x73
 80097cc:	d19a      	bne.n	8009704 <__ssvfiscanf_r+0xb8>
 80097ce:	2302      	movs	r3, #2
 80097d0:	e7e1      	b.n	8009796 <__ssvfiscanf_r+0x14a>
 80097d2:	6863      	ldr	r3, [r4, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	dd0c      	ble.n	80097f2 <__ssvfiscanf_r+0x1a6>
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	781a      	ldrb	r2, [r3, #0]
 80097dc:	4593      	cmp	fp, r2
 80097de:	d17f      	bne.n	80098e0 <__ssvfiscanf_r+0x294>
 80097e0:	3301      	adds	r3, #1
 80097e2:	6862      	ldr	r2, [r4, #4]
 80097e4:	6023      	str	r3, [r4, #0]
 80097e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80097e8:	3a01      	subs	r2, #1
 80097ea:	3301      	adds	r3, #1
 80097ec:	6062      	str	r2, [r4, #4]
 80097ee:	9347      	str	r3, [sp, #284]	; 0x11c
 80097f0:	e7a1      	b.n	8009736 <__ssvfiscanf_r+0xea>
 80097f2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80097f4:	4621      	mov	r1, r4
 80097f6:	4630      	mov	r0, r6
 80097f8:	4798      	blx	r3
 80097fa:	2800      	cmp	r0, #0
 80097fc:	d0ec      	beq.n	80097d8 <__ssvfiscanf_r+0x18c>
 80097fe:	9846      	ldr	r0, [sp, #280]	; 0x118
 8009800:	2800      	cmp	r0, #0
 8009802:	d163      	bne.n	80098cc <__ssvfiscanf_r+0x280>
 8009804:	f04f 30ff 	mov.w	r0, #4294967295
 8009808:	e066      	b.n	80098d8 <__ssvfiscanf_r+0x28c>
 800980a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800980c:	f042 0220 	orr.w	r2, r2, #32
 8009810:	9243      	str	r2, [sp, #268]	; 0x10c
 8009812:	e7a4      	b.n	800975e <__ssvfiscanf_r+0x112>
 8009814:	2308      	movs	r3, #8
 8009816:	9344      	str	r3, [sp, #272]	; 0x110
 8009818:	2304      	movs	r3, #4
 800981a:	e7bc      	b.n	8009796 <__ssvfiscanf_r+0x14a>
 800981c:	4629      	mov	r1, r5
 800981e:	4640      	mov	r0, r8
 8009820:	f000 f9c0 	bl	8009ba4 <__sccl>
 8009824:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800982a:	9343      	str	r3, [sp, #268]	; 0x10c
 800982c:	4605      	mov	r5, r0
 800982e:	2301      	movs	r3, #1
 8009830:	e7b1      	b.n	8009796 <__ssvfiscanf_r+0x14a>
 8009832:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009838:	9343      	str	r3, [sp, #268]	; 0x10c
 800983a:	2300      	movs	r3, #0
 800983c:	e7ab      	b.n	8009796 <__ssvfiscanf_r+0x14a>
 800983e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8009840:	06d0      	lsls	r0, r2, #27
 8009842:	f53f af78 	bmi.w	8009736 <__ssvfiscanf_r+0xea>
 8009846:	f012 0f01 	tst.w	r2, #1
 800984a:	9a01      	ldr	r2, [sp, #4]
 800984c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800984e:	f102 0104 	add.w	r1, r2, #4
 8009852:	9101      	str	r1, [sp, #4]
 8009854:	6812      	ldr	r2, [r2, #0]
 8009856:	bf14      	ite	ne
 8009858:	8013      	strhne	r3, [r2, #0]
 800985a:	6013      	streq	r3, [r2, #0]
 800985c:	e76b      	b.n	8009736 <__ssvfiscanf_r+0xea>
 800985e:	2305      	movs	r3, #5
 8009860:	e799      	b.n	8009796 <__ssvfiscanf_r+0x14a>
 8009862:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009864:	4621      	mov	r1, r4
 8009866:	4630      	mov	r0, r6
 8009868:	4798      	blx	r3
 800986a:	2800      	cmp	r0, #0
 800986c:	d097      	beq.n	800979e <__ssvfiscanf_r+0x152>
 800986e:	e7c6      	b.n	80097fe <__ssvfiscanf_r+0x1b2>
 8009870:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8009872:	3201      	adds	r2, #1
 8009874:	9247      	str	r2, [sp, #284]	; 0x11c
 8009876:	6862      	ldr	r2, [r4, #4]
 8009878:	3a01      	subs	r2, #1
 800987a:	2a00      	cmp	r2, #0
 800987c:	6062      	str	r2, [r4, #4]
 800987e:	dd0a      	ble.n	8009896 <__ssvfiscanf_r+0x24a>
 8009880:	3301      	adds	r3, #1
 8009882:	6023      	str	r3, [r4, #0]
 8009884:	f7ff f99a 	bl	8008bbc <__locale_ctype_ptr>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	781a      	ldrb	r2, [r3, #0]
 800988c:	4410      	add	r0, r2
 800988e:	7842      	ldrb	r2, [r0, #1]
 8009890:	0712      	lsls	r2, r2, #28
 8009892:	d4ed      	bmi.n	8009870 <__ssvfiscanf_r+0x224>
 8009894:	e786      	b.n	80097a4 <__ssvfiscanf_r+0x158>
 8009896:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009898:	4621      	mov	r1, r4
 800989a:	4630      	mov	r0, r6
 800989c:	4798      	blx	r3
 800989e:	2800      	cmp	r0, #0
 80098a0:	d0f0      	beq.n	8009884 <__ssvfiscanf_r+0x238>
 80098a2:	e7ac      	b.n	80097fe <__ssvfiscanf_r+0x1b2>
 80098a4:	2b04      	cmp	r3, #4
 80098a6:	dc06      	bgt.n	80098b6 <__ssvfiscanf_r+0x26a>
 80098a8:	ab01      	add	r3, sp, #4
 80098aa:	4622      	mov	r2, r4
 80098ac:	a943      	add	r1, sp, #268	; 0x10c
 80098ae:	4630      	mov	r0, r6
 80098b0:	f000 f884 	bl	80099bc <_scanf_i>
 80098b4:	e77f      	b.n	80097b6 <__ssvfiscanf_r+0x16a>
 80098b6:	4b0e      	ldr	r3, [pc, #56]	; (80098f0 <__ssvfiscanf_r+0x2a4>)
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f43f af3c 	beq.w	8009736 <__ssvfiscanf_r+0xea>
 80098be:	ab01      	add	r3, sp, #4
 80098c0:	4622      	mov	r2, r4
 80098c2:	a943      	add	r1, sp, #268	; 0x10c
 80098c4:	4630      	mov	r0, r6
 80098c6:	f3af 8000 	nop.w
 80098ca:	e774      	b.n	80097b6 <__ssvfiscanf_r+0x16a>
 80098cc:	89a3      	ldrh	r3, [r4, #12]
 80098ce:	f013 0f40 	tst.w	r3, #64	; 0x40
 80098d2:	bf18      	it	ne
 80098d4:	f04f 30ff 	movne.w	r0, #4294967295
 80098d8:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 80098dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e0:	9846      	ldr	r0, [sp, #280]	; 0x118
 80098e2:	e7f9      	b.n	80098d8 <__ssvfiscanf_r+0x28c>
 80098e4:	08009597 	.word	0x08009597
 80098e8:	08009611 	.word	0x08009611
 80098ec:	0800a070 	.word	0x0800a070
 80098f0:	00000000 	.word	0x00000000

080098f4 <_scanf_chars>:
 80098f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f8:	4615      	mov	r5, r2
 80098fa:	688a      	ldr	r2, [r1, #8]
 80098fc:	4680      	mov	r8, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	b932      	cbnz	r2, 8009910 <_scanf_chars+0x1c>
 8009902:	698a      	ldr	r2, [r1, #24]
 8009904:	2a00      	cmp	r2, #0
 8009906:	bf0c      	ite	eq
 8009908:	2201      	moveq	r2, #1
 800990a:	f04f 32ff 	movne.w	r2, #4294967295
 800990e:	608a      	str	r2, [r1, #8]
 8009910:	6822      	ldr	r2, [r4, #0]
 8009912:	06d1      	lsls	r1, r2, #27
 8009914:	bf5f      	itttt	pl
 8009916:	681a      	ldrpl	r2, [r3, #0]
 8009918:	1d11      	addpl	r1, r2, #4
 800991a:	6019      	strpl	r1, [r3, #0]
 800991c:	6817      	ldrpl	r7, [r2, #0]
 800991e:	2600      	movs	r6, #0
 8009920:	69a3      	ldr	r3, [r4, #24]
 8009922:	b1db      	cbz	r3, 800995c <_scanf_chars+0x68>
 8009924:	2b01      	cmp	r3, #1
 8009926:	d107      	bne.n	8009938 <_scanf_chars+0x44>
 8009928:	682b      	ldr	r3, [r5, #0]
 800992a:	6962      	ldr	r2, [r4, #20]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	5cd3      	ldrb	r3, [r2, r3]
 8009930:	b9a3      	cbnz	r3, 800995c <_scanf_chars+0x68>
 8009932:	2e00      	cmp	r6, #0
 8009934:	d132      	bne.n	800999c <_scanf_chars+0xa8>
 8009936:	e006      	b.n	8009946 <_scanf_chars+0x52>
 8009938:	2b02      	cmp	r3, #2
 800993a:	d007      	beq.n	800994c <_scanf_chars+0x58>
 800993c:	2e00      	cmp	r6, #0
 800993e:	d12d      	bne.n	800999c <_scanf_chars+0xa8>
 8009940:	69a3      	ldr	r3, [r4, #24]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d12a      	bne.n	800999c <_scanf_chars+0xa8>
 8009946:	2001      	movs	r0, #1
 8009948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800994c:	f7ff f936 	bl	8008bbc <__locale_ctype_ptr>
 8009950:	682b      	ldr	r3, [r5, #0]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	4418      	add	r0, r3
 8009956:	7843      	ldrb	r3, [r0, #1]
 8009958:	071b      	lsls	r3, r3, #28
 800995a:	d4ef      	bmi.n	800993c <_scanf_chars+0x48>
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	06da      	lsls	r2, r3, #27
 8009960:	bf5e      	ittt	pl
 8009962:	682b      	ldrpl	r3, [r5, #0]
 8009964:	781b      	ldrbpl	r3, [r3, #0]
 8009966:	703b      	strbpl	r3, [r7, #0]
 8009968:	682a      	ldr	r2, [r5, #0]
 800996a:	686b      	ldr	r3, [r5, #4]
 800996c:	f102 0201 	add.w	r2, r2, #1
 8009970:	602a      	str	r2, [r5, #0]
 8009972:	68a2      	ldr	r2, [r4, #8]
 8009974:	f103 33ff 	add.w	r3, r3, #4294967295
 8009978:	f102 32ff 	add.w	r2, r2, #4294967295
 800997c:	606b      	str	r3, [r5, #4]
 800997e:	f106 0601 	add.w	r6, r6, #1
 8009982:	bf58      	it	pl
 8009984:	3701      	addpl	r7, #1
 8009986:	60a2      	str	r2, [r4, #8]
 8009988:	b142      	cbz	r2, 800999c <_scanf_chars+0xa8>
 800998a:	2b00      	cmp	r3, #0
 800998c:	dcc8      	bgt.n	8009920 <_scanf_chars+0x2c>
 800998e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009992:	4629      	mov	r1, r5
 8009994:	4640      	mov	r0, r8
 8009996:	4798      	blx	r3
 8009998:	2800      	cmp	r0, #0
 800999a:	d0c1      	beq.n	8009920 <_scanf_chars+0x2c>
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	f013 0310 	ands.w	r3, r3, #16
 80099a2:	d105      	bne.n	80099b0 <_scanf_chars+0xbc>
 80099a4:	68e2      	ldr	r2, [r4, #12]
 80099a6:	3201      	adds	r2, #1
 80099a8:	60e2      	str	r2, [r4, #12]
 80099aa:	69a2      	ldr	r2, [r4, #24]
 80099ac:	b102      	cbz	r2, 80099b0 <_scanf_chars+0xbc>
 80099ae:	703b      	strb	r3, [r7, #0]
 80099b0:	6923      	ldr	r3, [r4, #16]
 80099b2:	441e      	add	r6, r3
 80099b4:	6126      	str	r6, [r4, #16]
 80099b6:	2000      	movs	r0, #0
 80099b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080099bc <_scanf_i>:
 80099bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c0:	469a      	mov	sl, r3
 80099c2:	4b74      	ldr	r3, [pc, #464]	; (8009b94 <_scanf_i+0x1d8>)
 80099c4:	460c      	mov	r4, r1
 80099c6:	4683      	mov	fp, r0
 80099c8:	4616      	mov	r6, r2
 80099ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80099ce:	b087      	sub	sp, #28
 80099d0:	ab03      	add	r3, sp, #12
 80099d2:	68a7      	ldr	r7, [r4, #8]
 80099d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80099d8:	4b6f      	ldr	r3, [pc, #444]	; (8009b98 <_scanf_i+0x1dc>)
 80099da:	69a1      	ldr	r1, [r4, #24]
 80099dc:	4a6f      	ldr	r2, [pc, #444]	; (8009b9c <_scanf_i+0x1e0>)
 80099de:	2903      	cmp	r1, #3
 80099e0:	bf18      	it	ne
 80099e2:	461a      	movne	r2, r3
 80099e4:	1e7b      	subs	r3, r7, #1
 80099e6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80099ea:	bf84      	itt	hi
 80099ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80099f0:	60a3      	strhi	r3, [r4, #8]
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	9200      	str	r2, [sp, #0]
 80099f6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80099fa:	bf88      	it	hi
 80099fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009a00:	f104 091c 	add.w	r9, r4, #28
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	bf8c      	ite	hi
 8009a08:	197f      	addhi	r7, r7, r5
 8009a0a:	2700      	movls	r7, #0
 8009a0c:	464b      	mov	r3, r9
 8009a0e:	f04f 0800 	mov.w	r8, #0
 8009a12:	9301      	str	r3, [sp, #4]
 8009a14:	6831      	ldr	r1, [r6, #0]
 8009a16:	ab03      	add	r3, sp, #12
 8009a18:	2202      	movs	r2, #2
 8009a1a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009a1e:	7809      	ldrb	r1, [r1, #0]
 8009a20:	f7f6 fbee 	bl	8000200 <memchr>
 8009a24:	9b01      	ldr	r3, [sp, #4]
 8009a26:	b328      	cbz	r0, 8009a74 <_scanf_i+0xb8>
 8009a28:	f1b8 0f01 	cmp.w	r8, #1
 8009a2c:	d156      	bne.n	8009adc <_scanf_i+0x120>
 8009a2e:	6862      	ldr	r2, [r4, #4]
 8009a30:	b92a      	cbnz	r2, 8009a3e <_scanf_i+0x82>
 8009a32:	2208      	movs	r2, #8
 8009a34:	6062      	str	r2, [r4, #4]
 8009a36:	6822      	ldr	r2, [r4, #0]
 8009a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a3c:	6022      	str	r2, [r4, #0]
 8009a3e:	6822      	ldr	r2, [r4, #0]
 8009a40:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009a44:	6022      	str	r2, [r4, #0]
 8009a46:	68a2      	ldr	r2, [r4, #8]
 8009a48:	1e51      	subs	r1, r2, #1
 8009a4a:	60a1      	str	r1, [r4, #8]
 8009a4c:	b192      	cbz	r2, 8009a74 <_scanf_i+0xb8>
 8009a4e:	6832      	ldr	r2, [r6, #0]
 8009a50:	1c51      	adds	r1, r2, #1
 8009a52:	6031      	str	r1, [r6, #0]
 8009a54:	7812      	ldrb	r2, [r2, #0]
 8009a56:	701a      	strb	r2, [r3, #0]
 8009a58:	1c5d      	adds	r5, r3, #1
 8009a5a:	6873      	ldr	r3, [r6, #4]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	6073      	str	r3, [r6, #4]
 8009a62:	dc06      	bgt.n	8009a72 <_scanf_i+0xb6>
 8009a64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009a68:	4631      	mov	r1, r6
 8009a6a:	4658      	mov	r0, fp
 8009a6c:	4798      	blx	r3
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	d176      	bne.n	8009b60 <_scanf_i+0x1a4>
 8009a72:	462b      	mov	r3, r5
 8009a74:	f108 0801 	add.w	r8, r8, #1
 8009a78:	f1b8 0f03 	cmp.w	r8, #3
 8009a7c:	d1c9      	bne.n	8009a12 <_scanf_i+0x56>
 8009a7e:	6862      	ldr	r2, [r4, #4]
 8009a80:	b90a      	cbnz	r2, 8009a86 <_scanf_i+0xca>
 8009a82:	220a      	movs	r2, #10
 8009a84:	6062      	str	r2, [r4, #4]
 8009a86:	6862      	ldr	r2, [r4, #4]
 8009a88:	4945      	ldr	r1, [pc, #276]	; (8009ba0 <_scanf_i+0x1e4>)
 8009a8a:	6960      	ldr	r0, [r4, #20]
 8009a8c:	9301      	str	r3, [sp, #4]
 8009a8e:	1a89      	subs	r1, r1, r2
 8009a90:	f000 f888 	bl	8009ba4 <__sccl>
 8009a94:	9b01      	ldr	r3, [sp, #4]
 8009a96:	f04f 0800 	mov.w	r8, #0
 8009a9a:	461d      	mov	r5, r3
 8009a9c:	68a3      	ldr	r3, [r4, #8]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d038      	beq.n	8009b14 <_scanf_i+0x158>
 8009aa2:	6831      	ldr	r1, [r6, #0]
 8009aa4:	6960      	ldr	r0, [r4, #20]
 8009aa6:	780a      	ldrb	r2, [r1, #0]
 8009aa8:	5c80      	ldrb	r0, [r0, r2]
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	d032      	beq.n	8009b14 <_scanf_i+0x158>
 8009aae:	2a30      	cmp	r2, #48	; 0x30
 8009ab0:	6822      	ldr	r2, [r4, #0]
 8009ab2:	d121      	bne.n	8009af8 <_scanf_i+0x13c>
 8009ab4:	0510      	lsls	r0, r2, #20
 8009ab6:	d51f      	bpl.n	8009af8 <_scanf_i+0x13c>
 8009ab8:	f108 0801 	add.w	r8, r8, #1
 8009abc:	b117      	cbz	r7, 8009ac4 <_scanf_i+0x108>
 8009abe:	3301      	adds	r3, #1
 8009ac0:	3f01      	subs	r7, #1
 8009ac2:	60a3      	str	r3, [r4, #8]
 8009ac4:	6873      	ldr	r3, [r6, #4]
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	6073      	str	r3, [r6, #4]
 8009acc:	dd1b      	ble.n	8009b06 <_scanf_i+0x14a>
 8009ace:	6833      	ldr	r3, [r6, #0]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	6033      	str	r3, [r6, #0]
 8009ad4:	68a3      	ldr	r3, [r4, #8]
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	60a3      	str	r3, [r4, #8]
 8009ada:	e7df      	b.n	8009a9c <_scanf_i+0xe0>
 8009adc:	f1b8 0f02 	cmp.w	r8, #2
 8009ae0:	d1b1      	bne.n	8009a46 <_scanf_i+0x8a>
 8009ae2:	6822      	ldr	r2, [r4, #0]
 8009ae4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009ae8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009aec:	d1c2      	bne.n	8009a74 <_scanf_i+0xb8>
 8009aee:	2110      	movs	r1, #16
 8009af0:	6061      	str	r1, [r4, #4]
 8009af2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009af6:	e7a5      	b.n	8009a44 <_scanf_i+0x88>
 8009af8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009afc:	6022      	str	r2, [r4, #0]
 8009afe:	780b      	ldrb	r3, [r1, #0]
 8009b00:	702b      	strb	r3, [r5, #0]
 8009b02:	3501      	adds	r5, #1
 8009b04:	e7de      	b.n	8009ac4 <_scanf_i+0x108>
 8009b06:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009b0a:	4631      	mov	r1, r6
 8009b0c:	4658      	mov	r0, fp
 8009b0e:	4798      	blx	r3
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d0df      	beq.n	8009ad4 <_scanf_i+0x118>
 8009b14:	6823      	ldr	r3, [r4, #0]
 8009b16:	05d9      	lsls	r1, r3, #23
 8009b18:	d50c      	bpl.n	8009b34 <_scanf_i+0x178>
 8009b1a:	454d      	cmp	r5, r9
 8009b1c:	d908      	bls.n	8009b30 <_scanf_i+0x174>
 8009b1e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009b22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b26:	4632      	mov	r2, r6
 8009b28:	4658      	mov	r0, fp
 8009b2a:	4798      	blx	r3
 8009b2c:	1e6f      	subs	r7, r5, #1
 8009b2e:	463d      	mov	r5, r7
 8009b30:	454d      	cmp	r5, r9
 8009b32:	d02c      	beq.n	8009b8e <_scanf_i+0x1d2>
 8009b34:	6822      	ldr	r2, [r4, #0]
 8009b36:	f012 0210 	ands.w	r2, r2, #16
 8009b3a:	d11e      	bne.n	8009b7a <_scanf_i+0x1be>
 8009b3c:	702a      	strb	r2, [r5, #0]
 8009b3e:	6863      	ldr	r3, [r4, #4]
 8009b40:	9e00      	ldr	r6, [sp, #0]
 8009b42:	4649      	mov	r1, r9
 8009b44:	4658      	mov	r0, fp
 8009b46:	47b0      	blx	r6
 8009b48:	6822      	ldr	r2, [r4, #0]
 8009b4a:	f8da 3000 	ldr.w	r3, [sl]
 8009b4e:	f012 0f20 	tst.w	r2, #32
 8009b52:	d008      	beq.n	8009b66 <_scanf_i+0x1aa>
 8009b54:	1d1a      	adds	r2, r3, #4
 8009b56:	f8ca 2000 	str.w	r2, [sl]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	6018      	str	r0, [r3, #0]
 8009b5e:	e009      	b.n	8009b74 <_scanf_i+0x1b8>
 8009b60:	f04f 0800 	mov.w	r8, #0
 8009b64:	e7d6      	b.n	8009b14 <_scanf_i+0x158>
 8009b66:	07d2      	lsls	r2, r2, #31
 8009b68:	d5f4      	bpl.n	8009b54 <_scanf_i+0x198>
 8009b6a:	1d1a      	adds	r2, r3, #4
 8009b6c:	f8ca 2000 	str.w	r2, [sl]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	8018      	strh	r0, [r3, #0]
 8009b74:	68e3      	ldr	r3, [r4, #12]
 8009b76:	3301      	adds	r3, #1
 8009b78:	60e3      	str	r3, [r4, #12]
 8009b7a:	eba5 0509 	sub.w	r5, r5, r9
 8009b7e:	44a8      	add	r8, r5
 8009b80:	6925      	ldr	r5, [r4, #16]
 8009b82:	4445      	add	r5, r8
 8009b84:	6125      	str	r5, [r4, #16]
 8009b86:	2000      	movs	r0, #0
 8009b88:	b007      	add	sp, #28
 8009b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b8e:	2001      	movs	r0, #1
 8009b90:	e7fa      	b.n	8009b88 <_scanf_i+0x1cc>
 8009b92:	bf00      	nop
 8009b94:	08009f0c 	.word	0x08009f0c
 8009b98:	080094a5 	.word	0x080094a5
 8009b9c:	08008535 	.word	0x08008535
 8009ba0:	0800a1ae 	.word	0x0800a1ae

08009ba4 <__sccl>:
 8009ba4:	b570      	push	{r4, r5, r6, lr}
 8009ba6:	780b      	ldrb	r3, [r1, #0]
 8009ba8:	2b5e      	cmp	r3, #94	; 0x5e
 8009baa:	bf13      	iteet	ne
 8009bac:	1c4a      	addne	r2, r1, #1
 8009bae:	1c8a      	addeq	r2, r1, #2
 8009bb0:	784b      	ldrbeq	r3, [r1, #1]
 8009bb2:	2100      	movne	r1, #0
 8009bb4:	bf08      	it	eq
 8009bb6:	2101      	moveq	r1, #1
 8009bb8:	1e44      	subs	r4, r0, #1
 8009bba:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8009bbe:	f804 1f01 	strb.w	r1, [r4, #1]!
 8009bc2:	42a5      	cmp	r5, r4
 8009bc4:	d1fb      	bne.n	8009bbe <__sccl+0x1a>
 8009bc6:	b913      	cbnz	r3, 8009bce <__sccl+0x2a>
 8009bc8:	3a01      	subs	r2, #1
 8009bca:	4610      	mov	r0, r2
 8009bcc:	bd70      	pop	{r4, r5, r6, pc}
 8009bce:	f081 0401 	eor.w	r4, r1, #1
 8009bd2:	54c4      	strb	r4, [r0, r3]
 8009bd4:	4611      	mov	r1, r2
 8009bd6:	780d      	ldrb	r5, [r1, #0]
 8009bd8:	2d2d      	cmp	r5, #45	; 0x2d
 8009bda:	f101 0201 	add.w	r2, r1, #1
 8009bde:	d006      	beq.n	8009bee <__sccl+0x4a>
 8009be0:	2d5d      	cmp	r5, #93	; 0x5d
 8009be2:	d0f2      	beq.n	8009bca <__sccl+0x26>
 8009be4:	b90d      	cbnz	r5, 8009bea <__sccl+0x46>
 8009be6:	460a      	mov	r2, r1
 8009be8:	e7ef      	b.n	8009bca <__sccl+0x26>
 8009bea:	462b      	mov	r3, r5
 8009bec:	e7f1      	b.n	8009bd2 <__sccl+0x2e>
 8009bee:	784e      	ldrb	r6, [r1, #1]
 8009bf0:	2e5d      	cmp	r6, #93	; 0x5d
 8009bf2:	d0fa      	beq.n	8009bea <__sccl+0x46>
 8009bf4:	42b3      	cmp	r3, r6
 8009bf6:	dcf8      	bgt.n	8009bea <__sccl+0x46>
 8009bf8:	3102      	adds	r1, #2
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	429e      	cmp	r6, r3
 8009bfe:	54c4      	strb	r4, [r0, r3]
 8009c00:	dcfb      	bgt.n	8009bfa <__sccl+0x56>
 8009c02:	e7e8      	b.n	8009bd6 <__sccl+0x32>

08009c04 <__submore>:
 8009c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c08:	460c      	mov	r4, r1
 8009c0a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c10:	4299      	cmp	r1, r3
 8009c12:	d11e      	bne.n	8009c52 <__submore+0x4e>
 8009c14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009c18:	f7ff f846 	bl	8008ca8 <_malloc_r>
 8009c1c:	b918      	cbnz	r0, 8009c26 <__submore+0x22>
 8009c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c2a:	63a3      	str	r3, [r4, #56]	; 0x38
 8009c2c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009c30:	6360      	str	r0, [r4, #52]	; 0x34
 8009c32:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009c36:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009c3a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009c3e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009c42:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009c46:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009c4a:	6020      	str	r0, [r4, #0]
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c52:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009c54:	0077      	lsls	r7, r6, #1
 8009c56:	463a      	mov	r2, r7
 8009c58:	f7ff fc77 	bl	800954a <_realloc_r>
 8009c5c:	4605      	mov	r5, r0
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d0dd      	beq.n	8009c1e <__submore+0x1a>
 8009c62:	eb00 0806 	add.w	r8, r0, r6
 8009c66:	4601      	mov	r1, r0
 8009c68:	4632      	mov	r2, r6
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	f7fe fb67 	bl	800833e <memcpy>
 8009c70:	f8c4 8000 	str.w	r8, [r4]
 8009c74:	6365      	str	r5, [r4, #52]	; 0x34
 8009c76:	63a7      	str	r7, [r4, #56]	; 0x38
 8009c78:	e7e8      	b.n	8009c4c <__submore+0x48>

08009c7a <_malloc_usable_size_r>:
 8009c7a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	f1a0 0004 	sub.w	r0, r0, #4
 8009c84:	bfbc      	itt	lt
 8009c86:	580b      	ldrlt	r3, [r1, r0]
 8009c88:	18c0      	addlt	r0, r0, r3
 8009c8a:	4770      	bx	lr

08009c8c <_init>:
 8009c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8e:	bf00      	nop
 8009c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c92:	bc08      	pop	{r3}
 8009c94:	469e      	mov	lr, r3
 8009c96:	4770      	bx	lr

08009c98 <_fini>:
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9a:	bf00      	nop
 8009c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c9e:	bc08      	pop	{r3}
 8009ca0:	469e      	mov	lr, r3
 8009ca2:	4770      	bx	lr
