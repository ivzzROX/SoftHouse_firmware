
dip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800ad14  0800ad14  0001ad14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b2ec  0800b2ec  0001b2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b2f4  0800b2f4  0001b2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b2f8  0800b2f8  0001b2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000228  20000000  0800b2fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020228  2**0
                  CONTENTS
  8 .bss          000190d4  20000228  20000228  00020228  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200192fc  200192fc  00020228  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 11 .debug_info   00027f7f  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005b70  00000000  00000000  000481d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001c70  00000000  00000000  0004dd48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000019d8  00000000  00000000  0004f9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e87a  00000000  00000000  00051390  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000863f  00000000  00000000  0005fc0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00068249  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007fe8  00000000  00000000  000682c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800acfc 	.word	0x0800acfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	0800acfc 	.word	0x0800acfc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <t_trigger_update>:
#include "ino.h"

#include <stdio.h>

static uint8_t t_trigger_update(OP_ROOT* root, uint16_t root_n, T_TR* ttr, uint16_t state)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b087      	sub	sp, #28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	607a      	str	r2, [r7, #4]
 80005ba:	461a      	mov	r2, r3
 80005bc:	460b      	mov	r3, r1
 80005be:	817b      	strh	r3, [r7, #10]
 80005c0:	4613      	mov	r3, r2
 80005c2:	813b      	strh	r3, [r7, #8]
	if(ttr->root_id == -1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f993 3000 	ldrsb.w	r3, [r3]
 80005ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ce:	d114      	bne.n	80005fa <t_trigger_update+0x4a>
	{
		if(ttr->prev_root_value == 0
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	789b      	ldrb	r3, [r3, #2]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d109      	bne.n	80005ec <t_trigger_update+0x3c>
		&& state == 1)
 80005d8:	893b      	ldrh	r3, [r7, #8]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d106      	bne.n	80005ec <t_trigger_update+0x3c>
		{
			ttr->value ^= 1;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	785b      	ldrb	r3, [r3, #1]
 80005e2:	f083 0301 	eor.w	r3, r3, #1
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	705a      	strb	r2, [r3, #1]
		}
		ttr->prev_root_value = state;
 80005ec:	893b      	ldrh	r3, [r7, #8]
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	709a      	strb	r2, [r3, #2]
		return ttr->value;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	785b      	ldrb	r3, [r3, #1]
 80005f8:	e031      	b.n	800065e <t_trigger_update+0xae>
	}

	for(uint16_t i = 0; i < root_n; ++i)
 80005fa:	2300      	movs	r3, #0
 80005fc:	82fb      	strh	r3, [r7, #22]
 80005fe:	e029      	b.n	8000654 <t_trigger_update+0xa4>
	{
		if(root[i].id == ttr->root_id)
 8000600:	8afb      	ldrh	r3, [r7, #22]
 8000602:	011b      	lsls	r3, r3, #4
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	4413      	add	r3, r2
 8000608:	7adb      	ldrb	r3, [r3, #11]
 800060a:	461a      	mov	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f993 3000 	ldrsb.w	r3, [r3]
 8000612:	429a      	cmp	r2, r3
 8000614:	d11b      	bne.n	800064e <t_trigger_update+0x9e>
		{
			if(ttr->prev_root_value == 0
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	789b      	ldrb	r3, [r3, #2]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d10d      	bne.n	800063a <t_trigger_update+0x8a>
			&& root[i].result == 1)
 800061e:	8afb      	ldrh	r3, [r7, #22]
 8000620:	011b      	lsls	r3, r3, #4
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	4413      	add	r3, r2
 8000626:	7b1b      	ldrb	r3, [r3, #12]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d106      	bne.n	800063a <t_trigger_update+0x8a>
			{
				ttr->value ^= 1;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	785b      	ldrb	r3, [r3, #1]
 8000630:	f083 0301 	eor.w	r3, r3, #1
 8000634:	b2da      	uxtb	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	705a      	strb	r2, [r3, #1]
			}
			ttr->prev_root_value = root[i].result;
 800063a:	8afb      	ldrh	r3, [r7, #22]
 800063c:	011b      	lsls	r3, r3, #4
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	4413      	add	r3, r2
 8000642:	7b1a      	ldrb	r2, [r3, #12]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	709a      	strb	r2, [r3, #2]
			return ttr->value;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	e007      	b.n	800065e <t_trigger_update+0xae>
	for(uint16_t i = 0; i < root_n; ++i)
 800064e:	8afb      	ldrh	r3, [r7, #22]
 8000650:	3301      	adds	r3, #1
 8000652:	82fb      	strh	r3, [r7, #22]
 8000654:	8afa      	ldrh	r2, [r7, #22]
 8000656:	897b      	ldrh	r3, [r7, #10]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3d1      	bcc.n	8000600 <t_trigger_update+0x50>
		}
	}
	return 0;
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	371c      	adds	r7, #28
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <rs_trigger_update>:

static uint8_t rs_trigger_update(OP_ROOT* root, uint16_t root_n, RS_TR* rstr, uint16_t state)
{
 800066a:	b480      	push	{r7}
 800066c:	b087      	sub	sp, #28
 800066e:	af00      	add	r7, sp, #0
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	607a      	str	r2, [r7, #4]
 8000674:	461a      	mov	r2, r3
 8000676:	460b      	mov	r3, r1
 8000678:	817b      	strh	r3, [r7, #10]
 800067a:	4613      	mov	r3, r2
 800067c:	813b      	strh	r3, [r7, #8]
	uint8_t temp = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	75fb      	strb	r3, [r7, #23]
	for(uint16_t i = 0; i < root_n; ++i)
 8000682:	2300      	movs	r3, #0
 8000684:	82bb      	strh	r3, [r7, #20]
 8000686:	e04b      	b.n	8000720 <rs_trigger_update+0xb6>
	{
		temp = rstr->value;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	789b      	ldrb	r3, [r3, #2]
 800068c:	75fb      	strb	r3, [r7, #23]
		if(root[i].id == rstr->root_id_s)
 800068e:	8abb      	ldrh	r3, [r7, #20]
 8000690:	011b      	lsls	r3, r3, #4
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	4413      	add	r3, r2
 8000696:	7adb      	ldrb	r3, [r3, #11]
 8000698:	461a      	mov	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f993 3000 	ldrsb.w	r3, [r3]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d117      	bne.n	80006d4 <rs_trigger_update+0x6a>
		{
			if(rstr->prev_root_s_value == 0
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	78db      	ldrb	r3, [r3, #3]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d109      	bne.n	80006c0 <rs_trigger_update+0x56>
			&& root[i].result == 1)
 80006ac:	8abb      	ldrh	r3, [r7, #20]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	7b1b      	ldrb	r3, [r3, #12]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d102      	bne.n	80006c0 <rs_trigger_update+0x56>
			{
				rstr->value = 1;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2201      	movs	r2, #1
 80006be:	709a      	strb	r2, [r3, #2]
			}
			rstr->prev_root_s_value = root[i].result;
 80006c0:	8abb      	ldrh	r3, [r7, #20]
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	7b1a      	ldrb	r2, [r3, #12]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	70da      	strb	r2, [r3, #3]
			temp = rstr->value;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	789b      	ldrb	r3, [r3, #2]
 80006d2:	75fb      	strb	r3, [r7, #23]
		}
		if(root[i].id == rstr->root_id_r)
 80006d4:	8abb      	ldrh	r3, [r7, #20]
 80006d6:	011b      	lsls	r3, r3, #4
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	7adb      	ldrb	r3, [r3, #11]
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d117      	bne.n	800071a <rs_trigger_update+0xb0>
		{
			if(rstr->prev_root_r_value == 0
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d109      	bne.n	8000706 <rs_trigger_update+0x9c>
			&& root[i].result == 1)
 80006f2:	8abb      	ldrh	r3, [r7, #20]
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	4413      	add	r3, r2
 80006fa:	7b1b      	ldrb	r3, [r3, #12]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d102      	bne.n	8000706 <rs_trigger_update+0x9c>
			{
				rstr->value = 0;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	709a      	strb	r2, [r3, #2]
			}
			rstr->prev_root_r_value = root[i].result;
 8000706:	8abb      	ldrh	r3, [r7, #20]
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	4413      	add	r3, r2
 800070e:	7b1a      	ldrb	r2, [r3, #12]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	711a      	strb	r2, [r3, #4]
			temp = rstr->value;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	789b      	ldrb	r3, [r3, #2]
 8000718:	75fb      	strb	r3, [r7, #23]
	for(uint16_t i = 0; i < root_n; ++i)
 800071a:	8abb      	ldrh	r3, [r7, #20]
 800071c:	3301      	adds	r3, #1
 800071e:	82bb      	strh	r3, [r7, #20]
 8000720:	8aba      	ldrh	r2, [r7, #20]
 8000722:	897b      	ldrh	r3, [r7, #10]
 8000724:	429a      	cmp	r2, r3
 8000726:	d3af      	bcc.n	8000688 <rs_trigger_update+0x1e>
		}
	}
	return temp;
 8000728:	7dfb      	ldrb	r3, [r7, #23]
}
 800072a:	4618      	mov	r0, r3
 800072c:	371c      	adds	r7, #28
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <counter_update>:

static uint8_t counter_update(OP_ROOT* root, uint16_t root_n, CNTR* cntr, uint16_t value, uint16_t state)
{
 8000736:	b480      	push	{r7}
 8000738:	b087      	sub	sp, #28
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	607a      	str	r2, [r7, #4]
 8000740:	461a      	mov	r2, r3
 8000742:	460b      	mov	r3, r1
 8000744:	817b      	strh	r3, [r7, #10]
 8000746:	4613      	mov	r3, r2
 8000748:	813b      	strh	r3, [r7, #8]
	uint8_t temp = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	75fb      	strb	r3, [r7, #23]

	if( cntr->root_id == -1 )
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f993 3000 	ldrsb.w	r3, [r3]
 8000754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000758:	d126      	bne.n	80007a8 <counter_update+0x72>
	{
		if( cntr->prev_root_value == 0
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	791b      	ldrb	r3, [r3, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d11c      	bne.n	800079c <counter_update+0x66>
		&& state == 1 )
 8000762:	8c3b      	ldrh	r3, [r7, #32]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d119      	bne.n	800079c <counter_update+0x66>
		{
			cntr->value++;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	885b      	ldrh	r3, [r3, #2]
 800076c:	3301      	adds	r3, #1
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	805a      	strh	r2, [r3, #2]

			if( cntr->value ==  value )
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	885b      	ldrh	r3, [r3, #2]
 8000778:	893a      	ldrh	r2, [r7, #8]
 800077a:	429a      	cmp	r2, r3
 800077c:	d104      	bne.n	8000788 <counter_update+0x52>
			{
				cntr->value = 0;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	805a      	strh	r2, [r3, #2]
				temp = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	75fb      	strb	r3, [r7, #23]
			}

			if( cntr->value > value )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	885b      	ldrh	r3, [r3, #2]
 800078c:	893a      	ldrh	r2, [r7, #8]
 800078e:	429a      	cmp	r2, r3
 8000790:	d204      	bcs.n	800079c <counter_update+0x66>
			{
				cntr->value = 0;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2200      	movs	r2, #0
 8000796:	805a      	strh	r2, [r3, #2]
				temp = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	75fb      	strb	r3, [r7, #23]
			}
		}
		cntr->prev_root_value = state;
 800079c:	8c3b      	ldrh	r3, [r7, #32]
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	711a      	strb	r2, [r3, #4]
		return temp;
 80007a4:	7dfb      	ldrb	r3, [r7, #23]
 80007a6:	e043      	b.n	8000830 <counter_update+0xfa>
	}

	for(uint16_t i = 0; i < root_n; ++i)
 80007a8:	2300      	movs	r3, #0
 80007aa:	82bb      	strh	r3, [r7, #20]
 80007ac:	e03b      	b.n	8000826 <counter_update+0xf0>
	{
		if( cntr->root_id == root[i].id )
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f993 3000 	ldrsb.w	r3, [r3]
 80007b4:	4619      	mov	r1, r3
 80007b6:	8abb      	ldrh	r3, [r7, #20]
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	4413      	add	r3, r2
 80007be:	7adb      	ldrb	r3, [r3, #11]
 80007c0:	4299      	cmp	r1, r3
 80007c2:	d12d      	bne.n	8000820 <counter_update+0xea>
		{
			if( cntr->prev_root_value == 0
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	791b      	ldrb	r3, [r3, #4]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d120      	bne.n	800080e <counter_update+0xd8>
			&& root[i].result == 1 )
 80007cc:	8abb      	ldrh	r3, [r7, #20]
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	4413      	add	r3, r2
 80007d4:	7b1b      	ldrb	r3, [r3, #12]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d119      	bne.n	800080e <counter_update+0xd8>
			{
				cntr->value++;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	885b      	ldrh	r3, [r3, #2]
 80007de:	3301      	adds	r3, #1
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	805a      	strh	r2, [r3, #2]

				if( cntr->value ==  value )
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	885b      	ldrh	r3, [r3, #2]
 80007ea:	893a      	ldrh	r2, [r7, #8]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d104      	bne.n	80007fa <counter_update+0xc4>
				{
					cntr->value = 0;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	805a      	strh	r2, [r3, #2]
					temp = 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	75fb      	strb	r3, [r7, #23]
				}

				if( cntr->value > value )
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	885b      	ldrh	r3, [r3, #2]
 80007fe:	893a      	ldrh	r2, [r7, #8]
 8000800:	429a      	cmp	r2, r3
 8000802:	d204      	bcs.n	800080e <counter_update+0xd8>
				{
					cntr->value = 0;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	805a      	strh	r2, [r3, #2]
					temp = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	75fb      	strb	r3, [r7, #23]
				}
			}
			cntr->prev_root_value = root[i].result;
 800080e:	8abb      	ldrh	r3, [r7, #20]
 8000810:	011b      	lsls	r3, r3, #4
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	4413      	add	r3, r2
 8000816:	7b1a      	ldrb	r2, [r3, #12]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	711a      	strb	r2, [r3, #4]
			return temp;
 800081c:	7dfb      	ldrb	r3, [r7, #23]
 800081e:	e007      	b.n	8000830 <counter_update+0xfa>
	for(uint16_t i = 0; i < root_n; ++i)
 8000820:	8abb      	ldrh	r3, [r7, #20]
 8000822:	3301      	adds	r3, #1
 8000824:	82bb      	strh	r3, [r7, #20]
 8000826:	8aba      	ldrh	r2, [r7, #20]
 8000828:	897b      	ldrh	r3, [r7, #10]
 800082a:	429a      	cmp	r2, r3
 800082c:	d3bf      	bcc.n	80007ae <counter_update+0x78>
		}
	}

	return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	371c      	adds	r7, #28
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <delay_update>:

static uint8_t delay_update(OP_ROOT* root, uint16_t root_n, DL* delay, uint16_t state)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b090      	sub	sp, #64	; 0x40
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	817b      	strh	r3, [r7, #10]
 800084c:	4613      	mov	r3, r2
 800084e:	813b      	strh	r3, [r7, #8]
	uint8_t temp = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	time_t utime = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
	struct tm time;

	if( delay->root_id == -1 )
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f993 3000 	ldrsb.w	r3, [r3]
 8000860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000864:	d12e      	bne.n	80008c4 <delay_update+0x88>
	{
		get_cur_time(&time);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fd56 	bl	800231c <get_cur_time>
		utime = mktime(&time);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4618      	mov	r0, r3
 8000876:	f008 fc41 	bl	80090fc <mktime>
 800087a:	63b8      	str	r0, [r7, #56]	; 0x38

		if(delay->prev_root_value == 0
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7a1b      	ldrb	r3, [r3, #8]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d109      	bne.n	8000898 <delay_update+0x5c>
		&& state == 1)
 8000884:	893b      	ldrh	r3, [r7, #8]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d106      	bne.n	8000898 <delay_update+0x5c>
		{
			delay->finish_time = utime + delay->value;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	885b      	ldrh	r3, [r3, #2]
 800088e:	461a      	mov	r2, r3
 8000890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000892:	441a      	add	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	605a      	str	r2, [r3, #4]
		}

		if(utime >= delay->finish_time && delay->finish_time > 0)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800089e:	429a      	cmp	r2, r3
 80008a0:	dc09      	bgt.n	80008b6 <delay_update+0x7a>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	dd05      	ble.n	80008b6 <delay_update+0x7a>
		{
			temp = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			delay->finish_time = 0;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]
		}

		delay->prev_root_value = state;
 80008b6:	893b      	ldrh	r3, [r7, #8]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	721a      	strb	r2, [r3, #8]
		return temp;
 80008be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80008c2:	e04b      	b.n	800095c <delay_update+0x120>
	}

	for(uint16_t i = 0; i < root_n; ++i)
 80008c4:	2300      	movs	r3, #0
 80008c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80008c8:	e043      	b.n	8000952 <delay_update+0x116>
	{
		if( root[i].id == delay->root_id )
 80008ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	7adb      	ldrb	r3, [r3, #11]
 80008d4:	461a      	mov	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f993 3000 	ldrsb.w	r3, [r3]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d135      	bne.n	800094c <delay_update+0x110>
		{
			get_cur_time(&time);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fd19 	bl	800231c <get_cur_time>
			utime = mktime(&time);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4618      	mov	r0, r3
 80008f0:	f008 fc04 	bl	80090fc <mktime>
 80008f4:	63b8      	str	r0, [r7, #56]	; 0x38

			if(delay->prev_root_value == 0
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	7a1b      	ldrb	r3, [r3, #8]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10d      	bne.n	800091a <delay_update+0xde>
			&& root[i].result == 1)
 80008fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000900:	011b      	lsls	r3, r3, #4
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	4413      	add	r3, r2
 8000906:	7b1b      	ldrb	r3, [r3, #12]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d106      	bne.n	800091a <delay_update+0xde>
			{
				delay->finish_time = utime + delay->value;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	885b      	ldrh	r3, [r3, #2]
 8000910:	461a      	mov	r2, r3
 8000912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000914:	441a      	add	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	605a      	str	r2, [r3, #4]
			}

			if(utime >= delay->finish_time && delay->finish_time > 0)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000920:	429a      	cmp	r2, r3
 8000922:	dc09      	bgt.n	8000938 <delay_update+0xfc>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	2b00      	cmp	r3, #0
 800092a:	dd05      	ble.n	8000938 <delay_update+0xfc>
			{
				temp = 1;
 800092c:	2301      	movs	r3, #1
 800092e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				delay->finish_time = 0;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
			}

			delay->prev_root_value = root[i].result;
 8000938:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800093a:	011b      	lsls	r3, r3, #4
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	7b1a      	ldrb	r2, [r3, #12]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	721a      	strb	r2, [r3, #8]
			return temp;
 8000946:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800094a:	e007      	b.n	800095c <delay_update+0x120>
	for(uint16_t i = 0; i < root_n; ++i)
 800094c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800094e:	3301      	adds	r3, #1
 8000950:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000952:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000954:	897b      	ldrh	r3, [r7, #10]
 8000956:	429a      	cmp	r2, r3
 8000958:	d3b7      	bcc.n	80008ca <delay_update+0x8e>
		}
	}
	return 0;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3740      	adds	r7, #64	; 0x40
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <update_type_state>:

static uint8_t update_type_state(OP_ROOT* root, uint16_t root_n, uint16_t curr_root_n)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	807b      	strh	r3, [r7, #2]
 8000970:	4613      	mov	r3, r2
 8000972:	803b      	strh	r3, [r7, #0]
	for (uint16_t op = 0; op < root[curr_root_n].operation_n; ++op)
 8000974:	2300      	movs	r3, #0
 8000976:	81fb      	strh	r3, [r7, #14]
 8000978:	e03c      	b.n	80009f4 <update_type_state+0x90>
	{
		OP* op_arr = (OP*)root[curr_root_n].operation;
 800097a:	883b      	ldrh	r3, [r7, #0]
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	60bb      	str	r3, [r7, #8]
		if (op_arr[op].type == STATE)
 8000986:	89fa      	ldrh	r2, [r7, #14]
 8000988:	4613      	mov	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4413      	add	r3, r2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	461a      	mov	r2, r3
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	4413      	add	r3, r2
 8000996:	7c5b      	ldrb	r3, [r3, #17]
 8000998:	2b0b      	cmp	r3, #11
 800099a:	d128      	bne.n	80009ee <update_type_state+0x8a>
		{
			for (uint16_t n = 0; n < root_n; ++n)
 800099c:	2300      	movs	r3, #0
 800099e:	81bb      	strh	r3, [r7, #12]
 80009a0:	e021      	b.n	80009e6 <update_type_state+0x82>
			{
				if (op_arr[op].root_id == root[n].id)
 80009a2:	89fa      	ldrh	r2, [r7, #14]
 80009a4:	4613      	mov	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	461a      	mov	r2, r3
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	89bb      	ldrh	r3, [r7, #12]
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	440b      	add	r3, r1
 80009bc:	7adb      	ldrb	r3, [r3, #11]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d10e      	bne.n	80009e0 <update_type_state+0x7c>
				{
					op_arr[op].trigger_value = root[n].result;
 80009c2:	89fa      	ldrh	r2, [r7, #14]
 80009c4:	4613      	mov	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	461a      	mov	r2, r3
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	4413      	add	r3, r2
 80009d2:	89ba      	ldrh	r2, [r7, #12]
 80009d4:	0112      	lsls	r2, r2, #4
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	440a      	add	r2, r1
 80009da:	7b12      	ldrb	r2, [r2, #12]
 80009dc:	60da      	str	r2, [r3, #12]
					break;
 80009de:	e006      	b.n	80009ee <update_type_state+0x8a>
			for (uint16_t n = 0; n < root_n; ++n)
 80009e0:	89bb      	ldrh	r3, [r7, #12]
 80009e2:	3301      	adds	r3, #1
 80009e4:	81bb      	strh	r3, [r7, #12]
 80009e6:	89ba      	ldrh	r2, [r7, #12]
 80009e8:	887b      	ldrh	r3, [r7, #2]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d3d9      	bcc.n	80009a2 <update_type_state+0x3e>
	for (uint16_t op = 0; op < root[curr_root_n].operation_n; ++op)
 80009ee:	89fb      	ldrh	r3, [r7, #14]
 80009f0:	3301      	adds	r3, #1
 80009f2:	81fb      	strh	r3, [r7, #14]
 80009f4:	883b      	ldrh	r3, [r7, #0]
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	4413      	add	r3, r2
 80009fc:	889b      	ldrh	r3, [r3, #4]
 80009fe:	89fa      	ldrh	r2, [r7, #14]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d3ba      	bcc.n	800097a <update_type_state+0x16>
				}
			}
		}
	}
	return 1;
 8000a04:	2301      	movs	r3, #1
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <bit_proces>:

static uint8_t bit_proces(OP_ROOT* root, uint16_t root_n, uint16_t curr_root_n, uint16_t out)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af02      	add	r7, sp, #8
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	4608      	mov	r0, r1
 8000a1e:	4611      	mov	r1, r2
 8000a20:	461a      	mov	r2, r3
 8000a22:	4603      	mov	r3, r0
 8000a24:	817b      	strh	r3, [r7, #10]
 8000a26:	460b      	mov	r3, r1
 8000a28:	813b      	strh	r3, [r7, #8]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	80fb      	strh	r3, [r7, #6]
	OP* op_arr = root[curr_root_n].operation;
 8000a2e:	893b      	ldrh	r3, [r7, #8]
 8000a30:	011b      	lsls	r3, r3, #4
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	4413      	add	r3, r2
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	617b      	str	r3, [r7, #20]
	uint16_t op_n = root[curr_root_n].operation_n;
 8000a3a:	893b      	ldrh	r3, [r7, #8]
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	4413      	add	r3, r2
 8000a42:	889b      	ldrh	r3, [r3, #4]
 8000a44:	827b      	strh	r3, [r7, #18]

	if ( op_arr[0].log != FIRST) {
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	7c1b      	ldrb	r3, [r3, #16]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d001      	beq.n	8000a52 <bit_proces+0x3e>
		return 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e15f      	b.n	8000d12 <bit_proces+0x2fe>
	}

	uint16_t temp = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	83fb      	strh	r3, [r7, #30]
	uint16_t state = 0; //Sensor_CheckValue(op_arr[0].addr, op_arr[0].trigger_value);
 8000a56:	2300      	movs	r3, #0
 8000a58:	83bb      	strh	r3, [r7, #28]

	for (uint16_t i = 0; i < op_n; ++i) {
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	837b      	strh	r3, [r7, #26]
 8000a5e:	e151      	b.n	8000d04 <bit_proces+0x2f0>

		switch(op_arr[i].type) {
 8000a60:	8b7a      	ldrh	r2, [r7, #26]
 8000a62:	4613      	mov	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	4413      	add	r3, r2
 8000a70:	7c5b      	ldrb	r3, [r3, #17]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	2b0a      	cmp	r3, #10
 8000a76:	f200 80e6 	bhi.w	8000c46 <bit_proces+0x232>
 8000a7a:	a201      	add	r2, pc, #4	; (adr r2, 8000a80 <bit_proces+0x6c>)
 8000a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a80:	08000bf3 	.word	0x08000bf3
 8000a84:	08000aad 	.word	0x08000aad
 8000a88:	08000acb 	.word	0x08000acb
 8000a8c:	08000b2b 	.word	0x08000b2b
 8000a90:	08000aeb 	.word	0x08000aeb
 8000a94:	08000b0b 	.word	0x08000b0b
 8000a98:	08000baf 	.word	0x08000baf
 8000a9c:	08000bd1 	.word	0x08000bd1
 8000aa0:	08000b51 	.word	0x08000b51
 8000aa4:	08000b8d 	.word	0x08000b8d
 8000aa8:	08000c25 	.word	0x08000c25

		case TIME:
			temp = is_cur_time((TM*)op_arr[i].data);
 8000aac:	8b7a      	ldrh	r2, [r7, #26]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	4413      	add	r3, r2
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fc38 	bl	8002334 <is_cur_time>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	83fb      	strh	r3, [r7, #30]
			break;
 8000ac8:	e0c0      	b.n	8000c4c <bit_proces+0x238>

		case WEEK:
			temp = is_cur_day_of_week(op_arr[i].trigger_value);
 8000aca:	8b7a      	ldrh	r2, [r7, #26]
 8000acc:	4613      	mov	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	4413      	add	r3, r2
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fc66 	bl	80023b0 <is_cur_day_of_week>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	83fb      	strh	r3, [r7, #30]
			break;
 8000ae8:	e0b0      	b.n	8000c4c <bit_proces+0x238>

		case INO:
			temp = INO_GetValue(op_arr[i].trigger_value);
 8000aea:	8b7a      	ldrh	r2, [r7, #26]
 8000aec:	4613      	mov	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	461a      	mov	r2, r3
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	4413      	add	r3, r2
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f006 fa44 	bl	8006f8c <INO_GetValue>
 8000b04:	4603      	mov	r3, r0
 8000b06:	83fb      	strh	r3, [r7, #30]
			break;
 8000b08:	e0a0      	b.n	8000c4c <bit_proces+0x238>

		case WEB:
			temp = Telegram_GetValue(op_arr[i].trigger_value);
 8000b0a:	8b7a      	ldrh	r2, [r7, #26]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	461a      	mov	r2, r3
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	4413      	add	r3, r2
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 fbd8 	bl	80022d4 <Telegram_GetValue>
 8000b24:	4603      	mov	r3, r0
 8000b26:	83fb      	strh	r3, [r7, #30]
			break;
 8000b28:	e090      	b.n	8000c4c <bit_proces+0x238>

		case PMO:
			temp = out & (1 << op_arr[i].trigger_value);
 8000b2a:	8b7a      	ldrh	r2, [r7, #26]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	461a      	mov	r2, r3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	4413      	add	r3, r2
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	83fb      	strh	r3, [r7, #30]
			break;
 8000b4e:	e07d      	b.n	8000c4c <bit_proces+0x238>

		case COUNTER:
			temp = counter_update(root, root_n, (CNTR*)op_arr[i].data, op_arr[i].trigger_value, state);
 8000b50:	8b7a      	ldrh	r2, [r7, #26]
 8000b52:	4613      	mov	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	4413      	add	r3, r2
 8000b60:	6898      	ldr	r0, [r3, #8]
 8000b62:	8b7a      	ldrh	r2, [r7, #26]
 8000b64:	4613      	mov	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	4413      	add	r3, r2
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	8979      	ldrh	r1, [r7, #10]
 8000b78:	8bbb      	ldrh	r3, [r7, #28]
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	4602      	mov	r2, r0
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f7ff fdd8 	bl	8000736 <counter_update>
 8000b86:	4603      	mov	r3, r0
 8000b88:	83fb      	strh	r3, [r7, #30]
			break;
 8000b8a:	e05f      	b.n	8000c4c <bit_proces+0x238>

		case DELAY:
			temp = delay_update(root, root_n, (DL*)op_arr[i].data, state);
 8000b8c:	8b7a      	ldrh	r2, [r7, #26]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	461a      	mov	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	8bbb      	ldrh	r3, [r7, #28]
 8000ba0:	8979      	ldrh	r1, [r7, #10]
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f7ff fe4a 	bl	800083c <delay_update>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	83fb      	strh	r3, [r7, #30]
			break;
 8000bac:	e04e      	b.n	8000c4c <bit_proces+0x238>

		case T_TRIGGER:
			temp = t_trigger_update(root, root_n, (T_TR*)op_arr[i].data, state);
 8000bae:	8b7a      	ldrh	r2, [r7, #26]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	461a      	mov	r2, r3
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	689a      	ldr	r2, [r3, #8]
 8000bc0:	8bbb      	ldrh	r3, [r7, #28]
 8000bc2:	8979      	ldrh	r1, [r7, #10]
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f7ff fcf3 	bl	80005b0 <t_trigger_update>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	83fb      	strh	r3, [r7, #30]
			break;
 8000bce:	e03d      	b.n	8000c4c <bit_proces+0x238>

		case RS_TRIGGER:
			temp = rs_trigger_update(root, root_n, (RS_TR*)op_arr[i].data, state);
 8000bd0:	8b7a      	ldrh	r2, [r7, #26]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	461a      	mov	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	4413      	add	r3, r2
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	8bbb      	ldrh	r3, [r7, #28]
 8000be4:	8979      	ldrh	r1, [r7, #10]
 8000be6:	68f8      	ldr	r0, [r7, #12]
 8000be8:	f7ff fd3f 	bl	800066a <rs_trigger_update>
 8000bec:	4603      	mov	r3, r0
 8000bee:	83fb      	strh	r3, [r7, #30]
			break;
 8000bf0:	e02c      	b.n	8000c4c <bit_proces+0x238>

		case SENSOR:
			temp = Sensor_CheckValue(op_arr[i].addr, op_arr[i].trigger_value);
 8000bf2:	8b7a      	ldrh	r2, [r7, #26]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	4413      	add	r3, r2
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	b298      	uxth	r0, r3
 8000c06:	8b7a      	ldrh	r2, [r7, #26]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	461a      	mov	r2, r3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	4413      	add	r3, r2
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f006 fd81 	bl	8007720 <Sensor_CheckValue>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	83fb      	strh	r3, [r7, #30]
			break;
 8000c22:	e013      	b.n	8000c4c <bit_proces+0x238>

		case STATE:
			update_type_state(root, root_n, curr_root_n);
 8000c24:	893a      	ldrh	r2, [r7, #8]
 8000c26:	897b      	ldrh	r3, [r7, #10]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f7ff fe9a 	bl	8000964 <update_type_state>
			temp = op_arr[i].trigger_value;
 8000c30:	8b7a      	ldrh	r2, [r7, #26]
 8000c32:	4613      	mov	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	4413      	add	r3, r2
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	83fb      	strh	r3, [r7, #30]
			break;
 8000c44:	e002      	b.n	8000c4c <bit_proces+0x238>

		default:
			temp = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	83fb      	strh	r3, [r7, #30]
			break;
 8000c4a:	bf00      	nop
		}

		if(i == 0) {
 8000c4c:	8b7b      	ldrh	r3, [r7, #26]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <bit_proces+0x244>
			state = temp;
 8000c52:	8bfb      	ldrh	r3, [r7, #30]
 8000c54:	83bb      	strh	r3, [r7, #28]
			continue;
 8000c56:	e052      	b.n	8000cfe <bit_proces+0x2ea>
		}

		//OPETATIONS
		switch (op_arr[i].log)
 8000c58:	8b7a      	ldrh	r2, [r7, #26]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	461a      	mov	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	4413      	add	r3, r2
 8000c68:	7c1b      	ldrb	r3, [r3, #16]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	2b07      	cmp	r3, #7
 8000c6e:	d845      	bhi.n	8000cfc <bit_proces+0x2e8>
 8000c70:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <bit_proces+0x264>)
 8000c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c76:	bf00      	nop
 8000c78:	08000c99 	.word	0x08000c99
 8000c7c:	08000c9f 	.word	0x08000c9f
 8000c80:	08000ca9 	.word	0x08000ca9
 8000c84:	08000cb3 	.word	0x08000cb3
 8000c88:	08000cbd 	.word	0x08000cbd
 8000c8c:	08000ccf 	.word	0x08000ccf
 8000c90:	08000ce1 	.word	0x08000ce1
 8000c94:	08000cf3 	.word	0x08000cf3
		{
		case FIRST:
			state = temp;
 8000c98:	8bfb      	ldrh	r3, [r7, #30]
 8000c9a:	83bb      	strh	r3, [r7, #28]
			break;
 8000c9c:	e02f      	b.n	8000cfe <bit_proces+0x2ea>

		case OR:
			state |= temp;
 8000c9e:	8bba      	ldrh	r2, [r7, #28]
 8000ca0:	8bfb      	ldrh	r3, [r7, #30]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	83bb      	strh	r3, [r7, #28]
			break;
 8000ca6:	e02a      	b.n	8000cfe <bit_proces+0x2ea>

		case AND:
			state &= temp;
 8000ca8:	8bba      	ldrh	r2, [r7, #28]
 8000caa:	8bfb      	ldrh	r3, [r7, #30]
 8000cac:	4013      	ands	r3, r2
 8000cae:	83bb      	strh	r3, [r7, #28]
			break;
 8000cb0:	e025      	b.n	8000cfe <bit_proces+0x2ea>

		case XOR:
			state ^= temp;
 8000cb2:	8bba      	ldrh	r2, [r7, #28]
 8000cb4:	8bfb      	ldrh	r3, [r7, #30]
 8000cb6:	4053      	eors	r3, r2
 8000cb8:	83bb      	strh	r3, [r7, #28]
			break;
 8000cba:	e020      	b.n	8000cfe <bit_proces+0x2ea>

		case NOR:
			state |= temp;
 8000cbc:	8bba      	ldrh	r2, [r7, #28]
 8000cbe:	8bfb      	ldrh	r3, [r7, #30]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	83bb      	strh	r3, [r7, #28]
			state ^= 1;
 8000cc4:	8bbb      	ldrh	r3, [r7, #28]
 8000cc6:	f083 0301 	eor.w	r3, r3, #1
 8000cca:	83bb      	strh	r3, [r7, #28]
			break;
 8000ccc:	e017      	b.n	8000cfe <bit_proces+0x2ea>

		case NAND:
			state &= temp;
 8000cce:	8bba      	ldrh	r2, [r7, #28]
 8000cd0:	8bfb      	ldrh	r3, [r7, #30]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	83bb      	strh	r3, [r7, #28]
			state ^= 1;
 8000cd6:	8bbb      	ldrh	r3, [r7, #28]
 8000cd8:	f083 0301 	eor.w	r3, r3, #1
 8000cdc:	83bb      	strh	r3, [r7, #28]
			break;
 8000cde:	e00e      	b.n	8000cfe <bit_proces+0x2ea>

		case XNOR:
			state ^= temp;
 8000ce0:	8bba      	ldrh	r2, [r7, #28]
 8000ce2:	8bfb      	ldrh	r3, [r7, #30]
 8000ce4:	4053      	eors	r3, r2
 8000ce6:	83bb      	strh	r3, [r7, #28]
			state ^= 1;
 8000ce8:	8bbb      	ldrh	r3, [r7, #28]
 8000cea:	f083 0301 	eor.w	r3, r3, #1
 8000cee:	83bb      	strh	r3, [r7, #28]
			break;
 8000cf0:	e005      	b.n	8000cfe <bit_proces+0x2ea>

		case NOT:
			state ^= 1;
 8000cf2:	8bbb      	ldrh	r3, [r7, #28]
 8000cf4:	f083 0301 	eor.w	r3, r3, #1
 8000cf8:	83bb      	strh	r3, [r7, #28]
			break;
 8000cfa:	e000      	b.n	8000cfe <bit_proces+0x2ea>

		default:
			break;
 8000cfc:	bf00      	nop
	for (uint16_t i = 0; i < op_n; ++i) {
 8000cfe:	8b7b      	ldrh	r3, [r7, #26]
 8000d00:	3301      	adds	r3, #1
 8000d02:	837b      	strh	r3, [r7, #26]
 8000d04:	8b7a      	ldrh	r2, [r7, #26]
 8000d06:	8a7b      	ldrh	r3, [r7, #18]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	f4ff aea9 	bcc.w	8000a60 <bit_proces+0x4c>
		}

	}
	return state;
 8000d0e:	8bbb      	ldrh	r3, [r7, #28]
 8000d10:	b2db      	uxtb	r3, r3
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3720      	adds	r7, #32
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop

08000d1c <start_bit_engine>:

uint8_t start_bit_engine(OP_ROOT* root, uint16_t root_n, uint16_t out)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	803b      	strh	r3, [r7, #0]
	if (root == NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <start_bit_engine+0x1a>
	{
		return 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e017      	b.n	8000d66 <start_bit_engine+0x4a>
	}

	for (int32_t i = 0; i < root_n; ++i)
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	e00f      	b.n	8000d5c <start_bit_engine+0x40>
	{
		root[i].result = bit_proces(root, root_n, i, out);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	18d4      	adds	r4, r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	883b      	ldrh	r3, [r7, #0]
 8000d4a:	8879      	ldrh	r1, [r7, #2]
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff fe61 	bl	8000a14 <bit_proces>
 8000d52:	4603      	mov	r3, r0
 8000d54:	7323      	strb	r3, [r4, #12]
	for (int32_t i = 0; i < root_n; ++i)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	887a      	ldrh	r2, [r7, #2]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dceb      	bgt.n	8000d3c <start_bit_engine+0x20>
	}

	return 1;
 8000d64:	2301      	movs	r3, #1
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd90      	pop	{r4, r7, pc}

08000d6e <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8000d6e:	b480      	push	{r7}
 8000d70:	b087      	sub	sp, #28
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d301      	bcc.n	8000d88 <jsmn_alloc_token+0x1a>
    return NULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	e014      	b.n	8000db2 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	1c59      	adds	r1, r3, #1
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	6051      	str	r1, [r2, #4]
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	4413      	add	r3, r2
 8000d98:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8000db0:	697b      	ldr	r3, [r7, #20]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	371c      	adds	r7, #28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8000dbe:	b480      	push	{r7}
 8000dc0:	b085      	sub	sp, #20
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	7afa      	ldrb	r2, [r7, #11]
 8000dd2:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	605a      	str	r2, [r3, #4]
  token->end = end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	60f8      	str	r0, [r7, #12]
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000e06:	e034      	b.n	8000e72 <jsmn_parse_primitive+0x80>
    switch (js[parser->pos]) {
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	4413      	add	r3, r2
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b20      	cmp	r3, #32
 8000e14:	d03a      	beq.n	8000e8c <jsmn_parse_primitive+0x9a>
 8000e16:	2b20      	cmp	r3, #32
 8000e18:	dc06      	bgt.n	8000e28 <jsmn_parse_primitive+0x36>
 8000e1a:	2b09      	cmp	r3, #9
 8000e1c:	db0f      	blt.n	8000e3e <jsmn_parse_primitive+0x4c>
 8000e1e:	2b0a      	cmp	r3, #10
 8000e20:	dd34      	ble.n	8000e8c <jsmn_parse_primitive+0x9a>
 8000e22:	2b0d      	cmp	r3, #13
 8000e24:	d032      	beq.n	8000e8c <jsmn_parse_primitive+0x9a>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8000e26:	e00a      	b.n	8000e3e <jsmn_parse_primitive+0x4c>
    switch (js[parser->pos]) {
 8000e28:	2b3a      	cmp	r3, #58	; 0x3a
 8000e2a:	d02f      	beq.n	8000e8c <jsmn_parse_primitive+0x9a>
 8000e2c:	2b3a      	cmp	r3, #58	; 0x3a
 8000e2e:	dc02      	bgt.n	8000e36 <jsmn_parse_primitive+0x44>
 8000e30:	2b2c      	cmp	r3, #44	; 0x2c
 8000e32:	d02b      	beq.n	8000e8c <jsmn_parse_primitive+0x9a>
      break;
 8000e34:	e003      	b.n	8000e3e <jsmn_parse_primitive+0x4c>
    switch (js[parser->pos]) {
 8000e36:	2b5d      	cmp	r3, #93	; 0x5d
 8000e38:	d028      	beq.n	8000e8c <jsmn_parse_primitive+0x9a>
 8000e3a:	2b7d      	cmp	r3, #125	; 0x7d
 8000e3c:	d026      	beq.n	8000e8c <jsmn_parse_primitive+0x9a>
      break;
 8000e3e:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	4413      	add	r3, r2
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b1f      	cmp	r3, #31
 8000e4c:	d906      	bls.n	8000e5c <jsmn_parse_primitive+0x6a>
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	4413      	add	r3, r2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b7e      	cmp	r3, #126	; 0x7e
 8000e5a:	d905      	bls.n	8000e68 <jsmn_parse_primitive+0x76>
      parser->pos = start;
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8000e62:	f06f 0301 	mvn.w	r3, #1
 8000e66:	e038      	b.n	8000eda <jsmn_parse_primitive+0xe8>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d208      	bcs.n	8000e8e <jsmn_parse_primitive+0x9c>
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68ba      	ldr	r2, [r7, #8]
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1be      	bne.n	8000e08 <jsmn_parse_primitive+0x16>
 8000e8a:	e000      	b.n	8000e8e <jsmn_parse_primitive+0x9c>
      goto found;
 8000e8c:	bf00      	nop
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
  if (tokens == NULL) {
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d106      	bne.n	8000ea2 <jsmn_parse_primitive+0xb0>
    parser->pos--;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	1e5a      	subs	r2, r3, #1
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	601a      	str	r2, [r3, #0]
    return 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e01b      	b.n	8000eda <jsmn_parse_primitive+0xe8>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000ea2:	6a3a      	ldr	r2, [r7, #32]
 8000ea4:	6839      	ldr	r1, [r7, #0]
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f7ff ff61 	bl	8000d6e <jsmn_alloc_token>
 8000eac:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d105      	bne.n	8000ec0 <jsmn_parse_primitive+0xce>
    parser->pos = start;
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	e00c      	b.n	8000eda <jsmn_parse_primitive+0xe8>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	6938      	ldr	r0, [r7, #16]
 8000eca:	f7ff ff78 	bl	8000dbe <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	1e5a      	subs	r2, r3, #1
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	601a      	str	r2, [r3, #0]
  return 0;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	61bb      	str	r3, [r7, #24]

  parser->pos++;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	601a      	str	r2, [r3, #0]

  /* Skip starting quote */
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000f02:	e14c      	b.n	800119e <jsmn_parse_string+0x2ba>
    char c = js[parser->pos];
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	2b22      	cmp	r3, #34	; 0x22
 8000f14:	d11d      	bne.n	8000f52 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <jsmn_parse_string+0x3c>
        return 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e150      	b.n	80011c2 <jsmn_parse_string+0x2de>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f22:	6839      	ldr	r1, [r7, #0]
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f7ff ff22 	bl	8000d6e <jsmn_alloc_token>
 8000f2a:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d105      	bne.n	8000f3e <jsmn_parse_string+0x5a>
        parser->pos = start;
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	e141      	b.n	80011c2 <jsmn_parse_string+0x2de>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2103      	movs	r1, #3
 8000f48:	6938      	ldr	r0, [r7, #16]
 8000f4a:	f7ff ff38 	bl	8000dbe <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e137      	b.n	80011c2 <jsmn_parse_string+0x2de>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8000f52:	7dfb      	ldrb	r3, [r7, #23]
 8000f54:	2b5c      	cmp	r3, #92	; 0x5c
 8000f56:	f040 811d 	bne.w	8001194 <jsmn_parse_string+0x2b0>
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	f080 8116 	bcs.w	8001194 <jsmn_parse_string+0x2b0>
      int i;
      parser->pos++;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	3b22      	subs	r3, #34	; 0x22
 8000f7e:	2b53      	cmp	r3, #83	; 0x53
 8000f80:	f200 8101 	bhi.w	8001186 <jsmn_parse_string+0x2a2>
 8000f84:	a201      	add	r2, pc, #4	; (adr r2, 8000f8c <jsmn_parse_string+0xa8>)
 8000f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8a:	bf00      	nop
 8000f8c:	08001193 	.word	0x08001193
 8000f90:	08001187 	.word	0x08001187
 8000f94:	08001187 	.word	0x08001187
 8000f98:	08001187 	.word	0x08001187
 8000f9c:	08001187 	.word	0x08001187
 8000fa0:	08001187 	.word	0x08001187
 8000fa4:	08001187 	.word	0x08001187
 8000fa8:	08001187 	.word	0x08001187
 8000fac:	08001187 	.word	0x08001187
 8000fb0:	08001187 	.word	0x08001187
 8000fb4:	08001187 	.word	0x08001187
 8000fb8:	08001187 	.word	0x08001187
 8000fbc:	08001187 	.word	0x08001187
 8000fc0:	08001193 	.word	0x08001193
 8000fc4:	08001187 	.word	0x08001187
 8000fc8:	08001187 	.word	0x08001187
 8000fcc:	08001187 	.word	0x08001187
 8000fd0:	08001187 	.word	0x08001187
 8000fd4:	08001187 	.word	0x08001187
 8000fd8:	08001187 	.word	0x08001187
 8000fdc:	08001187 	.word	0x08001187
 8000fe0:	08001187 	.word	0x08001187
 8000fe4:	08001187 	.word	0x08001187
 8000fe8:	08001187 	.word	0x08001187
 8000fec:	08001187 	.word	0x08001187
 8000ff0:	08001187 	.word	0x08001187
 8000ff4:	08001187 	.word	0x08001187
 8000ff8:	08001187 	.word	0x08001187
 8000ffc:	08001187 	.word	0x08001187
 8001000:	08001187 	.word	0x08001187
 8001004:	08001187 	.word	0x08001187
 8001008:	08001187 	.word	0x08001187
 800100c:	08001187 	.word	0x08001187
 8001010:	08001187 	.word	0x08001187
 8001014:	08001187 	.word	0x08001187
 8001018:	08001187 	.word	0x08001187
 800101c:	08001187 	.word	0x08001187
 8001020:	08001187 	.word	0x08001187
 8001024:	08001187 	.word	0x08001187
 8001028:	08001187 	.word	0x08001187
 800102c:	08001187 	.word	0x08001187
 8001030:	08001187 	.word	0x08001187
 8001034:	08001187 	.word	0x08001187
 8001038:	08001187 	.word	0x08001187
 800103c:	08001187 	.word	0x08001187
 8001040:	08001187 	.word	0x08001187
 8001044:	08001187 	.word	0x08001187
 8001048:	08001187 	.word	0x08001187
 800104c:	08001187 	.word	0x08001187
 8001050:	08001187 	.word	0x08001187
 8001054:	08001187 	.word	0x08001187
 8001058:	08001187 	.word	0x08001187
 800105c:	08001187 	.word	0x08001187
 8001060:	08001187 	.word	0x08001187
 8001064:	08001187 	.word	0x08001187
 8001068:	08001187 	.word	0x08001187
 800106c:	08001187 	.word	0x08001187
 8001070:	08001187 	.word	0x08001187
 8001074:	08001193 	.word	0x08001193
 8001078:	08001187 	.word	0x08001187
 800107c:	08001187 	.word	0x08001187
 8001080:	08001187 	.word	0x08001187
 8001084:	08001187 	.word	0x08001187
 8001088:	08001187 	.word	0x08001187
 800108c:	08001193 	.word	0x08001193
 8001090:	08001187 	.word	0x08001187
 8001094:	08001187 	.word	0x08001187
 8001098:	08001187 	.word	0x08001187
 800109c:	08001193 	.word	0x08001193
 80010a0:	08001187 	.word	0x08001187
 80010a4:	08001187 	.word	0x08001187
 80010a8:	08001187 	.word	0x08001187
 80010ac:	08001187 	.word	0x08001187
 80010b0:	08001187 	.word	0x08001187
 80010b4:	08001187 	.word	0x08001187
 80010b8:	08001187 	.word	0x08001187
 80010bc:	08001193 	.word	0x08001193
 80010c0:	08001187 	.word	0x08001187
 80010c4:	08001187 	.word	0x08001187
 80010c8:	08001187 	.word	0x08001187
 80010cc:	08001193 	.word	0x08001193
 80010d0:	08001187 	.word	0x08001187
 80010d4:	08001193 	.word	0x08001193
 80010d8:	080010dd 	.word	0x080010dd
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	e037      	b.n	800115c <jsmn_parse_string+0x278>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	4413      	add	r3, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b2f      	cmp	r3, #47	; 0x2f
 80010f8:	d906      	bls.n	8001108 <jsmn_parse_string+0x224>
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b39      	cmp	r3, #57	; 0x39
 8001106:	d921      	bls.n	800114c <jsmn_parse_string+0x268>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	4413      	add	r3, r2
 8001110:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001112:	2b40      	cmp	r3, #64	; 0x40
 8001114:	d906      	bls.n	8001124 <jsmn_parse_string+0x240>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b46      	cmp	r3, #70	; 0x46
 8001122:	d913      	bls.n	800114c <jsmn_parse_string+0x268>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 800112e:	2b60      	cmp	r3, #96	; 0x60
 8001130:	d906      	bls.n	8001140 <jsmn_parse_string+0x25c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b66      	cmp	r3, #102	; 0x66
 800113e:	d905      	bls.n	800114c <jsmn_parse_string+0x268>
            parser->pos = start;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8001146:	f06f 0301 	mvn.w	r3, #1
 800114a:	e03a      	b.n	80011c2 <jsmn_parse_string+0x2de>
          }
          parser->pos++;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	601a      	str	r2, [r3, #0]
             i++) {
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b03      	cmp	r3, #3
 8001160:	dc0b      	bgt.n	800117a <jsmn_parse_string+0x296>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	429a      	cmp	r2, r3
 800116a:	d206      	bcs.n	800117a <jsmn_parse_string+0x296>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1b8      	bne.n	80010ec <jsmn_parse_string+0x208>
        }
        parser->pos--;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	1e5a      	subs	r2, r3, #1
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	601a      	str	r2, [r3, #0]
        break;
 8001184:	e006      	b.n	8001194 <jsmn_parse_string+0x2b0>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 800118c:	f06f 0301 	mvn.w	r3, #1
 8001190:	e017      	b.n	80011c2 <jsmn_parse_string+0x2de>
        break;
 8001192:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <jsmn_parse_string+0x2d4>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f47f aea6 	bne.w	8000f04 <jsmn_parse_string+0x20>
      }
    }
  }
  parser->pos = start;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 80011be:	f06f 0302 	mvn.w	r3, #2
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop

080011cc <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	; 0x30
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80011e0:	e15f      	b.n	80014a2 <jsmn_parse+0x2d6>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 80011ee:	7ffb      	ldrb	r3, [r7, #31]
 80011f0:	2b2c      	cmp	r3, #44	; 0x2c
 80011f2:	f000 80dd 	beq.w	80013b0 <jsmn_parse+0x1e4>
 80011f6:	2b2c      	cmp	r3, #44	; 0x2c
 80011f8:	dc10      	bgt.n	800121c <jsmn_parse+0x50>
 80011fa:	2b0d      	cmp	r3, #13
 80011fc:	f000 8141 	beq.w	8001482 <jsmn_parse+0x2b6>
 8001200:	2b0d      	cmp	r3, #13
 8001202:	dc04      	bgt.n	800120e <jsmn_parse+0x42>
 8001204:	3b09      	subs	r3, #9
 8001206:	2b01      	cmp	r3, #1
 8001208:	f200 8119 	bhi.w	800143e <jsmn_parse+0x272>
      break;
    case '\t':
    case '\r':
    case '\n':
    case ' ':
      break;
 800120c:	e139      	b.n	8001482 <jsmn_parse+0x2b6>
    switch (c) {
 800120e:	2b20      	cmp	r3, #32
 8001210:	f000 8137 	beq.w	8001482 <jsmn_parse+0x2b6>
 8001214:	2b22      	cmp	r3, #34	; 0x22
 8001216:	f000 80a1 	beq.w	800135c <jsmn_parse+0x190>
 800121a:	e110      	b.n	800143e <jsmn_parse+0x272>
 800121c:	2b5d      	cmp	r3, #93	; 0x5d
 800121e:	d043      	beq.n	80012a8 <jsmn_parse+0xdc>
 8001220:	2b5d      	cmp	r3, #93	; 0x5d
 8001222:	dc05      	bgt.n	8001230 <jsmn_parse+0x64>
 8001224:	2b3a      	cmp	r3, #58	; 0x3a
 8001226:	f000 80bc 	beq.w	80013a2 <jsmn_parse+0x1d6>
 800122a:	2b5b      	cmp	r3, #91	; 0x5b
 800122c:	d005      	beq.n	800123a <jsmn_parse+0x6e>
 800122e:	e106      	b.n	800143e <jsmn_parse+0x272>
 8001230:	2b7b      	cmp	r3, #123	; 0x7b
 8001232:	d002      	beq.n	800123a <jsmn_parse+0x6e>
 8001234:	2b7d      	cmp	r3, #125	; 0x7d
 8001236:	d037      	beq.n	80012a8 <jsmn_parse+0xdc>
 8001238:	e101      	b.n	800143e <jsmn_parse+0x272>
      count++;
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	3301      	adds	r3, #1
 800123e:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 811f 	beq.w	8001486 <jsmn_parse+0x2ba>
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800124a:	6839      	ldr	r1, [r7, #0]
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f7ff fd8e 	bl	8000d6e <jsmn_alloc_token>
 8001252:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d102      	bne.n	8001260 <jsmn_parse+0x94>
        return JSMN_ERROR_NOMEM;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e14f      	b.n	8001500 <jsmn_parse+0x334>
      if (parser->toksuper != -1) {
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d00a      	beq.n	8001280 <jsmn_parse+0xb4>
        jsmntok_t *t = &tokens[parser->toksuper];
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	4413      	add	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        t->size++;
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	60da      	str	r2, [r3, #12]
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8001280:	7ffb      	ldrb	r3, [r7, #31]
 8001282:	2b7b      	cmp	r3, #123	; 0x7b
 8001284:	d101      	bne.n	800128a <jsmn_parse+0xbe>
 8001286:	2201      	movs	r2, #1
 8001288:	e000      	b.n	800128c <jsmn_parse+0xc0>
 800128a:	2202      	movs	r2, #2
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	461a      	mov	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	609a      	str	r2, [r3, #8]
      break;
 80012a6:	e0f7      	b.n	8001498 <jsmn_parse+0x2cc>
      if (tokens == NULL) {
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80ed 	beq.w	800148a <jsmn_parse+0x2be>
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80012b0:	7ffb      	ldrb	r3, [r7, #31]
 80012b2:	2b7d      	cmp	r3, #125	; 0x7d
 80012b4:	d101      	bne.n	80012ba <jsmn_parse+0xee>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <jsmn_parse+0xf0>
 80012ba:	2302      	movs	r3, #2
 80012bc:	77bb      	strb	r3, [r7, #30]
      for (i = parser->toknext - 1; i >= 0; i--) {
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
 80012c6:	e024      	b.n	8001312 <jsmn_parse+0x146>
        token = &tokens[i];
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012da:	d017      	beq.n	800130c <jsmn_parse+0x140>
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d112      	bne.n	800130c <jsmn_parse+0x140>
          if (token->type != type) {
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	7fba      	ldrb	r2, [r7, #30]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d002      	beq.n	80012f6 <jsmn_parse+0x12a>
            return JSMN_ERROR_INVAL;
 80012f0:	f06f 0301 	mvn.w	r3, #1
 80012f4:	e104      	b.n	8001500 <jsmn_parse+0x334>
          parser->toksuper = -1;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	461a      	mov	r2, r3
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	609a      	str	r2, [r3, #8]
          break;
 800130a:	e005      	b.n	8001318 <jsmn_parse+0x14c>
      for (i = parser->toknext - 1; i >= 0; i--) {
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	3b01      	subs	r3, #1
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	2b00      	cmp	r3, #0
 8001316:	dad7      	bge.n	80012c8 <jsmn_parse+0xfc>
      if (i == -1) {
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131e:	d119      	bne.n	8001354 <jsmn_parse+0x188>
        return JSMN_ERROR_INVAL;
 8001320:	f06f 0301 	mvn.w	r3, #1
 8001324:	e0ec      	b.n	8001500 <jsmn_parse+0x334>
        token = &tokens[i];
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	4413      	add	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d009      	beq.n	800134e <jsmn_parse+0x182>
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001342:	d104      	bne.n	800134e <jsmn_parse+0x182>
          parser->toksuper = i;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001348:	609a      	str	r2, [r3, #8]
          break;
 800134a:	bf00      	nop
      break;
 800134c:	e0a4      	b.n	8001498 <jsmn_parse+0x2cc>
      for (; i >= 0; i--) {
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	3b01      	subs	r3, #1
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	2b00      	cmp	r3, #0
 8001358:	dae5      	bge.n	8001326 <jsmn_parse+0x15a>
      break;
 800135a:	e09d      	b.n	8001498 <jsmn_parse+0x2cc>
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 800135c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f7ff fdbc 	bl	8000ee4 <jsmn_parse_string>
 800136c:	6178      	str	r0, [r7, #20]
      if (r < 0) {
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2b00      	cmp	r3, #0
 8001372:	da01      	bge.n	8001378 <jsmn_parse+0x1ac>
        return r;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	e0c3      	b.n	8001500 <jsmn_parse+0x334>
      count++;
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	3301      	adds	r3, #1
 800137c:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001386:	f000 8082 	beq.w	800148e <jsmn_parse+0x2c2>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d07e      	beq.n	800148e <jsmn_parse+0x2c2>
        tokens[parser->toksuper].size++;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	4413      	add	r3, r2
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	3201      	adds	r2, #1
 800139e:	60da      	str	r2, [r3, #12]
      break;
 80013a0:	e075      	b.n	800148e <jsmn_parse+0x2c2>
    case ':':
      parser->toksuper = parser->toknext - 1;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	461a      	mov	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	609a      	str	r2, [r3, #8]
      break;
 80013ae:	e073      	b.n	8001498 <jsmn_parse+0x2cc>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d06d      	beq.n	8001492 <jsmn_parse+0x2c6>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013be:	d068      	beq.n	8001492 <jsmn_parse+0x2c6>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d060      	beq.n	8001492 <jsmn_parse+0x2c6>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d058      	beq.n	8001492 <jsmn_parse+0x2c6>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
 80013e8:	e025      	b.n	8001436 <jsmn_parse+0x26a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d006      	beq.n	8001406 <jsmn_parse+0x23a>
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d114      	bne.n	8001430 <jsmn_parse+0x264>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	4413      	add	r3, r2
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d00c      	beq.n	8001430 <jsmn_parse+0x264>
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	4413      	add	r3, r2
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001424:	d104      	bne.n	8001430 <jsmn_parse+0x264>
              parser->toksuper = i;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142a:	609a      	str	r2, [r3, #8]
              break;
 800142c:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 800142e:	e030      	b.n	8001492 <jsmn_parse+0x2c6>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	3b01      	subs	r3, #1
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	2b00      	cmp	r3, #0
 800143a:	dad6      	bge.n	80013ea <jsmn_parse+0x21e>
      break;
 800143c:	e029      	b.n	8001492 <jsmn_parse+0x2c6>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 800143e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	68b9      	ldr	r1, [r7, #8]
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f7ff fcd2 	bl	8000df2 <jsmn_parse_primitive>
 800144e:	6178      	str	r0, [r7, #20]
      if (r < 0) {
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2b00      	cmp	r3, #0
 8001454:	da01      	bge.n	800145a <jsmn_parse+0x28e>
        return r;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	e052      	b.n	8001500 <jsmn_parse+0x334>
      }
      count++;
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	3301      	adds	r3, #1
 800145e:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d015      	beq.n	8001496 <jsmn_parse+0x2ca>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d012      	beq.n	8001496 <jsmn_parse+0x2ca>
        tokens[parser->toksuper].size++;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	4413      	add	r3, r2
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	3201      	adds	r2, #1
 800147e:	60da      	str	r2, [r3, #12]
      }
      break;
 8001480:	e009      	b.n	8001496 <jsmn_parse+0x2ca>
      break;
 8001482:	bf00      	nop
 8001484:	e008      	b.n	8001498 <jsmn_parse+0x2cc>
        break;
 8001486:	bf00      	nop
 8001488:	e006      	b.n	8001498 <jsmn_parse+0x2cc>
        break;
 800148a:	bf00      	nop
 800148c:	e004      	b.n	8001498 <jsmn_parse+0x2cc>
      break;
 800148e:	bf00      	nop
 8001490:	e002      	b.n	8001498 <jsmn_parse+0x2cc>
      break;
 8001492:	bf00      	nop
 8001494:	e000      	b.n	8001498 <jsmn_parse+0x2cc>
      break;
 8001496:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d207      	bcs.n	80014bc <jsmn_parse+0x2f0>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	4413      	add	r3, r2
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f47f ae93 	bne.w	80011e2 <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d01d      	beq.n	80014fe <jsmn_parse+0x332>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ca:	e015      	b.n	80014f8 <jsmn_parse+0x32c>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014da:	d00a      	beq.n	80014f2 <jsmn_parse+0x326>
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ea:	d102      	bne.n	80014f2 <jsmn_parse+0x326>
        return JSMN_ERROR_PART;
 80014ec:	f06f 0302 	mvn.w	r3, #2
 80014f0:	e006      	b.n	8001500 <jsmn_parse+0x334>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	3b01      	subs	r3, #1
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	dae6      	bge.n	80014cc <jsmn_parse+0x300>
      }
    }
  }

  return count;
 80014fe:	6a3b      	ldr	r3, [r7, #32]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3728      	adds	r7, #40	; 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f04f 32ff 	mov.w	r2, #4294967295
 8001522:	609a      	str	r2, [r3, #8]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <jsoneq>:

#include <string.h>
#include <stdlib.h>
#include <ctype.h>

static int jsoneq(const char* json, jsmntok_t* tok, const char* s) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b03      	cmp	r3, #3
 8001542:	d11e      	bne.n	8001582 <jsoneq+0x52>
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7fe fe4d 	bl	80001e4 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	4619      	mov	r1, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	4299      	cmp	r1, r3
 800155a:	d112      	bne.n	8001582 <jsoneq+0x52>
		strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	461a      	mov	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1898      	adds	r0, r3, r2
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	461a      	mov	r2, r3
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	f007 ff78 	bl	8009468 <strncmp>
 8001578:	4603      	mov	r3, r0
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <jsoneq+0x52>
		return 0;
 800157e:	2300      	movs	r3, #0
 8001580:	e001      	b.n	8001586 <jsoneq+0x56>
	}
	return -1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <json_get_op>:

int json_get_op(const char* input, struct OUTPUTS* out)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	f6ad 0d64 	subw	sp, sp, #2148	; 0x864
 8001596:	af02      	add	r7, sp, #8
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	6018      	str	r0, [r3, #0]
 800159c:	463b      	mov	r3, r7
 800159e:	6019      	str	r1, [r3, #0]
	int counter = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
	int tm_counter = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
	int tt_counter = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
	int rst_counter = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
	int cntr_counter = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
	int dl_counter = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
	int root_counter = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
	int i;
	int r;
	jsmn_parser p;
	jsmntok_t t[128];

	jsmn_init(&p);
 80015ca:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff9a 	bl	8001508 <jsmn_init>
	r = jsmn_parse(&p, input, strlen(input), t, sizeof(t) / sizeof(t[0]));
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	f7fe fe04 	bl	80001e4 <strlen>
 80015dc:	4604      	mov	r4, r0
 80015de:	f107 0210 	add.w	r2, r7, #16
 80015e2:	1d39      	adds	r1, r7, #4
 80015e4:	f507 6001 	add.w	r0, r7, #2064	; 0x810
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	4613      	mov	r3, r2
 80015ee:	4622      	mov	r2, r4
 80015f0:	6809      	ldr	r1, [r1, #0]
 80015f2:	f7ff fdeb 	bl	80011cc <jsmn_parse>
 80015f6:	f8c7 0824 	str.w	r0, [r7, #2084]	; 0x824

	if (r < 1 || t[0].type != JSMN_OBJECT)
 80015fa:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80015fe:	2b00      	cmp	r3, #0
 8001600:	dd04      	ble.n	800160c <json_get_op+0x7c>
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d002      	beq.n	8001612 <json_get_op+0x82>
	{
		return 0;
 800160c:	2300      	movs	r3, #0
 800160e:	f000 be5c 	b.w	80022ca <json_get_op+0xd3a>
	}

	for (i = 1; i < r; i++) {
 8001612:	2301      	movs	r3, #1
 8001614:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
 8001618:	f000 be4e 	b.w	80022b8 <json_get_op+0xd28>

		if (jsoneq(input, &t[i], "OUT") == 0)
 800161c:	f107 0210 	add.w	r2, r7, #16
 8001620:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	18d1      	adds	r1, r2, r3
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4ac7      	ldr	r2, [pc, #796]	; (8001948 <json_get_op+0x3b8>)
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	f7ff ff7f 	bl	8001530 <jsoneq>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d106      	bne.n	8001646 <json_get_op+0xb6>
		{
			i++;
 8001638:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 800163c:	3301      	adds	r3, #1
 800163e:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
 8001642:	f000 be34 	b.w	80022ae <json_get_op+0xd1e>
		}
		else
		{
			if (t[i + 1].type != JSMN_ARRAY)
 8001646:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 800164a:	3301      	adds	r3, #1
 800164c:	f107 0210 	add.w	r2, r7, #16
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	4413      	add	r3, r2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b02      	cmp	r3, #2
 8001658:	f040 8628 	bne.w	80022ac <json_get_op+0xd1c>
			{
				continue;
			}

			//add new branch
			memcpy(out->root_par[root_counter].name, input + t[i].start, t[i].end - t[i].start);
 800165c:	463a      	mov	r2, r7
 800165e:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001662:	33d1      	adds	r3, #209	; 0xd1
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	4413      	add	r3, r2
 800166a:	1d98      	adds	r0, r3, #6
 800166c:	f107 0210 	add.w	r2, r7, #16
 8001670:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	4413      	add	r3, r2
 8001678:	3304      	adds	r3, #4
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	189c      	adds	r4, r3, r2
 8001684:	f107 0210 	add.w	r2, r7, #16
 8001688:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	4413      	add	r3, r2
 8001690:	3308      	adds	r3, #8
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	f107 0110 	add.w	r1, r7, #16
 8001698:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	440b      	add	r3, r1
 80016a0:	3304      	adds	r3, #4
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	461a      	mov	r2, r3
 80016a8:	4621      	mov	r1, r4
 80016aa:	f007 fc34 	bl	8008f16 <memcpy>
			out->root_par[root_counter].operation = NULL;
 80016ae:	463b      	mov	r3, r7
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80016b6:	33d1      	adds	r3, #209	; 0xd1
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	4413      	add	r3, r2
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
			out->root_par[root_counter].operation_n = 0;
 80016c0:	463b      	mov	r3, r7
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80016c8:	33d1      	adds	r3, #209	; 0xd1
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	4413      	add	r3, r2
 80016ce:	3304      	adds	r3, #4
 80016d0:	2200      	movs	r2, #0
 80016d2:	801a      	strh	r2, [r3, #0]
			out->root_par[root_counter].id = root_counter;
 80016d4:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80016d8:	b2d9      	uxtb	r1, r3
 80016da:	463b      	mov	r3, r7
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4413      	add	r3, r2
 80016e6:	f603 531b 	addw	r3, r3, #3355	; 0xd1b
 80016ea:	460a      	mov	r2, r1
 80016ec:	701a      	strb	r2, [r3, #0]

			//parse branch
			for (int j = 0; j < t[i + 1].size; j++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 80016f4:	f000 bd98 	b.w	8002228 <json_get_op+0xc98>
			{
				out->root_par[root_counter].operation_n++;
 80016f8:	463b      	mov	r3, r7
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001700:	33d1      	adds	r3, #209	; 0xd1
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	4413      	add	r3, r2
 8001706:	3304      	adds	r3, #4
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	b299      	uxth	r1, r3
 800170e:	463b      	mov	r3, r7
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001716:	33d1      	adds	r3, #209	; 0xd1
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	4413      	add	r3, r2
 800171c:	3304      	adds	r3, #4
 800171e:	460a      	mov	r2, r1
 8001720:	801a      	strh	r2, [r3, #0]

				jsmntok_t* g = &t[i + j + 2];
 8001722:	f8d7 2838 	ldr.w	r2, [r7, #2104]	; 0x838
 8001726:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 800172a:	4413      	add	r3, r2
 800172c:	3302      	adds	r3, #2
 800172e:	f107 0210 	add.w	r2, r7, #16
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	4413      	add	r3, r2
 8001736:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
				char* p_stt = (char*)input + g->start + 1;
 800173a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	3301      	adds	r3, #1
 8001742:	1d3a      	adds	r2, r7, #4
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	4413      	add	r3, r2
 8001748:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
				char* p_end = NULL;
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]


				if (isalpha(p_stt[0]) && islower(p_stt[0]))
 8001754:	f007 fbb0 	bl	8008eb8 <__locale_ctype_ptr>
 8001758:	4602      	mov	r2, r0
 800175a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 84fe 	beq.w	800216c <json_get_op+0xbdc>
 8001770:	f007 fba2 	bl	8008eb8 <__locale_ctype_ptr>
 8001774:	4602      	mov	r2, r0
 8001776:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b02      	cmp	r3, #2
 8001788:	f040 84f0 	bne.w	800216c <json_get_op+0xbdc>
				{
					out->par[counter].root_id = 0;
 800178c:	463b      	mov	r3, r7
 800178e:	6819      	ldr	r1, [r3, #0]
 8001790:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
					switch(p_stt[0])
 80017a6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	3b63      	subs	r3, #99	; 0x63
 80017ae:	2b14      	cmp	r3, #20
 80017b0:	f200 84d2 	bhi.w	8002158 <json_get_op+0xbc8>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <json_get_op+0x22c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001ac1 	.word	0x08001ac1
 80017c0:	08001c11 	.word	0x08001c11
 80017c4:	08002159 	.word	0x08002159
 80017c8:	08001d61 	.word	0x08001d61
 80017cc:	080018cb 	.word	0x080018cb
 80017d0:	08002159 	.word	0x08002159
 80017d4:	080019c9 	.word	0x080019c9
 80017d8:	08002159 	.word	0x08002159
 80017dc:	08002159 	.word	0x08002159
 80017e0:	08002159 	.word	0x08002159
 80017e4:	08002159 	.word	0x08002159
 80017e8:	08002159 	.word	0x08002159
 80017ec:	08002159 	.word	0x08002159
 80017f0:	0800194d 	.word	0x0800194d
 80017f4:	08002159 	.word	0x08002159
 80017f8:	08001e79 	.word	0x08001e79
 80017fc:	08001811 	.word	0x08001811
 8001800:	08002033 	.word	0x08002033
 8001804:	08002159 	.word	0x08002159
 8001808:	08002159 	.word	0x08002159
 800180c:	08001a45 	.word	0x08001a45
					{
					case 's': //another branch
						out->par[counter].type = STATE;
 8001810:	463b      	mov	r3, r7
 8001812:	6819      	ldr	r1, [r3, #0]
 8001814:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	f203 3321 	addw	r3, r3, #801	; 0x321
 8001826:	220b      	movs	r2, #11
 8001828:	701a      	strb	r2, [r3, #0]
						for (uint16_t r = 0; r < root_counter; ++r) {
 800182a:	2300      	movs	r3, #0
 800182c:	f8a7 3832 	strh.w	r3, [r7, #2098]	; 0x832
 8001830:	e02c      	b.n	800188c <json_get_op+0x2fc>
							if (memcmp(p_stt, out->root_par[r].name, 3) == 0) {
 8001832:	f8b7 3832 	ldrh.w	r3, [r7, #2098]	; 0x832
 8001836:	463a      	mov	r2, r7
 8001838:	33d1      	adds	r3, #209	; 0xd1
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	4413      	add	r3, r2
 8001840:	3306      	adds	r3, #6
 8001842:	2203      	movs	r2, #3
 8001844:	4619      	mov	r1, r3
 8001846:	f8d7 081c 	ldr.w	r0, [r7, #2076]	; 0x81c
 800184a:	f007 fb55 	bl	8008ef8 <memcmp>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d116      	bne.n	8001882 <json_get_op+0x2f2>
								out->par[counter].root_id = out->root_par[r].id;
 8001854:	f8b7 3832 	ldrh.w	r3, [r7, #2098]	; 0x832
 8001858:	463a      	mov	r2, r7
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	4413      	add	r3, r2
 8001860:	f603 531b 	addw	r3, r3, #3355	; 0xd1b
 8001864:	7818      	ldrb	r0, [r3, #0]
 8001866:	463b      	mov	r3, r7
 8001868:	6819      	ldr	r1, [r3, #0]
 800186a:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800187c:	4602      	mov	r2, r0
 800187e:	701a      	strb	r2, [r3, #0]
								break;
 8001880:	e00a      	b.n	8001898 <json_get_op+0x308>
						for (uint16_t r = 0; r < root_counter; ++r) {
 8001882:	f8b7 3832 	ldrh.w	r3, [r7, #2098]	; 0x832
 8001886:	3301      	adds	r3, #1
 8001888:	f8a7 3832 	strh.w	r3, [r7, #2098]	; 0x832
 800188c:	f8b7 2832 	ldrh.w	r2, [r7, #2098]	; 0x832
 8001890:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001894:	429a      	cmp	r2, r3
 8001896:	dbcc      	blt.n	8001832 <json_get_op+0x2a2>
							}
						}
						out->par[counter].log = (enum LG)strtol(p_stt + 5, NULL, 16);
 8001898:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 800189c:	3305      	adds	r3, #5
 800189e:	2210      	movs	r2, #16
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f007 fea0 	bl	80095e8 <strtol>
 80018a8:	4603      	mov	r3, r0
 80018aa:	b2d8      	uxtb	r0, r3
 80018ac:	463b      	mov	r3, r7
 80018ae:	6819      	ldr	r1, [r3, #0]
 80018b0:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80018c2:	4602      	mov	r2, r0
 80018c4:	701a      	strb	r2, [r3, #0]
						break;
 80018c6:	f000 bc48 	b.w	800215a <json_get_op+0xbca>

					case 'g': //telegram
						out->par[counter].type = WEB;
 80018ca:	463b      	mov	r3, r7
 80018cc:	6819      	ldr	r1, [r3, #0]
 80018ce:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	f203 3321 	addw	r3, r3, #801	; 0x321
 80018e0:	2206      	movs	r2, #6
 80018e2:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_end + 3, &p_end, 16);
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3303      	adds	r3, #3
 80018ec:	f107 010c 	add.w	r1, r7, #12
 80018f0:	2210      	movs	r2, #16
 80018f2:	4618      	mov	r0, r3
 80018f4:	f007 fe78 	bl	80095e8 <strtol>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b2d8      	uxtb	r0, r3
 80018fc:	463b      	mov	r3, r7
 80018fe:	6819      	ldr	r1, [r3, #0]
 8001900:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001912:	4602      	mov	r2, r0
 8001914:	701a      	strb	r2, [r3, #0]
						out->par[counter].trigger_value = strtol(p_end + 1, NULL, 10);
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	220a      	movs	r2, #10
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f007 fe60 	bl	80095e8 <strtol>
 8001928:	4603      	mov	r3, r0
 800192a:	4618      	mov	r0, r3
 800192c:	463b      	mov	r3, r7
 800192e:	6819      	ldr	r1, [r3, #0]
 8001930:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001942:	6018      	str	r0, [r3, #0]
						break;
 8001944:	f000 bc09 	b.w	800215a <json_get_op+0xbca>
 8001948:	0800ad14 	.word	0x0800ad14

					case 'p': //pmo
						out->par[counter].type = PMO;
 800194c:	463b      	mov	r3, r7
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	f203 3321 	addw	r3, r3, #801	; 0x321
 8001962:	2204      	movs	r2, #4
 8001964:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_end + 3, &p_end, 16);
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3303      	adds	r3, #3
 800196e:	f107 010c 	add.w	r1, r7, #12
 8001972:	2210      	movs	r2, #16
 8001974:	4618      	mov	r0, r3
 8001976:	f007 fe37 	bl	80095e8 <strtol>
 800197a:	4603      	mov	r3, r0
 800197c:	b2d8      	uxtb	r0, r3
 800197e:	463b      	mov	r3, r7
 8001980:	6819      	ldr	r1, [r3, #0]
 8001982:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001994:	4602      	mov	r2, r0
 8001996:	701a      	strb	r2, [r3, #0]
						out->par[counter].trigger_value = strtol(p_end + 1, NULL, 10);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	220a      	movs	r2, #10
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f007 fe1f 	bl	80095e8 <strtol>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4618      	mov	r0, r3
 80019ae:	463b      	mov	r3, r7
 80019b0:	6819      	ldr	r1, [r3, #0]
 80019b2:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80019c4:	6018      	str	r0, [r3, #0]
						break;
 80019c6:	e3c8      	b.n	800215a <json_get_op+0xbca>

					case 'i': //ino
						out->par[counter].type = INO;
 80019c8:	463b      	mov	r3, r7
 80019ca:	6819      	ldr	r1, [r3, #0]
 80019cc:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	f203 3321 	addw	r3, r3, #801	; 0x321
 80019de:	2205      	movs	r2, #5
 80019e0:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_end + 3, &p_end, 16);
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3303      	adds	r3, #3
 80019ea:	f107 010c 	add.w	r1, r7, #12
 80019ee:	2210      	movs	r2, #16
 80019f0:	4618      	mov	r0, r3
 80019f2:	f007 fdf9 	bl	80095e8 <strtol>
 80019f6:	4603      	mov	r3, r0
 80019f8:	b2d8      	uxtb	r0, r3
 80019fa:	463b      	mov	r3, r7
 80019fc:	6819      	ldr	r1, [r3, #0]
 80019fe:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001a10:	4602      	mov	r2, r0
 8001a12:	701a      	strb	r2, [r3, #0]
						out->par[counter].trigger_value = strtol(p_end + 1, NULL, 10);
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	220a      	movs	r2, #10
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f007 fde1 	bl	80095e8 <strtol>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	6819      	ldr	r1, [r3, #0]
 8001a2e:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001a40:	6018      	str	r0, [r3, #0]
						break;
 8001a42:	e38a      	b.n	800215a <json_get_op+0xbca>

					case 'w': //week
						out->par[counter].type = WEEK;
 8001a44:	463b      	mov	r3, r7
 8001a46:	6819      	ldr	r1, [r3, #0]
 8001a48:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	f203 3321 	addw	r3, r3, #801	; 0x321
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_end + 3, &p_end, 16);
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	3303      	adds	r3, #3
 8001a66:	f107 010c 	add.w	r1, r7, #12
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f007 fdbb 	bl	80095e8 <strtol>
 8001a72:	4603      	mov	r3, r0
 8001a74:	b2d8      	uxtb	r0, r3
 8001a76:	463b      	mov	r3, r7
 8001a78:	6819      	ldr	r1, [r3, #0]
 8001a7a:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	701a      	strb	r2, [r3, #0]
						out->par[counter].trigger_value = strtol(p_end + 1, NULL, 16);
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3301      	adds	r3, #1
 8001a98:	2210      	movs	r2, #16
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f007 fda3 	bl	80095e8 <strtol>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	6819      	ldr	r1, [r3, #0]
 8001aaa:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001abc:	6018      	str	r0, [r3, #0]
						break;
 8001abe:	e34c      	b.n	800215a <json_get_op+0xbca>

					case 'c': //counter
						out->par[counter].type = COUNTER;
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	6819      	ldr	r1, [r3, #0]
 8001ac4:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	f203 3321 	addw	r3, r3, #801	; 0x321
 8001ad6:	2209      	movs	r2, #9
 8001ad8:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_stt + 3, NULL, 16);
 8001ada:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001ade:	3303      	adds	r3, #3
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f007 fd7f 	bl	80095e8 <strtol>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b2d8      	uxtb	r0, r3
 8001aee:	463b      	mov	r3, r7
 8001af0:	6819      	ldr	r1, [r3, #0]
 8001af2:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001b04:	4602      	mov	r2, r0
 8001b06:	701a      	strb	r2, [r3, #0]

						if (memcmp(p_stt + 6, "psv", 3) == 0) {
 8001b08:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001b0c:	3306      	adds	r3, #6
 8001b0e:	2203      	movs	r2, #3
 8001b10:	49d8      	ldr	r1, [pc, #864]	; (8001e74 <json_get_op+0x8e4>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f007 f9f0 	bl	8008ef8 <memcmp>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10d      	bne.n	8001b3a <json_get_op+0x5aa>
							(out->cntr + cntr_counter)->root_id = -1;
 8001b1e:	463b      	mov	r3, r7
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001b26:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	440b      	add	r3, r1
 8001b34:	22ff      	movs	r2, #255	; 0xff
 8001b36:	701a      	strb	r2, [r3, #0]
 8001b38:	e037      	b.n	8001baa <json_get_op+0x61a>
						} else {
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8a7 3830 	strh.w	r3, [r7, #2096]	; 0x830
 8001b40:	e02d      	b.n	8001b9e <json_get_op+0x60e>
								if (memcmp(p_stt + 6, out->root_par[r].name, 3) == 0) {
 8001b42:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001b46:	1d98      	adds	r0, r3, #6
 8001b48:	f8b7 3830 	ldrh.w	r3, [r7, #2096]	; 0x830
 8001b4c:	463a      	mov	r2, r7
 8001b4e:	33d1      	adds	r3, #209	; 0xd1
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	3306      	adds	r3, #6
 8001b58:	2203      	movs	r2, #3
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f007 f9cc 	bl	8008ef8 <memcmp>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d116      	bne.n	8001b94 <json_get_op+0x604>
									(out->cntr + cntr_counter)->root_id = out->root_par[r].id;
 8001b66:	463b      	mov	r3, r7
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001b6e:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f8b7 2830 	ldrh.w	r2, [r7, #2096]	; 0x830
 8001b80:	4639      	mov	r1, r7
 8001b82:	6809      	ldr	r1, [r1, #0]
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	440a      	add	r2, r1
 8001b88:	f602 521b 	addw	r2, r2, #3355	; 0xd1b
 8001b8c:	7812      	ldrb	r2, [r2, #0]
 8001b8e:	b252      	sxtb	r2, r2
 8001b90:	701a      	strb	r2, [r3, #0]
									break;
 8001b92:	e00a      	b.n	8001baa <json_get_op+0x61a>
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001b94:	f8b7 3830 	ldrh.w	r3, [r7, #2096]	; 0x830
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f8a7 3830 	strh.w	r3, [r7, #2096]	; 0x830
 8001b9e:	f8b7 2830 	ldrh.w	r2, [r7, #2096]	; 0x830
 8001ba2:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	dbcb      	blt.n	8001b42 <json_get_op+0x5b2>
								}
							}
						}

						out->par[counter].trigger_value = strtol(p_stt + 11, NULL, 10);
 8001baa:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001bae:	330b      	adds	r3, #11
 8001bb0:	220a      	movs	r2, #10
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f007 fd17 	bl	80095e8 <strtol>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	6819      	ldr	r1, [r3, #0]
 8001bc2:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001bd4:	6018      	str	r0, [r3, #0]
						out->par[counter].data = out->cntr + cntr_counter;
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001bde:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4419      	add	r1, r3
 8001bec:	463b      	mov	r3, r7
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4403      	add	r3, r0
 8001bfe:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001c02:	6019      	str	r1, [r3, #0]
						cntr_counter++;
 8001c04:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
						break;
 8001c0e:	e2a4      	b.n	800215a <json_get_op+0xbca>

					case 'd': //delay
						out->par[counter].type = DELAY;
 8001c10:	463b      	mov	r3, r7
 8001c12:	6819      	ldr	r1, [r3, #0]
 8001c14:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	f203 3321 	addw	r3, r3, #801	; 0x321
 8001c26:	220a      	movs	r2, #10
 8001c28:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_stt + 3, NULL, 16);
 8001c2a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001c2e:	3303      	adds	r3, #3
 8001c30:	2210      	movs	r2, #16
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f007 fcd7 	bl	80095e8 <strtol>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	b2d8      	uxtb	r0, r3
 8001c3e:	463b      	mov	r3, r7
 8001c40:	6819      	ldr	r1, [r3, #0]
 8001c42:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001c54:	4602      	mov	r2, r0
 8001c56:	701a      	strb	r2, [r3, #0]

						if (memcmp(p_stt + 6, "psv", 3) == 0) {
 8001c58:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001c5c:	3306      	adds	r3, #6
 8001c5e:	2203      	movs	r2, #3
 8001c60:	4984      	ldr	r1, [pc, #528]	; (8001e74 <json_get_op+0x8e4>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f007 f948 	bl	8008ef8 <memcmp>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10d      	bne.n	8001c8a <json_get_op+0x6fa>
							(out->del + dl_counter)->root_id = -1;
 8001c6e:	463b      	mov	r3, r7
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8001c76:	f8d7 2840 	ldr.w	r2, [r7, #2112]	; 0x840
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	22ff      	movs	r2, #255	; 0xff
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	e037      	b.n	8001cfa <json_get_op+0x76a>
						} else {
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8a7 382e 	strh.w	r3, [r7, #2094]	; 0x82e
 8001c90:	e02d      	b.n	8001cee <json_get_op+0x75e>
								if (memcmp(p_stt + 6, out->root_par[r].name, 3) == 0) {
 8001c92:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001c96:	1d98      	adds	r0, r3, #6
 8001c98:	f8b7 382e 	ldrh.w	r3, [r7, #2094]	; 0x82e
 8001c9c:	463a      	mov	r2, r7
 8001c9e:	33d1      	adds	r3, #209	; 0xd1
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3306      	adds	r3, #6
 8001ca8:	2203      	movs	r2, #3
 8001caa:	4619      	mov	r1, r3
 8001cac:	f007 f924 	bl	8008ef8 <memcmp>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d116      	bne.n	8001ce4 <json_get_op+0x754>
									(out->del + dl_counter)->root_id = out->root_par[r].id;
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8001cbe:	f8d7 2840 	ldr.w	r2, [r7, #2112]	; 0x840
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f8b7 282e 	ldrh.w	r2, [r7, #2094]	; 0x82e
 8001cd0:	4639      	mov	r1, r7
 8001cd2:	6809      	ldr	r1, [r1, #0]
 8001cd4:	0112      	lsls	r2, r2, #4
 8001cd6:	440a      	add	r2, r1
 8001cd8:	f602 521b 	addw	r2, r2, #3355	; 0xd1b
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	b252      	sxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]
									break;
 8001ce2:	e00a      	b.n	8001cfa <json_get_op+0x76a>
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001ce4:	f8b7 382e 	ldrh.w	r3, [r7, #2094]	; 0x82e
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f8a7 382e 	strh.w	r3, [r7, #2094]	; 0x82e
 8001cee:	f8b7 282e 	ldrh.w	r2, [r7, #2094]	; 0x82e
 8001cf2:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	dbcb      	blt.n	8001c92 <json_get_op+0x702>
								}
							}
						}

						out->del[dl_counter].value = strtol(p_stt + 11, NULL, 10);
 8001cfa:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001cfe:	330b      	adds	r3, #11
 8001d00:	220a      	movs	r2, #10
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f007 fc6f 	bl	80095e8 <strtol>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b298      	uxth	r0, r3
 8001d0e:	463b      	mov	r3, r7
 8001d10:	6819      	ldr	r1, [r3, #0]
 8001d12:	f8d7 2840 	ldr.w	r2, [r7, #2112]	; 0x840
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	3372      	adds	r3, #114	; 0x72
 8001d22:	4602      	mov	r2, r0
 8001d24:	801a      	strh	r2, [r3, #0]
						out->par[counter].data	= out->del + dl_counter;
 8001d26:	463b      	mov	r3, r7
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8001d2e:	f8d7 2840 	ldr.w	r2, [r7, #2112]	; 0x840
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4419      	add	r1, r3
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4403      	add	r3, r0
 8001d4e:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001d52:	6019      	str	r1, [r3, #0]
						dl_counter++;
 8001d54:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
						break;
 8001d5e:	e1fc      	b.n	800215a <json_get_op+0xbca>

					case 'f': //t trigger
						out->par[counter].type = T_TRIGGER;
 8001d60:	463b      	mov	r3, r7
 8001d62:	6819      	ldr	r1, [r3, #0]
 8001d64:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	f203 3321 	addw	r3, r3, #801	; 0x321
 8001d76:	2207      	movs	r2, #7
 8001d78:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_stt + 3, NULL, 16);
 8001d7a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001d7e:	3303      	adds	r3, #3
 8001d80:	2210      	movs	r2, #16
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f007 fc2f 	bl	80095e8 <strtol>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	b2d8      	uxtb	r0, r3
 8001d8e:	463b      	mov	r3, r7
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001da4:	4602      	mov	r2, r0
 8001da6:	701a      	strb	r2, [r3, #0]

						if (memcmp(p_stt + 6, "psv", 3) == 0) {
 8001da8:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001dac:	3306      	adds	r3, #6
 8001dae:	2203      	movs	r2, #3
 8001db0:	4930      	ldr	r1, [pc, #192]	; (8001e74 <json_get_op+0x8e4>)
 8001db2:	4618      	mov	r0, r3
 8001db4:	f007 f8a0 	bl	8008ef8 <memcmp>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10a      	bne.n	8001dd4 <json_get_op+0x844>
							(out->t_tr + tt_counter)->root_id = -1;
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	6819      	ldr	r1, [r3, #0]
 8001dc2:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	22ff      	movs	r2, #255	; 0xff
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e034      	b.n	8001e3e <json_get_op+0x8ae>
						} else {
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8a7 382c 	strh.w	r3, [r7, #2092]	; 0x82c
 8001dda:	e02a      	b.n	8001e32 <json_get_op+0x8a2>
								if (memcmp(p_stt + 6, out->root_par[r].name, 3) == 0) {
 8001ddc:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001de0:	1d98      	adds	r0, r3, #6
 8001de2:	f8b7 382c 	ldrh.w	r3, [r7, #2092]	; 0x82c
 8001de6:	463a      	mov	r2, r7
 8001de8:	33d1      	adds	r3, #209	; 0xd1
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	3306      	adds	r3, #6
 8001df2:	2203      	movs	r2, #3
 8001df4:	4619      	mov	r1, r3
 8001df6:	f007 f87f 	bl	8008ef8 <memcmp>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d113      	bne.n	8001e28 <json_get_op+0x898>
									(out->t_tr + tt_counter)->root_id = out->root_par[r].id;
 8001e00:	463b      	mov	r3, r7
 8001e02:	6819      	ldr	r1, [r3, #0]
 8001e04:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f8b7 282c 	ldrh.w	r2, [r7, #2092]	; 0x82c
 8001e14:	4639      	mov	r1, r7
 8001e16:	6809      	ldr	r1, [r1, #0]
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	440a      	add	r2, r1
 8001e1c:	f602 521b 	addw	r2, r2, #3355	; 0xd1b
 8001e20:	7812      	ldrb	r2, [r2, #0]
 8001e22:	b252      	sxtb	r2, r2
 8001e24:	701a      	strb	r2, [r3, #0]
									break;
 8001e26:	e00a      	b.n	8001e3e <json_get_op+0x8ae>
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001e28:	f8b7 382c 	ldrh.w	r3, [r7, #2092]	; 0x82c
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f8a7 382c 	strh.w	r3, [r7, #2092]	; 0x82c
 8001e32:	f8b7 282c 	ldrh.w	r2, [r7, #2092]	; 0x82c
 8001e36:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	dbce      	blt.n	8001ddc <json_get_op+0x84c>
								}
							}
						}

						out->par[counter].data	= out->t_tr + tt_counter;
 8001e3e:	463b      	mov	r3, r7
 8001e40:	6819      	ldr	r1, [r3, #0]
 8001e42:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4419      	add	r1, r3
 8001e4e:	463b      	mov	r3, r7
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4403      	add	r3, r0
 8001e60:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001e64:	6019      	str	r1, [r3, #0]
						tt_counter++;
 8001e66:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
						break;
 8001e70:	e173      	b.n	800215a <json_get_op+0xbca>
 8001e72:	bf00      	nop
 8001e74:	0800ad18 	.word	0x0800ad18

					case 'r': //rs trigger
						out->par[counter].type = RS_TRIGGER;
 8001e78:	463b      	mov	r3, r7
 8001e7a:	6819      	ldr	r1, [r3, #0]
 8001e7c:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	f203 3321 	addw	r3, r3, #801	; 0x321
 8001e8e:	2208      	movs	r2, #8
 8001e90:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_stt + 3, NULL, 16);
 8001e92:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001e96:	3303      	adds	r3, #3
 8001e98:	2210      	movs	r2, #16
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f007 fba3 	bl	80095e8 <strtol>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	b2d8      	uxtb	r0, r3
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	6819      	ldr	r1, [r3, #0]
 8001eaa:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	701a      	strb	r2, [r3, #0]

						if (memcmp(p_stt + 6, "psv", 3) == 0) {
 8001ec0:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001ec4:	3306      	adds	r3, #6
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	49a7      	ldr	r1, [pc, #668]	; (8002168 <json_get_op+0xbd8>)
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f007 f814 	bl	8008ef8 <memcmp>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10b      	bne.n	8001eee <json_get_op+0x95e>
							out->rs_tr[rst_counter].root_id_s = -1;
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	6819      	ldr	r1, [r3, #0]
 8001eda:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3318      	adds	r3, #24
 8001ee8:	22ff      	movs	r2, #255	; 0xff
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	e036      	b.n	8001f5c <json_get_op+0x9cc>
						} else {
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f8a7 382a 	strh.w	r3, [r7, #2090]	; 0x82a
 8001ef4:	e02c      	b.n	8001f50 <json_get_op+0x9c0>
								if (memcmp(p_stt + 6, out->root_par[r].name, 3) == 0) {
 8001ef6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001efa:	1d98      	adds	r0, r3, #6
 8001efc:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	; 0x82a
 8001f00:	463a      	mov	r2, r7
 8001f02:	33d1      	adds	r3, #209	; 0xd1
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	3306      	adds	r3, #6
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f006 fff2 	bl	8008ef8 <memcmp>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d115      	bne.n	8001f46 <json_get_op+0x9b6>
									out->rs_tr[rst_counter].root_id_s = out->root_par[r].id;
 8001f1a:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	; 0x82a
 8001f1e:	463a      	mov	r2, r7
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	4413      	add	r3, r2
 8001f26:	f603 531b 	addw	r3, r3, #3355	; 0xd1b
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	b258      	sxtb	r0, r3
 8001f2e:	463b      	mov	r3, r7
 8001f30:	6819      	ldr	r1, [r3, #0]
 8001f32:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3318      	adds	r3, #24
 8001f40:	4602      	mov	r2, r0
 8001f42:	701a      	strb	r2, [r3, #0]
									break;
 8001f44:	e00a      	b.n	8001f5c <json_get_op+0x9cc>
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001f46:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	; 0x82a
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	f8a7 382a 	strh.w	r3, [r7, #2090]	; 0x82a
 8001f50:	f8b7 282a 	ldrh.w	r2, [r7, #2090]	; 0x82a
 8001f54:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbcc      	blt.n	8001ef6 <json_get_op+0x966>
								}
							}
						}

						if (memcmp(p_stt + 6, "psv", 3) == 0) {
 8001f5c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001f60:	3306      	adds	r3, #6
 8001f62:	2203      	movs	r2, #3
 8001f64:	4980      	ldr	r1, [pc, #512]	; (8002168 <json_get_op+0xbd8>)
 8001f66:	4618      	mov	r0, r3
 8001f68:	f006 ffc6 	bl	8008ef8 <memcmp>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10b      	bne.n	8001f8a <json_get_op+0x9fa>
							out->rs_tr[rst_counter].root_id_r = -1;
 8001f72:	463b      	mov	r3, r7
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	440b      	add	r3, r1
 8001f82:	3319      	adds	r3, #25
 8001f84:	22ff      	movs	r2, #255	; 0xff
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	e037      	b.n	8001ffa <json_get_op+0xa6a>
						} else {
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8a7 3828 	strh.w	r3, [r7, #2088]	; 0x828
 8001f90:	e02d      	b.n	8001fee <json_get_op+0xa5e>
								if (memcmp(p_stt + 11, out->root_par[r].name, 3) == 0) {
 8001f92:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001f96:	f103 000b 	add.w	r0, r3, #11
 8001f9a:	f8b7 3828 	ldrh.w	r3, [r7, #2088]	; 0x828
 8001f9e:	463a      	mov	r2, r7
 8001fa0:	33d1      	adds	r3, #209	; 0xd1
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3306      	adds	r3, #6
 8001faa:	2203      	movs	r2, #3
 8001fac:	4619      	mov	r1, r3
 8001fae:	f006 ffa3 	bl	8008ef8 <memcmp>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d115      	bne.n	8001fe4 <json_get_op+0xa54>
									out->rs_tr[rst_counter].root_id_r = out->root_par[r].id;
 8001fb8:	f8b7 3828 	ldrh.w	r3, [r7, #2088]	; 0x828
 8001fbc:	463a      	mov	r2, r7
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f603 531b 	addw	r3, r3, #3355	; 0xd1b
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b258      	sxtb	r0, r3
 8001fcc:	463b      	mov	r3, r7
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	3319      	adds	r3, #25
 8001fde:	4602      	mov	r2, r0
 8001fe0:	701a      	strb	r2, [r3, #0]
									break;
 8001fe2:	e00a      	b.n	8001ffa <json_get_op+0xa6a>
							for (uint16_t r = 0; r < root_counter; ++r) {
 8001fe4:	f8b7 3828 	ldrh.w	r3, [r7, #2088]	; 0x828
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f8a7 3828 	strh.w	r3, [r7, #2088]	; 0x828
 8001fee:	f8b7 2828 	ldrh.w	r2, [r7, #2088]	; 0x828
 8001ff2:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	dbcb      	blt.n	8001f92 <json_get_op+0xa02>
								}
							}
						}

						out->par[counter].data	= out->rs_tr + rst_counter;
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f103 0118 	add.w	r1, r3, #24
 8002002:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	4419      	add	r1, r3
 800200e:	463b      	mov	r3, r7
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4403      	add	r3, r0
 8002020:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8002024:	6019      	str	r1, [r3, #0]
						rst_counter++;
 8002026:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 800202a:	3301      	adds	r3, #1
 800202c:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
						break;
 8002030:	e093      	b.n	800215a <json_get_op+0xbca>

					case 't': //time
						out->par[counter].type = TIME;
 8002032:	463b      	mov	r3, r7
 8002034:	6819      	ldr	r1, [r3, #0]
 8002036:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	f203 3321 	addw	r3, r3, #801	; 0x321
 8002048:	2202      	movs	r2, #2
 800204a:	701a      	strb	r2, [r3, #0]
						out->par[counter].log = (enum LG)strtol(p_stt + 3, NULL, 16);
 800204c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8002050:	3303      	adds	r3, #3
 8002052:	2210      	movs	r2, #16
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f007 fac6 	bl	80095e8 <strtol>
 800205c:	4603      	mov	r3, r0
 800205e:	b2d8      	uxtb	r0, r3
 8002060:	463b      	mov	r3, r7
 8002062:	6819      	ldr	r1, [r3, #0]
 8002064:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002076:	4602      	mov	r2, r0
 8002078:	701a      	strb	r2, [r3, #0]
						out->tim[tm_counter].from.tm_hour = strtol(p_stt + 8, &p_end, 10);
 800207a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 800207e:	3308      	adds	r3, #8
 8002080:	f107 010c 	add.w	r1, r7, #12
 8002084:	220a      	movs	r2, #10
 8002086:	4618      	mov	r0, r3
 8002088:	f007 faae 	bl	80095e8 <strtol>
 800208c:	463b      	mov	r3, r7
 800208e:	6819      	ldr	r1, [r3, #0]
 8002090:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	33d8      	adds	r3, #216	; 0xd8
 80020a0:	6018      	str	r0, [r3, #0]
						out->tim[tm_counter].from.tm_min =  strtol(p_end + 1, &p_end, 10);
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	f107 010c 	add.w	r1, r7, #12
 80020ae:	220a      	movs	r2, #10
 80020b0:	4618      	mov	r0, r3
 80020b2:	f007 fa99 	bl	80095e8 <strtol>
 80020b6:	463b      	mov	r3, r7
 80020b8:	6819      	ldr	r1, [r3, #0]
 80020ba:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	440b      	add	r3, r1
 80020c8:	33d4      	adds	r3, #212	; 0xd4
 80020ca:	6018      	str	r0, [r3, #0]
						out->tim[tm_counter].to.tm_hour = strtol(p_end + 1, &p_end, 10);
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	f107 010c 	add.w	r1, r7, #12
 80020d8:	220a      	movs	r2, #10
 80020da:	4618      	mov	r0, r3
 80020dc:	f007 fa84 	bl	80095e8 <strtol>
 80020e0:	463b      	mov	r3, r7
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	33fc      	adds	r3, #252	; 0xfc
 80020f4:	6018      	str	r0, [r3, #0]
						out->tim[tm_counter].to.tm_min =  strtol(p_end + 1, NULL, 10);
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	220a      	movs	r2, #10
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f007 fa70 	bl	80095e8 <strtol>
 8002108:	463b      	mov	r3, r7
 800210a:	6819      	ldr	r1, [r3, #0]
 800210c:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	33f8      	adds	r3, #248	; 0xf8
 800211c:	6018      	str	r0, [r3, #0]
						out->par[counter].data	= out->tim + tm_counter;
 800211e:	463b      	mov	r3, r7
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f103 01d0 	add.w	r1, r3, #208	; 0xd0
 8002126:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4419      	add	r1, r3
 8002134:	463b      	mov	r3, r7
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4403      	add	r3, r0
 8002146:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800214a:	6019      	str	r1, [r3, #0]
						tm_counter++;
 800214c:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8002150:	3301      	adds	r3, #1
 8002152:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
						break;
 8002156:	e000      	b.n	800215a <json_get_op+0xbca>

					default:
						break;
 8002158:	bf00      	nop
					}
					counter++;
 800215a:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 800215e:	3301      	adds	r3, #1
 8002160:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 8002164:	e05b      	b.n	800221e <json_get_op+0xc8e>
 8002166:	bf00      	nop
 8002168:	0800ad18 	.word	0x0800ad18
					continue;
				}

				out->par[counter].addr = strtol(p_stt, &p_end, 16);
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	2210      	movs	r2, #16
 8002172:	4619      	mov	r1, r3
 8002174:	f8d7 081c 	ldr.w	r0, [r7, #2076]	; 0x81c
 8002178:	f007 fa36 	bl	80095e8 <strtol>
 800217c:	4603      	mov	r3, r0
 800217e:	4618      	mov	r0, r3
 8002180:	463b      	mov	r3, r7
 8002182:	6819      	ldr	r1, [r3, #0]
 8002184:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8002196:	6018      	str	r0, [r3, #0]
				out->par[counter].log = (enum LG)strtol(p_end + 1, &p_end, 10);
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	3301      	adds	r3, #1
 80021a0:	f107 010c 	add.w	r1, r7, #12
 80021a4:	220a      	movs	r2, #10
 80021a6:	4618      	mov	r0, r3
 80021a8:	f007 fa1e 	bl	80095e8 <strtol>
 80021ac:	4603      	mov	r3, r0
 80021ae:	b2d8      	uxtb	r0, r3
 80021b0:	463b      	mov	r3, r7
 80021b2:	6819      	ldr	r1, [r3, #0]
 80021b4:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80021c6:	4602      	mov	r2, r0
 80021c8:	701a      	strb	r2, [r3, #0]
				out->par[counter].trigger_value = strtol(p_end + 1, &p_end, 10);
 80021ca:	f107 030c 	add.w	r3, r7, #12
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	f107 010c 	add.w	r1, r7, #12
 80021d6:	220a      	movs	r2, #10
 80021d8:	4618      	mov	r0, r3
 80021da:	f007 fa05 	bl	80095e8 <strtol>
 80021de:	4603      	mov	r3, r0
 80021e0:	4618      	mov	r0, r3
 80021e2:	463b      	mov	r3, r7
 80021e4:	6819      	ldr	r1, [r3, #0]
 80021e6:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80021f8:	6018      	str	r0, [r3, #0]
				out->par[counter].type = SENSOR;
 80021fa:	463b      	mov	r3, r7
 80021fc:	6819      	ldr	r1, [r3, #0]
 80021fe:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	f203 3321 	addw	r3, r3, #801	; 0x321
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]

				counter++;
 8002214:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8002218:	3301      	adds	r3, #1
 800221a:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
			for (int j = 0; j < t[i + 1].size; j++)
 800221e:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002222:	3301      	adds	r3, #1
 8002224:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8002228:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 800222c:	3301      	adds	r3, #1
 800222e:	f107 0210 	add.w	r2, r7, #16
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	4413      	add	r3, r2
 8002236:	330c      	adds	r3, #12
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 800223e:	429a      	cmp	r2, r3
 8002240:	f73f aa5a 	bgt.w	80016f8 <json_get_op+0x168>
			}
			out->root_par[root_counter].operation = out->par + (counter - out->root_par[root_counter].operation_n);
 8002244:	463b      	mov	r3, r7
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f503 7244 	add.w	r2, r3, #784	; 0x310
 800224c:	463b      	mov	r3, r7
 800224e:	6819      	ldr	r1, [r3, #0]
 8002250:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002254:	33d1      	adds	r3, #209	; 0xd1
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	440b      	add	r3, r1
 800225a:	3304      	adds	r3, #4
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	4619      	mov	r1, r3
 8002260:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8002264:	1a5b      	subs	r3, r3, r1
 8002266:	4619      	mov	r1, r3
 8002268:	460b      	mov	r3, r1
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	441a      	add	r2, r3
 8002272:	463b      	mov	r3, r7
 8002274:	6819      	ldr	r1, [r3, #0]
 8002276:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 800227a:	33d1      	adds	r3, #209	; 0xd1
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	440b      	add	r3, r1
 8002280:	601a      	str	r2, [r3, #0]
			root_counter++;
 8002282:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002286:	3301      	adds	r3, #1
 8002288:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
			i += t[i + 1].size + 1;
 800228c:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8002290:	3301      	adds	r3, #1
 8002292:	f107 0210 	add.w	r2, r7, #16
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	4413      	add	r3, r2
 800229a:	330c      	adds	r3, #12
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3301      	adds	r3, #1
 80022a0:	f8d7 2838 	ldr.w	r2, [r7, #2104]	; 0x838
 80022a4:	4413      	add	r3, r2
 80022a6:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
 80022aa:	e000      	b.n	80022ae <json_get_op+0xd1e>
				continue;
 80022ac:	bf00      	nop
	for (i = 1; i < r; i++) {
 80022ae:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 80022b2:	3301      	adds	r3, #1
 80022b4:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
 80022b8:	f8d7 2838 	ldr.w	r2, [r7, #2104]	; 0x838
 80022bc:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80022c0:	429a      	cmp	r2, r3
 80022c2:	f6ff a9ab 	blt.w	800161c <json_get_op+0x8c>
		}
	}

	return root_counter;
 80022c6:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	f607 075c 	addw	r7, r7, #2140	; 0x85c
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd90      	pop	{r4, r7, pc}

080022d4 <Telegram_GetValue>:
{

}

uint8_t Telegram_GetValue(uint16_t key)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < TG_MAX; ++i) {
 80022de:	2300      	movs	r3, #0
 80022e0:	81fb      	strh	r3, [r7, #14]
 80022e2:	e00f      	b.n	8002304 <Telegram_GetValue+0x30>
		if (tg[i].key == key) {
 80022e4:	89fb      	ldrh	r3, [r7, #14]
 80022e6:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <Telegram_GetValue+0x44>)
 80022e8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80022ec:	88fa      	ldrh	r2, [r7, #6]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d105      	bne.n	80022fe <Telegram_GetValue+0x2a>
			return tg[i].value;
 80022f2:	89fb      	ldrh	r3, [r7, #14]
 80022f4:	4a08      	ldr	r2, [pc, #32]	; (8002318 <Telegram_GetValue+0x44>)
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	789b      	ldrb	r3, [r3, #2]
 80022fc:	e006      	b.n	800230c <Telegram_GetValue+0x38>
	for(uint16_t i = 0; i < TG_MAX; ++i) {
 80022fe:	89fb      	ldrh	r3, [r7, #14]
 8002300:	3301      	adds	r3, #1
 8002302:	81fb      	strh	r3, [r7, #14]
 8002304:	89fb      	ldrh	r3, [r7, #14]
 8002306:	2bff      	cmp	r3, #255	; 0xff
 8002308:	d9ec      	bls.n	80022e4 <Telegram_GetValue+0x10>
		}
	}
	return 0;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	20000244 	.word	0x20000244

0800231c <get_cur_time>:
#include "rtc.h"

#include <time.h>

uint8_t get_cur_time(struct tm* time)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	RTC_GetTime(time);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f006 fa41 	bl	80087ac <RTC_GetTime>
	return 1;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <is_cur_time>:

uint8_t is_cur_time(TM* ft)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08c      	sub	sp, #48	; 0x30
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	struct tm time_info = { 0 };
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	2224      	movs	r2, #36	; 0x24
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f006 fdf1 	bl	8008f2c <memset>
	RTC_GetTime(&time_info);
 800234a:	f107 030c 	add.w	r3, r7, #12
 800234e:	4618      	mov	r0, r3
 8002350:	f006 fa2c 	bl	80087ac <RTC_GetTime>

	if (time_info.tm_hour == ft->from.tm_hour &&
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	429a      	cmp	r2, r3
 800235c:	d10b      	bne.n	8002376 <is_cur_time+0x42>
		time_info.tm_min >= ft->from.tm_min &&
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
	if (time_info.tm_hour == ft->from.tm_hour &&
 8002364:	429a      	cmp	r2, r3
 8002366:	db06      	blt.n	8002376 <is_cur_time+0x42>
		time_info.tm_hour < ft->to.tm_hour)
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		time_info.tm_min >= ft->from.tm_min &&
 800236e:	429a      	cmp	r2, r3
 8002370:	da01      	bge.n	8002376 <is_cur_time+0x42>
	{
		return 1;
 8002372:	2301      	movs	r3, #1
 8002374:	e018      	b.n	80023a8 <is_cur_time+0x74>
	}

	if (time_info.tm_hour > ft->from.tm_hour &&
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	429a      	cmp	r2, r3
 800237e:	dd06      	ble.n	800238e <is_cur_time+0x5a>
		time_info.tm_hour < ft->to.tm_hour)
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	if (time_info.tm_hour > ft->from.tm_hour &&
 8002386:	429a      	cmp	r2, r3
 8002388:	da01      	bge.n	800238e <is_cur_time+0x5a>
	{
		return 1;
 800238a:	2301      	movs	r3, #1
 800238c:	e00c      	b.n	80023a8 <is_cur_time+0x74>
	}

	if (time_info.tm_hour == ft->to.tm_hour &&
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	429a      	cmp	r2, r3
 8002396:	d106      	bne.n	80023a6 <is_cur_time+0x72>
		time_info.tm_min <= ft->to.tm_min)
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (time_info.tm_hour == ft->to.tm_hour &&
 800239e:	429a      	cmp	r2, r3
 80023a0:	dc01      	bgt.n	80023a6 <is_cur_time+0x72>
	{
		return 1;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <is_cur_time+0x74>
	}

	return 0;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3730      	adds	r7, #48	; 0x30
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <is_cur_day_of_week>:

uint8_t is_cur_day_of_week(uint16_t data)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08c      	sub	sp, #48	; 0x30
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	80fb      	strh	r3, [r7, #6]
	struct tm time_info = { 0 };
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	2224      	movs	r2, #36	; 0x24
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f006 fdb2 	bl	8008f2c <memset>
	RTC_GetTime(&time_info);
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	4618      	mov	r0, r3
 80023ce:	f006 f9ed 	bl	80087ac <RTC_GetTime>

	if (data & (1 << time_info.tm_wday))
 80023d2:	88fa      	ldrh	r2, [r7, #6]
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	fa42 f303 	asr.w	r3, r2, r3
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <is_cur_day_of_week+0x36>
	{
		return 1;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <is_cur_day_of_week+0x38>
	}
	return 0;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3730      	adds	r7, #48	; 0x30
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <ESP_Init>:
struct ring_buffer_struct UART2_rx_data;
char request[1024];
static f_ptr delay;

void ESP_Init(f_ptr delay_function)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	RingBuffInit(&UART2_rx_data);
 80023f8:	4808      	ldr	r0, [pc, #32]	; (800241c <ESP_Init+0x2c>)
 80023fa:	f000 f98f 	bl	800271c <RingBuffInit>
	UART2_Init(&UART2_rx_data);
 80023fe:	4807      	ldr	r0, [pc, #28]	; (800241c <ESP_Init+0x2c>)
 8002400:	f005 fb1c 	bl	8007a3c <UART2_Init>
	UART2_SendData("\r\n", 2);
 8002404:	2102      	movs	r1, #2
 8002406:	4806      	ldr	r0, [pc, #24]	; (8002420 <ESP_Init+0x30>)
 8002408:	f005 fba8 	bl	8007b5c <UART2_SendData>
	delay = delay_function;
 800240c:	4a05      	ldr	r2, [pc, #20]	; (8002424 <ESP_Init+0x34>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6013      	str	r3, [r2, #0]
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20016e68 	.word	0x20016e68
 8002420:	0800ad1c 	.word	0x0800ad1c
 8002424:	20000644 	.word	0x20000644

08002428 <requestFlush>:
	char test_str[] = "uart2 work\r\n";
	UART2_SendData(test_str, sizeof(test_str));
}

static void requestFlush()
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	memset(request, 0, 1024);
 800242c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002430:	2100      	movs	r1, #0
 8002432:	4802      	ldr	r0, [pc, #8]	; (800243c <requestFlush+0x14>)
 8002434:	f006 fd7a 	bl	8008f2c <memset>
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20017e6c 	.word	0x20017e6c

08002440 <charCallBack>:

static uint8_t charCallBack(char * key, uint16_t bias)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
	char * temp = RingBuffGetArray(&UART2_rx_data) + bias;
 800244c:	4810      	ldr	r0, [pc, #64]	; (8002490 <charCallBack+0x50>)
 800244e:	f000 f9ae 	bl	80027ae <RingBuffGetArray>
 8002452:	4602      	mov	r2, r0
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	4413      	add	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
	if(key != NULL && strlen(temp) >= strlen(key))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d012      	beq.n	8002486 <charCallBack+0x46>
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f7fd febf 	bl	80001e4 <strlen>
 8002466:	4604      	mov	r4, r0
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7fd febb 	bl	80001e4 <strlen>
 800246e:	4603      	mov	r3, r0
 8002470:	429c      	cmp	r4, r3
 8002472:	d308      	bcc.n	8002486 <charCallBack+0x46>
	{
		if(strstr(temp, key) != NULL)
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f007 f808 	bl	800948c <strstr>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <charCallBack+0x46>
		{
			return 1;
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <charCallBack+0x48>
		}
	}

	return 0;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	bd90      	pop	{r4, r7, pc}
 8002490:	20016e68 	.word	0x20016e68

08002494 <waitCallBack>:

static uint8_t waitCallBack(char * aim, uint16_t ms)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
	for( ; ms > 0; --ms)
 80024a0:	e012      	b.n	80024c8 <waitCallBack+0x34>
	{
		if(charCallBack(aim, 0))
 80024a2:	2100      	movs	r1, #0
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ffcb 	bl	8002440 <charCallBack>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d004      	beq.n	80024ba <waitCallBack+0x26>
		{
			RingBuffClear(&UART2_rx_data);
 80024b0:	480b      	ldr	r0, [pc, #44]	; (80024e0 <waitCallBack+0x4c>)
 80024b2:	f000 f962 	bl	800277a <RingBuffClear>
			return 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00d      	b.n	80024d6 <waitCallBack+0x42>
		}
		delay(1);
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <waitCallBack+0x50>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2001      	movs	r0, #1
 80024c0:	4798      	blx	r3
	for( ; ms > 0; --ms)
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	807b      	strh	r3, [r7, #2]
 80024c8:	887b      	ldrh	r3, [r7, #2]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1e9      	bne.n	80024a2 <waitCallBack+0xe>
	}
	RingBuffClear(&UART2_rx_data);
 80024ce:	4804      	ldr	r0, [pc, #16]	; (80024e0 <waitCallBack+0x4c>)
 80024d0:	f000 f953 	bl	800277a <RingBuffClear>
	return 0;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20016e68 	.word	0x20016e68
 80024e4:	20000644 	.word	0x20000644

080024e8 <ESP_GetRxData>:

char* ESP_GetRxData()
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
	return RingBuffGetArray(&UART2_rx_data);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <ESP_GetRxData+0x10>)
 80024ee:	f000 f95e 	bl	80027ae <RingBuffGetArray>
 80024f2:	4603      	mov	r3, r0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20016e68 	.word	0x20016e68

080024fc <ESP_SoftReset>:

uint8_t ESP_SoftReset()
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	UART2_SendData("AT+RST\r\n", 8);
 8002500:	2108      	movs	r1, #8
 8002502:	4803      	ldr	r0, [pc, #12]	; (8002510 <ESP_SoftReset+0x14>)
 8002504:	f005 fb2a 	bl	8007b5c <UART2_SendData>
	return 1;
 8002508:	2301      	movs	r3, #1
}
 800250a:	4618      	mov	r0, r3
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	0800ad30 	.word	0x0800ad30

08002514 <ESP_SetMode>:

uint8_t ESP_SetMode(uint8_t mode)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
	requestFlush();
 800251e:	f7ff ff83 	bl	8002428 <requestFlush>
	sprintf(request, "AT+CWMODE=%d\r\n", mode);
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	461a      	mov	r2, r3
 8002526:	4915      	ldr	r1, [pc, #84]	; (800257c <ESP_SetMode+0x68>)
 8002528:	4815      	ldr	r0, [pc, #84]	; (8002580 <ESP_SetMode+0x6c>)
 800252a:	f006 ff63 	bl	80093f4 <siprintf>
	RingBuffClear(&UART2_rx_data);
 800252e:	4815      	ldr	r0, [pc, #84]	; (8002584 <ESP_SetMode+0x70>)
 8002530:	f000 f923 	bl	800277a <RingBuffClear>
	UART2_SendData(request, strlen(request));
 8002534:	4812      	ldr	r0, [pc, #72]	; (8002580 <ESP_SetMode+0x6c>)
 8002536:	f7fd fe55 	bl	80001e4 <strlen>
 800253a:	4603      	mov	r3, r0
 800253c:	4619      	mov	r1, r3
 800253e:	4810      	ldr	r0, [pc, #64]	; (8002580 <ESP_SetMode+0x6c>)
 8002540:	f005 fb0c 	bl	8007b5c <UART2_SendData>

	if(waitCallBack("OK", 2000))
 8002544:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002548:	480f      	ldr	r0, [pc, #60]	; (8002588 <ESP_SetMode+0x74>)
 800254a:	f7ff ffa3 	bl	8002494 <waitCallBack>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00e      	beq.n	8002572 <ESP_SetMode+0x5e>
	{
		UART2_SendData("AT+RST\r\n", 8);
 8002554:	2108      	movs	r1, #8
 8002556:	480d      	ldr	r0, [pc, #52]	; (800258c <ESP_SetMode+0x78>)
 8002558:	f005 fb00 	bl	8007b5c <UART2_SendData>
		if(waitCallBack("ready", 2000))
 800255c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002560:	480b      	ldr	r0, [pc, #44]	; (8002590 <ESP_SetMode+0x7c>)
 8002562:	f7ff ff97 	bl	8002494 <waitCallBack>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <ESP_SetMode+0x5c>
		{
			return 1;
 800256c:	2301      	movs	r3, #1
 800256e:	e001      	b.n	8002574 <ESP_SetMode+0x60>
		}
		else asm("NOP");
 8002570:	bf00      	nop
	}

	return 0;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	0800ad3c 	.word	0x0800ad3c
 8002580:	20017e6c 	.word	0x20017e6c
 8002584:	20016e68 	.word	0x20016e68
 8002588:	0800ad4c 	.word	0x0800ad4c
 800258c:	0800ad30 	.word	0x0800ad30
 8002590:	0800ad50 	.word	0x0800ad50

08002594 <ESP_SetParamsSoftAP>:
	}
	return 0;
}

uint8_t ESP_SetParamsSoftAP(char* ssid, char* password)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
	if(ssid != NULL && password != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01f      	beq.n	80025e4 <ESP_SetParamsSoftAP+0x50>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d01c      	beq.n	80025e4 <ESP_SetParamsSoftAP+0x50>
	{
		requestFlush();
 80025aa:	f7ff ff3d 	bl	8002428 <requestFlush>
		sprintf(request, "AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", ssid, password);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	490f      	ldr	r1, [pc, #60]	; (80025f0 <ESP_SetParamsSoftAP+0x5c>)
 80025b4:	480f      	ldr	r0, [pc, #60]	; (80025f4 <ESP_SetParamsSoftAP+0x60>)
 80025b6:	f006 ff1d 	bl	80093f4 <siprintf>
		RingBuffClear(&UART2_rx_data);
 80025ba:	480f      	ldr	r0, [pc, #60]	; (80025f8 <ESP_SetParamsSoftAP+0x64>)
 80025bc:	f000 f8dd 	bl	800277a <RingBuffClear>
		UART2_SendData(request, strlen(request));
 80025c0:	480c      	ldr	r0, [pc, #48]	; (80025f4 <ESP_SetParamsSoftAP+0x60>)
 80025c2:	f7fd fe0f 	bl	80001e4 <strlen>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4619      	mov	r1, r3
 80025ca:	480a      	ldr	r0, [pc, #40]	; (80025f4 <ESP_SetParamsSoftAP+0x60>)
 80025cc:	f005 fac6 	bl	8007b5c <UART2_SendData>

		if(waitCallBack("OK", 10000))
 80025d0:	f242 7110 	movw	r1, #10000	; 0x2710
 80025d4:	4809      	ldr	r0, [pc, #36]	; (80025fc <ESP_SetParamsSoftAP+0x68>)
 80025d6:	f7ff ff5d 	bl	8002494 <waitCallBack>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <ESP_SetParamsSoftAP+0x50>
		{
			return 1;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <ESP_SetParamsSoftAP+0x52>
		}
	}
	return 0;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	0800ad68 	.word	0x0800ad68
 80025f4:	20017e6c 	.word	0x20017e6c
 80025f8:	20016e68 	.word	0x20016e68
 80025fc:	0800ad4c 	.word	0x0800ad4c

08002600 <ESP_SendData>:

	return 0;
}

uint8_t ESP_SendData(const char *url, uint16_t port, const char *data, uint32_t dataLength, uint8_t flagRN)
{
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	460b      	mov	r3, r1
 800260e:	817b      	strh	r3, [r7, #10]
	requestFlush();
 8002610:	f7ff ff0a 	bl	8002428 <requestFlush>
	sprintf(request, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", url, port);
 8002614:	897b      	ldrh	r3, [r7, #10]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4937      	ldr	r1, [pc, #220]	; (80026f8 <ESP_SendData+0xf8>)
 800261a:	4838      	ldr	r0, [pc, #224]	; (80026fc <ESP_SendData+0xfc>)
 800261c:	f006 feea 	bl	80093f4 <siprintf>
	RingBuffClear(&UART2_rx_data);
 8002620:	4837      	ldr	r0, [pc, #220]	; (8002700 <ESP_SendData+0x100>)
 8002622:	f000 f8aa 	bl	800277a <RingBuffClear>
	UART2_SendData(request, strlen(request));
 8002626:	4835      	ldr	r0, [pc, #212]	; (80026fc <ESP_SendData+0xfc>)
 8002628:	f7fd fddc 	bl	80001e4 <strlen>
 800262c:	4603      	mov	r3, r0
 800262e:	4619      	mov	r1, r3
 8002630:	4832      	ldr	r0, [pc, #200]	; (80026fc <ESP_SendData+0xfc>)
 8002632:	f005 fa93 	bl	8007b5c <UART2_SendData>
	delay(1000);
 8002636:	4b33      	ldr	r3, [pc, #204]	; (8002704 <ESP_SendData+0x104>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800263e:	4798      	blx	r3

	if(waitCallBack("OK", 1000))
 8002640:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002644:	4830      	ldr	r0, [pc, #192]	; (8002708 <ESP_SendData+0x108>)
 8002646:	f7ff ff25 	bl	8002494 <waitCallBack>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d03a      	beq.n	80026c6 <ESP_SendData+0xc6>
	{
		requestFlush();
 8002650:	f7ff feea 	bl	8002428 <requestFlush>
		sprintf(request, "AT+CIPSEND=%lu\r\n", dataLength);
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	492d      	ldr	r1, [pc, #180]	; (800270c <ESP_SendData+0x10c>)
 8002658:	4828      	ldr	r0, [pc, #160]	; (80026fc <ESP_SendData+0xfc>)
 800265a:	f006 fecb 	bl	80093f4 <siprintf>
		RingBuffClear(&UART2_rx_data);
 800265e:	4828      	ldr	r0, [pc, #160]	; (8002700 <ESP_SendData+0x100>)
 8002660:	f000 f88b 	bl	800277a <RingBuffClear>
		UART2_SendData(request, strlen(request));
 8002664:	4825      	ldr	r0, [pc, #148]	; (80026fc <ESP_SendData+0xfc>)
 8002666:	f7fd fdbd 	bl	80001e4 <strlen>
 800266a:	4603      	mov	r3, r0
 800266c:	4619      	mov	r1, r3
 800266e:	4823      	ldr	r0, [pc, #140]	; (80026fc <ESP_SendData+0xfc>)
 8002670:	f005 fa74 	bl	8007b5c <UART2_SendData>
		delay(10);
 8002674:	4b23      	ldr	r3, [pc, #140]	; (8002704 <ESP_SendData+0x104>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	200a      	movs	r0, #10
 800267a:	4798      	blx	r3

		if(waitCallBack(">", 1000) && data != NULL)
 800267c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002680:	4823      	ldr	r0, [pc, #140]	; (8002710 <ESP_SendData+0x110>)
 8002682:	f7ff ff07 	bl	8002494 <waitCallBack>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d02f      	beq.n	80026ec <ESP_SendData+0xec>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d02c      	beq.n	80026ec <ESP_SendData+0xec>
		{
			for(int i = 0; i < dataLength; i++)
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e009      	b.n	80026ac <ESP_SendData+0xac>
			{
				UART2_SendData_byte(data[i]);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f005 fa43 	bl	8007b2c <UART2_SendData_byte>
			for(int i = 0; i < dataLength; i++)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3301      	adds	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d3f1      	bcc.n	8002698 <ESP_SendData+0x98>
			}
			if(flagRN)
 80026b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d017      	beq.n	80026ec <ESP_SendData+0xec>
			{
				UART2_SendData("\r\n", 2);
 80026bc:	2102      	movs	r1, #2
 80026be:	4815      	ldr	r0, [pc, #84]	; (8002714 <ESP_SendData+0x114>)
 80026c0:	f005 fa4c 	bl	8007b5c <UART2_SendData>
 80026c4:	e012      	b.n	80026ec <ESP_SendData+0xec>
			}
		}

	} else {
		requestFlush();
 80026c6:	f7ff feaf 	bl	8002428 <requestFlush>
		sprintf(request, "AT+CIPCLOSE\r\n");
 80026ca:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <ESP_SendData+0xfc>)
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <ESP_SendData+0x118>)
 80026ce:	4614      	mov	r4, r2
 80026d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80026d2:	6020      	str	r0, [r4, #0]
 80026d4:	6061      	str	r1, [r4, #4]
 80026d6:	60a2      	str	r2, [r4, #8]
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	81a3      	strh	r3, [r4, #12]
		UART2_SendData(request, strlen(request));
 80026dc:	4807      	ldr	r0, [pc, #28]	; (80026fc <ESP_SendData+0xfc>)
 80026de:	f7fd fd81 	bl	80001e4 <strlen>
 80026e2:	4603      	mov	r3, r0
 80026e4:	4619      	mov	r1, r3
 80026e6:	4805      	ldr	r0, [pc, #20]	; (80026fc <ESP_SendData+0xfc>)
 80026e8:	f005 fa38 	bl	8007b5c <UART2_SendData>
	}

	return 1;
 80026ec:	2301      	movs	r3, #1
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd90      	pop	{r4, r7, pc}
 80026f6:	bf00      	nop
 80026f8:	0800ada0 	.word	0x0800ada0
 80026fc:	20017e6c 	.word	0x20017e6c
 8002700:	20016e68 	.word	0x20016e68
 8002704:	20000644 	.word	0x20000644
 8002708:	0800ad4c 	.word	0x0800ad4c
 800270c:	0800adbc 	.word	0x0800adbc
 8002710:	0800add0 	.word	0x0800add0
 8002714:	0800ad1c 	.word	0x0800ad1c
 8002718:	0800add4 	.word	0x0800add4

0800271c <RingBuffInit>:
 */

#include "ring_buffer.h"

void RingBuffInit(struct ring_buffer_struct *rng)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	rng->index_in = rng->index_out = 0;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	805a      	strh	r2, [r3, #2]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	885a      	ldrh	r2, [r3, #2]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	801a      	strh	r2, [r3, #0]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <RingBuffPush>:

void RingBuffPush(struct ring_buffer_struct *rng, char element)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	460b      	mov	r3, r1
 8002748:	70fb      	strb	r3, [r7, #3]
	rng->buffer[rng->index_in++] = element;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	b291      	uxth	r1, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	8011      	strh	r1, [r2, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4413      	add	r3, r2
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	711a      	strb	r2, [r3, #4]
	rng->index_in &= BUF_MASK;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002768:	b29a      	uxth	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	801a      	strh	r2, [r3, #0]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <RingBuffClear>:
	}
	return 0;
}

void RingBuffClear(struct ring_buffer_struct *rng)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
	memset(rng->buffer, 0, BUF_SIZE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3304      	adds	r3, #4
 8002786:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f006 fbcd 	bl	8008f2c <memset>
	rng->buffer[0] = 0;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	711a      	strb	r2, [r3, #4]
	rng->index_out = rng->index_in = 0;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	881a      	ldrh	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	805a      	strh	r2, [r3, #2]
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <RingBuffGetArray>:
{
	return (rng->index_in - rng->index_out) & BUF_MASK;
}

char * RingBuffGetArray(struct ring_buffer_struct *rng)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
	return ((char *)rng->buffer);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3304      	adds	r3, #4
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027cc:	4a0e      	ldr	r2, [pc, #56]	; (8002808 <HAL_Init+0x40>)
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <HAL_Init+0x40>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027d8:	4a0b      	ldr	r2, [pc, #44]	; (8002808 <HAL_Init+0x40>)
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_Init+0x40>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027e4:	4a08      	ldr	r2, [pc, #32]	; (8002808 <HAL_Init+0x40>)
 80027e6:	4b08      	ldr	r3, [pc, #32]	; (8002808 <HAL_Init+0x40>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f0:	2003      	movs	r0, #3
 80027f2:	f000 f8ca 	bl	800298a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027f6:	2000      	movs	r0, #0
 80027f8:	f006 f962 	bl	8008ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027fc:	f006 f934 	bl	8008a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023c00 	.word	0x40023c00

0800280c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_IncTick+0x20>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_IncTick+0x24>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4413      	add	r3, r2
 800281c:	4a04      	ldr	r2, [pc, #16]	; (8002830 <HAL_IncTick+0x24>)
 800281e:	6013      	str	r3, [r2, #0]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000000 	.word	0x20000000
 8002830:	2001826c 	.word	0x2001826c

08002834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002850:	4013      	ands	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800285c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002866:	4a04      	ldr	r2, [pc, #16]	; (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	60d3      	str	r3, [r2, #12]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <__NVIC_GetPriorityGrouping+0x18>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	f003 0307 	and.w	r3, r3, #7
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	db0b      	blt.n	80028c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028aa:	4909      	ldr	r1, [pc, #36]	; (80028d0 <__NVIC_EnableIRQ+0x38>)
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	79fa      	ldrb	r2, [r7, #7]
 80028b4:	f002 021f 	and.w	r2, r2, #31
 80028b8:	2001      	movs	r0, #1
 80028ba:	fa00 f202 	lsl.w	r2, r0, r2
 80028be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000e100 	.word	0xe000e100

080028d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	db0a      	blt.n	80028fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e8:	490d      	ldr	r1, [pc, #52]	; (8002920 <__NVIC_SetPriority+0x4c>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	0112      	lsls	r2, r2, #4
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	440b      	add	r3, r1
 80028f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028fc:	e00a      	b.n	8002914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fe:	4909      	ldr	r1, [pc, #36]	; (8002924 <__NVIC_SetPriority+0x50>)
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	3b04      	subs	r3, #4
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	0112      	lsls	r2, r2, #4
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	440b      	add	r3, r1
 8002912:	761a      	strb	r2, [r3, #24]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000e100 	.word	0xe000e100
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f1c3 0307 	rsb	r3, r3, #7
 8002942:	2b04      	cmp	r3, #4
 8002944:	bf28      	it	cs
 8002946:	2304      	movcs	r3, #4
 8002948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3304      	adds	r3, #4
 800294e:	2b06      	cmp	r3, #6
 8002950:	d902      	bls.n	8002958 <NVIC_EncodePriority+0x30>
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3b03      	subs	r3, #3
 8002956:	e000      	b.n	800295a <NVIC_EncodePriority+0x32>
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	2201      	movs	r2, #1
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	1e5a      	subs	r2, r3, #1
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	401a      	ands	r2, r3
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800296e:	2101      	movs	r1, #1
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	1e59      	subs	r1, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	4313      	orrs	r3, r2
         );
}
 800297e:	4618      	mov	r0, r3
 8002980:	3724      	adds	r7, #36	; 0x24
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ff4e 	bl	8002834 <__NVIC_SetPriorityGrouping>
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b2:	f7ff ff63 	bl	800287c <__NVIC_GetPriorityGrouping>
 80029b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	6978      	ldr	r0, [r7, #20]
 80029be:	f7ff ffb3 	bl	8002928 <NVIC_EncodePriority>
 80029c2:	4602      	mov	r2, r0
 80029c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ff82 	bl	80028d4 <__NVIC_SetPriority>
}
 80029d0:	bf00      	nop
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ff56 	bl	8002898 <__NVIC_EnableIRQ>
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	2000000c 	.word	0x2000000c

08002a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a10:	f7ff fff0 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a14:	4601      	mov	r1, r0
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	0b5b      	lsrs	r3, r3, #13
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	4a03      	ldr	r2, [pc, #12]	; (8002a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a22:	5cd3      	ldrb	r3, [r2, r3]
 8002a24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	0800b02c 	.word	0x0800b02c

08002a34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	220f      	movs	r2, #15
 8002a42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a44:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_RCC_GetClockConfig+0x5c>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0203 	and.w	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <HAL_RCC_GetClockConfig+0x5c>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <HAL_RCC_GetClockConfig+0x5c>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a68:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_RCC_GetClockConfig+0x5c>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	08db      	lsrs	r3, r3, #3
 8002a6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a76:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <HAL_RCC_GetClockConfig+0x60>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 020f 	and.w	r2, r3, #15
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	601a      	str	r2, [r3, #0]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40023c00 	.word	0x40023c00

08002a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e01d      	b.n	8002ae6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f815 	bl	8002aee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f000 f968 	bl	8002dac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6812      	ldr	r2, [r2, #0]
 8002b12:	68d2      	ldr	r2, [r2, #12]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b06      	cmp	r3, #6
 8002b2a:	d007      	beq.n	8002b3c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d122      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d11b      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0202 	mvn.w	r2, #2
 8002b76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f8ee 	bl	8002d6e <HAL_TIM_IC_CaptureCallback>
 8002b92:	e005      	b.n	8002ba0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f8e0 	bl	8002d5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f8f1 	bl	8002d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d122      	bne.n	8002bfa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d11b      	bne.n	8002bfa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f06f 0204 	mvn.w	r2, #4
 8002bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f8c4 	bl	8002d6e <HAL_TIM_IC_CaptureCallback>
 8002be6:	e005      	b.n	8002bf4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f8b6 	bl	8002d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f8c7 	bl	8002d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d122      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d11b      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f06f 0208 	mvn.w	r2, #8
 8002c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2204      	movs	r2, #4
 8002c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f89a 	bl	8002d6e <HAL_TIM_IC_CaptureCallback>
 8002c3a:	e005      	b.n	8002c48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f88c 	bl	8002d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f89d 	bl	8002d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b10      	cmp	r3, #16
 8002c5a:	d122      	bne.n	8002ca2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d11b      	bne.n	8002ca2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f06f 0210 	mvn.w	r2, #16
 8002c72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2208      	movs	r2, #8
 8002c78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f870 	bl	8002d6e <HAL_TIM_IC_CaptureCallback>
 8002c8e:	e005      	b.n	8002c9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f862 	bl	8002d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f873 	bl	8002d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d10e      	bne.n	8002cce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d107      	bne.n	8002cce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f06f 0201 	mvn.w	r2, #1
 8002cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f005 fc13 	bl	80084f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	2b80      	cmp	r3, #128	; 0x80
 8002cda:	d10e      	bne.n	8002cfa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	2b80      	cmp	r3, #128	; 0x80
 8002ce8:	d107      	bne.n	8002cfa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f903 	bl	8002f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	2b40      	cmp	r3, #64	; 0x40
 8002d06:	d10e      	bne.n	8002d26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	d107      	bne.n	8002d26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f838 	bl	8002d96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d10e      	bne.n	8002d52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d107      	bne.n	8002d52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f06f 0220 	mvn.w	r2, #32
 8002d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f8cd 	bl	8002eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a40      	ldr	r2, [pc, #256]	; (8002ec0 <TIM_Base_SetConfig+0x114>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d013      	beq.n	8002dec <TIM_Base_SetConfig+0x40>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dca:	d00f      	beq.n	8002dec <TIM_Base_SetConfig+0x40>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a3d      	ldr	r2, [pc, #244]	; (8002ec4 <TIM_Base_SetConfig+0x118>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d00b      	beq.n	8002dec <TIM_Base_SetConfig+0x40>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a3c      	ldr	r2, [pc, #240]	; (8002ec8 <TIM_Base_SetConfig+0x11c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d007      	beq.n	8002dec <TIM_Base_SetConfig+0x40>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a3b      	ldr	r2, [pc, #236]	; (8002ecc <TIM_Base_SetConfig+0x120>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d003      	beq.n	8002dec <TIM_Base_SetConfig+0x40>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a3a      	ldr	r2, [pc, #232]	; (8002ed0 <TIM_Base_SetConfig+0x124>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d108      	bne.n	8002dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a2f      	ldr	r2, [pc, #188]	; (8002ec0 <TIM_Base_SetConfig+0x114>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d02b      	beq.n	8002e5e <TIM_Base_SetConfig+0xb2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0c:	d027      	beq.n	8002e5e <TIM_Base_SetConfig+0xb2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a2c      	ldr	r2, [pc, #176]	; (8002ec4 <TIM_Base_SetConfig+0x118>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d023      	beq.n	8002e5e <TIM_Base_SetConfig+0xb2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a2b      	ldr	r2, [pc, #172]	; (8002ec8 <TIM_Base_SetConfig+0x11c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d01f      	beq.n	8002e5e <TIM_Base_SetConfig+0xb2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a2a      	ldr	r2, [pc, #168]	; (8002ecc <TIM_Base_SetConfig+0x120>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d01b      	beq.n	8002e5e <TIM_Base_SetConfig+0xb2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a29      	ldr	r2, [pc, #164]	; (8002ed0 <TIM_Base_SetConfig+0x124>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d017      	beq.n	8002e5e <TIM_Base_SetConfig+0xb2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a28      	ldr	r2, [pc, #160]	; (8002ed4 <TIM_Base_SetConfig+0x128>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <TIM_Base_SetConfig+0xb2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a27      	ldr	r2, [pc, #156]	; (8002ed8 <TIM_Base_SetConfig+0x12c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00f      	beq.n	8002e5e <TIM_Base_SetConfig+0xb2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a26      	ldr	r2, [pc, #152]	; (8002edc <TIM_Base_SetConfig+0x130>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00b      	beq.n	8002e5e <TIM_Base_SetConfig+0xb2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a25      	ldr	r2, [pc, #148]	; (8002ee0 <TIM_Base_SetConfig+0x134>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d007      	beq.n	8002e5e <TIM_Base_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a24      	ldr	r2, [pc, #144]	; (8002ee4 <TIM_Base_SetConfig+0x138>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d003      	beq.n	8002e5e <TIM_Base_SetConfig+0xb2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a23      	ldr	r2, [pc, #140]	; (8002ee8 <TIM_Base_SetConfig+0x13c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d108      	bne.n	8002e70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <TIM_Base_SetConfig+0x114>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d003      	beq.n	8002ea4 <TIM_Base_SetConfig+0xf8>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a0c      	ldr	r2, [pc, #48]	; (8002ed0 <TIM_Base_SetConfig+0x124>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d103      	bne.n	8002eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	615a      	str	r2, [r3, #20]
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40010000 	.word	0x40010000
 8002ec4:	40000400 	.word	0x40000400
 8002ec8:	40000800 	.word	0x40000800
 8002ecc:	40000c00 	.word	0x40000c00
 8002ed0:	40010400 	.word	0x40010400
 8002ed4:	40014000 	.word	0x40014000
 8002ed8:	40014400 	.word	0x40014400
 8002edc:	40014800 	.word	0x40014800
 8002ee0:	40001800 	.word	0x40001800
 8002ee4:	40001c00 	.word	0x40001c00
 8002ee8:	40002000 	.word	0x40002000

08002eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2103      	movs	r1, #3
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	61bb      	str	r3, [r7, #24]
  return result;
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	fab3 f383 	clz	r3, r3
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	431a      	orrs	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	601a      	str	r2, [r3, #0]
}
 8002f66:	bf00      	nop
 8002f68:	3724      	adds	r7, #36	; 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b085      	sub	sp, #20
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	401a      	ands	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	431a      	orrs	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	605a      	str	r2, [r3, #4]
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b089      	sub	sp, #36	; 0x24
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	613b      	str	r3, [r7, #16]
  return result;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	2103      	movs	r1, #3
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	401a      	ands	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	61bb      	str	r3, [r7, #24]
  return result;
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	fab3 f383 	clz	r3, r3
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002ff4:	bf00      	nop
 8002ff6:	3724      	adds	r7, #36	; 0x24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	; 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	613b      	str	r3, [r7, #16]
  return result;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2103      	movs	r1, #3
 8003028:	fa01 f303 	lsl.w	r3, r1, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	401a      	ands	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	61bb      	str	r3, [r7, #24]
  return result;
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	fa01 f303 	lsl.w	r3, r1, r3
 800304c:	431a      	orrs	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	60da      	str	r2, [r3, #12]
}
 8003052:	bf00      	nop
 8003054:	3724      	adds	r7, #36	; 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800305e:	b480      	push	{r7}
 8003060:	b089      	sub	sp, #36	; 0x24
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a1a      	ldr	r2, [r3, #32]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	613b      	str	r3, [r7, #16]
  return result;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	210f      	movs	r1, #15
 8003086:	fa01 f303 	lsl.w	r3, r1, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	401a      	ands	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	61bb      	str	r3, [r7, #24]
  return result;
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	431a      	orrs	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80030b0:	bf00      	nop
 80030b2:	3724      	adds	r7, #36	; 0x24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	613b      	str	r3, [r7, #16]
  return result;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	210f      	movs	r1, #15
 80030e6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	401a      	ands	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	61bb      	str	r3, [r7, #24]
  return result;
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	431a      	orrs	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8003112:	bf00      	nop
 8003114:	3724      	adds	r7, #36	; 0x24
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b088      	sub	sp, #32
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800312c:	2300      	movs	r3, #0
 800312e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	613b      	str	r3, [r7, #16]
  return result;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003148:	e050      	b.n	80031ec <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	2101      	movs	r1, #1
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	4013      	ands	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d042      	beq.n	80031e6 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d003      	beq.n	8003170 <LL_GPIO_Init+0x52>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d10d      	bne.n	800318c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	461a      	mov	r2, r3
 8003176:	69b9      	ldr	r1, [r7, #24]
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ff12 	bl	8002fa2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	461a      	mov	r2, r3
 8003184:	69b9      	ldr	r1, [r7, #24]
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff fef3 	bl	8002f72 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	461a      	mov	r2, r3
 8003192:	69b9      	ldr	r1, [r7, #24]
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff33 	bl	8003000 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d11a      	bne.n	80031d8 <LL_GPIO_Init+0xba>
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	fa93 f3a3 	rbit	r3, r3
 80031ac:	60bb      	str	r3, [r7, #8]
  return result;
 80031ae:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80031b0:	fab3 f383 	clz	r3, r3
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b07      	cmp	r3, #7
 80031b8:	d807      	bhi.n	80031ca <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	461a      	mov	r2, r3
 80031c0:	69b9      	ldr	r1, [r7, #24]
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ff4b 	bl	800305e <LL_GPIO_SetAFPin_0_7>
 80031c8:	e006      	b.n	80031d8 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	461a      	mov	r2, r3
 80031d0:	69b9      	ldr	r1, [r7, #24]
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff ff72 	bl	80030bc <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	461a      	mov	r2, r3
 80031de:	69b9      	ldr	r1, [r7, #24]
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff fe97 	bl	8002f14 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3301      	adds	r3, #1
 80031ea:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	fa22 f303 	lsr.w	r3, r2, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1a7      	bne.n	800314a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3720      	adds	r7, #32
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003208:	4b04      	ldr	r3, [pc, #16]	; (800321c <LL_RCC_GetSysClkSource+0x18>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 030c 	and.w	r3, r3, #12
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800

08003220 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <LL_RCC_GetAHBPrescaler+0x18>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800

0800323c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003240:	4b04      	ldr	r3, [pc, #16]	; (8003254 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800

08003258 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <LL_RCC_GetAPB2Prescaler+0x18>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800

08003274 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003278:	4b04      	ldr	r3, [pc, #16]	; (800328c <LL_RCC_PLL_GetMainSource+0x18>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003280:	4618      	mov	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800

08003290 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <LL_RCC_PLL_GetN+0x18>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	099b      	lsrs	r3, r3, #6
 800329a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800329e:	4618      	mov	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	40023800 	.word	0x40023800

080032ac <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <LL_RCC_PLL_GetP+0x18>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800

080032c8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <LL_RCC_PLL_GetDivider+0x18>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800

080032e4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80032ec:	f000 f820 	bl	8003330 <RCC_GetSystemClockFreq>
 80032f0:	4602      	mov	r2, r0
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 f83e 	bl	800337c <RCC_GetHCLKClockFreq>
 8003300:	4602      	mov	r2, r0
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f84c 	bl	80033a8 <RCC_GetPCLK1ClockFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f858 	bl	80033d0 <RCC_GetPCLK2ClockFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	60da      	str	r2, [r3, #12]
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800333a:	f7ff ff63 	bl	8003204 <LL_RCC_GetSysClkSource>
 800333e:	4603      	mov	r3, r0
 8003340:	2b04      	cmp	r3, #4
 8003342:	d006      	beq.n	8003352 <RCC_GetSystemClockFreq+0x22>
 8003344:	2b08      	cmp	r3, #8
 8003346:	d007      	beq.n	8003358 <RCC_GetSystemClockFreq+0x28>
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <RCC_GetSystemClockFreq+0x44>)
 800334e:	607b      	str	r3, [r7, #4]
      break;
 8003350:	e00a      	b.n	8003368 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003352:	4b09      	ldr	r3, [pc, #36]	; (8003378 <RCC_GetSystemClockFreq+0x48>)
 8003354:	607b      	str	r3, [r7, #4]
      break;
 8003356:	e007      	b.n	8003368 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003358:	2008      	movs	r0, #8
 800335a:	f000 f84d 	bl	80033f8 <RCC_PLL_GetFreqDomain_SYS>
 800335e:	6078      	str	r0, [r7, #4]
      break;
 8003360:	e002      	b.n	8003368 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003362:	4b04      	ldr	r3, [pc, #16]	; (8003374 <RCC_GetSystemClockFreq+0x44>)
 8003364:	607b      	str	r3, [r7, #4]
      break;
 8003366:	bf00      	nop
  }

  return frequency;
 8003368:	687b      	ldr	r3, [r7, #4]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	00f42400 	.word	0x00f42400
 8003378:	007a1200 	.word	0x007a1200

0800337c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003384:	f7ff ff4c 	bl	8003220 <LL_RCC_GetAHBPrescaler>
 8003388:	4603      	mov	r3, r0
 800338a:	091b      	lsrs	r3, r3, #4
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <RCC_GetHCLKClockFreq+0x28>)
 8003392:	5cd3      	ldrb	r3, [r2, r3]
 8003394:	461a      	mov	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	40d3      	lsrs	r3, r2
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	0800b01c 	.word	0x0800b01c

080033a8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80033b0:	f7ff ff44 	bl	800323c <LL_RCC_GetAPB1Prescaler>
 80033b4:	4603      	mov	r3, r0
 80033b6:	0a9b      	lsrs	r3, r3, #10
 80033b8:	4a04      	ldr	r2, [pc, #16]	; (80033cc <RCC_GetPCLK1ClockFreq+0x24>)
 80033ba:	5cd3      	ldrb	r3, [r2, r3]
 80033bc:	461a      	mov	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	40d3      	lsrs	r3, r2
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	0800b02c 	.word	0x0800b02c

080033d0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80033d8:	f7ff ff3e 	bl	8003258 <LL_RCC_GetAPB2Prescaler>
 80033dc:	4603      	mov	r3, r0
 80033de:	0b5b      	lsrs	r3, r3, #13
 80033e0:	4a04      	ldr	r2, [pc, #16]	; (80033f4 <RCC_GetPCLK2ClockFreq+0x24>)
 80033e2:	5cd3      	ldrb	r3, [r2, r3]
 80033e4:	461a      	mov	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	40d3      	lsrs	r3, r2
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	0800b02c 	.word	0x0800b02c

080033f8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	2300      	movs	r3, #0
 800340a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800340c:	f7ff ff32 	bl	8003274 <LL_RCC_PLL_GetMainSource>
 8003410:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8003418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800341c:	d003      	beq.n	8003426 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 800341e:	e005      	b.n	800342c <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003422:	617b      	str	r3, [r7, #20]
      break;
 8003424:	e005      	b.n	8003432 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003426:	4b12      	ldr	r3, [pc, #72]	; (8003470 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003428:	617b      	str	r3, [r7, #20]
      break;
 800342a:	e002      	b.n	8003432 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800342e:	617b      	str	r3, [r7, #20]
      break;
 8003430:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d113      	bne.n	8003460 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003438:	f7ff ff46 	bl	80032c8 <LL_RCC_PLL_GetDivider>
 800343c:	4602      	mov	r2, r0
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	fbb3 f4f2 	udiv	r4, r3, r2
 8003444:	f7ff ff24 	bl	8003290 <LL_RCC_PLL_GetN>
 8003448:	4603      	mov	r3, r0
 800344a:	fb03 f404 	mul.w	r4, r3, r4
 800344e:	f7ff ff2d 	bl	80032ac <LL_RCC_PLL_GetP>
 8003452:	4603      	mov	r3, r0
 8003454:	0c1b      	lsrs	r3, r3, #16
 8003456:	3301      	adds	r3, #1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	fbb4 f3f3 	udiv	r3, r4, r3
 800345e:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003460:	693b      	ldr	r3, [r7, #16]
}
 8003462:	4618      	mov	r0, r3
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	bd90      	pop	{r4, r7, pc}
 800346a:	bf00      	nop
 800346c:	00f42400 	.word	0x00f42400
 8003470:	007a1200 	.word	0x007a1200

08003474 <LL_RTC_SetHourFormat>:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetHourFormat(RTC_TypeDef *RTCx, uint32_t HourFormat)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	609a      	str	r2, [r3, #8]
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <LL_RTC_GetHourFormat>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  */
__STATIC_INLINE uint32_t LL_RTC_GetHourFormat(RTC_TypeDef *RTCx)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f04f 32ff 	mov.w	r2, #4294967295
 80034c4:	60da      	str	r2, [r3, #12]
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034e0:	60da      	str	r2, [r3, #12]
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <LL_RTC_IsShadowRegBypassEnabled>:
  * @rmtoll CR           BYPSHAD       LL_RTC_IsShadowRegBypassEnabled
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsShadowRegBypassEnabled(RTC_TypeDef *RTCx)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b20      	cmp	r3, #32
 8003500:	bf0c      	ite	eq
 8003502:	2301      	moveq	r3, #1
 8003504:	2300      	movne	r3, #0
 8003506:	b2db      	uxtb	r3, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	041b      	lsls	r3, r3, #16
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	611a      	str	r2, [r3, #16]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800354e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	611a      	str	r2, [r3, #16]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	22ff      	movs	r2, #255	; 0xff
 8003572:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	22ca      	movs	r2, #202	; 0xca
 800358c:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2253      	movs	r2, #83	; 0x53
 8003592:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <LL_RTC_TIME_Config>:
  * @param  Minutes Value between Min_Data=0x00 and Max_Data=0x59
  * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TIME_Config(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 80035a0:	b490      	push	{r4, r7}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;

  temp = Format12_24                                                                                    | \
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	041b      	lsls	r3, r3, #16
 80035b2:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 80035c0:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 80035c6:	ea42 0403 	orr.w	r4, r2, r3
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 80035d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035d6:	ea43 0204 	orr.w	r2, r3, r4
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	601a      	str	r2, [r3, #0]
}
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc90      	pop	{r4, r7}
 80035e6:	4770      	bx	lr

080035e8 <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 80035e8:	b490      	push	{r4, r7}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;
 80035f6:	2400      	movs	r4, #0

  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	041b      	lsls	r3, r3, #16
 8003600:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8003604:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	021b      	lsls	r3, r3, #8
 800360a:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 800360c:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8003612:	ea42 0403 	orr.w	r4, r2, r3

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <LL_RTC_DATE_Config+0x48>)
 800361c:	4013      	ands	r3, r2
 800361e:	ea43 0204 	orr.w	r2, r3, r4
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	605a      	str	r2, [r3, #4]
}
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bc90      	pop	{r4, r7}
 800362e:	4770      	bx	lr
 8003630:	ff0000c0 	.word	0xff0000c0

08003634 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
}
 800364e:	4618      	mov	r0, r3
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b20      	cmp	r3, #32
 800366c:	bf0c      	ite	eq
 800366e:	2301      	moveq	r3, #1
 8003670:	2300      	movne	r3, #0
 8003672:	b2db      	uxtb	r3, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	60da      	str	r2, [r3, #12]
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b4:	bf0c      	ite	eq
 80036b6:	2301      	moveq	r3, #1
 80036b8:	2300      	movne	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	e000e010 	.word	0xe000e010

080036cc <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff ff50 	bl	8003580 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f971 	bl	80039c8 <LL_RTC_EnterInitMode>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d016      	beq.n	800371a <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4619      	mov	r1, r3
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff febe 	bl	8003474 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4619      	mov	r1, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff ff1c 	bl	800353c <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ff02 	bl	8003514 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff fede 	bl	80034d2 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ff23 	bl	8003566 <LL_RTC_EnableWriteProtection>

  return status;
 8003720:	7bfb      	ldrb	r3, [r7, #15]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 800372c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800372e:	b089      	sub	sp, #36	; 0x24
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff fea9 	bl	800349a <LL_RTC_GetHourFormat>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10c      	bne.n	8003768 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e008      	b.n	8003768 <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7ff fe9f 	bl	800349a <LL_RTC_GetHourFormat>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d102      	bne.n	8003768 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f7ff ff09 	bl	8003580 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f92a 	bl	80039c8 <LL_RTC_EnterInitMode>
 8003774:	4603      	mov	r3, r0
 8003776:	2b01      	cmp	r3, #1
 8003778:	d073      	beq.n	8003862 <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00f      	beq.n	80037a0 <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6819      	ldr	r1, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	791b      	ldrb	r3, [r3, #4]
 8003788:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 800378e:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	4603      	mov	r3, r0
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f7ff ff01 	bl	80035a0 <LL_RTC_TIME_Config>
 800379e:	e04f      	b.n	8003840 <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681c      	ldr	r4, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	791b      	ldrb	r3, [r3, #4]
 80037a8:	4a32      	ldr	r2, [pc, #200]	; (8003874 <LL_RTC_TIME_Init+0x148>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	08db      	lsrs	r3, r3, #3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	b2d8      	uxtb	r0, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	791a      	ldrb	r2, [r3, #4]
 80037ba:	4b2e      	ldr	r3, [pc, #184]	; (8003874 <LL_RTC_TIME_Init+0x148>)
 80037bc:	fba3 1302 	umull	r1, r3, r3, r2
 80037c0:	08d9      	lsrs	r1, r3, #3
 80037c2:	460b      	mov	r3, r1
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	4303      	orrs	r3, r0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	795b      	ldrb	r3, [r3, #5]
 80037d8:	4a26      	ldr	r2, [pc, #152]	; (8003874 <LL_RTC_TIME_Init+0x148>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	08db      	lsrs	r3, r3, #3
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	b2d8      	uxtb	r0, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	795a      	ldrb	r2, [r3, #5]
 80037ea:	4b22      	ldr	r3, [pc, #136]	; (8003874 <LL_RTC_TIME_Init+0x148>)
 80037ec:	fba3 1302 	umull	r1, r3, r3, r2
 80037f0:	08d9      	lsrs	r1, r3, #3
 80037f2:	460b      	mov	r3, r1
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	4303      	orrs	r3, r0
 8003800:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8003802:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	799b      	ldrb	r3, [r3, #6]
 8003808:	4a1a      	ldr	r2, [pc, #104]	; (8003874 <LL_RTC_TIME_Init+0x148>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	08db      	lsrs	r3, r3, #3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	b2d8      	uxtb	r0, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	799a      	ldrb	r2, [r3, #6]
 800381a:	4b16      	ldr	r3, [pc, #88]	; (8003874 <LL_RTC_TIME_Init+0x148>)
 800381c:	fba3 1302 	umull	r1, r3, r3, r2
 8003820:	08d9      	lsrs	r1, r3, #3
 8003822:	460b      	mov	r3, r1
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	4303      	orrs	r3, r0
 8003830:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	4633      	mov	r3, r6
 8003836:	462a      	mov	r2, r5
 8003838:	4621      	mov	r1, r4
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f7ff feb0 	bl	80035a0 <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTC);
 8003840:	480d      	ldr	r0, [pc, #52]	; (8003878 <LL_RTC_TIME_Init+0x14c>)
 8003842:	f7ff fe46 	bl	80034d2 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7ff fe51 	bl	80034ee <LL_RTC_IsShadowRegBypassEnabled>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d105      	bne.n	800385e <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f8ed 	bl	8003a32 <LL_RTC_WaitForSynchro>
 8003858:	4603      	mov	r3, r0
 800385a:	75fb      	strb	r3, [r7, #23]
 800385c:	e001      	b.n	8003862 <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 800385e:	2300      	movs	r3, #0
 8003860:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff fe7f 	bl	8003566 <LL_RTC_EnableWriteProtection>

  return status;
 8003868:	7dfb      	ldrb	r3, [r7, #23]
}
 800386a:	4618      	mov	r0, r3
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003872:	bf00      	nop
 8003874:	cccccccd 	.word	0xcccccccd
 8003878:	40002800 	.word	0x40002800

0800387c <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 800387c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387e:	b089      	sub	sp, #36	; 0x24
 8003880:	af02      	add	r7, sp, #8
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10e      	bne.n	80038b0 <LL_RTC_DATE_Init+0x34>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	785b      	ldrb	r3, [r3, #1]
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b00      	cmp	r3, #0
 800389c:	d008      	beq.n	80038b0 <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	785b      	ldrb	r3, [r3, #1]
 80038a2:	f023 0310 	bic.w	r3, r3, #16
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	330a      	adds	r3, #10
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f7ff fe65 	bl	8003580 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f886 	bl	80039c8 <LL_RTC_EnterInitMode>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d075      	beq.n	80039ae <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d010      	beq.n	80038ea <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	4619      	mov	r1, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	789b      	ldrb	r3, [r3, #2]
 80038d2:	461a      	mov	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	785b      	ldrb	r3, [r3, #1]
 80038d8:	4618      	mov	r0, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	78db      	ldrb	r3, [r3, #3]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	4603      	mov	r3, r0
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f7ff fe80 	bl	80035e8 <LL_RTC_DATE_Config>
 80038e8:	e050      	b.n	800398c <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	461c      	mov	r4, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	789b      	ldrb	r3, [r3, #2]
 80038f4:	4a32      	ldr	r2, [pc, #200]	; (80039c0 <LL_RTC_DATE_Init+0x144>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	08db      	lsrs	r3, r3, #3
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	b2d8      	uxtb	r0, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	789a      	ldrb	r2, [r3, #2]
 8003906:	4b2e      	ldr	r3, [pc, #184]	; (80039c0 <LL_RTC_DATE_Init+0x144>)
 8003908:	fba3 1302 	umull	r1, r3, r3, r2
 800390c:	08d9      	lsrs	r1, r3, #3
 800390e:	460b      	mov	r3, r1
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	4303      	orrs	r3, r0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	785b      	ldrb	r3, [r3, #1]
 8003924:	4a26      	ldr	r2, [pc, #152]	; (80039c0 <LL_RTC_DATE_Init+0x144>)
 8003926:	fba2 2303 	umull	r2, r3, r2, r3
 800392a:	08db      	lsrs	r3, r3, #3
 800392c:	b2db      	uxtb	r3, r3
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	b2d8      	uxtb	r0, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	785a      	ldrb	r2, [r3, #1]
 8003936:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <LL_RTC_DATE_Init+0x144>)
 8003938:	fba3 1302 	umull	r1, r3, r3, r2
 800393c:	08d9      	lsrs	r1, r3, #3
 800393e:	460b      	mov	r3, r1
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	b2db      	uxtb	r3, r3
 800394a:	4303      	orrs	r3, r0
 800394c:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800394e:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	78db      	ldrb	r3, [r3, #3]
 8003954:	4a1a      	ldr	r2, [pc, #104]	; (80039c0 <LL_RTC_DATE_Init+0x144>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	08db      	lsrs	r3, r3, #3
 800395c:	b2db      	uxtb	r3, r3
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	b2d8      	uxtb	r0, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	78da      	ldrb	r2, [r3, #3]
 8003966:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <LL_RTC_DATE_Init+0x144>)
 8003968:	fba3 1302 	umull	r1, r3, r3, r2
 800396c:	08d9      	lsrs	r1, r3, #3
 800396e:	460b      	mov	r3, r1
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	b2db      	uxtb	r3, r3
 800397a:	4303      	orrs	r3, r0
 800397c:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	4633      	mov	r3, r6
 8003982:	462a      	mov	r2, r5
 8003984:	4621      	mov	r1, r4
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f7ff fe2e 	bl	80035e8 <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTC);
 800398c:	480d      	ldr	r0, [pc, #52]	; (80039c4 <LL_RTC_DATE_Init+0x148>)
 800398e:	f7ff fda0 	bl	80034d2 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f7ff fdab 	bl	80034ee <LL_RTC_IsShadowRegBypassEnabled>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d105      	bne.n	80039aa <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f847 	bl	8003a32 <LL_RTC_WaitForSynchro>
 80039a4:	4603      	mov	r3, r0
 80039a6:	75fb      	strb	r3, [r7, #23]
 80039a8:	e001      	b.n	80039ae <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 80039aa:	2300      	movs	r3, #0
 80039ac:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f7ff fdd9 	bl	8003566 <LL_RTC_EnableWriteProtection>

  return status;
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039be:	bf00      	nop
 80039c0:	cccccccd 	.word	0xcccccccd
 80039c4:	40002800 	.word	0x40002800

080039c8 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 80039d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039d4:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 80039d6:	2300      	movs	r3, #0
 80039d8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff fe28 	bl	8003634 <LL_RTC_IsActiveFlag_INIT>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11e      	bne.n	8003a28 <LL_RTC_EnterInitMode+0x60>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff fd63 	bl	80034b6 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff fe1f 	bl	8003634 <LL_RTC_IsActiveFlag_INIT>
 80039f6:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 80039f8:	e010      	b.n	8003a1c <LL_RTC_EnterInitMode+0x54>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80039fa:	f7ff fe53 	bl	80036a4 <LL_SYSTICK_IsActiveCounterFlag>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d102      	bne.n	8003a0a <LL_RTC_EnterInitMode+0x42>
      {
        timeout --;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fe12 	bl	8003634 <LL_RTC_IsActiveFlag_INIT>
 8003a10:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <LL_RTC_EnterInitMode+0x54>
      {
        status = ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <LL_RTC_EnterInitMode+0x60>
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d1e8      	bne.n	80039fa <LL_RTC_EnterInitMode+0x32>
      }
    }
  }
  return status;
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b086      	sub	sp, #24
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8003a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a3e:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8003a40:	2300      	movs	r3, #0
 8003a42:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff fe19 	bl	8003680 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff fe03 	bl	800365a <LL_RTC_IsActiveFlag_RS>
 8003a54:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 8003a56:	e010      	b.n	8003a7a <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003a58:	f7ff fe24 	bl	80036a4 <LL_SYSTICK_IsActiveCounterFlag>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d102      	bne.n	8003a68 <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff fdf6 	bl	800365a <LL_RTC_IsActiveFlag_RS>
 8003a6e:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <LL_RTC_WaitForSynchro+0x54>
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1e8      	bne.n	8003a58 <LL_RTC_WaitForSynchro+0x26>
    }
  }

  if (status != ERROR)
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d01e      	beq.n	8003aca <LL_RTC_WaitForSynchro+0x98>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 8003a8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a90:	60fb      	str	r3, [r7, #12]
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff fde1 	bl	800365a <LL_RTC_IsActiveFlag_RS>
 8003a98:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8003a9a:	e010      	b.n	8003abe <LL_RTC_WaitForSynchro+0x8c>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003a9c:	f7ff fe02 	bl	80036a4 <LL_SYSTICK_IsActiveCounterFlag>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d102      	bne.n	8003aac <LL_RTC_WaitForSynchro+0x7a>
      {
        timeout--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff fdd4 	bl	800365a <LL_RTC_IsActiveFlag_RS>
 8003ab2:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <LL_RTC_WaitForSynchro+0x8c>
      {
        status = ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <LL_RTC_WaitForSynchro+0x98>
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d1e8      	bne.n	8003a9c <LL_RTC_WaitForSynchro+0x6a>
      }
    }
  }

  return (status);
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae4:	2b40      	cmp	r3, #64	; 0x40
 8003ae6:	d101      	bne.n	8003aec <LL_SPI_IsEnabled+0x18>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <LL_SPI_IsEnabled+0x1a>
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	611a      	str	r2, [r3, #16]
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ffd3 	bl	8003ad4 <LL_SPI_IsEnabled>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d139      	bne.n	8003ba8 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b3c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	6811      	ldr	r1, [r2, #0]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	6852      	ldr	r2, [r2, #4]
 8003b48:	4311      	orrs	r1, r2
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	6892      	ldr	r2, [r2, #8]
 8003b4e:	4311      	orrs	r1, r2
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	68d2      	ldr	r2, [r2, #12]
 8003b54:	4311      	orrs	r1, r2
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	6912      	ldr	r2, [r2, #16]
 8003b5a:	4311      	orrs	r1, r2
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	6952      	ldr	r2, [r2, #20]
 8003b60:	4311      	orrs	r1, r2
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	6992      	ldr	r2, [r2, #24]
 8003b66:	4311      	orrs	r1, r2
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	69d2      	ldr	r2, [r2, #28]
 8003b6c:	4311      	orrs	r1, r2
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	6a12      	ldr	r2, [r2, #32]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f023 0204 	bic.w	r2, r3, #4
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	0c1b      	lsrs	r3, r3, #16
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b96:	d105      	bne.n	8003ba4 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff ffab 	bl	8003afa <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	61da      	str	r2, [r3, #28]
  return status;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	611a      	str	r2, [r3, #16]
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	615a      	str	r2, [r3, #20]
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8003c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c38:	b091      	sub	sp, #68	; 0x44
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003c3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c40:	637a      	str	r2, [r7, #52]	; 0x34
 8003c42:	633b      	str	r3, [r7, #48]	; 0x30
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c4a:	f040 80a7 	bne.w	8003d9c <LL_USART_SetBaudRate+0x168>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	4619      	mov	r1, r3
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4614      	mov	r4, r2
 8003c5a:	18db      	adds	r3, r3, r3
 8003c5c:	eb44 0404 	adc.w	r4, r4, r4
 8003c60:	185b      	adds	r3, r3, r1
 8003c62:	eb44 0402 	adc.w	r4, r4, r2
 8003c66:	00e6      	lsls	r6, r4, #3
 8003c68:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8003c6c:	00dd      	lsls	r5, r3, #3
 8003c6e:	462b      	mov	r3, r5
 8003c70:	4634      	mov	r4, r6
 8003c72:	185d      	adds	r5, r3, r1
 8003c74:	eb44 0602 	adc.w	r6, r4, r2
 8003c78:	4628      	mov	r0, r5
 8003c7a:	4631      	mov	r1, r6
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7e:	f04f 0400 	mov.w	r4, #0
 8003c82:	18db      	adds	r3, r3, r3
 8003c84:	eb44 0404 	adc.w	r4, r4, r4
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4623      	mov	r3, r4
 8003c8c:	f7fc fb08 	bl	80002a0 <__aeabi_uldivmod>
 8003c90:	4603      	mov	r3, r0
 8003c92:	460c      	mov	r4, r1
 8003c94:	461a      	mov	r2, r3
 8003c96:	4ba1      	ldr	r3, [pc, #644]	; (8003f1c <LL_USART_SetBaudRate+0x2e8>)
 8003c98:	fba3 2302 	umull	r2, r3, r3, r2
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	b29d      	uxth	r5, r3
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4614      	mov	r4, r2
 8003cb0:	18db      	adds	r3, r3, r3
 8003cb2:	eb44 0404 	adc.w	r4, r4, r4
 8003cb6:	185b      	adds	r3, r3, r1
 8003cb8:	eb44 0402 	adc.w	r4, r4, r2
 8003cbc:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8003cc0:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8003cc4:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8003cc8:	4653      	mov	r3, sl
 8003cca:	465c      	mov	r4, fp
 8003ccc:	eb13 0a01 	adds.w	sl, r3, r1
 8003cd0:	eb44 0b02 	adc.w	fp, r4, r2
 8003cd4:	4650      	mov	r0, sl
 8003cd6:	4659      	mov	r1, fp
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	f04f 0400 	mov.w	r4, #0
 8003cde:	18db      	adds	r3, r3, r3
 8003ce0:	eb44 0404 	adc.w	r4, r4, r4
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4623      	mov	r3, r4
 8003ce8:	f7fc fada 	bl	80002a0 <__aeabi_uldivmod>
 8003cec:	4603      	mov	r3, r0
 8003cee:	460c      	mov	r4, r1
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4b8a      	ldr	r3, [pc, #552]	; (8003f1c <LL_USART_SetBaudRate+0x2e8>)
 8003cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	2164      	movs	r1, #100	; 0x64
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	3332      	adds	r3, #50	; 0x32
 8003d06:	4a85      	ldr	r2, [pc, #532]	; (8003f1c <LL_USART_SetBaudRate+0x2e8>)
 8003d08:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	442b      	add	r3, r5
 8003d1c:	b29d      	uxth	r5, r3
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	4619      	mov	r1, r3
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4614      	mov	r4, r2
 8003d2a:	18db      	adds	r3, r3, r3
 8003d2c:	eb44 0404 	adc.w	r4, r4, r4
 8003d30:	185b      	adds	r3, r3, r1
 8003d32:	eb44 0402 	adc.w	r4, r4, r2
 8003d36:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003d3a:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003d3e:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003d42:	4643      	mov	r3, r8
 8003d44:	464c      	mov	r4, r9
 8003d46:	eb13 0801 	adds.w	r8, r3, r1
 8003d4a:	eb44 0902 	adc.w	r9, r4, r2
 8003d4e:	4640      	mov	r0, r8
 8003d50:	4649      	mov	r1, r9
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	f04f 0400 	mov.w	r4, #0
 8003d58:	18db      	adds	r3, r3, r3
 8003d5a:	eb44 0404 	adc.w	r4, r4, r4
 8003d5e:	461a      	mov	r2, r3
 8003d60:	4623      	mov	r3, r4
 8003d62:	f7fc fa9d 	bl	80002a0 <__aeabi_uldivmod>
 8003d66:	4603      	mov	r3, r0
 8003d68:	460c      	mov	r4, r1
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b6b      	ldr	r3, [pc, #428]	; (8003f1c <LL_USART_SetBaudRate+0x2e8>)
 8003d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2164      	movs	r1, #100	; 0x64
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	3332      	adds	r3, #50	; 0x32
 8003d80:	4a66      	ldr	r2, [pc, #408]	; (8003f1c <LL_USART_SetBaudRate+0x2e8>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	442b      	add	r3, r5
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8003d9a:	e0ba      	b.n	8003f12 <LL_USART_SetBaudRate+0x2de>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9e:	4619      	mov	r1, r3
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4614      	mov	r4, r2
 8003da8:	18db      	adds	r3, r3, r3
 8003daa:	eb44 0404 	adc.w	r4, r4, r4
 8003dae:	185b      	adds	r3, r3, r1
 8003db0:	eb44 0402 	adc.w	r4, r4, r2
 8003db4:	00e0      	lsls	r0, r4, #3
 8003db6:	6178      	str	r0, [r7, #20]
 8003db8:	6978      	ldr	r0, [r7, #20]
 8003dba:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003dbe:	6178      	str	r0, [r7, #20]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003dc8:	185d      	adds	r5, r3, r1
 8003dca:	eb44 0602 	adc.w	r6, r4, r2
 8003dce:	4628      	mov	r0, r5
 8003dd0:	4631      	mov	r1, r6
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	f04f 0400 	mov.w	r4, #0
 8003dd8:	00a2      	lsls	r2, r4, #2
 8003dda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dde:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003de8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dec:	f7fc fa58 	bl	80002a0 <__aeabi_uldivmod>
 8003df0:	4603      	mov	r3, r0
 8003df2:	460c      	mov	r4, r1
 8003df4:	461a      	mov	r2, r3
 8003df6:	4b49      	ldr	r3, [pc, #292]	; (8003f1c <LL_USART_SetBaudRate+0x2e8>)
 8003df8:	fba3 2302 	umull	r2, r3, r3, r2
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	b29d      	uxth	r5, r3
 8003e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e06:	4619      	mov	r1, r3
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4614      	mov	r4, r2
 8003e10:	18db      	adds	r3, r3, r3
 8003e12:	eb44 0404 	adc.w	r4, r4, r4
 8003e16:	185b      	adds	r3, r3, r1
 8003e18:	eb44 0402 	adc.w	r4, r4, r2
 8003e1c:	00e0      	lsls	r0, r4, #3
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003e30:	eb13 0801 	adds.w	r8, r3, r1
 8003e34:	eb44 0902 	adc.w	r9, r4, r2
 8003e38:	4640      	mov	r0, r8
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3e:	f04f 0400 	mov.w	r4, #0
 8003e42:	00a2      	lsls	r2, r4, #2
 8003e44:	627a      	str	r2, [r7, #36]	; 0x24
 8003e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e48:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003e4c:	627a      	str	r2, [r7, #36]	; 0x24
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	623b      	str	r3, [r7, #32]
 8003e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e56:	f7fc fa23 	bl	80002a0 <__aeabi_uldivmod>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	460c      	mov	r4, r1
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4b2e      	ldr	r3, [pc, #184]	; (8003f1c <LL_USART_SetBaudRate+0x2e8>)
 8003e62:	fba3 1302 	umull	r1, r3, r3, r2
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	2164      	movs	r1, #100	; 0x64
 8003e6a:	fb01 f303 	mul.w	r3, r1, r3
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	3332      	adds	r3, #50	; 0x32
 8003e74:	4a29      	ldr	r2, [pc, #164]	; (8003f1c <LL_USART_SetBaudRate+0x2e8>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	442b      	add	r3, r5
 8003e86:	b29d      	uxth	r5, r3
 8003e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4614      	mov	r4, r2
 8003e94:	18db      	adds	r3, r3, r3
 8003e96:	eb44 0404 	adc.w	r4, r4, r4
 8003e9a:	185b      	adds	r3, r3, r1
 8003e9c:	eb44 0402 	adc.w	r4, r4, r2
 8003ea0:	00e0      	lsls	r0, r4, #3
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003eb4:	eb13 0801 	adds.w	r8, r3, r1
 8003eb8:	eb44 0902 	adc.w	r9, r4, r2
 8003ebc:	4640      	mov	r0, r8
 8003ebe:	4649      	mov	r1, r9
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec2:	f04f 0400 	mov.w	r4, #0
 8003ec6:	00a2      	lsls	r2, r4, #2
 8003ec8:	61fa      	str	r2, [r7, #28]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003ed0:	61fa      	str	r2, [r7, #28]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eda:	f7fc f9e1 	bl	80002a0 <__aeabi_uldivmod>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	460c      	mov	r4, r1
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <LL_USART_SetBaudRate+0x2e8>)
 8003ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	2164      	movs	r1, #100	; 0x64
 8003eee:	fb01 f303 	mul.w	r3, r1, r3
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	3332      	adds	r3, #50	; 0x32
 8003ef8:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <LL_USART_SetBaudRate+0x2e8>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	442b      	add	r3, r5
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f10:	609a      	str	r2, [r3, #8]
}
 8003f12:	bf00      	nop
 8003f14:	3744      	adds	r7, #68	; 0x44
 8003f16:	46bd      	mov	sp, r7
 8003f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f1c:	51eb851f 	.word	0x51eb851f

08003f20 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fe43 	bl	8003bbe <LL_USART_IsEnabled>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d15e      	bne.n	8003ffc <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f46:	f023 030c 	bic.w	r3, r3, #12
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	6851      	ldr	r1, [r2, #4]
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	68d2      	ldr	r2, [r2, #12]
 8003f52:	4311      	orrs	r1, r2
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	6912      	ldr	r2, [r2, #16]
 8003f58:	4311      	orrs	r1, r2
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	6992      	ldr	r2, [r2, #24]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff fe3a 	bl	8003be6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	4619      	mov	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff fe47 	bl	8003c0c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003f7e:	f107 0308 	add.w	r3, r7, #8
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff f9ae 	bl	80032e4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a1f      	ldr	r2, [pc, #124]	; (8004008 <LL_USART_Init+0xe8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d102      	bne.n	8003f96 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	61bb      	str	r3, [r7, #24]
 8003f94:	e021      	b.n	8003fda <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a1c      	ldr	r2, [pc, #112]	; (800400c <LL_USART_Init+0xec>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d102      	bne.n	8003fa4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	e01a      	b.n	8003fda <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a1a      	ldr	r2, [pc, #104]	; (8004010 <LL_USART_Init+0xf0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d102      	bne.n	8003fb2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	61bb      	str	r3, [r7, #24]
 8003fb0:	e013      	b.n	8003fda <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a17      	ldr	r2, [pc, #92]	; (8004014 <LL_USART_Init+0xf4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d102      	bne.n	8003fc0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	e00c      	b.n	8003fda <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a15      	ldr	r2, [pc, #84]	; (8004018 <LL_USART_Init+0xf8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d102      	bne.n	8003fce <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	61bb      	str	r3, [r7, #24]
 8003fcc:	e005      	b.n	8003fda <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a12      	ldr	r2, [pc, #72]	; (800401c <LL_USART_Init+0xfc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d101      	bne.n	8003fda <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00d      	beq.n	8003ffc <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d009      	beq.n	8003ffc <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	699a      	ldr	r2, [r3, #24]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69b9      	ldr	r1, [r7, #24]
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff fe1c 	bl	8003c34 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003ffc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3720      	adds	r7, #32
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40011000 	.word	0x40011000
 800400c:	40004400 	.word	0x40004400
 8004010:	40004800 	.word	0x40004800
 8004014:	40011400 	.word	0x40011400
 8004018:	40004c00 	.word	0x40004c00
 800401c:	40005000 	.word	0x40005000

08004020 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004028:	4a04      	ldr	r2, [pc, #16]	; (800403c <LL_SetSystemCoreClock+0x1c>)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6013      	str	r3, [r2, #0]
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	2000000c 	.word	0x2000000c

08004040 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004056:	f3ef 8305 	mrs	r3, IPSR
 800405a:	60bb      	str	r3, [r7, #8]
  return(result);
 800405c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10f      	bne.n	8004082 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004062:	f3ef 8310 	mrs	r3, PRIMASK
 8004066:	607b      	str	r3, [r7, #4]
  return(result);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d105      	bne.n	800407a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800406e:	f3ef 8311 	mrs	r3, BASEPRI
 8004072:	603b      	str	r3, [r7, #0]
  return(result);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <osKernelInitialize+0x3a>
 800407a:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <osKernelInitialize+0x64>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d103      	bne.n	800408a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004082:	f06f 0305 	mvn.w	r3, #5
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	e00c      	b.n	80040a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800408a:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <osKernelInitialize+0x64>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d105      	bne.n	800409e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004092:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <osKernelInitialize+0x64>)
 8004094:	2201      	movs	r2, #1
 8004096:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	e002      	b.n	80040a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800409e:	f04f 33ff 	mov.w	r3, #4294967295
 80040a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80040a4:	68fb      	ldr	r3, [r7, #12]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000648 	.word	0x20000648

080040b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040be:	f3ef 8305 	mrs	r3, IPSR
 80040c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80040c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10f      	bne.n	80040ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ca:	f3ef 8310 	mrs	r3, PRIMASK
 80040ce:	607b      	str	r3, [r7, #4]
  return(result);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d105      	bne.n	80040e2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040d6:	f3ef 8311 	mrs	r3, BASEPRI
 80040da:	603b      	str	r3, [r7, #0]
  return(result);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <osKernelStart+0x3a>
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <osKernelStart+0x68>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d103      	bne.n	80040f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80040ea:	f06f 0305 	mvn.w	r3, #5
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e010      	b.n	8004114 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80040f2:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <osKernelStart+0x68>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d109      	bne.n	800410e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80040fa:	f7ff ffa1 	bl	8004040 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80040fe:	4b08      	ldr	r3, [pc, #32]	; (8004120 <osKernelStart+0x68>)
 8004100:	2202      	movs	r2, #2
 8004102:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004104:	f001 fc88 	bl	8005a18 <vTaskStartScheduler>
      stat = osOK;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	e002      	b.n	8004114 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800410e:	f04f 33ff 	mov.w	r3, #4294967295
 8004112:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004114:	68fb      	ldr	r3, [r7, #12]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000648 	.word	0x20000648

08004124 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004124:	b580      	push	{r7, lr}
 8004126:	b090      	sub	sp, #64	; 0x40
 8004128:	af04      	add	r7, sp, #16
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004130:	2300      	movs	r3, #0
 8004132:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004134:	f3ef 8305 	mrs	r3, IPSR
 8004138:	61fb      	str	r3, [r7, #28]
  return(result);
 800413a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800413c:	2b00      	cmp	r3, #0
 800413e:	f040 808f 	bne.w	8004260 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004142:	f3ef 8310 	mrs	r3, PRIMASK
 8004146:	61bb      	str	r3, [r7, #24]
  return(result);
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d105      	bne.n	800415a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800414e:	f3ef 8311 	mrs	r3, BASEPRI
 8004152:	617b      	str	r3, [r7, #20]
  return(result);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <osThreadNew+0x3e>
 800415a:	4b44      	ldr	r3, [pc, #272]	; (800426c <osThreadNew+0x148>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d07e      	beq.n	8004260 <osThreadNew+0x13c>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d07b      	beq.n	8004260 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800416c:	2318      	movs	r3, #24
 800416e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004174:	f04f 33ff 	mov.w	r3, #4294967295
 8004178:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d045      	beq.n	800420c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <osThreadNew+0x6a>
        name = attr->name;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d008      	beq.n	80041b4 <osThreadNew+0x90>
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	2b38      	cmp	r3, #56	; 0x38
 80041a6:	d805      	bhi.n	80041b4 <osThreadNew+0x90>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <osThreadNew+0x94>
        return (NULL);
 80041b4:	2300      	movs	r3, #0
 80041b6:	e054      	b.n	8004262 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	089b      	lsrs	r3, r3, #2
 80041c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00e      	beq.n	80041ee <osThreadNew+0xca>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	2b5b      	cmp	r3, #91	; 0x5b
 80041d6:	d90a      	bls.n	80041ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d006      	beq.n	80041ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <osThreadNew+0xca>
        mem = 1;
 80041e8:	2301      	movs	r3, #1
 80041ea:	623b      	str	r3, [r7, #32]
 80041ec:	e010      	b.n	8004210 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10c      	bne.n	8004210 <osThreadNew+0xec>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d108      	bne.n	8004210 <osThreadNew+0xec>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d104      	bne.n	8004210 <osThreadNew+0xec>
          mem = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	623b      	str	r3, [r7, #32]
 800420a:	e001      	b.n	8004210 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d110      	bne.n	8004238 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800421e:	9202      	str	r2, [sp, #8]
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800422a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f001 fa21 	bl	8005674 <xTaskCreateStatic>
 8004232:	4603      	mov	r3, r0
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	e013      	b.n	8004260 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d110      	bne.n	8004260 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	b29a      	uxth	r2, r3
 8004242:	f107 0310 	add.w	r3, r7, #16
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f001 fa69 	bl	8005728 <xTaskCreate>
 8004256:	4603      	mov	r3, r0
 8004258:	2b01      	cmp	r3, #1
 800425a:	d001      	beq.n	8004260 <osThreadNew+0x13c>
          hTask = NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004260:	693b      	ldr	r3, [r7, #16]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3730      	adds	r7, #48	; 0x30
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000648 	.word	0x20000648

08004270 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004278:	f3ef 8305 	mrs	r3, IPSR
 800427c:	613b      	str	r3, [r7, #16]
  return(result);
 800427e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10f      	bne.n	80042a4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004284:	f3ef 8310 	mrs	r3, PRIMASK
 8004288:	60fb      	str	r3, [r7, #12]
  return(result);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d105      	bne.n	800429c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004290:	f3ef 8311 	mrs	r3, BASEPRI
 8004294:	60bb      	str	r3, [r7, #8]
  return(result);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <osDelay+0x3c>
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <osDelay+0x58>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d103      	bne.n	80042ac <osDelay+0x3c>
    stat = osErrorISR;
 80042a4:	f06f 0305 	mvn.w	r3, #5
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	e007      	b.n	80042bc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <osDelay+0x4c>
      vTaskDelay(ticks);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f001 fb7a 	bl	80059b0 <vTaskDelay>
    }
  }

  return (stat);
 80042bc:	697b      	ldr	r3, [r7, #20]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000648 	.word	0x20000648

080042cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4a07      	ldr	r2, [pc, #28]	; (80042f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80042dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4a06      	ldr	r2, [pc, #24]	; (80042fc <vApplicationGetIdleTaskMemory+0x30>)
 80042e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2280      	movs	r2, #128	; 0x80
 80042e8:	601a      	str	r2, [r3, #0]
}
 80042ea:	bf00      	nop
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	2000064c 	.word	0x2000064c
 80042fc:	200006a8 	.word	0x200006a8

08004300 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4a07      	ldr	r2, [pc, #28]	; (800432c <vApplicationGetTimerTaskMemory+0x2c>)
 8004310:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4a06      	ldr	r2, [pc, #24]	; (8004330 <vApplicationGetTimerTaskMemory+0x30>)
 8004316:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800431e:	601a      	str	r2, [r3, #0]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	200008a8 	.word	0x200008a8
 8004330:	20000904 	.word	0x20000904

08004334 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f103 0208 	add.w	r2, r3, #8
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f04f 32ff 	mov.w	r2, #4294967295
 800434c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f103 0208 	add.w	r2, r3, #8
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f103 0208 	add.w	r2, r3, #8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ec:	d103      	bne.n	80043f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e00c      	b.n	8004410 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3308      	adds	r3, #8
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	e002      	b.n	8004404 <vListInsert+0x2e>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	429a      	cmp	r2, r3
 800440e:	d9f6      	bls.n	80043fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	601a      	str	r2, [r3, #0]
}
 800443c:	bf00      	nop
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6892      	ldr	r2, [r2, #8]
 800445e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6852      	ldr	r2, [r2, #4]
 8004468:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	429a      	cmp	r2, r3
 8004472:	d103      	bne.n	800447c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	1e5a      	subs	r2, r3, #1
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3b04      	subs	r3, #4
 80044ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3b04      	subs	r3, #4
 80044ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f023 0201 	bic.w	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3b04      	subs	r3, #4
 80044ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044cc:	4a0c      	ldr	r2, [pc, #48]	; (8004500 <pxPortInitialiseStack+0x64>)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3b14      	subs	r3, #20
 80044d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3b04      	subs	r3, #4
 80044e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f06f 0202 	mvn.w	r2, #2
 80044ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3b20      	subs	r3, #32
 80044f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044f2:	68fb      	ldr	r3, [r7, #12]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	08004505 	.word	0x08004505

08004504 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800450e:	4b11      	ldr	r3, [pc, #68]	; (8004554 <prvTaskExitError+0x50>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004516:	d009      	beq.n	800452c <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	e7fe      	b.n	800452a <prvTaskExitError+0x26>
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800453e:	bf00      	nop
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0fc      	beq.n	8004540 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004546:	bf00      	nop
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20000004 	.word	0x20000004
	...

08004560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <pxCurrentTCBConst2>)
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	6808      	ldr	r0, [r1, #0]
 8004566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456a:	f380 8809 	msr	PSP, r0
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f380 8811 	msr	BASEPRI, r0
 800457a:	4770      	bx	lr
 800457c:	f3af 8000 	nop.w

08004580 <pxCurrentTCBConst2>:
 8004580:	20008524 	.word	0x20008524
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop

08004588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004588:	4808      	ldr	r0, [pc, #32]	; (80045ac <prvPortStartFirstTask+0x24>)
 800458a:	6800      	ldr	r0, [r0, #0]
 800458c:	6800      	ldr	r0, [r0, #0]
 800458e:	f380 8808 	msr	MSP, r0
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f380 8814 	msr	CONTROL, r0
 800459a:	b662      	cpsie	i
 800459c:	b661      	cpsie	f
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	df00      	svc	0
 80045a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045aa:	bf00      	nop
 80045ac:	e000ed08 	.word	0xe000ed08

080045b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045b6:	4b44      	ldr	r3, [pc, #272]	; (80046c8 <xPortStartScheduler+0x118>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a44      	ldr	r2, [pc, #272]	; (80046cc <xPortStartScheduler+0x11c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d109      	bne.n	80045d4 <xPortStartScheduler+0x24>
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	e7fe      	b.n	80045d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045d4:	4b3c      	ldr	r3, [pc, #240]	; (80046c8 <xPortStartScheduler+0x118>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a3d      	ldr	r2, [pc, #244]	; (80046d0 <xPortStartScheduler+0x120>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d109      	bne.n	80045f2 <xPortStartScheduler+0x42>
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	e7fe      	b.n	80045f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045f2:	4b38      	ldr	r3, [pc, #224]	; (80046d4 <xPortStartScheduler+0x124>)
 80045f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	22ff      	movs	r2, #255	; 0xff
 8004602:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004614:	b2da      	uxtb	r2, r3
 8004616:	4b30      	ldr	r3, [pc, #192]	; (80046d8 <xPortStartScheduler+0x128>)
 8004618:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800461a:	4b30      	ldr	r3, [pc, #192]	; (80046dc <xPortStartScheduler+0x12c>)
 800461c:	2207      	movs	r2, #7
 800461e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004620:	e009      	b.n	8004636 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004622:	4b2e      	ldr	r3, [pc, #184]	; (80046dc <xPortStartScheduler+0x12c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3b01      	subs	r3, #1
 8004628:	4a2c      	ldr	r2, [pc, #176]	; (80046dc <xPortStartScheduler+0x12c>)
 800462a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	b2db      	uxtb	r3, r3
 8004634:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004636:	78fb      	ldrb	r3, [r7, #3]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463e:	2b80      	cmp	r3, #128	; 0x80
 8004640:	d0ef      	beq.n	8004622 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004642:	4b26      	ldr	r3, [pc, #152]	; (80046dc <xPortStartScheduler+0x12c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f1c3 0307 	rsb	r3, r3, #7
 800464a:	2b04      	cmp	r3, #4
 800464c:	d009      	beq.n	8004662 <xPortStartScheduler+0xb2>
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	60bb      	str	r3, [r7, #8]
 8004660:	e7fe      	b.n	8004660 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <xPortStartScheduler+0x12c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	4a1c      	ldr	r2, [pc, #112]	; (80046dc <xPortStartScheduler+0x12c>)
 800466a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800466c:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <xPortStartScheduler+0x12c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004674:	4a19      	ldr	r2, [pc, #100]	; (80046dc <xPortStartScheduler+0x12c>)
 8004676:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	b2da      	uxtb	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004680:	4a17      	ldr	r2, [pc, #92]	; (80046e0 <xPortStartScheduler+0x130>)
 8004682:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <xPortStartScheduler+0x130>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800468a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800468c:	4a14      	ldr	r2, [pc, #80]	; (80046e0 <xPortStartScheduler+0x130>)
 800468e:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <xPortStartScheduler+0x130>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004696:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004698:	f000 f8d6 	bl	8004848 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800469c:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <xPortStartScheduler+0x134>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80046a2:	f000 f8f5 	bl	8004890 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046a6:	4a10      	ldr	r2, [pc, #64]	; (80046e8 <xPortStartScheduler+0x138>)
 80046a8:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <xPortStartScheduler+0x138>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80046b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80046b2:	f7ff ff69 	bl	8004588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80046b6:	f001 fb85 	bl	8005dc4 <vTaskSwitchContext>
	prvTaskExitError();
 80046ba:	f7ff ff23 	bl	8004504 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	e000ed00 	.word	0xe000ed00
 80046cc:	410fc271 	.word	0x410fc271
 80046d0:	410fc270 	.word	0x410fc270
 80046d4:	e000e400 	.word	0xe000e400
 80046d8:	20000d04 	.word	0x20000d04
 80046dc:	20000d08 	.word	0x20000d08
 80046e0:	e000ed20 	.word	0xe000ed20
 80046e4:	20000004 	.word	0x20000004
 80046e8:	e000ef34 	.word	0xe000ef34

080046ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004704:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <vPortEnterCritical+0x54>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3301      	adds	r3, #1
 800470a:	4a0d      	ldr	r2, [pc, #52]	; (8004740 <vPortEnterCritical+0x54>)
 800470c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800470e:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <vPortEnterCritical+0x54>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d10e      	bne.n	8004734 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <vPortEnterCritical+0x58>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d009      	beq.n	8004734 <vPortEnterCritical+0x48>
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	603b      	str	r3, [r7, #0]
 8004732:	e7fe      	b.n	8004732 <vPortEnterCritical+0x46>
	}
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	20000004 	.word	0x20000004
 8004744:	e000ed04 	.word	0xe000ed04

08004748 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800474e:	4b11      	ldr	r3, [pc, #68]	; (8004794 <vPortExitCritical+0x4c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <vPortExitCritical+0x22>
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	607b      	str	r3, [r7, #4]
 8004768:	e7fe      	b.n	8004768 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800476a:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <vPortExitCritical+0x4c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3b01      	subs	r3, #1
 8004770:	4a08      	ldr	r2, [pc, #32]	; (8004794 <vPortExitCritical+0x4c>)
 8004772:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004774:	4b07      	ldr	r3, [pc, #28]	; (8004794 <vPortExitCritical+0x4c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d104      	bne.n	8004786 <vPortExitCritical+0x3e>
 800477c:	2300      	movs	r3, #0
 800477e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000004 	.word	0x20000004
	...

080047a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047a0:	f3ef 8009 	mrs	r0, PSP
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	4b15      	ldr	r3, [pc, #84]	; (8004800 <pxCurrentTCBConst>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	f01e 0f10 	tst.w	lr, #16
 80047b0:	bf08      	it	eq
 80047b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ba:	6010      	str	r0, [r2, #0]
 80047bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047c4:	f380 8811 	msr	BASEPRI, r0
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f001 faf8 	bl	8005dc4 <vTaskSwitchContext>
 80047d4:	f04f 0000 	mov.w	r0, #0
 80047d8:	f380 8811 	msr	BASEPRI, r0
 80047dc:	bc09      	pop	{r0, r3}
 80047de:	6819      	ldr	r1, [r3, #0]
 80047e0:	6808      	ldr	r0, [r1, #0]
 80047e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e6:	f01e 0f10 	tst.w	lr, #16
 80047ea:	bf08      	it	eq
 80047ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047f0:	f380 8809 	msr	PSP, r0
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	f3af 8000 	nop.w

08004800 <pxCurrentTCBConst>:
 8004800:	20008524 	.word	0x20008524
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop

08004808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004820:	f001 fa18 	bl	8005c54 <xTaskIncrementTick>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <SysTick_Handler+0x3c>)
 800482c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	2300      	movs	r3, #0
 8004834:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	e000ed04 	.word	0xe000ed04

08004848 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <vPortSetupTimerInterrupt+0x34>)
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <vPortSetupTimerInterrupt+0x38>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004858:	4a0a      	ldr	r2, [pc, #40]	; (8004884 <vPortSetupTimerInterrupt+0x3c>)
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <vPortSetupTimerInterrupt+0x40>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	490b      	ldr	r1, [pc, #44]	; (800488c <vPortSetupTimerInterrupt+0x44>)
 8004860:	fba1 1303 	umull	r1, r3, r1, r3
 8004864:	099b      	lsrs	r3, r3, #6
 8004866:	3b01      	subs	r3, #1
 8004868:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800486a:	4b04      	ldr	r3, [pc, #16]	; (800487c <vPortSetupTimerInterrupt+0x34>)
 800486c:	2207      	movs	r2, #7
 800486e:	601a      	str	r2, [r3, #0]
}
 8004870:	bf00      	nop
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	e000e010 	.word	0xe000e010
 8004880:	e000e018 	.word	0xe000e018
 8004884:	e000e014 	.word	0xe000e014
 8004888:	2000000c 	.word	0x2000000c
 800488c:	10624dd3 	.word	0x10624dd3

08004890 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004890:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048a0 <vPortEnableVFP+0x10>
 8004894:	6801      	ldr	r1, [r0, #0]
 8004896:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800489a:	6001      	str	r1, [r0, #0]
 800489c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800489e:	bf00      	nop
 80048a0:	e000ed88 	.word	0xe000ed88

080048a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80048aa:	f3ef 8305 	mrs	r3, IPSR
 80048ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b0f      	cmp	r3, #15
 80048b4:	d913      	bls.n	80048de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048b6:	4a16      	ldr	r2, [pc, #88]	; (8004910 <vPortValidateInterruptPriority+0x6c>)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4413      	add	r3, r2
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048c0:	4b14      	ldr	r3, [pc, #80]	; (8004914 <vPortValidateInterruptPriority+0x70>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	7afa      	ldrb	r2, [r7, #11]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d209      	bcs.n	80048de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80048ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ce:	f383 8811 	msr	BASEPRI, r3
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	607b      	str	r3, [r7, #4]
 80048dc:	e7fe      	b.n	80048dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048de:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <vPortValidateInterruptPriority+0x74>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <vPortValidateInterruptPriority+0x78>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d909      	bls.n	8004902 <vPortValidateInterruptPriority+0x5e>
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	e7fe      	b.n	8004900 <vPortValidateInterruptPriority+0x5c>
	}
 8004902:	bf00      	nop
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	e000e3f0 	.word	0xe000e3f0
 8004914:	20000d04 	.word	0x20000d04
 8004918:	e000ed0c 	.word	0xe000ed0c
 800491c:	20000d08 	.word	0x20000d08

08004920 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08a      	sub	sp, #40	; 0x28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004928:	2300      	movs	r3, #0
 800492a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800492c:	f001 f8d8 	bl	8005ae0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004930:	4b57      	ldr	r3, [pc, #348]	; (8004a90 <pvPortMalloc+0x170>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004938:	f000 f90c 	bl	8004b54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800493c:	4b55      	ldr	r3, [pc, #340]	; (8004a94 <pvPortMalloc+0x174>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4013      	ands	r3, r2
 8004944:	2b00      	cmp	r3, #0
 8004946:	f040 808c 	bne.w	8004a62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01c      	beq.n	800498a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004950:	2208      	movs	r2, #8
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4413      	add	r3, r2
 8004956:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	2b00      	cmp	r3, #0
 8004960:	d013      	beq.n	800498a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f023 0307 	bic.w	r3, r3, #7
 8004968:	3308      	adds	r3, #8
 800496a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	2b00      	cmp	r3, #0
 8004974:	d009      	beq.n	800498a <pvPortMalloc+0x6a>
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	e7fe      	b.n	8004988 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d068      	beq.n	8004a62 <pvPortMalloc+0x142>
 8004990:	4b41      	ldr	r3, [pc, #260]	; (8004a98 <pvPortMalloc+0x178>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d863      	bhi.n	8004a62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800499a:	4b40      	ldr	r3, [pc, #256]	; (8004a9c <pvPortMalloc+0x17c>)
 800499c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800499e:	4b3f      	ldr	r3, [pc, #252]	; (8004a9c <pvPortMalloc+0x17c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049a4:	e004      	b.n	80049b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d203      	bcs.n	80049c2 <pvPortMalloc+0xa2>
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f1      	bne.n	80049a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049c2:	4b33      	ldr	r3, [pc, #204]	; (8004a90 <pvPortMalloc+0x170>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d04a      	beq.n	8004a62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2208      	movs	r2, #8
 80049d2:	4413      	add	r3, r2
 80049d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	1ad2      	subs	r2, r2, r3
 80049e6:	2308      	movs	r3, #8
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d91e      	bls.n	8004a2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4413      	add	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d009      	beq.n	8004a14 <pvPortMalloc+0xf4>
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	e7fe      	b.n	8004a12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	1ad2      	subs	r2, r2, r3
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a26:	69b8      	ldr	r0, [r7, #24]
 8004a28:	f000 f8f6 	bl	8004c18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a2c:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <pvPortMalloc+0x178>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	4a18      	ldr	r2, [pc, #96]	; (8004a98 <pvPortMalloc+0x178>)
 8004a38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a3a:	4b17      	ldr	r3, [pc, #92]	; (8004a98 <pvPortMalloc+0x178>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <pvPortMalloc+0x180>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d203      	bcs.n	8004a4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a46:	4b14      	ldr	r3, [pc, #80]	; (8004a98 <pvPortMalloc+0x178>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a15      	ldr	r2, [pc, #84]	; (8004aa0 <pvPortMalloc+0x180>)
 8004a4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <pvPortMalloc+0x174>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a62:	f001 f84b 	bl	8005afc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d009      	beq.n	8004a84 <pvPortMalloc+0x164>
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	e7fe      	b.n	8004a82 <pvPortMalloc+0x162>
	return pvReturn;
 8004a84:	69fb      	ldr	r3, [r7, #28]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3728      	adds	r7, #40	; 0x28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20008514 	.word	0x20008514
 8004a94:	20008520 	.word	0x20008520
 8004a98:	20008518 	.word	0x20008518
 8004a9c:	2000850c 	.word	0x2000850c
 8004aa0:	2000851c 	.word	0x2000851c

08004aa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d046      	beq.n	8004b44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ab6:	2308      	movs	r3, #8
 8004ab8:	425b      	negs	r3, r3
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4413      	add	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <vPortFree+0xa8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d109      	bne.n	8004ae6 <vPortFree+0x42>
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	e7fe      	b.n	8004ae4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d009      	beq.n	8004b02 <vPortFree+0x5e>
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	60bb      	str	r3, [r7, #8]
 8004b00:	e7fe      	b.n	8004b00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <vPortFree+0xa8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d019      	beq.n	8004b44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d115      	bne.n	8004b44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <vPortFree+0xa8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	43db      	mvns	r3, r3
 8004b22:	401a      	ands	r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b28:	f000 ffda 	bl	8005ae0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <vPortFree+0xac>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4413      	add	r3, r2
 8004b36:	4a06      	ldr	r2, [pc, #24]	; (8004b50 <vPortFree+0xac>)
 8004b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b3a:	6938      	ldr	r0, [r7, #16]
 8004b3c:	f000 f86c 	bl	8004c18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004b40:	f000 ffdc 	bl	8005afc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b44:	bf00      	nop
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20008520 	.word	0x20008520
 8004b50:	20008518 	.word	0x20008518

08004b54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b5a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8004b5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b60:	4b27      	ldr	r3, [pc, #156]	; (8004c00 <prvHeapInit+0xac>)
 8004b62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00c      	beq.n	8004b88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3307      	adds	r3, #7
 8004b72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0307 	bic.w	r3, r3, #7
 8004b7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	4a1f      	ldr	r2, [pc, #124]	; (8004c00 <prvHeapInit+0xac>)
 8004b84:	4413      	add	r3, r2
 8004b86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b8c:	4a1d      	ldr	r2, [pc, #116]	; (8004c04 <prvHeapInit+0xb0>)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b92:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <prvHeapInit+0xb0>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0307 	bic.w	r3, r3, #7
 8004bae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4a15      	ldr	r2, [pc, #84]	; (8004c08 <prvHeapInit+0xb4>)
 8004bb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004bb6:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <prvHeapInit+0xb4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004bbe:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <prvHeapInit+0xb4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	1ad2      	subs	r2, r2, r3
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <prvHeapInit+0xb4>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <prvHeapInit+0xb8>)
 8004be2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4a09      	ldr	r2, [pc, #36]	; (8004c10 <prvHeapInit+0xbc>)
 8004bea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bec:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <prvHeapInit+0xc0>)
 8004bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004bf2:	601a      	str	r2, [r3, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	20000d0c 	.word	0x20000d0c
 8004c04:	2000850c 	.word	0x2000850c
 8004c08:	20008514 	.word	0x20008514
 8004c0c:	2000851c 	.word	0x2000851c
 8004c10:	20008518 	.word	0x20008518
 8004c14:	20008520 	.word	0x20008520

08004c18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c20:	4b28      	ldr	r3, [pc, #160]	; (8004cc4 <prvInsertBlockIntoFreeList+0xac>)
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	e002      	b.n	8004c2c <prvInsertBlockIntoFreeList+0x14>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d3f7      	bcc.n	8004c26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	441a      	add	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d108      	bne.n	8004c5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	441a      	add	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	441a      	add	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d118      	bne.n	8004ca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d00d      	beq.n	8004c96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	441a      	add	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	e008      	b.n	8004ca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c96:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e003      	b.n	8004ca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d002      	beq.n	8004cb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cb6:	bf00      	nop
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	2000850c 	.word	0x2000850c
 8004cc8:	20008514 	.word	0x20008514

08004ccc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <xQueueGenericReset+0x28>
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	e7fe      	b.n	8004cf2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004cf4:	f7ff fcfa 	bl	80046ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	68f9      	ldr	r1, [r7, #12]
 8004d02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d04:	fb01 f303 	mul.w	r3, r1, r3
 8004d08:	441a      	add	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d24:	3b01      	subs	r3, #1
 8004d26:	68f9      	ldr	r1, [r7, #12]
 8004d28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d2a:	fb01 f303 	mul.w	r3, r1, r3
 8004d2e:	441a      	add	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	22ff      	movs	r2, #255	; 0xff
 8004d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	22ff      	movs	r2, #255	; 0xff
 8004d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d114      	bne.n	8004d74 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d01a      	beq.n	8004d88 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3310      	adds	r3, #16
 8004d56:	4618      	mov	r0, r3
 8004d58:	f001 f8de 	bl	8005f18 <xTaskRemoveFromEventList>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d012      	beq.n	8004d88 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d62:	4b0d      	ldr	r3, [pc, #52]	; (8004d98 <xQueueGenericReset+0xcc>)
 8004d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	e009      	b.n	8004d88 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	3310      	adds	r3, #16
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff fadb 	bl	8004334 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3324      	adds	r3, #36	; 0x24
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff fad6 	bl	8004334 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d88:	f7ff fcde 	bl	8004748 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d8c:	2301      	movs	r3, #1
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	e000ed04 	.word	0xe000ed04

08004d9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08e      	sub	sp, #56	; 0x38
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <xQueueGenericCreateStatic+0x28>
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dc2:	e7fe      	b.n	8004dc2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <xQueueGenericCreateStatic+0x42>
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
 8004ddc:	e7fe      	b.n	8004ddc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <xQueueGenericCreateStatic+0x4e>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <xQueueGenericCreateStatic+0x52>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <xQueueGenericCreateStatic+0x54>
 8004dee:	2300      	movs	r3, #0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d109      	bne.n	8004e08 <xQueueGenericCreateStatic+0x6c>
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	623b      	str	r3, [r7, #32]
 8004e06:	e7fe      	b.n	8004e06 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <xQueueGenericCreateStatic+0x78>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <xQueueGenericCreateStatic+0x7c>
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <xQueueGenericCreateStatic+0x7e>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d109      	bne.n	8004e32 <xQueueGenericCreateStatic+0x96>
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	61fb      	str	r3, [r7, #28]
 8004e30:	e7fe      	b.n	8004e30 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e32:	2350      	movs	r3, #80	; 0x50
 8004e34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b50      	cmp	r3, #80	; 0x50
 8004e3a:	d009      	beq.n	8004e50 <xQueueGenericCreateStatic+0xb4>
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	61bb      	str	r3, [r7, #24]
 8004e4e:	e7fe      	b.n	8004e4e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00d      	beq.n	8004e78 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e64:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f805 	bl	8004e82 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3730      	adds	r7, #48	; 0x30
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
 8004e8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d103      	bne.n	8004e9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	e002      	b.n	8004ea4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	69b8      	ldr	r0, [r7, #24]
 8004eb4:	f7ff ff0a 	bl	8004ccc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	78fa      	ldrb	r2, [r7, #3]
 8004ebc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ec0:	bf00      	nop
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08e      	sub	sp, #56	; 0x38
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d109      	bne.n	8004ef8 <xQueueGenericSend+0x30>
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ef6:	e7fe      	b.n	8004ef6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d103      	bne.n	8004f06 <xQueueGenericSend+0x3e>
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <xQueueGenericSend+0x42>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <xQueueGenericSend+0x44>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d109      	bne.n	8004f24 <xQueueGenericSend+0x5c>
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
 8004f22:	e7fe      	b.n	8004f22 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d103      	bne.n	8004f32 <xQueueGenericSend+0x6a>
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <xQueueGenericSend+0x6e>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <xQueueGenericSend+0x70>
 8004f36:	2300      	movs	r3, #0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d109      	bne.n	8004f50 <xQueueGenericSend+0x88>
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	623b      	str	r3, [r7, #32]
 8004f4e:	e7fe      	b.n	8004f4e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f50:	f001 f998 	bl	8006284 <xTaskGetSchedulerState>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d102      	bne.n	8004f60 <xQueueGenericSend+0x98>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <xQueueGenericSend+0x9c>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <xQueueGenericSend+0x9e>
 8004f64:	2300      	movs	r3, #0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d109      	bne.n	8004f7e <xQueueGenericSend+0xb6>
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	61fb      	str	r3, [r7, #28]
 8004f7c:	e7fe      	b.n	8004f7c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f7e:	f7ff fbb5 	bl	80046ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d302      	bcc.n	8004f94 <xQueueGenericSend+0xcc>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d129      	bne.n	8004fe8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f9a:	f000 f9ff 	bl	800539c <prvCopyDataToQueue>
 8004f9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d010      	beq.n	8004fca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	3324      	adds	r3, #36	; 0x24
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 ffb3 	bl	8005f18 <xTaskRemoveFromEventList>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d013      	beq.n	8004fe0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fb8:	4b3f      	ldr	r3, [pc, #252]	; (80050b8 <xQueueGenericSend+0x1f0>)
 8004fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	e00a      	b.n	8004fe0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d007      	beq.n	8004fe0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fd0:	4b39      	ldr	r3, [pc, #228]	; (80050b8 <xQueueGenericSend+0x1f0>)
 8004fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fe0:	f7ff fbb2 	bl	8004748 <vPortExitCritical>
				return pdPASS;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e063      	b.n	80050b0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d103      	bne.n	8004ff6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fee:	f7ff fbab 	bl	8004748 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e05c      	b.n	80050b0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d106      	bne.n	800500a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ffc:	f107 0314 	add.w	r3, r7, #20
 8005000:	4618      	mov	r0, r3
 8005002:	f000 ffeb 	bl	8005fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005006:	2301      	movs	r3, #1
 8005008:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800500a:	f7ff fb9d 	bl	8004748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800500e:	f000 fd67 	bl	8005ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005012:	f7ff fb6b 	bl	80046ec <vPortEnterCritical>
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800501c:	b25b      	sxtb	r3, r3
 800501e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005022:	d103      	bne.n	800502c <xQueueGenericSend+0x164>
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005032:	b25b      	sxtb	r3, r3
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d103      	bne.n	8005042 <xQueueGenericSend+0x17a>
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005042:	f7ff fb81 	bl	8004748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005046:	1d3a      	adds	r2, r7, #4
 8005048:	f107 0314 	add.w	r3, r7, #20
 800504c:	4611      	mov	r1, r2
 800504e:	4618      	mov	r0, r3
 8005050:	f000 ffda 	bl	8006008 <xTaskCheckForTimeOut>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d124      	bne.n	80050a4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800505a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800505c:	f000 fa96 	bl	800558c <prvIsQueueFull>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d018      	beq.n	8005098 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	3310      	adds	r3, #16
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	4611      	mov	r1, r2
 800506e:	4618      	mov	r0, r3
 8005070:	f000 ff04 	bl	8005e7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005076:	f000 fa21 	bl	80054bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800507a:	f000 fd3f 	bl	8005afc <xTaskResumeAll>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	f47f af7c 	bne.w	8004f7e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <xQueueGenericSend+0x1f0>)
 8005088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	e772      	b.n	8004f7e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800509a:	f000 fa0f 	bl	80054bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800509e:	f000 fd2d 	bl	8005afc <xTaskResumeAll>
 80050a2:	e76c      	b.n	8004f7e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050a6:	f000 fa09 	bl	80054bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050aa:	f000 fd27 	bl	8005afc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3738      	adds	r7, #56	; 0x38
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	e000ed04 	.word	0xe000ed04

080050bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08e      	sub	sp, #56	; 0x38
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d109      	bne.n	80050e8 <xQueueGenericSendFromISR+0x2c>
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
 80050e6:	e7fe      	b.n	80050e6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d103      	bne.n	80050f6 <xQueueGenericSendFromISR+0x3a>
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <xQueueGenericSendFromISR+0x3e>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <xQueueGenericSendFromISR+0x40>
 80050fa:	2300      	movs	r3, #0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d109      	bne.n	8005114 <xQueueGenericSendFromISR+0x58>
 8005100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	623b      	str	r3, [r7, #32]
 8005112:	e7fe      	b.n	8005112 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d103      	bne.n	8005122 <xQueueGenericSendFromISR+0x66>
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <xQueueGenericSendFromISR+0x6a>
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <xQueueGenericSendFromISR+0x6c>
 8005126:	2300      	movs	r3, #0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d109      	bne.n	8005140 <xQueueGenericSendFromISR+0x84>
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	61fb      	str	r3, [r7, #28]
 800513e:	e7fe      	b.n	800513e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005140:	f7ff fbb0 	bl	80048a4 <vPortValidateInterruptPriority>
	__asm volatile
 8005144:	f3ef 8211 	mrs	r2, BASEPRI
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	61ba      	str	r2, [r7, #24]
 800515a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800515c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800515e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005168:	429a      	cmp	r2, r3
 800516a:	d302      	bcc.n	8005172 <xQueueGenericSendFromISR+0xb6>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d12c      	bne.n	80051cc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	68b9      	ldr	r1, [r7, #8]
 8005180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005182:	f000 f90b 	bl	800539c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005186:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d112      	bne.n	80051b6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	2b00      	cmp	r3, #0
 8005196:	d016      	beq.n	80051c6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	3324      	adds	r3, #36	; 0x24
 800519c:	4618      	mov	r0, r3
 800519e:	f000 febb 	bl	8005f18 <xTaskRemoveFromEventList>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00e      	beq.n	80051c6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	e007      	b.n	80051c6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051ba:	3301      	adds	r3, #1
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	b25a      	sxtb	r2, r3
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051c6:	2301      	movs	r3, #1
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80051ca:	e001      	b.n	80051d0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	637b      	str	r3, [r7, #52]	; 0x34
 80051d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3738      	adds	r7, #56	; 0x38
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08c      	sub	sp, #48	; 0x30
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051f0:	2300      	movs	r3, #0
 80051f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <xQueueReceive+0x2e>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	623b      	str	r3, [r7, #32]
 8005210:	e7fe      	b.n	8005210 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d103      	bne.n	8005220 <xQueueReceive+0x3c>
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <xQueueReceive+0x40>
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <xQueueReceive+0x42>
 8005224:	2300      	movs	r3, #0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <xQueueReceive+0x5a>
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	61fb      	str	r3, [r7, #28]
 800523c:	e7fe      	b.n	800523c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800523e:	f001 f821 	bl	8006284 <xTaskGetSchedulerState>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d102      	bne.n	800524e <xQueueReceive+0x6a>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <xQueueReceive+0x6e>
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <xQueueReceive+0x70>
 8005252:	2300      	movs	r3, #0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d109      	bne.n	800526c <xQueueReceive+0x88>
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	e7fe      	b.n	800526a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800526c:	f7ff fa3e 	bl	80046ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01f      	beq.n	80052bc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005280:	f000 f8f6 	bl	8005470 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	1e5a      	subs	r2, r3, #1
 8005288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00f      	beq.n	80052b4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	3310      	adds	r3, #16
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fe3d 	bl	8005f18 <xTaskRemoveFromEventList>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d007      	beq.n	80052b4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052a4:	4b3c      	ldr	r3, [pc, #240]	; (8005398 <xQueueReceive+0x1b4>)
 80052a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052b4:	f7ff fa48 	bl	8004748 <vPortExitCritical>
				return pdPASS;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e069      	b.n	8005390 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d103      	bne.n	80052ca <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052c2:	f7ff fa41 	bl	8004748 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e062      	b.n	8005390 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d106      	bne.n	80052de <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052d0:	f107 0310 	add.w	r3, r7, #16
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fe81 	bl	8005fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052da:	2301      	movs	r3, #1
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052de:	f7ff fa33 	bl	8004748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052e2:	f000 fbfd 	bl	8005ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052e6:	f7ff fa01 	bl	80046ec <vPortEnterCritical>
 80052ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052f0:	b25b      	sxtb	r3, r3
 80052f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f6:	d103      	bne.n	8005300 <xQueueReceive+0x11c>
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005306:	b25b      	sxtb	r3, r3
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530c:	d103      	bne.n	8005316 <xQueueReceive+0x132>
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005316:	f7ff fa17 	bl	8004748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800531a:	1d3a      	adds	r2, r7, #4
 800531c:	f107 0310 	add.w	r3, r7, #16
 8005320:	4611      	mov	r1, r2
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fe70 	bl	8006008 <xTaskCheckForTimeOut>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d123      	bne.n	8005376 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800532e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005330:	f000 f916 	bl	8005560 <prvIsQueueEmpty>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d017      	beq.n	800536a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	3324      	adds	r3, #36	; 0x24
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	4611      	mov	r1, r2
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fd9a 	bl	8005e7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800534a:	f000 f8b7 	bl	80054bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800534e:	f000 fbd5 	bl	8005afc <xTaskResumeAll>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d189      	bne.n	800526c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005358:	4b0f      	ldr	r3, [pc, #60]	; (8005398 <xQueueReceive+0x1b4>)
 800535a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	e780      	b.n	800526c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800536a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800536c:	f000 f8a6 	bl	80054bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005370:	f000 fbc4 	bl	8005afc <xTaskResumeAll>
 8005374:	e77a      	b.n	800526c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005378:	f000 f8a0 	bl	80054bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800537c:	f000 fbbe 	bl	8005afc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005382:	f000 f8ed 	bl	8005560 <prvIsQueueEmpty>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	f43f af6f 	beq.w	800526c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800538e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005390:	4618      	mov	r0, r3
 8005392:	3730      	adds	r7, #48	; 0x30
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	e000ed04 	.word	0xe000ed04

0800539c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d14d      	bne.n	800545e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 ff7a 	bl	80062c0 <xTaskPriorityDisinherit>
 80053cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	609a      	str	r2, [r3, #8]
 80053d4:	e043      	b.n	800545e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d119      	bne.n	8005410 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6858      	ldr	r0, [r3, #4]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	461a      	mov	r2, r3
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	f003 fd95 	bl	8008f16 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	441a      	add	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	429a      	cmp	r2, r3
 8005404:	d32b      	bcc.n	800545e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	605a      	str	r2, [r3, #4]
 800540e:	e026      	b.n	800545e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68d8      	ldr	r0, [r3, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	461a      	mov	r2, r3
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	f003 fd7b 	bl	8008f16 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	425b      	negs	r3, r3
 800542a:	441a      	add	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d207      	bcs.n	800544c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	425b      	negs	r3, r3
 8005446:	441a      	add	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d105      	bne.n	800545e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	3b01      	subs	r3, #1
 800545c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005466:	697b      	ldr	r3, [r7, #20]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d018      	beq.n	80054b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	441a      	add	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	429a      	cmp	r2, r3
 800549a:	d303      	bcc.n	80054a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68d9      	ldr	r1, [r3, #12]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	461a      	mov	r2, r3
 80054ae:	6838      	ldr	r0, [r7, #0]
 80054b0:	f003 fd31 	bl	8008f16 <memcpy>
	}
}
 80054b4:	bf00      	nop
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054c4:	f7ff f912 	bl	80046ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054d0:	e011      	b.n	80054f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d012      	beq.n	8005500 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3324      	adds	r3, #36	; 0x24
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fd1a 	bl	8005f18 <xTaskRemoveFromEventList>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054ea:	f000 fded 	bl	80060c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	dce9      	bgt.n	80054d2 <prvUnlockQueue+0x16>
 80054fe:	e000      	b.n	8005502 <prvUnlockQueue+0x46>
					break;
 8005500:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	22ff      	movs	r2, #255	; 0xff
 8005506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800550a:	f7ff f91d 	bl	8004748 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800550e:	f7ff f8ed 	bl	80046ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005518:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800551a:	e011      	b.n	8005540 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d012      	beq.n	800554a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3310      	adds	r3, #16
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fcf5 	bl	8005f18 <xTaskRemoveFromEventList>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005534:	f000 fdc8 	bl	80060c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005538:	7bbb      	ldrb	r3, [r7, #14]
 800553a:	3b01      	subs	r3, #1
 800553c:	b2db      	uxtb	r3, r3
 800553e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005544:	2b00      	cmp	r3, #0
 8005546:	dce9      	bgt.n	800551c <prvUnlockQueue+0x60>
 8005548:	e000      	b.n	800554c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800554a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	22ff      	movs	r2, #255	; 0xff
 8005550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005554:	f7ff f8f8 	bl	8004748 <vPortExitCritical>
}
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005568:	f7ff f8c0 	bl	80046ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005574:	2301      	movs	r3, #1
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	e001      	b.n	800557e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800557e:	f7ff f8e3 	bl	8004748 <vPortExitCritical>

	return xReturn;
 8005582:	68fb      	ldr	r3, [r7, #12]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005594:	f7ff f8aa 	bl	80046ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d102      	bne.n	80055aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055a4:	2301      	movs	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	e001      	b.n	80055ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055ae:	f7ff f8cb 	bl	8004748 <vPortExitCritical>

	return xReturn;
 80055b2:	68fb      	ldr	r3, [r7, #12]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	e014      	b.n	80055f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055cc:	4a0e      	ldr	r2, [pc, #56]	; (8005608 <vQueueAddToRegistry+0x4c>)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10b      	bne.n	80055f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055d8:	490b      	ldr	r1, [pc, #44]	; (8005608 <vQueueAddToRegistry+0x4c>)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055e2:	4a09      	ldr	r2, [pc, #36]	; (8005608 <vQueueAddToRegistry+0x4c>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	4413      	add	r3, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055ee:	e005      	b.n	80055fc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3301      	adds	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b07      	cmp	r3, #7
 80055fa:	d9e7      	bls.n	80055cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055fc:	bf00      	nop
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	20018270 	.word	0x20018270

0800560c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800561c:	f7ff f866 	bl	80046ec <vPortEnterCritical>
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005626:	b25b      	sxtb	r3, r3
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562c:	d103      	bne.n	8005636 <vQueueWaitForMessageRestricted+0x2a>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800563c:	b25b      	sxtb	r3, r3
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005642:	d103      	bne.n	800564c <vQueueWaitForMessageRestricted+0x40>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800564c:	f7ff f87c 	bl	8004748 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	2b00      	cmp	r3, #0
 8005656:	d106      	bne.n	8005666 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	3324      	adds	r3, #36	; 0x24
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fc2f 	bl	8005ec4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005666:	6978      	ldr	r0, [r7, #20]
 8005668:	f7ff ff28 	bl	80054bc <prvUnlockQueue>
	}
 800566c:	bf00      	nop
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08e      	sub	sp, #56	; 0x38
 8005678:	af04      	add	r7, sp, #16
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005684:	2b00      	cmp	r3, #0
 8005686:	d109      	bne.n	800569c <xTaskCreateStatic+0x28>
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	623b      	str	r3, [r7, #32]
 800569a:	e7fe      	b.n	800569a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d109      	bne.n	80056b6 <xTaskCreateStatic+0x42>
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	e7fe      	b.n	80056b4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056b6:	235c      	movs	r3, #92	; 0x5c
 80056b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2b5c      	cmp	r3, #92	; 0x5c
 80056be:	d009      	beq.n	80056d4 <xTaskCreateStatic+0x60>
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	e7fe      	b.n	80056d2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01e      	beq.n	800571a <xTaskCreateStatic+0xa6>
 80056dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d01b      	beq.n	800571a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056f4:	2300      	movs	r3, #0
 80056f6:	9303      	str	r3, [sp, #12]
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	9302      	str	r3, [sp, #8]
 80056fc:	f107 0314 	add.w	r3, r7, #20
 8005700:	9301      	str	r3, [sp, #4]
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 f850 	bl	80057b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005712:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005714:	f000 f8dc 	bl	80058d0 <prvAddNewTaskToReadyList>
 8005718:	e001      	b.n	800571e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800571e:	697b      	ldr	r3, [r7, #20]
	}
 8005720:	4618      	mov	r0, r3
 8005722:	3728      	adds	r7, #40	; 0x28
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08c      	sub	sp, #48	; 0x30
 800572c:	af04      	add	r7, sp, #16
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	603b      	str	r3, [r7, #0]
 8005734:	4613      	mov	r3, r2
 8005736:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005738:	88fb      	ldrh	r3, [r7, #6]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff f8ef 	bl	8004920 <pvPortMalloc>
 8005742:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00e      	beq.n	8005768 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800574a:	205c      	movs	r0, #92	; 0x5c
 800574c:	f7ff f8e8 	bl	8004920 <pvPortMalloc>
 8005750:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	631a      	str	r2, [r3, #48]	; 0x30
 800575e:	e005      	b.n	800576c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005760:	6978      	ldr	r0, [r7, #20]
 8005762:	f7ff f99f 	bl	8004aa4 <vPortFree>
 8005766:	e001      	b.n	800576c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005768:	2300      	movs	r3, #0
 800576a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d017      	beq.n	80057a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800577a:	88fa      	ldrh	r2, [r7, #6]
 800577c:	2300      	movs	r3, #0
 800577e:	9303      	str	r3, [sp, #12]
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	9302      	str	r3, [sp, #8]
 8005784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005786:	9301      	str	r3, [sp, #4]
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f80e 	bl	80057b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005796:	69f8      	ldr	r0, [r7, #28]
 8005798:	f000 f89a 	bl	80058d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800579c:	2301      	movs	r3, #1
 800579e:	61bb      	str	r3, [r7, #24]
 80057a0:	e002      	b.n	80057a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057a2:	f04f 33ff 	mov.w	r3, #4294967295
 80057a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057a8:	69bb      	ldr	r3, [r7, #24]
	}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3720      	adds	r7, #32
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b088      	sub	sp, #32
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
 80057be:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	461a      	mov	r2, r3
 80057ca:	21a5      	movs	r1, #165	; 0xa5
 80057cc:	f003 fbae 	bl	8008f2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057da:	3b01      	subs	r3, #1
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	f023 0307 	bic.w	r3, r3, #7
 80057e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d009      	beq.n	8005808 <prvInitialiseNewTask+0x56>
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	e7fe      	b.n	8005806 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d01f      	beq.n	800584e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800580e:	2300      	movs	r3, #0
 8005810:	61fb      	str	r3, [r7, #28]
 8005812:	e012      	b.n	800583a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	4413      	add	r3, r2
 800581a:	7819      	ldrb	r1, [r3, #0]
 800581c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	3334      	adds	r3, #52	; 0x34
 8005824:	460a      	mov	r2, r1
 8005826:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d006      	beq.n	8005842 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	3301      	adds	r3, #1
 8005838:	61fb      	str	r3, [r7, #28]
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	2b0f      	cmp	r3, #15
 800583e:	d9e9      	bls.n	8005814 <prvInitialiseNewTask+0x62>
 8005840:	e000      	b.n	8005844 <prvInitialiseNewTask+0x92>
			{
				break;
 8005842:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800584c:	e003      	b.n	8005856 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	2b37      	cmp	r3, #55	; 0x37
 800585a:	d901      	bls.n	8005860 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800585c:	2337      	movs	r3, #55	; 0x37
 800585e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005864:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800586a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	2200      	movs	r2, #0
 8005870:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	3304      	adds	r3, #4
 8005876:	4618      	mov	r0, r3
 8005878:	f7fe fd7c 	bl	8004374 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	3318      	adds	r3, #24
 8005880:	4618      	mov	r0, r3
 8005882:	f7fe fd77 	bl	8004374 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800588a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800589a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	2200      	movs	r2, #0
 80058a0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	68f9      	ldr	r1, [r7, #12]
 80058ae:	69b8      	ldr	r0, [r7, #24]
 80058b0:	f7fe fdf4 	bl	800449c <pxPortInitialiseStack>
 80058b4:	4602      	mov	r2, r0
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058c6:	bf00      	nop
 80058c8:	3720      	adds	r7, #32
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058d8:	f7fe ff08 	bl	80046ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058dc:	4b2d      	ldr	r3, [pc, #180]	; (8005994 <prvAddNewTaskToReadyList+0xc4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3301      	adds	r3, #1
 80058e2:	4a2c      	ldr	r2, [pc, #176]	; (8005994 <prvAddNewTaskToReadyList+0xc4>)
 80058e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058e6:	4b2c      	ldr	r3, [pc, #176]	; (8005998 <prvAddNewTaskToReadyList+0xc8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d109      	bne.n	8005902 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058ee:	4a2a      	ldr	r2, [pc, #168]	; (8005998 <prvAddNewTaskToReadyList+0xc8>)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058f4:	4b27      	ldr	r3, [pc, #156]	; (8005994 <prvAddNewTaskToReadyList+0xc4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d110      	bne.n	800591e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058fc:	f000 fc08 	bl	8006110 <prvInitialiseTaskLists>
 8005900:	e00d      	b.n	800591e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005902:	4b26      	ldr	r3, [pc, #152]	; (800599c <prvAddNewTaskToReadyList+0xcc>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800590a:	4b23      	ldr	r3, [pc, #140]	; (8005998 <prvAddNewTaskToReadyList+0xc8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	429a      	cmp	r2, r3
 8005916:	d802      	bhi.n	800591e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005918:	4a1f      	ldr	r2, [pc, #124]	; (8005998 <prvAddNewTaskToReadyList+0xc8>)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800591e:	4b20      	ldr	r3, [pc, #128]	; (80059a0 <prvAddNewTaskToReadyList+0xd0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3301      	adds	r3, #1
 8005924:	4a1e      	ldr	r2, [pc, #120]	; (80059a0 <prvAddNewTaskToReadyList+0xd0>)
 8005926:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005928:	4b1d      	ldr	r3, [pc, #116]	; (80059a0 <prvAddNewTaskToReadyList+0xd0>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005934:	4b1b      	ldr	r3, [pc, #108]	; (80059a4 <prvAddNewTaskToReadyList+0xd4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d903      	bls.n	8005944 <prvAddNewTaskToReadyList+0x74>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	4a18      	ldr	r2, [pc, #96]	; (80059a4 <prvAddNewTaskToReadyList+0xd4>)
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005948:	4613      	mov	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4a15      	ldr	r2, [pc, #84]	; (80059a8 <prvAddNewTaskToReadyList+0xd8>)
 8005952:	441a      	add	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3304      	adds	r3, #4
 8005958:	4619      	mov	r1, r3
 800595a:	4610      	mov	r0, r2
 800595c:	f7fe fd17 	bl	800438e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005960:	f7fe fef2 	bl	8004748 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005964:	4b0d      	ldr	r3, [pc, #52]	; (800599c <prvAddNewTaskToReadyList+0xcc>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00e      	beq.n	800598a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800596c:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <prvAddNewTaskToReadyList+0xc8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	429a      	cmp	r2, r3
 8005978:	d207      	bcs.n	800598a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800597a:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <prvAddNewTaskToReadyList+0xdc>)
 800597c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	200089f8 	.word	0x200089f8
 8005998:	20008524 	.word	0x20008524
 800599c:	20008a04 	.word	0x20008a04
 80059a0:	20008a14 	.word	0x20008a14
 80059a4:	20008a00 	.word	0x20008a00
 80059a8:	20008528 	.word	0x20008528
 80059ac:	e000ed04 	.word	0xe000ed04

080059b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d016      	beq.n	80059f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059c2:	4b13      	ldr	r3, [pc, #76]	; (8005a10 <vTaskDelay+0x60>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <vTaskDelay+0x2e>
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	60bb      	str	r3, [r7, #8]
 80059dc:	e7fe      	b.n	80059dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80059de:	f000 f87f 	bl	8005ae0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059e2:	2100      	movs	r1, #0
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fcd7 	bl	8006398 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059ea:	f000 f887 	bl	8005afc <xTaskResumeAll>
 80059ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d107      	bne.n	8005a06 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80059f6:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <vTaskDelay+0x64>)
 80059f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a06:	bf00      	nop
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20008a20 	.word	0x20008a20
 8005a14:	e000ed04 	.word	0xe000ed04

08005a18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	; 0x28
 8005a1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a26:	463a      	mov	r2, r7
 8005a28:	1d39      	adds	r1, r7, #4
 8005a2a:	f107 0308 	add.w	r3, r7, #8
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe fc4c 	bl	80042cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a34:	6839      	ldr	r1, [r7, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	9202      	str	r2, [sp, #8]
 8005a3c:	9301      	str	r3, [sp, #4]
 8005a3e:	2300      	movs	r3, #0
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	2300      	movs	r3, #0
 8005a44:	460a      	mov	r2, r1
 8005a46:	4920      	ldr	r1, [pc, #128]	; (8005ac8 <vTaskStartScheduler+0xb0>)
 8005a48:	4820      	ldr	r0, [pc, #128]	; (8005acc <vTaskStartScheduler+0xb4>)
 8005a4a:	f7ff fe13 	bl	8005674 <xTaskCreateStatic>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	4b1f      	ldr	r3, [pc, #124]	; (8005ad0 <vTaskStartScheduler+0xb8>)
 8005a52:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a54:	4b1e      	ldr	r3, [pc, #120]	; (8005ad0 <vTaskStartScheduler+0xb8>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	e001      	b.n	8005a66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d102      	bne.n	8005a72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a6c:	f000 fce8 	bl	8006440 <xTimerCreateTimerTask>
 8005a70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d115      	bne.n	8005aa4 <vTaskStartScheduler+0x8c>
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <vTaskStartScheduler+0xbc>)
 8005a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a92:	4b11      	ldr	r3, [pc, #68]	; (8005ad8 <vTaskStartScheduler+0xc0>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a98:	4b10      	ldr	r3, [pc, #64]	; (8005adc <vTaskStartScheduler+0xc4>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a9e:	f7fe fd87 	bl	80045b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005aa2:	e00d      	b.n	8005ac0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aaa:	d109      	bne.n	8005ac0 <vTaskStartScheduler+0xa8>
 8005aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	e7fe      	b.n	8005abe <vTaskStartScheduler+0xa6>
}
 8005ac0:	bf00      	nop
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	0800ade4 	.word	0x0800ade4
 8005acc:	080060e1 	.word	0x080060e1
 8005ad0:	20008a1c 	.word	0x20008a1c
 8005ad4:	20008a18 	.word	0x20008a18
 8005ad8:	20008a04 	.word	0x20008a04
 8005adc:	200089fc 	.word	0x200089fc

08005ae0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005ae4:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <vTaskSuspendAll+0x18>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	4a03      	ldr	r2, [pc, #12]	; (8005af8 <vTaskSuspendAll+0x18>)
 8005aec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005aee:	bf00      	nop
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	20008a20 	.word	0x20008a20

08005afc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b0a:	4b41      	ldr	r3, [pc, #260]	; (8005c10 <xTaskResumeAll+0x114>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d109      	bne.n	8005b26 <xTaskResumeAll+0x2a>
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	e7fe      	b.n	8005b24 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b26:	f7fe fde1 	bl	80046ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b2a:	4b39      	ldr	r3, [pc, #228]	; (8005c10 <xTaskResumeAll+0x114>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	4a37      	ldr	r2, [pc, #220]	; (8005c10 <xTaskResumeAll+0x114>)
 8005b32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b34:	4b36      	ldr	r3, [pc, #216]	; (8005c10 <xTaskResumeAll+0x114>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d162      	bne.n	8005c02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b3c:	4b35      	ldr	r3, [pc, #212]	; (8005c14 <xTaskResumeAll+0x118>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d05e      	beq.n	8005c02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b44:	e02f      	b.n	8005ba6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b46:	4b34      	ldr	r3, [pc, #208]	; (8005c18 <xTaskResumeAll+0x11c>)
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3318      	adds	r3, #24
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe fc78 	bl	8004448 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fe fc73 	bl	8004448 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b66:	4b2d      	ldr	r3, [pc, #180]	; (8005c1c <xTaskResumeAll+0x120>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d903      	bls.n	8005b76 <xTaskResumeAll+0x7a>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	4a2a      	ldr	r2, [pc, #168]	; (8005c1c <xTaskResumeAll+0x120>)
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4a27      	ldr	r2, [pc, #156]	; (8005c20 <xTaskResumeAll+0x124>)
 8005b84:	441a      	add	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f7fe fbfe 	bl	800438e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b96:	4b23      	ldr	r3, [pc, #140]	; (8005c24 <xTaskResumeAll+0x128>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d302      	bcc.n	8005ba6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005ba0:	4b21      	ldr	r3, [pc, #132]	; (8005c28 <xTaskResumeAll+0x12c>)
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ba6:	4b1c      	ldr	r3, [pc, #112]	; (8005c18 <xTaskResumeAll+0x11c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1cb      	bne.n	8005b46 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bb4:	f000 fb46 	bl	8006244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005bb8:	4b1c      	ldr	r3, [pc, #112]	; (8005c2c <xTaskResumeAll+0x130>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d010      	beq.n	8005be6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bc4:	f000 f846 	bl	8005c54 <xTaskIncrementTick>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005bce:	4b16      	ldr	r3, [pc, #88]	; (8005c28 <xTaskResumeAll+0x12c>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1f1      	bne.n	8005bc4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005be0:	4b12      	ldr	r3, [pc, #72]	; (8005c2c <xTaskResumeAll+0x130>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005be6:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <xTaskResumeAll+0x12c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d009      	beq.n	8005c02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bf2:	4b0f      	ldr	r3, [pc, #60]	; (8005c30 <xTaskResumeAll+0x134>)
 8005bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c02:	f7fe fda1 	bl	8004748 <vPortExitCritical>

	return xAlreadyYielded;
 8005c06:	68bb      	ldr	r3, [r7, #8]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20008a20 	.word	0x20008a20
 8005c14:	200089f8 	.word	0x200089f8
 8005c18:	200089b8 	.word	0x200089b8
 8005c1c:	20008a00 	.word	0x20008a00
 8005c20:	20008528 	.word	0x20008528
 8005c24:	20008524 	.word	0x20008524
 8005c28:	20008a0c 	.word	0x20008a0c
 8005c2c:	20008a08 	.word	0x20008a08
 8005c30:	e000ed04 	.word	0xe000ed04

08005c34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c3a:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <xTaskGetTickCount+0x1c>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c40:	687b      	ldr	r3, [r7, #4]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	200089fc 	.word	0x200089fc

08005c54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c5e:	4b4e      	ldr	r3, [pc, #312]	; (8005d98 <xTaskIncrementTick+0x144>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f040 8088 	bne.w	8005d78 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c68:	4b4c      	ldr	r3, [pc, #304]	; (8005d9c <xTaskIncrementTick+0x148>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c70:	4a4a      	ldr	r2, [pc, #296]	; (8005d9c <xTaskIncrementTick+0x148>)
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d11f      	bne.n	8005cbc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c7c:	4b48      	ldr	r3, [pc, #288]	; (8005da0 <xTaskIncrementTick+0x14c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d009      	beq.n	8005c9a <xTaskIncrementTick+0x46>
 8005c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	603b      	str	r3, [r7, #0]
 8005c98:	e7fe      	b.n	8005c98 <xTaskIncrementTick+0x44>
 8005c9a:	4b41      	ldr	r3, [pc, #260]	; (8005da0 <xTaskIncrementTick+0x14c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	4b40      	ldr	r3, [pc, #256]	; (8005da4 <xTaskIncrementTick+0x150>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a3e      	ldr	r2, [pc, #248]	; (8005da0 <xTaskIncrementTick+0x14c>)
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	4a3e      	ldr	r2, [pc, #248]	; (8005da4 <xTaskIncrementTick+0x150>)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	4b3e      	ldr	r3, [pc, #248]	; (8005da8 <xTaskIncrementTick+0x154>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	4a3c      	ldr	r2, [pc, #240]	; (8005da8 <xTaskIncrementTick+0x154>)
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	f000 fac4 	bl	8006244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cbc:	4b3b      	ldr	r3, [pc, #236]	; (8005dac <xTaskIncrementTick+0x158>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d349      	bcc.n	8005d5a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cc6:	4b36      	ldr	r3, [pc, #216]	; (8005da0 <xTaskIncrementTick+0x14c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d104      	bne.n	8005cda <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd0:	4b36      	ldr	r3, [pc, #216]	; (8005dac <xTaskIncrementTick+0x158>)
 8005cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd6:	601a      	str	r2, [r3, #0]
					break;
 8005cd8:	e03f      	b.n	8005d5a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cda:	4b31      	ldr	r3, [pc, #196]	; (8005da0 <xTaskIncrementTick+0x14c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d203      	bcs.n	8005cfa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cf2:	4a2e      	ldr	r2, [pc, #184]	; (8005dac <xTaskIncrementTick+0x158>)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cf8:	e02f      	b.n	8005d5a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fe fba2 	bl	8004448 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d004      	beq.n	8005d16 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	3318      	adds	r3, #24
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fe fb99 	bl	8004448 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1a:	4b25      	ldr	r3, [pc, #148]	; (8005db0 <xTaskIncrementTick+0x15c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d903      	bls.n	8005d2a <xTaskIncrementTick+0xd6>
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	4a22      	ldr	r2, [pc, #136]	; (8005db0 <xTaskIncrementTick+0x15c>)
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2e:	4613      	mov	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4a1f      	ldr	r2, [pc, #124]	; (8005db4 <xTaskIncrementTick+0x160>)
 8005d38:	441a      	add	r2, r3
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4610      	mov	r0, r2
 8005d42:	f7fe fb24 	bl	800438e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4a:	4b1b      	ldr	r3, [pc, #108]	; (8005db8 <xTaskIncrementTick+0x164>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d3b8      	bcc.n	8005cc6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005d54:	2301      	movs	r3, #1
 8005d56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d58:	e7b5      	b.n	8005cc6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d5a:	4b17      	ldr	r3, [pc, #92]	; (8005db8 <xTaskIncrementTick+0x164>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	4914      	ldr	r1, [pc, #80]	; (8005db4 <xTaskIncrementTick+0x160>)
 8005d62:	4613      	mov	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d907      	bls.n	8005d82 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005d72:	2301      	movs	r3, #1
 8005d74:	617b      	str	r3, [r7, #20]
 8005d76:	e004      	b.n	8005d82 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d78:	4b10      	ldr	r3, [pc, #64]	; (8005dbc <xTaskIncrementTick+0x168>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	4a0f      	ldr	r2, [pc, #60]	; (8005dbc <xTaskIncrementTick+0x168>)
 8005d80:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d82:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <xTaskIncrementTick+0x16c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d8e:	697b      	ldr	r3, [r7, #20]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	20008a20 	.word	0x20008a20
 8005d9c:	200089fc 	.word	0x200089fc
 8005da0:	200089b0 	.word	0x200089b0
 8005da4:	200089b4 	.word	0x200089b4
 8005da8:	20008a10 	.word	0x20008a10
 8005dac:	20008a18 	.word	0x20008a18
 8005db0:	20008a00 	.word	0x20008a00
 8005db4:	20008528 	.word	0x20008528
 8005db8:	20008524 	.word	0x20008524
 8005dbc:	20008a08 	.word	0x20008a08
 8005dc0:	20008a0c 	.word	0x20008a0c

08005dc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005dca:	4b27      	ldr	r3, [pc, #156]	; (8005e68 <vTaskSwitchContext+0xa4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005dd2:	4b26      	ldr	r3, [pc, #152]	; (8005e6c <vTaskSwitchContext+0xa8>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005dd8:	e040      	b.n	8005e5c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005dda:	4b24      	ldr	r3, [pc, #144]	; (8005e6c <vTaskSwitchContext+0xa8>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de0:	4b23      	ldr	r3, [pc, #140]	; (8005e70 <vTaskSwitchContext+0xac>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	e00f      	b.n	8005e08 <vTaskSwitchContext+0x44>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d109      	bne.n	8005e02 <vTaskSwitchContext+0x3e>
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	e7fe      	b.n	8005e00 <vTaskSwitchContext+0x3c>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	491a      	ldr	r1, [pc, #104]	; (8005e74 <vTaskSwitchContext+0xb0>)
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0e5      	beq.n	8005de8 <vTaskSwitchContext+0x24>
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4a13      	ldr	r2, [pc, #76]	; (8005e74 <vTaskSwitchContext+0xb0>)
 8005e28:	4413      	add	r3, r2
 8005e2a:	60bb      	str	r3, [r7, #8]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	605a      	str	r2, [r3, #4]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d104      	bne.n	8005e4c <vTaskSwitchContext+0x88>
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	605a      	str	r2, [r3, #4]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	4a09      	ldr	r2, [pc, #36]	; (8005e78 <vTaskSwitchContext+0xb4>)
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	4a06      	ldr	r2, [pc, #24]	; (8005e70 <vTaskSwitchContext+0xac>)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6013      	str	r3, [r2, #0]
}
 8005e5c:	bf00      	nop
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	20008a20 	.word	0x20008a20
 8005e6c:	20008a0c 	.word	0x20008a0c
 8005e70:	20008a00 	.word	0x20008a00
 8005e74:	20008528 	.word	0x20008528
 8005e78:	20008524 	.word	0x20008524

08005e7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d109      	bne.n	8005ea0 <vTaskPlaceOnEventList+0x24>
 8005e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	e7fe      	b.n	8005e9e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <vTaskPlaceOnEventList+0x44>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3318      	adds	r3, #24
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7fe fa94 	bl	80043d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005eae:	2101      	movs	r1, #1
 8005eb0:	6838      	ldr	r0, [r7, #0]
 8005eb2:	f000 fa71 	bl	8006398 <prvAddCurrentTaskToDelayedList>
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20008524 	.word	0x20008524

08005ec4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d109      	bne.n	8005eea <vTaskPlaceOnEventListRestricted+0x26>
 8005ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	e7fe      	b.n	8005ee8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005eea:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <vTaskPlaceOnEventListRestricted+0x50>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3318      	adds	r3, #24
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f7fe fa4b 	bl	800438e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005efe:	f04f 33ff 	mov.w	r3, #4294967295
 8005f02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	68b8      	ldr	r0, [r7, #8]
 8005f08:	f000 fa46 	bl	8006398 <prvAddCurrentTaskToDelayedList>
	}
 8005f0c:	bf00      	nop
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20008524 	.word	0x20008524

08005f18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d109      	bne.n	8005f42 <xTaskRemoveFromEventList+0x2a>
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	e7fe      	b.n	8005f40 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	3318      	adds	r3, #24
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fe fa7e 	bl	8004448 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f4c:	4b1d      	ldr	r3, [pc, #116]	; (8005fc4 <xTaskRemoveFromEventList+0xac>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d11d      	bne.n	8005f90 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fe fa75 	bl	8004448 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f62:	4b19      	ldr	r3, [pc, #100]	; (8005fc8 <xTaskRemoveFromEventList+0xb0>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d903      	bls.n	8005f72 <xTaskRemoveFromEventList+0x5a>
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	4a16      	ldr	r2, [pc, #88]	; (8005fc8 <xTaskRemoveFromEventList+0xb0>)
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f76:	4613      	mov	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4a13      	ldr	r2, [pc, #76]	; (8005fcc <xTaskRemoveFromEventList+0xb4>)
 8005f80:	441a      	add	r2, r3
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	3304      	adds	r3, #4
 8005f86:	4619      	mov	r1, r3
 8005f88:	4610      	mov	r0, r2
 8005f8a:	f7fe fa00 	bl	800438e <vListInsertEnd>
 8005f8e:	e005      	b.n	8005f9c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	3318      	adds	r3, #24
 8005f94:	4619      	mov	r1, r3
 8005f96:	480e      	ldr	r0, [pc, #56]	; (8005fd0 <xTaskRemoveFromEventList+0xb8>)
 8005f98:	f7fe f9f9 	bl	800438e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa0:	4b0c      	ldr	r3, [pc, #48]	; (8005fd4 <xTaskRemoveFromEventList+0xbc>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d905      	bls.n	8005fb6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005faa:	2301      	movs	r3, #1
 8005fac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fae:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <xTaskRemoveFromEventList+0xc0>)
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	e001      	b.n	8005fba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fba:	697b      	ldr	r3, [r7, #20]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20008a20 	.word	0x20008a20
 8005fc8:	20008a00 	.word	0x20008a00
 8005fcc:	20008528 	.word	0x20008528
 8005fd0:	200089b8 	.word	0x200089b8
 8005fd4:	20008524 	.word	0x20008524
 8005fd8:	20008a0c 	.word	0x20008a0c

08005fdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fe4:	4b06      	ldr	r3, [pc, #24]	; (8006000 <vTaskInternalSetTimeOutState+0x24>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fec:	4b05      	ldr	r3, [pc, #20]	; (8006004 <vTaskInternalSetTimeOutState+0x28>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	605a      	str	r2, [r3, #4]
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	20008a10 	.word	0x20008a10
 8006004:	200089fc 	.word	0x200089fc

08006008 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d109      	bne.n	800602c <xTaskCheckForTimeOut+0x24>
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	e7fe      	b.n	800602a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d109      	bne.n	8006046 <xTaskCheckForTimeOut+0x3e>
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	e7fe      	b.n	8006044 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006046:	f7fe fb51 	bl	80046ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800604a:	4b1d      	ldr	r3, [pc, #116]	; (80060c0 <xTaskCheckForTimeOut+0xb8>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006062:	d102      	bne.n	800606a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006064:	2300      	movs	r3, #0
 8006066:	61fb      	str	r3, [r7, #28]
 8006068:	e023      	b.n	80060b2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4b15      	ldr	r3, [pc, #84]	; (80060c4 <xTaskCheckForTimeOut+0xbc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d007      	beq.n	8006086 <xTaskCheckForTimeOut+0x7e>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	429a      	cmp	r2, r3
 800607e:	d802      	bhi.n	8006086 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006080:	2301      	movs	r3, #1
 8006082:	61fb      	str	r3, [r7, #28]
 8006084:	e015      	b.n	80060b2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	429a      	cmp	r2, r3
 800608e:	d90b      	bls.n	80060a8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	1ad2      	subs	r2, r2, r3
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff ff9d 	bl	8005fdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060a2:	2300      	movs	r3, #0
 80060a4:	61fb      	str	r3, [r7, #28]
 80060a6:	e004      	b.n	80060b2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060ae:	2301      	movs	r3, #1
 80060b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060b2:	f7fe fb49 	bl	8004748 <vPortExitCritical>

	return xReturn;
 80060b6:	69fb      	ldr	r3, [r7, #28]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3720      	adds	r7, #32
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	200089fc 	.word	0x200089fc
 80060c4:	20008a10 	.word	0x20008a10

080060c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060cc:	4b03      	ldr	r3, [pc, #12]	; (80060dc <vTaskMissedYield+0x14>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	601a      	str	r2, [r3, #0]
}
 80060d2:	bf00      	nop
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	20008a0c 	.word	0x20008a0c

080060e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060e8:	f000 f852 	bl	8006190 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060ec:	4b06      	ldr	r3, [pc, #24]	; (8006108 <prvIdleTask+0x28>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d9f9      	bls.n	80060e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060f4:	4b05      	ldr	r3, [pc, #20]	; (800610c <prvIdleTask+0x2c>)
 80060f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006104:	e7f0      	b.n	80060e8 <prvIdleTask+0x8>
 8006106:	bf00      	nop
 8006108:	20008528 	.word	0x20008528
 800610c:	e000ed04 	.word	0xe000ed04

08006110 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006116:	2300      	movs	r3, #0
 8006118:	607b      	str	r3, [r7, #4]
 800611a:	e00c      	b.n	8006136 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4a12      	ldr	r2, [pc, #72]	; (8006170 <prvInitialiseTaskLists+0x60>)
 8006128:	4413      	add	r3, r2
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe f902 	bl	8004334 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3301      	adds	r3, #1
 8006134:	607b      	str	r3, [r7, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b37      	cmp	r3, #55	; 0x37
 800613a:	d9ef      	bls.n	800611c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800613c:	480d      	ldr	r0, [pc, #52]	; (8006174 <prvInitialiseTaskLists+0x64>)
 800613e:	f7fe f8f9 	bl	8004334 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006142:	480d      	ldr	r0, [pc, #52]	; (8006178 <prvInitialiseTaskLists+0x68>)
 8006144:	f7fe f8f6 	bl	8004334 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006148:	480c      	ldr	r0, [pc, #48]	; (800617c <prvInitialiseTaskLists+0x6c>)
 800614a:	f7fe f8f3 	bl	8004334 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800614e:	480c      	ldr	r0, [pc, #48]	; (8006180 <prvInitialiseTaskLists+0x70>)
 8006150:	f7fe f8f0 	bl	8004334 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006154:	480b      	ldr	r0, [pc, #44]	; (8006184 <prvInitialiseTaskLists+0x74>)
 8006156:	f7fe f8ed 	bl	8004334 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800615a:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <prvInitialiseTaskLists+0x78>)
 800615c:	4a05      	ldr	r2, [pc, #20]	; (8006174 <prvInitialiseTaskLists+0x64>)
 800615e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006160:	4b0a      	ldr	r3, [pc, #40]	; (800618c <prvInitialiseTaskLists+0x7c>)
 8006162:	4a05      	ldr	r2, [pc, #20]	; (8006178 <prvInitialiseTaskLists+0x68>)
 8006164:	601a      	str	r2, [r3, #0]
}
 8006166:	bf00      	nop
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20008528 	.word	0x20008528
 8006174:	20008988 	.word	0x20008988
 8006178:	2000899c 	.word	0x2000899c
 800617c:	200089b8 	.word	0x200089b8
 8006180:	200089cc 	.word	0x200089cc
 8006184:	200089e4 	.word	0x200089e4
 8006188:	200089b0 	.word	0x200089b0
 800618c:	200089b4 	.word	0x200089b4

08006190 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006196:	e019      	b.n	80061cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006198:	f7fe faa8 	bl	80046ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800619c:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <prvCheckTasksWaitingTermination+0x4c>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3304      	adds	r3, #4
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fe f94d 	bl	8004448 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061ae:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <prvCheckTasksWaitingTermination+0x50>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	4a0a      	ldr	r2, [pc, #40]	; (80061e0 <prvCheckTasksWaitingTermination+0x50>)
 80061b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <prvCheckTasksWaitingTermination+0x54>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3b01      	subs	r3, #1
 80061be:	4a09      	ldr	r2, [pc, #36]	; (80061e4 <prvCheckTasksWaitingTermination+0x54>)
 80061c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061c2:	f7fe fac1 	bl	8004748 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f80e 	bl	80061e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061cc:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <prvCheckTasksWaitingTermination+0x54>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e1      	bne.n	8006198 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061d4:	bf00      	nop
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	200089cc 	.word	0x200089cc
 80061e0:	200089f8 	.word	0x200089f8
 80061e4:	200089e0 	.word	0x200089e0

080061e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d108      	bne.n	800620c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fe fc50 	bl	8004aa4 <vPortFree>
				vPortFree( pxTCB );
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7fe fc4d 	bl	8004aa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800620a:	e017      	b.n	800623c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006212:	2b01      	cmp	r3, #1
 8006214:	d103      	bne.n	800621e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fe fc44 	bl	8004aa4 <vPortFree>
	}
 800621c:	e00e      	b.n	800623c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006224:	2b02      	cmp	r3, #2
 8006226:	d009      	beq.n	800623c <prvDeleteTCB+0x54>
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	e7fe      	b.n	800623a <prvDeleteTCB+0x52>
	}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800624a:	4b0c      	ldr	r3, [pc, #48]	; (800627c <prvResetNextTaskUnblockTime+0x38>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d104      	bne.n	800625e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006254:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <prvResetNextTaskUnblockTime+0x3c>)
 8006256:	f04f 32ff 	mov.w	r2, #4294967295
 800625a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800625c:	e008      	b.n	8006270 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800625e:	4b07      	ldr	r3, [pc, #28]	; (800627c <prvResetNextTaskUnblockTime+0x38>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	4a04      	ldr	r2, [pc, #16]	; (8006280 <prvResetNextTaskUnblockTime+0x3c>)
 800626e:	6013      	str	r3, [r2, #0]
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	200089b0 	.word	0x200089b0
 8006280:	20008a18 	.word	0x20008a18

08006284 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800628a:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <xTaskGetSchedulerState+0x34>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d102      	bne.n	8006298 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006292:	2301      	movs	r3, #1
 8006294:	607b      	str	r3, [r7, #4]
 8006296:	e008      	b.n	80062aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006298:	4b08      	ldr	r3, [pc, #32]	; (80062bc <xTaskGetSchedulerState+0x38>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d102      	bne.n	80062a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062a0:	2302      	movs	r3, #2
 80062a2:	607b      	str	r3, [r7, #4]
 80062a4:	e001      	b.n	80062aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062a6:	2300      	movs	r3, #0
 80062a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062aa:	687b      	ldr	r3, [r7, #4]
	}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	20008a04 	.word	0x20008a04
 80062bc:	20008a20 	.word	0x20008a20

080062c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062cc:	2300      	movs	r3, #0
 80062ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d054      	beq.n	8006380 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062d6:	4b2d      	ldr	r3, [pc, #180]	; (800638c <xTaskPriorityDisinherit+0xcc>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d009      	beq.n	80062f4 <xTaskPriorityDisinherit+0x34>
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	e7fe      	b.n	80062f2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d109      	bne.n	8006310 <xTaskPriorityDisinherit+0x50>
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	e7fe      	b.n	800630e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006314:	1e5a      	subs	r2, r3, #1
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006322:	429a      	cmp	r2, r3
 8006324:	d02c      	beq.n	8006380 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632a:	2b00      	cmp	r3, #0
 800632c:	d128      	bne.n	8006380 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	3304      	adds	r3, #4
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe f888 	bl	8004448 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006350:	4b0f      	ldr	r3, [pc, #60]	; (8006390 <xTaskPriorityDisinherit+0xd0>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d903      	bls.n	8006360 <xTaskPriorityDisinherit+0xa0>
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	4a0c      	ldr	r2, [pc, #48]	; (8006390 <xTaskPriorityDisinherit+0xd0>)
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4a09      	ldr	r2, [pc, #36]	; (8006394 <xTaskPriorityDisinherit+0xd4>)
 800636e:	441a      	add	r2, r3
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	3304      	adds	r3, #4
 8006374:	4619      	mov	r1, r3
 8006376:	4610      	mov	r0, r2
 8006378:	f7fe f809 	bl	800438e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800637c:	2301      	movs	r3, #1
 800637e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006380:	697b      	ldr	r3, [r7, #20]
	}
 8006382:	4618      	mov	r0, r3
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	20008524 	.word	0x20008524
 8006390:	20008a00 	.word	0x20008a00
 8006394:	20008528 	.word	0x20008528

08006398 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063a2:	4b21      	ldr	r3, [pc, #132]	; (8006428 <prvAddCurrentTaskToDelayedList+0x90>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063a8:	4b20      	ldr	r3, [pc, #128]	; (800642c <prvAddCurrentTaskToDelayedList+0x94>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3304      	adds	r3, #4
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe f84a 	bl	8004448 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ba:	d10a      	bne.n	80063d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063c2:	4b1a      	ldr	r3, [pc, #104]	; (800642c <prvAddCurrentTaskToDelayedList+0x94>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4619      	mov	r1, r3
 80063ca:	4819      	ldr	r0, [pc, #100]	; (8006430 <prvAddCurrentTaskToDelayedList+0x98>)
 80063cc:	f7fd ffdf 	bl	800438e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063d0:	e026      	b.n	8006420 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4413      	add	r3, r2
 80063d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063da:	4b14      	ldr	r3, [pc, #80]	; (800642c <prvAddCurrentTaskToDelayedList+0x94>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d209      	bcs.n	80063fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ea:	4b12      	ldr	r3, [pc, #72]	; (8006434 <prvAddCurrentTaskToDelayedList+0x9c>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	4b0f      	ldr	r3, [pc, #60]	; (800642c <prvAddCurrentTaskToDelayedList+0x94>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3304      	adds	r3, #4
 80063f4:	4619      	mov	r1, r3
 80063f6:	4610      	mov	r0, r2
 80063f8:	f7fd ffed 	bl	80043d6 <vListInsert>
}
 80063fc:	e010      	b.n	8006420 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063fe:	4b0e      	ldr	r3, [pc, #56]	; (8006438 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	4b0a      	ldr	r3, [pc, #40]	; (800642c <prvAddCurrentTaskToDelayedList+0x94>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3304      	adds	r3, #4
 8006408:	4619      	mov	r1, r3
 800640a:	4610      	mov	r0, r2
 800640c:	f7fd ffe3 	bl	80043d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006410:	4b0a      	ldr	r3, [pc, #40]	; (800643c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	429a      	cmp	r2, r3
 8006418:	d202      	bcs.n	8006420 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800641a:	4a08      	ldr	r2, [pc, #32]	; (800643c <prvAddCurrentTaskToDelayedList+0xa4>)
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	6013      	str	r3, [r2, #0]
}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	200089fc 	.word	0x200089fc
 800642c:	20008524 	.word	0x20008524
 8006430:	200089e4 	.word	0x200089e4
 8006434:	200089b4 	.word	0x200089b4
 8006438:	200089b0 	.word	0x200089b0
 800643c:	20008a18 	.word	0x20008a18

08006440 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800644a:	f000 faff 	bl	8006a4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800644e:	4b1c      	ldr	r3, [pc, #112]	; (80064c0 <xTimerCreateTimerTask+0x80>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d021      	beq.n	800649a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800645a:	2300      	movs	r3, #0
 800645c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800645e:	1d3a      	adds	r2, r7, #4
 8006460:	f107 0108 	add.w	r1, r7, #8
 8006464:	f107 030c 	add.w	r3, r7, #12
 8006468:	4618      	mov	r0, r3
 800646a:	f7fd ff49 	bl	8004300 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	9202      	str	r2, [sp, #8]
 8006476:	9301      	str	r3, [sp, #4]
 8006478:	2302      	movs	r3, #2
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	2300      	movs	r3, #0
 800647e:	460a      	mov	r2, r1
 8006480:	4910      	ldr	r1, [pc, #64]	; (80064c4 <xTimerCreateTimerTask+0x84>)
 8006482:	4811      	ldr	r0, [pc, #68]	; (80064c8 <xTimerCreateTimerTask+0x88>)
 8006484:	f7ff f8f6 	bl	8005674 <xTaskCreateStatic>
 8006488:	4602      	mov	r2, r0
 800648a:	4b10      	ldr	r3, [pc, #64]	; (80064cc <xTimerCreateTimerTask+0x8c>)
 800648c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800648e:	4b0f      	ldr	r3, [pc, #60]	; (80064cc <xTimerCreateTimerTask+0x8c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006496:	2301      	movs	r3, #1
 8006498:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d109      	bne.n	80064b4 <xTimerCreateTimerTask+0x74>
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	613b      	str	r3, [r7, #16]
 80064b2:	e7fe      	b.n	80064b2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80064b4:	697b      	ldr	r3, [r7, #20]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20008a54 	.word	0x20008a54
 80064c4:	0800adec 	.word	0x0800adec
 80064c8:	08006601 	.word	0x08006601
 80064cc:	20008a58 	.word	0x20008a58

080064d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	; 0x28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80064de:	2300      	movs	r3, #0
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d109      	bne.n	80064fc <xTimerGenericCommand+0x2c>
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	623b      	str	r3, [r7, #32]
 80064fa:	e7fe      	b.n	80064fa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80064fc:	4b19      	ldr	r3, [pc, #100]	; (8006564 <xTimerGenericCommand+0x94>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d02a      	beq.n	800655a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2b05      	cmp	r3, #5
 8006514:	dc18      	bgt.n	8006548 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006516:	f7ff feb5 	bl	8006284 <xTaskGetSchedulerState>
 800651a:	4603      	mov	r3, r0
 800651c:	2b02      	cmp	r3, #2
 800651e:	d109      	bne.n	8006534 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006520:	4b10      	ldr	r3, [pc, #64]	; (8006564 <xTimerGenericCommand+0x94>)
 8006522:	6818      	ldr	r0, [r3, #0]
 8006524:	f107 0110 	add.w	r1, r7, #16
 8006528:	2300      	movs	r3, #0
 800652a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800652c:	f7fe fccc 	bl	8004ec8 <xQueueGenericSend>
 8006530:	6278      	str	r0, [r7, #36]	; 0x24
 8006532:	e012      	b.n	800655a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006534:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <xTimerGenericCommand+0x94>)
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	f107 0110 	add.w	r1, r7, #16
 800653c:	2300      	movs	r3, #0
 800653e:	2200      	movs	r2, #0
 8006540:	f7fe fcc2 	bl	8004ec8 <xQueueGenericSend>
 8006544:	6278      	str	r0, [r7, #36]	; 0x24
 8006546:	e008      	b.n	800655a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006548:	4b06      	ldr	r3, [pc, #24]	; (8006564 <xTimerGenericCommand+0x94>)
 800654a:	6818      	ldr	r0, [r3, #0]
 800654c:	f107 0110 	add.w	r1, r7, #16
 8006550:	2300      	movs	r3, #0
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	f7fe fdb2 	bl	80050bc <xQueueGenericSendFromISR>
 8006558:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800655c:	4618      	mov	r0, r3
 800655e:	3728      	adds	r7, #40	; 0x28
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	20008a54 	.word	0x20008a54

08006568 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af02      	add	r7, sp, #8
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006572:	4b22      	ldr	r3, [pc, #136]	; (80065fc <prvProcessExpiredTimer+0x94>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	3304      	adds	r3, #4
 8006580:	4618      	mov	r0, r3
 8006582:	f7fd ff61 	bl	8004448 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b00      	cmp	r3, #0
 8006592:	d021      	beq.n	80065d8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	699a      	ldr	r2, [r3, #24]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	18d1      	adds	r1, r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	6978      	ldr	r0, [r7, #20]
 80065a2:	f000 f8d1 	bl	8006748 <prvInsertTimerInActiveList>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01e      	beq.n	80065ea <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065ac:	2300      	movs	r3, #0
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	2300      	movs	r3, #0
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	2100      	movs	r1, #0
 80065b6:	6978      	ldr	r0, [r7, #20]
 80065b8:	f7ff ff8a 	bl	80064d0 <xTimerGenericCommand>
 80065bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d112      	bne.n	80065ea <prvProcessExpiredTimer+0x82>
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	e7fe      	b.n	80065d6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065de:	f023 0301 	bic.w	r3, r3, #1
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	6978      	ldr	r0, [r7, #20]
 80065f0:	4798      	blx	r3
}
 80065f2:	bf00      	nop
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20008a4c 	.word	0x20008a4c

08006600 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006608:	f107 0308 	add.w	r3, r7, #8
 800660c:	4618      	mov	r0, r3
 800660e:	f000 f857 	bl	80066c0 <prvGetNextExpireTime>
 8006612:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4619      	mov	r1, r3
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 f803 	bl	8006624 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800661e:	f000 f8d5 	bl	80067cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006622:	e7f1      	b.n	8006608 <prvTimerTask+0x8>

08006624 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800662e:	f7ff fa57 	bl	8005ae0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006632:	f107 0308 	add.w	r3, r7, #8
 8006636:	4618      	mov	r0, r3
 8006638:	f000 f866 	bl	8006708 <prvSampleTimeNow>
 800663c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d130      	bne.n	80066a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10a      	bne.n	8006660 <prvProcessTimerOrBlockTask+0x3c>
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	429a      	cmp	r2, r3
 8006650:	d806      	bhi.n	8006660 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006652:	f7ff fa53 	bl	8005afc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006656:	68f9      	ldr	r1, [r7, #12]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff ff85 	bl	8006568 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800665e:	e024      	b.n	80066aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d008      	beq.n	8006678 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006666:	4b13      	ldr	r3, [pc, #76]	; (80066b4 <prvProcessTimerOrBlockTask+0x90>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <prvProcessTimerOrBlockTask+0x50>
 8006670:	2301      	movs	r3, #1
 8006672:	e000      	b.n	8006676 <prvProcessTimerOrBlockTask+0x52>
 8006674:	2300      	movs	r3, #0
 8006676:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006678:	4b0f      	ldr	r3, [pc, #60]	; (80066b8 <prvProcessTimerOrBlockTask+0x94>)
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	4619      	mov	r1, r3
 8006686:	f7fe ffc1 	bl	800560c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800668a:	f7ff fa37 	bl	8005afc <xTaskResumeAll>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10a      	bne.n	80066aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006694:	4b09      	ldr	r3, [pc, #36]	; (80066bc <prvProcessTimerOrBlockTask+0x98>)
 8006696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	f3bf 8f6f 	isb	sy
}
 80066a4:	e001      	b.n	80066aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066a6:	f7ff fa29 	bl	8005afc <xTaskResumeAll>
}
 80066aa:	bf00      	nop
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20008a50 	.word	0x20008a50
 80066b8:	20008a54 	.word	0x20008a54
 80066bc:	e000ed04 	.word	0xe000ed04

080066c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066c8:	4b0e      	ldr	r3, [pc, #56]	; (8006704 <prvGetNextExpireTime+0x44>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <prvGetNextExpireTime+0x16>
 80066d2:	2201      	movs	r2, #1
 80066d4:	e000      	b.n	80066d8 <prvGetNextExpireTime+0x18>
 80066d6:	2200      	movs	r2, #0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d105      	bne.n	80066f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066e4:	4b07      	ldr	r3, [pc, #28]	; (8006704 <prvGetNextExpireTime+0x44>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	e001      	b.n	80066f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80066f4:	68fb      	ldr	r3, [r7, #12]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	20008a4c 	.word	0x20008a4c

08006708 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006710:	f7ff fa90 	bl	8005c34 <xTaskGetTickCount>
 8006714:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006716:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <prvSampleTimeNow+0x3c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	429a      	cmp	r2, r3
 800671e:	d205      	bcs.n	800672c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006720:	f000 f930 	bl	8006984 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	e002      	b.n	8006732 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006732:	4a04      	ldr	r2, [pc, #16]	; (8006744 <prvSampleTimeNow+0x3c>)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006738:	68fb      	ldr	r3, [r7, #12]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20008a5c 	.word	0x20008a5c

08006748 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	429a      	cmp	r2, r3
 800676c:	d812      	bhi.n	8006794 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	1ad2      	subs	r2, r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	429a      	cmp	r2, r3
 800677a:	d302      	bcc.n	8006782 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800677c:	2301      	movs	r3, #1
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	e01b      	b.n	80067ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006782:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <prvInsertTimerInActiveList+0x7c>)
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3304      	adds	r3, #4
 800678a:	4619      	mov	r1, r3
 800678c:	4610      	mov	r0, r2
 800678e:	f7fd fe22 	bl	80043d6 <vListInsert>
 8006792:	e012      	b.n	80067ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d206      	bcs.n	80067aa <prvInsertTimerInActiveList+0x62>
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d302      	bcc.n	80067aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	e007      	b.n	80067ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067aa:	4b07      	ldr	r3, [pc, #28]	; (80067c8 <prvInsertTimerInActiveList+0x80>)
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3304      	adds	r3, #4
 80067b2:	4619      	mov	r1, r3
 80067b4:	4610      	mov	r0, r2
 80067b6:	f7fd fe0e 	bl	80043d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067ba:	697b      	ldr	r3, [r7, #20]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20008a50 	.word	0x20008a50
 80067c8:	20008a4c 	.word	0x20008a4c

080067cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08e      	sub	sp, #56	; 0x38
 80067d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067d2:	e0c6      	b.n	8006962 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	da17      	bge.n	800680a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80067da:	1d3b      	adds	r3, r7, #4
 80067dc:	3304      	adds	r3, #4
 80067de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d109      	bne.n	80067fa <prvProcessReceivedCommands+0x2e>
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	61fb      	str	r3, [r7, #28]
 80067f8:	e7fe      	b.n	80067f8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80067fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006800:	6850      	ldr	r0, [r2, #4]
 8006802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006804:	6892      	ldr	r2, [r2, #8]
 8006806:	4611      	mov	r1, r2
 8006808:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	f2c0 80a8 	blt.w	8006962 <prvProcessReceivedCommands+0x196>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d004      	beq.n	8006828 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006820:	3304      	adds	r3, #4
 8006822:	4618      	mov	r0, r3
 8006824:	f7fd fe10 	bl	8004448 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006828:	463b      	mov	r3, r7
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff ff6c 	bl	8006708 <prvSampleTimeNow>
 8006830:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b09      	cmp	r3, #9
 8006836:	f200 8093 	bhi.w	8006960 <prvProcessReceivedCommands+0x194>
 800683a:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <prvProcessReceivedCommands+0x74>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	08006869 	.word	0x08006869
 8006844:	08006869 	.word	0x08006869
 8006848:	08006869 	.word	0x08006869
 800684c:	080068db 	.word	0x080068db
 8006850:	080068ef 	.word	0x080068ef
 8006854:	08006937 	.word	0x08006937
 8006858:	08006869 	.word	0x08006869
 800685c:	08006869 	.word	0x08006869
 8006860:	080068db 	.word	0x080068db
 8006864:	080068ef 	.word	0x080068ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800686e:	f043 0301 	orr.w	r3, r3, #1
 8006872:	b2da      	uxtb	r2, r3
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	18d1      	adds	r1, r2, r3
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006888:	f7ff ff5e 	bl	8006748 <prvInsertTimerInActiveList>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d067      	beq.n	8006962 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006898:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d05c      	beq.n	8006962 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	441a      	add	r2, r3
 80068b0:	2300      	movs	r3, #0
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	2300      	movs	r3, #0
 80068b6:	2100      	movs	r1, #0
 80068b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ba:	f7ff fe09 	bl	80064d0 <xTimerGenericCommand>
 80068be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d14d      	bne.n	8006962 <prvProcessReceivedCommands+0x196>
 80068c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	61bb      	str	r3, [r7, #24]
 80068d8:	e7fe      	b.n	80068d8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068e0:	f023 0301 	bic.w	r3, r3, #1
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80068ec:	e039      	b.n	8006962 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068f4:	f043 0301 	orr.w	r3, r3, #1
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006904:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <prvProcessReceivedCommands+0x156>
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	e7fe      	b.n	8006920 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006924:	699a      	ldr	r2, [r3, #24]
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	18d1      	adds	r1, r2, r3
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800692e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006930:	f7ff ff0a 	bl	8006748 <prvInsertTimerInActiveList>
					break;
 8006934:	e015      	b.n	8006962 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d103      	bne.n	800694c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006946:	f7fe f8ad 	bl	8004aa4 <vPortFree>
 800694a:	e00a      	b.n	8006962 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006952:	f023 0301 	bic.w	r3, r3, #1
 8006956:	b2da      	uxtb	r2, r3
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800695e:	e000      	b.n	8006962 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
 8006960:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006962:	4b07      	ldr	r3, [pc, #28]	; (8006980 <prvProcessReceivedCommands+0x1b4>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	1d39      	adds	r1, r7, #4
 8006968:	2200      	movs	r2, #0
 800696a:	4618      	mov	r0, r3
 800696c:	f7fe fc3a 	bl	80051e4 <xQueueReceive>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	f47f af2e 	bne.w	80067d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006978:	bf00      	nop
 800697a:	3730      	adds	r7, #48	; 0x30
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	20008a54 	.word	0x20008a54

08006984 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b088      	sub	sp, #32
 8006988:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800698a:	e047      	b.n	8006a1c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800698c:	4b2d      	ldr	r3, [pc, #180]	; (8006a44 <prvSwitchTimerLists+0xc0>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006996:	4b2b      	ldr	r3, [pc, #172]	; (8006a44 <prvSwitchTimerLists+0xc0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fd fd4f 	bl	8004448 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	6938      	ldr	r0, [r7, #16]
 80069b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d02d      	beq.n	8006a1c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	699a      	ldr	r2, [r3, #24]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	4413      	add	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d90e      	bls.n	80069f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069de:	4b19      	ldr	r3, [pc, #100]	; (8006a44 <prvSwitchTimerLists+0xc0>)
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	3304      	adds	r3, #4
 80069e6:	4619      	mov	r1, r3
 80069e8:	4610      	mov	r0, r2
 80069ea:	f7fd fcf4 	bl	80043d6 <vListInsert>
 80069ee:	e015      	b.n	8006a1c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069f0:	2300      	movs	r3, #0
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	2300      	movs	r3, #0
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	2100      	movs	r1, #0
 80069fa:	6938      	ldr	r0, [r7, #16]
 80069fc:	f7ff fd68 	bl	80064d0 <xTimerGenericCommand>
 8006a00:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d109      	bne.n	8006a1c <prvSwitchTimerLists+0x98>
 8006a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	603b      	str	r3, [r7, #0]
 8006a1a:	e7fe      	b.n	8006a1a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a1c:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <prvSwitchTimerLists+0xc0>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1b2      	bne.n	800698c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a26:	4b07      	ldr	r3, [pc, #28]	; (8006a44 <prvSwitchTimerLists+0xc0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a2c:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <prvSwitchTimerLists+0xc4>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a04      	ldr	r2, [pc, #16]	; (8006a44 <prvSwitchTimerLists+0xc0>)
 8006a32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a34:	4a04      	ldr	r2, [pc, #16]	; (8006a48 <prvSwitchTimerLists+0xc4>)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6013      	str	r3, [r2, #0]
}
 8006a3a:	bf00      	nop
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20008a4c 	.word	0x20008a4c
 8006a48:	20008a50 	.word	0x20008a50

08006a4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a52:	f7fd fe4b 	bl	80046ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a56:	4b15      	ldr	r3, [pc, #84]	; (8006aac <prvCheckForValidListAndQueue+0x60>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d120      	bne.n	8006aa0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a5e:	4814      	ldr	r0, [pc, #80]	; (8006ab0 <prvCheckForValidListAndQueue+0x64>)
 8006a60:	f7fd fc68 	bl	8004334 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a64:	4813      	ldr	r0, [pc, #76]	; (8006ab4 <prvCheckForValidListAndQueue+0x68>)
 8006a66:	f7fd fc65 	bl	8004334 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a6a:	4b13      	ldr	r3, [pc, #76]	; (8006ab8 <prvCheckForValidListAndQueue+0x6c>)
 8006a6c:	4a10      	ldr	r2, [pc, #64]	; (8006ab0 <prvCheckForValidListAndQueue+0x64>)
 8006a6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a70:	4b12      	ldr	r3, [pc, #72]	; (8006abc <prvCheckForValidListAndQueue+0x70>)
 8006a72:	4a10      	ldr	r2, [pc, #64]	; (8006ab4 <prvCheckForValidListAndQueue+0x68>)
 8006a74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a76:	2300      	movs	r3, #0
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	4b11      	ldr	r3, [pc, #68]	; (8006ac0 <prvCheckForValidListAndQueue+0x74>)
 8006a7c:	4a11      	ldr	r2, [pc, #68]	; (8006ac4 <prvCheckForValidListAndQueue+0x78>)
 8006a7e:	2110      	movs	r1, #16
 8006a80:	200a      	movs	r0, #10
 8006a82:	f7fe f98b 	bl	8004d9c <xQueueGenericCreateStatic>
 8006a86:	4602      	mov	r2, r0
 8006a88:	4b08      	ldr	r3, [pc, #32]	; (8006aac <prvCheckForValidListAndQueue+0x60>)
 8006a8a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a8c:	4b07      	ldr	r3, [pc, #28]	; (8006aac <prvCheckForValidListAndQueue+0x60>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d005      	beq.n	8006aa0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a94:	4b05      	ldr	r3, [pc, #20]	; (8006aac <prvCheckForValidListAndQueue+0x60>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	490b      	ldr	r1, [pc, #44]	; (8006ac8 <prvCheckForValidListAndQueue+0x7c>)
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fd8e 	bl	80055bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006aa0:	f7fd fe52 	bl	8004748 <vPortExitCritical>
}
 8006aa4:	bf00      	nop
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20008a54 	.word	0x20008a54
 8006ab0:	20008a24 	.word	0x20008a24
 8006ab4:	20008a38 	.word	0x20008a38
 8006ab8:	20008a4c 	.word	0x20008a4c
 8006abc:	20008a50 	.word	0x20008a50
 8006ac0:	20008b00 	.word	0x20008b00
 8006ac4:	20008a60 	.word	0x20008a60
 8006ac8:	0800adf4 	.word	0x0800adf4

08006acc <Get_OutValue>:
#include "task.h"

static uint16_t out_value = 0;

uint16_t Get_OutValue()
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
	return out_value;
 8006ad0:	4b03      	ldr	r3, [pc, #12]	; (8006ae0 <Get_OutValue+0x14>)
 8006ad2:	881b      	ldrh	r3, [r3, #0]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	20008b50 	.word	0x20008b50

08006ae4 <update_info_from_json>:

void update_info_from_json(char* buff, struct OUTPUTS* out, uint16_t out_n)
{
 8006ae4:	b590      	push	{r4, r7, lr}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	4613      	mov	r3, r2
 8006af0:	80fb      	strh	r3, [r7, #6]
	out[out_n].branch_n = -1;
 8006af2:	88fb      	ldrh	r3, [r7, #6]
 8006af4:	f640 6214 	movw	r2, #3604	; 0xe14
 8006af8:	fb02 f303 	mul.w	r3, r2, r3
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	4413      	add	r3, r2
 8006b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b04:	f8a3 2e10 	strh.w	r2, [r3, #3600]	; 0xe10
	out[out_n].branch_n = json_get_op(buff, out + out_n);
 8006b08:	88fb      	ldrh	r3, [r7, #6]
 8006b0a:	f640 6214 	movw	r2, #3604	; 0xe14
 8006b0e:	fb02 f303 	mul.w	r3, r2, r3
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	18d4      	adds	r4, r2, r3
 8006b16:	88fb      	ldrh	r3, [r7, #6]
 8006b18:	f640 6214 	movw	r2, #3604	; 0xe14
 8006b1c:	fb02 f303 	mul.w	r3, r2, r3
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	4413      	add	r3, r2
 8006b24:	4619      	mov	r1, r3
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f7fa fd32 	bl	8001590 <json_get_op>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	f8a4 3e10 	strh.w	r3, [r4, #3600]	; 0xe10
}
 8006b34:	bf00      	nop
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd90      	pop	{r4, r7, pc}

08006b3c <clear_info>:

void clear_info(struct OUTPUTS* out, uint16_t out_n)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	807b      	strh	r3, [r7, #2]
	out[out_n].branch_n = 0;
 8006b48:	887b      	ldrh	r3, [r7, #2]
 8006b4a:	f640 6214 	movw	r2, #3604	; 0xe14
 8006b4e:	fb02 f303 	mul.w	r3, r2, r3
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	4413      	add	r3, r2
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8a3 2e10 	strh.w	r2, [r3, #3600]	; 0xe10
	memset(out[out_n].par, 0, sizeof(OP));
 8006b5c:	887b      	ldrh	r3, [r7, #2]
 8006b5e:	f640 6214 	movw	r2, #3604	; 0xe14
 8006b62:	fb02 f303 	mul.w	r3, r2, r3
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006b6e:	2214      	movs	r2, #20
 8006b70:	2100      	movs	r1, #0
 8006b72:	4618      	mov	r0, r3
 8006b74:	f002 f9da 	bl	8008f2c <memset>
	memset(out[out_n].root_par, 0, sizeof(OP_ROOT));
 8006b78:	887b      	ldrh	r3, [r7, #2]
 8006b7a:	f640 6214 	movw	r2, #3604	; 0xe14
 8006b7e:	fb02 f303 	mul.w	r3, r2, r3
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6351 	add.w	r3, r3, #3344	; 0xd10
 8006b8a:	2210      	movs	r2, #16
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f002 f9cc 	bl	8008f2c <memset>
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <BitEngine_task>:

void BitEngine_task( void * pvParameters )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d009      	beq.n	8006bbe <BitEngine_task+0x22>
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	60bb      	str	r3, [r7, #8]
 8006bbc:	e7fe      	b.n	8006bbc <BitEngine_task+0x20>

    INO_Init();
 8006bbe:	f000 f9c9 	bl	8006f54 <INO_Init>

    for (uint8_t out_n = 0; out_n < OUTPUTS_N; ++out_n)
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	73fb      	strb	r3, [r7, #15]
 8006bc6:	e021      	b.n	8006c0c <BitEngine_task+0x70>
    {
    	memset(outputs[out_n].t_tr,  0, sizeof(T_TR));
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	f640 6214 	movw	r2, #3604	; 0xe14
 8006bce:	fb02 f303 	mul.w	r3, r2, r3
 8006bd2:	4a46      	ldr	r2, [pc, #280]	; (8006cec <BitEngine_task+0x150>)
 8006bd4:	4413      	add	r3, r2
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	2100      	movs	r1, #0
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f002 f9a6 	bl	8008f2c <memset>
    	memset(outputs[out_n].rs_tr, 0, sizeof(RS_TR));
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	f640 6214 	movw	r2, #3604	; 0xe14
 8006be6:	fb02 f303 	mul.w	r3, r2, r3
 8006bea:	3318      	adds	r3, #24
 8006bec:	4a3f      	ldr	r2, [pc, #252]	; (8006cec <BitEngine_task+0x150>)
 8006bee:	4413      	add	r3, r2
 8006bf0:	2205      	movs	r2, #5
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f002 f999 	bl	8008f2c <memset>
    	clear_info(outputs, out_n);
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	4619      	mov	r1, r3
 8006c00:	483a      	ldr	r0, [pc, #232]	; (8006cec <BitEngine_task+0x150>)
 8006c02:	f7ff ff9b 	bl	8006b3c <clear_info>
    for (uint8_t out_n = 0; out_n < OUTPUTS_N; ++out_n)
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	73fb      	strb	r3, [r7, #15]
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	2b0f      	cmp	r3, #15
 8006c10:	d9da      	bls.n	8006bc8 <BitEngine_task+0x2c>
    }

    while(1)
    {
    	for (uint8_t i = 0; i < OUTPUTS_N; ++i)
 8006c12:	2300      	movs	r3, #0
 8006c14:	73bb      	strb	r3, [r7, #14]
 8006c16:	e061      	b.n	8006cdc <BitEngine_task+0x140>
    	{
			if (outputs[i].branch_n == 0 || outputs[i].branch_n > 1024)
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	4a34      	ldr	r2, [pc, #208]	; (8006cec <BitEngine_task+0x150>)
 8006c1c:	f640 6114 	movw	r1, #3604	; 0xe14
 8006c20:	fb01 f303 	mul.w	r3, r1, r3
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d051      	beq.n	8006cd4 <BitEngine_task+0x138>
 8006c30:	7bbb      	ldrb	r3, [r7, #14]
 8006c32:	4a2e      	ldr	r2, [pc, #184]	; (8006cec <BitEngine_task+0x150>)
 8006c34:	f640 6114 	movw	r1, #3604	; 0xe14
 8006c38:	fb01 f303 	mul.w	r3, r1, r3
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c48:	d844      	bhi.n	8006cd4 <BitEngine_task+0x138>
			{
				continue;
			}
			start_bit_engine(outputs[i].root_par, outputs[i].branch_n, out_value);
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	f640 6214 	movw	r2, #3604	; 0xe14
 8006c50:	fb02 f303 	mul.w	r3, r2, r3
 8006c54:	f503 6351 	add.w	r3, r3, #3344	; 0xd10
 8006c58:	4a24      	ldr	r2, [pc, #144]	; (8006cec <BitEngine_task+0x150>)
 8006c5a:	1898      	adds	r0, r3, r2
 8006c5c:	7bbb      	ldrb	r3, [r7, #14]
 8006c5e:	4a23      	ldr	r2, [pc, #140]	; (8006cec <BitEngine_task+0x150>)
 8006c60:	f640 6114 	movw	r1, #3604	; 0xe14
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8006c6e:	8819      	ldrh	r1, [r3, #0]
 8006c70:	4b1f      	ldr	r3, [pc, #124]	; (8006cf0 <BitEngine_task+0x154>)
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	461a      	mov	r2, r3
 8006c76:	f7fa f851 	bl	8000d1c <start_bit_engine>

			uint16_t branch = outputs[i].branch_n;
 8006c7a:	7bbb      	ldrb	r3, [r7, #14]
 8006c7c:	4a1b      	ldr	r2, [pc, #108]	; (8006cec <BitEngine_task+0x150>)
 8006c7e:	f640 6114 	movw	r1, #3604	; 0xe14
 8006c82:	fb01 f303 	mul.w	r3, r1, r3
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	81bb      	strh	r3, [r7, #12]
			if(outputs[i].root_par[branch - 1].result) {
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
 8006c92:	89ba      	ldrh	r2, [r7, #12]
 8006c94:	3a01      	subs	r2, #1
 8006c96:	4915      	ldr	r1, [pc, #84]	; (8006cec <BitEngine_task+0x150>)
 8006c98:	0112      	lsls	r2, r2, #4
 8006c9a:	f640 6014 	movw	r0, #3604	; 0xe14
 8006c9e:	fb00 f303 	mul.w	r3, r0, r3
 8006ca2:	4413      	add	r3, r2
 8006ca4:	440b      	add	r3, r1
 8006ca6:	f603 531c 	addw	r3, r3, #3356	; 0xd1c
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00d      	beq.n	8006ccc <BitEngine_task+0x130>
				out_value |= 1 << i;
 8006cb0:	7bbb      	ldrb	r3, [r7, #14]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb8:	b21a      	sxth	r2, r3
 8006cba:	4b0d      	ldr	r3, [pc, #52]	; (8006cf0 <BitEngine_task+0x154>)
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	b21b      	sxth	r3, r3
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	b21b      	sxth	r3, r3
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <BitEngine_task+0x154>)
 8006cc8:	801a      	strh	r2, [r3, #0]
 8006cca:	e004      	b.n	8006cd6 <BitEngine_task+0x13a>
			} else {
				out_value &= 0 << i;
 8006ccc:	4b08      	ldr	r3, [pc, #32]	; (8006cf0 <BitEngine_task+0x154>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	801a      	strh	r2, [r3, #0]
 8006cd2:	e000      	b.n	8006cd6 <BitEngine_task+0x13a>
				continue;
 8006cd4:	bf00      	nop
    	for (uint8_t i = 0; i < OUTPUTS_N; ++i)
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	73bb      	strb	r3, [r7, #14]
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	2b0f      	cmp	r3, #15
 8006ce0:	d99a      	bls.n	8006c18 <BitEngine_task+0x7c>
			}
		}

    	vTaskDelay(pdMS_TO_TICKS(40));
 8006ce2:	2028      	movs	r0, #40	; 0x28
 8006ce4:	f7fe fe64 	bl	80059b0 <vTaskDelay>
    	for (uint8_t i = 0; i < OUTPUTS_N; ++i)
 8006ce8:	e793      	b.n	8006c12 <BitEngine_task+0x76>
 8006cea:	bf00      	nop
 8006cec:	20008ba8 	.word	0x20008ba8
 8006cf0:	20008b50 	.word	0x20008b50

08006cf4 <BitEngine_TaskInit>:
    }
}


void BitEngine_TaskInit( void )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	607b      	str	r3, [r7, #4]
	xTaskCreate(
 8006cfe:	1d3b      	adds	r3, r7, #4
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	2304      	movs	r3, #4
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	2301      	movs	r3, #1
 8006d08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d0c:	4903      	ldr	r1, [pc, #12]	; (8006d1c <BitEngine_TaskInit+0x28>)
 8006d0e:	4804      	ldr	r0, [pc, #16]	; (8006d20 <BitEngine_TaskInit+0x2c>)
 8006d10:	f7fe fd0a 	bl	8005728 <xTaskCreate>
					4096,	 						 /* Stack size in words, not bytes. */
                    ( void * ) 1,     			 	 /* Parameter passed into the task. */
                    4,				 				 /* Priority at which the task is created. */
                    &xHandle );   			   	     /* Used to pass out the created task's handle. */

}
 8006d14:	bf00      	nop
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	0800adfc 	.word	0x0800adfc
 8006d20:	08006b9d 	.word	0x08006b9d

08006d24 <ESP_GetJson>:

const char URL[] = "192.168.1.210";
const uint16_t PORT = 5002;

void ESP_GetJson()
{
 8006d24:	b5b0      	push	{r4, r5, r7, lr}
 8006d26:	b094      	sub	sp, #80	; 0x50
 8006d28:	af02      	add	r7, sp, #8
	const char get_t[] = "GET http://192.168.1.210/test HTTP/1.1\r\nHost: 192.168.1.210\r\n\r\n";
 8006d2a:	4b1a      	ldr	r3, [pc, #104]	; (8006d94 <ESP_GetJson+0x70>)
 8006d2c:	1d3c      	adds	r4, r7, #4
 8006d2e:	461d      	mov	r5, r3
 8006d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006d40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ESP_SendData(URL, PORT, get_t, sizeof(get_t) - 1, 1);
 8006d44:	f241 318a 	movw	r1, #5002	; 0x138a
 8006d48:	1d3a      	adds	r2, r7, #4
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	233f      	movs	r3, #63	; 0x3f
 8006d50:	4811      	ldr	r0, [pc, #68]	; (8006d98 <ESP_GetJson+0x74>)
 8006d52:	f7fb fc55 	bl	8002600 <ESP_SendData>
	vTaskDelay(pdMS_TO_TICKS(1000));
 8006d56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d5a:	f7fe fe29 	bl	80059b0 <vTaskDelay>

	char* ptr = NULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	647b      	str	r3, [r7, #68]	; 0x44
	if( (ptr = strstr(ESP_GetRxData(), "{")) != NULL )
 8006d62:	f7fb fbc1 	bl	80024e8 <ESP_GetRxData>
 8006d66:	4603      	mov	r3, r0
 8006d68:	217b      	movs	r1, #123	; 0x7b
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f002 fb66 	bl	800943c <strchr>
 8006d70:	6478      	str	r0, [r7, #68]	; 0x44
 8006d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d008      	beq.n	8006d8a <ESP_GetJson+0x66>
	{
		clear_info(outputs, 0);
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4808      	ldr	r0, [pc, #32]	; (8006d9c <ESP_GetJson+0x78>)
 8006d7c:	f7ff fede 	bl	8006b3c <clear_info>
		update_info_from_json(ptr, outputs, 0);
 8006d80:	2200      	movs	r2, #0
 8006d82:	4906      	ldr	r1, [pc, #24]	; (8006d9c <ESP_GetJson+0x78>)
 8006d84:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006d86:	f7ff fead 	bl	8006ae4 <update_info_from_json>
	}
}
 8006d8a:	bf00      	nop
 8006d8c:	3748      	adds	r7, #72	; 0x48
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bdb0      	pop	{r4, r5, r7, pc}
 8006d92:	bf00      	nop
 8006d94:	0800ae0c 	.word	0x0800ae0c
 8006d98:	0800afe8 	.word	0x0800afe8
 8006d9c:	20008ba8 	.word	0x20008ba8

08006da0 <ESP_UpdateTime>:

void ESP_UpdateTime()
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b0a0      	sub	sp, #128	; 0x80
 8006da4:	af02      	add	r7, sp, #8
	const char get_t[] = "GET http://192.168.1.210/timestamp HTTP/1.1\r\nHost: 192.168.1.210\r\n\r\n";
 8006da6:	4a2b      	ldr	r2, [pc, #172]	; (8006e54 <ESP_UpdateTime+0xb4>)
 8006da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dac:	4611      	mov	r1, r2
 8006dae:	2245      	movs	r2, #69	; 0x45
 8006db0:	4618      	mov	r0, r3
 8006db2:	f002 f8b0 	bl	8008f16 <memcpy>
	ESP_SendData(URL, PORT, get_t, sizeof(get_t) - 1, 1);
 8006db6:	f241 318a 	movw	r1, #5002	; 0x138a
 8006dba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	2344      	movs	r3, #68	; 0x44
 8006dc4:	4824      	ldr	r0, [pc, #144]	; (8006e58 <ESP_UpdateTime+0xb8>)
 8006dc6:	f7fb fc1b 	bl	8002600 <ESP_SendData>
	vTaskDelay(pdMS_TO_TICKS(1000));
 8006dca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006dce:	f7fe fdef 	bl	80059b0 <vTaskDelay>

	char* ptr_tm = NULL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	677b      	str	r3, [r7, #116]	; 0x74
	char* ptr_tz = NULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	673b      	str	r3, [r7, #112]	; 0x70
	if( (ptr_tm = strstr(ESP_GetRxData(), "\"tm:")) != NULL
 8006dda:	f7fb fb85 	bl	80024e8 <ESP_GetRxData>
 8006dde:	4603      	mov	r3, r0
 8006de0:	491e      	ldr	r1, [pc, #120]	; (8006e5c <ESP_UpdateTime+0xbc>)
 8006de2:	4618      	mov	r0, r3
 8006de4:	f002 fb52 	bl	800948c <strstr>
 8006de8:	6778      	str	r0, [r7, #116]	; 0x74
 8006dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d02d      	beq.n	8006e4c <ESP_UpdateTime+0xac>
	 && (ptr_tz = strstr(ESP_GetRxData(),  ",tz:")) != NULL )
 8006df0:	f7fb fb7a 	bl	80024e8 <ESP_GetRxData>
 8006df4:	4603      	mov	r3, r0
 8006df6:	491a      	ldr	r1, [pc, #104]	; (8006e60 <ESP_UpdateTime+0xc0>)
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f002 fb47 	bl	800948c <strstr>
 8006dfe:	6738      	str	r0, [r7, #112]	; 0x70
 8006e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d022      	beq.n	8006e4c <ESP_UpdateTime+0xac>
	{
		struct tm tmp;
		long tm = strtol(ptr_tm + 4, NULL, 10);
 8006e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e08:	3304      	adds	r3, #4
 8006e0a:	220a      	movs	r2, #10
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f002 fbea 	bl	80095e8 <strtol>
 8006e14:	4603      	mov	r3, r0
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
		int8_t tz = strtol(ptr_tz + 4, NULL, 10);
 8006e18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	220a      	movs	r2, #10
 8006e1e:	2100      	movs	r1, #0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f002 fbe1 	bl	80095e8 <strtol>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		(void) localtime_r((time_t *)&tm, &tmp);
 8006e2c:	463a      	mov	r2, r7
 8006e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e32:	4611      	mov	r1, r2
 8006e34:	4618      	mov	r0, r3
 8006e36:	f001 ff57 	bl	8008ce8 <localtime_r>
		tmp.tm_hour += tz;
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006e40:	4413      	add	r3, r2
 8006e42:	60bb      	str	r3, [r7, #8]
		RTC_SetTime(&tmp);
 8006e44:	463b      	mov	r3, r7
 8006e46:	4618      	mov	r0, r3
 8006e48:	f001 fd9a 	bl	8008980 <RTC_SetTime>
	}
}
 8006e4c:	bf00      	nop
 8006e4e:	3778      	adds	r7, #120	; 0x78
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	0800ae5c 	.word	0x0800ae5c
 8006e58:	0800afe8 	.word	0x0800afe8
 8006e5c:	0800ae4c 	.word	0x0800ae4c
 8006e60:	0800ae54 	.word	0x0800ae54

08006e64 <ESP_Task>:
	CONNECT_WIFI,
	SEND_REQ
}CN_ST;

void ESP_Task( void * pvParameters )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d009      	beq.n	8006e86 <ESP_Task+0x22>
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	60bb      	str	r3, [r7, #8]
 8006e84:	e7fe      	b.n	8006e84 <ESP_Task+0x20>

    ESP_Init(vTaskDelay);
 8006e86:	481d      	ldr	r0, [pc, #116]	; (8006efc <ESP_Task+0x98>)
 8006e88:	f7fb fab2 	bl	80023f0 <ESP_Init>
    FST_VALUE[0] = 0;
 8006e8c:	4b1c      	ldr	r3, [pc, #112]	; (8006f00 <ESP_Task+0x9c>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	701a      	strb	r2, [r3, #0]
    CN_ST connection_state = RST;
 8006e92:	2301      	movs	r3, #1
 8006e94:	73fb      	strb	r3, [r7, #15]

    while(1)
    {
    	switch(connection_state)
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d827      	bhi.n	8006eee <ESP_Task+0x8a>
 8006e9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <ESP_Task+0x40>)
 8006ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea4:	08006eb5 	.word	0x08006eb5
 8006ea8:	08006ec5 	.word	0x08006ec5
 8006eac:	08006ed1 	.word	0x08006ed1
 8006eb0:	08006ee9 	.word	0x08006ee9
    	{
    	case RST:
    		FST_VALUE[0] = 0;
 8006eb4:	4b12      	ldr	r3, [pc, #72]	; (8006f00 <ESP_Task+0x9c>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	701a      	strb	r2, [r3, #0]
    		ESP_SoftReset();
 8006eba:	f7fb fb1f 	bl	80024fc <ESP_SoftReset>
    		connection_state = SET_MODE;
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	73fb      	strb	r3, [r7, #15]
    		break;
 8006ec2:	e015      	b.n	8006ef0 <ESP_Task+0x8c>

    	case SET_MODE:
    		ESP_SetMode(ESP_MODE_BOTH);
 8006ec4:	2003      	movs	r0, #3
 8006ec6:	f7fb fb25 	bl	8002514 <ESP_SetMode>
    		connection_state = CONNECT_WIFI;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	73fb      	strb	r3, [r7, #15]
    		break;
 8006ece:	e00f      	b.n	8006ef0 <ESP_Task+0x8c>

    	case CONNECT_WIFI:
    		ESP_SetParamsSoftAP("DontTouchAnything", "save_809");
 8006ed0:	490c      	ldr	r1, [pc, #48]	; (8006f04 <ESP_Task+0xa0>)
 8006ed2:	480d      	ldr	r0, [pc, #52]	; (8006f08 <ESP_Task+0xa4>)
 8006ed4:	f7fb fb5e 	bl	8002594 <ESP_SetParamsSoftAP>
    		ESP_UpdateTime();
 8006ed8:	f7ff ff62 	bl	8006da0 <ESP_UpdateTime>
    		connection_state = SEND_REQ;
 8006edc:	2304      	movs	r3, #4
 8006ede:	73fb      	strb	r3, [r7, #15]
    		FST_VALUE[0] = 1;
 8006ee0:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <ESP_Task+0x9c>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	701a      	strb	r2, [r3, #0]
    		break;
 8006ee6:	e003      	b.n	8006ef0 <ESP_Task+0x8c>

    	case SEND_REQ:

    		ESP_GetJson();
 8006ee8:	f7ff ff1c 	bl	8006d24 <ESP_GetJson>
    		break;
 8006eec:	e000      	b.n	8006ef0 <ESP_Task+0x8c>

    	default:
    		break;
 8006eee:	bf00      	nop

    	}

    	//ESP_SendSensorList();
    	vTaskDelay(pdMS_TO_TICKS(1000));
 8006ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ef4:	f7fe fd5c 	bl	80059b0 <vTaskDelay>
    	switch(connection_state)
 8006ef8:	e7cd      	b.n	8006e96 <ESP_Task+0x32>
 8006efa:	bf00      	nop
 8006efc:	080059b1 	.word	0x080059b1
 8006f00:	20008b54 	.word	0x20008b54
 8006f04:	0800af70 	.word	0x0800af70
 8006f08:	0800af7c 	.word	0x0800af7c

08006f0c <ESP_TaskInit>:
    }
}

void ESP_TaskInit( void )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	607b      	str	r3, [r7, #4]
    xTaskCreate(
 8006f16:	1d3b      	adds	r3, r7, #4
 8006f18:	9301      	str	r3, [sp, #4]
 8006f1a:	2304      	movs	r3, #4
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	2301      	movs	r3, #1
 8006f20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f24:	4903      	ldr	r1, [pc, #12]	; (8006f34 <ESP_TaskInit+0x28>)
 8006f26:	4804      	ldr	r0, [pc, #16]	; (8006f38 <ESP_TaskInit+0x2c>)
 8006f28:	f7fe fbfe 	bl	8005728 <xTaskCreate>
                    "ESP_Task",    				 /* Text name for the task. */
					2048,	 					 /* Stack size in words, not bytes. */
                    ( void * ) 1,     		 	 /* Parameter passed into the task. */
                    4,				 			 /* Priority at which the task is created. */
                    &xHandle );   		   	     /* Used to pass out the created task's handle. */
}
 8006f2c:	bf00      	nop
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	0800af90 	.word	0x0800af90
 8006f38:	08006e65 	.word	0x08006e65

08006f3c <LL_GPIO_ReadInputPort>:
  * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <INO_Init>:
/*
 * INO - PE8-PE15 inputs pins
 */

void INO_Init()
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f5a:	463b      	mov	r3, r7
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	605a      	str	r2, [r3, #4]
 8006f62:	609a      	str	r2, [r3, #8]
 8006f64:	60da      	str	r2, [r3, #12]
 8006f66:	611a      	str	r2, [r3, #16]
 8006f68:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_8 || LL_GPIO_PIN_9 || LL_GPIO_PIN_10 || LL_GPIO_PIN_11
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	603b      	str	r3, [r7, #0]
					 || LL_GPIO_PIN_12 || LL_GPIO_PIN_13 || LL_GPIO_PIN_14 || LL_GPIO_PIN_15;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8006f72:	2302      	movs	r3, #2
 8006f74:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f76:	463b      	mov	r3, r7
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4803      	ldr	r0, [pc, #12]	; (8006f88 <INO_Init+0x34>)
 8006f7c:	f7fc f8cf 	bl	800311e <LL_GPIO_Init>
}
 8006f80:	bf00      	nop
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	40021000 	.word	0x40021000

08006f8c <INO_GetValue>:

uint8_t INO_GetValue(uint8_t pin)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	71fb      	strb	r3, [r7, #7]
	return LL_GPIO_ReadInputPort(GPIOE) & (1 << pin);
 8006f96:	4808      	ldr	r0, [pc, #32]	; (8006fb8 <INO_GetValue+0x2c>)
 8006f98:	f7ff ffd0 	bl	8006f3c <LL_GPIO_ReadInputPort>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	79fb      	ldrb	r3, [r7, #7]
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	4013      	ands	r3, r2
 8006fac:	b2db      	uxtb	r3, r3
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40021000 	.word	0x40021000

08006fbc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	619a      	str	r2, [r3, #24]
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	041a      	lsls	r2, r3, #16
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	619a      	str	r2, [r3, #24]
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
	...

08006ff8 <BoardLED_Init>:
};

uint8_t FST_VALUE[3] = {0};

static void BoardLED_Init()
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ffe:	463b      	mov	r3, r7
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	605a      	str	r2, [r3, #4]
 8007006:	609a      	str	r2, [r3, #8]
 8007008:	60da      	str	r2, [r3, #12]
 800700a:	611a      	str	r2, [r3, #16]
 800700c:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = BOARD_LED;
 800700e:	2302      	movs	r3, #2
 8007010:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007012:	2301      	movs	r3, #1
 8007014:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007016:	2302      	movs	r3, #2
 8007018:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800701a:	2301      	movs	r3, #1
 800701c:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(BOARD_PORT, &GPIO_InitStruct);
 800701e:	463b      	mov	r3, r7
 8007020:	4619      	mov	r1, r3
 8007022:	4814      	ldr	r0, [pc, #80]	; (8007074 <BoardLED_Init+0x7c>)
 8007024:	f7fc f87b 	bl	800311e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8007028:	233c      	movs	r3, #60	; 0x3c
 800702a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800702c:	2301      	movs	r3, #1
 800702e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007030:	2302      	movs	r3, #2
 8007032:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;//LL_GPIO_OUTPUT_OPENDRAIN;
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(FSTR_PORT, &GPIO_InitStruct);
 8007038:	463b      	mov	r3, r7
 800703a:	4619      	mov	r1, r3
 800703c:	480e      	ldr	r0, [pc, #56]	; (8007078 <BoardLED_Init+0x80>)
 800703e:	f7fc f86e 	bl	800311e <LL_GPIO_Init>

	LL_GPIO_ResetOutputPin(BOARD_PORT, BOARD_LED);
 8007042:	2102      	movs	r1, #2
 8007044:	480b      	ldr	r0, [pc, #44]	; (8007074 <BoardLED_Init+0x7c>)
 8007046:	f7ff ffc7 	bl	8006fd8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(FSTR_PORT, F_LED);
 800704a:	2110      	movs	r1, #16
 800704c:	480a      	ldr	r0, [pc, #40]	; (8007078 <BoardLED_Init+0x80>)
 800704e:	f7ff ffc3 	bl	8006fd8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(FSTR_PORT, S_LED);
 8007052:	2120      	movs	r1, #32
 8007054:	4808      	ldr	r0, [pc, #32]	; (8007078 <BoardLED_Init+0x80>)
 8007056:	f7ff ffbf 	bl	8006fd8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(FSTR_PORT, T_LED);
 800705a:	2108      	movs	r1, #8
 800705c:	4806      	ldr	r0, [pc, #24]	; (8007078 <BoardLED_Init+0x80>)
 800705e:	f7ff ffbb 	bl	8006fd8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(FSTR_PORT, R_LED);
 8007062:	2104      	movs	r1, #4
 8007064:	4804      	ldr	r0, [pc, #16]	; (8007078 <BoardLED_Init+0x80>)
 8007066:	f7ff ffb7 	bl	8006fd8 <LL_GPIO_ResetOutputPin>
}
 800706a:	bf00      	nop
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	40020000 	.word	0x40020000
 8007078:	40021000 	.word	0x40021000

0800707c <FSTRLED_Set>:
		LL_GPIO_ResetOutputPin(BOARD_PORT, BOARD_LED);
	}
}

static void FSTRLED_Set(uint32_t led, uint8_t val)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
	if(val) {
 8007088:	78fb      	ldrb	r3, [r7, #3]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d004      	beq.n	8007098 <FSTRLED_Set+0x1c>
		LL_GPIO_SetOutputPin(FSTR_PORT, led);
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	4805      	ldr	r0, [pc, #20]	; (80070a8 <FSTRLED_Set+0x2c>)
 8007092:	f7ff ff93 	bl	8006fbc <LL_GPIO_SetOutputPin>
	} else {
		LL_GPIO_ResetOutputPin(FSTR_PORT, led);
	}
}
 8007096:	e003      	b.n	80070a0 <FSTRLED_Set+0x24>
		LL_GPIO_ResetOutputPin(FSTR_PORT, led);
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	4803      	ldr	r0, [pc, #12]	; (80070a8 <FSTRLED_Set+0x2c>)
 800709c:	f7ff ff9c 	bl	8006fd8 <LL_GPIO_ResetOutputPin>
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	40021000 	.word	0x40021000

080070ac <Led_Task>:

void Led_Task( void * pvParameters )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d009      	beq.n	80070ce <Led_Task+0x22>
 80070ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070be:	f383 8811 	msr	BASEPRI, r3
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	e7fe      	b.n	80070cc <Led_Task+0x20>

    BoardLED_Init();
 80070ce:	f7ff ff93 	bl	8006ff8 <BoardLED_Init>
    while(1)
    {
    	FSTRLED_Set(F_LED, FST_VALUE[0]);
 80070d2:	4b0d      	ldr	r3, [pc, #52]	; (8007108 <Led_Task+0x5c>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	4619      	mov	r1, r3
 80070d8:	2010      	movs	r0, #16
 80070da:	f7ff ffcf 	bl	800707c <FSTRLED_Set>
    	FSTRLED_Set(S_LED, FST_VALUE[1]);
 80070de:	4b0a      	ldr	r3, [pc, #40]	; (8007108 <Led_Task+0x5c>)
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	4619      	mov	r1, r3
 80070e4:	2020      	movs	r0, #32
 80070e6:	f7ff ffc9 	bl	800707c <FSTRLED_Set>
    	FSTRLED_Set(T_LED, FST_VALUE[2]);
 80070ea:	4b07      	ldr	r3, [pc, #28]	; (8007108 <Led_Task+0x5c>)
 80070ec:	789b      	ldrb	r3, [r3, #2]
 80070ee:	4619      	mov	r1, r3
 80070f0:	2008      	movs	r0, #8
 80070f2:	f7ff ffc3 	bl	800707c <FSTRLED_Set>
    	FSTRLED_Set(R_LED, 0);
 80070f6:	2100      	movs	r1, #0
 80070f8:	2004      	movs	r0, #4
 80070fa:	f7ff ffbf 	bl	800707c <FSTRLED_Set>
    	vTaskDelay(pdMS_TO_TICKS(10));
 80070fe:	200a      	movs	r0, #10
 8007100:	f7fe fc56 	bl	80059b0 <vTaskDelay>
    	FSTRLED_Set(F_LED, FST_VALUE[0]);
 8007104:	e7e5      	b.n	80070d2 <Led_Task+0x26>
 8007106:	bf00      	nop
 8007108:	20008b54 	.word	0x20008b54

0800710c <Led_TaskInit>:
    }
}

void Led_TaskInit( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af02      	add	r7, sp, #8
	//BaseType_t xReturned;
	TaskHandle_t xHandle = NULL;
 8007112:	2300      	movs	r3, #0
 8007114:	607b      	str	r3, [r7, #4]

    //xReturned =
	xTaskCreate(
 8007116:	1d3b      	adds	r3, r7, #4
 8007118:	9301      	str	r3, [sp, #4]
 800711a:	2304      	movs	r3, #4
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	2301      	movs	r3, #1
 8007120:	2280      	movs	r2, #128	; 0x80
 8007122:	4904      	ldr	r1, [pc, #16]	; (8007134 <Led_TaskInit+0x28>)
 8007124:	4804      	ldr	r0, [pc, #16]	; (8007138 <Led_TaskInit+0x2c>)
 8007126:	f7fe faff 	bl	8005728 <xTaskCreate>
                    "Led_Task",    				 /* Text name for the task. */
					128,	 					 /* Stack size in words, not bytes. */
                    ( void * ) 1,     		 	 /* Parameter passed into the task. */
                    4,				 			 /* Priority at which the task is created. */
                    &xHandle );   		   	     /* Used to pass out the created task's handle. */
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	0800af9c 	.word	0x0800af9c
 8007138:	080070ad 	.word	0x080070ad

0800713c <LL_SPI_Enable>:
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	601a      	str	r2, [r3, #0]
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <LL_SPI_SetStandard>:
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f023 0210 	bic.w	r2, r3, #16
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	431a      	orrs	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	605a      	str	r2, [r3, #4]
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8007182:	b480      	push	{r7}
 8007184:	b085      	sub	sp, #20
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	460b      	mov	r3, r1
 800718c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	330c      	adds	r3, #12
 8007192:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	78fa      	ldrb	r2, [r7, #3]
 8007198:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800719a:	bf00      	nop
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <LL_GPIO_SetOutputPin>:
{
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	619a      	str	r2, [r3, #24]
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <LL_GPIO_ResetOutputPin>:
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	041a      	lsls	r2, r3, #16
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	619a      	str	r2, [r3, #24]
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <SPI2_Init>:
#include "FreeRTOS.h"
#include "task.h"


void SPI2_Init(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b090      	sub	sp, #64	; 0x40
 80071e4:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80071e6:	f107 0318 	add.w	r3, r7, #24
 80071ea:	2228      	movs	r2, #40	; 0x28
 80071ec:	2100      	movs	r1, #0
 80071ee:	4618      	mov	r0, r3
 80071f0:	f001 fe9c 	bl	8008f2c <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071f4:	463b      	mov	r3, r7
 80071f6:	2200      	movs	r2, #0
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	605a      	str	r2, [r3, #4]
 80071fc:	609a      	str	r2, [r3, #8]
 80071fe:	60da      	str	r2, [r3, #12]
 8007200:	611a      	str	r2, [r3, #16]
 8007202:	615a      	str	r2, [r3, #20]
	/**SPI2 GPIO Configuration
	PC2   ------> SPI2_MISO
	PC3   ------> SPI2_MOSI
	PB13  ------> SPI2_SCK
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8007204:	230c      	movs	r3, #12
 8007206:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007208:	2302      	movs	r3, #2
 800720a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800720c:	2303      	movs	r3, #3
 800720e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007214:	2300      	movs	r3, #0
 8007216:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8007218:	2305      	movs	r3, #5
 800721a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800721c:	463b      	mov	r3, r7
 800721e:	4619      	mov	r1, r3
 8007220:	481d      	ldr	r0, [pc, #116]	; (8007298 <SPI2_Init+0xb8>)
 8007222:	f7fb ff7c 	bl	800311e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8007226:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800722a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800722c:	2302      	movs	r3, #2
 800722e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007230:	2303      	movs	r3, #3
 8007232:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007234:	2300      	movs	r3, #0
 8007236:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007238:	2300      	movs	r3, #0
 800723a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800723c:	2305      	movs	r3, #5
 800723e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007240:	463b      	mov	r3, r7
 8007242:	4619      	mov	r1, r3
 8007244:	4815      	ldr	r0, [pc, #84]	; (800729c <SPI2_Init+0xbc>)
 8007246:	f7fb ff6a 	bl	800311e <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800724a:	2300      	movs	r3, #0
 800724c:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800724e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007252:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8007254:	2300      	movs	r3, #0
 8007256:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8007258:	2300      	movs	r3, #0
 800725a:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800725c:	2300      	movs	r3, #0
 800725e:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8007260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007264:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8007266:	2310      	movs	r3, #16
 8007268:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800726a:	2300      	movs	r3, #0
 800726c:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800726e:	2300      	movs	r3, #0
 8007270:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8007272:	230a      	movs	r3, #10
 8007274:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(SPI2, &SPI_InitStruct);
 8007276:	f107 0318 	add.w	r3, r7, #24
 800727a:	4619      	mov	r1, r3
 800727c:	4808      	ldr	r0, [pc, #32]	; (80072a0 <SPI2_Init+0xc0>)
 800727e:	f7fc fc4c 	bl	8003b1a <LL_SPI_Init>
	LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8007282:	2100      	movs	r1, #0
 8007284:	4806      	ldr	r0, [pc, #24]	; (80072a0 <SPI2_Init+0xc0>)
 8007286:	f7ff ff69 	bl	800715c <LL_SPI_SetStandard>
	LL_SPI_Enable(SPI2);
 800728a:	4805      	ldr	r0, [pc, #20]	; (80072a0 <SPI2_Init+0xc0>)
 800728c:	f7ff ff56 	bl	800713c <LL_SPI_Enable>
}
 8007290:	bf00      	nop
 8007292:	3740      	adds	r7, #64	; 0x40
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40020800 	.word	0x40020800
 800729c:	40020400 	.word	0x40020400
 80072a0:	40003800 	.word	0x40003800

080072a4 <SPI2_SendByte>:

static void SPI2_SendByte(uint8_t byte)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	71fb      	strb	r3, [r7, #7]
	while (!(SPI2->SR & SPI_SR_TXE));
 80072ae:	bf00      	nop
 80072b0:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <SPI2_SendByte+0x38>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d0f9      	beq.n	80072b0 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(SPI2, byte);
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	4619      	mov	r1, r3
 80072c0:	4806      	ldr	r0, [pc, #24]	; (80072dc <SPI2_SendByte+0x38>)
 80072c2:	f7ff ff5e 	bl	8007182 <LL_SPI_TransmitData8>
	while (SPI2->SR & SPI_SR_BSY);
 80072c6:	bf00      	nop
 80072c8:	4b04      	ldr	r3, [pc, #16]	; (80072dc <SPI2_SendByte+0x38>)
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1f9      	bne.n	80072c8 <SPI2_SendByte+0x24>
}
 80072d4:	bf00      	nop
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	40003800 	.word	0x40003800

080072e0 <GPIO_Init>:

static void GPIO_Init()
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072e6:	463b      	mov	r3, r7
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	605a      	str	r2, [r3, #4]
 80072ee:	609a      	str	r2, [r3, #8]
 80072f0:	60da      	str	r2, [r3, #12]
 80072f2:	611a      	str	r2, [r3, #16]
 80072f4:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_1; //ST_CP latchPin
 80072f6:	2302      	movs	r3, #2
 80072f8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80072fa:	2301      	movs	r3, #1
 80072fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80072fe:	2301      	movs	r3, #1
 8007300:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8007302:	2301      	movs	r3, #1
 8007304:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007306:	463b      	mov	r3, r7
 8007308:	4619      	mov	r1, r3
 800730a:	4803      	ldr	r0, [pc, #12]	; (8007318 <GPIO_Init+0x38>)
 800730c:	f7fb ff07 	bl	800311e <LL_GPIO_Init>
}
 8007310:	bf00      	nop
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40020800 	.word	0x40020800

0800731c <LATCH_Set>:

static void LATCH_Set(uint8_t val)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	4603      	mov	r3, r0
 8007324:	71fb      	strb	r3, [r7, #7]
	if(val) {
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <LATCH_Set+0x1a>
		LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_1);
 800732c:	2102      	movs	r1, #2
 800732e:	4806      	ldr	r0, [pc, #24]	; (8007348 <LATCH_Set+0x2c>)
 8007330:	f7ff ff39 	bl	80071a6 <LL_GPIO_SetOutputPin>
	} else {
		LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1);
	}
}
 8007334:	e003      	b.n	800733e <LATCH_Set+0x22>
		LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1);
 8007336:	2102      	movs	r1, #2
 8007338:	4803      	ldr	r0, [pc, #12]	; (8007348 <LATCH_Set+0x2c>)
 800733a:	f7ff ff42 	bl	80071c2 <LL_GPIO_ResetOutputPin>
}
 800733e:	bf00      	nop
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	40020800 	.word	0x40020800

0800734c <Relay_SetValue>:

static void Relay_SetValue(uint16_t out_value)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	4603      	mov	r3, r0
 8007354:	80fb      	strh	r3, [r7, #6]
	LATCH_Set(0);
 8007356:	2000      	movs	r0, #0
 8007358:	f7ff ffe0 	bl	800731c <LATCH_Set>
	SPI2_SendByte(~(uint8_t)(out_value >> 8));
 800735c:	88fb      	ldrh	r3, [r7, #6]
 800735e:	0a1b      	lsrs	r3, r3, #8
 8007360:	b29b      	uxth	r3, r3
 8007362:	b2db      	uxtb	r3, r3
 8007364:	43db      	mvns	r3, r3
 8007366:	b2db      	uxtb	r3, r3
 8007368:	4618      	mov	r0, r3
 800736a:	f7ff ff9b 	bl	80072a4 <SPI2_SendByte>
	SPI2_SendByte(~(uint8_t)(out_value & 0xFF));
 800736e:	88fb      	ldrh	r3, [r7, #6]
 8007370:	b2db      	uxtb	r3, r3
 8007372:	43db      	mvns	r3, r3
 8007374:	b2db      	uxtb	r3, r3
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff ff94 	bl	80072a4 <SPI2_SendByte>
	LATCH_Set(1);
 800737c:	2001      	movs	r0, #1
 800737e:	f7ff ffcd 	bl	800731c <LATCH_Set>
}
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <Relay_Task>:

void Relay_Task( void * pvParameters )
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b086      	sub	sp, #24
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d009      	beq.n	80073ac <Relay_Task+0x22>
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	e7fe      	b.n	80073aa <Relay_Task+0x20>

    uint16_t value = 0;
 80073ac:	2300      	movs	r3, #0
 80073ae:	823b      	strh	r3, [r7, #16]
    uint16_t prev_value = 0;
 80073b0:	2300      	movs	r3, #0
 80073b2:	82fb      	strh	r3, [r7, #22]

    SPI2_Init();
 80073b4:	f7ff ff14 	bl	80071e0 <SPI2_Init>
    GPIO_Init();
 80073b8:	f7ff ff92 	bl	80072e0 <GPIO_Init>

    Relay_SetValue(0x0000);
 80073bc:	2000      	movs	r0, #0
 80073be:	f7ff ffc5 	bl	800734c <Relay_SetValue>

    while(1)
    {
    	value = Get_OutValue();
 80073c2:	f7ff fb83 	bl	8006acc <Get_OutValue>
 80073c6:	4603      	mov	r3, r0
 80073c8:	823b      	strh	r3, [r7, #16]

    	if(prev_value != value)
 80073ca:	8afa      	ldrh	r2, [r7, #22]
 80073cc:	8a3b      	ldrh	r3, [r7, #16]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d03c      	beq.n	800744c <Relay_Task+0xc2>
    	{
    		prev_value = value;
 80073d2:	8a3b      	ldrh	r3, [r7, #16]
 80073d4:	82fb      	strh	r3, [r7, #22]

    		uint16_t out_value = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	82bb      	strh	r3, [r7, #20]

        	for(uint8_t i = 0; i < 8; ++i)  {
 80073da:	2300      	movs	r3, #0
 80073dc:	74fb      	strb	r3, [r7, #19]
 80073de:	e02a      	b.n	8007436 <Relay_Task+0xac>

        		if( value & (1 << (i * 2) ) )
 80073e0:	8a3a      	ldrh	r2, [r7, #16]
 80073e2:	7cfb      	ldrb	r3, [r7, #19]
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	fa42 f303 	asr.w	r3, r2, r3
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d009      	beq.n	8007406 <Relay_Task+0x7c>
        		{
        			out_value |= ( 1 << i );
 80073f2:	7cfb      	ldrb	r3, [r7, #19]
 80073f4:	2201      	movs	r2, #1
 80073f6:	fa02 f303 	lsl.w	r3, r2, r3
 80073fa:	b21a      	sxth	r2, r3
 80073fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007400:	4313      	orrs	r3, r2
 8007402:	b21b      	sxth	r3, r3
 8007404:	82bb      	strh	r3, [r7, #20]
        		}

        		if( value & (1 << (i * 2 + 1) ) )
 8007406:	8a3a      	ldrh	r2, [r7, #16]
 8007408:	7cfb      	ldrb	r3, [r7, #19]
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	3301      	adds	r3, #1
 800740e:	fa42 f303 	asr.w	r3, r2, r3
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <Relay_Task+0xa6>
        		{
        			out_value |= ( 1 << (i + 8) );
 800741a:	7cfb      	ldrb	r3, [r7, #19]
 800741c:	3308      	adds	r3, #8
 800741e:	2201      	movs	r2, #1
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	b21a      	sxth	r2, r3
 8007426:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	b21b      	sxth	r3, r3
 800742e:	82bb      	strh	r3, [r7, #20]
        	for(uint8_t i = 0; i < 8; ++i)  {
 8007430:	7cfb      	ldrb	r3, [r7, #19]
 8007432:	3301      	adds	r3, #1
 8007434:	74fb      	strb	r3, [r7, #19]
 8007436:	7cfb      	ldrb	r3, [r7, #19]
 8007438:	2b07      	cmp	r3, #7
 800743a:	d9d1      	bls.n	80073e0 <Relay_Task+0x56>
        		}
        	}

    		taskENTER_CRITICAL();
 800743c:	f7fd f956 	bl	80046ec <vPortEnterCritical>
    		Relay_SetValue(out_value);
 8007440:	8abb      	ldrh	r3, [r7, #20]
 8007442:	4618      	mov	r0, r3
 8007444:	f7ff ff82 	bl	800734c <Relay_SetValue>
    		taskEXIT_CRITICAL();
 8007448:	f7fd f97e 	bl	8004748 <vPortExitCritical>
    	}

    	vTaskDelay(pdMS_TO_TICKS(40));
 800744c:	2028      	movs	r0, #40	; 0x28
 800744e:	f7fe faaf 	bl	80059b0 <vTaskDelay>
    	value = Get_OutValue();
 8007452:	e7b6      	b.n	80073c2 <Relay_Task+0x38>

08007454 <Relay_TaskInit>:
    }
}

void Relay_TaskInit( void )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af02      	add	r7, sp, #8
	//BaseType_t xReturned;
	TaskHandle_t xHandle = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	607b      	str	r3, [r7, #4]

    //xReturned =
	xTaskCreate(
 800745e:	1d3b      	adds	r3, r7, #4
 8007460:	9301      	str	r3, [sp, #4]
 8007462:	2304      	movs	r3, #4
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	2301      	movs	r3, #1
 8007468:	2280      	movs	r2, #128	; 0x80
 800746a:	4904      	ldr	r1, [pc, #16]	; (800747c <Relay_TaskInit+0x28>)
 800746c:	4804      	ldr	r0, [pc, #16]	; (8007480 <Relay_TaskInit+0x2c>)
 800746e:	f7fe f95b 	bl	8005728 <xTaskCreate>
                    "Relay_Task",    				 /* Text name for the task. */
					128,	 						 /* Stack size in words, not bytes. */
                    ( void * ) 1,     			 	 /* Parameter passed into the task. */
                    4,				 				 /* Priority at which the task is created. */
                    &xHandle );   			   	     /* Used to pass out the created task's handle. */
}
 8007472:	bf00      	nop
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	0800afa8 	.word	0x0800afa8
 8007480:	0800738b 	.word	0x0800738b

08007484 <Sensor_ClearList>:
static uint8_t sensor_counter = 0;
static char buff[16] = { 0 };
static f_ptr delay;

void Sensor_ClearList()
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
	sensor_counter = 0;
 8007488:	4b05      	ldr	r3, [pc, #20]	; (80074a0 <Sensor_ClearList+0x1c>)
 800748a:	2200      	movs	r2, #0
 800748c:	701a      	strb	r2, [r3, #0]
	memset(sensor_list, 0, sizeof(struct xSENSOR) * SENSOR_MAX);
 800748e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8007492:	2100      	movs	r1, #0
 8007494:	4803      	ldr	r0, [pc, #12]	; (80074a4 <Sensor_ClearList+0x20>)
 8007496:	f001 fd49 	bl	8008f2c <memset>
}
 800749a:	bf00      	nop
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20008b57 	.word	0x20008b57
 80074a4:	20016ce8 	.word	0x20016ce8

080074a8 <Sensor_Init>:

void Sensor_Init(f_ptr delay_function)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
	UART3_Init(&UART3_rx_data);
 80074b0:	4808      	ldr	r0, [pc, #32]	; (80074d4 <Sensor_Init+0x2c>)
 80074b2:	f000 fcbb 	bl	8007e2c <UART3_Init>
	Sensor_UpdateGpioInit();
 80074b6:	f000 fd1f 	bl	8007ef8 <Sensor_UpdateGpioInit>
	Sensor_ClearList();
 80074ba:	f7ff ffe3 	bl	8007484 <Sensor_ClearList>
	delay = delay_function;
 80074be:	4a06      	ldr	r2, [pc, #24]	; (80074d8 <Sensor_Init+0x30>)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6013      	str	r3, [r2, #0]
	FST_VALUE[1] = 0;
 80074c4:	4b05      	ldr	r3, [pc, #20]	; (80074dc <Sensor_Init+0x34>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	705a      	strb	r2, [r3, #1]
}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	200182b0 	.word	0x200182b0
 80074d8:	20008b68 	.word	0x20008b68
 80074dc:	20008b54 	.word	0x20008b54

080074e0 <Sensor_GPIOUpdateList>:

uint8_t Sensor_GPIOUpdateList()
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	af00      	add	r7, sp, #0
	return Sensor_GpioValue();
 80074e4:	f000 fd24 	bl	8007f30 <Sensor_GpioValue>
 80074e8:	4603      	mov	r3, r0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	bd80      	pop	{r7, pc}
	...

080074f0 <Sensor_UpdateList>:

void Sensor_UpdateList()
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
	FST_VALUE[1] = 0;
 80074f6:	4b2f      	ldr	r3, [pc, #188]	; (80075b4 <Sensor_UpdateList+0xc4>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	705a      	strb	r2, [r3, #1]
	Sensor_ClearList();
 80074fc:	f7ff ffc2 	bl	8007484 <Sensor_ClearList>

	for(uint32_t addr = 0; addr <= 0xFFFF; ++addr)
 8007500:	2300      	movs	r3, #0
 8007502:	607b      	str	r3, [r7, #4]
 8007504:	e04f      	b.n	80075a6 <Sensor_UpdateList+0xb6>
	{
		RingBuffClear(&UART3_rx_data);
 8007506:	482c      	ldr	r0, [pc, #176]	; (80075b8 <Sensor_UpdateList+0xc8>)
 8007508:	f7fb f937 	bl	800277a <RingBuffClear>

		sprintf(buff, "%04" PRIx16 "t", (uint16_t)addr);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	b29b      	uxth	r3, r3
 8007510:	461a      	mov	r2, r3
 8007512:	492a      	ldr	r1, [pc, #168]	; (80075bc <Sensor_UpdateList+0xcc>)
 8007514:	482a      	ldr	r0, [pc, #168]	; (80075c0 <Sensor_UpdateList+0xd0>)
 8007516:	f001 ff6d 	bl	80093f4 <siprintf>
		UART3_SendData(buff, 5);
 800751a:	2105      	movs	r1, #5
 800751c:	4828      	ldr	r0, [pc, #160]	; (80075c0 <Sensor_UpdateList+0xd0>)
 800751e:	f000 fd2d 	bl	8007f7c <UART3_SendData>

		delay(1);
 8007522:	4b28      	ldr	r3, [pc, #160]	; (80075c4 <Sensor_UpdateList+0xd4>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2001      	movs	r0, #1
 8007528:	4798      	blx	r3
		char* ptr = NULL;
 800752a:	2300      	movs	r3, #0
 800752c:	603b      	str	r3, [r7, #0]
		if( (ptr = strstr(RingBuffGetArray(&UART3_rx_data), "/")) != NULL )
 800752e:	4822      	ldr	r0, [pc, #136]	; (80075b8 <Sensor_UpdateList+0xc8>)
 8007530:	f7fb f93d 	bl	80027ae <RingBuffGetArray>
 8007534:	4603      	mov	r3, r0
 8007536:	212f      	movs	r1, #47	; 0x2f
 8007538:	4618      	mov	r0, r3
 800753a:	f001 ff7f 	bl	800943c <strchr>
 800753e:	6038      	str	r0, [r7, #0]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d029      	beq.n	800759a <Sensor_UpdateList+0xaa>
		{
			sensor_list[sensor_counter].addr = addr;
 8007546:	4b20      	ldr	r3, [pc, #128]	; (80075c8 <Sensor_UpdateList+0xd8>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	4619      	mov	r1, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	b298      	uxth	r0, r3
 8007550:	4a1e      	ldr	r2, [pc, #120]	; (80075cc <Sensor_UpdateList+0xdc>)
 8007552:	460b      	mov	r3, r1
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	440b      	add	r3, r1
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	3302      	adds	r3, #2
 800755e:	4602      	mov	r2, r0
 8007560:	801a      	strh	r2, [r3, #0]
			sensor_list[sensor_counter].type = (enum SENSOR_TYPE) *(ptr + 1);
 8007562:	4b19      	ldr	r3, [pc, #100]	; (80075c8 <Sensor_UpdateList+0xd8>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	4619      	mov	r1, r3
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	3301      	adds	r3, #1
 800756c:	7818      	ldrb	r0, [r3, #0]
 800756e:	4a17      	ldr	r2, [pc, #92]	; (80075cc <Sensor_UpdateList+0xdc>)
 8007570:	460b      	mov	r3, r1
 8007572:	005b      	lsls	r3, r3, #1
 8007574:	440b      	add	r3, r1
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	4602      	mov	r2, r0
 800757c:	701a      	strb	r2, [r3, #0]
			sensor_counter++;
 800757e:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <Sensor_UpdateList+0xd8>)
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	3301      	adds	r3, #1
 8007584:	b2da      	uxtb	r2, r3
 8007586:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <Sensor_UpdateList+0xd8>)
 8007588:	701a      	strb	r2, [r3, #0]
			if(sensor_counter >= 16)
 800758a:	4b0f      	ldr	r3, [pc, #60]	; (80075c8 <Sensor_UpdateList+0xd8>)
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	2b0f      	cmp	r3, #15
 8007590:	d903      	bls.n	800759a <Sensor_UpdateList+0xaa>
			{
				UART3_SendData_byte('/');
 8007592:	202f      	movs	r0, #47	; 0x2f
 8007594:	f000 fcda 	bl	8007f4c <UART3_SendData_byte>
				return;
 8007598:	e009      	b.n	80075ae <Sensor_UpdateList+0xbe>
			}
		}
		UART3_SendData_byte('/');
 800759a:	202f      	movs	r0, #47	; 0x2f
 800759c:	f000 fcd6 	bl	8007f4c <UART3_SendData_byte>
	for(uint32_t addr = 0; addr <= 0xFFFF; ++addr)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3301      	adds	r3, #1
 80075a4:	607b      	str	r3, [r7, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ac:	d3ab      	bcc.n	8007506 <Sensor_UpdateList+0x16>
	}
}
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	20008b54 	.word	0x20008b54
 80075b8:	200182b0 	.word	0x200182b0
 80075bc:	0800afb4 	.word	0x0800afb4
 80075c0:	20008b58 	.word	0x20008b58
 80075c4:	20008b68 	.word	0x20008b68
 80075c8:	20008b57 	.word	0x20008b57
 80075cc:	20016ce8 	.word	0x20016ce8

080075d0 <Sensor_UpdateValue>:

void Sensor_UpdateValue()
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
	FST_VALUE[1] = 1;
 80075d6:	4b4c      	ldr	r3, [pc, #304]	; (8007708 <Sensor_UpdateValue+0x138>)
 80075d8:	2201      	movs	r2, #1
 80075da:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 80075dc:	2300      	movs	r3, #0
 80075de:	71fb      	strb	r3, [r7, #7]
 80075e0:	e08a      	b.n	80076f8 <Sensor_UpdateValue+0x128>
	{
		if(sensor_list[i].addr == 0) {
 80075e2:	79fa      	ldrb	r2, [r7, #7]
 80075e4:	4949      	ldr	r1, [pc, #292]	; (800770c <Sensor_UpdateValue+0x13c>)
 80075e6:	4613      	mov	r3, r2
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	440b      	add	r3, r1
 80075f0:	3302      	adds	r3, #2
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d07b      	beq.n	80076f0 <Sensor_UpdateValue+0x120>
			continue;
		}

		RingBuffClear(&UART3_rx_data);
 80075f8:	4845      	ldr	r0, [pc, #276]	; (8007710 <Sensor_UpdateValue+0x140>)
 80075fa:	f7fb f8be 	bl	800277a <RingBuffClear>

		sprintf(buff, "%04" PRIx16 "v", sensor_list[i].addr);
 80075fe:	79fa      	ldrb	r2, [r7, #7]
 8007600:	4942      	ldr	r1, [pc, #264]	; (800770c <Sensor_UpdateValue+0x13c>)
 8007602:	4613      	mov	r3, r2
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	4413      	add	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	440b      	add	r3, r1
 800760c:	3302      	adds	r3, #2
 800760e:	881b      	ldrh	r3, [r3, #0]
 8007610:	461a      	mov	r2, r3
 8007612:	4940      	ldr	r1, [pc, #256]	; (8007714 <Sensor_UpdateValue+0x144>)
 8007614:	4840      	ldr	r0, [pc, #256]	; (8007718 <Sensor_UpdateValue+0x148>)
 8007616:	f001 feed 	bl	80093f4 <siprintf>
		UART3_SendData(buff, 5);
 800761a:	2105      	movs	r1, #5
 800761c:	483e      	ldr	r0, [pc, #248]	; (8007718 <Sensor_UpdateValue+0x148>)
 800761e:	f000 fcad 	bl	8007f7c <UART3_SendData>

		delay(5);
 8007622:	4b3e      	ldr	r3, [pc, #248]	; (800771c <Sensor_UpdateValue+0x14c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2005      	movs	r0, #5
 8007628:	4798      	blx	r3
		char* ptr = NULL;
 800762a:	2300      	movs	r3, #0
 800762c:	603b      	str	r3, [r7, #0]
		if( (ptr = strstr(RingBuffGetArray(&UART3_rx_data), "/")) != NULL )
 800762e:	4838      	ldr	r0, [pc, #224]	; (8007710 <Sensor_UpdateValue+0x140>)
 8007630:	f7fb f8bd 	bl	80027ae <RingBuffGetArray>
 8007634:	4603      	mov	r3, r0
 8007636:	212f      	movs	r1, #47	; 0x2f
 8007638:	4618      	mov	r0, r3
 800763a:	f001 feff 	bl	800943c <strchr>
 800763e:	6038      	str	r0, [r7, #0]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d01c      	beq.n	8007680 <Sensor_UpdateValue+0xb0>
		{
			sensor_list[i].value = *(ptr + 1) << 24 | *(ptr + 2) << 16 | *(ptr + 3) << 8 | *(ptr + 4);
 8007646:	79fa      	ldrb	r2, [r7, #7]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	3301      	adds	r3, #1
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	0619      	lsls	r1, r3, #24
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	3302      	adds	r3, #2
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	041b      	lsls	r3, r3, #16
 8007658:	4319      	orrs	r1, r3
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	3303      	adds	r3, #3
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	021b      	lsls	r3, r3, #8
 8007662:	430b      	orrs	r3, r1
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	3104      	adds	r1, #4
 8007668:	7809      	ldrb	r1, [r1, #0]
 800766a:	430b      	orrs	r3, r1
 800766c:	4618      	mov	r0, r3
 800766e:	4927      	ldr	r1, [pc, #156]	; (800770c <Sensor_UpdateValue+0x13c>)
 8007670:	4613      	mov	r3, r2
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	440b      	add	r3, r1
 800767a:	3304      	adds	r3, #4
 800767c:	6018      	str	r0, [r3, #0]
 800767e:	e033      	b.n	80076e8 <Sensor_UpdateValue+0x118>
		} else {
			if(sensor_list[i].error_counter > REQ_TO_DISABLE)
 8007680:	79fa      	ldrb	r2, [r7, #7]
 8007682:	4922      	ldr	r1, [pc, #136]	; (800770c <Sensor_UpdateValue+0x13c>)
 8007684:	4613      	mov	r3, r2
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	4413      	add	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	440b      	add	r3, r1
 800768e:	3308      	adds	r3, #8
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b10      	cmp	r3, #16
 8007694:	d90a      	bls.n	80076ac <Sensor_UpdateValue+0xdc>
			{
				sensor_list[i].addr = 0;
 8007696:	79fa      	ldrb	r2, [r7, #7]
 8007698:	491c      	ldr	r1, [pc, #112]	; (800770c <Sensor_UpdateValue+0x13c>)
 800769a:	4613      	mov	r3, r2
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	4413      	add	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	440b      	add	r3, r1
 80076a4:	3302      	adds	r3, #2
 80076a6:	2200      	movs	r2, #0
 80076a8:	801a      	strh	r2, [r3, #0]
 80076aa:	e01d      	b.n	80076e8 <Sensor_UpdateValue+0x118>
			} else {
				sensor_list[i].value = 0;
 80076ac:	79fa      	ldrb	r2, [r7, #7]
 80076ae:	4917      	ldr	r1, [pc, #92]	; (800770c <Sensor_UpdateValue+0x13c>)
 80076b0:	4613      	mov	r3, r2
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	3304      	adds	r3, #4
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]
				sensor_list[i].error_counter++;
 80076c0:	79fa      	ldrb	r2, [r7, #7]
 80076c2:	4912      	ldr	r1, [pc, #72]	; (800770c <Sensor_UpdateValue+0x13c>)
 80076c4:	4613      	mov	r3, r2
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	4413      	add	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	440b      	add	r3, r1
 80076ce:	3308      	adds	r3, #8
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	3301      	adds	r3, #1
 80076d4:	b2d8      	uxtb	r0, r3
 80076d6:	490d      	ldr	r1, [pc, #52]	; (800770c <Sensor_UpdateValue+0x13c>)
 80076d8:	4613      	mov	r3, r2
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	440b      	add	r3, r1
 80076e2:	3308      	adds	r3, #8
 80076e4:	4602      	mov	r2, r0
 80076e6:	701a      	strb	r2, [r3, #0]
			}
		}
		UART3_SendData_byte('/');
 80076e8:	202f      	movs	r0, #47	; 0x2f
 80076ea:	f000 fc2f 	bl	8007f4c <UART3_SendData_byte>
 80076ee:	e000      	b.n	80076f2 <Sensor_UpdateValue+0x122>
			continue;
 80076f0:	bf00      	nop
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	3301      	adds	r3, #1
 80076f6:	71fb      	strb	r3, [r7, #7]
 80076f8:	79fb      	ldrb	r3, [r7, #7]
 80076fa:	2b1f      	cmp	r3, #31
 80076fc:	f67f af71 	bls.w	80075e2 <Sensor_UpdateValue+0x12>
	}
}
 8007700:	bf00      	nop
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	20008b54 	.word	0x20008b54
 800770c:	20016ce8 	.word	0x20016ce8
 8007710:	200182b0 	.word	0x200182b0
 8007714:	0800afbc 	.word	0x0800afbc
 8007718:	20008b58 	.word	0x20008b58
 800771c:	20008b68 	.word	0x20008b68

08007720 <Sensor_CheckValue>:

uint8_t Sensor_CheckValue(uint16_t sen_addr, uint32_t value)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	6039      	str	r1, [r7, #0]
 800772a:	80fb      	strh	r3, [r7, #6]
	if(sen_addr == 0xFFFE) {
 800772c:	88fb      	ldrh	r3, [r7, #6]
 800772e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007732:	4293      	cmp	r3, r2
 8007734:	d101      	bne.n	800773a <Sensor_CheckValue+0x1a>
		return 0;
 8007736:	2300      	movs	r3, #0
 8007738:	e02c      	b.n	8007794 <Sensor_CheckValue+0x74>
	}

	if(sen_addr == 0xFFFF) {
 800773a:	88fb      	ldrh	r3, [r7, #6]
 800773c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007740:	4293      	cmp	r3, r2
 8007742:	d101      	bne.n	8007748 <Sensor_CheckValue+0x28>
		return 1;
 8007744:	2301      	movs	r3, #1
 8007746:	e025      	b.n	8007794 <Sensor_CheckValue+0x74>
	}

	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]
 800774c:	e01e      	b.n	800778c <Sensor_CheckValue+0x6c>
	{
		if(sensor_list[i].addr == sen_addr)
 800774e:	7bfa      	ldrb	r2, [r7, #15]
 8007750:	4913      	ldr	r1, [pc, #76]	; (80077a0 <Sensor_CheckValue+0x80>)
 8007752:	4613      	mov	r3, r2
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	3302      	adds	r3, #2
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	88fa      	ldrh	r2, [r7, #6]
 8007762:	429a      	cmp	r2, r3
 8007764:	d10f      	bne.n	8007786 <Sensor_CheckValue+0x66>
		{
			return sensor_list[i].value >= value ? 1 : 0;
 8007766:	7bfa      	ldrb	r2, [r7, #15]
 8007768:	490d      	ldr	r1, [pc, #52]	; (80077a0 <Sensor_CheckValue+0x80>)
 800776a:	4613      	mov	r3, r2
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	440b      	add	r3, r1
 8007774:	3304      	adds	r3, #4
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	bf2c      	ite	cs
 800777e:	2301      	movcs	r3, #1
 8007780:	2300      	movcc	r3, #0
 8007782:	b2db      	uxtb	r3, r3
 8007784:	e006      	b.n	8007794 <Sensor_CheckValue+0x74>
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	3301      	adds	r3, #1
 800778a:	73fb      	strb	r3, [r7, #15]
 800778c:	7bfb      	ldrb	r3, [r7, #15]
 800778e:	2b1f      	cmp	r3, #31
 8007790:	d9dd      	bls.n	800774e <Sensor_CheckValue+0x2e>
		}
	}
	return 0;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	20016ce8 	.word	0x20016ce8

080077a4 <Sensor_task>:
#include "FreeRTOS.h"
#include "task.h"


void Sensor_task( void * pvParameters )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d009      	beq.n	80077c6 <Sensor_task+0x22>
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	e7fe      	b.n	80077c4 <Sensor_task+0x20>

	Sensor_Init(vTaskDelay);
 80077c6:	4809      	ldr	r0, [pc, #36]	; (80077ec <Sensor_task+0x48>)
 80077c8:	f7ff fe6e 	bl	80074a8 <Sensor_Init>
	Sensor_UpdateList();
 80077cc:	f7ff fe90 	bl	80074f0 <Sensor_UpdateList>

	while(1)
	{
		if(Sensor_GPIOUpdateList())
 80077d0:	f7ff fe86 	bl	80074e0 <Sensor_GPIOUpdateList>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <Sensor_task+0x3a>
		{
			Sensor_UpdateList();
 80077da:	f7ff fe89 	bl	80074f0 <Sensor_UpdateList>
		}

		Sensor_UpdateValue();
 80077de:	f7ff fef7 	bl	80075d0 <Sensor_UpdateValue>

		vTaskDelay(pdMS_TO_TICKS(40));
 80077e2:	2028      	movs	r0, #40	; 0x28
 80077e4:	f7fe f8e4 	bl	80059b0 <vTaskDelay>
		if(Sensor_GPIOUpdateList())
 80077e8:	e7f2      	b.n	80077d0 <Sensor_task+0x2c>
 80077ea:	bf00      	nop
 80077ec:	080059b1 	.word	0x080059b1

080077f0 <Sensor_TaskInit>:
	}
}

void Sensor_TaskInit( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	607b      	str	r3, [r7, #4]

	//BaseType_t xReturned =
	xTaskCreate(
 80077fa:	1d3b      	adds	r3, r7, #4
 80077fc:	9301      	str	r3, [sp, #4]
 80077fe:	2304      	movs	r3, #4
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	2301      	movs	r3, #1
 8007804:	2280      	movs	r2, #128	; 0x80
 8007806:	4904      	ldr	r1, [pc, #16]	; (8007818 <Sensor_TaskInit+0x28>)
 8007808:	4804      	ldr	r0, [pc, #16]	; (800781c <Sensor_TaskInit+0x2c>)
 800780a:	f7fd ff8d 	bl	8005728 <xTaskCreate>
					128,	 						 /* Stack size in words, not bytes. */
                    ( void * ) 1,     			 	 /* Parameter passed into the task. */
                    4,				 				 /* Priority at which the task is created. */
                    &xHandle );   			   	     /* Used to pass out the created task's handle. */

}
 800780e:	bf00      	nop
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	0800afc4 	.word	0x0800afc4
 800781c:	080077a5 	.word	0x080077a5

08007820 <__NVIC_GetPriorityGrouping>:
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007824:	4b04      	ldr	r3, [pc, #16]	; (8007838 <__NVIC_GetPriorityGrouping+0x18>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	0a1b      	lsrs	r3, r3, #8
 800782a:	f003 0307 	and.w	r3, r3, #7
}
 800782e:	4618      	mov	r0, r3
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	e000ed00 	.word	0xe000ed00

0800783c <__NVIC_EnableIRQ>:
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800784a:	2b00      	cmp	r3, #0
 800784c:	db0b      	blt.n	8007866 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800784e:	4909      	ldr	r1, [pc, #36]	; (8007874 <__NVIC_EnableIRQ+0x38>)
 8007850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007854:	095b      	lsrs	r3, r3, #5
 8007856:	79fa      	ldrb	r2, [r7, #7]
 8007858:	f002 021f 	and.w	r2, r2, #31
 800785c:	2001      	movs	r0, #1
 800785e:	fa00 f202 	lsl.w	r2, r0, r2
 8007862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	e000e100 	.word	0xe000e100

08007878 <__NVIC_SetPriority>:
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	4603      	mov	r3, r0
 8007880:	6039      	str	r1, [r7, #0]
 8007882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007888:	2b00      	cmp	r3, #0
 800788a:	db0a      	blt.n	80078a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800788c:	490d      	ldr	r1, [pc, #52]	; (80078c4 <__NVIC_SetPriority+0x4c>)
 800788e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	0112      	lsls	r2, r2, #4
 8007898:	b2d2      	uxtb	r2, r2
 800789a:	440b      	add	r3, r1
 800789c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80078a0:	e00a      	b.n	80078b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078a2:	4909      	ldr	r1, [pc, #36]	; (80078c8 <__NVIC_SetPriority+0x50>)
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	f003 030f 	and.w	r3, r3, #15
 80078aa:	3b04      	subs	r3, #4
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	b2d2      	uxtb	r2, r2
 80078b0:	0112      	lsls	r2, r2, #4
 80078b2:	b2d2      	uxtb	r2, r2
 80078b4:	440b      	add	r3, r1
 80078b6:	761a      	strb	r2, [r3, #24]
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	e000e100 	.word	0xe000e100
 80078c8:	e000ed00 	.word	0xe000ed00

080078cc <NVIC_EncodePriority>:
{
 80078cc:	b480      	push	{r7}
 80078ce:	b089      	sub	sp, #36	; 0x24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f003 0307 	and.w	r3, r3, #7
 80078de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	f1c3 0307 	rsb	r3, r3, #7
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	bf28      	it	cs
 80078ea:	2304      	movcs	r3, #4
 80078ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	3304      	adds	r3, #4
 80078f2:	2b06      	cmp	r3, #6
 80078f4:	d902      	bls.n	80078fc <NVIC_EncodePriority+0x30>
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	3b03      	subs	r3, #3
 80078fa:	e000      	b.n	80078fe <NVIC_EncodePriority+0x32>
 80078fc:	2300      	movs	r3, #0
 80078fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007900:	2201      	movs	r2, #1
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	fa02 f303 	lsl.w	r3, r2, r3
 8007908:	1e5a      	subs	r2, r3, #1
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	401a      	ands	r2, r3
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007912:	2101      	movs	r1, #1
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	fa01 f303 	lsl.w	r3, r1, r3
 800791a:	1e59      	subs	r1, r3, #1
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007920:	4313      	orrs	r3, r2
}
 8007922:	4618      	mov	r0, r3
 8007924:	3724      	adds	r7, #36	; 0x24
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <LL_USART_Enable>:
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	60da      	str	r2, [r3, #12]
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	615a      	str	r2, [r3, #20]
}
 800796e:	bf00      	nop
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 800797a:	b480      	push	{r7}
 800797c:	b083      	sub	sp, #12
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b20      	cmp	r3, #32
 800798c:	bf0c      	ite	eq
 800798e:	2301      	moveq	r3, #1
 8007990:	2300      	movne	r3, #0
 8007992:	b2db      	uxtb	r3, r3
}
 8007994:	4618      	mov	r0, r3
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b0:	2b40      	cmp	r3, #64	; 0x40
 80079b2:	bf0c      	ite	eq
 80079b4:	2301      	moveq	r3, #1
 80079b6:	2300      	movne	r3, #0
 80079b8:	b2db      	uxtb	r3, r3
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f06f 0220 	mvn.w	r2, #32
 80079d4:	601a      	str	r2, [r3, #0]
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	f043 0220 	orr.w	r2, r3, #32
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	60da      	str	r2, [r3, #12]
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	b2db      	uxtb	r3, r3
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007a28:	78fa      	ldrb	r2, [r7, #3]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	605a      	str	r2, [r3, #4]
}
 8007a2e:	bf00      	nop
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
	...

08007a3c <UART2_Init>:
#include "stm32f4xx_ll_utils.h"

static struct ring_buffer_struct* UART_rx_data;

void UART2_Init(struct ring_buffer_struct* rx_data)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b090      	sub	sp, #64	; 0x40
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8007a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	605a      	str	r2, [r3, #4]
 8007a4e:	609a      	str	r2, [r3, #8]
 8007a50:	60da      	str	r2, [r3, #12]
 8007a52:	611a      	str	r2, [r3, #16]
 8007a54:	615a      	str	r2, [r3, #20]
 8007a56:	619a      	str	r2, [r3, #24]
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a58:	f107 030c 	add.w	r3, r7, #12
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	605a      	str	r2, [r3, #4]
 8007a62:	609a      	str	r2, [r3, #8]
 8007a64:	60da      	str	r2, [r3, #12]
 8007a66:	611a      	str	r2, [r3, #16]
 8007a68:	615a      	str	r2, [r3, #20]

	/**USART2 GPIO Configuration
	PA3   ------> USART2_RX
	PD5   ------> USART2_TX
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8007a6a:	2308      	movs	r3, #8
 8007a6c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007a6e:	2302      	movs	r3, #2
 8007a70:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007a72:	2303      	movs	r3, #3
 8007a74:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007a76:	2300      	movs	r3, #0
 8007a78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8007a7e:	2307      	movs	r3, #7
 8007a80:	623b      	str	r3, [r7, #32]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a82:	f107 030c 	add.w	r3, r7, #12
 8007a86:	4619      	mov	r1, r3
 8007a88:	4824      	ldr	r0, [pc, #144]	; (8007b1c <UART2_Init+0xe0>)
 8007a8a:	f7fb fb48 	bl	800311e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8007a8e:	2320      	movs	r3, #32
 8007a90:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007a92:	2302      	movs	r3, #2
 8007a94:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007a96:	2303      	movs	r3, #3
 8007a98:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8007aa2:	2307      	movs	r3, #7
 8007aa4:	623b      	str	r3, [r7, #32]
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007aa6:	f107 030c 	add.w	r3, r7, #12
 8007aaa:	4619      	mov	r1, r3
 8007aac:	481c      	ldr	r0, [pc, #112]	; (8007b20 <UART2_Init+0xe4>)
 8007aae:	f7fb fb36 	bl	800311e <LL_GPIO_Init>

	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007ab2:	f7ff feb5 	bl	8007820 <__NVIC_GetPriorityGrouping>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2100      	movs	r1, #0
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7ff ff05 	bl	80078cc <NVIC_EncodePriority>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	2026      	movs	r0, #38	; 0x26
 8007ac8:	f7ff fed6 	bl	8007878 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8007acc:	2026      	movs	r0, #38	; 0x26
 8007ace:	f7ff feb5 	bl	800783c <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 115200;
 8007ad2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007adc:	2300      	movs	r3, #0
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007ae4:	230c      	movs	r3, #12
 8007ae6:	637b      	str	r3, [r7, #52]	; 0x34
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	63bb      	str	r3, [r7, #56]	; 0x38
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007aec:	2300      	movs	r3, #0
 8007aee:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_USART_Init(USART2, &USART_InitStruct);
 8007af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007af4:	4619      	mov	r1, r3
 8007af6:	480b      	ldr	r0, [pc, #44]	; (8007b24 <UART2_Init+0xe8>)
 8007af8:	f7fc fa12 	bl	8003f20 <LL_USART_Init>
	LL_USART_EnableIT_RXNE(USART2);
 8007afc:	4809      	ldr	r0, [pc, #36]	; (8007b24 <UART2_Init+0xe8>)
 8007afe:	f7ff ff70 	bl	80079e2 <LL_USART_EnableIT_RXNE>
	LL_USART_ConfigAsyncMode(USART2);
 8007b02:	4808      	ldr	r0, [pc, #32]	; (8007b24 <UART2_Init+0xe8>)
 8007b04:	f7ff ff23 	bl	800794e <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART2);
 8007b08:	4806      	ldr	r0, [pc, #24]	; (8007b24 <UART2_Init+0xe8>)
 8007b0a:	f7ff ff10 	bl	800792e <LL_USART_Enable>

	UART_rx_data = rx_data;
 8007b0e:	4a06      	ldr	r2, [pc, #24]	; (8007b28 <UART2_Init+0xec>)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6013      	str	r3, [r2, #0]
}
 8007b14:	bf00      	nop
 8007b16:	3740      	adds	r7, #64	; 0x40
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	40020000 	.word	0x40020000
 8007b20:	40020c00 	.word	0x40020c00
 8007b24:	40004400 	.word	0x40004400
 8007b28:	20008b6c 	.word	0x20008b6c

08007b2c <UART2_SendData_byte>:

void UART2_SendData_byte(char data)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART2, data);
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4807      	ldr	r0, [pc, #28]	; (8007b58 <UART2_SendData_byte+0x2c>)
 8007b3c:	f7ff ff6e 	bl	8007a1c <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TC(USART2));
 8007b40:	bf00      	nop
 8007b42:	4805      	ldr	r0, [pc, #20]	; (8007b58 <UART2_SendData_byte+0x2c>)
 8007b44:	f7ff ff2c 	bl	80079a0 <LL_USART_IsActiveFlag_TC>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0f9      	beq.n	8007b42 <UART2_SendData_byte+0x16>
}
 8007b4e:	bf00      	nop
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	40004400 	.word	0x40004400

08007b5c <UART2_SendData>:

void UART2_SendData(char* data, uint32_t data_length)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < data_length; ++i)
 8007b66:	2300      	movs	r3, #0
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	e009      	b.n	8007b80 <UART2_SendData+0x24>
	{
		UART2_SendData_byte(data[i]);
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	4413      	add	r3, r2
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7ff ffd9 	bl	8007b2c <UART2_SendData_byte>
	for(uint32_t i = 0; i < data_length; ++i)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	60fb      	str	r3, [r7, #12]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d3f1      	bcc.n	8007b6c <UART2_SendData+0x10>
	}
}
 8007b88:	bf00      	nop
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <UART2_CharReception_Callback>:

void UART2_CharReception_Callback(void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
	__IO uint8_t received_char;
	received_char = LL_USART_ReceiveData8(USART2);
 8007b96:	4808      	ldr	r0, [pc, #32]	; (8007bb8 <UART2_CharReception_Callback+0x28>)
 8007b98:	f7ff ff33 	bl	8007a02 <LL_USART_ReceiveData8>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	71fb      	strb	r3, [r7, #7]

	RingBuffPush(UART_rx_data, (char)received_char);
 8007ba0:	4b06      	ldr	r3, [pc, #24]	; (8007bbc <UART2_CharReception_Callback+0x2c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	79fa      	ldrb	r2, [r7, #7]
 8007ba6:	b2d2      	uxtb	r2, r2
 8007ba8:	4611      	mov	r1, r2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fa fdc7 	bl	800273e <RingBuffPush>
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	40004400 	.word	0x40004400
 8007bbc:	20008b6c 	.word	0x20008b6c

08007bc0 <Error_Callback>:

static void Error_Callback(void)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
	//dummy
}
 8007bc4:	bf00      	nop
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
	...

08007bd0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART2)) {
 8007bd4:	4807      	ldr	r0, [pc, #28]	; (8007bf4 <USART2_IRQHandler+0x24>)
 8007bd6:	f7ff fed0 	bl	800797a <LL_USART_IsActiveFlag_RXNE>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d005      	beq.n	8007bec <USART2_IRQHandler+0x1c>
		UART2_CharReception_Callback();
 8007be0:	f7ff ffd6 	bl	8007b90 <UART2_CharReception_Callback>
		LL_USART_ClearFlag_RXNE(USART2);
 8007be4:	4803      	ldr	r0, [pc, #12]	; (8007bf4 <USART2_IRQHandler+0x24>)
 8007be6:	f7ff feee 	bl	80079c6 <LL_USART_ClearFlag_RXNE>
	} else {
		Error_Callback();
	}
}
 8007bea:	e001      	b.n	8007bf0 <USART2_IRQHandler+0x20>
		Error_Callback();
 8007bec:	f7ff ffe8 	bl	8007bc0 <Error_Callback>
}
 8007bf0:	bf00      	nop
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	40004400 	.word	0x40004400

08007bf8 <__NVIC_GetPriorityGrouping>:
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007bfc:	4b04      	ldr	r3, [pc, #16]	; (8007c10 <__NVIC_GetPriorityGrouping+0x18>)
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	0a1b      	lsrs	r3, r3, #8
 8007c02:	f003 0307 	and.w	r3, r3, #7
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	e000ed00 	.word	0xe000ed00

08007c14 <__NVIC_EnableIRQ>:
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	db0b      	blt.n	8007c3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c26:	4909      	ldr	r1, [pc, #36]	; (8007c4c <__NVIC_EnableIRQ+0x38>)
 8007c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c2c:	095b      	lsrs	r3, r3, #5
 8007c2e:	79fa      	ldrb	r2, [r7, #7]
 8007c30:	f002 021f 	and.w	r2, r2, #31
 8007c34:	2001      	movs	r0, #1
 8007c36:	fa00 f202 	lsl.w	r2, r0, r2
 8007c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	e000e100 	.word	0xe000e100

08007c50 <__NVIC_SetPriority>:
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	4603      	mov	r3, r0
 8007c58:	6039      	str	r1, [r7, #0]
 8007c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	db0a      	blt.n	8007c7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c64:	490d      	ldr	r1, [pc, #52]	; (8007c9c <__NVIC_SetPriority+0x4c>)
 8007c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	b2d2      	uxtb	r2, r2
 8007c6e:	0112      	lsls	r2, r2, #4
 8007c70:	b2d2      	uxtb	r2, r2
 8007c72:	440b      	add	r3, r1
 8007c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c78:	e00a      	b.n	8007c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c7a:	4909      	ldr	r1, [pc, #36]	; (8007ca0 <__NVIC_SetPriority+0x50>)
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	f003 030f 	and.w	r3, r3, #15
 8007c82:	3b04      	subs	r3, #4
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	b2d2      	uxtb	r2, r2
 8007c88:	0112      	lsls	r2, r2, #4
 8007c8a:	b2d2      	uxtb	r2, r2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	761a      	strb	r2, [r3, #24]
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	e000e100 	.word	0xe000e100
 8007ca0:	e000ed00 	.word	0xe000ed00

08007ca4 <NVIC_EncodePriority>:
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b089      	sub	sp, #36	; 0x24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f003 0307 	and.w	r3, r3, #7
 8007cb6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	f1c3 0307 	rsb	r3, r3, #7
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	bf28      	it	cs
 8007cc2:	2304      	movcs	r3, #4
 8007cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	3304      	adds	r3, #4
 8007cca:	2b06      	cmp	r3, #6
 8007ccc:	d902      	bls.n	8007cd4 <NVIC_EncodePriority+0x30>
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	3b03      	subs	r3, #3
 8007cd2:	e000      	b.n	8007cd6 <NVIC_EncodePriority+0x32>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cd8:	2201      	movs	r2, #1
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce0:	1e5a      	subs	r2, r3, #1
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	401a      	ands	r2, r3
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007cea:	2101      	movs	r1, #1
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf2:	1e59      	subs	r1, r3, #1
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cf8:	4313      	orrs	r3, r2
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3724      	adds	r7, #36	; 0x24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <LL_GPIO_ReadInputPort>:
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	691b      	ldr	r3, [r3, #16]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <LL_USART_Enable>:
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	60da      	str	r2, [r3, #12]
}
 8007d32:	bf00      	nop
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <LL_USART_ConfigAsyncMode>:
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b083      	sub	sp, #12
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	615a      	str	r2, [r3, #20]
}
 8007d5e:	bf00      	nop
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <LL_USART_IsActiveFlag_RXNE>:
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0320 	and.w	r3, r3, #32
 8007d7a:	2b20      	cmp	r3, #32
 8007d7c:	bf0c      	ite	eq
 8007d7e:	2301      	moveq	r3, #1
 8007d80:	2300      	movne	r3, #0
 8007d82:	b2db      	uxtb	r3, r3
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <LL_USART_IsActiveFlag_TC>:
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da0:	2b40      	cmp	r3, #64	; 0x40
 8007da2:	bf0c      	ite	eq
 8007da4:	2301      	moveq	r3, #1
 8007da6:	2300      	movne	r3, #0
 8007da8:	b2db      	uxtb	r3, r3
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <LL_USART_ClearFlag_RXNE>:
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f06f 0220 	mvn.w	r2, #32
 8007dc4:	601a      	str	r2, [r3, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <LL_USART_EnableIT_RXNE>:
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f043 0220 	orr.w	r2, r3, #32
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	60da      	str	r2, [r3, #12]
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <LL_USART_ReceiveData8>:
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	b2db      	uxtb	r3, r3
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <LL_USART_TransmitData8>:
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007e18:	78fa      	ldrb	r2, [r7, #3]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	605a      	str	r2, [r3, #4]
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
	...

08007e2c <UART3_Init>:
#include "stm32f4xx_ll_utils.h"

static struct ring_buffer_struct* UART_rx_data;

void UART3_Init(struct ring_buffer_struct* rx_data)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b090      	sub	sp, #64	; 0x40
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8007e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e38:	2200      	movs	r2, #0
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	605a      	str	r2, [r3, #4]
 8007e3e:	609a      	str	r2, [r3, #8]
 8007e40:	60da      	str	r2, [r3, #12]
 8007e42:	611a      	str	r2, [r3, #16]
 8007e44:	615a      	str	r2, [r3, #20]
 8007e46:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e48:	f107 030c 	add.w	r3, r7, #12
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	605a      	str	r2, [r3, #4]
 8007e52:	609a      	str	r2, [r3, #8]
 8007e54:	60da      	str	r2, [r3, #12]
 8007e56:	611a      	str	r2, [r3, #16]
 8007e58:	615a      	str	r2, [r3, #20]

	/**USART3 GPIO Configuration
	PD8   ------> USART3_TX
	PD9   ------> USART3_RX
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8007e5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007e5e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007e60:	2302      	movs	r3, #2
 8007e62:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007e64:	2303      	movs	r3, #3
 8007e66:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8007e70:	2307      	movs	r3, #7
 8007e72:	623b      	str	r3, [r7, #32]
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e74:	f107 030c 	add.w	r3, r7, #12
 8007e78:	4619      	mov	r1, r3
 8007e7a:	481c      	ldr	r0, [pc, #112]	; (8007eec <UART3_Init+0xc0>)
 8007e7c:	f7fb f94f 	bl	800311e <LL_GPIO_Init>

	NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007e80:	f7ff feba 	bl	8007bf8 <__NVIC_GetPriorityGrouping>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2200      	movs	r2, #0
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff ff0a 	bl	8007ca4 <NVIC_EncodePriority>
 8007e90:	4603      	mov	r3, r0
 8007e92:	4619      	mov	r1, r3
 8007e94:	2027      	movs	r0, #39	; 0x27
 8007e96:	f7ff fedb 	bl	8007c50 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART3_IRQn);
 8007e9a:	2027      	movs	r0, #39	; 0x27
 8007e9c:	f7ff feba 	bl	8007c14 <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 115200;
 8007ea0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007ea4:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007eb2:	230c      	movs	r3, #12
 8007eb4:	637b      	str	r3, [r7, #52]	; 0x34
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	63bb      	str	r3, [r7, #56]	; 0x38
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_USART_Init(USART3, &USART_InitStruct);
 8007ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	480a      	ldr	r0, [pc, #40]	; (8007ef0 <UART3_Init+0xc4>)
 8007ec6:	f7fc f82b 	bl	8003f20 <LL_USART_Init>
	LL_USART_EnableIT_RXNE(USART3);
 8007eca:	4809      	ldr	r0, [pc, #36]	; (8007ef0 <UART3_Init+0xc4>)
 8007ecc:	f7ff ff81 	bl	8007dd2 <LL_USART_EnableIT_RXNE>
	LL_USART_ConfigAsyncMode(USART3);
 8007ed0:	4807      	ldr	r0, [pc, #28]	; (8007ef0 <UART3_Init+0xc4>)
 8007ed2:	f7ff ff34 	bl	8007d3e <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART3);
 8007ed6:	4806      	ldr	r0, [pc, #24]	; (8007ef0 <UART3_Init+0xc4>)
 8007ed8:	f7ff ff21 	bl	8007d1e <LL_USART_Enable>

	UART_rx_data = rx_data;
 8007edc:	4a05      	ldr	r2, [pc, #20]	; (8007ef4 <UART3_Init+0xc8>)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6013      	str	r3, [r2, #0]
}
 8007ee2:	bf00      	nop
 8007ee4:	3740      	adds	r7, #64	; 0x40
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	40020c00 	.word	0x40020c00
 8007ef0:	40004800 	.word	0x40004800
 8007ef4:	20008b70 	.word	0x20008b70

08007ef8 <Sensor_UpdateGpioInit>:

void Sensor_UpdateGpioInit()
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007efe:	463b      	mov	r3, r7
 8007f00:	2200      	movs	r2, #0
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	605a      	str	r2, [r3, #4]
 8007f06:	609a      	str	r2, [r3, #8]
 8007f08:	60da      	str	r2, [r3, #12]
 8007f0a:	611a      	str	r2, [r3, #16]
 8007f0c:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8007f12:	2300      	movs	r3, #0
 8007f14:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007f16:	2302      	movs	r3, #2
 8007f18:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f1a:	463b      	mov	r3, r7
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4803      	ldr	r0, [pc, #12]	; (8007f2c <Sensor_UpdateGpioInit+0x34>)
 8007f20:	f7fb f8fd 	bl	800311e <LL_GPIO_Init>
}
 8007f24:	bf00      	nop
 8007f26:	3718      	adds	r7, #24
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	40020000 	.word	0x40020000

08007f30 <Sensor_GpioValue>:

uint8_t Sensor_GpioValue()
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	af00      	add	r7, sp, #0
	return LL_GPIO_ReadInputPort(GPIOA) & LL_GPIO_PIN_0;
 8007f34:	4804      	ldr	r0, [pc, #16]	; (8007f48 <Sensor_GpioValue+0x18>)
 8007f36:	f7ff fee6 	bl	8007d06 <LL_GPIO_ReadInputPort>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	b2db      	uxtb	r3, r3
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	40020000 	.word	0x40020000

08007f4c <UART3_SendData_byte>:

void UART3_SendData_byte(char data)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	4603      	mov	r3, r0
 8007f54:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART3, data);
 8007f56:	79fb      	ldrb	r3, [r7, #7]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4807      	ldr	r0, [pc, #28]	; (8007f78 <UART3_SendData_byte+0x2c>)
 8007f5c:	f7ff ff56 	bl	8007e0c <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TC(USART3));
 8007f60:	bf00      	nop
 8007f62:	4805      	ldr	r0, [pc, #20]	; (8007f78 <UART3_SendData_byte+0x2c>)
 8007f64:	f7ff ff14 	bl	8007d90 <LL_USART_IsActiveFlag_TC>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d0f9      	beq.n	8007f62 <UART3_SendData_byte+0x16>
}
 8007f6e:	bf00      	nop
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	40004800 	.word	0x40004800

08007f7c <UART3_SendData>:

void UART3_SendData(char* data, uint32_t data_length)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < data_length; ++i)
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]
 8007f8a:	e009      	b.n	8007fa0 <UART3_SendData+0x24>
	{
		UART3_SendData_byte(data[i]);
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	4413      	add	r3, r2
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7ff ffd9 	bl	8007f4c <UART3_SendData_byte>
	for(uint32_t i = 0; i < data_length; ++i)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d3f1      	bcc.n	8007f8c <UART3_SendData+0x10>
	}
}
 8007fa8:	bf00      	nop
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <UART3_CharReception_Callback>:

void UART3_CharReception_Callback(void)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
	__IO uint8_t received_char;
	received_char = LL_USART_ReceiveData8(USART3);
 8007fb6:	4808      	ldr	r0, [pc, #32]	; (8007fd8 <UART3_CharReception_Callback+0x28>)
 8007fb8:	f7ff ff1b 	bl	8007df2 <LL_USART_ReceiveData8>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	71fb      	strb	r3, [r7, #7]

	RingBuffPush(UART_rx_data, (char)received_char);
 8007fc0:	4b06      	ldr	r3, [pc, #24]	; (8007fdc <UART3_CharReception_Callback+0x2c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	79fa      	ldrb	r2, [r7, #7]
 8007fc6:	b2d2      	uxtb	r2, r2
 8007fc8:	4611      	mov	r1, r2
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fa fbb7 	bl	800273e <RingBuffPush>
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	40004800 	.word	0x40004800
 8007fdc:	20008b70 	.word	0x20008b70

08007fe0 <Error_Callback>:

static void Error_Callback(void)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	af00      	add	r7, sp, #0
	//dummy
}
 8007fe4:	bf00      	nop
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
	...

08007ff0 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART3)) {
 8007ff4:	4807      	ldr	r0, [pc, #28]	; (8008014 <USART3_IRQHandler+0x24>)
 8007ff6:	f7ff feb8 	bl	8007d6a <LL_USART_IsActiveFlag_RXNE>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d005      	beq.n	800800c <USART3_IRQHandler+0x1c>
		UART3_CharReception_Callback();
 8008000:	f7ff ffd6 	bl	8007fb0 <UART3_CharReception_Callback>
		LL_USART_ClearFlag_RXNE(USART3);
 8008004:	4803      	ldr	r0, [pc, #12]	; (8008014 <USART3_IRQHandler+0x24>)
 8008006:	f7ff fed6 	bl	8007db6 <LL_USART_ClearFlag_RXNE>
	} else {
		Error_Callback();
	}
}
 800800a:	e001      	b.n	8008010 <USART3_IRQHandler+0x20>
		Error_Callback();
 800800c:	f7ff ffe8 	bl	8007fe0 <Error_Callback>
}
 8008010:	bf00      	nop
 8008012:	bd80      	pop	{r7, pc}
 8008014:	40004800 	.word	0x40004800

08008018 <MX_FREERTOS_Init>:

void StartDefaultTask(void *argument);
void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

void MX_FREERTOS_Init(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
	Led_TaskInit();
 800801c:	f7ff f876 	bl	800710c <Led_TaskInit>
	Relay_TaskInit();
 8008020:	f7ff fa18 	bl	8007454 <Relay_TaskInit>

	ESP_TaskInit();
 8008024:	f7fe ff72 	bl	8006f0c <ESP_TaskInit>

	BitEngine_TaskInit();
 8008028:	f7fe fe64 	bl	8006cf4 <BitEngine_TaskInit>
	Sensor_TaskInit();
 800802c:	f7ff fbe0 	bl	80077f0 <Sensor_TaskInit>

	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8008030:	4a04      	ldr	r2, [pc, #16]	; (8008044 <MX_FREERTOS_Init+0x2c>)
 8008032:	2100      	movs	r1, #0
 8008034:	4804      	ldr	r0, [pc, #16]	; (8008048 <MX_FREERTOS_Init+0x30>)
 8008036:	f7fc f875 	bl	8004124 <osThreadNew>
 800803a:	4602      	mov	r2, r0
 800803c:	4b03      	ldr	r3, [pc, #12]	; (800804c <MX_FREERTOS_Init+0x34>)
 800803e:	601a      	str	r2, [r3, #0]
}
 8008040:	bf00      	nop
 8008042:	bd80      	pop	{r7, pc}
 8008044:	0800aff8 	.word	0x0800aff8
 8008048:	08008051 	.word	0x08008051
 800804c:	200192b4 	.word	0x200192b4

08008050 <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 8008058:	2001      	movs	r0, #1
 800805a:	f7fc f909 	bl	8004270 <osDelay>
 800805e:	e7fb      	b.n	8008058 <StartDefaultTask+0x8>

08008060 <LL_RCC_HSI_Enable>:
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008064:	4a05      	ldr	r2, [pc, #20]	; (800807c <LL_RCC_HSI_Enable+0x1c>)
 8008066:	4b05      	ldr	r3, [pc, #20]	; (800807c <LL_RCC_HSI_Enable+0x1c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f043 0301 	orr.w	r3, r3, #1
 800806e:	6013      	str	r3, [r2, #0]
}
 8008070:	bf00      	nop
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	40023800 	.word	0x40023800

08008080 <LL_RCC_HSI_IsReady>:
{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8008084:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <LL_RCC_HSI_IsReady+0x20>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0302 	and.w	r3, r3, #2
 800808c:	2b02      	cmp	r3, #2
 800808e:	bf0c      	ite	eq
 8008090:	2301      	moveq	r3, #1
 8008092:	2300      	movne	r3, #0
 8008094:	b2db      	uxtb	r3, r3
}
 8008096:	4618      	mov	r0, r3
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	40023800 	.word	0x40023800

080080a4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80080ac:	4907      	ldr	r1, [pc, #28]	; (80080cc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80080ae:	4b07      	ldr	r3, [pc, #28]	; (80080cc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	00db      	lsls	r3, r3, #3
 80080ba:	4313      	orrs	r3, r2
 80080bc:	600b      	str	r3, [r1, #0]
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	40023800 	.word	0x40023800

080080d0 <LL_RCC_LSI_Enable>:
{
 80080d0:	b480      	push	{r7}
 80080d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80080d4:	4a05      	ldr	r2, [pc, #20]	; (80080ec <LL_RCC_LSI_Enable+0x1c>)
 80080d6:	4b05      	ldr	r3, [pc, #20]	; (80080ec <LL_RCC_LSI_Enable+0x1c>)
 80080d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080da:	f043 0301 	orr.w	r3, r3, #1
 80080de:	6753      	str	r3, [r2, #116]	; 0x74
}
 80080e0:	bf00      	nop
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	40023800 	.word	0x40023800

080080f0 <LL_RCC_LSI_IsReady>:
{
 80080f0:	b480      	push	{r7}
 80080f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 80080f4:	4b06      	ldr	r3, [pc, #24]	; (8008110 <LL_RCC_LSI_IsReady+0x20>)
 80080f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080f8:	f003 0302 	and.w	r3, r3, #2
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	bf0c      	ite	eq
 8008100:	2301      	moveq	r3, #1
 8008102:	2300      	movne	r3, #0
 8008104:	b2db      	uxtb	r3, r3
}
 8008106:	4618      	mov	r0, r3
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	40023800 	.word	0x40023800

08008114 <LL_RCC_SetSysClkSource>:
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800811c:	4906      	ldr	r1, [pc, #24]	; (8008138 <LL_RCC_SetSysClkSource+0x24>)
 800811e:	4b06      	ldr	r3, [pc, #24]	; (8008138 <LL_RCC_SetSysClkSource+0x24>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f023 0203 	bic.w	r2, r3, #3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4313      	orrs	r3, r2
 800812a:	608b      	str	r3, [r1, #8]
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	40023800 	.word	0x40023800

0800813c <LL_RCC_GetSysClkSource>:
{
 800813c:	b480      	push	{r7}
 800813e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008140:	4b04      	ldr	r3, [pc, #16]	; (8008154 <LL_RCC_GetSysClkSource+0x18>)
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f003 030c 	and.w	r3, r3, #12
}
 8008148:	4618      	mov	r0, r3
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	40023800 	.word	0x40023800

08008158 <LL_RCC_SetAHBPrescaler>:
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008160:	4906      	ldr	r1, [pc, #24]	; (800817c <LL_RCC_SetAHBPrescaler+0x24>)
 8008162:	4b06      	ldr	r3, [pc, #24]	; (800817c <LL_RCC_SetAHBPrescaler+0x24>)
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4313      	orrs	r3, r2
 800816e:	608b      	str	r3, [r1, #8]
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	40023800 	.word	0x40023800

08008180 <LL_RCC_SetAPB1Prescaler>:
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008188:	4906      	ldr	r1, [pc, #24]	; (80081a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800818a:	4b06      	ldr	r3, [pc, #24]	; (80081a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4313      	orrs	r3, r2
 8008196:	608b      	str	r3, [r1, #8]
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	40023800 	.word	0x40023800

080081a8 <LL_RCC_SetAPB2Prescaler>:
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80081b0:	4906      	ldr	r1, [pc, #24]	; (80081cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80081b2:	4b06      	ldr	r3, [pc, #24]	; (80081cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4313      	orrs	r3, r2
 80081be:	608b      	str	r3, [r1, #8]
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	40023800 	.word	0x40023800

080081d0 <LL_RCC_SetRTCClockSource>:
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80081d8:	4906      	ldr	r1, [pc, #24]	; (80081f4 <LL_RCC_SetRTCClockSource+0x24>)
 80081da:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <LL_RCC_SetRTCClockSource+0x24>)
 80081dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	670b      	str	r3, [r1, #112]	; 0x70
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	40023800 	.word	0x40023800

080081f8 <LL_RCC_EnableRTC>:
{
 80081f8:	b480      	push	{r7}
 80081fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80081fc:	4a05      	ldr	r2, [pc, #20]	; (8008214 <LL_RCC_EnableRTC+0x1c>)
 80081fe:	4b05      	ldr	r3, [pc, #20]	; (8008214 <LL_RCC_EnableRTC+0x1c>)
 8008200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008206:	6713      	str	r3, [r2, #112]	; 0x70
}
 8008208:	bf00      	nop
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	40023800 	.word	0x40023800

08008218 <LL_RCC_ForceBackupDomainReset>:
{
 8008218:	b480      	push	{r7}
 800821a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800821c:	4a05      	ldr	r2, [pc, #20]	; (8008234 <LL_RCC_ForceBackupDomainReset+0x1c>)
 800821e:	4b05      	ldr	r3, [pc, #20]	; (8008234 <LL_RCC_ForceBackupDomainReset+0x1c>)
 8008220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008226:	6713      	str	r3, [r2, #112]	; 0x70
}
 8008228:	bf00      	nop
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	40023800 	.word	0x40023800

08008238 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008238:	b480      	push	{r7}
 800823a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800823c:	4a05      	ldr	r2, [pc, #20]	; (8008254 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 800823e:	4b05      	ldr	r3, [pc, #20]	; (8008254 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8008240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008246:	6713      	str	r3, [r2, #112]	; 0x70
}
 8008248:	bf00      	nop
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	40023800 	.word	0x40023800

08008258 <LL_RCC_PLL_Enable>:
{
 8008258:	b480      	push	{r7}
 800825a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800825c:	4a05      	ldr	r2, [pc, #20]	; (8008274 <LL_RCC_PLL_Enable+0x1c>)
 800825e:	4b05      	ldr	r3, [pc, #20]	; (8008274 <LL_RCC_PLL_Enable+0x1c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008266:	6013      	str	r3, [r2, #0]
}
 8008268:	bf00      	nop
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	40023800 	.word	0x40023800

08008278 <LL_RCC_PLL_IsReady>:
{
 8008278:	b480      	push	{r7}
 800827a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800827c:	4b07      	ldr	r3, [pc, #28]	; (800829c <LL_RCC_PLL_IsReady+0x24>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008284:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008288:	bf0c      	ite	eq
 800828a:	2301      	moveq	r3, #1
 800828c:	2300      	movne	r3, #0
 800828e:	b2db      	uxtb	r3, r3
}
 8008290:	4618      	mov	r0, r3
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	40023800 	.word	0x40023800

080082a0 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80082ae:	480d      	ldr	r0, [pc, #52]	; (80082e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80082b0:	4b0c      	ldr	r3, [pc, #48]	; (80082e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	4b0c      	ldr	r3, [pc, #48]	; (80082e8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80082b6:	4013      	ands	r3, r2
 80082b8:	68f9      	ldr	r1, [r7, #12]
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	4311      	orrs	r1, r2
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	0192      	lsls	r2, r2, #6
 80082c2:	430a      	orrs	r2, r1
 80082c4:	4313      	orrs	r3, r2
 80082c6:	6043      	str	r3, [r0, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80082c8:	4906      	ldr	r1, [pc, #24]	; (80082e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80082ca:	4b06      	ldr	r3, [pc, #24]	; (80082e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	604b      	str	r3, [r1, #4]
}
 80082d8:	bf00      	nop
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	40023800 	.word	0x40023800
 80082e8:	ffbf8000 	.word	0xffbf8000

080082ec <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80082f4:	4908      	ldr	r1, [pc, #32]	; (8008318 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80082f6:	4b08      	ldr	r3, [pc, #32]	; (8008318 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80082f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008300:	4b05      	ldr	r3, [pc, #20]	; (8008318 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4013      	ands	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800830a:	68fb      	ldr	r3, [r7, #12]
}
 800830c:	bf00      	nop
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	40023800 	.word	0x40023800

0800831c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8008324:	4908      	ldr	r1, [pc, #32]	; (8008348 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008326:	4b08      	ldr	r3, [pc, #32]	; (8008348 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4313      	orrs	r3, r2
 800832e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8008330:	4b05      	ldr	r3, [pc, #20]	; (8008348 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4013      	ands	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800833a:	68fb      	ldr	r3, [r7, #12]
}
 800833c:	bf00      	nop
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	40023800 	.word	0x40023800

0800834c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8008354:	4906      	ldr	r1, [pc, #24]	; (8008370 <LL_FLASH_SetLatency+0x24>)
 8008356:	4b06      	ldr	r3, [pc, #24]	; (8008370 <LL_FLASH_SetLatency+0x24>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f023 020f 	bic.w	r2, r3, #15
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4313      	orrs	r3, r2
 8008362:	600b      	str	r3, [r1, #0]
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	40023c00 	.word	0x40023c00

08008374 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8008374:	b480      	push	{r7}
 8008376:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8008378:	4b04      	ldr	r3, [pc, #16]	; (800838c <LL_FLASH_GetLatency+0x18>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 030f 	and.w	r3, r3, #15
}
 8008380:	4618      	mov	r0, r3
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	40023c00 	.word	0x40023c00

08008390 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8008398:	4906      	ldr	r1, [pc, #24]	; (80083b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800839a:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	600b      	str	r3, [r1, #0]
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	40007000 	.word	0x40007000

080083b8 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80083bc:	4a05      	ldr	r2, [pc, #20]	; (80083d4 <LL_PWR_EnableBkUpAccess+0x1c>)
 80083be:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <LL_PWR_EnableBkUpAccess+0x1c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083c6:	6013      	str	r3, [r2, #0]
}
 80083c8:	bf00      	nop
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	40007000 	.word	0x40007000

080083d8 <main>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);

int main(void)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	af00      	add	r7, sp, #0
	HAL_Init();
 80083dc:	f7fa f9f4 	bl	80027c8 <HAL_Init>
	SystemClock_Config();
 80083e0:	f000 f828 	bl	8008434 <SystemClock_Config>

	RTC_Init();
 80083e4:	f000 f990 	bl	8008708 <RTC_Init>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80083e8:	2004      	movs	r0, #4
 80083ea:	f7ff ff7f 	bl	80082ec <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80083ee:	2080      	movs	r0, #128	; 0x80
 80083f0:	f7ff ff7c 	bl	80082ec <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80083f4:	2001      	movs	r0, #1
 80083f6:	f7ff ff79 	bl	80082ec <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80083fa:	2002      	movs	r0, #2
 80083fc:	f7ff ff76 	bl	80082ec <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8008400:	2008      	movs	r0, #8
 8008402:	f7ff ff73 	bl	80082ec <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8008406:	2010      	movs	r0, #16
 8008408:	f7ff ff70 	bl	80082ec <LL_AHB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800840c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008410:	f7ff ff84 	bl	800831c <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8008414:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008418:	f7ff ff80 	bl	800831c <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800841c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8008420:	f7ff ff7c 	bl	800831c <LL_APB1_GRP1_EnableClock>
//  MX_USART1_UART_Init();
//  MX_USART2_UART_Init();
//  MX_USART3_UART_Init();
//  MX_FATFS_Init();

	osKernelInitialize();
 8008424:	f7fb fe14 	bl	8004050 <osKernelInitialize>
	MX_FREERTOS_Init();
 8008428:	f7ff fdf6 	bl	8008018 <MX_FREERTOS_Init>
	osKernelStart();
 800842c:	f7fb fe44 	bl	80040b8 <osKernelStart>

	while (1) {}
 8008430:	e7fe      	b.n	8008430 <main+0x58>
	...

08008434 <SystemClock_Config>:
}


void SystemClock_Config(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8008438:	2005      	movs	r0, #5
 800843a:	f7ff ff87 	bl	800834c <LL_FLASH_SetLatency>

	if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
 800843e:	f7ff ff99 	bl	8008374 <LL_FLASH_GetLatency>
 8008442:	4603      	mov	r3, r0
 8008444:	2b05      	cmp	r3, #5
 8008446:	d001      	beq.n	800844c <SystemClock_Config+0x18>
	{
	Error_Handler();
 8008448:	f000 f866 	bl	8008518 <Error_Handler>
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800844c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008450:	f7ff ff9e 	bl	8008390 <LL_PWR_SetRegulVoltageScaling>
	LL_RCC_HSI_SetCalibTrimming(16);
 8008454:	2010      	movs	r0, #16
 8008456:	f7ff fe25 	bl	80080a4 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_HSI_Enable();
 800845a:	f7ff fe01 	bl	8008060 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while(LL_RCC_HSI_IsReady() != 1) {}
 800845e:	bf00      	nop
 8008460:	f7ff fe0e 	bl	8008080 <LL_RCC_HSI_IsReady>
 8008464:	4603      	mov	r3, r0
 8008466:	2b01      	cmp	r3, #1
 8008468:	d1fa      	bne.n	8008460 <SystemClock_Config+0x2c>
	LL_RCC_LSI_Enable();
 800846a:	f7ff fe31 	bl	80080d0 <LL_RCC_LSI_Enable>

	/* Wait till LSI is ready */
	while(LL_RCC_LSI_IsReady() != 1) {}
 800846e:	bf00      	nop
 8008470:	f7ff fe3e 	bl	80080f0 <LL_RCC_LSI_IsReady>
 8008474:	4603      	mov	r3, r0
 8008476:	2b01      	cmp	r3, #1
 8008478:	d1fa      	bne.n	8008470 <SystemClock_Config+0x3c>
	LL_PWR_EnableBkUpAccess();
 800847a:	f7ff ff9d 	bl	80083b8 <LL_PWR_EnableBkUpAccess>
	LL_RCC_ForceBackupDomainReset();
 800847e:	f7ff fecb 	bl	8008218 <LL_RCC_ForceBackupDomainReset>
	LL_RCC_ReleaseBackupDomainReset();
 8008482:	f7ff fed9 	bl	8008238 <LL_RCC_ReleaseBackupDomainReset>
	LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 8008486:	f44f 7000 	mov.w	r0, #512	; 0x200
 800848a:	f7ff fea1 	bl	80081d0 <LL_RCC_SetRTCClockSource>
	LL_RCC_EnableRTC();
 800848e:	f7ff feb3 	bl	80081f8 <LL_RCC_EnableRTC>
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_2);
 8008492:	2300      	movs	r3, #0
 8008494:	22a8      	movs	r2, #168	; 0xa8
 8008496:	2108      	movs	r1, #8
 8008498:	2000      	movs	r0, #0
 800849a:	f7ff ff01 	bl	80082a0 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 800849e:	f7ff fedb 	bl	8008258 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1) {}
 80084a2:	bf00      	nop
 80084a4:	f7ff fee8 	bl	8008278 <LL_RCC_PLL_IsReady>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d1fa      	bne.n	80084a4 <SystemClock_Config+0x70>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80084ae:	2000      	movs	r0, #0
 80084b0:	f7ff fe52 	bl	8008158 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 80084b4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80084b8:	f7ff fe62 	bl	8008180 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 80084bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80084c0:	f7ff fe72 	bl	80081a8 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80084c4:	2002      	movs	r0, #2
 80084c6:	f7ff fe25 	bl	8008114 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {}
 80084ca:	bf00      	nop
 80084cc:	f7ff fe36 	bl	800813c <LL_RCC_GetSysClkSource>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b08      	cmp	r3, #8
 80084d4:	d1fa      	bne.n	80084cc <SystemClock_Config+0x98>
	LL_SetSystemCoreClock(168000000);
 80084d6:	4806      	ldr	r0, [pc, #24]	; (80084f0 <SystemClock_Config+0xbc>)
 80084d8:	f7fb fda2 	bl	8004020 <LL_SetSystemCoreClock>

	/* Update the time base */
	if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80084dc:	2000      	movs	r0, #0
 80084de:	f000 faef 	bl	8008ac0 <HAL_InitTick>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <SystemClock_Config+0xb8>
	{
		Error_Handler();
 80084e8:	f000 f816 	bl	8008518 <Error_Handler>
	};
}
 80084ec:	bf00      	nop
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	0a037a00 	.word	0x0a037a00

080084f4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a04      	ldr	r2, [pc, #16]	; (8008514 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d101      	bne.n	800850a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8008506:	f7fa f981 	bl	800280c <HAL_IncTick>
	}
}
 800850a:	bf00      	nop
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	40010000 	.word	0x40010000

08008518 <Error_Handler>:

void Error_Handler(void)
{
 8008518:	b480      	push	{r7}
 800851a:	af00      	add	r7, sp, #0
}
 800851c:	bf00      	nop
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
	...

08008528 <LL_RCC_EnableRTC>:
{
 8008528:	b480      	push	{r7}
 800852a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800852c:	4a05      	ldr	r2, [pc, #20]	; (8008544 <LL_RCC_EnableRTC+0x1c>)
 800852e:	4b05      	ldr	r3, [pc, #20]	; (8008544 <LL_RCC_EnableRTC+0x1c>)
 8008530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008536:	6713      	str	r3, [r2, #112]	; 0x70
}
 8008538:	bf00      	nop
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	40023800 	.word	0x40023800

08008548 <LL_RTC_DisableInitMode>:
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008556:	60da      	str	r2, [r3, #12]
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <LL_RTC_SetAsynchPrescaler>:
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	041b      	lsls	r3, r3, #16
 800857a:	431a      	orrs	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	611a      	str	r2, [r3, #16]
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <LL_RTC_SetSynchPrescaler>:
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800859e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	431a      	orrs	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	611a      	str	r2, [r3, #16]
}
 80085aa:	bf00      	nop
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <LL_RTC_EnableWriteProtection>:
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	22ff      	movs	r2, #255	; 0xff
 80085c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <LL_RTC_DisableWriteProtection>:
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	22ca      	movs	r2, #202	; 0xca
 80085dc:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2253      	movs	r2, #83	; 0x53
 80085e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <LL_RTC_TIME_GetHour>:
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU))) >> RTC_TR_HU_Pos);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	0c1b      	lsrs	r3, r3, #16
 80085fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8008602:	4618      	mov	r0, r3
 8008604:	370c      	adds	r7, #12
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <LL_RTC_TIME_GetMinute>:
{
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU))>> RTC_TR_MNU_Pos);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	0a1b      	lsrs	r3, r3, #8
 800861c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <LL_RTC_TIME_GetSecond>:
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800863c:	4618      	mov	r0, r3
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <LL_RTC_DATE_GetYear>:
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU))) >> RTC_DR_YU_Pos);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	0c1b      	lsrs	r3, r3, #16
 8008656:	b2db      	uxtb	r3, r3
}
 8008658:	4618      	mov	r0, r3
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <LL_RTC_DATE_GetWeekDay>:
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->DR, RTC_DR_WDU) >> RTC_DR_WDU_Pos);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	0b5b      	lsrs	r3, r3, #13
 8008672:	f003 0307 	and.w	r3, r3, #7
}
 8008676:	4618      	mov	r0, r3
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <LL_RTC_DATE_GetMonth>:
{
 8008682:	b480      	push	{r7}
 8008684:	b083      	sub	sp, #12
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU)))>> RTC_DR_MU_Pos);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	0a1b      	lsrs	r3, r3, #8
 8008690:	f003 031f 	and.w	r3, r3, #31
}
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <LL_RTC_DATE_GetDay>:
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU))) >> RTC_DR_DU_Pos);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <LL_RTC_BAK_SetRegister>:
{
 80086bc:	b490      	push	{r4, r7}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t)(&(RTCx->BKP0R));
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3350      	adds	r3, #80	; 0x50
 80086cc:	461c      	mov	r4, r3
  tmp += (BackupRegister * 4U);
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	441c      	add	r4, r3
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80086d4:	4622      	mov	r2, r4
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6013      	str	r3, [r2, #0]
}
 80086da:	bf00      	nop
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bc90      	pop	{r4, r7}
 80086e2:	4770      	bx	lr

080086e4 <LL_RTC_BAK_GetRegister>:
{
 80086e4:	b490      	push	{r4, r7}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t)(&(RTCx->BKP0R));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	3350      	adds	r3, #80	; 0x50
 80086f2:	461c      	mov	r4, r3
  tmp += (BackupRegister * 4U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	441c      	add	r4, r3
  return (*(__IO uint32_t *)tmp);
 80086fa:	4623      	mov	r3, r4
 80086fc:	681b      	ldr	r3, [r3, #0]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bc90      	pop	{r4, r7}
 8008706:	4770      	bx	lr

08008708 <RTC_Init>:
#include "rtc.h"

void RTC_Init(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
	LL_RTC_InitTypeDef RTC_InitStruct = {0};
 800870e:	f107 030c 	add.w	r3, r7, #12
 8008712:	2200      	movs	r2, #0
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	605a      	str	r2, [r3, #4]
 8008718:	609a      	str	r2, [r3, #8]
	LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 800871a:	1d3b      	adds	r3, r7, #4
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]
 8008720:	605a      	str	r2, [r3, #4]
	LL_RTC_DateTypeDef RTC_DateStruct = {0};
 8008722:	2300      	movs	r3, #0
 8008724:	603b      	str	r3, [r7, #0]

	LL_RCC_EnableRTC();
 8008726:	f7ff feff 	bl	8008528 <LL_RCC_EnableRTC>

	RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 800872a:	2300      	movs	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
	RTC_InitStruct.AsynchPrescaler = 127;
 800872e:	237f      	movs	r3, #127	; 0x7f
 8008730:	613b      	str	r3, [r7, #16]
	RTC_InitStruct.SynchPrescaler = 255;
 8008732:	23ff      	movs	r3, #255	; 0xff
 8008734:	617b      	str	r3, [r7, #20]
	LL_RTC_Init(RTC, &RTC_InitStruct);
 8008736:	f107 030c 	add.w	r3, r7, #12
 800873a:	4619      	mov	r1, r3
 800873c:	481a      	ldr	r0, [pc, #104]	; (80087a8 <RTC_Init+0xa0>)
 800873e:	f7fa ffc5 	bl	80036cc <LL_RTC_Init>
	LL_RTC_SetAsynchPrescaler(RTC, 127);
 8008742:	217f      	movs	r1, #127	; 0x7f
 8008744:	4818      	ldr	r0, [pc, #96]	; (80087a8 <RTC_Init+0xa0>)
 8008746:	f7ff ff0d 	bl	8008564 <LL_RTC_SetAsynchPrescaler>
	LL_RTC_SetSynchPrescaler(RTC, 255);
 800874a:	21ff      	movs	r1, #255	; 0xff
 800874c:	4816      	ldr	r0, [pc, #88]	; (80087a8 <RTC_Init+0xa0>)
 800874e:	f7ff ff1d 	bl	800858c <LL_RTC_SetSynchPrescaler>

	if(LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0) != 0x32F2)
 8008752:	2100      	movs	r1, #0
 8008754:	4814      	ldr	r0, [pc, #80]	; (80087a8 <RTC_Init+0xa0>)
 8008756:	f7ff ffc5 	bl	80086e4 <LL_RTC_BAK_GetRegister>
 800875a:	4602      	mov	r2, r0
 800875c:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8008760:	429a      	cmp	r2, r3
 8008762:	d01d      	beq.n	80087a0 <RTC_Init+0x98>
	{
		RTC_TimeStruct.Hours = 0;
 8008764:	2300      	movs	r3, #0
 8008766:	723b      	strb	r3, [r7, #8]
		RTC_TimeStruct.Minutes = 0;
 8008768:	2300      	movs	r3, #0
 800876a:	727b      	strb	r3, [r7, #9]
		RTC_TimeStruct.Seconds = 0;
 800876c:	2300      	movs	r3, #0
 800876e:	72bb      	strb	r3, [r7, #10]
		LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_TimeStruct);
 8008770:	1d3b      	adds	r3, r7, #4
 8008772:	461a      	mov	r2, r3
 8008774:	2101      	movs	r1, #1
 8008776:	480c      	ldr	r0, [pc, #48]	; (80087a8 <RTC_Init+0xa0>)
 8008778:	f7fa ffd8 	bl	800372c <LL_RTC_TIME_Init>
		RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;
 800877c:	2301      	movs	r3, #1
 800877e:	703b      	strb	r3, [r7, #0]
		RTC_DateStruct.Month = LL_RTC_MONTH_JANUARY;
 8008780:	2301      	movs	r3, #1
 8008782:	707b      	strb	r3, [r7, #1]
		RTC_DateStruct.Year = 0;
 8008784:	2300      	movs	r3, #0
 8008786:	70fb      	strb	r3, [r7, #3]
		LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_DateStruct);
 8008788:	463b      	mov	r3, r7
 800878a:	461a      	mov	r2, r3
 800878c:	2101      	movs	r1, #1
 800878e:	4806      	ldr	r0, [pc, #24]	; (80087a8 <RTC_Init+0xa0>)
 8008790:	f7fb f874 	bl	800387c <LL_RTC_DATE_Init>
		LL_RTC_BAK_SetRegister(RTC,LL_RTC_BKP_DR0,0x32F2);
 8008794:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8008798:	2100      	movs	r1, #0
 800879a:	4803      	ldr	r0, [pc, #12]	; (80087a8 <RTC_Init+0xa0>)
 800879c:	f7ff ff8e 	bl	80086bc <LL_RTC_BAK_SetRegister>
	}

}
 80087a0:	bf00      	nop
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	40002800 	.word	0x40002800

080087ac <RTC_GetTime>:

void RTC_GetTime(struct tm* time)
{
 80087ac:	b590      	push	{r4, r7, lr}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
	time->tm_hour = __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 80087b4:	4871      	ldr	r0, [pc, #452]	; (800897c <RTC_GetTime+0x1d0>)
 80087b6:	f7ff ff1b 	bl	80085f0 <LL_RTC_TIME_GetHour>
 80087ba:	4603      	mov	r3, r0
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	111b      	asrs	r3, r3, #4
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	f003 030f 	and.w	r3, r3, #15
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	461a      	mov	r2, r3
 80087ca:	0092      	lsls	r2, r2, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	005b      	lsls	r3, r3, #1
 80087d0:	b2dc      	uxtb	r4, r3
 80087d2:	486a      	ldr	r0, [pc, #424]	; (800897c <RTC_GetTime+0x1d0>)
 80087d4:	f7ff ff0c 	bl	80085f0 <LL_RTC_TIME_GetHour>
 80087d8:	4603      	mov	r3, r0
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	f003 030f 	and.w	r3, r3, #15
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	4423      	add	r3, r4
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	461a      	mov	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	609a      	str	r2, [r3, #8]
	time->tm_min = 	__LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 80087ec:	4863      	ldr	r0, [pc, #396]	; (800897c <RTC_GetTime+0x1d0>)
 80087ee:	f7ff ff0e 	bl	800860e <LL_RTC_TIME_GetMinute>
 80087f2:	4603      	mov	r3, r0
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	111b      	asrs	r3, r3, #4
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	f003 030f 	and.w	r3, r3, #15
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	461a      	mov	r2, r3
 8008802:	0092      	lsls	r2, r2, #2
 8008804:	4413      	add	r3, r2
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	b2dc      	uxtb	r4, r3
 800880a:	485c      	ldr	r0, [pc, #368]	; (800897c <RTC_GetTime+0x1d0>)
 800880c:	f7ff feff 	bl	800860e <LL_RTC_TIME_GetMinute>
 8008810:	4603      	mov	r3, r0
 8008812:	b2db      	uxtb	r3, r3
 8008814:	f003 030f 	and.w	r3, r3, #15
 8008818:	b2db      	uxtb	r3, r3
 800881a:	4423      	add	r3, r4
 800881c:	b2db      	uxtb	r3, r3
 800881e:	461a      	mov	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	605a      	str	r2, [r3, #4]
	time->tm_sec = 	__LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8008824:	4855      	ldr	r0, [pc, #340]	; (800897c <RTC_GetTime+0x1d0>)
 8008826:	f7ff ff01 	bl	800862c <LL_RTC_TIME_GetSecond>
 800882a:	4603      	mov	r3, r0
 800882c:	b2db      	uxtb	r3, r3
 800882e:	111b      	asrs	r3, r3, #4
 8008830:	b2db      	uxtb	r3, r3
 8008832:	f003 030f 	and.w	r3, r3, #15
 8008836:	b2db      	uxtb	r3, r3
 8008838:	461a      	mov	r2, r3
 800883a:	0092      	lsls	r2, r2, #2
 800883c:	4413      	add	r3, r2
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	b2dc      	uxtb	r4, r3
 8008842:	484e      	ldr	r0, [pc, #312]	; (800897c <RTC_GetTime+0x1d0>)
 8008844:	f7ff fef2 	bl	800862c <LL_RTC_TIME_GetSecond>
 8008848:	4603      	mov	r3, r0
 800884a:	b2db      	uxtb	r3, r3
 800884c:	f003 030f 	and.w	r3, r3, #15
 8008850:	b2db      	uxtb	r3, r3
 8008852:	4423      	add	r3, r4
 8008854:	b2db      	uxtb	r3, r3
 8008856:	461a      	mov	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	601a      	str	r2, [r3, #0]

	time->tm_mday = __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 800885c:	4847      	ldr	r0, [pc, #284]	; (800897c <RTC_GetTime+0x1d0>)
 800885e:	f7ff ff1f 	bl	80086a0 <LL_RTC_DATE_GetDay>
 8008862:	4603      	mov	r3, r0
 8008864:	b2db      	uxtb	r3, r3
 8008866:	111b      	asrs	r3, r3, #4
 8008868:	b2db      	uxtb	r3, r3
 800886a:	f003 030f 	and.w	r3, r3, #15
 800886e:	b2db      	uxtb	r3, r3
 8008870:	461a      	mov	r2, r3
 8008872:	0092      	lsls	r2, r2, #2
 8008874:	4413      	add	r3, r2
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	b2dc      	uxtb	r4, r3
 800887a:	4840      	ldr	r0, [pc, #256]	; (800897c <RTC_GetTime+0x1d0>)
 800887c:	f7ff ff10 	bl	80086a0 <LL_RTC_DATE_GetDay>
 8008880:	4603      	mov	r3, r0
 8008882:	b2db      	uxtb	r3, r3
 8008884:	f003 030f 	and.w	r3, r3, #15
 8008888:	b2db      	uxtb	r3, r3
 800888a:	4423      	add	r3, r4
 800888c:	b2db      	uxtb	r3, r3
 800888e:	461a      	mov	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	60da      	str	r2, [r3, #12]
	time->tm_mon = __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)) - 1;
 8008894:	4839      	ldr	r0, [pc, #228]	; (800897c <RTC_GetTime+0x1d0>)
 8008896:	f7ff fef4 	bl	8008682 <LL_RTC_DATE_GetMonth>
 800889a:	4603      	mov	r3, r0
 800889c:	b2db      	uxtb	r3, r3
 800889e:	111b      	asrs	r3, r3, #4
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	f003 030f 	and.w	r3, r3, #15
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	461a      	mov	r2, r3
 80088aa:	0092      	lsls	r2, r2, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	b2dc      	uxtb	r4, r3
 80088b2:	4832      	ldr	r0, [pc, #200]	; (800897c <RTC_GetTime+0x1d0>)
 80088b4:	f7ff fee5 	bl	8008682 <LL_RTC_DATE_GetMonth>
 80088b8:	4603      	mov	r3, r0
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	f003 030f 	and.w	r3, r3, #15
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	4423      	add	r3, r4
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	1e5a      	subs	r2, r3, #1
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	611a      	str	r2, [r3, #16]
	time->tm_year = __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 80088cc:	482b      	ldr	r0, [pc, #172]	; (800897c <RTC_GetTime+0x1d0>)
 80088ce:	f7ff febb 	bl	8008648 <LL_RTC_DATE_GetYear>
 80088d2:	4603      	mov	r3, r0
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	111b      	asrs	r3, r3, #4
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	f003 030f 	and.w	r3, r3, #15
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	461a      	mov	r2, r3
 80088e2:	0092      	lsls	r2, r2, #2
 80088e4:	4413      	add	r3, r2
 80088e6:	005b      	lsls	r3, r3, #1
 80088e8:	b2dc      	uxtb	r4, r3
 80088ea:	4824      	ldr	r0, [pc, #144]	; (800897c <RTC_GetTime+0x1d0>)
 80088ec:	f7ff feac 	bl	8008648 <LL_RTC_DATE_GetYear>
 80088f0:	4603      	mov	r3, r0
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	f003 030f 	and.w	r3, r3, #15
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	4423      	add	r3, r4
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	461a      	mov	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	615a      	str	r2, [r3, #20]

	// RTC HAS DIF WEEK DAY MASKS
	//tm  0 - sunday 6 - saturday
	//rtc 1 - monday 7 - sunday

	switch(LL_RTC_DATE_GetWeekDay(RTC))
 8008904:	481d      	ldr	r0, [pc, #116]	; (800897c <RTC_GetTime+0x1d0>)
 8008906:	f7ff fead 	bl	8008664 <LL_RTC_DATE_GetWeekDay>
 800890a:	4603      	mov	r3, r0
 800890c:	3b01      	subs	r3, #1
 800890e:	2b06      	cmp	r3, #6
 8008910:	d82c      	bhi.n	800896c <RTC_GetTime+0x1c0>
 8008912:	a201      	add	r2, pc, #4	; (adr r2, 8008918 <RTC_GetTime+0x16c>)
 8008914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008918:	08008935 	.word	0x08008935
 800891c:	0800893d 	.word	0x0800893d
 8008920:	08008945 	.word	0x08008945
 8008924:	0800894d 	.word	0x0800894d
 8008928:	08008955 	.word	0x08008955
 800892c:	0800895d 	.word	0x0800895d
 8008930:	08008965 	.word	0x08008965
	{
	case LL_RTC_WEEKDAY_MONDAY: 	time->tm_wday = 1; break;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	619a      	str	r2, [r3, #24]
 800893a:	e01b      	b.n	8008974 <RTC_GetTime+0x1c8>
	case LL_RTC_WEEKDAY_TUESDAY: 	time->tm_wday = 2; break;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	619a      	str	r2, [r3, #24]
 8008942:	e017      	b.n	8008974 <RTC_GetTime+0x1c8>
	case LL_RTC_WEEKDAY_WEDNESDAY: 	time->tm_wday = 3; break;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2203      	movs	r2, #3
 8008948:	619a      	str	r2, [r3, #24]
 800894a:	e013      	b.n	8008974 <RTC_GetTime+0x1c8>
	case LL_RTC_WEEKDAY_THURSDAY: 	time->tm_wday = 4; break;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2204      	movs	r2, #4
 8008950:	619a      	str	r2, [r3, #24]
 8008952:	e00f      	b.n	8008974 <RTC_GetTime+0x1c8>
	case LL_RTC_WEEKDAY_FRIDAY: 	time->tm_wday = 5; break;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2205      	movs	r2, #5
 8008958:	619a      	str	r2, [r3, #24]
 800895a:	e00b      	b.n	8008974 <RTC_GetTime+0x1c8>
	case LL_RTC_WEEKDAY_SATURDAY: 	time->tm_wday = 6; break;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2206      	movs	r2, #6
 8008960:	619a      	str	r2, [r3, #24]
 8008962:	e007      	b.n	8008974 <RTC_GetTime+0x1c8>
	case LL_RTC_WEEKDAY_SUNDAY: 	time->tm_wday = 0; break;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	619a      	str	r2, [r3, #24]
 800896a:	e003      	b.n	8008974 <RTC_GetTime+0x1c8>
	default: time->tm_wday = 0; break;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	619a      	str	r2, [r3, #24]
 8008972:	bf00      	nop
	}
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	bd90      	pop	{r4, r7, pc}
 800897c:	40002800 	.word	0x40002800

08008980 <RTC_SetTime>:

void RTC_SetTime(struct tm* time)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
	LL_RTC_DisableWriteProtection(RTC);
 8008988:	4836      	ldr	r0, [pc, #216]	; (8008a64 <RTC_SetTime+0xe4>)
 800898a:	f7ff fe21 	bl	80085d0 <LL_RTC_DisableWriteProtection>
	LL_RTC_EnterInitMode(RTC);
 800898e:	4835      	ldr	r0, [pc, #212]	; (8008a64 <RTC_SetTime+0xe4>)
 8008990:	f7fb f81a 	bl	80039c8 <LL_RTC_EnterInitMode>

	LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8008994:	f107 0310 	add.w	r3, r7, #16
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]
 800899c:	605a      	str	r2, [r3, #4]
	LL_RTC_DateTypeDef RTC_DateStruct = {0};
 800899e:	2300      	movs	r3, #0
 80089a0:	60fb      	str	r3, [r7, #12]

	RTC_TimeStruct.Hours = time->tm_hour;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	753b      	strb	r3, [r7, #20]
	RTC_TimeStruct.Minutes = time->tm_min;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	757b      	strb	r3, [r7, #21]
	RTC_TimeStruct.Seconds = time->tm_sec;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	75bb      	strb	r3, [r7, #22]
	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 80089ba:	f107 0310 	add.w	r3, r7, #16
 80089be:	461a      	mov	r2, r3
 80089c0:	2100      	movs	r1, #0
 80089c2:	4828      	ldr	r0, [pc, #160]	; (8008a64 <RTC_SetTime+0xe4>)
 80089c4:	f7fa feb2 	bl	800372c <LL_RTC_TIME_Init>

	switch(time->tm_wday)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	2b06      	cmp	r3, #6
 80089ce:	d826      	bhi.n	8008a1e <RTC_SetTime+0x9e>
 80089d0:	a201      	add	r2, pc, #4	; (adr r2, 80089d8 <RTC_SetTime+0x58>)
 80089d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d6:	bf00      	nop
 80089d8:	080089f5 	.word	0x080089f5
 80089dc:	080089fb 	.word	0x080089fb
 80089e0:	08008a01 	.word	0x08008a01
 80089e4:	08008a07 	.word	0x08008a07
 80089e8:	08008a0d 	.word	0x08008a0d
 80089ec:	08008a13 	.word	0x08008a13
 80089f0:	08008a19 	.word	0x08008a19
	{
	case 0:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_SUNDAY;		break;
 80089f4:	2307      	movs	r3, #7
 80089f6:	733b      	strb	r3, [r7, #12]
 80089f8:	e014      	b.n	8008a24 <RTC_SetTime+0xa4>
	case 1:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY; 	break;
 80089fa:	2301      	movs	r3, #1
 80089fc:	733b      	strb	r3, [r7, #12]
 80089fe:	e011      	b.n	8008a24 <RTC_SetTime+0xa4>
	case 2:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_TUESDAY; 	break;
 8008a00:	2302      	movs	r3, #2
 8008a02:	733b      	strb	r3, [r7, #12]
 8008a04:	e00e      	b.n	8008a24 <RTC_SetTime+0xa4>
	case 3: RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_WEDNESDAY; 	break;
 8008a06:	2303      	movs	r3, #3
 8008a08:	733b      	strb	r3, [r7, #12]
 8008a0a:	e00b      	b.n	8008a24 <RTC_SetTime+0xa4>
	case 4:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_THURSDAY; 	break;
 8008a0c:	2304      	movs	r3, #4
 8008a0e:	733b      	strb	r3, [r7, #12]
 8008a10:	e008      	b.n	8008a24 <RTC_SetTime+0xa4>
	case 5:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_FRIDAY; 	break;
 8008a12:	2305      	movs	r3, #5
 8008a14:	733b      	strb	r3, [r7, #12]
 8008a16:	e005      	b.n	8008a24 <RTC_SetTime+0xa4>
	case 6:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_SATURDAY;	break;
 8008a18:	2306      	movs	r3, #6
 8008a1a:	733b      	strb	r3, [r7, #12]
 8008a1c:	e002      	b.n	8008a24 <RTC_SetTime+0xa4>
	default: RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_SUNDAY; 	break;
 8008a1e:	2307      	movs	r3, #7
 8008a20:	733b      	strb	r3, [r7, #12]
 8008a22:	bf00      	nop
	}

	RTC_DateStruct.Day = time->tm_mday;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	73bb      	strb	r3, [r7, #14]
	RTC_DateStruct.Month = time->tm_mon + 1;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	3301      	adds	r3, #1
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	737b      	strb	r3, [r7, #13]
	RTC_DateStruct.Year = time->tm_year;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	73fb      	strb	r3, [r7, #15]
	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8008a40:	f107 030c 	add.w	r3, r7, #12
 8008a44:	461a      	mov	r2, r3
 8008a46:	2100      	movs	r1, #0
 8008a48:	4806      	ldr	r0, [pc, #24]	; (8008a64 <RTC_SetTime+0xe4>)
 8008a4a:	f7fa ff17 	bl	800387c <LL_RTC_DATE_Init>

	LL_RTC_DisableInitMode(RTC);
 8008a4e:	4805      	ldr	r0, [pc, #20]	; (8008a64 <RTC_SetTime+0xe4>)
 8008a50:	f7ff fd7a 	bl	8008548 <LL_RTC_DisableInitMode>
	LL_RTC_EnableWriteProtection(RTC);
 8008a54:	4803      	ldr	r0, [pc, #12]	; (8008a64 <RTC_SetTime+0xe4>)
 8008a56:	f7ff fdae 	bl	80085b6 <LL_RTC_EnableWriteProtection>
}
 8008a5a:	bf00      	nop
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	40002800 	.word	0x40002800

08008a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a6e:	2300      	movs	r3, #0
 8008a70:	607b      	str	r3, [r7, #4]
 8008a72:	4a12      	ldr	r2, [pc, #72]	; (8008abc <HAL_MspInit+0x54>)
 8008a74:	4b11      	ldr	r3, [pc, #68]	; (8008abc <HAL_MspInit+0x54>)
 8008a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8008a7e:	4b0f      	ldr	r3, [pc, #60]	; (8008abc <HAL_MspInit+0x54>)
 8008a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a86:	607b      	str	r3, [r7, #4]
 8008a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	603b      	str	r3, [r7, #0]
 8008a8e:	4a0b      	ldr	r2, [pc, #44]	; (8008abc <HAL_MspInit+0x54>)
 8008a90:	4b0a      	ldr	r3, [pc, #40]	; (8008abc <HAL_MspInit+0x54>)
 8008a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a98:	6413      	str	r3, [r2, #64]	; 0x40
 8008a9a:	4b08      	ldr	r3, [pc, #32]	; (8008abc <HAL_MspInit+0x54>)
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aa2:	603b      	str	r3, [r7, #0]
 8008aa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	210f      	movs	r1, #15
 8008aaa:	f06f 0001 	mvn.w	r0, #1
 8008aae:	f7f9 ff77 	bl	80029a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	40023800 	.word	0x40023800

08008ac0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b08c      	sub	sp, #48	; 0x30
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	2019      	movs	r0, #25
 8008ad6:	f7f9 ff63 	bl	80029a0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8008ada:	2019      	movs	r0, #25
 8008adc:	f7f9 ff7c 	bl	80029d8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	4a1f      	ldr	r2, [pc, #124]	; (8008b64 <HAL_InitTick+0xa4>)
 8008ae6:	4b1f      	ldr	r3, [pc, #124]	; (8008b64 <HAL_InitTick+0xa4>)
 8008ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aea:	f043 0301 	orr.w	r3, r3, #1
 8008aee:	6453      	str	r3, [r2, #68]	; 0x44
 8008af0:	4b1c      	ldr	r3, [pc, #112]	; (8008b64 <HAL_InitTick+0xa4>)
 8008af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	60fb      	str	r3, [r7, #12]
 8008afa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008afc:	f107 0210 	add.w	r2, r7, #16
 8008b00:	f107 0314 	add.w	r3, r7, #20
 8008b04:	4611      	mov	r1, r2
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7f9 ff94 	bl	8002a34 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8008b0c:	f7f9 ff7e 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8008b10:	4603      	mov	r3, r0
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b18:	4a13      	ldr	r2, [pc, #76]	; (8008b68 <HAL_InitTick+0xa8>)
 8008b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b1e:	0c9b      	lsrs	r3, r3, #18
 8008b20:	3b01      	subs	r3, #1
 8008b22:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8008b24:	4b11      	ldr	r3, [pc, #68]	; (8008b6c <HAL_InitTick+0xac>)
 8008b26:	4a12      	ldr	r2, [pc, #72]	; (8008b70 <HAL_InitTick+0xb0>)
 8008b28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8008b2a:	4b10      	ldr	r3, [pc, #64]	; (8008b6c <HAL_InitTick+0xac>)
 8008b2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008b30:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8008b32:	4a0e      	ldr	r2, [pc, #56]	; (8008b6c <HAL_InitTick+0xac>)
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8008b38:	4b0c      	ldr	r3, [pc, #48]	; (8008b6c <HAL_InitTick+0xac>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b3e:	4b0b      	ldr	r3, [pc, #44]	; (8008b6c <HAL_InitTick+0xac>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8008b44:	4809      	ldr	r0, [pc, #36]	; (8008b6c <HAL_InitTick+0xac>)
 8008b46:	f7f9 ffa7 	bl	8002a98 <HAL_TIM_Base_Init>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d104      	bne.n	8008b5a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8008b50:	4806      	ldr	r0, [pc, #24]	; (8008b6c <HAL_InitTick+0xac>)
 8008b52:	f7f9 ffd6 	bl	8002b02 <HAL_TIM_Base_Start_IT>
 8008b56:	4603      	mov	r3, r0
 8008b58:	e000      	b.n	8008b5c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3730      	adds	r7, #48	; 0x30
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	40023800 	.word	0x40023800
 8008b68:	431bde83 	.word	0x431bde83
 8008b6c:	200192b8 	.word	0x200192b8
 8008b70:	40010000 	.word	0x40010000

08008b74 <NMI_Handler>:
#include "task.h"

extern TIM_HandleTypeDef htim1;

void NMI_Handler(void)
{
 8008b74:	b480      	push	{r7}
 8008b76:	af00      	add	r7, sp, #0

}
 8008b78:	bf00      	nop
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8008b82:	b480      	push	{r7}
 8008b84:	af00      	add	r7, sp, #0
	while (1)
 8008b86:	e7fe      	b.n	8008b86 <HardFault_Handler+0x4>

08008b88 <MemManage_Handler>:

	}
}

void MemManage_Handler(void)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
	while (1)
 8008b8c:	e7fe      	b.n	8008b8c <MemManage_Handler+0x4>

08008b8e <BusFault_Handler>:

	}
}

void BusFault_Handler(void)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	af00      	add	r7, sp, #0
	while (1)
 8008b92:	e7fe      	b.n	8008b92 <BusFault_Handler+0x4>

08008b94 <UsageFault_Handler>:

	}
}

void UsageFault_Handler(void)
{
 8008b94:	b480      	push	{r7}
 8008b96:	af00      	add	r7, sp, #0
	while (1)
 8008b98:	e7fe      	b.n	8008b98 <UsageFault_Handler+0x4>

08008b9a <DebugMon_Handler>:

	}
}

void DebugMon_Handler(void)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	af00      	add	r7, sp, #0

}
 8008b9e:	bf00      	nop
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim1);
 8008bac:	4802      	ldr	r0, [pc, #8]	; (8008bb8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8008bae:	f7f9 ffcc 	bl	8002b4a <HAL_TIM_IRQHandler>
}
 8008bb2:	bf00      	nop
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	200192b8 	.word	0x200192b8

08008bbc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008bc4:	4b11      	ldr	r3, [pc, #68]	; (8008c0c <_sbrk+0x50>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d102      	bne.n	8008bd2 <_sbrk+0x16>
		heap_end = &end;
 8008bcc:	4b0f      	ldr	r3, [pc, #60]	; (8008c0c <_sbrk+0x50>)
 8008bce:	4a10      	ldr	r2, [pc, #64]	; (8008c10 <_sbrk+0x54>)
 8008bd0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008bd2:	4b0e      	ldr	r3, [pc, #56]	; (8008c0c <_sbrk+0x50>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008bd8:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <_sbrk+0x50>)
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4413      	add	r3, r2
 8008be0:	466a      	mov	r2, sp
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d907      	bls.n	8008bf6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8008be6:	f000 f855 	bl	8008c94 <__errno>
 8008bea:	4602      	mov	r2, r0
 8008bec:	230c      	movs	r3, #12
 8008bee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf4:	e006      	b.n	8008c04 <_sbrk+0x48>
	}

	heap_end += incr;
 8008bf6:	4b05      	ldr	r3, [pc, #20]	; (8008c0c <_sbrk+0x50>)
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	4a03      	ldr	r2, [pc, #12]	; (8008c0c <_sbrk+0x50>)
 8008c00:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008c02:	68fb      	ldr	r3, [r7, #12]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	20008b78 	.word	0x20008b78
 8008c10:	200192fc 	.word	0x200192fc

08008c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008c14:	b480      	push	{r7}
 8008c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008c18:	4a08      	ldr	r2, [pc, #32]	; (8008c3c <SystemInit+0x28>)
 8008c1a:	4b08      	ldr	r3, [pc, #32]	; (8008c3c <SystemInit+0x28>)
 8008c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008c28:	4b04      	ldr	r3, [pc, #16]	; (8008c3c <SystemInit+0x28>)
 8008c2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008c2e:	609a      	str	r2, [r3, #8]
#endif
}
 8008c30:	bf00      	nop
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	e000ed00 	.word	0xe000ed00

08008c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008c78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008c44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008c46:	e003      	b.n	8008c50 <LoopCopyDataInit>

08008c48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008c48:	4b0c      	ldr	r3, [pc, #48]	; (8008c7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008c4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008c4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008c4e:	3104      	adds	r1, #4

08008c50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008c50:	480b      	ldr	r0, [pc, #44]	; (8008c80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008c52:	4b0c      	ldr	r3, [pc, #48]	; (8008c84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008c54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008c56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008c58:	d3f6      	bcc.n	8008c48 <CopyDataInit>
  ldr  r2, =_sbss
 8008c5a:	4a0b      	ldr	r2, [pc, #44]	; (8008c88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008c5c:	e002      	b.n	8008c64 <LoopFillZerobss>

08008c5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008c5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008c60:	f842 3b04 	str.w	r3, [r2], #4

08008c64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008c64:	4b09      	ldr	r3, [pc, #36]	; (8008c8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008c66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008c68:	d3f9      	bcc.n	8008c5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008c6a:	f7ff ffd3 	bl	8008c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008c6e:	f000 f817 	bl	8008ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008c72:	f7ff fbb1 	bl	80083d8 <main>
  bx  lr    
 8008c76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008c78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008c7c:	0800b2fc 	.word	0x0800b2fc
  ldr  r0, =_sdata
 8008c80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008c84:	20000228 	.word	0x20000228
  ldr  r2, =_sbss
 8008c88:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 8008c8c:	200192fc 	.word	0x200192fc

08008c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008c90:	e7fe      	b.n	8008c90 <ADC_IRQHandler>
	...

08008c94 <__errno>:
 8008c94:	4b01      	ldr	r3, [pc, #4]	; (8008c9c <__errno+0x8>)
 8008c96:	6818      	ldr	r0, [r3, #0]
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	20000010 	.word	0x20000010

08008ca0 <__libc_init_array>:
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	4e0d      	ldr	r6, [pc, #52]	; (8008cd8 <__libc_init_array+0x38>)
 8008ca4:	4c0d      	ldr	r4, [pc, #52]	; (8008cdc <__libc_init_array+0x3c>)
 8008ca6:	1ba4      	subs	r4, r4, r6
 8008ca8:	10a4      	asrs	r4, r4, #2
 8008caa:	2500      	movs	r5, #0
 8008cac:	42a5      	cmp	r5, r4
 8008cae:	d109      	bne.n	8008cc4 <__libc_init_array+0x24>
 8008cb0:	4e0b      	ldr	r6, [pc, #44]	; (8008ce0 <__libc_init_array+0x40>)
 8008cb2:	4c0c      	ldr	r4, [pc, #48]	; (8008ce4 <__libc_init_array+0x44>)
 8008cb4:	f002 f822 	bl	800acfc <_init>
 8008cb8:	1ba4      	subs	r4, r4, r6
 8008cba:	10a4      	asrs	r4, r4, #2
 8008cbc:	2500      	movs	r5, #0
 8008cbe:	42a5      	cmp	r5, r4
 8008cc0:	d105      	bne.n	8008cce <__libc_init_array+0x2e>
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008cc8:	4798      	blx	r3
 8008cca:	3501      	adds	r5, #1
 8008ccc:	e7ee      	b.n	8008cac <__libc_init_array+0xc>
 8008cce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008cd2:	4798      	blx	r3
 8008cd4:	3501      	adds	r5, #1
 8008cd6:	e7f2      	b.n	8008cbe <__libc_init_array+0x1e>
 8008cd8:	0800b2f4 	.word	0x0800b2f4
 8008cdc:	0800b2f4 	.word	0x0800b2f4
 8008ce0:	0800b2f4 	.word	0x0800b2f4
 8008ce4:	0800b2f8 	.word	0x0800b2f8

08008ce8 <localtime_r>:
 8008ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cec:	460c      	mov	r4, r1
 8008cee:	4680      	mov	r8, r0
 8008cf0:	f000 ff2c 	bl	8009b4c <__gettzinfo>
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	4607      	mov	r7, r0
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	f000 ff2b 	bl	8009b54 <gmtime_r>
 8008cfe:	6946      	ldr	r6, [r0, #20]
 8008d00:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8008d04:	07b3      	lsls	r3, r6, #30
 8008d06:	4604      	mov	r4, r0
 8008d08:	d105      	bne.n	8008d16 <localtime_r+0x2e>
 8008d0a:	2264      	movs	r2, #100	; 0x64
 8008d0c:	fb96 f3f2 	sdiv	r3, r6, r2
 8008d10:	fb02 6313 	mls	r3, r2, r3, r6
 8008d14:	b9fb      	cbnz	r3, 8008d56 <localtime_r+0x6e>
 8008d16:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008d1a:	fb96 f5f3 	sdiv	r5, r6, r3
 8008d1e:	fb03 6515 	mls	r5, r3, r5, r6
 8008d22:	fab5 f585 	clz	r5, r5
 8008d26:	096d      	lsrs	r5, r5, #5
 8008d28:	4b5f      	ldr	r3, [pc, #380]	; (8008ea8 <localtime_r+0x1c0>)
 8008d2a:	2230      	movs	r2, #48	; 0x30
 8008d2c:	fb02 3505 	mla	r5, r2, r5, r3
 8008d30:	f000 fd18 	bl	8009764 <__tz_lock>
 8008d34:	f000 fd18 	bl	8009768 <_tzset_unlocked>
 8008d38:	4b5c      	ldr	r3, [pc, #368]	; (8008eac <localtime_r+0x1c4>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	b1e3      	cbz	r3, 8008d78 <localtime_r+0x90>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	429e      	cmp	r6, r3
 8008d42:	d10a      	bne.n	8008d5a <localtime_r+0x72>
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	f8d8 3000 	ldr.w	r3, [r8]
 8008d4a:	69fa      	ldr	r2, [r7, #28]
 8008d4c:	b969      	cbnz	r1, 8008d6a <localtime_r+0x82>
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	db0d      	blt.n	8008d6e <localtime_r+0x86>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e010      	b.n	8008d78 <localtime_r+0x90>
 8008d56:	2501      	movs	r5, #1
 8008d58:	e7e6      	b.n	8008d28 <localtime_r+0x40>
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	f000 fc5a 	bl	8009614 <__tzcalc_limits>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d1ef      	bne.n	8008d44 <localtime_r+0x5c>
 8008d64:	f04f 33ff 	mov.w	r3, #4294967295
 8008d68:	e006      	b.n	8008d78 <localtime_r+0x90>
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	db55      	blt.n	8008e1a <localtime_r+0x132>
 8008d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d70:	4293      	cmp	r3, r2
 8008d72:	bfac      	ite	ge
 8008d74:	2300      	movge	r3, #0
 8008d76:	2301      	movlt	r3, #1
 8008d78:	6223      	str	r3, [r4, #32]
 8008d7a:	6a23      	ldr	r3, [r4, #32]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	bf0c      	ite	eq
 8008d80:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8008d82:	6a39      	ldrne	r1, [r7, #32]
 8008d84:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008d88:	203c      	movs	r0, #60	; 0x3c
 8008d8a:	fb91 f6f3 	sdiv	r6, r1, r3
 8008d8e:	fb03 1316 	mls	r3, r3, r6, r1
 8008d92:	6861      	ldr	r1, [r4, #4]
 8008d94:	fb93 f2f0 	sdiv	r2, r3, r0
 8008d98:	fb00 3012 	mls	r0, r0, r2, r3
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	1a89      	subs	r1, r1, r2
 8008da0:	68a2      	ldr	r2, [r4, #8]
 8008da2:	6061      	str	r1, [r4, #4]
 8008da4:	1a1b      	subs	r3, r3, r0
 8008da6:	1b92      	subs	r2, r2, r6
 8008da8:	2b3b      	cmp	r3, #59	; 0x3b
 8008daa:	6023      	str	r3, [r4, #0]
 8008dac:	60a2      	str	r2, [r4, #8]
 8008dae:	dd36      	ble.n	8008e1e <localtime_r+0x136>
 8008db0:	3101      	adds	r1, #1
 8008db2:	6061      	str	r1, [r4, #4]
 8008db4:	3b3c      	subs	r3, #60	; 0x3c
 8008db6:	6023      	str	r3, [r4, #0]
 8008db8:	6863      	ldr	r3, [r4, #4]
 8008dba:	2b3b      	cmp	r3, #59	; 0x3b
 8008dbc:	dd35      	ble.n	8008e2a <localtime_r+0x142>
 8008dbe:	3201      	adds	r2, #1
 8008dc0:	60a2      	str	r2, [r4, #8]
 8008dc2:	3b3c      	subs	r3, #60	; 0x3c
 8008dc4:	6063      	str	r3, [r4, #4]
 8008dc6:	68a3      	ldr	r3, [r4, #8]
 8008dc8:	2b17      	cmp	r3, #23
 8008dca:	dd34      	ble.n	8008e36 <localtime_r+0x14e>
 8008dcc:	69e2      	ldr	r2, [r4, #28]
 8008dce:	3201      	adds	r2, #1
 8008dd0:	61e2      	str	r2, [r4, #28]
 8008dd2:	69a2      	ldr	r2, [r4, #24]
 8008dd4:	3201      	adds	r2, #1
 8008dd6:	2a06      	cmp	r2, #6
 8008dd8:	bfc8      	it	gt
 8008dda:	2200      	movgt	r2, #0
 8008ddc:	61a2      	str	r2, [r4, #24]
 8008dde:	68e2      	ldr	r2, [r4, #12]
 8008de0:	3b18      	subs	r3, #24
 8008de2:	3201      	adds	r2, #1
 8008de4:	60a3      	str	r3, [r4, #8]
 8008de6:	6923      	ldr	r3, [r4, #16]
 8008de8:	60e2      	str	r2, [r4, #12]
 8008dea:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8008dee:	428a      	cmp	r2, r1
 8008df0:	dd0e      	ble.n	8008e10 <localtime_r+0x128>
 8008df2:	3301      	adds	r3, #1
 8008df4:	2b0c      	cmp	r3, #12
 8008df6:	bf0c      	ite	eq
 8008df8:	6963      	ldreq	r3, [r4, #20]
 8008dfa:	6123      	strne	r3, [r4, #16]
 8008dfc:	eba2 0201 	sub.w	r2, r2, r1
 8008e00:	60e2      	str	r2, [r4, #12]
 8008e02:	bf01      	itttt	eq
 8008e04:	3301      	addeq	r3, #1
 8008e06:	2200      	moveq	r2, #0
 8008e08:	6122      	streq	r2, [r4, #16]
 8008e0a:	6163      	streq	r3, [r4, #20]
 8008e0c:	bf08      	it	eq
 8008e0e:	61e2      	streq	r2, [r4, #28]
 8008e10:	f000 fca9 	bl	8009766 <__tz_unlock>
 8008e14:	4620      	mov	r0, r4
 8008e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e7ac      	b.n	8008d78 <localtime_r+0x90>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	daca      	bge.n	8008db8 <localtime_r+0xd0>
 8008e22:	3901      	subs	r1, #1
 8008e24:	6061      	str	r1, [r4, #4]
 8008e26:	333c      	adds	r3, #60	; 0x3c
 8008e28:	e7c5      	b.n	8008db6 <localtime_r+0xce>
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	dacb      	bge.n	8008dc6 <localtime_r+0xde>
 8008e2e:	3a01      	subs	r2, #1
 8008e30:	60a2      	str	r2, [r4, #8]
 8008e32:	333c      	adds	r3, #60	; 0x3c
 8008e34:	e7c6      	b.n	8008dc4 <localtime_r+0xdc>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	daea      	bge.n	8008e10 <localtime_r+0x128>
 8008e3a:	69e2      	ldr	r2, [r4, #28]
 8008e3c:	3a01      	subs	r2, #1
 8008e3e:	61e2      	str	r2, [r4, #28]
 8008e40:	69a2      	ldr	r2, [r4, #24]
 8008e42:	3a01      	subs	r2, #1
 8008e44:	bf48      	it	mi
 8008e46:	2206      	movmi	r2, #6
 8008e48:	61a2      	str	r2, [r4, #24]
 8008e4a:	68e2      	ldr	r2, [r4, #12]
 8008e4c:	3318      	adds	r3, #24
 8008e4e:	3a01      	subs	r2, #1
 8008e50:	60e2      	str	r2, [r4, #12]
 8008e52:	60a3      	str	r3, [r4, #8]
 8008e54:	2a00      	cmp	r2, #0
 8008e56:	d1db      	bne.n	8008e10 <localtime_r+0x128>
 8008e58:	6923      	ldr	r3, [r4, #16]
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	d405      	bmi.n	8008e6a <localtime_r+0x182>
 8008e5e:	6123      	str	r3, [r4, #16]
 8008e60:	6923      	ldr	r3, [r4, #16]
 8008e62:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8008e66:	60e3      	str	r3, [r4, #12]
 8008e68:	e7d2      	b.n	8008e10 <localtime_r+0x128>
 8008e6a:	230b      	movs	r3, #11
 8008e6c:	6123      	str	r3, [r4, #16]
 8008e6e:	6963      	ldr	r3, [r4, #20]
 8008e70:	1e5a      	subs	r2, r3, #1
 8008e72:	f012 0f03 	tst.w	r2, #3
 8008e76:	6162      	str	r2, [r4, #20]
 8008e78:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8008e7c:	d105      	bne.n	8008e8a <localtime_r+0x1a2>
 8008e7e:	2164      	movs	r1, #100	; 0x64
 8008e80:	fb92 f3f1 	sdiv	r3, r2, r1
 8008e84:	fb01 2313 	mls	r3, r1, r3, r2
 8008e88:	b963      	cbnz	r3, 8008ea4 <localtime_r+0x1bc>
 8008e8a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008e8e:	fb92 f3f1 	sdiv	r3, r2, r1
 8008e92:	fb01 2313 	mls	r3, r1, r3, r2
 8008e96:	fab3 f383 	clz	r3, r3
 8008e9a:	095b      	lsrs	r3, r3, #5
 8008e9c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8008ea0:	61e3      	str	r3, [r4, #28]
 8008ea2:	e7dd      	b.n	8008e60 <localtime_r+0x178>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e7f9      	b.n	8008e9c <localtime_r+0x1b4>
 8008ea8:	0800b0a0 	.word	0x0800b0a0
 8008eac:	20008b98 	.word	0x20008b98

08008eb0 <__locale_ctype_ptr_l>:
 8008eb0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008eb4:	4770      	bx	lr
	...

08008eb8 <__locale_ctype_ptr>:
 8008eb8:	4b04      	ldr	r3, [pc, #16]	; (8008ecc <__locale_ctype_ptr+0x14>)
 8008eba:	4a05      	ldr	r2, [pc, #20]	; (8008ed0 <__locale_ctype_ptr+0x18>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	6a1b      	ldr	r3, [r3, #32]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	bf08      	it	eq
 8008ec4:	4613      	moveq	r3, r2
 8008ec6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008eca:	4770      	bx	lr
 8008ecc:	20000010 	.word	0x20000010
 8008ed0:	20000074 	.word	0x20000074

08008ed4 <__ascii_mbtowc>:
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	b901      	cbnz	r1, 8008eda <__ascii_mbtowc+0x6>
 8008ed8:	a901      	add	r1, sp, #4
 8008eda:	b142      	cbz	r2, 8008eee <__ascii_mbtowc+0x1a>
 8008edc:	b14b      	cbz	r3, 8008ef2 <__ascii_mbtowc+0x1e>
 8008ede:	7813      	ldrb	r3, [r2, #0]
 8008ee0:	600b      	str	r3, [r1, #0]
 8008ee2:	7812      	ldrb	r2, [r2, #0]
 8008ee4:	1c10      	adds	r0, r2, #0
 8008ee6:	bf18      	it	ne
 8008ee8:	2001      	movne	r0, #1
 8008eea:	b002      	add	sp, #8
 8008eec:	4770      	bx	lr
 8008eee:	4610      	mov	r0, r2
 8008ef0:	e7fb      	b.n	8008eea <__ascii_mbtowc+0x16>
 8008ef2:	f06f 0001 	mvn.w	r0, #1
 8008ef6:	e7f8      	b.n	8008eea <__ascii_mbtowc+0x16>

08008ef8 <memcmp>:
 8008ef8:	b510      	push	{r4, lr}
 8008efa:	3901      	subs	r1, #1
 8008efc:	4402      	add	r2, r0
 8008efe:	4290      	cmp	r0, r2
 8008f00:	d101      	bne.n	8008f06 <memcmp+0xe>
 8008f02:	2000      	movs	r0, #0
 8008f04:	bd10      	pop	{r4, pc}
 8008f06:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008f0a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008f0e:	42a3      	cmp	r3, r4
 8008f10:	d0f5      	beq.n	8008efe <memcmp+0x6>
 8008f12:	1b18      	subs	r0, r3, r4
 8008f14:	bd10      	pop	{r4, pc}

08008f16 <memcpy>:
 8008f16:	b510      	push	{r4, lr}
 8008f18:	1e43      	subs	r3, r0, #1
 8008f1a:	440a      	add	r2, r1
 8008f1c:	4291      	cmp	r1, r2
 8008f1e:	d100      	bne.n	8008f22 <memcpy+0xc>
 8008f20:	bd10      	pop	{r4, pc}
 8008f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f2a:	e7f7      	b.n	8008f1c <memcpy+0x6>

08008f2c <memset>:
 8008f2c:	4402      	add	r2, r0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d100      	bne.n	8008f36 <memset+0xa>
 8008f34:	4770      	bx	lr
 8008f36:	f803 1b01 	strb.w	r1, [r3], #1
 8008f3a:	e7f9      	b.n	8008f30 <memset+0x4>

08008f3c <validate_structure>:
 8008f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f3e:	6801      	ldr	r1, [r0, #0]
 8008f40:	293b      	cmp	r1, #59	; 0x3b
 8008f42:	4604      	mov	r4, r0
 8008f44:	d911      	bls.n	8008f6a <validate_structure+0x2e>
 8008f46:	223c      	movs	r2, #60	; 0x3c
 8008f48:	4668      	mov	r0, sp
 8008f4a:	f000 fda2 	bl	8009a92 <div>
 8008f4e:	9a01      	ldr	r2, [sp, #4]
 8008f50:	6863      	ldr	r3, [r4, #4]
 8008f52:	9900      	ldr	r1, [sp, #0]
 8008f54:	2a00      	cmp	r2, #0
 8008f56:	440b      	add	r3, r1
 8008f58:	6063      	str	r3, [r4, #4]
 8008f5a:	bfbb      	ittet	lt
 8008f5c:	323c      	addlt	r2, #60	; 0x3c
 8008f5e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008f62:	6022      	strge	r2, [r4, #0]
 8008f64:	6022      	strlt	r2, [r4, #0]
 8008f66:	bfb8      	it	lt
 8008f68:	6063      	strlt	r3, [r4, #4]
 8008f6a:	6861      	ldr	r1, [r4, #4]
 8008f6c:	293b      	cmp	r1, #59	; 0x3b
 8008f6e:	d911      	bls.n	8008f94 <validate_structure+0x58>
 8008f70:	223c      	movs	r2, #60	; 0x3c
 8008f72:	4668      	mov	r0, sp
 8008f74:	f000 fd8d 	bl	8009a92 <div>
 8008f78:	9a01      	ldr	r2, [sp, #4]
 8008f7a:	68a3      	ldr	r3, [r4, #8]
 8008f7c:	9900      	ldr	r1, [sp, #0]
 8008f7e:	2a00      	cmp	r2, #0
 8008f80:	440b      	add	r3, r1
 8008f82:	60a3      	str	r3, [r4, #8]
 8008f84:	bfbb      	ittet	lt
 8008f86:	323c      	addlt	r2, #60	; 0x3c
 8008f88:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008f8c:	6062      	strge	r2, [r4, #4]
 8008f8e:	6062      	strlt	r2, [r4, #4]
 8008f90:	bfb8      	it	lt
 8008f92:	60a3      	strlt	r3, [r4, #8]
 8008f94:	68a1      	ldr	r1, [r4, #8]
 8008f96:	2917      	cmp	r1, #23
 8008f98:	d911      	bls.n	8008fbe <validate_structure+0x82>
 8008f9a:	2218      	movs	r2, #24
 8008f9c:	4668      	mov	r0, sp
 8008f9e:	f000 fd78 	bl	8009a92 <div>
 8008fa2:	9a01      	ldr	r2, [sp, #4]
 8008fa4:	68e3      	ldr	r3, [r4, #12]
 8008fa6:	9900      	ldr	r1, [sp, #0]
 8008fa8:	2a00      	cmp	r2, #0
 8008faa:	440b      	add	r3, r1
 8008fac:	60e3      	str	r3, [r4, #12]
 8008fae:	bfbb      	ittet	lt
 8008fb0:	3218      	addlt	r2, #24
 8008fb2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008fb6:	60a2      	strge	r2, [r4, #8]
 8008fb8:	60a2      	strlt	r2, [r4, #8]
 8008fba:	bfb8      	it	lt
 8008fbc:	60e3      	strlt	r3, [r4, #12]
 8008fbe:	6921      	ldr	r1, [r4, #16]
 8008fc0:	290b      	cmp	r1, #11
 8008fc2:	d911      	bls.n	8008fe8 <validate_structure+0xac>
 8008fc4:	220c      	movs	r2, #12
 8008fc6:	4668      	mov	r0, sp
 8008fc8:	f000 fd63 	bl	8009a92 <div>
 8008fcc:	9a01      	ldr	r2, [sp, #4]
 8008fce:	6963      	ldr	r3, [r4, #20]
 8008fd0:	9900      	ldr	r1, [sp, #0]
 8008fd2:	2a00      	cmp	r2, #0
 8008fd4:	440b      	add	r3, r1
 8008fd6:	6163      	str	r3, [r4, #20]
 8008fd8:	bfbb      	ittet	lt
 8008fda:	320c      	addlt	r2, #12
 8008fdc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008fe0:	6122      	strge	r2, [r4, #16]
 8008fe2:	6122      	strlt	r2, [r4, #16]
 8008fe4:	bfb8      	it	lt
 8008fe6:	6163      	strlt	r3, [r4, #20]
 8008fe8:	6963      	ldr	r3, [r4, #20]
 8008fea:	0799      	lsls	r1, r3, #30
 8008fec:	d143      	bne.n	8009076 <validate_structure+0x13a>
 8008fee:	2164      	movs	r1, #100	; 0x64
 8008ff0:	fb93 f2f1 	sdiv	r2, r3, r1
 8008ff4:	fb01 3212 	mls	r2, r1, r2, r3
 8008ff8:	2a00      	cmp	r2, #0
 8008ffa:	d13e      	bne.n	800907a <validate_structure+0x13e>
 8008ffc:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8009000:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009004:	fb93 f2f1 	sdiv	r2, r3, r1
 8009008:	fb01 3312 	mls	r3, r1, r2, r3
 800900c:	2b00      	cmp	r3, #0
 800900e:	bf14      	ite	ne
 8009010:	231c      	movne	r3, #28
 8009012:	231d      	moveq	r3, #29
 8009014:	68e2      	ldr	r2, [r4, #12]
 8009016:	2a00      	cmp	r2, #0
 8009018:	dd31      	ble.n	800907e <validate_structure+0x142>
 800901a:	4f37      	ldr	r7, [pc, #220]	; (80090f8 <validate_structure+0x1bc>)
 800901c:	2602      	movs	r6, #2
 800901e:	f04f 0e00 	mov.w	lr, #0
 8009022:	2064      	movs	r0, #100	; 0x64
 8009024:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8009028:	6921      	ldr	r1, [r4, #16]
 800902a:	68e2      	ldr	r2, [r4, #12]
 800902c:	2901      	cmp	r1, #1
 800902e:	d05d      	beq.n	80090ec <validate_structure+0x1b0>
 8009030:	f857 c021 	ldr.w	ip, [r7, r1, lsl #2]
 8009034:	4562      	cmp	r2, ip
 8009036:	dd2c      	ble.n	8009092 <validate_structure+0x156>
 8009038:	3101      	adds	r1, #1
 800903a:	eba2 020c 	sub.w	r2, r2, ip
 800903e:	290c      	cmp	r1, #12
 8009040:	60e2      	str	r2, [r4, #12]
 8009042:	6121      	str	r1, [r4, #16]
 8009044:	d1f0      	bne.n	8009028 <validate_structure+0xec>
 8009046:	6963      	ldr	r3, [r4, #20]
 8009048:	f8c4 e010 	str.w	lr, [r4, #16]
 800904c:	1c5a      	adds	r2, r3, #1
 800904e:	0791      	lsls	r1, r2, #30
 8009050:	6162      	str	r2, [r4, #20]
 8009052:	d147      	bne.n	80090e4 <validate_structure+0x1a8>
 8009054:	fb92 f1f0 	sdiv	r1, r2, r0
 8009058:	fb00 2211 	mls	r2, r0, r1, r2
 800905c:	2a00      	cmp	r2, #0
 800905e:	d143      	bne.n	80090e8 <validate_structure+0x1ac>
 8009060:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8009064:	fb93 f2f5 	sdiv	r2, r3, r5
 8009068:	fb05 3312 	mls	r3, r5, r2, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	bf14      	ite	ne
 8009070:	231c      	movne	r3, #28
 8009072:	231d      	moveq	r3, #29
 8009074:	e7d8      	b.n	8009028 <validate_structure+0xec>
 8009076:	231c      	movs	r3, #28
 8009078:	e7cc      	b.n	8009014 <validate_structure+0xd8>
 800907a:	231d      	movs	r3, #29
 800907c:	e7ca      	b.n	8009014 <validate_structure+0xd8>
 800907e:	4f1e      	ldr	r7, [pc, #120]	; (80090f8 <validate_structure+0x1bc>)
 8009080:	260b      	movs	r6, #11
 8009082:	2064      	movs	r0, #100	; 0x64
 8009084:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8009088:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800908c:	f1be 0f00 	cmp.w	lr, #0
 8009090:	dd01      	ble.n	8009096 <validate_structure+0x15a>
 8009092:	b003      	add	sp, #12
 8009094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009096:	6921      	ldr	r1, [r4, #16]
 8009098:	3901      	subs	r1, #1
 800909a:	6121      	str	r1, [r4, #16]
 800909c:	3101      	adds	r1, #1
 800909e:	d114      	bne.n	80090ca <validate_structure+0x18e>
 80090a0:	6963      	ldr	r3, [r4, #20]
 80090a2:	6126      	str	r6, [r4, #16]
 80090a4:	1e59      	subs	r1, r3, #1
 80090a6:	078a      	lsls	r2, r1, #30
 80090a8:	6161      	str	r1, [r4, #20]
 80090aa:	d117      	bne.n	80090dc <validate_structure+0x1a0>
 80090ac:	fb91 f2f0 	sdiv	r2, r1, r0
 80090b0:	fb00 1112 	mls	r1, r0, r2, r1
 80090b4:	b9a1      	cbnz	r1, 80090e0 <validate_structure+0x1a4>
 80090b6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80090ba:	fb93 f2f5 	sdiv	r2, r3, r5
 80090be:	fb05 3312 	mls	r3, r5, r2, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	bf14      	ite	ne
 80090c6:	231c      	movne	r3, #28
 80090c8:	231d      	moveq	r3, #29
 80090ca:	6922      	ldr	r2, [r4, #16]
 80090cc:	2a01      	cmp	r2, #1
 80090ce:	bf14      	ite	ne
 80090d0:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80090d4:	461a      	moveq	r2, r3
 80090d6:	4472      	add	r2, lr
 80090d8:	60e2      	str	r2, [r4, #12]
 80090da:	e7d5      	b.n	8009088 <validate_structure+0x14c>
 80090dc:	231c      	movs	r3, #28
 80090de:	e7f4      	b.n	80090ca <validate_structure+0x18e>
 80090e0:	231d      	movs	r3, #29
 80090e2:	e7f2      	b.n	80090ca <validate_structure+0x18e>
 80090e4:	231c      	movs	r3, #28
 80090e6:	e79f      	b.n	8009028 <validate_structure+0xec>
 80090e8:	231d      	movs	r3, #29
 80090ea:	e79d      	b.n	8009028 <validate_structure+0xec>
 80090ec:	4293      	cmp	r3, r2
 80090ee:	dad0      	bge.n	8009092 <validate_structure+0x156>
 80090f0:	1ad2      	subs	r2, r2, r3
 80090f2:	60e2      	str	r2, [r4, #12]
 80090f4:	6126      	str	r6, [r4, #16]
 80090f6:	e797      	b.n	8009028 <validate_structure+0xec>
 80090f8:	0800b040 	.word	0x0800b040

080090fc <mktime>:
 80090fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009100:	4681      	mov	r9, r0
 8009102:	f000 fd23 	bl	8009b4c <__gettzinfo>
 8009106:	4680      	mov	r8, r0
 8009108:	4648      	mov	r0, r9
 800910a:	f7ff ff17 	bl	8008f3c <validate_structure>
 800910e:	e899 0081 	ldmia.w	r9, {r0, r7}
 8009112:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009116:	4ab4      	ldr	r2, [pc, #720]	; (80093e8 <mktime+0x2ec>)
 8009118:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800911c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009120:	253c      	movs	r5, #60	; 0x3c
 8009122:	fb05 0707 	mla	r7, r5, r7, r0
 8009126:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800912a:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 800912e:	3c01      	subs	r4, #1
 8009130:	2b01      	cmp	r3, #1
 8009132:	fb05 7000 	mla	r0, r5, r0, r7
 8009136:	4414      	add	r4, r2
 8009138:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800913c:	dd11      	ble.n	8009162 <mktime+0x66>
 800913e:	0799      	lsls	r1, r3, #30
 8009140:	d10f      	bne.n	8009162 <mktime+0x66>
 8009142:	2164      	movs	r1, #100	; 0x64
 8009144:	fb93 f2f1 	sdiv	r2, r3, r1
 8009148:	fb01 3212 	mls	r2, r1, r2, r3
 800914c:	b942      	cbnz	r2, 8009160 <mktime+0x64>
 800914e:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8009152:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009156:	fb95 f2f1 	sdiv	r2, r5, r1
 800915a:	fb01 5212 	mls	r2, r1, r2, r5
 800915e:	b902      	cbnz	r2, 8009162 <mktime+0x66>
 8009160:	3401      	adds	r4, #1
 8009162:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 8009166:	3210      	adds	r2, #16
 8009168:	f644 6120 	movw	r1, #20000	; 0x4e20
 800916c:	428a      	cmp	r2, r1
 800916e:	f8c9 401c 	str.w	r4, [r9, #28]
 8009172:	f200 812d 	bhi.w	80093d0 <mktime+0x2d4>
 8009176:	2b46      	cmp	r3, #70	; 0x46
 8009178:	dd70      	ble.n	800925c <mktime+0x160>
 800917a:	2546      	movs	r5, #70	; 0x46
 800917c:	f240 176d 	movw	r7, #365	; 0x16d
 8009180:	2164      	movs	r1, #100	; 0x64
 8009182:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8009186:	07aa      	lsls	r2, r5, #30
 8009188:	d162      	bne.n	8009250 <mktime+0x154>
 800918a:	fb95 f2f1 	sdiv	r2, r5, r1
 800918e:	fb01 5212 	mls	r2, r1, r2, r5
 8009192:	2a00      	cmp	r2, #0
 8009194:	d15f      	bne.n	8009256 <mktime+0x15a>
 8009196:	f205 7e6c 	addw	lr, r5, #1900	; 0x76c
 800919a:	fb9e f2f6 	sdiv	r2, lr, r6
 800919e:	fb06 e212 	mls	r2, r6, r2, lr
 80091a2:	2a00      	cmp	r2, #0
 80091a4:	bf14      	ite	ne
 80091a6:	463a      	movne	r2, r7
 80091a8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80091ac:	3501      	adds	r5, #1
 80091ae:	42ab      	cmp	r3, r5
 80091b0:	4414      	add	r4, r2
 80091b2:	d1e8      	bne.n	8009186 <mktime+0x8a>
 80091b4:	4f8d      	ldr	r7, [pc, #564]	; (80093ec <mktime+0x2f0>)
 80091b6:	fb07 0704 	mla	r7, r7, r4, r0
 80091ba:	f000 fad3 	bl	8009764 <__tz_lock>
 80091be:	f000 fad3 	bl	8009768 <_tzset_unlocked>
 80091c2:	4b8b      	ldr	r3, [pc, #556]	; (80093f0 <mktime+0x2f4>)
 80091c4:	681e      	ldr	r6, [r3, #0]
 80091c6:	2e00      	cmp	r6, #0
 80091c8:	f000 810a 	beq.w	80093e0 <mktime+0x2e4>
 80091cc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80091d0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	bfa8      	it	ge
 80091d8:	2301      	movge	r3, #1
 80091da:	469a      	mov	sl, r3
 80091dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80091e0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80091e4:	4298      	cmp	r0, r3
 80091e6:	d17c      	bne.n	80092e2 <mktime+0x1e6>
 80091e8:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 80091ec:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80091f0:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 80091f4:	f8d8 101c 	ldr.w	r1, [r8, #28]
 80091f8:	1ad6      	subs	r6, r2, r3
 80091fa:	42b7      	cmp	r7, r6
 80091fc:	eba1 0100 	sub.w	r1, r1, r0
 8009200:	da76      	bge.n	80092f0 <mktime+0x1f4>
 8009202:	f8d8 2000 	ldr.w	r2, [r8]
 8009206:	2a00      	cmp	r2, #0
 8009208:	d076      	beq.n	80092f8 <mktime+0x1fc>
 800920a:	428f      	cmp	r7, r1
 800920c:	f2c0 80e3 	blt.w	80093d6 <mktime+0x2da>
 8009210:	42b7      	cmp	r7, r6
 8009212:	bfac      	ite	ge
 8009214:	2600      	movge	r6, #0
 8009216:	2601      	movlt	r6, #1
 8009218:	f1ba 0f00 	cmp.w	sl, #0
 800921c:	da72      	bge.n	8009304 <mktime+0x208>
 800921e:	2e01      	cmp	r6, #1
 8009220:	f040 80de 	bne.w	80093e0 <mktime+0x2e4>
 8009224:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 8009228:	2601      	movs	r6, #1
 800922a:	443d      	add	r5, r7
 800922c:	f000 fa9b 	bl	8009766 <__tz_unlock>
 8009230:	3404      	adds	r4, #4
 8009232:	2307      	movs	r3, #7
 8009234:	fb94 f3f3 	sdiv	r3, r4, r3
 8009238:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800923c:	1ae4      	subs	r4, r4, r3
 800923e:	bf48      	it	mi
 8009240:	3407      	addmi	r4, #7
 8009242:	f8c9 6020 	str.w	r6, [r9, #32]
 8009246:	f8c9 4018 	str.w	r4, [r9, #24]
 800924a:	4628      	mov	r0, r5
 800924c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009250:	f240 126d 	movw	r2, #365	; 0x16d
 8009254:	e7aa      	b.n	80091ac <mktime+0xb0>
 8009256:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800925a:	e7a7      	b.n	80091ac <mktime+0xb0>
 800925c:	d01e      	beq.n	800929c <mktime+0x1a0>
 800925e:	2245      	movs	r2, #69	; 0x45
 8009260:	f240 176d 	movw	r7, #365	; 0x16d
 8009264:	2564      	movs	r5, #100	; 0x64
 8009266:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800926a:	429a      	cmp	r2, r3
 800926c:	dc18      	bgt.n	80092a0 <mktime+0x1a4>
 800926e:	079d      	lsls	r5, r3, #30
 8009270:	d131      	bne.n	80092d6 <mktime+0x1da>
 8009272:	2164      	movs	r1, #100	; 0x64
 8009274:	fb93 f2f1 	sdiv	r2, r3, r1
 8009278:	fb01 3212 	mls	r2, r1, r2, r3
 800927c:	bb72      	cbnz	r2, 80092dc <mktime+0x1e0>
 800927e:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8009282:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009286:	fb95 f2f1 	sdiv	r2, r5, r1
 800928a:	fb01 5212 	mls	r2, r1, r2, r5
 800928e:	2a00      	cmp	r2, #0
 8009290:	f240 126d 	movw	r2, #365	; 0x16d
 8009294:	bf08      	it	eq
 8009296:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800929a:	1aa4      	subs	r4, r4, r2
 800929c:	461d      	mov	r5, r3
 800929e:	e789      	b.n	80091b4 <mktime+0xb8>
 80092a0:	0791      	lsls	r1, r2, #30
 80092a2:	d112      	bne.n	80092ca <mktime+0x1ce>
 80092a4:	fb92 f1f5 	sdiv	r1, r2, r5
 80092a8:	fb05 2111 	mls	r1, r5, r1, r2
 80092ac:	b981      	cbnz	r1, 80092d0 <mktime+0x1d4>
 80092ae:	f202 7e6c 	addw	lr, r2, #1900	; 0x76c
 80092b2:	fb9e f1f6 	sdiv	r1, lr, r6
 80092b6:	fb06 e111 	mls	r1, r6, r1, lr
 80092ba:	2900      	cmp	r1, #0
 80092bc:	bf14      	ite	ne
 80092be:	4639      	movne	r1, r7
 80092c0:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
 80092c4:	1a64      	subs	r4, r4, r1
 80092c6:	3a01      	subs	r2, #1
 80092c8:	e7cf      	b.n	800926a <mktime+0x16e>
 80092ca:	f240 116d 	movw	r1, #365	; 0x16d
 80092ce:	e7f9      	b.n	80092c4 <mktime+0x1c8>
 80092d0:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80092d4:	e7f6      	b.n	80092c4 <mktime+0x1c8>
 80092d6:	f240 126d 	movw	r2, #365	; 0x16d
 80092da:	e7de      	b.n	800929a <mktime+0x19e>
 80092dc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80092e0:	e7db      	b.n	800929a <mktime+0x19e>
 80092e2:	f000 f997 	bl	8009614 <__tzcalc_limits>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	f47f af7e 	bne.w	80091e8 <mktime+0xec>
 80092ec:	4656      	mov	r6, sl
 80092ee:	e796      	b.n	800921e <mktime+0x122>
 80092f0:	1a12      	subs	r2, r2, r0
 80092f2:	4297      	cmp	r7, r2
 80092f4:	dbfa      	blt.n	80092ec <mktime+0x1f0>
 80092f6:	e784      	b.n	8009202 <mktime+0x106>
 80092f8:	428f      	cmp	r7, r1
 80092fa:	db89      	blt.n	8009210 <mktime+0x114>
 80092fc:	f1ba 0f00 	cmp.w	sl, #0
 8009300:	db90      	blt.n	8009224 <mktime+0x128>
 8009302:	2601      	movs	r6, #1
 8009304:	ea8a 0a06 	eor.w	sl, sl, r6
 8009308:	f1ba 0f01 	cmp.w	sl, #1
 800930c:	d187      	bne.n	800921e <mktime+0x122>
 800930e:	1a1b      	subs	r3, r3, r0
 8009310:	b906      	cbnz	r6, 8009314 <mktime+0x218>
 8009312:	425b      	negs	r3, r3
 8009314:	f8d9 2000 	ldr.w	r2, [r9]
 8009318:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800931c:	441a      	add	r2, r3
 800931e:	f8c9 2000 	str.w	r2, [r9]
 8009322:	4648      	mov	r0, r9
 8009324:	441f      	add	r7, r3
 8009326:	f7ff fe09 	bl	8008f3c <validate_structure>
 800932a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800932e:	ebb3 030a 	subs.w	r3, r3, sl
 8009332:	f43f af74 	beq.w	800921e <mktime+0x122>
 8009336:	2b01      	cmp	r3, #1
 8009338:	dc21      	bgt.n	800937e <mktime+0x282>
 800933a:	1c98      	adds	r0, r3, #2
 800933c:	bfd8      	it	le
 800933e:	2301      	movle	r3, #1
 8009340:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009344:	441c      	add	r4, r3
 8009346:	189b      	adds	r3, r3, r2
 8009348:	d522      	bpl.n	8009390 <mktime+0x294>
 800934a:	1e6a      	subs	r2, r5, #1
 800934c:	0791      	lsls	r1, r2, #30
 800934e:	d119      	bne.n	8009384 <mktime+0x288>
 8009350:	2164      	movs	r1, #100	; 0x64
 8009352:	fb92 f3f1 	sdiv	r3, r2, r1
 8009356:	fb01 2313 	mls	r3, r1, r3, r2
 800935a:	b9b3      	cbnz	r3, 800938a <mktime+0x28e>
 800935c:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 8009360:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009364:	fb95 f3f2 	sdiv	r3, r5, r2
 8009368:	fb02 5513 	mls	r5, r2, r3, r5
 800936c:	2d00      	cmp	r5, #0
 800936e:	f240 136d 	movw	r3, #365	; 0x16d
 8009372:	bf18      	it	ne
 8009374:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8009378:	f8c9 301c 	str.w	r3, [r9, #28]
 800937c:	e74f      	b.n	800921e <mktime+0x122>
 800937e:	f04f 33ff 	mov.w	r3, #4294967295
 8009382:	e7dd      	b.n	8009340 <mktime+0x244>
 8009384:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8009388:	e7f6      	b.n	8009378 <mktime+0x27c>
 800938a:	f240 136d 	movw	r3, #365	; 0x16d
 800938e:	e7f3      	b.n	8009378 <mktime+0x27c>
 8009390:	07aa      	lsls	r2, r5, #30
 8009392:	d117      	bne.n	80093c4 <mktime+0x2c8>
 8009394:	2164      	movs	r1, #100	; 0x64
 8009396:	fb95 f2f1 	sdiv	r2, r5, r1
 800939a:	fb01 5212 	mls	r2, r1, r2, r5
 800939e:	b9a2      	cbnz	r2, 80093ca <mktime+0x2ce>
 80093a0:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 80093a4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80093a8:	fb95 f2f1 	sdiv	r2, r5, r1
 80093ac:	fb01 5512 	mls	r5, r1, r2, r5
 80093b0:	2d00      	cmp	r5, #0
 80093b2:	f240 126d 	movw	r2, #365	; 0x16d
 80093b6:	bf08      	it	eq
 80093b8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80093bc:	429a      	cmp	r2, r3
 80093be:	bfd8      	it	le
 80093c0:	1a9b      	suble	r3, r3, r2
 80093c2:	e7d9      	b.n	8009378 <mktime+0x27c>
 80093c4:	f240 126d 	movw	r2, #365	; 0x16d
 80093c8:	e7f8      	b.n	80093bc <mktime+0x2c0>
 80093ca:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80093ce:	e7f5      	b.n	80093bc <mktime+0x2c0>
 80093d0:	f04f 35ff 	mov.w	r5, #4294967295
 80093d4:	e739      	b.n	800924a <mktime+0x14e>
 80093d6:	f1ba 0f00 	cmp.w	sl, #0
 80093da:	f04f 0600 	mov.w	r6, #0
 80093de:	da91      	bge.n	8009304 <mktime+0x208>
 80093e0:	f8d8 5020 	ldr.w	r5, [r8, #32]
 80093e4:	443d      	add	r5, r7
 80093e6:	e721      	b.n	800922c <mktime+0x130>
 80093e8:	0800b070 	.word	0x0800b070
 80093ec:	00015180 	.word	0x00015180
 80093f0:	20008b98 	.word	0x20008b98

080093f4 <siprintf>:
 80093f4:	b40e      	push	{r1, r2, r3}
 80093f6:	b500      	push	{lr}
 80093f8:	b09c      	sub	sp, #112	; 0x70
 80093fa:	f44f 7102 	mov.w	r1, #520	; 0x208
 80093fe:	ab1d      	add	r3, sp, #116	; 0x74
 8009400:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009404:	9002      	str	r0, [sp, #8]
 8009406:	9006      	str	r0, [sp, #24]
 8009408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800940c:	480a      	ldr	r0, [pc, #40]	; (8009438 <siprintf+0x44>)
 800940e:	9104      	str	r1, [sp, #16]
 8009410:	9107      	str	r1, [sp, #28]
 8009412:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009416:	f853 2b04 	ldr.w	r2, [r3], #4
 800941a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800941e:	6800      	ldr	r0, [r0, #0]
 8009420:	9301      	str	r3, [sp, #4]
 8009422:	a902      	add	r1, sp, #8
 8009424:	f000 fd40 	bl	8009ea8 <_svfiprintf_r>
 8009428:	9b02      	ldr	r3, [sp, #8]
 800942a:	2200      	movs	r2, #0
 800942c:	701a      	strb	r2, [r3, #0]
 800942e:	b01c      	add	sp, #112	; 0x70
 8009430:	f85d eb04 	ldr.w	lr, [sp], #4
 8009434:	b003      	add	sp, #12
 8009436:	4770      	bx	lr
 8009438:	20000010 	.word	0x20000010

0800943c <strchr>:
 800943c:	b2c9      	uxtb	r1, r1
 800943e:	4603      	mov	r3, r0
 8009440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009444:	b11a      	cbz	r2, 800944e <strchr+0x12>
 8009446:	4291      	cmp	r1, r2
 8009448:	d1f9      	bne.n	800943e <strchr+0x2>
 800944a:	4618      	mov	r0, r3
 800944c:	4770      	bx	lr
 800944e:	2900      	cmp	r1, #0
 8009450:	bf0c      	ite	eq
 8009452:	4618      	moveq	r0, r3
 8009454:	2000      	movne	r0, #0
 8009456:	4770      	bx	lr

08009458 <strcpy>:
 8009458:	4603      	mov	r3, r0
 800945a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800945e:	f803 2b01 	strb.w	r2, [r3], #1
 8009462:	2a00      	cmp	r2, #0
 8009464:	d1f9      	bne.n	800945a <strcpy+0x2>
 8009466:	4770      	bx	lr

08009468 <strncmp>:
 8009468:	b510      	push	{r4, lr}
 800946a:	b16a      	cbz	r2, 8009488 <strncmp+0x20>
 800946c:	3901      	subs	r1, #1
 800946e:	1884      	adds	r4, r0, r2
 8009470:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009474:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009478:	4293      	cmp	r3, r2
 800947a:	d103      	bne.n	8009484 <strncmp+0x1c>
 800947c:	42a0      	cmp	r0, r4
 800947e:	d001      	beq.n	8009484 <strncmp+0x1c>
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1f5      	bne.n	8009470 <strncmp+0x8>
 8009484:	1a98      	subs	r0, r3, r2
 8009486:	bd10      	pop	{r4, pc}
 8009488:	4610      	mov	r0, r2
 800948a:	bd10      	pop	{r4, pc}

0800948c <strstr>:
 800948c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800948e:	7803      	ldrb	r3, [r0, #0]
 8009490:	b133      	cbz	r3, 80094a0 <strstr+0x14>
 8009492:	4603      	mov	r3, r0
 8009494:	4618      	mov	r0, r3
 8009496:	1c5e      	adds	r6, r3, #1
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	b933      	cbnz	r3, 80094aa <strstr+0x1e>
 800949c:	4618      	mov	r0, r3
 800949e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094a0:	780b      	ldrb	r3, [r1, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	bf18      	it	ne
 80094a6:	2000      	movne	r0, #0
 80094a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094aa:	1e4d      	subs	r5, r1, #1
 80094ac:	1e44      	subs	r4, r0, #1
 80094ae:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80094b2:	2a00      	cmp	r2, #0
 80094b4:	d0f3      	beq.n	800949e <strstr+0x12>
 80094b6:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80094ba:	4297      	cmp	r7, r2
 80094bc:	4633      	mov	r3, r6
 80094be:	d0f6      	beq.n	80094ae <strstr+0x22>
 80094c0:	e7e8      	b.n	8009494 <strstr+0x8>

080094c2 <_strtol_l.isra.0>:
 80094c2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c6:	4680      	mov	r8, r0
 80094c8:	4689      	mov	r9, r1
 80094ca:	4692      	mov	sl, r2
 80094cc:	461f      	mov	r7, r3
 80094ce:	468b      	mov	fp, r1
 80094d0:	465d      	mov	r5, fp
 80094d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80094d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094d8:	f7ff fcea 	bl	8008eb0 <__locale_ctype_ptr_l>
 80094dc:	4420      	add	r0, r4
 80094de:	7846      	ldrb	r6, [r0, #1]
 80094e0:	f016 0608 	ands.w	r6, r6, #8
 80094e4:	d10b      	bne.n	80094fe <_strtol_l.isra.0+0x3c>
 80094e6:	2c2d      	cmp	r4, #45	; 0x2d
 80094e8:	d10b      	bne.n	8009502 <_strtol_l.isra.0+0x40>
 80094ea:	782c      	ldrb	r4, [r5, #0]
 80094ec:	2601      	movs	r6, #1
 80094ee:	f10b 0502 	add.w	r5, fp, #2
 80094f2:	b167      	cbz	r7, 800950e <_strtol_l.isra.0+0x4c>
 80094f4:	2f10      	cmp	r7, #16
 80094f6:	d114      	bne.n	8009522 <_strtol_l.isra.0+0x60>
 80094f8:	2c30      	cmp	r4, #48	; 0x30
 80094fa:	d00a      	beq.n	8009512 <_strtol_l.isra.0+0x50>
 80094fc:	e011      	b.n	8009522 <_strtol_l.isra.0+0x60>
 80094fe:	46ab      	mov	fp, r5
 8009500:	e7e6      	b.n	80094d0 <_strtol_l.isra.0+0xe>
 8009502:	2c2b      	cmp	r4, #43	; 0x2b
 8009504:	bf04      	itt	eq
 8009506:	782c      	ldrbeq	r4, [r5, #0]
 8009508:	f10b 0502 	addeq.w	r5, fp, #2
 800950c:	e7f1      	b.n	80094f2 <_strtol_l.isra.0+0x30>
 800950e:	2c30      	cmp	r4, #48	; 0x30
 8009510:	d127      	bne.n	8009562 <_strtol_l.isra.0+0xa0>
 8009512:	782b      	ldrb	r3, [r5, #0]
 8009514:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009518:	2b58      	cmp	r3, #88	; 0x58
 800951a:	d14b      	bne.n	80095b4 <_strtol_l.isra.0+0xf2>
 800951c:	786c      	ldrb	r4, [r5, #1]
 800951e:	2710      	movs	r7, #16
 8009520:	3502      	adds	r5, #2
 8009522:	2e00      	cmp	r6, #0
 8009524:	bf0c      	ite	eq
 8009526:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800952a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800952e:	2200      	movs	r2, #0
 8009530:	fbb1 fef7 	udiv	lr, r1, r7
 8009534:	4610      	mov	r0, r2
 8009536:	fb07 1c1e 	mls	ip, r7, lr, r1
 800953a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800953e:	2b09      	cmp	r3, #9
 8009540:	d811      	bhi.n	8009566 <_strtol_l.isra.0+0xa4>
 8009542:	461c      	mov	r4, r3
 8009544:	42a7      	cmp	r7, r4
 8009546:	dd1d      	ble.n	8009584 <_strtol_l.isra.0+0xc2>
 8009548:	1c53      	adds	r3, r2, #1
 800954a:	d007      	beq.n	800955c <_strtol_l.isra.0+0x9a>
 800954c:	4586      	cmp	lr, r0
 800954e:	d316      	bcc.n	800957e <_strtol_l.isra.0+0xbc>
 8009550:	d101      	bne.n	8009556 <_strtol_l.isra.0+0x94>
 8009552:	45a4      	cmp	ip, r4
 8009554:	db13      	blt.n	800957e <_strtol_l.isra.0+0xbc>
 8009556:	fb00 4007 	mla	r0, r0, r7, r4
 800955a:	2201      	movs	r2, #1
 800955c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009560:	e7eb      	b.n	800953a <_strtol_l.isra.0+0x78>
 8009562:	270a      	movs	r7, #10
 8009564:	e7dd      	b.n	8009522 <_strtol_l.isra.0+0x60>
 8009566:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800956a:	2b19      	cmp	r3, #25
 800956c:	d801      	bhi.n	8009572 <_strtol_l.isra.0+0xb0>
 800956e:	3c37      	subs	r4, #55	; 0x37
 8009570:	e7e8      	b.n	8009544 <_strtol_l.isra.0+0x82>
 8009572:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009576:	2b19      	cmp	r3, #25
 8009578:	d804      	bhi.n	8009584 <_strtol_l.isra.0+0xc2>
 800957a:	3c57      	subs	r4, #87	; 0x57
 800957c:	e7e2      	b.n	8009544 <_strtol_l.isra.0+0x82>
 800957e:	f04f 32ff 	mov.w	r2, #4294967295
 8009582:	e7eb      	b.n	800955c <_strtol_l.isra.0+0x9a>
 8009584:	1c53      	adds	r3, r2, #1
 8009586:	d108      	bne.n	800959a <_strtol_l.isra.0+0xd8>
 8009588:	2322      	movs	r3, #34	; 0x22
 800958a:	f8c8 3000 	str.w	r3, [r8]
 800958e:	4608      	mov	r0, r1
 8009590:	f1ba 0f00 	cmp.w	sl, #0
 8009594:	d107      	bne.n	80095a6 <_strtol_l.isra.0+0xe4>
 8009596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959a:	b106      	cbz	r6, 800959e <_strtol_l.isra.0+0xdc>
 800959c:	4240      	negs	r0, r0
 800959e:	f1ba 0f00 	cmp.w	sl, #0
 80095a2:	d00c      	beq.n	80095be <_strtol_l.isra.0+0xfc>
 80095a4:	b122      	cbz	r2, 80095b0 <_strtol_l.isra.0+0xee>
 80095a6:	3d01      	subs	r5, #1
 80095a8:	f8ca 5000 	str.w	r5, [sl]
 80095ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b0:	464d      	mov	r5, r9
 80095b2:	e7f9      	b.n	80095a8 <_strtol_l.isra.0+0xe6>
 80095b4:	2430      	movs	r4, #48	; 0x30
 80095b6:	2f00      	cmp	r7, #0
 80095b8:	d1b3      	bne.n	8009522 <_strtol_l.isra.0+0x60>
 80095ba:	2708      	movs	r7, #8
 80095bc:	e7b1      	b.n	8009522 <_strtol_l.isra.0+0x60>
 80095be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080095c4 <_strtol_r>:
 80095c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095c6:	4c06      	ldr	r4, [pc, #24]	; (80095e0 <_strtol_r+0x1c>)
 80095c8:	4d06      	ldr	r5, [pc, #24]	; (80095e4 <_strtol_r+0x20>)
 80095ca:	6824      	ldr	r4, [r4, #0]
 80095cc:	6a24      	ldr	r4, [r4, #32]
 80095ce:	2c00      	cmp	r4, #0
 80095d0:	bf08      	it	eq
 80095d2:	462c      	moveq	r4, r5
 80095d4:	9400      	str	r4, [sp, #0]
 80095d6:	f7ff ff74 	bl	80094c2 <_strtol_l.isra.0>
 80095da:	b003      	add	sp, #12
 80095dc:	bd30      	pop	{r4, r5, pc}
 80095de:	bf00      	nop
 80095e0:	20000010 	.word	0x20000010
 80095e4:	20000074 	.word	0x20000074

080095e8 <strtol>:
 80095e8:	4b08      	ldr	r3, [pc, #32]	; (800960c <strtol+0x24>)
 80095ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095ec:	681c      	ldr	r4, [r3, #0]
 80095ee:	4d08      	ldr	r5, [pc, #32]	; (8009610 <strtol+0x28>)
 80095f0:	6a23      	ldr	r3, [r4, #32]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	bf08      	it	eq
 80095f6:	462b      	moveq	r3, r5
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	4613      	mov	r3, r2
 80095fc:	460a      	mov	r2, r1
 80095fe:	4601      	mov	r1, r0
 8009600:	4620      	mov	r0, r4
 8009602:	f7ff ff5e 	bl	80094c2 <_strtol_l.isra.0>
 8009606:	b003      	add	sp, #12
 8009608:	bd30      	pop	{r4, r5, pc}
 800960a:	bf00      	nop
 800960c:	20000010 	.word	0x20000010
 8009610:	20000074 	.word	0x20000074

08009614 <__tzcalc_limits>:
 8009614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009618:	4604      	mov	r4, r0
 800961a:	f000 fa97 	bl	8009b4c <__gettzinfo>
 800961e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8009622:	429c      	cmp	r4, r3
 8009624:	f340 8098 	ble.w	8009758 <__tzcalc_limits+0x144>
 8009628:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800962c:	18e3      	adds	r3, r4, r3
 800962e:	109b      	asrs	r3, r3, #2
 8009630:	f240 126d 	movw	r2, #365	; 0x16d
 8009634:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 8009638:	fb02 3505 	mla	r5, r2, r5, r3
 800963c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8009640:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 8009644:	fb93 f3f2 	sdiv	r3, r3, r2
 8009648:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800964c:	441d      	add	r5, r3
 800964e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009652:	18a2      	adds	r2, r4, r2
 8009654:	fb94 f7f3 	sdiv	r7, r4, r3
 8009658:	fb92 f2f3 	sdiv	r2, r2, r3
 800965c:	fb03 4717 	mls	r7, r3, r7, r4
 8009660:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8009664:	4415      	add	r5, r2
 8009666:	fab7 fe87 	clz	lr, r7
 800966a:	2264      	movs	r2, #100	; 0x64
 800966c:	9301      	str	r3, [sp, #4]
 800966e:	f004 0303 	and.w	r3, r4, #3
 8009672:	fb94 f6f2 	sdiv	r6, r4, r2
 8009676:	6044      	str	r4, [r0, #4]
 8009678:	fb02 4616 	mls	r6, r2, r6, r4
 800967c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8009680:	4601      	mov	r1, r0
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 8009688:	7a0b      	ldrb	r3, [r1, #8]
 800968a:	2b4a      	cmp	r3, #74	; 0x4a
 800968c:	d123      	bne.n	80096d6 <__tzcalc_limits+0xc2>
 800968e:	694c      	ldr	r4, [r1, #20]
 8009690:	9a00      	ldr	r2, [sp, #0]
 8009692:	192b      	adds	r3, r5, r4
 8009694:	b902      	cbnz	r2, 8009698 <__tzcalc_limits+0x84>
 8009696:	b906      	cbnz	r6, 800969a <__tzcalc_limits+0x86>
 8009698:	b9df      	cbnz	r7, 80096d2 <__tzcalc_limits+0xbe>
 800969a:	2c3b      	cmp	r4, #59	; 0x3b
 800969c:	bfd4      	ite	le
 800969e:	2400      	movle	r4, #0
 80096a0:	2401      	movgt	r4, #1
 80096a2:	441c      	add	r4, r3
 80096a4:	3c01      	subs	r4, #1
 80096a6:	4b2d      	ldr	r3, [pc, #180]	; (800975c <__tzcalc_limits+0x148>)
 80096a8:	698a      	ldr	r2, [r1, #24]
 80096aa:	fb03 2404 	mla	r4, r3, r4, r2
 80096ae:	6a0b      	ldr	r3, [r1, #32]
 80096b0:	441c      	add	r4, r3
 80096b2:	f841 4f1c 	str.w	r4, [r1, #28]!
 80096b6:	9b01      	ldr	r3, [sp, #4]
 80096b8:	428b      	cmp	r3, r1
 80096ba:	d1e5      	bne.n	8009688 <__tzcalc_limits+0x74>
 80096bc:	69c3      	ldr	r3, [r0, #28]
 80096be:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80096c0:	4293      	cmp	r3, r2
 80096c2:	bfac      	ite	ge
 80096c4:	2300      	movge	r3, #0
 80096c6:	2301      	movlt	r3, #1
 80096c8:	6003      	str	r3, [r0, #0]
 80096ca:	2001      	movs	r0, #1
 80096cc:	b003      	add	sp, #12
 80096ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d2:	2400      	movs	r4, #0
 80096d4:	e7e5      	b.n	80096a2 <__tzcalc_limits+0x8e>
 80096d6:	2b44      	cmp	r3, #68	; 0x44
 80096d8:	d102      	bne.n	80096e0 <__tzcalc_limits+0xcc>
 80096da:	694b      	ldr	r3, [r1, #20]
 80096dc:	18ec      	adds	r4, r5, r3
 80096de:	e7e2      	b.n	80096a6 <__tzcalc_limits+0x92>
 80096e0:	9b00      	ldr	r3, [sp, #0]
 80096e2:	bb7b      	cbnz	r3, 8009744 <__tzcalc_limits+0x130>
 80096e4:	2e00      	cmp	r6, #0
 80096e6:	bf0c      	ite	eq
 80096e8:	46f0      	moveq	r8, lr
 80096ea:	f04f 0801 	movne.w	r8, #1
 80096ee:	4b1c      	ldr	r3, [pc, #112]	; (8009760 <__tzcalc_limits+0x14c>)
 80096f0:	68cc      	ldr	r4, [r1, #12]
 80096f2:	2230      	movs	r2, #48	; 0x30
 80096f4:	fb02 3808 	mla	r8, r2, r8, r3
 80096f8:	f1a8 0a04 	sub.w	sl, r8, #4
 80096fc:	462b      	mov	r3, r5
 80096fe:	f04f 0901 	mov.w	r9, #1
 8009702:	45a1      	cmp	r9, r4
 8009704:	db20      	blt.n	8009748 <__tzcalc_limits+0x134>
 8009706:	2c01      	cmp	r4, #1
 8009708:	bfb8      	it	lt
 800970a:	2401      	movlt	r4, #1
 800970c:	46a1      	mov	r9, r4
 800970e:	f103 0b04 	add.w	fp, r3, #4
 8009712:	2207      	movs	r2, #7
 8009714:	694c      	ldr	r4, [r1, #20]
 8009716:	fb9b faf2 	sdiv	sl, fp, r2
 800971a:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800971e:	ebab 0a0a 	sub.w	sl, fp, sl
 8009722:	ebb4 0a0a 	subs.w	sl, r4, sl
 8009726:	690c      	ldr	r4, [r1, #16]
 8009728:	44e1      	add	r9, ip
 800972a:	f104 34ff 	add.w	r4, r4, #4294967295
 800972e:	bf48      	it	mi
 8009730:	4492      	addmi	sl, r2
 8009732:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8009736:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 800973a:	4454      	add	r4, sl
 800973c:	4544      	cmp	r4, r8
 800973e:	da09      	bge.n	8009754 <__tzcalc_limits+0x140>
 8009740:	441c      	add	r4, r3
 8009742:	e7b0      	b.n	80096a6 <__tzcalc_limits+0x92>
 8009744:	46f0      	mov	r8, lr
 8009746:	e7d2      	b.n	80096ee <__tzcalc_limits+0xda>
 8009748:	f85a bf04 	ldr.w	fp, [sl, #4]!
 800974c:	f109 0901 	add.w	r9, r9, #1
 8009750:	445b      	add	r3, fp
 8009752:	e7d6      	b.n	8009702 <__tzcalc_limits+0xee>
 8009754:	3c07      	subs	r4, #7
 8009756:	e7f1      	b.n	800973c <__tzcalc_limits+0x128>
 8009758:	2000      	movs	r0, #0
 800975a:	e7b7      	b.n	80096cc <__tzcalc_limits+0xb8>
 800975c:	00015180 	.word	0x00015180
 8009760:	0800b0a0 	.word	0x0800b0a0

08009764 <__tz_lock>:
 8009764:	4770      	bx	lr

08009766 <__tz_unlock>:
 8009766:	4770      	bx	lr

08009768 <_tzset_unlocked>:
 8009768:	4b01      	ldr	r3, [pc, #4]	; (8009770 <_tzset_unlocked+0x8>)
 800976a:	6818      	ldr	r0, [r3, #0]
 800976c:	f000 b802 	b.w	8009774 <_tzset_unlocked_r>
 8009770:	20000010 	.word	0x20000010

08009774 <_tzset_unlocked_r>:
 8009774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009778:	b08d      	sub	sp, #52	; 0x34
 800977a:	4607      	mov	r7, r0
 800977c:	f000 f9e6 	bl	8009b4c <__gettzinfo>
 8009780:	49b1      	ldr	r1, [pc, #708]	; (8009a48 <_tzset_unlocked_r+0x2d4>)
 8009782:	4eb2      	ldr	r6, [pc, #712]	; (8009a4c <_tzset_unlocked_r+0x2d8>)
 8009784:	4605      	mov	r5, r0
 8009786:	4638      	mov	r0, r7
 8009788:	f000 f9d8 	bl	8009b3c <_getenv_r>
 800978c:	4604      	mov	r4, r0
 800978e:	b970      	cbnz	r0, 80097ae <_tzset_unlocked_r+0x3a>
 8009790:	4baf      	ldr	r3, [pc, #700]	; (8009a50 <_tzset_unlocked_r+0x2dc>)
 8009792:	4ab0      	ldr	r2, [pc, #704]	; (8009a54 <_tzset_unlocked_r+0x2e0>)
 8009794:	6018      	str	r0, [r3, #0]
 8009796:	4bb0      	ldr	r3, [pc, #704]	; (8009a58 <_tzset_unlocked_r+0x2e4>)
 8009798:	6018      	str	r0, [r3, #0]
 800979a:	4bb0      	ldr	r3, [pc, #704]	; (8009a5c <_tzset_unlocked_r+0x2e8>)
 800979c:	6830      	ldr	r0, [r6, #0]
 800979e:	601a      	str	r2, [r3, #0]
 80097a0:	605a      	str	r2, [r3, #4]
 80097a2:	f000 fa71 	bl	8009c88 <free>
 80097a6:	6034      	str	r4, [r6, #0]
 80097a8:	b00d      	add	sp, #52	; 0x34
 80097aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ae:	6831      	ldr	r1, [r6, #0]
 80097b0:	2900      	cmp	r1, #0
 80097b2:	d160      	bne.n	8009876 <_tzset_unlocked_r+0x102>
 80097b4:	6830      	ldr	r0, [r6, #0]
 80097b6:	f000 fa67 	bl	8009c88 <free>
 80097ba:	4620      	mov	r0, r4
 80097bc:	f7f6 fd12 	bl	80001e4 <strlen>
 80097c0:	1c41      	adds	r1, r0, #1
 80097c2:	4638      	mov	r0, r7
 80097c4:	f000 fab6 	bl	8009d34 <_malloc_r>
 80097c8:	6030      	str	r0, [r6, #0]
 80097ca:	2800      	cmp	r0, #0
 80097cc:	d158      	bne.n	8009880 <_tzset_unlocked_r+0x10c>
 80097ce:	7823      	ldrb	r3, [r4, #0]
 80097d0:	4aa3      	ldr	r2, [pc, #652]	; (8009a60 <_tzset_unlocked_r+0x2ec>)
 80097d2:	49a4      	ldr	r1, [pc, #656]	; (8009a64 <_tzset_unlocked_r+0x2f0>)
 80097d4:	2b3a      	cmp	r3, #58	; 0x3a
 80097d6:	bf08      	it	eq
 80097d8:	3401      	addeq	r4, #1
 80097da:	ae0a      	add	r6, sp, #40	; 0x28
 80097dc:	4633      	mov	r3, r6
 80097de:	4620      	mov	r0, r4
 80097e0:	f000 fdfc 	bl	800a3dc <siscanf>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	dddf      	ble.n	80097a8 <_tzset_unlocked_r+0x34>
 80097e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ea:	18e7      	adds	r7, r4, r3
 80097ec:	5ce3      	ldrb	r3, [r4, r3]
 80097ee:	2b2d      	cmp	r3, #45	; 0x2d
 80097f0:	d14a      	bne.n	8009888 <_tzset_unlocked_r+0x114>
 80097f2:	3701      	adds	r7, #1
 80097f4:	f04f 34ff 	mov.w	r4, #4294967295
 80097f8:	f10d 0a20 	add.w	sl, sp, #32
 80097fc:	f10d 0b1e 	add.w	fp, sp, #30
 8009800:	f04f 0800 	mov.w	r8, #0
 8009804:	9603      	str	r6, [sp, #12]
 8009806:	f8cd a008 	str.w	sl, [sp, #8]
 800980a:	9601      	str	r6, [sp, #4]
 800980c:	f8cd b000 	str.w	fp, [sp]
 8009810:	4633      	mov	r3, r6
 8009812:	aa07      	add	r2, sp, #28
 8009814:	4994      	ldr	r1, [pc, #592]	; (8009a68 <_tzset_unlocked_r+0x2f4>)
 8009816:	f8ad 801e 	strh.w	r8, [sp, #30]
 800981a:	4638      	mov	r0, r7
 800981c:	f8ad 8020 	strh.w	r8, [sp, #32]
 8009820:	f000 fddc 	bl	800a3dc <siscanf>
 8009824:	4540      	cmp	r0, r8
 8009826:	ddbf      	ble.n	80097a8 <_tzset_unlocked_r+0x34>
 8009828:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800982c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009830:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8009a74 <_tzset_unlocked_r+0x300>
 8009834:	213c      	movs	r1, #60	; 0x3c
 8009836:	fb01 2203 	mla	r2, r1, r3, r2
 800983a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800983e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009842:	fb01 2303 	mla	r3, r1, r3, r2
 8009846:	435c      	muls	r4, r3
 8009848:	622c      	str	r4, [r5, #32]
 800984a:	4c84      	ldr	r4, [pc, #528]	; (8009a5c <_tzset_unlocked_r+0x2e8>)
 800984c:	4b84      	ldr	r3, [pc, #528]	; (8009a60 <_tzset_unlocked_r+0x2ec>)
 800984e:	6023      	str	r3, [r4, #0]
 8009850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009852:	4984      	ldr	r1, [pc, #528]	; (8009a64 <_tzset_unlocked_r+0x2f0>)
 8009854:	441f      	add	r7, r3
 8009856:	464a      	mov	r2, r9
 8009858:	4633      	mov	r3, r6
 800985a:	4638      	mov	r0, r7
 800985c:	f000 fdbe 	bl	800a3dc <siscanf>
 8009860:	4540      	cmp	r0, r8
 8009862:	dc16      	bgt.n	8009892 <_tzset_unlocked_r+0x11e>
 8009864:	6823      	ldr	r3, [r4, #0]
 8009866:	6063      	str	r3, [r4, #4]
 8009868:	4b79      	ldr	r3, [pc, #484]	; (8009a50 <_tzset_unlocked_r+0x2dc>)
 800986a:	6a2a      	ldr	r2, [r5, #32]
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	4b7a      	ldr	r3, [pc, #488]	; (8009a58 <_tzset_unlocked_r+0x2e4>)
 8009870:	f8c3 8000 	str.w	r8, [r3]
 8009874:	e798      	b.n	80097a8 <_tzset_unlocked_r+0x34>
 8009876:	f7f6 fcab 	bl	80001d0 <strcmp>
 800987a:	2800      	cmp	r0, #0
 800987c:	d094      	beq.n	80097a8 <_tzset_unlocked_r+0x34>
 800987e:	e799      	b.n	80097b4 <_tzset_unlocked_r+0x40>
 8009880:	4621      	mov	r1, r4
 8009882:	f7ff fde9 	bl	8009458 <strcpy>
 8009886:	e7a2      	b.n	80097ce <_tzset_unlocked_r+0x5a>
 8009888:	2b2b      	cmp	r3, #43	; 0x2b
 800988a:	bf08      	it	eq
 800988c:	3701      	addeq	r7, #1
 800988e:	2401      	movs	r4, #1
 8009890:	e7b2      	b.n	80097f8 <_tzset_unlocked_r+0x84>
 8009892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009894:	f8c4 9004 	str.w	r9, [r4, #4]
 8009898:	18fc      	adds	r4, r7, r3
 800989a:	5cfb      	ldrb	r3, [r7, r3]
 800989c:	2b2d      	cmp	r3, #45	; 0x2d
 800989e:	f040 8092 	bne.w	80099c6 <_tzset_unlocked_r+0x252>
 80098a2:	3401      	adds	r4, #1
 80098a4:	f04f 37ff 	mov.w	r7, #4294967295
 80098a8:	2300      	movs	r3, #0
 80098aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80098ae:	f8ad 301e 	strh.w	r3, [sp, #30]
 80098b2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80098b6:	930a      	str	r3, [sp, #40]	; 0x28
 80098b8:	9603      	str	r6, [sp, #12]
 80098ba:	f8cd a008 	str.w	sl, [sp, #8]
 80098be:	9601      	str	r6, [sp, #4]
 80098c0:	f8cd b000 	str.w	fp, [sp]
 80098c4:	4633      	mov	r3, r6
 80098c6:	aa07      	add	r2, sp, #28
 80098c8:	4967      	ldr	r1, [pc, #412]	; (8009a68 <_tzset_unlocked_r+0x2f4>)
 80098ca:	4620      	mov	r0, r4
 80098cc:	f000 fd86 	bl	800a3dc <siscanf>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	dc7d      	bgt.n	80099d0 <_tzset_unlocked_r+0x25c>
 80098d4:	6a2b      	ldr	r3, [r5, #32]
 80098d6:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80098da:	63eb      	str	r3, [r5, #60]	; 0x3c
 80098dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098de:	462f      	mov	r7, r5
 80098e0:	441c      	add	r4, r3
 80098e2:	f04f 0900 	mov.w	r9, #0
 80098e6:	7823      	ldrb	r3, [r4, #0]
 80098e8:	2b2c      	cmp	r3, #44	; 0x2c
 80098ea:	bf08      	it	eq
 80098ec:	3401      	addeq	r4, #1
 80098ee:	f894 8000 	ldrb.w	r8, [r4]
 80098f2:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80098f6:	d17b      	bne.n	80099f0 <_tzset_unlocked_r+0x27c>
 80098f8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80098fc:	9302      	str	r3, [sp, #8]
 80098fe:	ab09      	add	r3, sp, #36	; 0x24
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	9603      	str	r6, [sp, #12]
 8009904:	9601      	str	r6, [sp, #4]
 8009906:	4633      	mov	r3, r6
 8009908:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800990c:	4957      	ldr	r1, [pc, #348]	; (8009a6c <_tzset_unlocked_r+0x2f8>)
 800990e:	4620      	mov	r0, r4
 8009910:	f000 fd64 	bl	800a3dc <siscanf>
 8009914:	2803      	cmp	r0, #3
 8009916:	f47f af47 	bne.w	80097a8 <_tzset_unlocked_r+0x34>
 800991a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800991e:	1e4b      	subs	r3, r1, #1
 8009920:	2b0b      	cmp	r3, #11
 8009922:	f63f af41 	bhi.w	80097a8 <_tzset_unlocked_r+0x34>
 8009926:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800992a:	1e53      	subs	r3, r2, #1
 800992c:	2b04      	cmp	r3, #4
 800992e:	f63f af3b 	bhi.w	80097a8 <_tzset_unlocked_r+0x34>
 8009932:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009936:	2b06      	cmp	r3, #6
 8009938:	f63f af36 	bhi.w	80097a8 <_tzset_unlocked_r+0x34>
 800993c:	f887 8008 	strb.w	r8, [r7, #8]
 8009940:	60f9      	str	r1, [r7, #12]
 8009942:	613a      	str	r2, [r7, #16]
 8009944:	617b      	str	r3, [r7, #20]
 8009946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009948:	eb04 0803 	add.w	r8, r4, r3
 800994c:	2302      	movs	r3, #2
 800994e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009952:	2300      	movs	r3, #0
 8009954:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009958:	f8ad 3020 	strh.w	r3, [sp, #32]
 800995c:	930a      	str	r3, [sp, #40]	; 0x28
 800995e:	f898 3000 	ldrb.w	r3, [r8]
 8009962:	2b2f      	cmp	r3, #47	; 0x2f
 8009964:	d10b      	bne.n	800997e <_tzset_unlocked_r+0x20a>
 8009966:	9603      	str	r6, [sp, #12]
 8009968:	f8cd a008 	str.w	sl, [sp, #8]
 800996c:	9601      	str	r6, [sp, #4]
 800996e:	f8cd b000 	str.w	fp, [sp]
 8009972:	4633      	mov	r3, r6
 8009974:	aa07      	add	r2, sp, #28
 8009976:	493e      	ldr	r1, [pc, #248]	; (8009a70 <_tzset_unlocked_r+0x2fc>)
 8009978:	4640      	mov	r0, r8
 800997a:	f000 fd2f 	bl	800a3dc <siscanf>
 800997e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009982:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009986:	213c      	movs	r1, #60	; 0x3c
 8009988:	fb01 2203 	mla	r2, r1, r3, r2
 800998c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009990:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009994:	fb01 2303 	mla	r3, r1, r3, r2
 8009998:	61bb      	str	r3, [r7, #24]
 800999a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800999c:	f109 0901 	add.w	r9, r9, #1
 80099a0:	f1b9 0f02 	cmp.w	r9, #2
 80099a4:	4444      	add	r4, r8
 80099a6:	f107 071c 	add.w	r7, r7, #28
 80099aa:	d19c      	bne.n	80098e6 <_tzset_unlocked_r+0x172>
 80099ac:	6868      	ldr	r0, [r5, #4]
 80099ae:	f7ff fe31 	bl	8009614 <__tzcalc_limits>
 80099b2:	4b27      	ldr	r3, [pc, #156]	; (8009a50 <_tzset_unlocked_r+0x2dc>)
 80099b4:	6a2a      	ldr	r2, [r5, #32]
 80099b6:	601a      	str	r2, [r3, #0]
 80099b8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80099ba:	1a9b      	subs	r3, r3, r2
 80099bc:	4a26      	ldr	r2, [pc, #152]	; (8009a58 <_tzset_unlocked_r+0x2e4>)
 80099be:	bf18      	it	ne
 80099c0:	2301      	movne	r3, #1
 80099c2:	6013      	str	r3, [r2, #0]
 80099c4:	e6f0      	b.n	80097a8 <_tzset_unlocked_r+0x34>
 80099c6:	2b2b      	cmp	r3, #43	; 0x2b
 80099c8:	bf08      	it	eq
 80099ca:	3401      	addeq	r4, #1
 80099cc:	2701      	movs	r7, #1
 80099ce:	e76b      	b.n	80098a8 <_tzset_unlocked_r+0x134>
 80099d0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80099d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80099d8:	213c      	movs	r1, #60	; 0x3c
 80099da:	fb01 2203 	mla	r2, r1, r3, r2
 80099de:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80099e2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80099e6:	fb01 2303 	mla	r3, r1, r3, r2
 80099ea:	435f      	muls	r7, r3
 80099ec:	63ef      	str	r7, [r5, #60]	; 0x3c
 80099ee:	e775      	b.n	80098dc <_tzset_unlocked_r+0x168>
 80099f0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80099f4:	bf06      	itte	eq
 80099f6:	3401      	addeq	r4, #1
 80099f8:	4643      	moveq	r3, r8
 80099fa:	2344      	movne	r3, #68	; 0x44
 80099fc:	220a      	movs	r2, #10
 80099fe:	a90b      	add	r1, sp, #44	; 0x2c
 8009a00:	4620      	mov	r0, r4
 8009a02:	9305      	str	r3, [sp, #20]
 8009a04:	f000 fda6 	bl	800a554 <strtoul>
 8009a08:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8009a0c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8009a10:	4544      	cmp	r4, r8
 8009a12:	9b05      	ldr	r3, [sp, #20]
 8009a14:	d114      	bne.n	8009a40 <_tzset_unlocked_r+0x2cc>
 8009a16:	234d      	movs	r3, #77	; 0x4d
 8009a18:	f1b9 0f00 	cmp.w	r9, #0
 8009a1c:	d107      	bne.n	8009a2e <_tzset_unlocked_r+0x2ba>
 8009a1e:	722b      	strb	r3, [r5, #8]
 8009a20:	2303      	movs	r3, #3
 8009a22:	60eb      	str	r3, [r5, #12]
 8009a24:	2302      	movs	r3, #2
 8009a26:	612b      	str	r3, [r5, #16]
 8009a28:	f8c5 9014 	str.w	r9, [r5, #20]
 8009a2c:	e78e      	b.n	800994c <_tzset_unlocked_r+0x1d8>
 8009a2e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009a32:	230b      	movs	r3, #11
 8009a34:	62ab      	str	r3, [r5, #40]	; 0x28
 8009a36:	2301      	movs	r3, #1
 8009a38:	62eb      	str	r3, [r5, #44]	; 0x2c
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	632b      	str	r3, [r5, #48]	; 0x30
 8009a3e:	e785      	b.n	800994c <_tzset_unlocked_r+0x1d8>
 8009a40:	b280      	uxth	r0, r0
 8009a42:	723b      	strb	r3, [r7, #8]
 8009a44:	6178      	str	r0, [r7, #20]
 8009a46:	e781      	b.n	800994c <_tzset_unlocked_r+0x1d8>
 8009a48:	0800b100 	.word	0x0800b100
 8009a4c:	20008b94 	.word	0x20008b94
 8009a50:	20008b9c 	.word	0x20008b9c
 8009a54:	0800b103 	.word	0x0800b103
 8009a58:	20008b98 	.word	0x20008b98
 8009a5c:	200001e0 	.word	0x200001e0
 8009a60:	20008b87 	.word	0x20008b87
 8009a64:	0800b107 	.word	0x0800b107
 8009a68:	0800b12a 	.word	0x0800b12a
 8009a6c:	0800b116 	.word	0x0800b116
 8009a70:	0800b129 	.word	0x0800b129
 8009a74:	20008b7c 	.word	0x20008b7c

08009a78 <__ascii_wctomb>:
 8009a78:	b149      	cbz	r1, 8009a8e <__ascii_wctomb+0x16>
 8009a7a:	2aff      	cmp	r2, #255	; 0xff
 8009a7c:	bf85      	ittet	hi
 8009a7e:	238a      	movhi	r3, #138	; 0x8a
 8009a80:	6003      	strhi	r3, [r0, #0]
 8009a82:	700a      	strbls	r2, [r1, #0]
 8009a84:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a88:	bf98      	it	ls
 8009a8a:	2001      	movls	r0, #1
 8009a8c:	4770      	bx	lr
 8009a8e:	4608      	mov	r0, r1
 8009a90:	4770      	bx	lr

08009a92 <div>:
 8009a92:	2900      	cmp	r1, #0
 8009a94:	b510      	push	{r4, lr}
 8009a96:	fb91 f4f2 	sdiv	r4, r1, r2
 8009a9a:	fb02 1314 	mls	r3, r2, r4, r1
 8009a9e:	db06      	blt.n	8009aae <div+0x1c>
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	da01      	bge.n	8009aa8 <div+0x16>
 8009aa4:	3401      	adds	r4, #1
 8009aa6:	1a9b      	subs	r3, r3, r2
 8009aa8:	6004      	str	r4, [r0, #0]
 8009aaa:	6043      	str	r3, [r0, #4]
 8009aac:	bd10      	pop	{r4, pc}
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	bfc4      	itt	gt
 8009ab2:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8009ab6:	189b      	addgt	r3, r3, r2
 8009ab8:	e7f6      	b.n	8009aa8 <div+0x16>
	...

08009abc <_findenv_r>:
 8009abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac0:	4606      	mov	r6, r0
 8009ac2:	468a      	mov	sl, r1
 8009ac4:	4617      	mov	r7, r2
 8009ac6:	f000 fd5b 	bl	800a580 <__env_lock>
 8009aca:	4b1b      	ldr	r3, [pc, #108]	; (8009b38 <_findenv_r+0x7c>)
 8009acc:	f8d3 8000 	ldr.w	r8, [r3]
 8009ad0:	4699      	mov	r9, r3
 8009ad2:	f1b8 0f00 	cmp.w	r8, #0
 8009ad6:	d007      	beq.n	8009ae8 <_findenv_r+0x2c>
 8009ad8:	4654      	mov	r4, sl
 8009ada:	4623      	mov	r3, r4
 8009adc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ae0:	b332      	cbz	r2, 8009b30 <_findenv_r+0x74>
 8009ae2:	2a3d      	cmp	r2, #61	; 0x3d
 8009ae4:	461c      	mov	r4, r3
 8009ae6:	d1f8      	bne.n	8009ada <_findenv_r+0x1e>
 8009ae8:	4630      	mov	r0, r6
 8009aea:	f000 fd4a 	bl	800a582 <__env_unlock>
 8009aee:	2000      	movs	r0, #0
 8009af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af4:	f108 0804 	add.w	r8, r8, #4
 8009af8:	f8d8 0000 	ldr.w	r0, [r8]
 8009afc:	2800      	cmp	r0, #0
 8009afe:	d0f3      	beq.n	8009ae8 <_findenv_r+0x2c>
 8009b00:	4622      	mov	r2, r4
 8009b02:	4651      	mov	r1, sl
 8009b04:	f7ff fcb0 	bl	8009468 <strncmp>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d1f3      	bne.n	8009af4 <_findenv_r+0x38>
 8009b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b10:	191d      	adds	r5, r3, r4
 8009b12:	5d1b      	ldrb	r3, [r3, r4]
 8009b14:	2b3d      	cmp	r3, #61	; 0x3d
 8009b16:	d1ed      	bne.n	8009af4 <_findenv_r+0x38>
 8009b18:	f8d9 3000 	ldr.w	r3, [r9]
 8009b1c:	eba8 0303 	sub.w	r3, r8, r3
 8009b20:	109b      	asrs	r3, r3, #2
 8009b22:	4630      	mov	r0, r6
 8009b24:	603b      	str	r3, [r7, #0]
 8009b26:	f000 fd2c 	bl	800a582 <__env_unlock>
 8009b2a:	1c68      	adds	r0, r5, #1
 8009b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b30:	eba4 040a 	sub.w	r4, r4, sl
 8009b34:	e7e0      	b.n	8009af8 <_findenv_r+0x3c>
 8009b36:	bf00      	nop
 8009b38:	20000008 	.word	0x20000008

08009b3c <_getenv_r>:
 8009b3c:	b507      	push	{r0, r1, r2, lr}
 8009b3e:	aa01      	add	r2, sp, #4
 8009b40:	f7ff ffbc 	bl	8009abc <_findenv_r>
 8009b44:	b003      	add	sp, #12
 8009b46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009b4c <__gettzinfo>:
 8009b4c:	4800      	ldr	r0, [pc, #0]	; (8009b50 <__gettzinfo+0x4>)
 8009b4e:	4770      	bx	lr
 8009b50:	200001e8 	.word	0x200001e8

08009b54 <gmtime_r>:
 8009b54:	6802      	ldr	r2, [r0, #0]
 8009b56:	4848      	ldr	r0, [pc, #288]	; (8009c78 <gmtime_r+0x124>)
 8009b58:	fb92 f3f0 	sdiv	r3, r2, r0
 8009b5c:	fb00 2013 	mls	r0, r0, r3, r2
 8009b60:	2800      	cmp	r0, #0
 8009b62:	bfb8      	it	lt
 8009b64:	f500 30a8 	addlt.w	r0, r0, #86016	; 0x15000
 8009b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b6a:	bfb8      	it	lt
 8009b6c:	f500 70c0 	addlt.w	r0, r0, #384	; 0x180
 8009b70:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8009b74:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8009b78:	fb90 f2f4 	sdiv	r2, r0, r4
 8009b7c:	fb04 0012 	mls	r0, r4, r2, r0
 8009b80:	f04f 043c 	mov.w	r4, #60	; 0x3c
 8009b84:	bfac      	ite	ge
 8009b86:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 8009b8a:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 8009b8e:	608a      	str	r2, [r1, #8]
 8009b90:	fb90 f2f4 	sdiv	r2, r0, r4
 8009b94:	fb04 0012 	mls	r0, r4, r2, r0
 8009b98:	604a      	str	r2, [r1, #4]
 8009b9a:	6008      	str	r0, [r1, #0]
 8009b9c:	2207      	movs	r2, #7
 8009b9e:	1cd8      	adds	r0, r3, #3
 8009ba0:	fb90 f2f2 	sdiv	r2, r0, r2
 8009ba4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009ba8:	1a82      	subs	r2, r0, r2
 8009baa:	618a      	str	r2, [r1, #24]
 8009bac:	4a33      	ldr	r2, [pc, #204]	; (8009c7c <gmtime_r+0x128>)
 8009bae:	4c34      	ldr	r4, [pc, #208]	; (8009c80 <gmtime_r+0x12c>)
 8009bb0:	fb93 f4f4 	sdiv	r4, r3, r4
 8009bb4:	fb02 3304 	mla	r3, r2, r4, r3
 8009bb8:	f648 60ac 	movw	r0, #36524	; 0x8eac
 8009bbc:	fbb3 f0f0 	udiv	r0, r3, r0
 8009bc0:	4418      	add	r0, r3
 8009bc2:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8009bc6:	fbb3 f2f7 	udiv	r2, r3, r7
 8009bca:	1a80      	subs	r0, r0, r2
 8009bcc:	4a2d      	ldr	r2, [pc, #180]	; (8009c84 <gmtime_r+0x130>)
 8009bce:	fbb3 f2f2 	udiv	r2, r3, r2
 8009bd2:	1a82      	subs	r2, r0, r2
 8009bd4:	f648 6094 	movw	r0, #36500	; 0x8e94
 8009bd8:	fbb2 f0f0 	udiv	r0, r2, r0
 8009bdc:	4403      	add	r3, r0
 8009bde:	f240 166d 	movw	r6, #365	; 0x16d
 8009be2:	fbb2 f5f6 	udiv	r5, r2, r6
 8009be6:	fbb2 f2f7 	udiv	r2, r2, r7
 8009bea:	1a9a      	subs	r2, r3, r2
 8009bec:	fb06 2315 	mls	r3, r6, r5, r2
 8009bf0:	2099      	movs	r0, #153	; 0x99
 8009bf2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009bf6:	1c5e      	adds	r6, r3, #1
 8009bf8:	3202      	adds	r2, #2
 8009bfa:	fbb2 f2f0 	udiv	r2, r2, r0
 8009bfe:	2a0a      	cmp	r2, #10
 8009c00:	fb00 f002 	mul.w	r0, r0, r2
 8009c04:	f100 0002 	add.w	r0, r0, #2
 8009c08:	f04f 0705 	mov.w	r7, #5
 8009c0c:	fbb0 f0f7 	udiv	r0, r0, r7
 8009c10:	eba6 0000 	sub.w	r0, r6, r0
 8009c14:	bf34      	ite	cc
 8009c16:	2602      	movcc	r6, #2
 8009c18:	f06f 0609 	mvncs.w	r6, #9
 8009c1c:	4416      	add	r6, r2
 8009c1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009c22:	fb02 5404 	mla	r4, r2, r4, r5
 8009c26:	2e01      	cmp	r6, #1
 8009c28:	bf98      	it	ls
 8009c2a:	3401      	addls	r4, #1
 8009c2c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009c30:	d30b      	bcc.n	8009c4a <gmtime_r+0xf6>
 8009c32:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009c36:	61cb      	str	r3, [r1, #28]
 8009c38:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	60c8      	str	r0, [r1, #12]
 8009c40:	614c      	str	r4, [r1, #20]
 8009c42:	610e      	str	r6, [r1, #16]
 8009c44:	620b      	str	r3, [r1, #32]
 8009c46:	4608      	mov	r0, r1
 8009c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c4a:	07aa      	lsls	r2, r5, #30
 8009c4c:	d105      	bne.n	8009c5a <gmtime_r+0x106>
 8009c4e:	2764      	movs	r7, #100	; 0x64
 8009c50:	fbb5 f2f7 	udiv	r2, r5, r7
 8009c54:	fb07 5212 	mls	r2, r7, r2, r5
 8009c58:	b95a      	cbnz	r2, 8009c72 <gmtime_r+0x11e>
 8009c5a:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8009c5e:	fbb5 f2f7 	udiv	r2, r5, r7
 8009c62:	fb07 5212 	mls	r2, r7, r2, r5
 8009c66:	fab2 f282 	clz	r2, r2
 8009c6a:	0952      	lsrs	r2, r2, #5
 8009c6c:	333b      	adds	r3, #59	; 0x3b
 8009c6e:	4413      	add	r3, r2
 8009c70:	e7e1      	b.n	8009c36 <gmtime_r+0xe2>
 8009c72:	2201      	movs	r2, #1
 8009c74:	e7fa      	b.n	8009c6c <gmtime_r+0x118>
 8009c76:	bf00      	nop
 8009c78:	00015180 	.word	0x00015180
 8009c7c:	fffdc54f 	.word	0xfffdc54f
 8009c80:	00023ab1 	.word	0x00023ab1
 8009c84:	00023ab0 	.word	0x00023ab0

08009c88 <free>:
 8009c88:	4b02      	ldr	r3, [pc, #8]	; (8009c94 <free+0xc>)
 8009c8a:	4601      	mov	r1, r0
 8009c8c:	6818      	ldr	r0, [r3, #0]
 8009c8e:	f000 b803 	b.w	8009c98 <_free_r>
 8009c92:	bf00      	nop
 8009c94:	20000010 	.word	0x20000010

08009c98 <_free_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	2900      	cmp	r1, #0
 8009c9e:	d045      	beq.n	8009d2c <_free_r+0x94>
 8009ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ca4:	1f0c      	subs	r4, r1, #4
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	bfb8      	it	lt
 8009caa:	18e4      	addlt	r4, r4, r3
 8009cac:	f000 fc84 	bl	800a5b8 <__malloc_lock>
 8009cb0:	4a1f      	ldr	r2, [pc, #124]	; (8009d30 <_free_r+0x98>)
 8009cb2:	6813      	ldr	r3, [r2, #0]
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	b933      	cbnz	r3, 8009cc6 <_free_r+0x2e>
 8009cb8:	6063      	str	r3, [r4, #4]
 8009cba:	6014      	str	r4, [r2, #0]
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cc2:	f000 bc7a 	b.w	800a5ba <__malloc_unlock>
 8009cc6:	42a3      	cmp	r3, r4
 8009cc8:	d90c      	bls.n	8009ce4 <_free_r+0x4c>
 8009cca:	6821      	ldr	r1, [r4, #0]
 8009ccc:	1862      	adds	r2, r4, r1
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	bf04      	itt	eq
 8009cd2:	681a      	ldreq	r2, [r3, #0]
 8009cd4:	685b      	ldreq	r3, [r3, #4]
 8009cd6:	6063      	str	r3, [r4, #4]
 8009cd8:	bf04      	itt	eq
 8009cda:	1852      	addeq	r2, r2, r1
 8009cdc:	6022      	streq	r2, [r4, #0]
 8009cde:	6004      	str	r4, [r0, #0]
 8009ce0:	e7ec      	b.n	8009cbc <_free_r+0x24>
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	b10a      	cbz	r2, 8009cec <_free_r+0x54>
 8009ce8:	42a2      	cmp	r2, r4
 8009cea:	d9fa      	bls.n	8009ce2 <_free_r+0x4a>
 8009cec:	6819      	ldr	r1, [r3, #0]
 8009cee:	1858      	adds	r0, r3, r1
 8009cf0:	42a0      	cmp	r0, r4
 8009cf2:	d10b      	bne.n	8009d0c <_free_r+0x74>
 8009cf4:	6820      	ldr	r0, [r4, #0]
 8009cf6:	4401      	add	r1, r0
 8009cf8:	1858      	adds	r0, r3, r1
 8009cfa:	4282      	cmp	r2, r0
 8009cfc:	6019      	str	r1, [r3, #0]
 8009cfe:	d1dd      	bne.n	8009cbc <_free_r+0x24>
 8009d00:	6810      	ldr	r0, [r2, #0]
 8009d02:	6852      	ldr	r2, [r2, #4]
 8009d04:	605a      	str	r2, [r3, #4]
 8009d06:	4401      	add	r1, r0
 8009d08:	6019      	str	r1, [r3, #0]
 8009d0a:	e7d7      	b.n	8009cbc <_free_r+0x24>
 8009d0c:	d902      	bls.n	8009d14 <_free_r+0x7c>
 8009d0e:	230c      	movs	r3, #12
 8009d10:	602b      	str	r3, [r5, #0]
 8009d12:	e7d3      	b.n	8009cbc <_free_r+0x24>
 8009d14:	6820      	ldr	r0, [r4, #0]
 8009d16:	1821      	adds	r1, r4, r0
 8009d18:	428a      	cmp	r2, r1
 8009d1a:	bf04      	itt	eq
 8009d1c:	6811      	ldreq	r1, [r2, #0]
 8009d1e:	6852      	ldreq	r2, [r2, #4]
 8009d20:	6062      	str	r2, [r4, #4]
 8009d22:	bf04      	itt	eq
 8009d24:	1809      	addeq	r1, r1, r0
 8009d26:	6021      	streq	r1, [r4, #0]
 8009d28:	605c      	str	r4, [r3, #4]
 8009d2a:	e7c7      	b.n	8009cbc <_free_r+0x24>
 8009d2c:	bd38      	pop	{r3, r4, r5, pc}
 8009d2e:	bf00      	nop
 8009d30:	20008ba0 	.word	0x20008ba0

08009d34 <_malloc_r>:
 8009d34:	b570      	push	{r4, r5, r6, lr}
 8009d36:	1ccd      	adds	r5, r1, #3
 8009d38:	f025 0503 	bic.w	r5, r5, #3
 8009d3c:	3508      	adds	r5, #8
 8009d3e:	2d0c      	cmp	r5, #12
 8009d40:	bf38      	it	cc
 8009d42:	250c      	movcc	r5, #12
 8009d44:	2d00      	cmp	r5, #0
 8009d46:	4606      	mov	r6, r0
 8009d48:	db01      	blt.n	8009d4e <_malloc_r+0x1a>
 8009d4a:	42a9      	cmp	r1, r5
 8009d4c:	d903      	bls.n	8009d56 <_malloc_r+0x22>
 8009d4e:	230c      	movs	r3, #12
 8009d50:	6033      	str	r3, [r6, #0]
 8009d52:	2000      	movs	r0, #0
 8009d54:	bd70      	pop	{r4, r5, r6, pc}
 8009d56:	f000 fc2f 	bl	800a5b8 <__malloc_lock>
 8009d5a:	4a23      	ldr	r2, [pc, #140]	; (8009de8 <_malloc_r+0xb4>)
 8009d5c:	6814      	ldr	r4, [r2, #0]
 8009d5e:	4621      	mov	r1, r4
 8009d60:	b991      	cbnz	r1, 8009d88 <_malloc_r+0x54>
 8009d62:	4c22      	ldr	r4, [pc, #136]	; (8009dec <_malloc_r+0xb8>)
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	b91b      	cbnz	r3, 8009d70 <_malloc_r+0x3c>
 8009d68:	4630      	mov	r0, r6
 8009d6a:	f000 fb27 	bl	800a3bc <_sbrk_r>
 8009d6e:	6020      	str	r0, [r4, #0]
 8009d70:	4629      	mov	r1, r5
 8009d72:	4630      	mov	r0, r6
 8009d74:	f000 fb22 	bl	800a3bc <_sbrk_r>
 8009d78:	1c43      	adds	r3, r0, #1
 8009d7a:	d126      	bne.n	8009dca <_malloc_r+0x96>
 8009d7c:	230c      	movs	r3, #12
 8009d7e:	6033      	str	r3, [r6, #0]
 8009d80:	4630      	mov	r0, r6
 8009d82:	f000 fc1a 	bl	800a5ba <__malloc_unlock>
 8009d86:	e7e4      	b.n	8009d52 <_malloc_r+0x1e>
 8009d88:	680b      	ldr	r3, [r1, #0]
 8009d8a:	1b5b      	subs	r3, r3, r5
 8009d8c:	d41a      	bmi.n	8009dc4 <_malloc_r+0x90>
 8009d8e:	2b0b      	cmp	r3, #11
 8009d90:	d90f      	bls.n	8009db2 <_malloc_r+0x7e>
 8009d92:	600b      	str	r3, [r1, #0]
 8009d94:	50cd      	str	r5, [r1, r3]
 8009d96:	18cc      	adds	r4, r1, r3
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f000 fc0e 	bl	800a5ba <__malloc_unlock>
 8009d9e:	f104 000b 	add.w	r0, r4, #11
 8009da2:	1d23      	adds	r3, r4, #4
 8009da4:	f020 0007 	bic.w	r0, r0, #7
 8009da8:	1ac3      	subs	r3, r0, r3
 8009daa:	d01b      	beq.n	8009de4 <_malloc_r+0xb0>
 8009dac:	425a      	negs	r2, r3
 8009dae:	50e2      	str	r2, [r4, r3]
 8009db0:	bd70      	pop	{r4, r5, r6, pc}
 8009db2:	428c      	cmp	r4, r1
 8009db4:	bf0d      	iteet	eq
 8009db6:	6863      	ldreq	r3, [r4, #4]
 8009db8:	684b      	ldrne	r3, [r1, #4]
 8009dba:	6063      	strne	r3, [r4, #4]
 8009dbc:	6013      	streq	r3, [r2, #0]
 8009dbe:	bf18      	it	ne
 8009dc0:	460c      	movne	r4, r1
 8009dc2:	e7e9      	b.n	8009d98 <_malloc_r+0x64>
 8009dc4:	460c      	mov	r4, r1
 8009dc6:	6849      	ldr	r1, [r1, #4]
 8009dc8:	e7ca      	b.n	8009d60 <_malloc_r+0x2c>
 8009dca:	1cc4      	adds	r4, r0, #3
 8009dcc:	f024 0403 	bic.w	r4, r4, #3
 8009dd0:	42a0      	cmp	r0, r4
 8009dd2:	d005      	beq.n	8009de0 <_malloc_r+0xac>
 8009dd4:	1a21      	subs	r1, r4, r0
 8009dd6:	4630      	mov	r0, r6
 8009dd8:	f000 faf0 	bl	800a3bc <_sbrk_r>
 8009ddc:	3001      	adds	r0, #1
 8009dde:	d0cd      	beq.n	8009d7c <_malloc_r+0x48>
 8009de0:	6025      	str	r5, [r4, #0]
 8009de2:	e7d9      	b.n	8009d98 <_malloc_r+0x64>
 8009de4:	bd70      	pop	{r4, r5, r6, pc}
 8009de6:	bf00      	nop
 8009de8:	20008ba0 	.word	0x20008ba0
 8009dec:	20008ba4 	.word	0x20008ba4

08009df0 <__ssputs_r>:
 8009df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df4:	688e      	ldr	r6, [r1, #8]
 8009df6:	429e      	cmp	r6, r3
 8009df8:	4682      	mov	sl, r0
 8009dfa:	460c      	mov	r4, r1
 8009dfc:	4691      	mov	r9, r2
 8009dfe:	4698      	mov	r8, r3
 8009e00:	d835      	bhi.n	8009e6e <__ssputs_r+0x7e>
 8009e02:	898a      	ldrh	r2, [r1, #12]
 8009e04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e08:	d031      	beq.n	8009e6e <__ssputs_r+0x7e>
 8009e0a:	6825      	ldr	r5, [r4, #0]
 8009e0c:	6909      	ldr	r1, [r1, #16]
 8009e0e:	1a6f      	subs	r7, r5, r1
 8009e10:	6965      	ldr	r5, [r4, #20]
 8009e12:	2302      	movs	r3, #2
 8009e14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e18:	fb95 f5f3 	sdiv	r5, r5, r3
 8009e1c:	f108 0301 	add.w	r3, r8, #1
 8009e20:	443b      	add	r3, r7
 8009e22:	429d      	cmp	r5, r3
 8009e24:	bf38      	it	cc
 8009e26:	461d      	movcc	r5, r3
 8009e28:	0553      	lsls	r3, r2, #21
 8009e2a:	d531      	bpl.n	8009e90 <__ssputs_r+0xa0>
 8009e2c:	4629      	mov	r1, r5
 8009e2e:	f7ff ff81 	bl	8009d34 <_malloc_r>
 8009e32:	4606      	mov	r6, r0
 8009e34:	b950      	cbnz	r0, 8009e4c <__ssputs_r+0x5c>
 8009e36:	230c      	movs	r3, #12
 8009e38:	f8ca 3000 	str.w	r3, [sl]
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e42:	81a3      	strh	r3, [r4, #12]
 8009e44:	f04f 30ff 	mov.w	r0, #4294967295
 8009e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4c:	463a      	mov	r2, r7
 8009e4e:	6921      	ldr	r1, [r4, #16]
 8009e50:	f7ff f861 	bl	8008f16 <memcpy>
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e5e:	81a3      	strh	r3, [r4, #12]
 8009e60:	6126      	str	r6, [r4, #16]
 8009e62:	6165      	str	r5, [r4, #20]
 8009e64:	443e      	add	r6, r7
 8009e66:	1bed      	subs	r5, r5, r7
 8009e68:	6026      	str	r6, [r4, #0]
 8009e6a:	60a5      	str	r5, [r4, #8]
 8009e6c:	4646      	mov	r6, r8
 8009e6e:	4546      	cmp	r6, r8
 8009e70:	bf28      	it	cs
 8009e72:	4646      	movcs	r6, r8
 8009e74:	4632      	mov	r2, r6
 8009e76:	4649      	mov	r1, r9
 8009e78:	6820      	ldr	r0, [r4, #0]
 8009e7a:	f000 fb83 	bl	800a584 <memmove>
 8009e7e:	68a3      	ldr	r3, [r4, #8]
 8009e80:	1b9b      	subs	r3, r3, r6
 8009e82:	60a3      	str	r3, [r4, #8]
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	441e      	add	r6, r3
 8009e88:	6026      	str	r6, [r4, #0]
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e90:	462a      	mov	r2, r5
 8009e92:	f000 fb93 	bl	800a5bc <_realloc_r>
 8009e96:	4606      	mov	r6, r0
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d1e1      	bne.n	8009e60 <__ssputs_r+0x70>
 8009e9c:	6921      	ldr	r1, [r4, #16]
 8009e9e:	4650      	mov	r0, sl
 8009ea0:	f7ff fefa 	bl	8009c98 <_free_r>
 8009ea4:	e7c7      	b.n	8009e36 <__ssputs_r+0x46>
	...

08009ea8 <_svfiprintf_r>:
 8009ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eac:	b09d      	sub	sp, #116	; 0x74
 8009eae:	4680      	mov	r8, r0
 8009eb0:	9303      	str	r3, [sp, #12]
 8009eb2:	898b      	ldrh	r3, [r1, #12]
 8009eb4:	061c      	lsls	r4, r3, #24
 8009eb6:	460d      	mov	r5, r1
 8009eb8:	4616      	mov	r6, r2
 8009eba:	d50f      	bpl.n	8009edc <_svfiprintf_r+0x34>
 8009ebc:	690b      	ldr	r3, [r1, #16]
 8009ebe:	b96b      	cbnz	r3, 8009edc <_svfiprintf_r+0x34>
 8009ec0:	2140      	movs	r1, #64	; 0x40
 8009ec2:	f7ff ff37 	bl	8009d34 <_malloc_r>
 8009ec6:	6028      	str	r0, [r5, #0]
 8009ec8:	6128      	str	r0, [r5, #16]
 8009eca:	b928      	cbnz	r0, 8009ed8 <_svfiprintf_r+0x30>
 8009ecc:	230c      	movs	r3, #12
 8009ece:	f8c8 3000 	str.w	r3, [r8]
 8009ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed6:	e0c5      	b.n	800a064 <_svfiprintf_r+0x1bc>
 8009ed8:	2340      	movs	r3, #64	; 0x40
 8009eda:	616b      	str	r3, [r5, #20]
 8009edc:	2300      	movs	r3, #0
 8009ede:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee0:	2320      	movs	r3, #32
 8009ee2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ee6:	2330      	movs	r3, #48	; 0x30
 8009ee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009eec:	f04f 0b01 	mov.w	fp, #1
 8009ef0:	4637      	mov	r7, r6
 8009ef2:	463c      	mov	r4, r7
 8009ef4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d13c      	bne.n	8009f76 <_svfiprintf_r+0xce>
 8009efc:	ebb7 0a06 	subs.w	sl, r7, r6
 8009f00:	d00b      	beq.n	8009f1a <_svfiprintf_r+0x72>
 8009f02:	4653      	mov	r3, sl
 8009f04:	4632      	mov	r2, r6
 8009f06:	4629      	mov	r1, r5
 8009f08:	4640      	mov	r0, r8
 8009f0a:	f7ff ff71 	bl	8009df0 <__ssputs_r>
 8009f0e:	3001      	adds	r0, #1
 8009f10:	f000 80a3 	beq.w	800a05a <_svfiprintf_r+0x1b2>
 8009f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f16:	4453      	add	r3, sl
 8009f18:	9309      	str	r3, [sp, #36]	; 0x24
 8009f1a:	783b      	ldrb	r3, [r7, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 809c 	beq.w	800a05a <_svfiprintf_r+0x1b2>
 8009f22:	2300      	movs	r3, #0
 8009f24:	f04f 32ff 	mov.w	r2, #4294967295
 8009f28:	9304      	str	r3, [sp, #16]
 8009f2a:	9307      	str	r3, [sp, #28]
 8009f2c:	9205      	str	r2, [sp, #20]
 8009f2e:	9306      	str	r3, [sp, #24]
 8009f30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f34:	931a      	str	r3, [sp, #104]	; 0x68
 8009f36:	2205      	movs	r2, #5
 8009f38:	7821      	ldrb	r1, [r4, #0]
 8009f3a:	4850      	ldr	r0, [pc, #320]	; (800a07c <_svfiprintf_r+0x1d4>)
 8009f3c:	f7f6 f960 	bl	8000200 <memchr>
 8009f40:	1c67      	adds	r7, r4, #1
 8009f42:	9b04      	ldr	r3, [sp, #16]
 8009f44:	b9d8      	cbnz	r0, 8009f7e <_svfiprintf_r+0xd6>
 8009f46:	06d9      	lsls	r1, r3, #27
 8009f48:	bf44      	itt	mi
 8009f4a:	2220      	movmi	r2, #32
 8009f4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009f50:	071a      	lsls	r2, r3, #28
 8009f52:	bf44      	itt	mi
 8009f54:	222b      	movmi	r2, #43	; 0x2b
 8009f56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009f5a:	7822      	ldrb	r2, [r4, #0]
 8009f5c:	2a2a      	cmp	r2, #42	; 0x2a
 8009f5e:	d016      	beq.n	8009f8e <_svfiprintf_r+0xe6>
 8009f60:	9a07      	ldr	r2, [sp, #28]
 8009f62:	2100      	movs	r1, #0
 8009f64:	200a      	movs	r0, #10
 8009f66:	4627      	mov	r7, r4
 8009f68:	3401      	adds	r4, #1
 8009f6a:	783b      	ldrb	r3, [r7, #0]
 8009f6c:	3b30      	subs	r3, #48	; 0x30
 8009f6e:	2b09      	cmp	r3, #9
 8009f70:	d951      	bls.n	800a016 <_svfiprintf_r+0x16e>
 8009f72:	b1c9      	cbz	r1, 8009fa8 <_svfiprintf_r+0x100>
 8009f74:	e011      	b.n	8009f9a <_svfiprintf_r+0xf2>
 8009f76:	2b25      	cmp	r3, #37	; 0x25
 8009f78:	d0c0      	beq.n	8009efc <_svfiprintf_r+0x54>
 8009f7a:	4627      	mov	r7, r4
 8009f7c:	e7b9      	b.n	8009ef2 <_svfiprintf_r+0x4a>
 8009f7e:	4a3f      	ldr	r2, [pc, #252]	; (800a07c <_svfiprintf_r+0x1d4>)
 8009f80:	1a80      	subs	r0, r0, r2
 8009f82:	fa0b f000 	lsl.w	r0, fp, r0
 8009f86:	4318      	orrs	r0, r3
 8009f88:	9004      	str	r0, [sp, #16]
 8009f8a:	463c      	mov	r4, r7
 8009f8c:	e7d3      	b.n	8009f36 <_svfiprintf_r+0x8e>
 8009f8e:	9a03      	ldr	r2, [sp, #12]
 8009f90:	1d11      	adds	r1, r2, #4
 8009f92:	6812      	ldr	r2, [r2, #0]
 8009f94:	9103      	str	r1, [sp, #12]
 8009f96:	2a00      	cmp	r2, #0
 8009f98:	db01      	blt.n	8009f9e <_svfiprintf_r+0xf6>
 8009f9a:	9207      	str	r2, [sp, #28]
 8009f9c:	e004      	b.n	8009fa8 <_svfiprintf_r+0x100>
 8009f9e:	4252      	negs	r2, r2
 8009fa0:	f043 0302 	orr.w	r3, r3, #2
 8009fa4:	9207      	str	r2, [sp, #28]
 8009fa6:	9304      	str	r3, [sp, #16]
 8009fa8:	783b      	ldrb	r3, [r7, #0]
 8009faa:	2b2e      	cmp	r3, #46	; 0x2e
 8009fac:	d10e      	bne.n	8009fcc <_svfiprintf_r+0x124>
 8009fae:	787b      	ldrb	r3, [r7, #1]
 8009fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8009fb2:	f107 0101 	add.w	r1, r7, #1
 8009fb6:	d132      	bne.n	800a01e <_svfiprintf_r+0x176>
 8009fb8:	9b03      	ldr	r3, [sp, #12]
 8009fba:	1d1a      	adds	r2, r3, #4
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	9203      	str	r2, [sp, #12]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	bfb8      	it	lt
 8009fc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fc8:	3702      	adds	r7, #2
 8009fca:	9305      	str	r3, [sp, #20]
 8009fcc:	4c2c      	ldr	r4, [pc, #176]	; (800a080 <_svfiprintf_r+0x1d8>)
 8009fce:	7839      	ldrb	r1, [r7, #0]
 8009fd0:	2203      	movs	r2, #3
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f7f6 f914 	bl	8000200 <memchr>
 8009fd8:	b138      	cbz	r0, 8009fea <_svfiprintf_r+0x142>
 8009fda:	2340      	movs	r3, #64	; 0x40
 8009fdc:	1b00      	subs	r0, r0, r4
 8009fde:	fa03 f000 	lsl.w	r0, r3, r0
 8009fe2:	9b04      	ldr	r3, [sp, #16]
 8009fe4:	4303      	orrs	r3, r0
 8009fe6:	9304      	str	r3, [sp, #16]
 8009fe8:	3701      	adds	r7, #1
 8009fea:	7839      	ldrb	r1, [r7, #0]
 8009fec:	4825      	ldr	r0, [pc, #148]	; (800a084 <_svfiprintf_r+0x1dc>)
 8009fee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ff2:	2206      	movs	r2, #6
 8009ff4:	1c7e      	adds	r6, r7, #1
 8009ff6:	f7f6 f903 	bl	8000200 <memchr>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d035      	beq.n	800a06a <_svfiprintf_r+0x1c2>
 8009ffe:	4b22      	ldr	r3, [pc, #136]	; (800a088 <_svfiprintf_r+0x1e0>)
 800a000:	b9fb      	cbnz	r3, 800a042 <_svfiprintf_r+0x19a>
 800a002:	9b03      	ldr	r3, [sp, #12]
 800a004:	3307      	adds	r3, #7
 800a006:	f023 0307 	bic.w	r3, r3, #7
 800a00a:	3308      	adds	r3, #8
 800a00c:	9303      	str	r3, [sp, #12]
 800a00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a010:	444b      	add	r3, r9
 800a012:	9309      	str	r3, [sp, #36]	; 0x24
 800a014:	e76c      	b.n	8009ef0 <_svfiprintf_r+0x48>
 800a016:	fb00 3202 	mla	r2, r0, r2, r3
 800a01a:	2101      	movs	r1, #1
 800a01c:	e7a3      	b.n	8009f66 <_svfiprintf_r+0xbe>
 800a01e:	2300      	movs	r3, #0
 800a020:	9305      	str	r3, [sp, #20]
 800a022:	4618      	mov	r0, r3
 800a024:	240a      	movs	r4, #10
 800a026:	460f      	mov	r7, r1
 800a028:	3101      	adds	r1, #1
 800a02a:	783a      	ldrb	r2, [r7, #0]
 800a02c:	3a30      	subs	r2, #48	; 0x30
 800a02e:	2a09      	cmp	r2, #9
 800a030:	d903      	bls.n	800a03a <_svfiprintf_r+0x192>
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0ca      	beq.n	8009fcc <_svfiprintf_r+0x124>
 800a036:	9005      	str	r0, [sp, #20]
 800a038:	e7c8      	b.n	8009fcc <_svfiprintf_r+0x124>
 800a03a:	fb04 2000 	mla	r0, r4, r0, r2
 800a03e:	2301      	movs	r3, #1
 800a040:	e7f1      	b.n	800a026 <_svfiprintf_r+0x17e>
 800a042:	ab03      	add	r3, sp, #12
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	462a      	mov	r2, r5
 800a048:	4b10      	ldr	r3, [pc, #64]	; (800a08c <_svfiprintf_r+0x1e4>)
 800a04a:	a904      	add	r1, sp, #16
 800a04c:	4640      	mov	r0, r8
 800a04e:	f3af 8000 	nop.w
 800a052:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a056:	4681      	mov	r9, r0
 800a058:	d1d9      	bne.n	800a00e <_svfiprintf_r+0x166>
 800a05a:	89ab      	ldrh	r3, [r5, #12]
 800a05c:	065b      	lsls	r3, r3, #25
 800a05e:	f53f af38 	bmi.w	8009ed2 <_svfiprintf_r+0x2a>
 800a062:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a064:	b01d      	add	sp, #116	; 0x74
 800a066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06a:	ab03      	add	r3, sp, #12
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	462a      	mov	r2, r5
 800a070:	4b06      	ldr	r3, [pc, #24]	; (800a08c <_svfiprintf_r+0x1e4>)
 800a072:	a904      	add	r1, sp, #16
 800a074:	4640      	mov	r0, r8
 800a076:	f000 f881 	bl	800a17c <_printf_i>
 800a07a:	e7ea      	b.n	800a052 <_svfiprintf_r+0x1aa>
 800a07c:	0800b23d 	.word	0x0800b23d
 800a080:	0800b243 	.word	0x0800b243
 800a084:	0800b247 	.word	0x0800b247
 800a088:	00000000 	.word	0x00000000
 800a08c:	08009df1 	.word	0x08009df1

0800a090 <_printf_common>:
 800a090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a094:	4691      	mov	r9, r2
 800a096:	461f      	mov	r7, r3
 800a098:	688a      	ldr	r2, [r1, #8]
 800a09a:	690b      	ldr	r3, [r1, #16]
 800a09c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	bfb8      	it	lt
 800a0a4:	4613      	movlt	r3, r2
 800a0a6:	f8c9 3000 	str.w	r3, [r9]
 800a0aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	460c      	mov	r4, r1
 800a0b2:	b112      	cbz	r2, 800a0ba <_printf_common+0x2a>
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	f8c9 3000 	str.w	r3, [r9]
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	0699      	lsls	r1, r3, #26
 800a0be:	bf42      	ittt	mi
 800a0c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a0c4:	3302      	addmi	r3, #2
 800a0c6:	f8c9 3000 	strmi.w	r3, [r9]
 800a0ca:	6825      	ldr	r5, [r4, #0]
 800a0cc:	f015 0506 	ands.w	r5, r5, #6
 800a0d0:	d107      	bne.n	800a0e2 <_printf_common+0x52>
 800a0d2:	f104 0a19 	add.w	sl, r4, #25
 800a0d6:	68e3      	ldr	r3, [r4, #12]
 800a0d8:	f8d9 2000 	ldr.w	r2, [r9]
 800a0dc:	1a9b      	subs	r3, r3, r2
 800a0de:	429d      	cmp	r5, r3
 800a0e0:	db29      	blt.n	800a136 <_printf_common+0xa6>
 800a0e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a0e6:	6822      	ldr	r2, [r4, #0]
 800a0e8:	3300      	adds	r3, #0
 800a0ea:	bf18      	it	ne
 800a0ec:	2301      	movne	r3, #1
 800a0ee:	0692      	lsls	r2, r2, #26
 800a0f0:	d42e      	bmi.n	800a150 <_printf_common+0xc0>
 800a0f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0f6:	4639      	mov	r1, r7
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	47c0      	blx	r8
 800a0fc:	3001      	adds	r0, #1
 800a0fe:	d021      	beq.n	800a144 <_printf_common+0xb4>
 800a100:	6823      	ldr	r3, [r4, #0]
 800a102:	68e5      	ldr	r5, [r4, #12]
 800a104:	f8d9 2000 	ldr.w	r2, [r9]
 800a108:	f003 0306 	and.w	r3, r3, #6
 800a10c:	2b04      	cmp	r3, #4
 800a10e:	bf08      	it	eq
 800a110:	1aad      	subeq	r5, r5, r2
 800a112:	68a3      	ldr	r3, [r4, #8]
 800a114:	6922      	ldr	r2, [r4, #16]
 800a116:	bf0c      	ite	eq
 800a118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a11c:	2500      	movne	r5, #0
 800a11e:	4293      	cmp	r3, r2
 800a120:	bfc4      	itt	gt
 800a122:	1a9b      	subgt	r3, r3, r2
 800a124:	18ed      	addgt	r5, r5, r3
 800a126:	f04f 0900 	mov.w	r9, #0
 800a12a:	341a      	adds	r4, #26
 800a12c:	454d      	cmp	r5, r9
 800a12e:	d11b      	bne.n	800a168 <_printf_common+0xd8>
 800a130:	2000      	movs	r0, #0
 800a132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a136:	2301      	movs	r3, #1
 800a138:	4652      	mov	r2, sl
 800a13a:	4639      	mov	r1, r7
 800a13c:	4630      	mov	r0, r6
 800a13e:	47c0      	blx	r8
 800a140:	3001      	adds	r0, #1
 800a142:	d103      	bne.n	800a14c <_printf_common+0xbc>
 800a144:	f04f 30ff 	mov.w	r0, #4294967295
 800a148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a14c:	3501      	adds	r5, #1
 800a14e:	e7c2      	b.n	800a0d6 <_printf_common+0x46>
 800a150:	18e1      	adds	r1, r4, r3
 800a152:	1c5a      	adds	r2, r3, #1
 800a154:	2030      	movs	r0, #48	; 0x30
 800a156:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a15a:	4422      	add	r2, r4
 800a15c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a160:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a164:	3302      	adds	r3, #2
 800a166:	e7c4      	b.n	800a0f2 <_printf_common+0x62>
 800a168:	2301      	movs	r3, #1
 800a16a:	4622      	mov	r2, r4
 800a16c:	4639      	mov	r1, r7
 800a16e:	4630      	mov	r0, r6
 800a170:	47c0      	blx	r8
 800a172:	3001      	adds	r0, #1
 800a174:	d0e6      	beq.n	800a144 <_printf_common+0xb4>
 800a176:	f109 0901 	add.w	r9, r9, #1
 800a17a:	e7d7      	b.n	800a12c <_printf_common+0x9c>

0800a17c <_printf_i>:
 800a17c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a180:	4617      	mov	r7, r2
 800a182:	7e0a      	ldrb	r2, [r1, #24]
 800a184:	b085      	sub	sp, #20
 800a186:	2a6e      	cmp	r2, #110	; 0x6e
 800a188:	4698      	mov	r8, r3
 800a18a:	4606      	mov	r6, r0
 800a18c:	460c      	mov	r4, r1
 800a18e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a190:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800a194:	f000 80bc 	beq.w	800a310 <_printf_i+0x194>
 800a198:	d81a      	bhi.n	800a1d0 <_printf_i+0x54>
 800a19a:	2a63      	cmp	r2, #99	; 0x63
 800a19c:	d02e      	beq.n	800a1fc <_printf_i+0x80>
 800a19e:	d80a      	bhi.n	800a1b6 <_printf_i+0x3a>
 800a1a0:	2a00      	cmp	r2, #0
 800a1a2:	f000 80c8 	beq.w	800a336 <_printf_i+0x1ba>
 800a1a6:	2a58      	cmp	r2, #88	; 0x58
 800a1a8:	f000 808a 	beq.w	800a2c0 <_printf_i+0x144>
 800a1ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1b0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800a1b4:	e02a      	b.n	800a20c <_printf_i+0x90>
 800a1b6:	2a64      	cmp	r2, #100	; 0x64
 800a1b8:	d001      	beq.n	800a1be <_printf_i+0x42>
 800a1ba:	2a69      	cmp	r2, #105	; 0x69
 800a1bc:	d1f6      	bne.n	800a1ac <_printf_i+0x30>
 800a1be:	6821      	ldr	r1, [r4, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a1c6:	d023      	beq.n	800a210 <_printf_i+0x94>
 800a1c8:	1d11      	adds	r1, r2, #4
 800a1ca:	6019      	str	r1, [r3, #0]
 800a1cc:	6813      	ldr	r3, [r2, #0]
 800a1ce:	e027      	b.n	800a220 <_printf_i+0xa4>
 800a1d0:	2a73      	cmp	r2, #115	; 0x73
 800a1d2:	f000 80b4 	beq.w	800a33e <_printf_i+0x1c2>
 800a1d6:	d808      	bhi.n	800a1ea <_printf_i+0x6e>
 800a1d8:	2a6f      	cmp	r2, #111	; 0x6f
 800a1da:	d02a      	beq.n	800a232 <_printf_i+0xb6>
 800a1dc:	2a70      	cmp	r2, #112	; 0x70
 800a1de:	d1e5      	bne.n	800a1ac <_printf_i+0x30>
 800a1e0:	680a      	ldr	r2, [r1, #0]
 800a1e2:	f042 0220 	orr.w	r2, r2, #32
 800a1e6:	600a      	str	r2, [r1, #0]
 800a1e8:	e003      	b.n	800a1f2 <_printf_i+0x76>
 800a1ea:	2a75      	cmp	r2, #117	; 0x75
 800a1ec:	d021      	beq.n	800a232 <_printf_i+0xb6>
 800a1ee:	2a78      	cmp	r2, #120	; 0x78
 800a1f0:	d1dc      	bne.n	800a1ac <_printf_i+0x30>
 800a1f2:	2278      	movs	r2, #120	; 0x78
 800a1f4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800a1f8:	496e      	ldr	r1, [pc, #440]	; (800a3b4 <_printf_i+0x238>)
 800a1fa:	e064      	b.n	800a2c6 <_printf_i+0x14a>
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800a202:	1d11      	adds	r1, r2, #4
 800a204:	6019      	str	r1, [r3, #0]
 800a206:	6813      	ldr	r3, [r2, #0]
 800a208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a20c:	2301      	movs	r3, #1
 800a20e:	e0a3      	b.n	800a358 <_printf_i+0x1dc>
 800a210:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a214:	f102 0104 	add.w	r1, r2, #4
 800a218:	6019      	str	r1, [r3, #0]
 800a21a:	d0d7      	beq.n	800a1cc <_printf_i+0x50>
 800a21c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800a220:	2b00      	cmp	r3, #0
 800a222:	da03      	bge.n	800a22c <_printf_i+0xb0>
 800a224:	222d      	movs	r2, #45	; 0x2d
 800a226:	425b      	negs	r3, r3
 800a228:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a22c:	4962      	ldr	r1, [pc, #392]	; (800a3b8 <_printf_i+0x23c>)
 800a22e:	220a      	movs	r2, #10
 800a230:	e017      	b.n	800a262 <_printf_i+0xe6>
 800a232:	6820      	ldr	r0, [r4, #0]
 800a234:	6819      	ldr	r1, [r3, #0]
 800a236:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a23a:	d003      	beq.n	800a244 <_printf_i+0xc8>
 800a23c:	1d08      	adds	r0, r1, #4
 800a23e:	6018      	str	r0, [r3, #0]
 800a240:	680b      	ldr	r3, [r1, #0]
 800a242:	e006      	b.n	800a252 <_printf_i+0xd6>
 800a244:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a248:	f101 0004 	add.w	r0, r1, #4
 800a24c:	6018      	str	r0, [r3, #0]
 800a24e:	d0f7      	beq.n	800a240 <_printf_i+0xc4>
 800a250:	880b      	ldrh	r3, [r1, #0]
 800a252:	4959      	ldr	r1, [pc, #356]	; (800a3b8 <_printf_i+0x23c>)
 800a254:	2a6f      	cmp	r2, #111	; 0x6f
 800a256:	bf14      	ite	ne
 800a258:	220a      	movne	r2, #10
 800a25a:	2208      	moveq	r2, #8
 800a25c:	2000      	movs	r0, #0
 800a25e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800a262:	6865      	ldr	r5, [r4, #4]
 800a264:	60a5      	str	r5, [r4, #8]
 800a266:	2d00      	cmp	r5, #0
 800a268:	f2c0 809c 	blt.w	800a3a4 <_printf_i+0x228>
 800a26c:	6820      	ldr	r0, [r4, #0]
 800a26e:	f020 0004 	bic.w	r0, r0, #4
 800a272:	6020      	str	r0, [r4, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d13f      	bne.n	800a2f8 <_printf_i+0x17c>
 800a278:	2d00      	cmp	r5, #0
 800a27a:	f040 8095 	bne.w	800a3a8 <_printf_i+0x22c>
 800a27e:	4675      	mov	r5, lr
 800a280:	2a08      	cmp	r2, #8
 800a282:	d10b      	bne.n	800a29c <_printf_i+0x120>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	07da      	lsls	r2, r3, #31
 800a288:	d508      	bpl.n	800a29c <_printf_i+0x120>
 800a28a:	6923      	ldr	r3, [r4, #16]
 800a28c:	6862      	ldr	r2, [r4, #4]
 800a28e:	429a      	cmp	r2, r3
 800a290:	bfde      	ittt	le
 800a292:	2330      	movle	r3, #48	; 0x30
 800a294:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a298:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a29c:	ebae 0305 	sub.w	r3, lr, r5
 800a2a0:	6123      	str	r3, [r4, #16]
 800a2a2:	f8cd 8000 	str.w	r8, [sp]
 800a2a6:	463b      	mov	r3, r7
 800a2a8:	aa03      	add	r2, sp, #12
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	f7ff feef 	bl	800a090 <_printf_common>
 800a2b2:	3001      	adds	r0, #1
 800a2b4:	d155      	bne.n	800a362 <_printf_i+0x1e6>
 800a2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ba:	b005      	add	sp, #20
 800a2bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2c0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800a2c4:	493c      	ldr	r1, [pc, #240]	; (800a3b8 <_printf_i+0x23c>)
 800a2c6:	6822      	ldr	r2, [r4, #0]
 800a2c8:	6818      	ldr	r0, [r3, #0]
 800a2ca:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a2ce:	f100 0504 	add.w	r5, r0, #4
 800a2d2:	601d      	str	r5, [r3, #0]
 800a2d4:	d001      	beq.n	800a2da <_printf_i+0x15e>
 800a2d6:	6803      	ldr	r3, [r0, #0]
 800a2d8:	e002      	b.n	800a2e0 <_printf_i+0x164>
 800a2da:	0655      	lsls	r5, r2, #25
 800a2dc:	d5fb      	bpl.n	800a2d6 <_printf_i+0x15a>
 800a2de:	8803      	ldrh	r3, [r0, #0]
 800a2e0:	07d0      	lsls	r0, r2, #31
 800a2e2:	bf44      	itt	mi
 800a2e4:	f042 0220 	orrmi.w	r2, r2, #32
 800a2e8:	6022      	strmi	r2, [r4, #0]
 800a2ea:	b91b      	cbnz	r3, 800a2f4 <_printf_i+0x178>
 800a2ec:	6822      	ldr	r2, [r4, #0]
 800a2ee:	f022 0220 	bic.w	r2, r2, #32
 800a2f2:	6022      	str	r2, [r4, #0]
 800a2f4:	2210      	movs	r2, #16
 800a2f6:	e7b1      	b.n	800a25c <_printf_i+0xe0>
 800a2f8:	4675      	mov	r5, lr
 800a2fa:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2fe:	fb02 3310 	mls	r3, r2, r0, r3
 800a302:	5ccb      	ldrb	r3, [r1, r3]
 800a304:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a308:	4603      	mov	r3, r0
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d1f5      	bne.n	800a2fa <_printf_i+0x17e>
 800a30e:	e7b7      	b.n	800a280 <_printf_i+0x104>
 800a310:	6808      	ldr	r0, [r1, #0]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	6949      	ldr	r1, [r1, #20]
 800a316:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a31a:	d004      	beq.n	800a326 <_printf_i+0x1aa>
 800a31c:	1d10      	adds	r0, r2, #4
 800a31e:	6018      	str	r0, [r3, #0]
 800a320:	6813      	ldr	r3, [r2, #0]
 800a322:	6019      	str	r1, [r3, #0]
 800a324:	e007      	b.n	800a336 <_printf_i+0x1ba>
 800a326:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a32a:	f102 0004 	add.w	r0, r2, #4
 800a32e:	6018      	str	r0, [r3, #0]
 800a330:	6813      	ldr	r3, [r2, #0]
 800a332:	d0f6      	beq.n	800a322 <_printf_i+0x1a6>
 800a334:	8019      	strh	r1, [r3, #0]
 800a336:	2300      	movs	r3, #0
 800a338:	6123      	str	r3, [r4, #16]
 800a33a:	4675      	mov	r5, lr
 800a33c:	e7b1      	b.n	800a2a2 <_printf_i+0x126>
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	1d11      	adds	r1, r2, #4
 800a342:	6019      	str	r1, [r3, #0]
 800a344:	6815      	ldr	r5, [r2, #0]
 800a346:	6862      	ldr	r2, [r4, #4]
 800a348:	2100      	movs	r1, #0
 800a34a:	4628      	mov	r0, r5
 800a34c:	f7f5 ff58 	bl	8000200 <memchr>
 800a350:	b108      	cbz	r0, 800a356 <_printf_i+0x1da>
 800a352:	1b40      	subs	r0, r0, r5
 800a354:	6060      	str	r0, [r4, #4]
 800a356:	6863      	ldr	r3, [r4, #4]
 800a358:	6123      	str	r3, [r4, #16]
 800a35a:	2300      	movs	r3, #0
 800a35c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a360:	e79f      	b.n	800a2a2 <_printf_i+0x126>
 800a362:	6923      	ldr	r3, [r4, #16]
 800a364:	462a      	mov	r2, r5
 800a366:	4639      	mov	r1, r7
 800a368:	4630      	mov	r0, r6
 800a36a:	47c0      	blx	r8
 800a36c:	3001      	adds	r0, #1
 800a36e:	d0a2      	beq.n	800a2b6 <_printf_i+0x13a>
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	079b      	lsls	r3, r3, #30
 800a374:	d507      	bpl.n	800a386 <_printf_i+0x20a>
 800a376:	2500      	movs	r5, #0
 800a378:	f104 0919 	add.w	r9, r4, #25
 800a37c:	68e3      	ldr	r3, [r4, #12]
 800a37e:	9a03      	ldr	r2, [sp, #12]
 800a380:	1a9b      	subs	r3, r3, r2
 800a382:	429d      	cmp	r5, r3
 800a384:	db05      	blt.n	800a392 <_printf_i+0x216>
 800a386:	68e0      	ldr	r0, [r4, #12]
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	4298      	cmp	r0, r3
 800a38c:	bfb8      	it	lt
 800a38e:	4618      	movlt	r0, r3
 800a390:	e793      	b.n	800a2ba <_printf_i+0x13e>
 800a392:	2301      	movs	r3, #1
 800a394:	464a      	mov	r2, r9
 800a396:	4639      	mov	r1, r7
 800a398:	4630      	mov	r0, r6
 800a39a:	47c0      	blx	r8
 800a39c:	3001      	adds	r0, #1
 800a39e:	d08a      	beq.n	800a2b6 <_printf_i+0x13a>
 800a3a0:	3501      	adds	r5, #1
 800a3a2:	e7eb      	b.n	800a37c <_printf_i+0x200>
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1a7      	bne.n	800a2f8 <_printf_i+0x17c>
 800a3a8:	780b      	ldrb	r3, [r1, #0]
 800a3aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3b2:	e765      	b.n	800a280 <_printf_i+0x104>
 800a3b4:	0800b25f 	.word	0x0800b25f
 800a3b8:	0800b24e 	.word	0x0800b24e

0800a3bc <_sbrk_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4c06      	ldr	r4, [pc, #24]	; (800a3d8 <_sbrk_r+0x1c>)
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	4605      	mov	r5, r0
 800a3c4:	4608      	mov	r0, r1
 800a3c6:	6023      	str	r3, [r4, #0]
 800a3c8:	f7fe fbf8 	bl	8008bbc <_sbrk>
 800a3cc:	1c43      	adds	r3, r0, #1
 800a3ce:	d102      	bne.n	800a3d6 <_sbrk_r+0x1a>
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	b103      	cbz	r3, 800a3d6 <_sbrk_r+0x1a>
 800a3d4:	602b      	str	r3, [r5, #0]
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}
 800a3d8:	200192f8 	.word	0x200192f8

0800a3dc <siscanf>:
 800a3dc:	b40e      	push	{r1, r2, r3}
 800a3de:	b530      	push	{r4, r5, lr}
 800a3e0:	b09c      	sub	sp, #112	; 0x70
 800a3e2:	ac1f      	add	r4, sp, #124	; 0x7c
 800a3e4:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a3e8:	f854 5b04 	ldr.w	r5, [r4], #4
 800a3ec:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a3f0:	9002      	str	r0, [sp, #8]
 800a3f2:	9006      	str	r0, [sp, #24]
 800a3f4:	f7f5 fef6 	bl	80001e4 <strlen>
 800a3f8:	4b0b      	ldr	r3, [pc, #44]	; (800a428 <siscanf+0x4c>)
 800a3fa:	9003      	str	r0, [sp, #12]
 800a3fc:	9007      	str	r0, [sp, #28]
 800a3fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800a400:	480a      	ldr	r0, [pc, #40]	; (800a42c <siscanf+0x50>)
 800a402:	9401      	str	r4, [sp, #4]
 800a404:	2300      	movs	r3, #0
 800a406:	930f      	str	r3, [sp, #60]	; 0x3c
 800a408:	9314      	str	r3, [sp, #80]	; 0x50
 800a40a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a40e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a412:	462a      	mov	r2, r5
 800a414:	4623      	mov	r3, r4
 800a416:	a902      	add	r1, sp, #8
 800a418:	6800      	ldr	r0, [r0, #0]
 800a41a:	f000 f94f 	bl	800a6bc <__ssvfiscanf_r>
 800a41e:	b01c      	add	sp, #112	; 0x70
 800a420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a424:	b003      	add	sp, #12
 800a426:	4770      	bx	lr
 800a428:	0800a431 	.word	0x0800a431
 800a42c:	20000010 	.word	0x20000010

0800a430 <__seofread>:
 800a430:	2000      	movs	r0, #0
 800a432:	4770      	bx	lr

0800a434 <_strtoul_l.isra.0>:
 800a434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a438:	4680      	mov	r8, r0
 800a43a:	4689      	mov	r9, r1
 800a43c:	4692      	mov	sl, r2
 800a43e:	461e      	mov	r6, r3
 800a440:	460f      	mov	r7, r1
 800a442:	463d      	mov	r5, r7
 800a444:	9808      	ldr	r0, [sp, #32]
 800a446:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a44a:	f7fe fd31 	bl	8008eb0 <__locale_ctype_ptr_l>
 800a44e:	4420      	add	r0, r4
 800a450:	7843      	ldrb	r3, [r0, #1]
 800a452:	f013 0308 	ands.w	r3, r3, #8
 800a456:	d10a      	bne.n	800a46e <_strtoul_l.isra.0+0x3a>
 800a458:	2c2d      	cmp	r4, #45	; 0x2d
 800a45a:	d10a      	bne.n	800a472 <_strtoul_l.isra.0+0x3e>
 800a45c:	782c      	ldrb	r4, [r5, #0]
 800a45e:	2301      	movs	r3, #1
 800a460:	1cbd      	adds	r5, r7, #2
 800a462:	b15e      	cbz	r6, 800a47c <_strtoul_l.isra.0+0x48>
 800a464:	2e10      	cmp	r6, #16
 800a466:	d113      	bne.n	800a490 <_strtoul_l.isra.0+0x5c>
 800a468:	2c30      	cmp	r4, #48	; 0x30
 800a46a:	d009      	beq.n	800a480 <_strtoul_l.isra.0+0x4c>
 800a46c:	e010      	b.n	800a490 <_strtoul_l.isra.0+0x5c>
 800a46e:	462f      	mov	r7, r5
 800a470:	e7e7      	b.n	800a442 <_strtoul_l.isra.0+0xe>
 800a472:	2c2b      	cmp	r4, #43	; 0x2b
 800a474:	bf04      	itt	eq
 800a476:	782c      	ldrbeq	r4, [r5, #0]
 800a478:	1cbd      	addeq	r5, r7, #2
 800a47a:	e7f2      	b.n	800a462 <_strtoul_l.isra.0+0x2e>
 800a47c:	2c30      	cmp	r4, #48	; 0x30
 800a47e:	d125      	bne.n	800a4cc <_strtoul_l.isra.0+0x98>
 800a480:	782a      	ldrb	r2, [r5, #0]
 800a482:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a486:	2a58      	cmp	r2, #88	; 0x58
 800a488:	d14a      	bne.n	800a520 <_strtoul_l.isra.0+0xec>
 800a48a:	786c      	ldrb	r4, [r5, #1]
 800a48c:	2610      	movs	r6, #16
 800a48e:	3502      	adds	r5, #2
 800a490:	f04f 31ff 	mov.w	r1, #4294967295
 800a494:	2700      	movs	r7, #0
 800a496:	fbb1 f1f6 	udiv	r1, r1, r6
 800a49a:	fb06 fe01 	mul.w	lr, r6, r1
 800a49e:	ea6f 0e0e 	mvn.w	lr, lr
 800a4a2:	4638      	mov	r0, r7
 800a4a4:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800a4a8:	2a09      	cmp	r2, #9
 800a4aa:	d811      	bhi.n	800a4d0 <_strtoul_l.isra.0+0x9c>
 800a4ac:	4614      	mov	r4, r2
 800a4ae:	42a6      	cmp	r6, r4
 800a4b0:	dd1d      	ble.n	800a4ee <_strtoul_l.isra.0+0xba>
 800a4b2:	2f00      	cmp	r7, #0
 800a4b4:	db18      	blt.n	800a4e8 <_strtoul_l.isra.0+0xb4>
 800a4b6:	4281      	cmp	r1, r0
 800a4b8:	d316      	bcc.n	800a4e8 <_strtoul_l.isra.0+0xb4>
 800a4ba:	d101      	bne.n	800a4c0 <_strtoul_l.isra.0+0x8c>
 800a4bc:	45a6      	cmp	lr, r4
 800a4be:	db13      	blt.n	800a4e8 <_strtoul_l.isra.0+0xb4>
 800a4c0:	fb00 4006 	mla	r0, r0, r6, r4
 800a4c4:	2701      	movs	r7, #1
 800a4c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4ca:	e7eb      	b.n	800a4a4 <_strtoul_l.isra.0+0x70>
 800a4cc:	260a      	movs	r6, #10
 800a4ce:	e7df      	b.n	800a490 <_strtoul_l.isra.0+0x5c>
 800a4d0:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800a4d4:	2a19      	cmp	r2, #25
 800a4d6:	d801      	bhi.n	800a4dc <_strtoul_l.isra.0+0xa8>
 800a4d8:	3c37      	subs	r4, #55	; 0x37
 800a4da:	e7e8      	b.n	800a4ae <_strtoul_l.isra.0+0x7a>
 800a4dc:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800a4e0:	2a19      	cmp	r2, #25
 800a4e2:	d804      	bhi.n	800a4ee <_strtoul_l.isra.0+0xba>
 800a4e4:	3c57      	subs	r4, #87	; 0x57
 800a4e6:	e7e2      	b.n	800a4ae <_strtoul_l.isra.0+0x7a>
 800a4e8:	f04f 37ff 	mov.w	r7, #4294967295
 800a4ec:	e7eb      	b.n	800a4c6 <_strtoul_l.isra.0+0x92>
 800a4ee:	2f00      	cmp	r7, #0
 800a4f0:	da09      	bge.n	800a506 <_strtoul_l.isra.0+0xd2>
 800a4f2:	2322      	movs	r3, #34	; 0x22
 800a4f4:	f8c8 3000 	str.w	r3, [r8]
 800a4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4fc:	f1ba 0f00 	cmp.w	sl, #0
 800a500:	d107      	bne.n	800a512 <_strtoul_l.isra.0+0xde>
 800a502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a506:	b103      	cbz	r3, 800a50a <_strtoul_l.isra.0+0xd6>
 800a508:	4240      	negs	r0, r0
 800a50a:	f1ba 0f00 	cmp.w	sl, #0
 800a50e:	d00c      	beq.n	800a52a <_strtoul_l.isra.0+0xf6>
 800a510:	b127      	cbz	r7, 800a51c <_strtoul_l.isra.0+0xe8>
 800a512:	3d01      	subs	r5, #1
 800a514:	f8ca 5000 	str.w	r5, [sl]
 800a518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a51c:	464d      	mov	r5, r9
 800a51e:	e7f9      	b.n	800a514 <_strtoul_l.isra.0+0xe0>
 800a520:	2430      	movs	r4, #48	; 0x30
 800a522:	2e00      	cmp	r6, #0
 800a524:	d1b4      	bne.n	800a490 <_strtoul_l.isra.0+0x5c>
 800a526:	2608      	movs	r6, #8
 800a528:	e7b2      	b.n	800a490 <_strtoul_l.isra.0+0x5c>
 800a52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800a530 <_strtoul_r>:
 800a530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a532:	4c06      	ldr	r4, [pc, #24]	; (800a54c <_strtoul_r+0x1c>)
 800a534:	4d06      	ldr	r5, [pc, #24]	; (800a550 <_strtoul_r+0x20>)
 800a536:	6824      	ldr	r4, [r4, #0]
 800a538:	6a24      	ldr	r4, [r4, #32]
 800a53a:	2c00      	cmp	r4, #0
 800a53c:	bf08      	it	eq
 800a53e:	462c      	moveq	r4, r5
 800a540:	9400      	str	r4, [sp, #0]
 800a542:	f7ff ff77 	bl	800a434 <_strtoul_l.isra.0>
 800a546:	b003      	add	sp, #12
 800a548:	bd30      	pop	{r4, r5, pc}
 800a54a:	bf00      	nop
 800a54c:	20000010 	.word	0x20000010
 800a550:	20000074 	.word	0x20000074

0800a554 <strtoul>:
 800a554:	4b08      	ldr	r3, [pc, #32]	; (800a578 <strtoul+0x24>)
 800a556:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a558:	681c      	ldr	r4, [r3, #0]
 800a55a:	4d08      	ldr	r5, [pc, #32]	; (800a57c <strtoul+0x28>)
 800a55c:	6a23      	ldr	r3, [r4, #32]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	bf08      	it	eq
 800a562:	462b      	moveq	r3, r5
 800a564:	9300      	str	r3, [sp, #0]
 800a566:	4613      	mov	r3, r2
 800a568:	460a      	mov	r2, r1
 800a56a:	4601      	mov	r1, r0
 800a56c:	4620      	mov	r0, r4
 800a56e:	f7ff ff61 	bl	800a434 <_strtoul_l.isra.0>
 800a572:	b003      	add	sp, #12
 800a574:	bd30      	pop	{r4, r5, pc}
 800a576:	bf00      	nop
 800a578:	20000010 	.word	0x20000010
 800a57c:	20000074 	.word	0x20000074

0800a580 <__env_lock>:
 800a580:	4770      	bx	lr

0800a582 <__env_unlock>:
 800a582:	4770      	bx	lr

0800a584 <memmove>:
 800a584:	4288      	cmp	r0, r1
 800a586:	b510      	push	{r4, lr}
 800a588:	eb01 0302 	add.w	r3, r1, r2
 800a58c:	d803      	bhi.n	800a596 <memmove+0x12>
 800a58e:	1e42      	subs	r2, r0, #1
 800a590:	4299      	cmp	r1, r3
 800a592:	d10c      	bne.n	800a5ae <memmove+0x2a>
 800a594:	bd10      	pop	{r4, pc}
 800a596:	4298      	cmp	r0, r3
 800a598:	d2f9      	bcs.n	800a58e <memmove+0xa>
 800a59a:	1881      	adds	r1, r0, r2
 800a59c:	1ad2      	subs	r2, r2, r3
 800a59e:	42d3      	cmn	r3, r2
 800a5a0:	d100      	bne.n	800a5a4 <memmove+0x20>
 800a5a2:	bd10      	pop	{r4, pc}
 800a5a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5a8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a5ac:	e7f7      	b.n	800a59e <memmove+0x1a>
 800a5ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5b2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a5b6:	e7eb      	b.n	800a590 <memmove+0xc>

0800a5b8 <__malloc_lock>:
 800a5b8:	4770      	bx	lr

0800a5ba <__malloc_unlock>:
 800a5ba:	4770      	bx	lr

0800a5bc <_realloc_r>:
 800a5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5be:	4607      	mov	r7, r0
 800a5c0:	4614      	mov	r4, r2
 800a5c2:	460e      	mov	r6, r1
 800a5c4:	b921      	cbnz	r1, 800a5d0 <_realloc_r+0x14>
 800a5c6:	4611      	mov	r1, r2
 800a5c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5cc:	f7ff bbb2 	b.w	8009d34 <_malloc_r>
 800a5d0:	b922      	cbnz	r2, 800a5dc <_realloc_r+0x20>
 800a5d2:	f7ff fb61 	bl	8009c98 <_free_r>
 800a5d6:	4625      	mov	r5, r4
 800a5d8:	4628      	mov	r0, r5
 800a5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5dc:	f000 fb85 	bl	800acea <_malloc_usable_size_r>
 800a5e0:	4284      	cmp	r4, r0
 800a5e2:	d90f      	bls.n	800a604 <_realloc_r+0x48>
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	f7ff fba4 	bl	8009d34 <_malloc_r>
 800a5ec:	4605      	mov	r5, r0
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d0f2      	beq.n	800a5d8 <_realloc_r+0x1c>
 800a5f2:	4631      	mov	r1, r6
 800a5f4:	4622      	mov	r2, r4
 800a5f6:	f7fe fc8e 	bl	8008f16 <memcpy>
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	4638      	mov	r0, r7
 800a5fe:	f7ff fb4b 	bl	8009c98 <_free_r>
 800a602:	e7e9      	b.n	800a5d8 <_realloc_r+0x1c>
 800a604:	4635      	mov	r5, r6
 800a606:	e7e7      	b.n	800a5d8 <_realloc_r+0x1c>

0800a608 <_sungetc_r>:
 800a608:	b538      	push	{r3, r4, r5, lr}
 800a60a:	1c4b      	adds	r3, r1, #1
 800a60c:	4614      	mov	r4, r2
 800a60e:	d103      	bne.n	800a618 <_sungetc_r+0x10>
 800a610:	f04f 35ff 	mov.w	r5, #4294967295
 800a614:	4628      	mov	r0, r5
 800a616:	bd38      	pop	{r3, r4, r5, pc}
 800a618:	8993      	ldrh	r3, [r2, #12]
 800a61a:	f023 0320 	bic.w	r3, r3, #32
 800a61e:	8193      	strh	r3, [r2, #12]
 800a620:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a622:	6852      	ldr	r2, [r2, #4]
 800a624:	b2cd      	uxtb	r5, r1
 800a626:	b18b      	cbz	r3, 800a64c <_sungetc_r+0x44>
 800a628:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a62a:	429a      	cmp	r2, r3
 800a62c:	da08      	bge.n	800a640 <_sungetc_r+0x38>
 800a62e:	6823      	ldr	r3, [r4, #0]
 800a630:	1e5a      	subs	r2, r3, #1
 800a632:	6022      	str	r2, [r4, #0]
 800a634:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a638:	6863      	ldr	r3, [r4, #4]
 800a63a:	3301      	adds	r3, #1
 800a63c:	6063      	str	r3, [r4, #4]
 800a63e:	e7e9      	b.n	800a614 <_sungetc_r+0xc>
 800a640:	4621      	mov	r1, r4
 800a642:	f000 fb17 	bl	800ac74 <__submore>
 800a646:	2800      	cmp	r0, #0
 800a648:	d0f1      	beq.n	800a62e <_sungetc_r+0x26>
 800a64a:	e7e1      	b.n	800a610 <_sungetc_r+0x8>
 800a64c:	6921      	ldr	r1, [r4, #16]
 800a64e:	6823      	ldr	r3, [r4, #0]
 800a650:	b151      	cbz	r1, 800a668 <_sungetc_r+0x60>
 800a652:	4299      	cmp	r1, r3
 800a654:	d208      	bcs.n	800a668 <_sungetc_r+0x60>
 800a656:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a65a:	428d      	cmp	r5, r1
 800a65c:	d104      	bne.n	800a668 <_sungetc_r+0x60>
 800a65e:	3b01      	subs	r3, #1
 800a660:	3201      	adds	r2, #1
 800a662:	6023      	str	r3, [r4, #0]
 800a664:	6062      	str	r2, [r4, #4]
 800a666:	e7d5      	b.n	800a614 <_sungetc_r+0xc>
 800a668:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a66a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a66e:	6363      	str	r3, [r4, #52]	; 0x34
 800a670:	2303      	movs	r3, #3
 800a672:	63a3      	str	r3, [r4, #56]	; 0x38
 800a674:	4623      	mov	r3, r4
 800a676:	6422      	str	r2, [r4, #64]	; 0x40
 800a678:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	2301      	movs	r3, #1
 800a680:	e7dc      	b.n	800a63c <_sungetc_r+0x34>

0800a682 <__ssrefill_r>:
 800a682:	b510      	push	{r4, lr}
 800a684:	460c      	mov	r4, r1
 800a686:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a688:	b169      	cbz	r1, 800a6a6 <__ssrefill_r+0x24>
 800a68a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a68e:	4299      	cmp	r1, r3
 800a690:	d001      	beq.n	800a696 <__ssrefill_r+0x14>
 800a692:	f7ff fb01 	bl	8009c98 <_free_r>
 800a696:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a698:	6063      	str	r3, [r4, #4]
 800a69a:	2000      	movs	r0, #0
 800a69c:	6360      	str	r0, [r4, #52]	; 0x34
 800a69e:	b113      	cbz	r3, 800a6a6 <__ssrefill_r+0x24>
 800a6a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a6a2:	6023      	str	r3, [r4, #0]
 800a6a4:	bd10      	pop	{r4, pc}
 800a6a6:	6923      	ldr	r3, [r4, #16]
 800a6a8:	6023      	str	r3, [r4, #0]
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	6063      	str	r3, [r4, #4]
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	f043 0320 	orr.w	r3, r3, #32
 800a6b4:	81a3      	strh	r3, [r4, #12]
 800a6b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ba:	bd10      	pop	{r4, pc}

0800a6bc <__ssvfiscanf_r>:
 800a6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c0:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800a6c4:	f10d 080c 	add.w	r8, sp, #12
 800a6c8:	9301      	str	r3, [sp, #4]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	9346      	str	r3, [sp, #280]	; 0x118
 800a6ce:	9347      	str	r3, [sp, #284]	; 0x11c
 800a6d0:	4ba0      	ldr	r3, [pc, #640]	; (800a954 <__ssvfiscanf_r+0x298>)
 800a6d2:	93a2      	str	r3, [sp, #648]	; 0x288
 800a6d4:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800a95c <__ssvfiscanf_r+0x2a0>
 800a6d8:	4b9f      	ldr	r3, [pc, #636]	; (800a958 <__ssvfiscanf_r+0x29c>)
 800a6da:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800a6de:	4606      	mov	r6, r0
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	93a3      	str	r3, [sp, #652]	; 0x28c
 800a6e4:	4692      	mov	sl, r2
 800a6e6:	270a      	movs	r7, #10
 800a6e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f000 812f 	beq.w	800a950 <__ssvfiscanf_r+0x294>
 800a6f2:	f7fe fbe1 	bl	8008eb8 <__locale_ctype_ptr>
 800a6f6:	f89a b000 	ldrb.w	fp, [sl]
 800a6fa:	4458      	add	r0, fp
 800a6fc:	7843      	ldrb	r3, [r0, #1]
 800a6fe:	f013 0308 	ands.w	r3, r3, #8
 800a702:	d143      	bne.n	800a78c <__ssvfiscanf_r+0xd0>
 800a704:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800a708:	f10a 0501 	add.w	r5, sl, #1
 800a70c:	f040 8099 	bne.w	800a842 <__ssvfiscanf_r+0x186>
 800a710:	9345      	str	r3, [sp, #276]	; 0x114
 800a712:	9343      	str	r3, [sp, #268]	; 0x10c
 800a714:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a718:	2b2a      	cmp	r3, #42	; 0x2a
 800a71a:	d103      	bne.n	800a724 <__ssvfiscanf_r+0x68>
 800a71c:	2310      	movs	r3, #16
 800a71e:	9343      	str	r3, [sp, #268]	; 0x10c
 800a720:	f10a 0502 	add.w	r5, sl, #2
 800a724:	7829      	ldrb	r1, [r5, #0]
 800a726:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a72a:	2a09      	cmp	r2, #9
 800a72c:	46aa      	mov	sl, r5
 800a72e:	f105 0501 	add.w	r5, r5, #1
 800a732:	d941      	bls.n	800a7b8 <__ssvfiscanf_r+0xfc>
 800a734:	2203      	movs	r2, #3
 800a736:	4889      	ldr	r0, [pc, #548]	; (800a95c <__ssvfiscanf_r+0x2a0>)
 800a738:	f7f5 fd62 	bl	8000200 <memchr>
 800a73c:	b138      	cbz	r0, 800a74e <__ssvfiscanf_r+0x92>
 800a73e:	eba0 0309 	sub.w	r3, r0, r9
 800a742:	2001      	movs	r0, #1
 800a744:	4098      	lsls	r0, r3
 800a746:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a748:	4318      	orrs	r0, r3
 800a74a:	9043      	str	r0, [sp, #268]	; 0x10c
 800a74c:	46aa      	mov	sl, r5
 800a74e:	f89a 3000 	ldrb.w	r3, [sl]
 800a752:	2b67      	cmp	r3, #103	; 0x67
 800a754:	f10a 0501 	add.w	r5, sl, #1
 800a758:	d84a      	bhi.n	800a7f0 <__ssvfiscanf_r+0x134>
 800a75a:	2b65      	cmp	r3, #101	; 0x65
 800a75c:	f080 80b7 	bcs.w	800a8ce <__ssvfiscanf_r+0x212>
 800a760:	2b47      	cmp	r3, #71	; 0x47
 800a762:	d82f      	bhi.n	800a7c4 <__ssvfiscanf_r+0x108>
 800a764:	2b45      	cmp	r3, #69	; 0x45
 800a766:	f080 80b2 	bcs.w	800a8ce <__ssvfiscanf_r+0x212>
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f000 8082 	beq.w	800a874 <__ssvfiscanf_r+0x1b8>
 800a770:	2b25      	cmp	r3, #37	; 0x25
 800a772:	d066      	beq.n	800a842 <__ssvfiscanf_r+0x186>
 800a774:	2303      	movs	r3, #3
 800a776:	9349      	str	r3, [sp, #292]	; 0x124
 800a778:	9744      	str	r7, [sp, #272]	; 0x110
 800a77a:	e045      	b.n	800a808 <__ssvfiscanf_r+0x14c>
 800a77c:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800a77e:	3101      	adds	r1, #1
 800a780:	9147      	str	r1, [sp, #284]	; 0x11c
 800a782:	6861      	ldr	r1, [r4, #4]
 800a784:	3301      	adds	r3, #1
 800a786:	3901      	subs	r1, #1
 800a788:	6061      	str	r1, [r4, #4]
 800a78a:	6023      	str	r3, [r4, #0]
 800a78c:	6863      	ldr	r3, [r4, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	dd0b      	ble.n	800a7aa <__ssvfiscanf_r+0xee>
 800a792:	f7fe fb91 	bl	8008eb8 <__locale_ctype_ptr>
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	7819      	ldrb	r1, [r3, #0]
 800a79a:	4408      	add	r0, r1
 800a79c:	7841      	ldrb	r1, [r0, #1]
 800a79e:	070d      	lsls	r5, r1, #28
 800a7a0:	d4ec      	bmi.n	800a77c <__ssvfiscanf_r+0xc0>
 800a7a2:	f10a 0501 	add.w	r5, sl, #1
 800a7a6:	46aa      	mov	sl, r5
 800a7a8:	e79e      	b.n	800a6e8 <__ssvfiscanf_r+0x2c>
 800a7aa:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	4798      	blx	r3
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d0ed      	beq.n	800a792 <__ssvfiscanf_r+0xd6>
 800a7b6:	e7f4      	b.n	800a7a2 <__ssvfiscanf_r+0xe6>
 800a7b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a7ba:	fb07 1303 	mla	r3, r7, r3, r1
 800a7be:	3b30      	subs	r3, #48	; 0x30
 800a7c0:	9345      	str	r3, [sp, #276]	; 0x114
 800a7c2:	e7af      	b.n	800a724 <__ssvfiscanf_r+0x68>
 800a7c4:	2b5b      	cmp	r3, #91	; 0x5b
 800a7c6:	d061      	beq.n	800a88c <__ssvfiscanf_r+0x1d0>
 800a7c8:	d80c      	bhi.n	800a7e4 <__ssvfiscanf_r+0x128>
 800a7ca:	2b58      	cmp	r3, #88	; 0x58
 800a7cc:	d1d2      	bne.n	800a774 <__ssvfiscanf_r+0xb8>
 800a7ce:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a7d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7d4:	9243      	str	r2, [sp, #268]	; 0x10c
 800a7d6:	2210      	movs	r2, #16
 800a7d8:	9244      	str	r2, [sp, #272]	; 0x110
 800a7da:	2b6f      	cmp	r3, #111	; 0x6f
 800a7dc:	bfb4      	ite	lt
 800a7de:	2303      	movlt	r3, #3
 800a7e0:	2304      	movge	r3, #4
 800a7e2:	e010      	b.n	800a806 <__ssvfiscanf_r+0x14a>
 800a7e4:	2b63      	cmp	r3, #99	; 0x63
 800a7e6:	d05c      	beq.n	800a8a2 <__ssvfiscanf_r+0x1e6>
 800a7e8:	2b64      	cmp	r3, #100	; 0x64
 800a7ea:	d1c3      	bne.n	800a774 <__ssvfiscanf_r+0xb8>
 800a7ec:	9744      	str	r7, [sp, #272]	; 0x110
 800a7ee:	e7f4      	b.n	800a7da <__ssvfiscanf_r+0x11e>
 800a7f0:	2b70      	cmp	r3, #112	; 0x70
 800a7f2:	d042      	beq.n	800a87a <__ssvfiscanf_r+0x1be>
 800a7f4:	d81d      	bhi.n	800a832 <__ssvfiscanf_r+0x176>
 800a7f6:	2b6e      	cmp	r3, #110	; 0x6e
 800a7f8:	d059      	beq.n	800a8ae <__ssvfiscanf_r+0x1f2>
 800a7fa:	d843      	bhi.n	800a884 <__ssvfiscanf_r+0x1c8>
 800a7fc:	2b69      	cmp	r3, #105	; 0x69
 800a7fe:	d1b9      	bne.n	800a774 <__ssvfiscanf_r+0xb8>
 800a800:	2300      	movs	r3, #0
 800a802:	9344      	str	r3, [sp, #272]	; 0x110
 800a804:	2303      	movs	r3, #3
 800a806:	9349      	str	r3, [sp, #292]	; 0x124
 800a808:	6863      	ldr	r3, [r4, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	dd61      	ble.n	800a8d2 <__ssvfiscanf_r+0x216>
 800a80e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a810:	0659      	lsls	r1, r3, #25
 800a812:	d56f      	bpl.n	800a8f4 <__ssvfiscanf_r+0x238>
 800a814:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800a816:	2b02      	cmp	r3, #2
 800a818:	dc7c      	bgt.n	800a914 <__ssvfiscanf_r+0x258>
 800a81a:	ab01      	add	r3, sp, #4
 800a81c:	4622      	mov	r2, r4
 800a81e:	a943      	add	r1, sp, #268	; 0x10c
 800a820:	4630      	mov	r0, r6
 800a822:	f000 f89f 	bl	800a964 <_scanf_chars>
 800a826:	2801      	cmp	r0, #1
 800a828:	f000 8092 	beq.w	800a950 <__ssvfiscanf_r+0x294>
 800a82c:	2802      	cmp	r0, #2
 800a82e:	d1ba      	bne.n	800a7a6 <__ssvfiscanf_r+0xea>
 800a830:	e01d      	b.n	800a86e <__ssvfiscanf_r+0x1b2>
 800a832:	2b75      	cmp	r3, #117	; 0x75
 800a834:	d0da      	beq.n	800a7ec <__ssvfiscanf_r+0x130>
 800a836:	2b78      	cmp	r3, #120	; 0x78
 800a838:	d0c9      	beq.n	800a7ce <__ssvfiscanf_r+0x112>
 800a83a:	2b73      	cmp	r3, #115	; 0x73
 800a83c:	d19a      	bne.n	800a774 <__ssvfiscanf_r+0xb8>
 800a83e:	2302      	movs	r3, #2
 800a840:	e7e1      	b.n	800a806 <__ssvfiscanf_r+0x14a>
 800a842:	6863      	ldr	r3, [r4, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	dd0c      	ble.n	800a862 <__ssvfiscanf_r+0x1a6>
 800a848:	6823      	ldr	r3, [r4, #0]
 800a84a:	781a      	ldrb	r2, [r3, #0]
 800a84c:	4593      	cmp	fp, r2
 800a84e:	d17f      	bne.n	800a950 <__ssvfiscanf_r+0x294>
 800a850:	3301      	adds	r3, #1
 800a852:	6862      	ldr	r2, [r4, #4]
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a858:	3a01      	subs	r2, #1
 800a85a:	3301      	adds	r3, #1
 800a85c:	6062      	str	r2, [r4, #4]
 800a85e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a860:	e7a1      	b.n	800a7a6 <__ssvfiscanf_r+0xea>
 800a862:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a864:	4621      	mov	r1, r4
 800a866:	4630      	mov	r0, r6
 800a868:	4798      	blx	r3
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d0ec      	beq.n	800a848 <__ssvfiscanf_r+0x18c>
 800a86e:	9846      	ldr	r0, [sp, #280]	; 0x118
 800a870:	2800      	cmp	r0, #0
 800a872:	d163      	bne.n	800a93c <__ssvfiscanf_r+0x280>
 800a874:	f04f 30ff 	mov.w	r0, #4294967295
 800a878:	e066      	b.n	800a948 <__ssvfiscanf_r+0x28c>
 800a87a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a87c:	f042 0220 	orr.w	r2, r2, #32
 800a880:	9243      	str	r2, [sp, #268]	; 0x10c
 800a882:	e7a4      	b.n	800a7ce <__ssvfiscanf_r+0x112>
 800a884:	2308      	movs	r3, #8
 800a886:	9344      	str	r3, [sp, #272]	; 0x110
 800a888:	2304      	movs	r3, #4
 800a88a:	e7bc      	b.n	800a806 <__ssvfiscanf_r+0x14a>
 800a88c:	4629      	mov	r1, r5
 800a88e:	4640      	mov	r0, r8
 800a890:	f000 f9c0 	bl	800ac14 <__sccl>
 800a894:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a89a:	9343      	str	r3, [sp, #268]	; 0x10c
 800a89c:	4605      	mov	r5, r0
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e7b1      	b.n	800a806 <__ssvfiscanf_r+0x14a>
 800a8a2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a8a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a8:	9343      	str	r3, [sp, #268]	; 0x10c
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	e7ab      	b.n	800a806 <__ssvfiscanf_r+0x14a>
 800a8ae:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a8b0:	06d0      	lsls	r0, r2, #27
 800a8b2:	f53f af78 	bmi.w	800a7a6 <__ssvfiscanf_r+0xea>
 800a8b6:	f012 0f01 	tst.w	r2, #1
 800a8ba:	9a01      	ldr	r2, [sp, #4]
 800a8bc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a8be:	f102 0104 	add.w	r1, r2, #4
 800a8c2:	9101      	str	r1, [sp, #4]
 800a8c4:	6812      	ldr	r2, [r2, #0]
 800a8c6:	bf14      	ite	ne
 800a8c8:	8013      	strhne	r3, [r2, #0]
 800a8ca:	6013      	streq	r3, [r2, #0]
 800a8cc:	e76b      	b.n	800a7a6 <__ssvfiscanf_r+0xea>
 800a8ce:	2305      	movs	r3, #5
 800a8d0:	e799      	b.n	800a806 <__ssvfiscanf_r+0x14a>
 800a8d2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	4798      	blx	r3
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d097      	beq.n	800a80e <__ssvfiscanf_r+0x152>
 800a8de:	e7c6      	b.n	800a86e <__ssvfiscanf_r+0x1b2>
 800a8e0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800a8e2:	3201      	adds	r2, #1
 800a8e4:	9247      	str	r2, [sp, #284]	; 0x11c
 800a8e6:	6862      	ldr	r2, [r4, #4]
 800a8e8:	3a01      	subs	r2, #1
 800a8ea:	2a00      	cmp	r2, #0
 800a8ec:	6062      	str	r2, [r4, #4]
 800a8ee:	dd0a      	ble.n	800a906 <__ssvfiscanf_r+0x24a>
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	6023      	str	r3, [r4, #0]
 800a8f4:	f7fe fae0 	bl	8008eb8 <__locale_ctype_ptr>
 800a8f8:	6823      	ldr	r3, [r4, #0]
 800a8fa:	781a      	ldrb	r2, [r3, #0]
 800a8fc:	4410      	add	r0, r2
 800a8fe:	7842      	ldrb	r2, [r0, #1]
 800a900:	0712      	lsls	r2, r2, #28
 800a902:	d4ed      	bmi.n	800a8e0 <__ssvfiscanf_r+0x224>
 800a904:	e786      	b.n	800a814 <__ssvfiscanf_r+0x158>
 800a906:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a908:	4621      	mov	r1, r4
 800a90a:	4630      	mov	r0, r6
 800a90c:	4798      	blx	r3
 800a90e:	2800      	cmp	r0, #0
 800a910:	d0f0      	beq.n	800a8f4 <__ssvfiscanf_r+0x238>
 800a912:	e7ac      	b.n	800a86e <__ssvfiscanf_r+0x1b2>
 800a914:	2b04      	cmp	r3, #4
 800a916:	dc06      	bgt.n	800a926 <__ssvfiscanf_r+0x26a>
 800a918:	ab01      	add	r3, sp, #4
 800a91a:	4622      	mov	r2, r4
 800a91c:	a943      	add	r1, sp, #268	; 0x10c
 800a91e:	4630      	mov	r0, r6
 800a920:	f000 f884 	bl	800aa2c <_scanf_i>
 800a924:	e77f      	b.n	800a826 <__ssvfiscanf_r+0x16a>
 800a926:	4b0e      	ldr	r3, [pc, #56]	; (800a960 <__ssvfiscanf_r+0x2a4>)
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f43f af3c 	beq.w	800a7a6 <__ssvfiscanf_r+0xea>
 800a92e:	ab01      	add	r3, sp, #4
 800a930:	4622      	mov	r2, r4
 800a932:	a943      	add	r1, sp, #268	; 0x10c
 800a934:	4630      	mov	r0, r6
 800a936:	f3af 8000 	nop.w
 800a93a:	e774      	b.n	800a826 <__ssvfiscanf_r+0x16a>
 800a93c:	89a3      	ldrh	r3, [r4, #12]
 800a93e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a942:	bf18      	it	ne
 800a944:	f04f 30ff 	movne.w	r0, #4294967295
 800a948:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800a94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a950:	9846      	ldr	r0, [sp, #280]	; 0x118
 800a952:	e7f9      	b.n	800a948 <__ssvfiscanf_r+0x28c>
 800a954:	0800a609 	.word	0x0800a609
 800a958:	0800a683 	.word	0x0800a683
 800a95c:	0800b243 	.word	0x0800b243
 800a960:	00000000 	.word	0x00000000

0800a964 <_scanf_chars>:
 800a964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a968:	4615      	mov	r5, r2
 800a96a:	688a      	ldr	r2, [r1, #8]
 800a96c:	4680      	mov	r8, r0
 800a96e:	460c      	mov	r4, r1
 800a970:	b932      	cbnz	r2, 800a980 <_scanf_chars+0x1c>
 800a972:	698a      	ldr	r2, [r1, #24]
 800a974:	2a00      	cmp	r2, #0
 800a976:	bf0c      	ite	eq
 800a978:	2201      	moveq	r2, #1
 800a97a:	f04f 32ff 	movne.w	r2, #4294967295
 800a97e:	608a      	str	r2, [r1, #8]
 800a980:	6822      	ldr	r2, [r4, #0]
 800a982:	06d1      	lsls	r1, r2, #27
 800a984:	bf5f      	itttt	pl
 800a986:	681a      	ldrpl	r2, [r3, #0]
 800a988:	1d11      	addpl	r1, r2, #4
 800a98a:	6019      	strpl	r1, [r3, #0]
 800a98c:	6817      	ldrpl	r7, [r2, #0]
 800a98e:	2600      	movs	r6, #0
 800a990:	69a3      	ldr	r3, [r4, #24]
 800a992:	b1db      	cbz	r3, 800a9cc <_scanf_chars+0x68>
 800a994:	2b01      	cmp	r3, #1
 800a996:	d107      	bne.n	800a9a8 <_scanf_chars+0x44>
 800a998:	682b      	ldr	r3, [r5, #0]
 800a99a:	6962      	ldr	r2, [r4, #20]
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	5cd3      	ldrb	r3, [r2, r3]
 800a9a0:	b9a3      	cbnz	r3, 800a9cc <_scanf_chars+0x68>
 800a9a2:	2e00      	cmp	r6, #0
 800a9a4:	d132      	bne.n	800aa0c <_scanf_chars+0xa8>
 800a9a6:	e006      	b.n	800a9b6 <_scanf_chars+0x52>
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	d007      	beq.n	800a9bc <_scanf_chars+0x58>
 800a9ac:	2e00      	cmp	r6, #0
 800a9ae:	d12d      	bne.n	800aa0c <_scanf_chars+0xa8>
 800a9b0:	69a3      	ldr	r3, [r4, #24]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d12a      	bne.n	800aa0c <_scanf_chars+0xa8>
 800a9b6:	2001      	movs	r0, #1
 800a9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9bc:	f7fe fa7c 	bl	8008eb8 <__locale_ctype_ptr>
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	4418      	add	r0, r3
 800a9c6:	7843      	ldrb	r3, [r0, #1]
 800a9c8:	071b      	lsls	r3, r3, #28
 800a9ca:	d4ef      	bmi.n	800a9ac <_scanf_chars+0x48>
 800a9cc:	6823      	ldr	r3, [r4, #0]
 800a9ce:	06da      	lsls	r2, r3, #27
 800a9d0:	bf5e      	ittt	pl
 800a9d2:	682b      	ldrpl	r3, [r5, #0]
 800a9d4:	781b      	ldrbpl	r3, [r3, #0]
 800a9d6:	703b      	strbpl	r3, [r7, #0]
 800a9d8:	682a      	ldr	r2, [r5, #0]
 800a9da:	686b      	ldr	r3, [r5, #4]
 800a9dc:	f102 0201 	add.w	r2, r2, #1
 800a9e0:	602a      	str	r2, [r5, #0]
 800a9e2:	68a2      	ldr	r2, [r4, #8]
 800a9e4:	f103 33ff 	add.w	r3, r3, #4294967295
 800a9e8:	f102 32ff 	add.w	r2, r2, #4294967295
 800a9ec:	606b      	str	r3, [r5, #4]
 800a9ee:	f106 0601 	add.w	r6, r6, #1
 800a9f2:	bf58      	it	pl
 800a9f4:	3701      	addpl	r7, #1
 800a9f6:	60a2      	str	r2, [r4, #8]
 800a9f8:	b142      	cbz	r2, 800aa0c <_scanf_chars+0xa8>
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	dcc8      	bgt.n	800a990 <_scanf_chars+0x2c>
 800a9fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa02:	4629      	mov	r1, r5
 800aa04:	4640      	mov	r0, r8
 800aa06:	4798      	blx	r3
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d0c1      	beq.n	800a990 <_scanf_chars+0x2c>
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	f013 0310 	ands.w	r3, r3, #16
 800aa12:	d105      	bne.n	800aa20 <_scanf_chars+0xbc>
 800aa14:	68e2      	ldr	r2, [r4, #12]
 800aa16:	3201      	adds	r2, #1
 800aa18:	60e2      	str	r2, [r4, #12]
 800aa1a:	69a2      	ldr	r2, [r4, #24]
 800aa1c:	b102      	cbz	r2, 800aa20 <_scanf_chars+0xbc>
 800aa1e:	703b      	strb	r3, [r7, #0]
 800aa20:	6923      	ldr	r3, [r4, #16]
 800aa22:	441e      	add	r6, r3
 800aa24:	6126      	str	r6, [r4, #16]
 800aa26:	2000      	movs	r0, #0
 800aa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aa2c <_scanf_i>:
 800aa2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa30:	469a      	mov	sl, r3
 800aa32:	4b74      	ldr	r3, [pc, #464]	; (800ac04 <_scanf_i+0x1d8>)
 800aa34:	460c      	mov	r4, r1
 800aa36:	4683      	mov	fp, r0
 800aa38:	4616      	mov	r6, r2
 800aa3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aa3e:	b087      	sub	sp, #28
 800aa40:	ab03      	add	r3, sp, #12
 800aa42:	68a7      	ldr	r7, [r4, #8]
 800aa44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800aa48:	4b6f      	ldr	r3, [pc, #444]	; (800ac08 <_scanf_i+0x1dc>)
 800aa4a:	69a1      	ldr	r1, [r4, #24]
 800aa4c:	4a6f      	ldr	r2, [pc, #444]	; (800ac0c <_scanf_i+0x1e0>)
 800aa4e:	2903      	cmp	r1, #3
 800aa50:	bf18      	it	ne
 800aa52:	461a      	movne	r2, r3
 800aa54:	1e7b      	subs	r3, r7, #1
 800aa56:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800aa5a:	bf84      	itt	hi
 800aa5c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aa60:	60a3      	strhi	r3, [r4, #8]
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	9200      	str	r2, [sp, #0]
 800aa66:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800aa6a:	bf88      	it	hi
 800aa6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aa70:	f104 091c 	add.w	r9, r4, #28
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	bf8c      	ite	hi
 800aa78:	197f      	addhi	r7, r7, r5
 800aa7a:	2700      	movls	r7, #0
 800aa7c:	464b      	mov	r3, r9
 800aa7e:	f04f 0800 	mov.w	r8, #0
 800aa82:	9301      	str	r3, [sp, #4]
 800aa84:	6831      	ldr	r1, [r6, #0]
 800aa86:	ab03      	add	r3, sp, #12
 800aa88:	2202      	movs	r2, #2
 800aa8a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800aa8e:	7809      	ldrb	r1, [r1, #0]
 800aa90:	f7f5 fbb6 	bl	8000200 <memchr>
 800aa94:	9b01      	ldr	r3, [sp, #4]
 800aa96:	b328      	cbz	r0, 800aae4 <_scanf_i+0xb8>
 800aa98:	f1b8 0f01 	cmp.w	r8, #1
 800aa9c:	d156      	bne.n	800ab4c <_scanf_i+0x120>
 800aa9e:	6862      	ldr	r2, [r4, #4]
 800aaa0:	b92a      	cbnz	r2, 800aaae <_scanf_i+0x82>
 800aaa2:	2208      	movs	r2, #8
 800aaa4:	6062      	str	r2, [r4, #4]
 800aaa6:	6822      	ldr	r2, [r4, #0]
 800aaa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aaac:	6022      	str	r2, [r4, #0]
 800aaae:	6822      	ldr	r2, [r4, #0]
 800aab0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800aab4:	6022      	str	r2, [r4, #0]
 800aab6:	68a2      	ldr	r2, [r4, #8]
 800aab8:	1e51      	subs	r1, r2, #1
 800aaba:	60a1      	str	r1, [r4, #8]
 800aabc:	b192      	cbz	r2, 800aae4 <_scanf_i+0xb8>
 800aabe:	6832      	ldr	r2, [r6, #0]
 800aac0:	1c51      	adds	r1, r2, #1
 800aac2:	6031      	str	r1, [r6, #0]
 800aac4:	7812      	ldrb	r2, [r2, #0]
 800aac6:	701a      	strb	r2, [r3, #0]
 800aac8:	1c5d      	adds	r5, r3, #1
 800aaca:	6873      	ldr	r3, [r6, #4]
 800aacc:	3b01      	subs	r3, #1
 800aace:	2b00      	cmp	r3, #0
 800aad0:	6073      	str	r3, [r6, #4]
 800aad2:	dc06      	bgt.n	800aae2 <_scanf_i+0xb6>
 800aad4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aad8:	4631      	mov	r1, r6
 800aada:	4658      	mov	r0, fp
 800aadc:	4798      	blx	r3
 800aade:	2800      	cmp	r0, #0
 800aae0:	d176      	bne.n	800abd0 <_scanf_i+0x1a4>
 800aae2:	462b      	mov	r3, r5
 800aae4:	f108 0801 	add.w	r8, r8, #1
 800aae8:	f1b8 0f03 	cmp.w	r8, #3
 800aaec:	d1c9      	bne.n	800aa82 <_scanf_i+0x56>
 800aaee:	6862      	ldr	r2, [r4, #4]
 800aaf0:	b90a      	cbnz	r2, 800aaf6 <_scanf_i+0xca>
 800aaf2:	220a      	movs	r2, #10
 800aaf4:	6062      	str	r2, [r4, #4]
 800aaf6:	6862      	ldr	r2, [r4, #4]
 800aaf8:	4945      	ldr	r1, [pc, #276]	; (800ac10 <_scanf_i+0x1e4>)
 800aafa:	6960      	ldr	r0, [r4, #20]
 800aafc:	9301      	str	r3, [sp, #4]
 800aafe:	1a89      	subs	r1, r1, r2
 800ab00:	f000 f888 	bl	800ac14 <__sccl>
 800ab04:	9b01      	ldr	r3, [sp, #4]
 800ab06:	f04f 0800 	mov.w	r8, #0
 800ab0a:	461d      	mov	r5, r3
 800ab0c:	68a3      	ldr	r3, [r4, #8]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d038      	beq.n	800ab84 <_scanf_i+0x158>
 800ab12:	6831      	ldr	r1, [r6, #0]
 800ab14:	6960      	ldr	r0, [r4, #20]
 800ab16:	780a      	ldrb	r2, [r1, #0]
 800ab18:	5c80      	ldrb	r0, [r0, r2]
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d032      	beq.n	800ab84 <_scanf_i+0x158>
 800ab1e:	2a30      	cmp	r2, #48	; 0x30
 800ab20:	6822      	ldr	r2, [r4, #0]
 800ab22:	d121      	bne.n	800ab68 <_scanf_i+0x13c>
 800ab24:	0510      	lsls	r0, r2, #20
 800ab26:	d51f      	bpl.n	800ab68 <_scanf_i+0x13c>
 800ab28:	f108 0801 	add.w	r8, r8, #1
 800ab2c:	b117      	cbz	r7, 800ab34 <_scanf_i+0x108>
 800ab2e:	3301      	adds	r3, #1
 800ab30:	3f01      	subs	r7, #1
 800ab32:	60a3      	str	r3, [r4, #8]
 800ab34:	6873      	ldr	r3, [r6, #4]
 800ab36:	3b01      	subs	r3, #1
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	6073      	str	r3, [r6, #4]
 800ab3c:	dd1b      	ble.n	800ab76 <_scanf_i+0x14a>
 800ab3e:	6833      	ldr	r3, [r6, #0]
 800ab40:	3301      	adds	r3, #1
 800ab42:	6033      	str	r3, [r6, #0]
 800ab44:	68a3      	ldr	r3, [r4, #8]
 800ab46:	3b01      	subs	r3, #1
 800ab48:	60a3      	str	r3, [r4, #8]
 800ab4a:	e7df      	b.n	800ab0c <_scanf_i+0xe0>
 800ab4c:	f1b8 0f02 	cmp.w	r8, #2
 800ab50:	d1b1      	bne.n	800aab6 <_scanf_i+0x8a>
 800ab52:	6822      	ldr	r2, [r4, #0]
 800ab54:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ab58:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ab5c:	d1c2      	bne.n	800aae4 <_scanf_i+0xb8>
 800ab5e:	2110      	movs	r1, #16
 800ab60:	6061      	str	r1, [r4, #4]
 800ab62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab66:	e7a5      	b.n	800aab4 <_scanf_i+0x88>
 800ab68:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ab6c:	6022      	str	r2, [r4, #0]
 800ab6e:	780b      	ldrb	r3, [r1, #0]
 800ab70:	702b      	strb	r3, [r5, #0]
 800ab72:	3501      	adds	r5, #1
 800ab74:	e7de      	b.n	800ab34 <_scanf_i+0x108>
 800ab76:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4658      	mov	r0, fp
 800ab7e:	4798      	blx	r3
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d0df      	beq.n	800ab44 <_scanf_i+0x118>
 800ab84:	6823      	ldr	r3, [r4, #0]
 800ab86:	05d9      	lsls	r1, r3, #23
 800ab88:	d50c      	bpl.n	800aba4 <_scanf_i+0x178>
 800ab8a:	454d      	cmp	r5, r9
 800ab8c:	d908      	bls.n	800aba0 <_scanf_i+0x174>
 800ab8e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ab92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab96:	4632      	mov	r2, r6
 800ab98:	4658      	mov	r0, fp
 800ab9a:	4798      	blx	r3
 800ab9c:	1e6f      	subs	r7, r5, #1
 800ab9e:	463d      	mov	r5, r7
 800aba0:	454d      	cmp	r5, r9
 800aba2:	d02c      	beq.n	800abfe <_scanf_i+0x1d2>
 800aba4:	6822      	ldr	r2, [r4, #0]
 800aba6:	f012 0210 	ands.w	r2, r2, #16
 800abaa:	d11e      	bne.n	800abea <_scanf_i+0x1be>
 800abac:	702a      	strb	r2, [r5, #0]
 800abae:	6863      	ldr	r3, [r4, #4]
 800abb0:	9e00      	ldr	r6, [sp, #0]
 800abb2:	4649      	mov	r1, r9
 800abb4:	4658      	mov	r0, fp
 800abb6:	47b0      	blx	r6
 800abb8:	6822      	ldr	r2, [r4, #0]
 800abba:	f8da 3000 	ldr.w	r3, [sl]
 800abbe:	f012 0f20 	tst.w	r2, #32
 800abc2:	d008      	beq.n	800abd6 <_scanf_i+0x1aa>
 800abc4:	1d1a      	adds	r2, r3, #4
 800abc6:	f8ca 2000 	str.w	r2, [sl]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6018      	str	r0, [r3, #0]
 800abce:	e009      	b.n	800abe4 <_scanf_i+0x1b8>
 800abd0:	f04f 0800 	mov.w	r8, #0
 800abd4:	e7d6      	b.n	800ab84 <_scanf_i+0x158>
 800abd6:	07d2      	lsls	r2, r2, #31
 800abd8:	d5f4      	bpl.n	800abc4 <_scanf_i+0x198>
 800abda:	1d1a      	adds	r2, r3, #4
 800abdc:	f8ca 2000 	str.w	r2, [sl]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	8018      	strh	r0, [r3, #0]
 800abe4:	68e3      	ldr	r3, [r4, #12]
 800abe6:	3301      	adds	r3, #1
 800abe8:	60e3      	str	r3, [r4, #12]
 800abea:	eba5 0509 	sub.w	r5, r5, r9
 800abee:	44a8      	add	r8, r5
 800abf0:	6925      	ldr	r5, [r4, #16]
 800abf2:	4445      	add	r5, r8
 800abf4:	6125      	str	r5, [r4, #16]
 800abf6:	2000      	movs	r0, #0
 800abf8:	b007      	add	sp, #28
 800abfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfe:	2001      	movs	r0, #1
 800ac00:	e7fa      	b.n	800abf8 <_scanf_i+0x1cc>
 800ac02:	bf00      	nop
 800ac04:	0800afdc 	.word	0x0800afdc
 800ac08:	0800a531 	.word	0x0800a531
 800ac0c:	080095c5 	.word	0x080095c5
 800ac10:	0800b280 	.word	0x0800b280

0800ac14 <__sccl>:
 800ac14:	b570      	push	{r4, r5, r6, lr}
 800ac16:	780b      	ldrb	r3, [r1, #0]
 800ac18:	2b5e      	cmp	r3, #94	; 0x5e
 800ac1a:	bf13      	iteet	ne
 800ac1c:	1c4a      	addne	r2, r1, #1
 800ac1e:	1c8a      	addeq	r2, r1, #2
 800ac20:	784b      	ldrbeq	r3, [r1, #1]
 800ac22:	2100      	movne	r1, #0
 800ac24:	bf08      	it	eq
 800ac26:	2101      	moveq	r1, #1
 800ac28:	1e44      	subs	r4, r0, #1
 800ac2a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800ac2e:	f804 1f01 	strb.w	r1, [r4, #1]!
 800ac32:	42a5      	cmp	r5, r4
 800ac34:	d1fb      	bne.n	800ac2e <__sccl+0x1a>
 800ac36:	b913      	cbnz	r3, 800ac3e <__sccl+0x2a>
 800ac38:	3a01      	subs	r2, #1
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	bd70      	pop	{r4, r5, r6, pc}
 800ac3e:	f081 0401 	eor.w	r4, r1, #1
 800ac42:	54c4      	strb	r4, [r0, r3]
 800ac44:	4611      	mov	r1, r2
 800ac46:	780d      	ldrb	r5, [r1, #0]
 800ac48:	2d2d      	cmp	r5, #45	; 0x2d
 800ac4a:	f101 0201 	add.w	r2, r1, #1
 800ac4e:	d006      	beq.n	800ac5e <__sccl+0x4a>
 800ac50:	2d5d      	cmp	r5, #93	; 0x5d
 800ac52:	d0f2      	beq.n	800ac3a <__sccl+0x26>
 800ac54:	b90d      	cbnz	r5, 800ac5a <__sccl+0x46>
 800ac56:	460a      	mov	r2, r1
 800ac58:	e7ef      	b.n	800ac3a <__sccl+0x26>
 800ac5a:	462b      	mov	r3, r5
 800ac5c:	e7f1      	b.n	800ac42 <__sccl+0x2e>
 800ac5e:	784e      	ldrb	r6, [r1, #1]
 800ac60:	2e5d      	cmp	r6, #93	; 0x5d
 800ac62:	d0fa      	beq.n	800ac5a <__sccl+0x46>
 800ac64:	42b3      	cmp	r3, r6
 800ac66:	dcf8      	bgt.n	800ac5a <__sccl+0x46>
 800ac68:	3102      	adds	r1, #2
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	429e      	cmp	r6, r3
 800ac6e:	54c4      	strb	r4, [r0, r3]
 800ac70:	dcfb      	bgt.n	800ac6a <__sccl+0x56>
 800ac72:	e7e8      	b.n	800ac46 <__sccl+0x32>

0800ac74 <__submore>:
 800ac74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac78:	460c      	mov	r4, r1
 800ac7a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ac7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac80:	4299      	cmp	r1, r3
 800ac82:	d11e      	bne.n	800acc2 <__submore+0x4e>
 800ac84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ac88:	f7ff f854 	bl	8009d34 <_malloc_r>
 800ac8c:	b918      	cbnz	r0, 800ac96 <__submore+0x22>
 800ac8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac9a:	63a3      	str	r3, [r4, #56]	; 0x38
 800ac9c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800aca0:	6360      	str	r0, [r4, #52]	; 0x34
 800aca2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800aca6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800acaa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800acae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800acb2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800acb6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800acba:	6020      	str	r0, [r4, #0]
 800acbc:	2000      	movs	r0, #0
 800acbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800acc4:	0077      	lsls	r7, r6, #1
 800acc6:	463a      	mov	r2, r7
 800acc8:	f7ff fc78 	bl	800a5bc <_realloc_r>
 800accc:	4605      	mov	r5, r0
 800acce:	2800      	cmp	r0, #0
 800acd0:	d0dd      	beq.n	800ac8e <__submore+0x1a>
 800acd2:	eb00 0806 	add.w	r8, r0, r6
 800acd6:	4601      	mov	r1, r0
 800acd8:	4632      	mov	r2, r6
 800acda:	4640      	mov	r0, r8
 800acdc:	f7fe f91b 	bl	8008f16 <memcpy>
 800ace0:	f8c4 8000 	str.w	r8, [r4]
 800ace4:	6365      	str	r5, [r4, #52]	; 0x34
 800ace6:	63a7      	str	r7, [r4, #56]	; 0x38
 800ace8:	e7e8      	b.n	800acbc <__submore+0x48>

0800acea <_malloc_usable_size_r>:
 800acea:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800acee:	2800      	cmp	r0, #0
 800acf0:	f1a0 0004 	sub.w	r0, r0, #4
 800acf4:	bfbc      	itt	lt
 800acf6:	580b      	ldrlt	r3, [r1, r0]
 800acf8:	18c0      	addlt	r0, r0, r3
 800acfa:	4770      	bx	lr

0800acfc <_init>:
 800acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfe:	bf00      	nop
 800ad00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad02:	bc08      	pop	{r3}
 800ad04:	469e      	mov	lr, r3
 800ad06:	4770      	bx	lr

0800ad08 <_fini>:
 800ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0a:	bf00      	nop
 800ad0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad0e:	bc08      	pop	{r3}
 800ad10:	469e      	mov	lr, r3
 800ad12:	4770      	bx	lr
