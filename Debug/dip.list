
dip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08009df8  08009df8  00019df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a320  0800a320  0001a320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a328  0800a328  0001a328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a32c  0800a32c  0001a32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000228  20000000  0800a330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020228  2**0
                  CONTENTS
  8 .bss          000148d0  20000228  20000228  00020228  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20014af8  20014af8  00020228  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 11 .debug_info   00026fa7  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005acb  00000000  00000000  000471ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001c38  00000000  00000000  0004ccd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000019b8  00000000  00000000  0004e908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e711  00000000  00000000  000502c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000084ab  00000000  00000000  0005e9d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00066e7c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007e64  00000000  00000000  00066ef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009de0 	.word	0x08009de0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08009de0 	.word	0x08009de0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <bit_proces>:
#include "ino.h"

#include <stdio.h>

uint8_t bit_proces(OP* op_arr, uint16_t op_n)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
	if ( op_arr[0].log == FIRST) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	7a1b      	ldrb	r3, [r3, #8]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d101      	bne.n	80005c8 <bit_proces+0x18>
		return 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	e09d      	b.n	8000704 <bit_proces+0x154>
	}

	uint16_t temp = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	81fb      	strh	r3, [r7, #14]
	uint16_t state = Sensor_CheckValue(op_arr[0].addr, op_arr[0].trigger_value);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	881a      	ldrh	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	4619      	mov	r1, r3
 80005d6:	4610      	mov	r0, r2
 80005d8:	f006 fc30 	bl	8006e3c <Sensor_CheckValue>
 80005dc:	4603      	mov	r3, r0
 80005de:	81bb      	strh	r3, [r7, #12]

	for (uint16_t i = 1; i < op_n; ++i) {
 80005e0:	2301      	movs	r3, #1
 80005e2:	817b      	strh	r3, [r7, #10]
 80005e4:	e087      	b.n	80006f6 <bit_proces+0x146>

		if (op_arr[i].type == DATA) {
 80005e6:	897a      	ldrh	r2, [r7, #10]
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	461a      	mov	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	7a5b      	ldrb	r3, [r3, #9]
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	d116      	bne.n	800062a <bit_proces+0x7a>
			temp = Sensor_CheckValue(op_arr[i].addr, op_arr[i].trigger_value);
 80005fc:	897a      	ldrh	r2, [r7, #10]
 80005fe:	4613      	mov	r3, r2
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	4413      	add	r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	461a      	mov	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	8818      	ldrh	r0, [r3, #0]
 800060e:	897a      	ldrh	r2, [r7, #10]
 8000610:	4613      	mov	r3, r2
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	4413      	add	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	461a      	mov	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	4619      	mov	r1, r3
 8000622:	f006 fc0b 	bl	8006e3c <Sensor_CheckValue>
 8000626:	4603      	mov	r3, r0
 8000628:	81fb      	strh	r3, [r7, #14]
		}

		if (op_arr[i].type == STATE) {
 800062a:	897a      	ldrh	r2, [r7, #10]
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	461a      	mov	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	7a5b      	ldrb	r3, [r3, #9]
 800063c:	2b03      	cmp	r3, #3
 800063e:	d109      	bne.n	8000654 <bit_proces+0xa4>
			temp = op_arr[i].trigger_value; //addr
 8000640:	897a      	ldrh	r2, [r7, #10]
 8000642:	4613      	mov	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4413      	add	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	461a      	mov	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4413      	add	r3, r2
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	81fb      	strh	r3, [r7, #14]
		}

		switch (op_arr[i].log)
 8000654:	897a      	ldrh	r2, [r7, #10]
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4413      	add	r3, r2
 8000664:	7a1b      	ldrb	r3, [r3, #8]
 8000666:	3b02      	subs	r3, #2
 8000668:	2b06      	cmp	r3, #6
 800066a:	d840      	bhi.n	80006ee <bit_proces+0x13e>
 800066c:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <bit_proces+0xc4>)
 800066e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000672:	bf00      	nop
 8000674:	08000691 	.word	0x08000691
 8000678:	0800069b 	.word	0x0800069b
 800067c:	080006a5 	.word	0x080006a5
 8000680:	080006af 	.word	0x080006af
 8000684:	080006c1 	.word	0x080006c1
 8000688:	080006d3 	.word	0x080006d3
 800068c:	080006e5 	.word	0x080006e5
		{

		case OR: {
			state |= temp;
 8000690:	89ba      	ldrh	r2, [r7, #12]
 8000692:	89fb      	ldrh	r3, [r7, #14]
 8000694:	4313      	orrs	r3, r2
 8000696:	81bb      	strh	r3, [r7, #12]
			break;
 8000698:	e02a      	b.n	80006f0 <bit_proces+0x140>
		}

		case AND: {
			state &= temp;
 800069a:	89ba      	ldrh	r2, [r7, #12]
 800069c:	89fb      	ldrh	r3, [r7, #14]
 800069e:	4013      	ands	r3, r2
 80006a0:	81bb      	strh	r3, [r7, #12]
			break;
 80006a2:	e025      	b.n	80006f0 <bit_proces+0x140>
		}

		case XOR: {
			state ^= temp;
 80006a4:	89ba      	ldrh	r2, [r7, #12]
 80006a6:	89fb      	ldrh	r3, [r7, #14]
 80006a8:	4053      	eors	r3, r2
 80006aa:	81bb      	strh	r3, [r7, #12]
			break;
 80006ac:	e020      	b.n	80006f0 <bit_proces+0x140>
		}

		case NOR: {
			state |= temp;
 80006ae:	89ba      	ldrh	r2, [r7, #12]
 80006b0:	89fb      	ldrh	r3, [r7, #14]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	81bb      	strh	r3, [r7, #12]
			state ^= 1;
 80006b6:	89bb      	ldrh	r3, [r7, #12]
 80006b8:	f083 0301 	eor.w	r3, r3, #1
 80006bc:	81bb      	strh	r3, [r7, #12]
			break;
 80006be:	e017      	b.n	80006f0 <bit_proces+0x140>
		}

		case NAND: {
			state &= temp;
 80006c0:	89ba      	ldrh	r2, [r7, #12]
 80006c2:	89fb      	ldrh	r3, [r7, #14]
 80006c4:	4013      	ands	r3, r2
 80006c6:	81bb      	strh	r3, [r7, #12]
			state ^= 1;
 80006c8:	89bb      	ldrh	r3, [r7, #12]
 80006ca:	f083 0301 	eor.w	r3, r3, #1
 80006ce:	81bb      	strh	r3, [r7, #12]
			break;
 80006d0:	e00e      	b.n	80006f0 <bit_proces+0x140>
		}

		case XNOR: {
			state ^= temp;
 80006d2:	89ba      	ldrh	r2, [r7, #12]
 80006d4:	89fb      	ldrh	r3, [r7, #14]
 80006d6:	4053      	eors	r3, r2
 80006d8:	81bb      	strh	r3, [r7, #12]
			state ^= 1;
 80006da:	89bb      	ldrh	r3, [r7, #12]
 80006dc:	f083 0301 	eor.w	r3, r3, #1
 80006e0:	81bb      	strh	r3, [r7, #12]
			break;
 80006e2:	e005      	b.n	80006f0 <bit_proces+0x140>
		}

		case NOT: {
			state ^= 1;
 80006e4:	89bb      	ldrh	r3, [r7, #12]
 80006e6:	f083 0301 	eor.w	r3, r3, #1
 80006ea:	81bb      	strh	r3, [r7, #12]
			break;
 80006ec:	e000      	b.n	80006f0 <bit_proces+0x140>
		}

		default:
			break;
 80006ee:	bf00      	nop
	for (uint16_t i = 1; i < op_n; ++i) {
 80006f0:	897b      	ldrh	r3, [r7, #10]
 80006f2:	3301      	adds	r3, #1
 80006f4:	817b      	strh	r3, [r7, #10]
 80006f6:	897a      	ldrh	r2, [r7, #10]
 80006f8:	887b      	ldrh	r3, [r7, #2]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	f4ff af73 	bcc.w	80005e6 <bit_proces+0x36>
		}
	}

	return state;
 8000700:	89bb      	ldrh	r3, [r7, #12]
 8000702:	b2db      	uxtb	r3, r3
}
 8000704:	4618      	mov	r0, r3
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <map_op_on_root>:

uint8_t map_op_on_root(OP* op, OP_ROOT* root, uint16_t root_n)
{
 800070c:	b480      	push	{r7}
 800070e:	b087      	sub	sp, #28
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	4613      	mov	r3, r2
 8000718:	80fb      	strh	r3, [r7, #6]
	if (root[0].type == PMO || root[0].type == INO || root[0].type == WEB)
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b05      	cmp	r3, #5
 8000720:	d007      	beq.n	8000732 <map_op_on_root+0x26>
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b06      	cmp	r3, #6
 8000728:	d003      	beq.n	8000732 <map_op_on_root+0x26>
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b07      	cmp	r3, #7
 8000730:	d101      	bne.n	8000736 <map_op_on_root+0x2a>
	{
		return 0;
 8000732:	2300      	movs	r3, #0
 8000734:	e039      	b.n	80007aa <map_op_on_root+0x9e>
	}

	root[0].operation = op;
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	68fa      	ldr	r2, [r7, #12]
 800073a:	605a      	str	r2, [r3, #4]
	uint32_t offset = root[0].operation_n;
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	891b      	ldrh	r3, [r3, #8]
 8000740:	617b      	str	r3, [r7, #20]

	for (uint16_t i = 1; i < root_n; ++i)
 8000742:	2301      	movs	r3, #1
 8000744:	827b      	strh	r3, [r7, #18]
 8000746:	e02b      	b.n	80007a0 <map_op_on_root+0x94>
	{
		if (root[i].type == BRCH)
 8000748:	8a7a      	ldrh	r2, [r7, #18]
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	461a      	mov	r2, r3
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b02      	cmp	r3, #2
 800075c:	d11d      	bne.n	800079a <map_op_on_root+0x8e>
		{
			root[i].operation = op + offset;
 800075e:	8a7a      	ldrh	r2, [r7, #18]
 8000760:	4613      	mov	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	461a      	mov	r2, r3
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	1899      	adds	r1, r3, r2
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	4613      	mov	r3, r2
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	4413      	add	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	461a      	mov	r2, r3
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	604b      	str	r3, [r1, #4]
			offset += root[i].operation_n;
 8000780:	8a7a      	ldrh	r2, [r7, #18]
 8000782:	4613      	mov	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	461a      	mov	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	4413      	add	r3, r2
 8000790:	891b      	ldrh	r3, [r3, #8]
 8000792:	461a      	mov	r2, r3
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	4413      	add	r3, r2
 8000798:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 1; i < root_n; ++i)
 800079a:	8a7b      	ldrh	r3, [r7, #18]
 800079c:	3301      	adds	r3, #1
 800079e:	827b      	strh	r3, [r7, #18]
 80007a0:	8a7a      	ldrh	r2, [r7, #18]
 80007a2:	88fb      	ldrh	r3, [r7, #6]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d3cf      	bcc.n	8000748 <map_op_on_root+0x3c>
		}
	}
	return 1;
 80007a8:	2301      	movs	r3, #1
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	371c      	adds	r7, #28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
	...

080007b8 <start_bit_engine>:

uint8_t start_bit_engine(OP_ROOT* root, uint16_t root_n, uint16_t ino)
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b089      	sub	sp, #36	; 0x24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	807b      	strh	r3, [r7, #2]
 80007c4:	4613      	mov	r3, r2
 80007c6:	803b      	strh	r3, [r7, #0]
	if (root == NULL)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d101      	bne.n	80007d2 <start_bit_engine+0x1a>
	{
		return 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e143      	b.n	8000a5a <start_bit_engine+0x2a2>
	}

	for (int32_t i = root_n - 1; i >= 0; --i)
 80007d2:	887b      	ldrh	r3, [r7, #2]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
 80007d8:	e13a      	b.n	8000a50 <start_bit_engine+0x298>
	{
		switch(root[i].type)
 80007da:	69fa      	ldr	r2, [r7, #28]
 80007dc:	4613      	mov	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	461a      	mov	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3b02      	subs	r3, #2
 80007ee:	2b07      	cmp	r3, #7
 80007f0:	f200 812b 	bhi.w	8000a4a <start_bit_engine+0x292>
 80007f4:	a201      	add	r2, pc, #4	; (adr r2, 80007fc <start_bit_engine+0x44>)
 80007f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fa:	bf00      	nop
 80007fc:	08000959 	.word	0x08000959
 8000800:	0800081d 	.word	0x0800081d
 8000804:	0800084d 	.word	0x0800084d
 8000808:	080008ed 	.word	0x080008ed
 800080c:	0800087d 	.word	0x0800087d
 8000810:	080008b5 	.word	0x080008b5
 8000814:	0800092d 	.word	0x0800092d
 8000818:	08000943 	.word	0x08000943
		{
		case TIME:
		{
			root[i].result = is_cur_time((TM*)root[i].operation);
 800081c:	69fa      	ldr	r2, [r7, #28]
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	461a      	mov	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	189c      	adds	r4, r3, r2
 800082c:	69fa      	ldr	r2, [r7, #28]
 800082e:	4613      	mov	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	461a      	mov	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	4618      	mov	r0, r3
 8000840:	f001 f934 	bl	8001aac <is_cur_time>
 8000844:	4603      	mov	r3, r0
 8000846:	b29b      	uxth	r3, r3
 8000848:	8223      	strh	r3, [r4, #16]
			break;
 800084a:	e0fe      	b.n	8000a4a <start_bit_engine+0x292>
		}

		case WEEK:
		{
			root[i].result = is_cur_day_of_week(root[i].operation_n);
 800084c:	69fa      	ldr	r2, [r7, #28]
 800084e:	4613      	mov	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	461a      	mov	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	189c      	adds	r4, r3, r2
 800085c:	69fa      	ldr	r2, [r7, #28]
 800085e:	4613      	mov	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4413      	add	r3, r2
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	461a      	mov	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4413      	add	r3, r2
 800086c:	891b      	ldrh	r3, [r3, #8]
 800086e:	4618      	mov	r0, r3
 8000870:	f001 f95a 	bl	8001b28 <is_cur_day_of_week>
 8000874:	4603      	mov	r3, r0
 8000876:	b29b      	uxth	r3, r3
 8000878:	8223      	strh	r3, [r4, #16]
			break;
 800087a:	e0e6      	b.n	8000a4a <start_bit_engine+0x292>
		}

		case INO:
		{
			uint16_t ino_pin = root[i].operation_n - 200;
 800087c:	69fa      	ldr	r2, [r7, #28]
 800087e:	4613      	mov	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	461a      	mov	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4413      	add	r3, r2
 800088c:	891b      	ldrh	r3, [r3, #8]
 800088e:	3bc8      	subs	r3, #200	; 0xc8
 8000890:	82fb      	strh	r3, [r7, #22]
			root[i].result = INO_GetValue(ino_pin);
 8000892:	69fa      	ldr	r2, [r7, #28]
 8000894:	4613      	mov	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	461a      	mov	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	189c      	adds	r4, r3, r2
 80008a2:	8afb      	ldrh	r3, [r7, #22]
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f005 ff3e 	bl	8006728 <INO_GetValue>
 80008ac:	4603      	mov	r3, r0
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	8223      	strh	r3, [r4, #16]
			break;
 80008b2:	e0ca      	b.n	8000a4a <start_bit_engine+0x292>
		}

		case WEB:
		{
			uint16_t tg_key = root[i].operation_n - 600;
 80008b4:	69fa      	ldr	r2, [r7, #28]
 80008b6:	4613      	mov	r3, r2
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	4413      	add	r3, r2
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	461a      	mov	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4413      	add	r3, r2
 80008c4:	891b      	ldrh	r3, [r3, #8]
 80008c6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80008ca:	82bb      	strh	r3, [r7, #20]
			root[i].result = Telegram_GetValue(tg_key);
 80008cc:	69fa      	ldr	r2, [r7, #28]
 80008ce:	4613      	mov	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	461a      	mov	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	189c      	adds	r4, r3, r2
 80008dc:	8abb      	ldrh	r3, [r7, #20]
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 f8c0 	bl	8001a64 <Telegram_GetValue>
 80008e4:	4603      	mov	r3, r0
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	8223      	strh	r3, [r4, #16]
			break;
 80008ea:	e0ae      	b.n	8000a4a <start_bit_engine+0x292>
		}

		case PMO:
		{
			uint16_t link_out = root[i].operation_n - 800;
 80008ec:	69fa      	ldr	r2, [r7, #28]
 80008ee:	4613      	mov	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4413      	add	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4413      	add	r3, r2
 80008fc:	891b      	ldrh	r3, [r3, #8]
 80008fe:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8000902:	827b      	strh	r3, [r7, #18]
			root[i].result = ino & (1 << link_out);
 8000904:	69fa      	ldr	r2, [r7, #28]
 8000906:	4613      	mov	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	461a      	mov	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4413      	add	r3, r2
 8000914:	8a7a      	ldrh	r2, [r7, #18]
 8000916:	2101      	movs	r1, #1
 8000918:	fa01 f202 	lsl.w	r2, r1, r2
 800091c:	b211      	sxth	r1, r2
 800091e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000922:	400a      	ands	r2, r1
 8000924:	b212      	sxth	r2, r2
 8000926:	b292      	uxth	r2, r2
 8000928:	821a      	strh	r2, [r3, #16]
			break;
 800092a:	e08e      	b.n	8000a4a <start_bit_engine+0x292>
		}

		case T_TRIGGER:
		{
			root[i].result = 0;
 800092c:	69fa      	ldr	r2, [r7, #28]
 800092e:	4613      	mov	r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4413      	add	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	461a      	mov	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4413      	add	r3, r2
 800093c:	2200      	movs	r2, #0
 800093e:	821a      	strh	r2, [r3, #16]
			break;
 8000940:	e083      	b.n	8000a4a <start_bit_engine+0x292>
		}

		case RS_TRIGGER:
		{
			root[i].result = 0;
 8000942:	69fa      	ldr	r2, [r7, #28]
 8000944:	4613      	mov	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4413      	add	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	461a      	mov	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	2200      	movs	r2, #0
 8000954:	821a      	strh	r2, [r3, #16]
			break;
 8000956:	e078      	b.n	8000a4a <start_bit_engine+0x292>
		}

		case BRCH:
			for (uint16_t o = 1; o < root[i].operation_n; ++o)
 8000958:	2301      	movs	r3, #1
 800095a:	837b      	strh	r3, [r7, #26]
 800095c:	e048      	b.n	80009f0 <start_bit_engine+0x238>
			{
				OP* op_arr = (OP*)root[i].operation;
 800095e:	69fa      	ldr	r2, [r7, #28]
 8000960:	4613      	mov	r3, r2
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	4413      	add	r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	461a      	mov	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	60fb      	str	r3, [r7, #12]
				if (op_arr[o].type == STATE)
 8000972:	8b7a      	ldrh	r2, [r7, #26]
 8000974:	4613      	mov	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4413      	add	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	461a      	mov	r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	4413      	add	r3, r2
 8000982:	7a5b      	ldrb	r3, [r3, #9]
 8000984:	2b03      	cmp	r3, #3
 8000986:	d130      	bne.n	80009ea <start_bit_engine+0x232>
				{
					/*
						if operration type is state,
						engine need to find result of this state and set it
					*/
					for (uint16_t n = 1; n < root_n; ++n)
 8000988:	2301      	movs	r3, #1
 800098a:	833b      	strh	r3, [r7, #24]
 800098c:	e029      	b.n	80009e2 <start_bit_engine+0x22a>
					{
						if (op_arr[o].root_id == root[n].id)
 800098e:	8b7a      	ldrh	r2, [r7, #26]
 8000990:	4613      	mov	r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	4413      	add	r3, r2
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	461a      	mov	r2, r3
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4413      	add	r3, r2
 800099e:	7a99      	ldrb	r1, [r3, #10]
 80009a0:	8b3a      	ldrh	r2, [r7, #24]
 80009a2:	4613      	mov	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	461a      	mov	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4413      	add	r3, r2
 80009b0:	7bdb      	ldrb	r3, [r3, #15]
 80009b2:	4299      	cmp	r1, r3
 80009b4:	d112      	bne.n	80009dc <start_bit_engine+0x224>
						{
							op_arr[o].trigger_value = root[n].result; //addr
 80009b6:	8b7a      	ldrh	r2, [r7, #26]
 80009b8:	4613      	mov	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	4413      	add	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	461a      	mov	r2, r3
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	1899      	adds	r1, r3, r2
 80009c6:	8b3a      	ldrh	r2, [r7, #24]
 80009c8:	4613      	mov	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	461a      	mov	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	8a1b      	ldrh	r3, [r3, #16]
 80009d8:	604b      	str	r3, [r1, #4]
							break;
 80009da:	e006      	b.n	80009ea <start_bit_engine+0x232>
					for (uint16_t n = 1; n < root_n; ++n)
 80009dc:	8b3b      	ldrh	r3, [r7, #24]
 80009de:	3301      	adds	r3, #1
 80009e0:	833b      	strh	r3, [r7, #24]
 80009e2:	8b3a      	ldrh	r2, [r7, #24]
 80009e4:	887b      	ldrh	r3, [r7, #2]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d3d1      	bcc.n	800098e <start_bit_engine+0x1d6>
			for (uint16_t o = 1; o < root[i].operation_n; ++o)
 80009ea:	8b7b      	ldrh	r3, [r7, #26]
 80009ec:	3301      	adds	r3, #1
 80009ee:	837b      	strh	r3, [r7, #26]
 80009f0:	69fa      	ldr	r2, [r7, #28]
 80009f2:	4613      	mov	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	461a      	mov	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	891b      	ldrh	r3, [r3, #8]
 8000a02:	8b7a      	ldrh	r2, [r7, #26]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d3aa      	bcc.n	800095e <start_bit_engine+0x1a6>
						}
					}
				}
			}
			root[i].result = bit_proces((OP*)root[i].operation, root[i].operation_n);
 8000a08:	69fa      	ldr	r2, [r7, #28]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	461a      	mov	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	189c      	adds	r4, r3, r2
 8000a18:	69fa      	ldr	r2, [r7, #28]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4413      	add	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	461a      	mov	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4413      	add	r3, r2
 8000a28:	6858      	ldr	r0, [r3, #4]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4413      	add	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	461a      	mov	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	891b      	ldrh	r3, [r3, #8]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f7ff fdb7 	bl	80005b0 <bit_proces>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	8223      	strh	r3, [r4, #16]
			break;
 8000a48:	bf00      	nop
	for (int32_t i = root_n - 1; i >= 0; --i)
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f6bf aec1 	bge.w	80007da <start_bit_engine+0x22>
		}
	}

	return 1;
 8000a58:	2301      	movs	r3, #1
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3724      	adds	r7, #36	; 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	bf00      	nop

08000a64 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8000a64:	b480      	push	{r7}
 8000a66:	b087      	sub	sp, #28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d301      	bcc.n	8000a7e <jsmn_alloc_token+0x1a>
    return NULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e014      	b.n	8000aa8 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	1c59      	adds	r1, r3, #1
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	6051      	str	r1, [r2, #4]
 8000a88:	011b      	lsls	r3, r3, #4
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	f04f 32ff 	mov.w	r2, #4294967295
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	689a      	ldr	r2, [r3, #8]
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8000aa6:	697b      	ldr	r3, [r7, #20]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	371c      	adds	r7, #28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	7afa      	ldrb	r2, [r7, #11]
 8000ac8:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	605a      	str	r2, [r3, #4]
  token->end = end;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	683a      	ldr	r2, [r7, #0]
 8000ad4:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
 8000af4:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000afc:	e034      	b.n	8000b68 <jsmn_parse_primitive+0x80>
    switch (js[parser->pos]) {
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	4413      	add	r3, r2
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b20      	cmp	r3, #32
 8000b0a:	d03a      	beq.n	8000b82 <jsmn_parse_primitive+0x9a>
 8000b0c:	2b20      	cmp	r3, #32
 8000b0e:	dc06      	bgt.n	8000b1e <jsmn_parse_primitive+0x36>
 8000b10:	2b09      	cmp	r3, #9
 8000b12:	db0f      	blt.n	8000b34 <jsmn_parse_primitive+0x4c>
 8000b14:	2b0a      	cmp	r3, #10
 8000b16:	dd34      	ble.n	8000b82 <jsmn_parse_primitive+0x9a>
 8000b18:	2b0d      	cmp	r3, #13
 8000b1a:	d032      	beq.n	8000b82 <jsmn_parse_primitive+0x9a>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8000b1c:	e00a      	b.n	8000b34 <jsmn_parse_primitive+0x4c>
    switch (js[parser->pos]) {
 8000b1e:	2b3a      	cmp	r3, #58	; 0x3a
 8000b20:	d02f      	beq.n	8000b82 <jsmn_parse_primitive+0x9a>
 8000b22:	2b3a      	cmp	r3, #58	; 0x3a
 8000b24:	dc02      	bgt.n	8000b2c <jsmn_parse_primitive+0x44>
 8000b26:	2b2c      	cmp	r3, #44	; 0x2c
 8000b28:	d02b      	beq.n	8000b82 <jsmn_parse_primitive+0x9a>
      break;
 8000b2a:	e003      	b.n	8000b34 <jsmn_parse_primitive+0x4c>
    switch (js[parser->pos]) {
 8000b2c:	2b5d      	cmp	r3, #93	; 0x5d
 8000b2e:	d028      	beq.n	8000b82 <jsmn_parse_primitive+0x9a>
 8000b30:	2b7d      	cmp	r3, #125	; 0x7d
 8000b32:	d026      	beq.n	8000b82 <jsmn_parse_primitive+0x9a>
      break;
 8000b34:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b1f      	cmp	r3, #31
 8000b42:	d906      	bls.n	8000b52 <jsmn_parse_primitive+0x6a>
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	68ba      	ldr	r2, [r7, #8]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b7e      	cmp	r3, #126	; 0x7e
 8000b50:	d905      	bls.n	8000b5e <jsmn_parse_primitive+0x76>
      parser->pos = start;
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8000b58:	f06f 0301 	mvn.w	r3, #1
 8000b5c:	e038      	b.n	8000bd0 <jsmn_parse_primitive+0xe8>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d208      	bcs.n	8000b84 <jsmn_parse_primitive+0x9c>
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	4413      	add	r3, r2
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1be      	bne.n	8000afe <jsmn_parse_primitive+0x16>
 8000b80:	e000      	b.n	8000b84 <jsmn_parse_primitive+0x9c>
      goto found;
 8000b82:	bf00      	nop
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
  if (tokens == NULL) {
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d106      	bne.n	8000b98 <jsmn_parse_primitive+0xb0>
    parser->pos--;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	1e5a      	subs	r2, r3, #1
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	601a      	str	r2, [r3, #0]
    return 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	e01b      	b.n	8000bd0 <jsmn_parse_primitive+0xe8>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000b98:	6a3a      	ldr	r2, [r7, #32]
 8000b9a:	6839      	ldr	r1, [r7, #0]
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f7ff ff61 	bl	8000a64 <jsmn_alloc_token>
 8000ba2:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d105      	bne.n	8000bb6 <jsmn_parse_primitive+0xce>
    parser->pos = start;
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb4:	e00c      	b.n	8000bd0 <jsmn_parse_primitive+0xe8>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	6938      	ldr	r0, [r7, #16]
 8000bc0:	f7ff ff78 	bl	8000ab4 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	1e5a      	subs	r2, r3, #1
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	601a      	str	r2, [r3, #0]
  return 0;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	61bb      	str	r3, [r7, #24]

  parser->pos++;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	1c5a      	adds	r2, r3, #1
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	601a      	str	r2, [r3, #0]

  /* Skip starting quote */
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000bf6:	e14c      	b.n	8000e92 <jsmn_parse_string+0x2ba>
    char c = js[parser->pos];
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	4413      	add	r3, r2
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8000c04:	7dfb      	ldrb	r3, [r7, #23]
 8000c06:	2b22      	cmp	r3, #34	; 0x22
 8000c08:	d11d      	bne.n	8000c46 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d101      	bne.n	8000c14 <jsmn_parse_string+0x3c>
        return 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	e150      	b.n	8000eb6 <jsmn_parse_string+0x2de>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c16:	6839      	ldr	r1, [r7, #0]
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff ff23 	bl	8000a64 <jsmn_alloc_token>
 8000c1e:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d105      	bne.n	8000c32 <jsmn_parse_string+0x5a>
        parser->pos = start;
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c30:	e141      	b.n	8000eb6 <jsmn_parse_string+0x2de>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	1c5a      	adds	r2, r3, #1
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2103      	movs	r1, #3
 8000c3c:	6938      	ldr	r0, [r7, #16]
 8000c3e:	f7ff ff39 	bl	8000ab4 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e137      	b.n	8000eb6 <jsmn_parse_string+0x2de>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8000c46:	7dfb      	ldrb	r3, [r7, #23]
 8000c48:	2b5c      	cmp	r3, #92	; 0x5c
 8000c4a:	f040 811d 	bne.w	8000e88 <jsmn_parse_string+0x2b0>
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	f080 8116 	bcs.w	8000e88 <jsmn_parse_string+0x2b0>
      int i;
      parser->pos++;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	1c5a      	adds	r2, r3, #1
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	3b22      	subs	r3, #34	; 0x22
 8000c72:	2b53      	cmp	r3, #83	; 0x53
 8000c74:	f200 8101 	bhi.w	8000e7a <jsmn_parse_string+0x2a2>
 8000c78:	a201      	add	r2, pc, #4	; (adr r2, 8000c80 <jsmn_parse_string+0xa8>)
 8000c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7e:	bf00      	nop
 8000c80:	08000e87 	.word	0x08000e87
 8000c84:	08000e7b 	.word	0x08000e7b
 8000c88:	08000e7b 	.word	0x08000e7b
 8000c8c:	08000e7b 	.word	0x08000e7b
 8000c90:	08000e7b 	.word	0x08000e7b
 8000c94:	08000e7b 	.word	0x08000e7b
 8000c98:	08000e7b 	.word	0x08000e7b
 8000c9c:	08000e7b 	.word	0x08000e7b
 8000ca0:	08000e7b 	.word	0x08000e7b
 8000ca4:	08000e7b 	.word	0x08000e7b
 8000ca8:	08000e7b 	.word	0x08000e7b
 8000cac:	08000e7b 	.word	0x08000e7b
 8000cb0:	08000e7b 	.word	0x08000e7b
 8000cb4:	08000e87 	.word	0x08000e87
 8000cb8:	08000e7b 	.word	0x08000e7b
 8000cbc:	08000e7b 	.word	0x08000e7b
 8000cc0:	08000e7b 	.word	0x08000e7b
 8000cc4:	08000e7b 	.word	0x08000e7b
 8000cc8:	08000e7b 	.word	0x08000e7b
 8000ccc:	08000e7b 	.word	0x08000e7b
 8000cd0:	08000e7b 	.word	0x08000e7b
 8000cd4:	08000e7b 	.word	0x08000e7b
 8000cd8:	08000e7b 	.word	0x08000e7b
 8000cdc:	08000e7b 	.word	0x08000e7b
 8000ce0:	08000e7b 	.word	0x08000e7b
 8000ce4:	08000e7b 	.word	0x08000e7b
 8000ce8:	08000e7b 	.word	0x08000e7b
 8000cec:	08000e7b 	.word	0x08000e7b
 8000cf0:	08000e7b 	.word	0x08000e7b
 8000cf4:	08000e7b 	.word	0x08000e7b
 8000cf8:	08000e7b 	.word	0x08000e7b
 8000cfc:	08000e7b 	.word	0x08000e7b
 8000d00:	08000e7b 	.word	0x08000e7b
 8000d04:	08000e7b 	.word	0x08000e7b
 8000d08:	08000e7b 	.word	0x08000e7b
 8000d0c:	08000e7b 	.word	0x08000e7b
 8000d10:	08000e7b 	.word	0x08000e7b
 8000d14:	08000e7b 	.word	0x08000e7b
 8000d18:	08000e7b 	.word	0x08000e7b
 8000d1c:	08000e7b 	.word	0x08000e7b
 8000d20:	08000e7b 	.word	0x08000e7b
 8000d24:	08000e7b 	.word	0x08000e7b
 8000d28:	08000e7b 	.word	0x08000e7b
 8000d2c:	08000e7b 	.word	0x08000e7b
 8000d30:	08000e7b 	.word	0x08000e7b
 8000d34:	08000e7b 	.word	0x08000e7b
 8000d38:	08000e7b 	.word	0x08000e7b
 8000d3c:	08000e7b 	.word	0x08000e7b
 8000d40:	08000e7b 	.word	0x08000e7b
 8000d44:	08000e7b 	.word	0x08000e7b
 8000d48:	08000e7b 	.word	0x08000e7b
 8000d4c:	08000e7b 	.word	0x08000e7b
 8000d50:	08000e7b 	.word	0x08000e7b
 8000d54:	08000e7b 	.word	0x08000e7b
 8000d58:	08000e7b 	.word	0x08000e7b
 8000d5c:	08000e7b 	.word	0x08000e7b
 8000d60:	08000e7b 	.word	0x08000e7b
 8000d64:	08000e7b 	.word	0x08000e7b
 8000d68:	08000e87 	.word	0x08000e87
 8000d6c:	08000e7b 	.word	0x08000e7b
 8000d70:	08000e7b 	.word	0x08000e7b
 8000d74:	08000e7b 	.word	0x08000e7b
 8000d78:	08000e7b 	.word	0x08000e7b
 8000d7c:	08000e7b 	.word	0x08000e7b
 8000d80:	08000e87 	.word	0x08000e87
 8000d84:	08000e7b 	.word	0x08000e7b
 8000d88:	08000e7b 	.word	0x08000e7b
 8000d8c:	08000e7b 	.word	0x08000e7b
 8000d90:	08000e87 	.word	0x08000e87
 8000d94:	08000e7b 	.word	0x08000e7b
 8000d98:	08000e7b 	.word	0x08000e7b
 8000d9c:	08000e7b 	.word	0x08000e7b
 8000da0:	08000e7b 	.word	0x08000e7b
 8000da4:	08000e7b 	.word	0x08000e7b
 8000da8:	08000e7b 	.word	0x08000e7b
 8000dac:	08000e7b 	.word	0x08000e7b
 8000db0:	08000e87 	.word	0x08000e87
 8000db4:	08000e7b 	.word	0x08000e7b
 8000db8:	08000e7b 	.word	0x08000e7b
 8000dbc:	08000e7b 	.word	0x08000e7b
 8000dc0:	08000e87 	.word	0x08000e87
 8000dc4:	08000e7b 	.word	0x08000e7b
 8000dc8:	08000e87 	.word	0x08000e87
 8000dcc:	08000dd1 	.word	0x08000dd1
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	1c5a      	adds	r2, r3, #1
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
 8000dde:	e037      	b.n	8000e50 <jsmn_parse_string+0x278>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	4413      	add	r3, r2
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b2f      	cmp	r3, #47	; 0x2f
 8000dec:	d906      	bls.n	8000dfc <jsmn_parse_string+0x224>
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	4413      	add	r3, r2
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b39      	cmp	r3, #57	; 0x39
 8000dfa:	d921      	bls.n	8000e40 <jsmn_parse_string+0x268>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	4413      	add	r3, r2
 8000e04:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8000e06:	2b40      	cmp	r3, #64	; 0x40
 8000e08:	d906      	bls.n	8000e18 <jsmn_parse_string+0x240>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	4413      	add	r3, r2
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b46      	cmp	r3, #70	; 0x46
 8000e16:	d913      	bls.n	8000e40 <jsmn_parse_string+0x268>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	68ba      	ldr	r2, [r7, #8]
 8000e1e:	4413      	add	r3, r2
 8000e20:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8000e22:	2b60      	cmp	r3, #96	; 0x60
 8000e24:	d906      	bls.n	8000e34 <jsmn_parse_string+0x25c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b66      	cmp	r3, #102	; 0x66
 8000e32:	d905      	bls.n	8000e40 <jsmn_parse_string+0x268>
            parser->pos = start;
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8000e3a:	f06f 0301 	mvn.w	r3, #1
 8000e3e:	e03a      	b.n	8000eb6 <jsmn_parse_string+0x2de>
          }
          parser->pos++;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	1c5a      	adds	r2, r3, #1
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	601a      	str	r2, [r3, #0]
             i++) {
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	dc0b      	bgt.n	8000e6e <jsmn_parse_string+0x296>
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d206      	bcs.n	8000e6e <jsmn_parse_string+0x296>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	4413      	add	r3, r2
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1b8      	bne.n	8000de0 <jsmn_parse_string+0x208>
        }
        parser->pos--;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	1e5a      	subs	r2, r3, #1
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	601a      	str	r2, [r3, #0]
        break;
 8000e78:	e006      	b.n	8000e88 <jsmn_parse_string+0x2b0>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8000e80:	f06f 0301 	mvn.w	r3, #1
 8000e84:	e017      	b.n	8000eb6 <jsmn_parse_string+0x2de>
        break;
 8000e86:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	1c5a      	adds	r2, r3, #1
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d207      	bcs.n	8000eac <jsmn_parse_string+0x2d4>
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f47f aea6 	bne.w	8000bf8 <jsmn_parse_string+0x20>
      }
    }
  }
  parser->pos = start;
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 8000eb2:	f06f 0302 	mvn.w	r3, #2
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3720      	adds	r7, #32
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop

08000ec0 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000ed4:	e15f      	b.n	8001196 <jsmn_parse+0x2d6>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8000ee2:	7ffb      	ldrb	r3, [r7, #31]
 8000ee4:	2b2c      	cmp	r3, #44	; 0x2c
 8000ee6:	f000 80dd 	beq.w	80010a4 <jsmn_parse+0x1e4>
 8000eea:	2b2c      	cmp	r3, #44	; 0x2c
 8000eec:	dc10      	bgt.n	8000f10 <jsmn_parse+0x50>
 8000eee:	2b0d      	cmp	r3, #13
 8000ef0:	f000 8141 	beq.w	8001176 <jsmn_parse+0x2b6>
 8000ef4:	2b0d      	cmp	r3, #13
 8000ef6:	dc04      	bgt.n	8000f02 <jsmn_parse+0x42>
 8000ef8:	3b09      	subs	r3, #9
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	f200 8119 	bhi.w	8001132 <jsmn_parse+0x272>
      break;
    case '\t':
    case '\r':
    case '\n':
    case ' ':
      break;
 8000f00:	e139      	b.n	8001176 <jsmn_parse+0x2b6>
    switch (c) {
 8000f02:	2b20      	cmp	r3, #32
 8000f04:	f000 8137 	beq.w	8001176 <jsmn_parse+0x2b6>
 8000f08:	2b22      	cmp	r3, #34	; 0x22
 8000f0a:	f000 80a1 	beq.w	8001050 <jsmn_parse+0x190>
 8000f0e:	e110      	b.n	8001132 <jsmn_parse+0x272>
 8000f10:	2b5d      	cmp	r3, #93	; 0x5d
 8000f12:	d043      	beq.n	8000f9c <jsmn_parse+0xdc>
 8000f14:	2b5d      	cmp	r3, #93	; 0x5d
 8000f16:	dc05      	bgt.n	8000f24 <jsmn_parse+0x64>
 8000f18:	2b3a      	cmp	r3, #58	; 0x3a
 8000f1a:	f000 80bc 	beq.w	8001096 <jsmn_parse+0x1d6>
 8000f1e:	2b5b      	cmp	r3, #91	; 0x5b
 8000f20:	d005      	beq.n	8000f2e <jsmn_parse+0x6e>
 8000f22:	e106      	b.n	8001132 <jsmn_parse+0x272>
 8000f24:	2b7b      	cmp	r3, #123	; 0x7b
 8000f26:	d002      	beq.n	8000f2e <jsmn_parse+0x6e>
 8000f28:	2b7d      	cmp	r3, #125	; 0x7d
 8000f2a:	d037      	beq.n	8000f9c <jsmn_parse+0xdc>
 8000f2c:	e101      	b.n	8001132 <jsmn_parse+0x272>
      count++;
 8000f2e:	6a3b      	ldr	r3, [r7, #32]
 8000f30:	3301      	adds	r3, #1
 8000f32:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 811f 	beq.w	800117a <jsmn_parse+0x2ba>
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f3e:	6839      	ldr	r1, [r7, #0]
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f7ff fd8f 	bl	8000a64 <jsmn_alloc_token>
 8000f46:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d102      	bne.n	8000f54 <jsmn_parse+0x94>
        return JSMN_ERROR_NOMEM;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	e14f      	b.n	80011f4 <jsmn_parse+0x334>
      if (parser->toksuper != -1) {
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d00a      	beq.n	8000f74 <jsmn_parse+0xb4>
        jsmntok_t *t = &tokens[parser->toksuper];
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        t->size++;
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	60da      	str	r2, [r3, #12]
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8000f74:	7ffb      	ldrb	r3, [r7, #31]
 8000f76:	2b7b      	cmp	r3, #123	; 0x7b
 8000f78:	d101      	bne.n	8000f7e <jsmn_parse+0xbe>
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	e000      	b.n	8000f80 <jsmn_parse+0xc0>
 8000f7e:	2202      	movs	r2, #2
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	461a      	mov	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	609a      	str	r2, [r3, #8]
      break;
 8000f9a:	e0f7      	b.n	800118c <jsmn_parse+0x2cc>
      if (tokens == NULL) {
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 80ed 	beq.w	800117e <jsmn_parse+0x2be>
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8000fa4:	7ffb      	ldrb	r3, [r7, #31]
 8000fa6:	2b7d      	cmp	r3, #125	; 0x7d
 8000fa8:	d101      	bne.n	8000fae <jsmn_parse+0xee>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <jsmn_parse+0xf0>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	77bb      	strb	r3, [r7, #30]
      for (i = parser->toknext - 1; i >= 0; i--) {
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fba:	e024      	b.n	8001006 <jsmn_parse+0x146>
        token = &tokens[i];
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fce:	d017      	beq.n	8001000 <jsmn_parse+0x140>
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd8:	d112      	bne.n	8001000 <jsmn_parse+0x140>
          if (token->type != type) {
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	7fba      	ldrb	r2, [r7, #30]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d002      	beq.n	8000fea <jsmn_parse+0x12a>
            return JSMN_ERROR_INVAL;
 8000fe4:	f06f 0301 	mvn.w	r3, #1
 8000fe8:	e104      	b.n	80011f4 <jsmn_parse+0x334>
          parser->toksuper = -1;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	609a      	str	r2, [r3, #8]
          break;
 8000ffe:	e005      	b.n	800100c <jsmn_parse+0x14c>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	3b01      	subs	r3, #1
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	2b00      	cmp	r3, #0
 800100a:	dad7      	bge.n	8000fbc <jsmn_parse+0xfc>
      if (i == -1) {
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001012:	d119      	bne.n	8001048 <jsmn_parse+0x188>
        return JSMN_ERROR_INVAL;
 8001014:	f06f 0301 	mvn.w	r3, #1
 8001018:	e0ec      	b.n	80011f4 <jsmn_parse+0x334>
        token = &tokens[i];
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	4413      	add	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102c:	d009      	beq.n	8001042 <jsmn_parse+0x182>
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001036:	d104      	bne.n	8001042 <jsmn_parse+0x182>
          parser->toksuper = i;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800103c:	609a      	str	r2, [r3, #8]
          break;
 800103e:	bf00      	nop
      break;
 8001040:	e0a4      	b.n	800118c <jsmn_parse+0x2cc>
      for (; i >= 0; i--) {
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	3b01      	subs	r3, #1
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	2b00      	cmp	r3, #0
 800104c:	dae5      	bge.n	800101a <jsmn_parse+0x15a>
      break;
 800104e:	e09d      	b.n	800118c <jsmn_parse+0x2cc>
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8001050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f7ff fdbc 	bl	8000bd8 <jsmn_parse_string>
 8001060:	6178      	str	r0, [r7, #20]
      if (r < 0) {
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2b00      	cmp	r3, #0
 8001066:	da01      	bge.n	800106c <jsmn_parse+0x1ac>
        return r;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	e0c3      	b.n	80011f4 <jsmn_parse+0x334>
      count++;
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	3301      	adds	r3, #1
 8001070:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107a:	f000 8082 	beq.w	8001182 <jsmn_parse+0x2c2>
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d07e      	beq.n	8001182 <jsmn_parse+0x2c2>
        tokens[parser->toksuper].size++;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	4413      	add	r3, r2
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	3201      	adds	r2, #1
 8001092:	60da      	str	r2, [r3, #12]
      break;
 8001094:	e075      	b.n	8001182 <jsmn_parse+0x2c2>
    case ':':
      parser->toksuper = parser->toknext - 1;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	461a      	mov	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	609a      	str	r2, [r3, #8]
      break;
 80010a2:	e073      	b.n	800118c <jsmn_parse+0x2cc>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d06d      	beq.n	8001186 <jsmn_parse+0x2c6>
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b2:	d068      	beq.n	8001186 <jsmn_parse+0x2c6>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d060      	beq.n	8001186 <jsmn_parse+0x2c6>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d058      	beq.n	8001186 <jsmn_parse+0x2c6>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	3b01      	subs	r3, #1
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
 80010dc:	e025      	b.n	800112a <jsmn_parse+0x26a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	4413      	add	r3, r2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d006      	beq.n	80010fa <jsmn_parse+0x23a>
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	011b      	lsls	r3, r3, #4
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d114      	bne.n	8001124 <jsmn_parse+0x264>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	4413      	add	r3, r2
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d00c      	beq.n	8001124 <jsmn_parse+0x264>
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	4413      	add	r3, r2
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d104      	bne.n	8001124 <jsmn_parse+0x264>
              parser->toksuper = i;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800111e:	609a      	str	r2, [r3, #8]
              break;
 8001120:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 8001122:	e030      	b.n	8001186 <jsmn_parse+0x2c6>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	3b01      	subs	r3, #1
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	2b00      	cmp	r3, #0
 800112e:	dad6      	bge.n	80010de <jsmn_parse+0x21e>
      break;
 8001130:	e029      	b.n	8001186 <jsmn_parse+0x2c6>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 8001132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	68b9      	ldr	r1, [r7, #8]
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f7ff fcd3 	bl	8000ae8 <jsmn_parse_primitive>
 8001142:	6178      	str	r0, [r7, #20]
      if (r < 0) {
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2b00      	cmp	r3, #0
 8001148:	da01      	bge.n	800114e <jsmn_parse+0x28e>
        return r;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	e052      	b.n	80011f4 <jsmn_parse+0x334>
      }
      count++;
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	3301      	adds	r3, #1
 8001152:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115c:	d015      	beq.n	800118a <jsmn_parse+0x2ca>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d012      	beq.n	800118a <jsmn_parse+0x2ca>
        tokens[parser->toksuper].size++;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	4413      	add	r3, r2
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	3201      	adds	r2, #1
 8001172:	60da      	str	r2, [r3, #12]
      }
      break;
 8001174:	e009      	b.n	800118a <jsmn_parse+0x2ca>
      break;
 8001176:	bf00      	nop
 8001178:	e008      	b.n	800118c <jsmn_parse+0x2cc>
        break;
 800117a:	bf00      	nop
 800117c:	e006      	b.n	800118c <jsmn_parse+0x2cc>
        break;
 800117e:	bf00      	nop
 8001180:	e004      	b.n	800118c <jsmn_parse+0x2cc>
      break;
 8001182:	bf00      	nop
 8001184:	e002      	b.n	800118c <jsmn_parse+0x2cc>
      break;
 8001186:	bf00      	nop
 8001188:	e000      	b.n	800118c <jsmn_parse+0x2cc>
      break;
 800118a:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <jsmn_parse+0x2f0>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	4413      	add	r3, r2
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f47f ae93 	bne.w	8000ed6 <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d01d      	beq.n	80011f2 <jsmn_parse+0x332>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
 80011be:	e015      	b.n	80011ec <jsmn_parse+0x32c>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ce:	d00a      	beq.n	80011e6 <jsmn_parse+0x326>
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011de:	d102      	bne.n	80011e6 <jsmn_parse+0x326>
        return JSMN_ERROR_PART;
 80011e0:	f06f 0302 	mvn.w	r3, #2
 80011e4:	e006      	b.n	80011f4 <jsmn_parse+0x334>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	3b01      	subs	r3, #1
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	dae6      	bge.n	80011c0 <jsmn_parse+0x300>
      }
    }
  }

  return count;
 80011f2:	6a3b      	ldr	r3, [r7, #32]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f04f 32ff 	mov.w	r2, #4294967295
 8001216:	609a      	str	r2, [r3, #8]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <jsoneq>:
#include "jsmn.h"

#include <string.h>
#include <stdlib.h>

static int jsoneq(const char* json, jsmntok_t* tok, const char* s) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b03      	cmp	r3, #3
 8001236:	d11e      	bne.n	8001276 <jsoneq+0x52>
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7fe ffc9 	bl	80001d0 <strlen>
 800123e:	4603      	mov	r3, r0
 8001240:	4619      	mov	r1, r3
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	4299      	cmp	r1, r3
 800124e:	d112      	bne.n	8001276 <jsoneq+0x52>
		strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	461a      	mov	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	1898      	adds	r0, r3, r2
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	461a      	mov	r2, r3
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	f007 f960 	bl	800852c <strncmp>
 800126c:	4603      	mov	r3, r0
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <jsoneq+0x52>
		return 0;
 8001272:	2300      	movs	r3, #0
 8001274:	e001      	b.n	800127a <jsoneq+0x56>
	}
	return -1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <json_get_op>:

int json_get_op(const char* input, OP* out, OP_ROOT* root, TM* time)
{
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	f6ad 0d64 	subw	sp, sp, #2148	; 0x864
 800128a:	af02      	add	r7, sp, #8
 800128c:	f107 040c 	add.w	r4, r7, #12
 8001290:	6020      	str	r0, [r4, #0]
 8001292:	f107 0008 	add.w	r0, r7, #8
 8001296:	6001      	str	r1, [r0, #0]
 8001298:	1d39      	adds	r1, r7, #4
 800129a:	600a      	str	r2, [r1, #0]
 800129c:	463a      	mov	r2, r7
 800129e:	6013      	str	r3, [r2, #0]
	int counter = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
	int tm_counter = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
	int root_counter = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
	int i;
	int r;
	jsmn_parser p;
	jsmntok_t t[128];

	jsmn_init(&p);
 80012b2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ffa0 	bl	80011fc <jsmn_init>
	r = jsmn_parse(&p, input, strlen(input), t, sizeof(t) / sizeof(t[0]));
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	f7fe ff85 	bl	80001d0 <strlen>
 80012c6:	4604      	mov	r4, r0
 80012c8:	f107 0218 	add.w	r2, r7, #24
 80012cc:	f107 010c 	add.w	r1, r7, #12
 80012d0:	f607 0018 	addw	r0, r7, #2072	; 0x818
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	4613      	mov	r3, r2
 80012da:	4622      	mov	r2, r4
 80012dc:	6809      	ldr	r1, [r1, #0]
 80012de:	f7ff fdef 	bl	8000ec0 <jsmn_parse>
 80012e2:	f8c7 0834 	str.w	r0, [r7, #2100]	; 0x834

	if (r < 1 || t[0].type != JSMN_OBJECT)
 80012e6:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	dd04      	ble.n	80012f8 <json_get_op+0x74>
 80012ee:	f107 0318 	add.w	r3, r7, #24
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d001      	beq.n	80012fc <json_get_op+0x78>
	{
		return 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	e3ad      	b.n	8001a58 <json_get_op+0x7d4>
	}

	for (i = 1; i < r; i++) {
 80012fc:	2301      	movs	r3, #1
 80012fe:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 8001302:	e3a0      	b.n	8001a46 <json_get_op+0x7c2>

		if (jsoneq(input, &t[i], "OUT") == 0)
 8001304:	f107 0218 	add.w	r2, r7, #24
 8001308:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	18d1      	adds	r1, r2, r3
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	4ab2      	ldr	r2, [pc, #712]	; (80015e0 <json_get_op+0x35c>)
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	f7ff ff84 	bl	8001224 <jsoneq>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d105      	bne.n	800132e <json_get_op+0xaa>
		{
			i++;
 8001322:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8001326:	3301      	adds	r3, #1
 8001328:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 800132c:	e386      	b.n	8001a3c <json_get_op+0x7b8>
		}

		else if (jsoneq(input, &t[i], "brch") == 0)
 800132e:	f107 0218 	add.w	r2, r7, #24
 8001332:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	18d1      	adds	r1, r2, r3
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	4aa9      	ldr	r2, [pc, #676]	; (80015e4 <json_get_op+0x360>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f7ff ff6f 	bl	8001224 <jsoneq>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	f040 8254 	bne.w	80017f6 <json_get_op+0x572>
		{
			if (t[i + 1].type != JSMN_ARRAY)
 800134e:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8001352:	3301      	adds	r3, #1
 8001354:	f107 0218 	add.w	r2, r7, #24
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	4413      	add	r3, r2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b02      	cmp	r3, #2
 8001360:	f040 8369 	bne.w	8001a36 <json_get_op+0x7b2>
			{
				continue;
			}

			int j = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
			for (j; j < t[i + 1].size; ++j)
 800136a:	e222      	b.n	80017b2 <json_get_op+0x52e>
			{
				jsmntok_t* g = &t[i + j + 2];
 800136c:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8001370:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8001374:	4413      	add	r3, r2
 8001376:	3302      	adds	r3, #2
 8001378:	f107 0218 	add.w	r2, r7, #24
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	4413      	add	r3, r2
 8001380:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830

				char* p_stt = (char*)input + g->start + 1;
 8001384:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	3301      	adds	r3, #1
 800138c:	f107 020c 	add.w	r2, r7, #12
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	4413      	add	r3, r2
 8001394:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
				char* p_end = NULL;
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]

				memcpy(root[j].name, p_stt, 3);
 80013a0:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	461a      	mov	r2, r3
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	330a      	adds	r3, #10
 80013b6:	2203      	movs	r2, #3
 80013b8:	f8d7 182c 	ldr.w	r1, [r7, #2092]	; 0x82c
 80013bc:	4618      	mov	r0, r3
 80013be:	f007 f868 	bl	8008492 <memcpy>
				root[j].name[3] = 0; // manually null terminated
 80013c2:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	461a      	mov	r2, r3
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4413      	add	r3, r2
 80013d6:	2200      	movs	r2, #0
 80013d8:	735a      	strb	r2, [r3, #13]
				root[j].id = j;
 80013da:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	461a      	mov	r2, r3
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4413      	add	r3, r2
 80013ee:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	73da      	strb	r2, [r3, #15]

				if (root[j].name[0] == 'i') //ino
 80013f6:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	461a      	mov	r2, r3
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4413      	add	r3, r2
 800140a:	7a9b      	ldrb	r3, [r3, #10]
 800140c:	2b69      	cmp	r3, #105	; 0x69
 800140e:	d12f      	bne.n	8001470 <json_get_op+0x1ec>
				{
					root[j].type = INO;
 8001410:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	461a      	mov	r2, r3
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	2206      	movs	r2, #6
 8001426:	701a      	strb	r2, [r3, #0]
					root[j].operation = NULL;
 8001428:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	461a      	mov	r2, r3
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	2200      	movs	r2, #0
 800143e:	605a      	str	r2, [r3, #4]
					root[j].operation_n = strtol(p_stt + 4, NULL, 10) + 200; //save inp to op number
 8001440:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	461a      	mov	r2, r3
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	189c      	adds	r4, r3, r2
 8001454:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8001458:	3304      	adds	r3, #4
 800145a:	220a      	movs	r2, #10
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f007 f924 	bl	80086ac <strtol>
 8001464:	4603      	mov	r3, r0
 8001466:	b29b      	uxth	r3, r3
 8001468:	33c8      	adds	r3, #200	; 0xc8
 800146a:	b29b      	uxth	r3, r3
 800146c:	8123      	strh	r3, [r4, #8]
					continue;
 800146e:	e19b      	b.n	80017a8 <json_get_op+0x524>
				}

				if (root[j].name[0] == 'g') //telegram
 8001470:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	461a      	mov	r2, r3
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	7a9b      	ldrb	r3, [r3, #10]
 8001486:	2b67      	cmp	r3, #103	; 0x67
 8001488:	d130      	bne.n	80014ec <json_get_op+0x268>
				{
					root[j].type = WEB;
 800148a:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	461a      	mov	r2, r3
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4413      	add	r3, r2
 800149e:	2207      	movs	r2, #7
 80014a0:	701a      	strb	r2, [r3, #0]
					root[j].operation = NULL;
 80014a2:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	461a      	mov	r2, r3
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4413      	add	r3, r2
 80014b6:	2200      	movs	r2, #0
 80014b8:	605a      	str	r2, [r3, #4]
					root[j].operation_n = strtol(p_stt + 4, NULL, 10) + 600;
 80014ba:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	461a      	mov	r2, r3
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	189c      	adds	r4, r3, r2
 80014ce:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80014d2:	3304      	adds	r3, #4
 80014d4:	220a      	movs	r2, #10
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f007 f8e7 	bl	80086ac <strtol>
 80014de:	4603      	mov	r3, r0
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	8123      	strh	r3, [r4, #8]
					continue;
 80014ea:	e15d      	b.n	80017a8 <json_get_op+0x524>
				}

				if (root[j].name[0] == 'p') //pmo
 80014ec:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	461a      	mov	r2, r3
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	7a9b      	ldrb	r3, [r3, #10]
 8001502:	2b70      	cmp	r3, #112	; 0x70
 8001504:	d130      	bne.n	8001568 <json_get_op+0x2e4>
				{
					root[j].type = PMO;
 8001506:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	461a      	mov	r2, r3
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4413      	add	r3, r2
 800151a:	2205      	movs	r2, #5
 800151c:	701a      	strb	r2, [r3, #0]
					root[j].operation = NULL;
 800151e:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	461a      	mov	r2, r3
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4413      	add	r3, r2
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
					root[j].operation_n = strtol(p_stt + 4, NULL, 10) + 800;
 8001536:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	461a      	mov	r2, r3
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	189c      	adds	r4, r3, r2
 800154a:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 800154e:	3304      	adds	r3, #4
 8001550:	220a      	movs	r2, #10
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f007 f8a9 	bl	80086ac <strtol>
 800155a:	4603      	mov	r3, r0
 800155c:	b29b      	uxth	r3, r3
 800155e:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001562:	b29b      	uxth	r3, r3
 8001564:	8123      	strh	r3, [r4, #8]
					continue;
 8001566:	e11f      	b.n	80017a8 <json_get_op+0x524>
				}

				if (root[j].name[0] == 'w') //week
 8001568:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	461a      	mov	r2, r3
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	7a9b      	ldrb	r3, [r3, #10]
 800157e:	2b77      	cmp	r3, #119	; 0x77
 8001580:	d132      	bne.n	80015e8 <json_get_op+0x364>
				{
					root[j].type = WEEK;
 8001582:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	461a      	mov	r2, r3
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4413      	add	r3, r2
 8001596:	2204      	movs	r2, #4
 8001598:	701a      	strb	r2, [r3, #0]
					root[j].operation = NULL;
 800159a:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	461a      	mov	r2, r3
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4413      	add	r3, r2
 80015ae:	2200      	movs	r2, #0
 80015b0:	605a      	str	r2, [r3, #4]
					root[j].operation_n = strtol(p_stt + 4, NULL, 16); //save value to op number
 80015b2:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	461a      	mov	r2, r3
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	189c      	adds	r4, r3, r2
 80015c6:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80015ca:	3304      	adds	r3, #4
 80015cc:	2210      	movs	r2, #16
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f007 f86b 	bl	80086ac <strtol>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b29b      	uxth	r3, r3
 80015da:	8123      	strh	r3, [r4, #8]
					continue;
 80015dc:	e0e4      	b.n	80017a8 <json_get_op+0x524>
 80015de:	bf00      	nop
 80015e0:	08009df8 	.word	0x08009df8
 80015e4:	08009dfc 	.word	0x08009dfc
				}

				if (root[j].name[0] == 't') //time
 80015e8:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	461a      	mov	r2, r3
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	7a9b      	ldrb	r3, [r3, #10]
 80015fe:	2b74      	cmp	r3, #116	; 0x74
 8001600:	f040 8089 	bne.w	8001716 <json_get_op+0x492>
				{
					root[j].type = TIME;
 8001604:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	461a      	mov	r2, r3
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4413      	add	r3, r2
 8001618:	2203      	movs	r2, #3
 800161a:	701a      	strb	r2, [r3, #0]

					time[tm_counter].from.tm_hour = strtol(p_stt + 4, &p_end, 10);
 800161c:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 8001620:	4613      	mov	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	461a      	mov	r2, r3
 800162a:	463b      	mov	r3, r7
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	189c      	adds	r4, r3, r2
 8001630:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8001634:	3304      	adds	r3, #4
 8001636:	f107 0114 	add.w	r1, r7, #20
 800163a:	220a      	movs	r2, #10
 800163c:	4618      	mov	r0, r3
 800163e:	f007 f835 	bl	80086ac <strtol>
 8001642:	4603      	mov	r3, r0
 8001644:	60a3      	str	r3, [r4, #8]
					time[tm_counter].from.tm_min =  strtol(p_end + 1, &p_end, 10);
 8001646:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	461a      	mov	r2, r3
 8001654:	463b      	mov	r3, r7
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	189c      	adds	r4, r3, r2
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3301      	adds	r3, #1
 8001662:	f107 0114 	add.w	r1, r7, #20
 8001666:	220a      	movs	r2, #10
 8001668:	4618      	mov	r0, r3
 800166a:	f007 f81f 	bl	80086ac <strtol>
 800166e:	4603      	mov	r3, r0
 8001670:	6063      	str	r3, [r4, #4]

					time[tm_counter].to.tm_hour = strtol(p_end + 1, &p_end, 10);
 8001672:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 8001676:	4613      	mov	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	461a      	mov	r2, r3
 8001680:	463b      	mov	r3, r7
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	189c      	adds	r4, r3, r2
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	3301      	adds	r3, #1
 800168e:	f107 0114 	add.w	r1, r7, #20
 8001692:	220a      	movs	r2, #10
 8001694:	4618      	mov	r0, r3
 8001696:	f007 f809 	bl	80086ac <strtol>
 800169a:	4603      	mov	r3, r0
 800169c:	62e3      	str	r3, [r4, #44]	; 0x2c
					time[tm_counter].to.tm_min =  strtol(p_end + 1, NULL, 10);
 800169e:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 80016a2:	4613      	mov	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4413      	add	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	461a      	mov	r2, r3
 80016ac:	463b      	mov	r3, r7
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	189c      	adds	r4, r3, r2
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	220a      	movs	r2, #10
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f006 fff4 	bl	80086ac <strtol>
 80016c4:	4603      	mov	r3, r0
 80016c6:	62a3      	str	r3, [r4, #40]	; 0x28

					root[j].operation = time + tm_counter;
 80016c8:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	461a      	mov	r2, r3
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	1899      	adds	r1, r3, r2
 80016dc:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 80016e0:	4613      	mov	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	461a      	mov	r2, r3
 80016ea:	463b      	mov	r3, r7
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
					root[j].operation_n = 0;
 80016f2:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	461a      	mov	r2, r3
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4413      	add	r3, r2
 8001706:	2200      	movs	r2, #0
 8001708:	811a      	strh	r2, [r3, #8]

					tm_counter++;
 800170a:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 800170e:	3301      	adds	r3, #1
 8001710:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
					continue;
 8001714:	e048      	b.n	80017a8 <json_get_op+0x524>
				}

				if (root[j].name[0] == 's' || root[j].name[0] == 'o') // state or out
 8001716:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	461a      	mov	r2, r3
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4413      	add	r3, r2
 800172a:	7a9b      	ldrb	r3, [r3, #10]
 800172c:	2b73      	cmp	r3, #115	; 0x73
 800172e:	d00c      	beq.n	800174a <json_get_op+0x4c6>
 8001730:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	461a      	mov	r2, r3
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	7a9b      	ldrb	r3, [r3, #10]
 8001746:	2b6f      	cmp	r3, #111	; 0x6f
 8001748:	d12e      	bne.n	80017a8 <json_get_op+0x524>
				{
					root[j].type = BRCH;
 800174a:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	461a      	mov	r2, r3
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4413      	add	r3, r2
 800175e:	2202      	movs	r2, #2
 8001760:	701a      	strb	r2, [r3, #0]
					root[j].operation = NULL;
 8001762:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	461a      	mov	r2, r3
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4413      	add	r3, r2
 8001776:	2200      	movs	r2, #0
 8001778:	605a      	str	r2, [r3, #4]
					root[j].operation_n = strtol(p_stt + 4, &p_end, 10);
 800177a:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	461a      	mov	r2, r3
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	189c      	adds	r4, r3, r2
 800178e:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8001792:	3304      	adds	r3, #4
 8001794:	f107 0114 	add.w	r1, r7, #20
 8001798:	220a      	movs	r2, #10
 800179a:	4618      	mov	r0, r3
 800179c:	f006 ff86 	bl	80086ac <strtol>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	8123      	strh	r3, [r4, #8]
					continue;
 80017a6:	bf00      	nop
			for (j; j < t[i + 1].size; ++j)
 80017a8:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 80017ac:	3301      	adds	r3, #1
 80017ae:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 80017b2:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 80017b6:	3301      	adds	r3, #1
 80017b8:	f107 0218 	add.w	r2, r7, #24
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	4413      	add	r3, r2
 80017c0:	330c      	adds	r3, #12
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f73f adcf 	bgt.w	800136c <json_get_op+0xe8>
				}
			}
			root_counter = j;
 80017ce:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 80017d2:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
			i += t[i + 1].size + 1;
 80017d6:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 80017da:	3301      	adds	r3, #1
 80017dc:	f107 0218 	add.w	r2, r7, #24
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	4413      	add	r3, r2
 80017e4:	330c      	adds	r3, #12
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 80017ee:	4413      	add	r3, r2
 80017f0:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 80017f4:	e122      	b.n	8001a3c <json_get_op+0x7b8>
//			return 1;
//		}

		else
		{
			if (t[i + 1].type != JSMN_ARRAY)
 80017f6:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 80017fa:	3301      	adds	r3, #1
 80017fc:	f107 0218 	add.w	r2, r7, #24
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	4413      	add	r3, r2
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b02      	cmp	r3, #2
 8001808:	f040 8117 	bne.w	8001a3a <json_get_op+0x7b6>
			{
				continue;
			}

			for (int j = 0; j < t[i + 1].size; j++)
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
 8001812:	e0f2      	b.n	80019fa <json_get_op+0x776>
			{
				jsmntok_t* g = &t[i + j + 2];
 8001814:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8001818:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 800181c:	4413      	add	r3, r2
 800181e:	3302      	adds	r3, #2
 8001820:	f107 0218 	add.w	r2, r7, #24
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	4413      	add	r3, r2
 8001828:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
				char* p_stt = (char*)input + g->start + 1;
 800182c:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	3301      	adds	r3, #1
 8001834:	f107 020c 	add.w	r2, r7, #12
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	4413      	add	r3, r2
 800183c:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
				char* p_end = NULL;
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
				int root_id = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c

				for (int r = 0; r < root_counter; ++r)
 800184e:	2300      	movs	r3, #0
 8001850:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
 8001854:	e026      	b.n	80018a4 <json_get_op+0x620>
				{
					if (memcmp(p_stt, root[r].name, 3) == 0)
 8001856:	f8d7 2838 	ldr.w	r2, [r7, #2104]	; 0x838
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	461a      	mov	r2, r3
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4413      	add	r3, r2
 800186a:	330a      	adds	r3, #10
 800186c:	2203      	movs	r2, #3
 800186e:	4619      	mov	r1, r3
 8001870:	f8d7 0824 	ldr.w	r0, [r7, #2084]	; 0x824
 8001874:	f006 fdfe 	bl	8008474 <memcmp>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10d      	bne.n	800189a <json_get_op+0x616>
					{
						root_id = root[r].id;
 800187e:	f8d7 2838 	ldr.w	r2, [r7, #2104]	; 0x838
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	461a      	mov	r2, r3
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4413      	add	r3, r2
 8001892:	7bdb      	ldrb	r3, [r3, #15]
 8001894:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
						break;
 8001898:	e00a      	b.n	80018b0 <json_get_op+0x62c>
				for (int r = 0; r < root_counter; ++r)
 800189a:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 800189e:	3301      	adds	r3, #1
 80018a0:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
 80018a4:	f8d7 2838 	ldr.w	r2, [r7, #2104]	; 0x838
 80018a8:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 80018ac:	429a      	cmp	r2, r3
 80018ae:	dbd2      	blt.n	8001856 <json_get_op+0x5d2>
					}
				}

				if (root_id > 0)
 80018b0:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	dd44      	ble.n	8001942 <json_get_op+0x6be>
				{
					out[counter].addr = 0;
 80018b8:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	461a      	mov	r2, r3
 80018c6:	f107 0308 	add.w	r3, r7, #8
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	2200      	movs	r2, #0
 80018d0:	801a      	strh	r2, [r3, #0]
					out[counter].log = (enum LG)strtol(p_stt + 5, NULL, 10);
 80018d2:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	461a      	mov	r2, r3
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	189c      	adds	r4, r3, r2
 80018e8:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80018ec:	3305      	adds	r3, #5
 80018ee:	220a      	movs	r2, #10
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f006 feda 	bl	80086ac <strtol>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	7223      	strb	r3, [r4, #8]
					out[counter].root_id = root_id;
 80018fe:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	461a      	mov	r2, r3
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
 8001914:	f8d7 283c 	ldr.w	r2, [r7, #2108]	; 0x83c
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	729a      	strb	r2, [r3, #10]
					out[counter].type = STATE;
 800191c:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	461a      	mov	r2, r3
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4413      	add	r3, r2
 8001932:	2203      	movs	r2, #3
 8001934:	725a      	strb	r2, [r3, #9]

					counter++;
 8001936:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 800193a:	3301      	adds	r3, #1
 800193c:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 8001940:	e056      	b.n	80019f0 <json_get_op+0x76c>
					continue;
				}

				out[counter].addr = strtol(p_stt, &p_end, 16); //10
 8001942:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	461a      	mov	r2, r3
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	189c      	adds	r4, r3, r2
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	2210      	movs	r2, #16
 800195e:	4619      	mov	r1, r3
 8001960:	f8d7 0824 	ldr.w	r0, [r7, #2084]	; 0x824
 8001964:	f006 fea2 	bl	80086ac <strtol>
 8001968:	4603      	mov	r3, r0
 800196a:	b29b      	uxth	r3, r3
 800196c:	8023      	strh	r3, [r4, #0]
				out[counter].log = (enum LG)strtol(p_end + 1, &p_end, 10);
 800196e:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	461a      	mov	r2, r3
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	189c      	adds	r4, r3, r2
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	f107 0110 	add.w	r1, r7, #16
 8001990:	220a      	movs	r2, #10
 8001992:	4618      	mov	r0, r3
 8001994:	f006 fe8a 	bl	80086ac <strtol>
 8001998:	4603      	mov	r3, r0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	7223      	strb	r3, [r4, #8]
				out[counter].trigger_value = strtol(p_end + 1, &p_end, 10);
 800199e:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	461a      	mov	r2, r3
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	189c      	adds	r4, r3, r2
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	3301      	adds	r3, #1
 80019bc:	f107 0110 	add.w	r1, r7, #16
 80019c0:	220a      	movs	r2, #10
 80019c2:	4618      	mov	r0, r3
 80019c4:	f006 fe72 	bl	80086ac <strtol>
 80019c8:	4603      	mov	r3, r0
 80019ca:	6063      	str	r3, [r4, #4]
				out[counter].type = DATA;
 80019cc:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80019d0:	4613      	mov	r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	461a      	mov	r2, r3
 80019da:	f107 0308 	add.w	r3, r7, #8
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	2202      	movs	r2, #2
 80019e4:	725a      	strb	r2, [r3, #9]

				counter++;
 80019e6:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 80019ea:	3301      	adds	r3, #1
 80019ec:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
			for (int j = 0; j < t[i + 1].size; j++)
 80019f0:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 80019f4:	3301      	adds	r3, #1
 80019f6:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
 80019fa:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 80019fe:	3301      	adds	r3, #1
 8001a00:	f107 0218 	add.w	r2, r7, #24
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	4413      	add	r3, r2
 8001a08:	330c      	adds	r3, #12
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f73f aeff 	bgt.w	8001814 <json_get_op+0x590>
			}
			i += t[i + 1].size + 1;
 8001a16:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	f107 0218 	add.w	r2, r7, #24
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	4413      	add	r3, r2
 8001a24:	330c      	adds	r3, #12
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8001a2e:	4413      	add	r3, r2
 8001a30:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 8001a34:	e002      	b.n	8001a3c <json_get_op+0x7b8>
				continue;
 8001a36:	bf00      	nop
 8001a38:	e000      	b.n	8001a3c <json_get_op+0x7b8>
				continue;
 8001a3a:	bf00      	nop
	for (i = 1; i < r; i++) {
 8001a3c:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8001a40:	3301      	adds	r3, #1
 8001a42:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 8001a46:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8001a4a:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	f6ff ac58 	blt.w	8001304 <json_get_op+0x80>
		}
	}

	return root_counter;
 8001a54:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f607 075c 	addw	r7, r7, #2140	; 0x85c
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd90      	pop	{r4, r7, pc}
 8001a62:	bf00      	nop

08001a64 <Telegram_GetValue>:
{

}

uint8_t Telegram_GetValue(uint16_t key)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < TG_MAX; ++i) {
 8001a6e:	2300      	movs	r3, #0
 8001a70:	81fb      	strh	r3, [r7, #14]
 8001a72:	e00f      	b.n	8001a94 <Telegram_GetValue+0x30>
		if (tg[i].key == key) {
 8001a74:	89fb      	ldrh	r3, [r7, #14]
 8001a76:	4a0c      	ldr	r2, [pc, #48]	; (8001aa8 <Telegram_GetValue+0x44>)
 8001a78:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001a7c:	88fa      	ldrh	r2, [r7, #6]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d105      	bne.n	8001a8e <Telegram_GetValue+0x2a>
			return tg[i].value;
 8001a82:	89fb      	ldrh	r3, [r7, #14]
 8001a84:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <Telegram_GetValue+0x44>)
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	789b      	ldrb	r3, [r3, #2]
 8001a8c:	e006      	b.n	8001a9c <Telegram_GetValue+0x38>
	for(uint16_t i = 0; i < TG_MAX; ++i) {
 8001a8e:	89fb      	ldrh	r3, [r7, #14]
 8001a90:	3301      	adds	r3, #1
 8001a92:	81fb      	strh	r3, [r7, #14]
 8001a94:	89fb      	ldrh	r3, [r7, #14]
 8001a96:	2bff      	cmp	r3, #255	; 0xff
 8001a98:	d9ec      	bls.n	8001a74 <Telegram_GetValue+0x10>
		}
	}
	return 0;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	20000244 	.word	0x20000244

08001aac <is_cur_time>:
#include "rtc.h"

#include <time.h>

uint8_t is_cur_time(TM* ft)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	struct tm time_info = { 0 };
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	2224      	movs	r2, #36	; 0x24
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f006 fcf3 	bl	80084a8 <memset>
	RTC_GetTime(&time_info);
 8001ac2:	f107 030c 	add.w	r3, r7, #12
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f006 f9c2 	bl	8007e50 <RTC_GetTime>

	if (time_info.tm_hour == ft->from.tm_hour &&
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d10b      	bne.n	8001aee <is_cur_time+0x42>
		time_info.tm_min >= ft->from.tm_min &&
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
	if (time_info.tm_hour == ft->from.tm_hour &&
 8001adc:	429a      	cmp	r2, r3
 8001ade:	db06      	blt.n	8001aee <is_cur_time+0x42>
		time_info.tm_hour < ft->to.tm_hour)
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		time_info.tm_min >= ft->from.tm_min &&
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	da01      	bge.n	8001aee <is_cur_time+0x42>
	{
		return 1;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e018      	b.n	8001b20 <is_cur_time+0x74>
	}

	if (time_info.tm_hour > ft->from.tm_hour &&
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	dd06      	ble.n	8001b06 <is_cur_time+0x5a>
		time_info.tm_hour < ft->to.tm_hour)
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	if (time_info.tm_hour > ft->from.tm_hour &&
 8001afe:	429a      	cmp	r2, r3
 8001b00:	da01      	bge.n	8001b06 <is_cur_time+0x5a>
	{
		return 1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00c      	b.n	8001b20 <is_cur_time+0x74>
	}

	if (time_info.tm_hour == ft->to.tm_hour &&
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d106      	bne.n	8001b1e <is_cur_time+0x72>
		time_info.tm_min <= ft->to.tm_min)
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (time_info.tm_hour == ft->to.tm_hour &&
 8001b16:	429a      	cmp	r2, r3
 8001b18:	dc01      	bgt.n	8001b1e <is_cur_time+0x72>
	{
		return 1;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <is_cur_time+0x74>
	}

	return 0;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3730      	adds	r7, #48	; 0x30
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <is_cur_day_of_week>:

uint8_t is_cur_day_of_week(uint16_t data)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	; 0x30
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
	struct tm time_info = { 0 };
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	2224      	movs	r2, #36	; 0x24
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f006 fcb4 	bl	80084a8 <memset>
	RTC_GetTime(&time_info);
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	4618      	mov	r0, r3
 8001b46:	f006 f983 	bl	8007e50 <RTC_GetTime>

	if (data & (1 << time_info.tm_wday))
 8001b4a:	88fa      	ldrh	r2, [r7, #6]
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	fa42 f303 	asr.w	r3, r2, r3
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <is_cur_day_of_week+0x36>
	{
		return 1;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <is_cur_day_of_week+0x38>
	}
	return 0;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3730      	adds	r7, #48	; 0x30
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <ESP_Init>:
struct ring_buffer_struct UART2_rx_data;
char request[1024];
static f_ptr delay;

void ESP_Init(f_ptr delay_function)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	RingBuffInit(&UART2_rx_data);
 8001b70:	4808      	ldr	r0, [pc, #32]	; (8001b94 <ESP_Init+0x2c>)
 8001b72:	f000 f9b1 	bl	8001ed8 <RingBuffInit>
	UART2_Init(&UART2_rx_data);
 8001b76:	4807      	ldr	r0, [pc, #28]	; (8001b94 <ESP_Init+0x2c>)
 8001b78:	f005 faee 	bl	8007158 <UART2_Init>

	UART2_SendData("\r\n", 2);
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	4806      	ldr	r0, [pc, #24]	; (8001b98 <ESP_Init+0x30>)
 8001b80:	f005 fb7a 	bl	8007278 <UART2_SendData>

	delay = delay_function;
 8001b84:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <ESP_Init+0x34>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20008d24 	.word	0x20008d24
 8001b98:	08009e04 	.word	0x08009e04
 8001b9c:	20000644 	.word	0x20000644

08001ba0 <requestFlush>:
	char test_str[] = "uart2 work\r\n";
	UART2_SendData(test_str, sizeof(test_str));
}

static void requestFlush()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	memset(request, 0, 1024);
 8001ba4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <requestFlush+0x14>)
 8001bac:	f006 fc7c 	bl	80084a8 <memset>
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20009d28 	.word	0x20009d28

08001bb8 <charCallBack>:

static uint8_t charCallBack(char * key, uint16_t bias)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
	char * temp = RingBuffGetArray(&UART2_rx_data) + bias;
 8001bc4:	4810      	ldr	r0, [pc, #64]	; (8001c08 <charCallBack+0x50>)
 8001bc6:	f000 f9d0 	bl	8001f6a <RingBuffGetArray>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	887b      	ldrh	r3, [r7, #2]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
	if(key != NULL && strlen(temp) >= strlen(key))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d012      	beq.n	8001bfe <charCallBack+0x46>
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f7fe faf9 	bl	80001d0 <strlen>
 8001bde:	4604      	mov	r4, r0
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7fe faf5 	bl	80001d0 <strlen>
 8001be6:	4603      	mov	r3, r0
 8001be8:	429c      	cmp	r4, r3
 8001bea:	d308      	bcc.n	8001bfe <charCallBack+0x46>
	{
		if(strstr(temp, key) != NULL)
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f006 fcae 	bl	8008550 <strstr>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <charCallBack+0x46>
		{
			return 1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <charCallBack+0x48>
		}
	}

	return 0;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}
 8001c08:	20008d24 	.word	0x20008d24

08001c0c <waitCallBack>:

static uint8_t waitCallBack(char * aim, uint16_t ms)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	807b      	strh	r3, [r7, #2]
	for( ; ms > 0; --ms)
 8001c18:	e012      	b.n	8001c40 <waitCallBack+0x34>
	{
		if(charCallBack(aim, 0))
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ffcb 	bl	8001bb8 <charCallBack>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d004      	beq.n	8001c32 <waitCallBack+0x26>
		{
			RingBuffClear(&UART2_rx_data);
 8001c28:	480b      	ldr	r0, [pc, #44]	; (8001c58 <waitCallBack+0x4c>)
 8001c2a:	f000 f984 	bl	8001f36 <RingBuffClear>
			return 1;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00d      	b.n	8001c4e <waitCallBack+0x42>
		}
		delay(1);
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <waitCallBack+0x50>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2001      	movs	r0, #1
 8001c38:	4798      	blx	r3
	for( ; ms > 0; --ms)
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	807b      	strh	r3, [r7, #2]
 8001c40:	887b      	ldrh	r3, [r7, #2]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1e9      	bne.n	8001c1a <waitCallBack+0xe>
	}
	RingBuffClear(&UART2_rx_data);
 8001c46:	4804      	ldr	r0, [pc, #16]	; (8001c58 <waitCallBack+0x4c>)
 8001c48:	f000 f975 	bl	8001f36 <RingBuffClear>
	return 0;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20008d24 	.word	0x20008d24
 8001c5c:	20000644 	.word	0x20000644

08001c60 <ESP_GetRxData>:

char* ESP_GetRxData()
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	return RingBuffGetArray(&UART2_rx_data);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <ESP_GetRxData+0x10>)
 8001c66:	f000 f980 	bl	8001f6a <RingBuffGetArray>
 8001c6a:	4603      	mov	r3, r0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20008d24 	.word	0x20008d24

08001c74 <ESP_SetMode>:

uint8_t ESP_SetMode(uint8_t mode)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
	requestFlush();
 8001c7e:	f7ff ff8f 	bl	8001ba0 <requestFlush>
	sprintf(request, "AT+CWMODE=%d\r\n", mode);
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	461a      	mov	r2, r3
 8001c86:	4915      	ldr	r1, [pc, #84]	; (8001cdc <ESP_SetMode+0x68>)
 8001c88:	4815      	ldr	r0, [pc, #84]	; (8001ce0 <ESP_SetMode+0x6c>)
 8001c8a:	f006 fc15 	bl	80084b8 <siprintf>
	RingBuffClear(&UART2_rx_data);
 8001c8e:	4815      	ldr	r0, [pc, #84]	; (8001ce4 <ESP_SetMode+0x70>)
 8001c90:	f000 f951 	bl	8001f36 <RingBuffClear>
	UART2_SendData(request, strlen(request));
 8001c94:	4812      	ldr	r0, [pc, #72]	; (8001ce0 <ESP_SetMode+0x6c>)
 8001c96:	f7fe fa9b 	bl	80001d0 <strlen>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4810      	ldr	r0, [pc, #64]	; (8001ce0 <ESP_SetMode+0x6c>)
 8001ca0:	f005 faea 	bl	8007278 <UART2_SendData>

	if(waitCallBack("OK", 2000))
 8001ca4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ca8:	480f      	ldr	r0, [pc, #60]	; (8001ce8 <ESP_SetMode+0x74>)
 8001caa:	f7ff ffaf 	bl	8001c0c <waitCallBack>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00e      	beq.n	8001cd2 <ESP_SetMode+0x5e>
	{
		UART2_SendData("AT+RST\r\n", 8);
 8001cb4:	2108      	movs	r1, #8
 8001cb6:	480d      	ldr	r0, [pc, #52]	; (8001cec <ESP_SetMode+0x78>)
 8001cb8:	f005 fade 	bl	8007278 <UART2_SendData>
		if(waitCallBack("ready", 2000))
 8001cbc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001cc0:	480b      	ldr	r0, [pc, #44]	; (8001cf0 <ESP_SetMode+0x7c>)
 8001cc2:	f7ff ffa3 	bl	8001c0c <waitCallBack>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <ESP_SetMode+0x5c>
		{
			return 1;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e001      	b.n	8001cd4 <ESP_SetMode+0x60>
		}
		else asm("NOP");
 8001cd0:	bf00      	nop
	}

	return 0;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	08009e18 	.word	0x08009e18
 8001ce0:	20009d28 	.word	0x20009d28
 8001ce4:	20008d24 	.word	0x20008d24
 8001ce8:	08009e28 	.word	0x08009e28
 8001cec:	08009e2c 	.word	0x08009e2c
 8001cf0:	08009e38 	.word	0x08009e38

08001cf4 <ESP_SetCipmuxZero>:

uint8_t ESP_SetCipmuxZero()
{
 8001cf4:	b598      	push	{r3, r4, r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	requestFlush();
 8001cf8:	f7ff ff52 	bl	8001ba0 <requestFlush>
	sprintf(request, "AT+CIPMUX=0\r\n");
 8001cfc:	4a10      	ldr	r2, [pc, #64]	; (8001d40 <ESP_SetCipmuxZero+0x4c>)
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <ESP_SetCipmuxZero+0x50>)
 8001d00:	4614      	mov	r4, r2
 8001d02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001d04:	6020      	str	r0, [r4, #0]
 8001d06:	6061      	str	r1, [r4, #4]
 8001d08:	60a2      	str	r2, [r4, #8]
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	81a3      	strh	r3, [r4, #12]
	UART2_SendData(request, strlen(request));
 8001d0e:	480c      	ldr	r0, [pc, #48]	; (8001d40 <ESP_SetCipmuxZero+0x4c>)
 8001d10:	f7fe fa5e 	bl	80001d0 <strlen>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4619      	mov	r1, r3
 8001d18:	4809      	ldr	r0, [pc, #36]	; (8001d40 <ESP_SetCipmuxZero+0x4c>)
 8001d1a:	f005 faad 	bl	8007278 <UART2_SendData>
	RingBuffClear(&UART2_rx_data);
 8001d1e:	480a      	ldr	r0, [pc, #40]	; (8001d48 <ESP_SetCipmuxZero+0x54>)
 8001d20:	f000 f909 	bl	8001f36 <RingBuffClear>

	if(waitCallBack("OK", 500))
 8001d24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d28:	4808      	ldr	r0, [pc, #32]	; (8001d4c <ESP_SetCipmuxZero+0x58>)
 8001d2a:	f7ff ff6f 	bl	8001c0c <waitCallBack>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <ESP_SetCipmuxZero+0x44>
	{
		return 1;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <ESP_SetCipmuxZero+0x46>
	}
	return 0;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	bd98      	pop	{r3, r4, r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20009d28 	.word	0x20009d28
 8001d44:	08009e40 	.word	0x08009e40
 8001d48:	20008d24 	.word	0x20008d24
 8001d4c:	08009e28 	.word	0x08009e28

08001d50 <ESP_SetParamsSoftAP>:

uint8_t ESP_SetParamsSoftAP(char* ssid, char* password)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
	if(ssid != NULL && password != NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01f      	beq.n	8001da0 <ESP_SetParamsSoftAP+0x50>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d01c      	beq.n	8001da0 <ESP_SetParamsSoftAP+0x50>
	{
		requestFlush();
 8001d66:	f7ff ff1b 	bl	8001ba0 <requestFlush>
		sprintf(request, "AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", ssid, password);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	490f      	ldr	r1, [pc, #60]	; (8001dac <ESP_SetParamsSoftAP+0x5c>)
 8001d70:	480f      	ldr	r0, [pc, #60]	; (8001db0 <ESP_SetParamsSoftAP+0x60>)
 8001d72:	f006 fba1 	bl	80084b8 <siprintf>
		RingBuffClear(&UART2_rx_data);
 8001d76:	480f      	ldr	r0, [pc, #60]	; (8001db4 <ESP_SetParamsSoftAP+0x64>)
 8001d78:	f000 f8dd 	bl	8001f36 <RingBuffClear>
		UART2_SendData(request, strlen(request));
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <ESP_SetParamsSoftAP+0x60>)
 8001d7e:	f7fe fa27 	bl	80001d0 <strlen>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4619      	mov	r1, r3
 8001d86:	480a      	ldr	r0, [pc, #40]	; (8001db0 <ESP_SetParamsSoftAP+0x60>)
 8001d88:	f005 fa76 	bl	8007278 <UART2_SendData>

		if(waitCallBack("OK", 10000))
 8001d8c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001d90:	4809      	ldr	r0, [pc, #36]	; (8001db8 <ESP_SetParamsSoftAP+0x68>)
 8001d92:	f7ff ff3b 	bl	8001c0c <waitCallBack>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <ESP_SetParamsSoftAP+0x50>
		{
			return 1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <ESP_SetParamsSoftAP+0x52>
		}
	}
	return 0;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	08009e50 	.word	0x08009e50
 8001db0:	20009d28 	.word	0x20009d28
 8001db4:	20008d24 	.word	0x20008d24
 8001db8:	08009e28 	.word	0x08009e28

08001dbc <ESP_SendData>:

	return 0;
}

uint8_t ESP_SendData(const char *url, uint16_t port, const char *data, uint32_t dataLength, uint8_t flagRN)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	817b      	strh	r3, [r7, #10]
	requestFlush();
 8001dcc:	f7ff fee8 	bl	8001ba0 <requestFlush>
	sprintf(request, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", url, port);
 8001dd0:	897b      	ldrh	r3, [r7, #10]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4937      	ldr	r1, [pc, #220]	; (8001eb4 <ESP_SendData+0xf8>)
 8001dd6:	4838      	ldr	r0, [pc, #224]	; (8001eb8 <ESP_SendData+0xfc>)
 8001dd8:	f006 fb6e 	bl	80084b8 <siprintf>
	RingBuffClear(&UART2_rx_data);
 8001ddc:	4837      	ldr	r0, [pc, #220]	; (8001ebc <ESP_SendData+0x100>)
 8001dde:	f000 f8aa 	bl	8001f36 <RingBuffClear>
	UART2_SendData(request, strlen(request));
 8001de2:	4835      	ldr	r0, [pc, #212]	; (8001eb8 <ESP_SendData+0xfc>)
 8001de4:	f7fe f9f4 	bl	80001d0 <strlen>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4619      	mov	r1, r3
 8001dec:	4832      	ldr	r0, [pc, #200]	; (8001eb8 <ESP_SendData+0xfc>)
 8001dee:	f005 fa43 	bl	8007278 <UART2_SendData>
	delay(1000);
 8001df2:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <ESP_SendData+0x104>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dfa:	4798      	blx	r3

	if(waitCallBack("OK", 1000))
 8001dfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e00:	4830      	ldr	r0, [pc, #192]	; (8001ec4 <ESP_SendData+0x108>)
 8001e02:	f7ff ff03 	bl	8001c0c <waitCallBack>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d03a      	beq.n	8001e82 <ESP_SendData+0xc6>
	{
		requestFlush();
 8001e0c:	f7ff fec8 	bl	8001ba0 <requestFlush>
		sprintf(request, "AT+CIPSEND=%lu\r\n", dataLength);
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	492d      	ldr	r1, [pc, #180]	; (8001ec8 <ESP_SendData+0x10c>)
 8001e14:	4828      	ldr	r0, [pc, #160]	; (8001eb8 <ESP_SendData+0xfc>)
 8001e16:	f006 fb4f 	bl	80084b8 <siprintf>
		RingBuffClear(&UART2_rx_data);
 8001e1a:	4828      	ldr	r0, [pc, #160]	; (8001ebc <ESP_SendData+0x100>)
 8001e1c:	f000 f88b 	bl	8001f36 <RingBuffClear>
		UART2_SendData(request, strlen(request));
 8001e20:	4825      	ldr	r0, [pc, #148]	; (8001eb8 <ESP_SendData+0xfc>)
 8001e22:	f7fe f9d5 	bl	80001d0 <strlen>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4823      	ldr	r0, [pc, #140]	; (8001eb8 <ESP_SendData+0xfc>)
 8001e2c:	f005 fa24 	bl	8007278 <UART2_SendData>
		delay(10);
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <ESP_SendData+0x104>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	200a      	movs	r0, #10
 8001e36:	4798      	blx	r3

		if(waitCallBack(">", 1000) && data != NULL)
 8001e38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e3c:	4823      	ldr	r0, [pc, #140]	; (8001ecc <ESP_SendData+0x110>)
 8001e3e:	f7ff fee5 	bl	8001c0c <waitCallBack>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d02f      	beq.n	8001ea8 <ESP_SendData+0xec>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d02c      	beq.n	8001ea8 <ESP_SendData+0xec>
		{
			for(int i = 0; i < dataLength; i++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	e009      	b.n	8001e68 <ESP_SendData+0xac>
			{
				UART2_SendData_byte(data[i]);
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f005 f9f3 	bl	8007248 <UART2_SendData_byte>
			for(int i = 0; i < dataLength; i++)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3301      	adds	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d3f1      	bcc.n	8001e54 <ESP_SendData+0x98>
			}
			if(flagRN)
 8001e70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d017      	beq.n	8001ea8 <ESP_SendData+0xec>
			{
				UART2_SendData("\r\n", 2);
 8001e78:	2102      	movs	r1, #2
 8001e7a:	4815      	ldr	r0, [pc, #84]	; (8001ed0 <ESP_SendData+0x114>)
 8001e7c:	f005 f9fc 	bl	8007278 <UART2_SendData>
 8001e80:	e012      	b.n	8001ea8 <ESP_SendData+0xec>
			}
		}

	} else {
		requestFlush();
 8001e82:	f7ff fe8d 	bl	8001ba0 <requestFlush>
		sprintf(request, "AT+CIPCLOSE\r\n");
 8001e86:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <ESP_SendData+0xfc>)
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <ESP_SendData+0x118>)
 8001e8a:	4614      	mov	r4, r2
 8001e8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001e8e:	6020      	str	r0, [r4, #0]
 8001e90:	6061      	str	r1, [r4, #4]
 8001e92:	60a2      	str	r2, [r4, #8]
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	81a3      	strh	r3, [r4, #12]
		UART2_SendData(request, strlen(request));
 8001e98:	4807      	ldr	r0, [pc, #28]	; (8001eb8 <ESP_SendData+0xfc>)
 8001e9a:	f7fe f999 	bl	80001d0 <strlen>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <ESP_SendData+0xfc>)
 8001ea4:	f005 f9e8 	bl	8007278 <UART2_SendData>
	}

	return 0;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	371c      	adds	r7, #28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd90      	pop	{r4, r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	08009e88 	.word	0x08009e88
 8001eb8:	20009d28 	.word	0x20009d28
 8001ebc:	20008d24 	.word	0x20008d24
 8001ec0:	20000644 	.word	0x20000644
 8001ec4:	08009e28 	.word	0x08009e28
 8001ec8:	08009ea4 	.word	0x08009ea4
 8001ecc:	08009eb8 	.word	0x08009eb8
 8001ed0:	08009e04 	.word	0x08009e04
 8001ed4:	08009ebc 	.word	0x08009ebc

08001ed8 <RingBuffInit>:
 */

#include "ring_buffer.h"

void RingBuffInit(struct ring_buffer_struct *rng)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	rng->index_in = rng->index_out = 0;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	805a      	strh	r2, [r3, #2]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	885a      	ldrh	r2, [r3, #2]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	801a      	strh	r2, [r3, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <RingBuffPush>:

void RingBuffPush(struct ring_buffer_struct *rng, char element)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	70fb      	strb	r3, [r7, #3]
	rng->buffer[rng->index_in++] = element;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	b291      	uxth	r1, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	8011      	strh	r1, [r2, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4413      	add	r3, r2
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	711a      	strb	r2, [r3, #4]
	rng->index_in &= BUF_MASK;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	801a      	strh	r2, [r3, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <RingBuffClear>:
	}
	return 0;
}

void RingBuffClear(struct ring_buffer_struct *rng)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
	memset(rng->buffer, 0, BUF_SIZE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3304      	adds	r3, #4
 8001f42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f006 faad 	bl	80084a8 <memset>
	rng->buffer[0] = 0;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	711a      	strb	r2, [r3, #4]
	rng->index_out = rng->index_in = 0;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	801a      	strh	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	881a      	ldrh	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	805a      	strh	r2, [r3, #2]
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <RingBuffGetArray>:
{
	return (rng->index_in - rng->index_out) & BUF_MASK;
}

char * RingBuffGetArray(struct ring_buffer_struct *rng)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
	return ((char *)rng->buffer);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3304      	adds	r3, #4
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f88:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <HAL_Init+0x40>)
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_Init+0x40>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f94:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <HAL_Init+0x40>)
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_Init+0x40>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa0:	4a08      	ldr	r2, [pc, #32]	; (8001fc4 <HAL_Init+0x40>)
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_Init+0x40>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fac:	2003      	movs	r0, #3
 8001fae:	f000 f8ca 	bl	8002146 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f006 f866 	bl	8008084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb8:	f006 f838 	bl	800802c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023c00 	.word	0x40023c00

08001fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_IncTick+0x20>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_IncTick+0x24>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <HAL_IncTick+0x24>)
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	2000a128 	.word	0x2000a128

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0b      	blt.n	800207e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	4909      	ldr	r1, [pc, #36]	; (800208c <__NVIC_EnableIRQ+0x38>)
 8002068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206c:	095b      	lsrs	r3, r3, #5
 800206e:	79fa      	ldrb	r2, [r7, #7]
 8002070:	f002 021f 	and.w	r2, r2, #31
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	490d      	ldr	r1, [pc, #52]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	4909      	ldr	r1, [pc, #36]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	3b04      	subs	r3, #4
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	2201      	movs	r2, #1
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	1e5a      	subs	r2, r3, #1
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	401a      	ands	r2, r3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212a:	2101      	movs	r1, #1
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	1e59      	subs	r1, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	4313      	orrs	r3, r2
         );
}
 800213a:	4618      	mov	r0, r3
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ff4e 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800216e:	f7ff ff63 	bl	8002038 <__NVIC_GetPriorityGrouping>
 8002172:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	68b9      	ldr	r1, [r7, #8]
 8002178:	6978      	ldr	r0, [r7, #20]
 800217a:	f7ff ffb3 	bl	80020e4 <NVIC_EncodePriority>
 800217e:	4602      	mov	r2, r0
 8002180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ff82 	bl	8002090 <__NVIC_SetPriority>
}
 800218c:	bf00      	nop
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff56 	bl	8002054 <__NVIC_EnableIRQ>
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	2000000c 	.word	0x2000000c

080021c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021cc:	f7ff fff0 	bl	80021b0 <HAL_RCC_GetHCLKFreq>
 80021d0:	4601      	mov	r1, r0
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	0b5b      	lsrs	r3, r3, #13
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	4a03      	ldr	r2, [pc, #12]	; (80021ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40023800 	.word	0x40023800
 80021ec:	0800a0c0 	.word	0x0800a0c0

080021f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	220f      	movs	r2, #15
 80021fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_RCC_GetClockConfig+0x5c>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0203 	and.w	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800220c:	4b0f      	ldr	r3, [pc, #60]	; (800224c <HAL_RCC_GetClockConfig+0x5c>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <HAL_RCC_GetClockConfig+0x5c>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_RCC_GetClockConfig+0x5c>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	08db      	lsrs	r3, r3, #3
 800222a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <HAL_RCC_GetClockConfig+0x60>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 020f 	and.w	r2, r3, #15
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	601a      	str	r2, [r3, #0]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40023c00 	.word	0x40023c00

08002254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e01d      	b.n	80022a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f815 	bl	80022aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3304      	adds	r3, #4
 8002290:	4619      	mov	r1, r3
 8002292:	4610      	mov	r0, r2
 8002294:	f000 f968 	bl	8002568 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022be:	b480      	push	{r7}
 80022c0:	b085      	sub	sp, #20
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	68d2      	ldr	r2, [r2, #12]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b06      	cmp	r3, #6
 80022e6:	d007      	beq.n	80022f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b02      	cmp	r3, #2
 800231a:	d122      	bne.n	8002362 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b02      	cmp	r3, #2
 8002328:	d11b      	bne.n	8002362 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f06f 0202 	mvn.w	r2, #2
 8002332:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f8ee 	bl	800252a <HAL_TIM_IC_CaptureCallback>
 800234e:	e005      	b.n	800235c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f8e0 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f8f1 	bl	800253e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b04      	cmp	r3, #4
 800236e:	d122      	bne.n	80023b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b04      	cmp	r3, #4
 800237c:	d11b      	bne.n	80023b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f06f 0204 	mvn.w	r2, #4
 8002386:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f8c4 	bl	800252a <HAL_TIM_IC_CaptureCallback>
 80023a2:	e005      	b.n	80023b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f8b6 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f8c7 	bl	800253e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d122      	bne.n	800240a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d11b      	bne.n	800240a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f06f 0208 	mvn.w	r2, #8
 80023da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2204      	movs	r2, #4
 80023e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f89a 	bl	800252a <HAL_TIM_IC_CaptureCallback>
 80023f6:	e005      	b.n	8002404 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f88c 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f89d 	bl	800253e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	2b10      	cmp	r3, #16
 8002416:	d122      	bne.n	800245e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b10      	cmp	r3, #16
 8002424:	d11b      	bne.n	800245e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f06f 0210 	mvn.w	r2, #16
 800242e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2208      	movs	r2, #8
 8002434:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f870 	bl	800252a <HAL_TIM_IC_CaptureCallback>
 800244a:	e005      	b.n	8002458 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f862 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f873 	bl	800253e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b01      	cmp	r3, #1
 800246a:	d10e      	bne.n	800248a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d107      	bne.n	800248a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f06f 0201 	mvn.w	r2, #1
 8002482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f005 fbbf 	bl	8007c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002494:	2b80      	cmp	r3, #128	; 0x80
 8002496:	d10e      	bne.n	80024b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a2:	2b80      	cmp	r3, #128	; 0x80
 80024a4:	d107      	bne.n	80024b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f903 	bl	80026bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c0:	2b40      	cmp	r3, #64	; 0x40
 80024c2:	d10e      	bne.n	80024e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ce:	2b40      	cmp	r3, #64	; 0x40
 80024d0:	d107      	bne.n	80024e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f838 	bl	8002552 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d10e      	bne.n	800250e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d107      	bne.n	800250e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f06f 0220 	mvn.w	r2, #32
 8002506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f8cd 	bl	80026a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a40      	ldr	r2, [pc, #256]	; (800267c <TIM_Base_SetConfig+0x114>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <TIM_Base_SetConfig+0x40>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002586:	d00f      	beq.n	80025a8 <TIM_Base_SetConfig+0x40>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a3d      	ldr	r2, [pc, #244]	; (8002680 <TIM_Base_SetConfig+0x118>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d00b      	beq.n	80025a8 <TIM_Base_SetConfig+0x40>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a3c      	ldr	r2, [pc, #240]	; (8002684 <TIM_Base_SetConfig+0x11c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d007      	beq.n	80025a8 <TIM_Base_SetConfig+0x40>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a3b      	ldr	r2, [pc, #236]	; (8002688 <TIM_Base_SetConfig+0x120>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d003      	beq.n	80025a8 <TIM_Base_SetConfig+0x40>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a3a      	ldr	r2, [pc, #232]	; (800268c <TIM_Base_SetConfig+0x124>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d108      	bne.n	80025ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a2f      	ldr	r2, [pc, #188]	; (800267c <TIM_Base_SetConfig+0x114>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d02b      	beq.n	800261a <TIM_Base_SetConfig+0xb2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c8:	d027      	beq.n	800261a <TIM_Base_SetConfig+0xb2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a2c      	ldr	r2, [pc, #176]	; (8002680 <TIM_Base_SetConfig+0x118>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d023      	beq.n	800261a <TIM_Base_SetConfig+0xb2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a2b      	ldr	r2, [pc, #172]	; (8002684 <TIM_Base_SetConfig+0x11c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01f      	beq.n	800261a <TIM_Base_SetConfig+0xb2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a2a      	ldr	r2, [pc, #168]	; (8002688 <TIM_Base_SetConfig+0x120>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d01b      	beq.n	800261a <TIM_Base_SetConfig+0xb2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a29      	ldr	r2, [pc, #164]	; (800268c <TIM_Base_SetConfig+0x124>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d017      	beq.n	800261a <TIM_Base_SetConfig+0xb2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a28      	ldr	r2, [pc, #160]	; (8002690 <TIM_Base_SetConfig+0x128>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <TIM_Base_SetConfig+0xb2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a27      	ldr	r2, [pc, #156]	; (8002694 <TIM_Base_SetConfig+0x12c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00f      	beq.n	800261a <TIM_Base_SetConfig+0xb2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a26      	ldr	r2, [pc, #152]	; (8002698 <TIM_Base_SetConfig+0x130>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00b      	beq.n	800261a <TIM_Base_SetConfig+0xb2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a25      	ldr	r2, [pc, #148]	; (800269c <TIM_Base_SetConfig+0x134>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d007      	beq.n	800261a <TIM_Base_SetConfig+0xb2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a24      	ldr	r2, [pc, #144]	; (80026a0 <TIM_Base_SetConfig+0x138>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d003      	beq.n	800261a <TIM_Base_SetConfig+0xb2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <TIM_Base_SetConfig+0x13c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d108      	bne.n	800262c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4313      	orrs	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <TIM_Base_SetConfig+0x114>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d003      	beq.n	8002660 <TIM_Base_SetConfig+0xf8>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a0c      	ldr	r2, [pc, #48]	; (800268c <TIM_Base_SetConfig+0x124>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d103      	bne.n	8002668 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	615a      	str	r2, [r3, #20]
}
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40010000 	.word	0x40010000
 8002680:	40000400 	.word	0x40000400
 8002684:	40000800 	.word	0x40000800
 8002688:	40000c00 	.word	0x40000c00
 800268c:	40010400 	.word	0x40010400
 8002690:	40014000 	.word	0x40014000
 8002694:	40014400 	.word	0x40014400
 8002698:	40014800 	.word	0x40014800
 800269c:	40001800 	.word	0x40001800
 80026a0:	40001c00 	.word	0x40001c00
 80026a4:	40002000 	.word	0x40002000

080026a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	; 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2103      	movs	r1, #3
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	401a      	ands	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	61bb      	str	r3, [r7, #24]
  return result;
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	fa01 f303 	lsl.w	r3, r1, r3
 800271c:	431a      	orrs	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	601a      	str	r2, [r3, #0]
}
 8002722:	bf00      	nop
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800272e:	b480      	push	{r7}
 8002730:	b085      	sub	sp, #20
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	43db      	mvns	r3, r3
 8002742:	401a      	ands	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	431a      	orrs	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	605a      	str	r2, [r3, #4]
}
 8002752:	bf00      	nop
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800275e:	b480      	push	{r7}
 8002760:	b089      	sub	sp, #36	; 0x24
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	613b      	str	r3, [r7, #16]
  return result;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	2103      	movs	r1, #3
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	401a      	ands	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	61bb      	str	r3, [r7, #24]
  return result;
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	431a      	orrs	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80027b0:	bf00      	nop
 80027b2:	3724      	adds	r7, #36	; 0x24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80027bc:	b480      	push	{r7}
 80027be:	b089      	sub	sp, #36	; 0x24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	613b      	str	r3, [r7, #16]
  return result;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2103      	movs	r1, #3
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	401a      	ands	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	61bb      	str	r3, [r7, #24]
  return result;
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	431a      	orrs	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	60da      	str	r2, [r3, #12]
}
 800280e:	bf00      	nop
 8002810:	3724      	adds	r7, #36	; 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800281a:	b480      	push	{r7}
 800281c:	b089      	sub	sp, #36	; 0x24
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a1a      	ldr	r2, [r3, #32]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	613b      	str	r3, [r7, #16]
  return result;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	fab3 f383 	clz	r3, r3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	210f      	movs	r1, #15
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	401a      	ands	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	61bb      	str	r3, [r7, #24]
  return result;
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	fab3 f383 	clz	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	431a      	orrs	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800286c:	bf00      	nop
 800286e:	3724      	adds	r7, #36	; 0x24
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	613b      	str	r3, [r7, #16]
  return result;
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	210f      	movs	r1, #15
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	401a      	ands	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	61bb      	str	r3, [r7, #24]
  return result;
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	fa01 f303 	lsl.w	r3, r1, r3
 80028c8:	431a      	orrs	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80028ce:	bf00      	nop
 80028d0:	3724      	adds	r7, #36	; 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b088      	sub	sp, #32
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	613b      	str	r3, [r7, #16]
  return result;
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002904:	e050      	b.n	80029a8 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	2101      	movs	r1, #1
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d042      	beq.n	80029a2 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d003      	beq.n	800292c <LL_GPIO_Init+0x52>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d10d      	bne.n	8002948 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	461a      	mov	r2, r3
 8002932:	69b9      	ldr	r1, [r7, #24]
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ff12 	bl	800275e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	461a      	mov	r2, r3
 8002940:	69b9      	ldr	r1, [r7, #24]
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff fef3 	bl	800272e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	461a      	mov	r2, r3
 800294e:	69b9      	ldr	r1, [r7, #24]
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ff33 	bl	80027bc <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d11a      	bne.n	8002994 <LL_GPIO_Init+0xba>
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	60bb      	str	r3, [r7, #8]
  return result;
 800296a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b07      	cmp	r3, #7
 8002974:	d807      	bhi.n	8002986 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	461a      	mov	r2, r3
 800297c:	69b9      	ldr	r1, [r7, #24]
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff ff4b 	bl	800281a <LL_GPIO_SetAFPin_0_7>
 8002984:	e006      	b.n	8002994 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	461a      	mov	r2, r3
 800298c:	69b9      	ldr	r1, [r7, #24]
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff ff72 	bl	8002878 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	461a      	mov	r2, r3
 800299a:	69b9      	ldr	r1, [r7, #24]
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff fe97 	bl	80026d0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3301      	adds	r3, #1
 80029a6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	fa22 f303 	lsr.w	r3, r2, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1a7      	bne.n	8002906 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3720      	adds	r7, #32
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <LL_RCC_GetSysClkSource+0x18>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 030c 	and.w	r3, r3, #12
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40023800 	.word	0x40023800

080029dc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <LL_RCC_GetAHBPrescaler+0x18>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800

080029f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <LL_RCC_GetAPB1Prescaler+0x18>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800

08002a14 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <LL_RCC_GetAPB2Prescaler+0x18>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800

08002a30 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <LL_RCC_PLL_GetMainSource+0x18>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800

08002a4c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002a50:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <LL_RCC_PLL_GetN+0x18>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	099b      	lsrs	r3, r3, #6
 8002a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	40023800 	.word	0x40023800

08002a68 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <LL_RCC_PLL_GetP+0x18>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800

08002a84 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <LL_RCC_PLL_GetDivider+0x18>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800

08002aa0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002aa8:	f000 f820 	bl	8002aec <RCC_GetSystemClockFreq>
 8002aac:	4602      	mov	r2, r0
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f83e 	bl	8002b38 <RCC_GetHCLKClockFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f84c 	bl	8002b64 <RCC_GetPCLK1ClockFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f858 	bl	8002b8c <RCC_GetPCLK2ClockFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	60da      	str	r2, [r3, #12]
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002af6:	f7ff ff63 	bl	80029c0 <LL_RCC_GetSysClkSource>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d006      	beq.n	8002b0e <RCC_GetSystemClockFreq+0x22>
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d007      	beq.n	8002b14 <RCC_GetSystemClockFreq+0x28>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <RCC_GetSystemClockFreq+0x44>)
 8002b0a:	607b      	str	r3, [r7, #4]
      break;
 8002b0c:	e00a      	b.n	8002b24 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002b0e:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <RCC_GetSystemClockFreq+0x48>)
 8002b10:	607b      	str	r3, [r7, #4]
      break;
 8002b12:	e007      	b.n	8002b24 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002b14:	2008      	movs	r0, #8
 8002b16:	f000 f84d 	bl	8002bb4 <RCC_PLL_GetFreqDomain_SYS>
 8002b1a:	6078      	str	r0, [r7, #4]
      break;
 8002b1c:	e002      	b.n	8002b24 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002b1e:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <RCC_GetSystemClockFreq+0x44>)
 8002b20:	607b      	str	r3, [r7, #4]
      break;
 8002b22:	bf00      	nop
  }

  return frequency;
 8002b24:	687b      	ldr	r3, [r7, #4]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	00f42400 	.word	0x00f42400
 8002b34:	007a1200 	.word	0x007a1200

08002b38 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002b40:	f7ff ff4c 	bl	80029dc <LL_RCC_GetAHBPrescaler>
 8002b44:	4603      	mov	r3, r0
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <RCC_GetHCLKClockFreq+0x28>)
 8002b4e:	5cd3      	ldrb	r3, [r2, r3]
 8002b50:	461a      	mov	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	40d3      	lsrs	r3, r2
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	0800a0b0 	.word	0x0800a0b0

08002b64 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002b6c:	f7ff ff44 	bl	80029f8 <LL_RCC_GetAPB1Prescaler>
 8002b70:	4603      	mov	r3, r0
 8002b72:	0a9b      	lsrs	r3, r3, #10
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <RCC_GetPCLK1ClockFreq+0x24>)
 8002b76:	5cd3      	ldrb	r3, [r2, r3]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	40d3      	lsrs	r3, r2
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	0800a0c0 	.word	0x0800a0c0

08002b8c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002b94:	f7ff ff3e 	bl	8002a14 <LL_RCC_GetAPB2Prescaler>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	0b5b      	lsrs	r3, r3, #13
 8002b9c:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <RCC_GetPCLK2ClockFreq+0x24>)
 8002b9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	40d3      	lsrs	r3, r2
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	0800a0c0 	.word	0x0800a0c0

08002bb4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002bc8:	f7ff ff32 	bl	8002a30 <LL_RCC_PLL_GetMainSource>
 8002bcc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <RCC_PLL_GetFreqDomain_SYS+0x28>
 8002bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd8:	d003      	beq.n	8002be2 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8002bda:	e005      	b.n	8002be8 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002bdc:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002bde:	617b      	str	r3, [r7, #20]
      break;
 8002be0:	e005      	b.n	8002bee <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002be4:	617b      	str	r3, [r7, #20]
      break;
 8002be6:	e002      	b.n	8002bee <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002bea:	617b      	str	r3, [r7, #20]
      break;
 8002bec:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d113      	bne.n	8002c1c <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002bf4:	f7ff ff46 	bl	8002a84 <LL_RCC_PLL_GetDivider>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	fbb3 f4f2 	udiv	r4, r3, r2
 8002c00:	f7ff ff24 	bl	8002a4c <LL_RCC_PLL_GetN>
 8002c04:	4603      	mov	r3, r0
 8002c06:	fb03 f404 	mul.w	r4, r3, r4
 8002c0a:	f7ff ff2d 	bl	8002a68 <LL_RCC_PLL_GetP>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	3301      	adds	r3, #1
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	fbb4 f3f3 	udiv	r3, r4, r3
 8002c1a:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002c1c:	693b      	ldr	r3, [r7, #16]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd90      	pop	{r4, r7, pc}
 8002c26:	bf00      	nop
 8002c28:	00f42400 	.word	0x00f42400
 8002c2c:	007a1200 	.word	0x007a1200

08002c30 <LL_RTC_SetHourFormat>:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetHourFormat(RTC_TypeDef *RTCx, uint32_t HourFormat)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	609a      	str	r2, [r3, #8]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_RTC_GetHourFormat>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  */
__STATIC_INLINE uint32_t LL_RTC_GetHourFormat(RTC_TypeDef *RTCx)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c80:	60da      	str	r2, [r3, #12]
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c9c:	60da      	str	r2, [r3, #12]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <LL_RTC_IsShadowRegBypassEnabled>:
  * @rmtoll CR           BYPSHAD       LL_RTC_IsShadowRegBypassEnabled
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsShadowRegBypassEnabled(RTC_TypeDef *RTCx)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	bf0c      	ite	eq
 8002cbe:	2301      	moveq	r3, #1
 8002cc0:	2300      	movne	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	041b      	lsls	r3, r3, #16
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	611a      	str	r2, [r3, #16]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	611a      	str	r2, [r3, #16]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	22ff      	movs	r2, #255	; 0xff
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	22ca      	movs	r2, #202	; 0xca
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2253      	movs	r2, #83	; 0x53
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_RTC_TIME_Config>:
  * @param  Minutes Value between Min_Data=0x00 and Max_Data=0x59
  * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TIME_Config(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 8002d5c:	b490      	push	{r4, r7}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;

  temp = Format12_24                                                                                    | \
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8002d7c:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8002d82:	ea42 0403 	orr.w	r4, r2, r3
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8002d8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d92:	ea43 0204 	orr.w	r2, r3, r4
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	601a      	str	r2, [r3, #0]
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc90      	pop	{r4, r7}
 8002da2:	4770      	bx	lr

08002da4 <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 8002da4:	b490      	push	{r4, r7}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;
 8002db2:	2400      	movs	r4, #0

  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	041b      	lsls	r3, r3, #16
 8002dbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8002dc0:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8002dc8:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8002dce:	ea42 0403 	orr.w	r4, r2, r3

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <LL_RTC_DATE_Config+0x48>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	ea43 0204 	orr.w	r2, r3, r4
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	605a      	str	r2, [r3, #4]
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc90      	pop	{r4, r7}
 8002dea:	4770      	bx	lr
 8002dec:	ff0000c0 	.word	0xff0000c0

08002df0 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e00:	2b40      	cmp	r3, #64	; 0x40
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	bf0c      	ite	eq
 8002e2a:	2301      	moveq	r3, #1
 8002e2c:	2300      	movne	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4c:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	60da      	str	r2, [r3, #12]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8002e64:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e70:	bf0c      	ite	eq
 8002e72:	2301      	moveq	r3, #1
 8002e74:	2300      	movne	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	e000e010 	.word	0xe000e010

08002e88 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff ff50 	bl	8002d3c <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f971 	bl	8003184 <LL_RTC_EnterInitMode>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d016      	beq.n	8002ed6 <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4619      	mov	r1, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff febe 	bl	8002c30 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ff1c 	bl	8002cf8 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ff02 	bl	8002cd0 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff fede 	bl	8002c8e <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff ff23 	bl	8002d22 <LL_RTC_EnableWriteProtection>

  return status;
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 8002ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f7ff fea9 	bl	8002c56 <LL_RTC_GetHourFormat>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10c      	bne.n	8002f24 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	e008      	b.n	8002f24 <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff fe9f 	bl	8002c56 <LL_RTC_GetHourFormat>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d102      	bne.n	8002f24 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f7ff ff09 	bl	8002d3c <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f92a 	bl	8003184 <LL_RTC_EnterInitMode>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d073      	beq.n	800301e <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00f      	beq.n	8002f5c <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	791b      	ldrb	r3, [r3, #4]
 8002f44:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8002f4a:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	4603      	mov	r3, r0
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7ff ff01 	bl	8002d5c <LL_RTC_TIME_Config>
 8002f5a:	e04f      	b.n	8002ffc <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681c      	ldr	r4, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	791b      	ldrb	r3, [r3, #4]
 8002f64:	4a32      	ldr	r2, [pc, #200]	; (8003030 <LL_RTC_TIME_Init+0x148>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	08db      	lsrs	r3, r3, #3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	b2d8      	uxtb	r0, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	791a      	ldrb	r2, [r3, #4]
 8002f76:	4b2e      	ldr	r3, [pc, #184]	; (8003030 <LL_RTC_TIME_Init+0x148>)
 8002f78:	fba3 1302 	umull	r1, r3, r3, r2
 8002f7c:	08d9      	lsrs	r1, r3, #3
 8002f7e:	460b      	mov	r3, r1
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	4303      	orrs	r3, r0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	795b      	ldrb	r3, [r3, #5]
 8002f94:	4a26      	ldr	r2, [pc, #152]	; (8003030 <LL_RTC_TIME_Init+0x148>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	08db      	lsrs	r3, r3, #3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	b2d8      	uxtb	r0, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	795a      	ldrb	r2, [r3, #5]
 8002fa6:	4b22      	ldr	r3, [pc, #136]	; (8003030 <LL_RTC_TIME_Init+0x148>)
 8002fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fac:	08d9      	lsrs	r1, r3, #3
 8002fae:	460b      	mov	r3, r1
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	4303      	orrs	r3, r0
 8002fbc:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8002fbe:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	799b      	ldrb	r3, [r3, #6]
 8002fc4:	4a1a      	ldr	r2, [pc, #104]	; (8003030 <LL_RTC_TIME_Init+0x148>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	08db      	lsrs	r3, r3, #3
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	b2d8      	uxtb	r0, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	799a      	ldrb	r2, [r3, #6]
 8002fd6:	4b16      	ldr	r3, [pc, #88]	; (8003030 <LL_RTC_TIME_Init+0x148>)
 8002fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fdc:	08d9      	lsrs	r1, r3, #3
 8002fde:	460b      	mov	r3, r1
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	4303      	orrs	r3, r0
 8002fec:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	4633      	mov	r3, r6
 8002ff2:	462a      	mov	r2, r5
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f7ff feb0 	bl	8002d5c <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTC);
 8002ffc:	480d      	ldr	r0, [pc, #52]	; (8003034 <LL_RTC_TIME_Init+0x14c>)
 8002ffe:	f7ff fe46 	bl	8002c8e <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f7ff fe51 	bl	8002caa <LL_RTC_IsShadowRegBypassEnabled>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d105      	bne.n	800301a <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f8ed 	bl	80031ee <LL_RTC_WaitForSynchro>
 8003014:	4603      	mov	r3, r0
 8003016:	75fb      	strb	r3, [r7, #23]
 8003018:	e001      	b.n	800301e <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 800301a:	2300      	movs	r3, #0
 800301c:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f7ff fe7f 	bl	8002d22 <LL_RTC_EnableWriteProtection>

  return status;
 8003024:	7dfb      	ldrb	r3, [r7, #23]
}
 8003026:	4618      	mov	r0, r3
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800302e:	bf00      	nop
 8003030:	cccccccd 	.word	0xcccccccd
 8003034:	40002800 	.word	0x40002800

08003038 <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 8003038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303a:	b089      	sub	sp, #36	; 0x24
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10e      	bne.n	800306c <LL_RTC_DATE_Init+0x34>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	785b      	ldrb	r3, [r3, #1]
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	785b      	ldrb	r3, [r3, #1]
 800305e:	f023 0310 	bic.w	r3, r3, #16
 8003062:	b2db      	uxtb	r3, r3
 8003064:	330a      	adds	r3, #10
 8003066:	b2da      	uxtb	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff fe65 	bl	8002d3c <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f886 	bl	8003184 <LL_RTC_EnterInitMode>
 8003078:	4603      	mov	r3, r0
 800307a:	2b01      	cmp	r3, #1
 800307c:	d075      	beq.n	800316a <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d010      	beq.n	80030a6 <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4619      	mov	r1, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	789b      	ldrb	r3, [r3, #2]
 800308e:	461a      	mov	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	785b      	ldrb	r3, [r3, #1]
 8003094:	4618      	mov	r0, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	78db      	ldrb	r3, [r3, #3]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	4603      	mov	r3, r0
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f7ff fe80 	bl	8002da4 <LL_RTC_DATE_Config>
 80030a4:	e050      	b.n	8003148 <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	461c      	mov	r4, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	789b      	ldrb	r3, [r3, #2]
 80030b0:	4a32      	ldr	r2, [pc, #200]	; (800317c <LL_RTC_DATE_Init+0x144>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	08db      	lsrs	r3, r3, #3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	b2d8      	uxtb	r0, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	789a      	ldrb	r2, [r3, #2]
 80030c2:	4b2e      	ldr	r3, [pc, #184]	; (800317c <LL_RTC_DATE_Init+0x144>)
 80030c4:	fba3 1302 	umull	r1, r3, r3, r2
 80030c8:	08d9      	lsrs	r1, r3, #3
 80030ca:	460b      	mov	r3, r1
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	4303      	orrs	r3, r0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	785b      	ldrb	r3, [r3, #1]
 80030e0:	4a26      	ldr	r2, [pc, #152]	; (800317c <LL_RTC_DATE_Init+0x144>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	08db      	lsrs	r3, r3, #3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	b2d8      	uxtb	r0, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	785a      	ldrb	r2, [r3, #1]
 80030f2:	4b22      	ldr	r3, [pc, #136]	; (800317c <LL_RTC_DATE_Init+0x144>)
 80030f4:	fba3 1302 	umull	r1, r3, r3, r2
 80030f8:	08d9      	lsrs	r1, r3, #3
 80030fa:	460b      	mov	r3, r1
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	4303      	orrs	r3, r0
 8003108:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800310a:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	78db      	ldrb	r3, [r3, #3]
 8003110:	4a1a      	ldr	r2, [pc, #104]	; (800317c <LL_RTC_DATE_Init+0x144>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	08db      	lsrs	r3, r3, #3
 8003118:	b2db      	uxtb	r3, r3
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	b2d8      	uxtb	r0, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	78da      	ldrb	r2, [r3, #3]
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <LL_RTC_DATE_Init+0x144>)
 8003124:	fba3 1302 	umull	r1, r3, r3, r2
 8003128:	08d9      	lsrs	r1, r3, #3
 800312a:	460b      	mov	r3, r1
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	b2db      	uxtb	r3, r3
 8003136:	4303      	orrs	r3, r0
 8003138:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	4633      	mov	r3, r6
 800313e:	462a      	mov	r2, r5
 8003140:	4621      	mov	r1, r4
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f7ff fe2e 	bl	8002da4 <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTC);
 8003148:	480d      	ldr	r0, [pc, #52]	; (8003180 <LL_RTC_DATE_Init+0x148>)
 800314a:	f7ff fda0 	bl	8002c8e <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7ff fdab 	bl	8002caa <LL_RTC_IsShadowRegBypassEnabled>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d105      	bne.n	8003166 <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f847 	bl	80031ee <LL_RTC_WaitForSynchro>
 8003160:	4603      	mov	r3, r0
 8003162:	75fb      	strb	r3, [r7, #23]
 8003164:	e001      	b.n	800316a <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 8003166:	2300      	movs	r3, #0
 8003168:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f7ff fdd9 	bl	8002d22 <LL_RTC_EnableWriteProtection>

  return status;
 8003170:	7dfb      	ldrb	r3, [r7, #23]
}
 8003172:	4618      	mov	r0, r3
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800317a:	bf00      	nop
 800317c:	cccccccd 	.word	0xcccccccd
 8003180:	40002800 	.word	0x40002800

08003184 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 800318c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003190:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff fe28 	bl	8002df0 <LL_RTC_IsActiveFlag_INIT>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d11e      	bne.n	80031e4 <LL_RTC_EnterInitMode+0x60>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff fd63 	bl	8002c72 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fe1f 	bl	8002df0 <LL_RTC_IsActiveFlag_INIT>
 80031b2:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 80031b4:	e010      	b.n	80031d8 <LL_RTC_EnterInitMode+0x54>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80031b6:	f7ff fe53 	bl	8002e60 <LL_SYSTICK_IsActiveCounterFlag>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d102      	bne.n	80031c6 <LL_RTC_EnterInitMode+0x42>
      {
        timeout --;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff fe12 	bl	8002df0 <LL_RTC_IsActiveFlag_INIT>
 80031cc:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <LL_RTC_EnterInitMode+0x54>
      {
        status = ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <LL_RTC_EnterInitMode+0x60>
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d1e8      	bne.n	80031b6 <LL_RTC_EnterInitMode+0x32>
      }
    }
  }
  return status;
 80031e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 80031f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031fa:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 80031fc:	2300      	movs	r3, #0
 80031fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff fe19 	bl	8002e3c <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fe03 	bl	8002e16 <LL_RTC_IsActiveFlag_RS>
 8003210:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 8003212:	e010      	b.n	8003236 <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003214:	f7ff fe24 	bl	8002e60 <LL_SYSTICK_IsActiveCounterFlag>
 8003218:	4603      	mov	r3, r0
 800321a:	2b01      	cmp	r3, #1
 800321c:	d102      	bne.n	8003224 <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3b01      	subs	r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff fdf6 	bl	8002e16 <LL_RTC_IsActiveFlag_RS>
 800322a:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <LL_RTC_WaitForSynchro+0x54>
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e8      	bne.n	8003214 <LL_RTC_WaitForSynchro+0x26>
    }
  }

  if (status != ERROR)
 8003242:	7dfb      	ldrb	r3, [r7, #23]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d01e      	beq.n	8003286 <LL_RTC_WaitForSynchro+0x98>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 8003248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800324c:	60fb      	str	r3, [r7, #12]
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff fde1 	bl	8002e16 <LL_RTC_IsActiveFlag_RS>
 8003254:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8003256:	e010      	b.n	800327a <LL_RTC_WaitForSynchro+0x8c>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003258:	f7ff fe02 	bl	8002e60 <LL_SYSTICK_IsActiveCounterFlag>
 800325c:	4603      	mov	r3, r0
 800325e:	2b01      	cmp	r3, #1
 8003260:	d102      	bne.n	8003268 <LL_RTC_WaitForSynchro+0x7a>
      {
        timeout--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3b01      	subs	r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff fdd4 	bl	8002e16 <LL_RTC_IsActiveFlag_RS>
 800326e:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <LL_RTC_WaitForSynchro+0x8c>
      {
        status = ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <LL_RTC_WaitForSynchro+0x98>
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d1e8      	bne.n	8003258 <LL_RTC_WaitForSynchro+0x6a>
      }
    }
  }

  return (status);
 8003286:	7dfb      	ldrb	r3, [r7, #23]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b40      	cmp	r3, #64	; 0x40
 80032a2:	d101      	bne.n	80032a8 <LL_SPI_IsEnabled+0x18>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <LL_SPI_IsEnabled+0x1a>
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	611a      	str	r2, [r3, #16]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ffd3 	bl	8003290 <LL_SPI_IsEnabled>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d139      	bne.n	8003364 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032f8:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	6811      	ldr	r1, [r2, #0]
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	6852      	ldr	r2, [r2, #4]
 8003304:	4311      	orrs	r1, r2
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	6892      	ldr	r2, [r2, #8]
 800330a:	4311      	orrs	r1, r2
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	68d2      	ldr	r2, [r2, #12]
 8003310:	4311      	orrs	r1, r2
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	6912      	ldr	r2, [r2, #16]
 8003316:	4311      	orrs	r1, r2
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	6952      	ldr	r2, [r2, #20]
 800331c:	4311      	orrs	r1, r2
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	6992      	ldr	r2, [r2, #24]
 8003322:	4311      	orrs	r1, r2
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	69d2      	ldr	r2, [r2, #28]
 8003328:	4311      	orrs	r1, r2
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	6a12      	ldr	r2, [r2, #32]
 800332e:	430a      	orrs	r2, r1
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f023 0204 	bic.w	r2, r3, #4
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	0c1b      	lsrs	r3, r3, #16
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003352:	d105      	bne.n	8003360 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	4619      	mov	r1, r3
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff ffab 	bl	80032b6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003360:	2300      	movs	r3, #0
 8003362:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	61da      	str	r2, [r3, #28]
  return status;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800338a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	611a      	str	r2, [r3, #16]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	615a      	str	r2, [r3, #20]
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80033f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f4:	b091      	sub	sp, #68	; 0x44
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	63f8      	str	r0, [r7, #60]	; 0x3c
 80033fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80033fc:	637a      	str	r2, [r7, #52]	; 0x34
 80033fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003406:	f040 80a7 	bne.w	8003558 <LL_USART_SetBaudRate+0x168>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	4619      	mov	r1, r3
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	460b      	mov	r3, r1
 8003414:	4614      	mov	r4, r2
 8003416:	18db      	adds	r3, r3, r3
 8003418:	eb44 0404 	adc.w	r4, r4, r4
 800341c:	185b      	adds	r3, r3, r1
 800341e:	eb44 0402 	adc.w	r4, r4, r2
 8003422:	00e6      	lsls	r6, r4, #3
 8003424:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8003428:	00dd      	lsls	r5, r3, #3
 800342a:	462b      	mov	r3, r5
 800342c:	4634      	mov	r4, r6
 800342e:	185d      	adds	r5, r3, r1
 8003430:	eb44 0602 	adc.w	r6, r4, r2
 8003434:	4628      	mov	r0, r5
 8003436:	4631      	mov	r1, r6
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	f04f 0400 	mov.w	r4, #0
 800343e:	18db      	adds	r3, r3, r3
 8003440:	eb44 0404 	adc.w	r4, r4, r4
 8003444:	461a      	mov	r2, r3
 8003446:	4623      	mov	r3, r4
 8003448:	f7fc ff2a 	bl	80002a0 <__aeabi_uldivmod>
 800344c:	4603      	mov	r3, r0
 800344e:	460c      	mov	r4, r1
 8003450:	461a      	mov	r2, r3
 8003452:	4ba1      	ldr	r3, [pc, #644]	; (80036d8 <LL_USART_SetBaudRate+0x2e8>)
 8003454:	fba3 2302 	umull	r2, r3, r3, r2
 8003458:	095b      	lsrs	r3, r3, #5
 800345a:	b29b      	uxth	r3, r3
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	b29d      	uxth	r5, r3
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	4619      	mov	r1, r3
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	460b      	mov	r3, r1
 800346a:	4614      	mov	r4, r2
 800346c:	18db      	adds	r3, r3, r3
 800346e:	eb44 0404 	adc.w	r4, r4, r4
 8003472:	185b      	adds	r3, r3, r1
 8003474:	eb44 0402 	adc.w	r4, r4, r2
 8003478:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 800347c:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8003480:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8003484:	4653      	mov	r3, sl
 8003486:	465c      	mov	r4, fp
 8003488:	eb13 0a01 	adds.w	sl, r3, r1
 800348c:	eb44 0b02 	adc.w	fp, r4, r2
 8003490:	4650      	mov	r0, sl
 8003492:	4659      	mov	r1, fp
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	f04f 0400 	mov.w	r4, #0
 800349a:	18db      	adds	r3, r3, r3
 800349c:	eb44 0404 	adc.w	r4, r4, r4
 80034a0:	461a      	mov	r2, r3
 80034a2:	4623      	mov	r3, r4
 80034a4:	f7fc fefc 	bl	80002a0 <__aeabi_uldivmod>
 80034a8:	4603      	mov	r3, r0
 80034aa:	460c      	mov	r4, r1
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b8a      	ldr	r3, [pc, #552]	; (80036d8 <LL_USART_SetBaudRate+0x2e8>)
 80034b0:	fba3 1302 	umull	r1, r3, r3, r2
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	2164      	movs	r1, #100	; 0x64
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	3332      	adds	r3, #50	; 0x32
 80034c2:	4a85      	ldr	r2, [pc, #532]	; (80036d8 <LL_USART_SetBaudRate+0x2e8>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	442b      	add	r3, r5
 80034d8:	b29d      	uxth	r5, r3
 80034da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034dc:	4619      	mov	r1, r3
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4614      	mov	r4, r2
 80034e6:	18db      	adds	r3, r3, r3
 80034e8:	eb44 0404 	adc.w	r4, r4, r4
 80034ec:	185b      	adds	r3, r3, r1
 80034ee:	eb44 0402 	adc.w	r4, r4, r2
 80034f2:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80034f6:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80034fa:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80034fe:	4643      	mov	r3, r8
 8003500:	464c      	mov	r4, r9
 8003502:	eb13 0801 	adds.w	r8, r3, r1
 8003506:	eb44 0902 	adc.w	r9, r4, r2
 800350a:	4640      	mov	r0, r8
 800350c:	4649      	mov	r1, r9
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	f04f 0400 	mov.w	r4, #0
 8003514:	18db      	adds	r3, r3, r3
 8003516:	eb44 0404 	adc.w	r4, r4, r4
 800351a:	461a      	mov	r2, r3
 800351c:	4623      	mov	r3, r4
 800351e:	f7fc febf 	bl	80002a0 <__aeabi_uldivmod>
 8003522:	4603      	mov	r3, r0
 8003524:	460c      	mov	r4, r1
 8003526:	461a      	mov	r2, r3
 8003528:	4b6b      	ldr	r3, [pc, #428]	; (80036d8 <LL_USART_SetBaudRate+0x2e8>)
 800352a:	fba3 1302 	umull	r1, r3, r3, r2
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2164      	movs	r1, #100	; 0x64
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	3332      	adds	r3, #50	; 0x32
 800353c:	4a66      	ldr	r2, [pc, #408]	; (80036d8 <LL_USART_SetBaudRate+0x2e8>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	b29b      	uxth	r3, r3
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	b29b      	uxth	r3, r3
 800354c:	442b      	add	r3, r5
 800354e:	b29b      	uxth	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003554:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8003556:	e0ba      	b.n	80036ce <LL_USART_SetBaudRate+0x2de>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355a:	4619      	mov	r1, r3
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	460b      	mov	r3, r1
 8003562:	4614      	mov	r4, r2
 8003564:	18db      	adds	r3, r3, r3
 8003566:	eb44 0404 	adc.w	r4, r4, r4
 800356a:	185b      	adds	r3, r3, r1
 800356c:	eb44 0402 	adc.w	r4, r4, r2
 8003570:	00e0      	lsls	r0, r4, #3
 8003572:	6178      	str	r0, [r7, #20]
 8003574:	6978      	ldr	r0, [r7, #20]
 8003576:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800357a:	6178      	str	r0, [r7, #20]
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003584:	185d      	adds	r5, r3, r1
 8003586:	eb44 0602 	adc.w	r6, r4, r2
 800358a:	4628      	mov	r0, r5
 800358c:	4631      	mov	r1, r6
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	f04f 0400 	mov.w	r4, #0
 8003594:	00a2      	lsls	r2, r4, #2
 8003596:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800359e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035a8:	f7fc fe7a 	bl	80002a0 <__aeabi_uldivmod>
 80035ac:	4603      	mov	r3, r0
 80035ae:	460c      	mov	r4, r1
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b49      	ldr	r3, [pc, #292]	; (80036d8 <LL_USART_SetBaudRate+0x2e8>)
 80035b4:	fba3 2302 	umull	r2, r3, r3, r2
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	b29d      	uxth	r5, r3
 80035c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c2:	4619      	mov	r1, r3
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4614      	mov	r4, r2
 80035cc:	18db      	adds	r3, r3, r3
 80035ce:	eb44 0404 	adc.w	r4, r4, r4
 80035d2:	185b      	adds	r3, r3, r1
 80035d4:	eb44 0402 	adc.w	r4, r4, r2
 80035d8:	00e0      	lsls	r0, r4, #3
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80035ec:	eb13 0801 	adds.w	r8, r3, r1
 80035f0:	eb44 0902 	adc.w	r9, r4, r2
 80035f4:	4640      	mov	r0, r8
 80035f6:	4649      	mov	r1, r9
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	f04f 0400 	mov.w	r4, #0
 80035fe:	00a2      	lsls	r2, r4, #2
 8003600:	627a      	str	r2, [r7, #36]	; 0x24
 8003602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003604:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003608:	627a      	str	r2, [r7, #36]	; 0x24
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	623b      	str	r3, [r7, #32]
 800360e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003612:	f7fc fe45 	bl	80002a0 <__aeabi_uldivmod>
 8003616:	4603      	mov	r3, r0
 8003618:	460c      	mov	r4, r1
 800361a:	461a      	mov	r2, r3
 800361c:	4b2e      	ldr	r3, [pc, #184]	; (80036d8 <LL_USART_SetBaudRate+0x2e8>)
 800361e:	fba3 1302 	umull	r1, r3, r3, r2
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	2164      	movs	r1, #100	; 0x64
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	3332      	adds	r3, #50	; 0x32
 8003630:	4a29      	ldr	r2, [pc, #164]	; (80036d8 <LL_USART_SetBaudRate+0x2e8>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	b29b      	uxth	r3, r3
 800363a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800363e:	b29b      	uxth	r3, r3
 8003640:	442b      	add	r3, r5
 8003642:	b29d      	uxth	r5, r3
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	4619      	mov	r1, r3
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	460b      	mov	r3, r1
 800364e:	4614      	mov	r4, r2
 8003650:	18db      	adds	r3, r3, r3
 8003652:	eb44 0404 	adc.w	r4, r4, r4
 8003656:	185b      	adds	r3, r3, r1
 8003658:	eb44 0402 	adc.w	r4, r4, r2
 800365c:	00e0      	lsls	r0, r4, #3
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003670:	eb13 0801 	adds.w	r8, r3, r1
 8003674:	eb44 0902 	adc.w	r9, r4, r2
 8003678:	4640      	mov	r0, r8
 800367a:	4649      	mov	r1, r9
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	f04f 0400 	mov.w	r4, #0
 8003682:	00a2      	lsls	r2, r4, #2
 8003684:	61fa      	str	r2, [r7, #28]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800368c:	61fa      	str	r2, [r7, #28]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003696:	f7fc fe03 	bl	80002a0 <__aeabi_uldivmod>
 800369a:	4603      	mov	r3, r0
 800369c:	460c      	mov	r4, r1
 800369e:	461a      	mov	r2, r3
 80036a0:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <LL_USART_SetBaudRate+0x2e8>)
 80036a2:	fba3 1302 	umull	r1, r3, r3, r2
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	2164      	movs	r1, #100	; 0x64
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	3332      	adds	r3, #50	; 0x32
 80036b4:	4a08      	ldr	r2, [pc, #32]	; (80036d8 <LL_USART_SetBaudRate+0x2e8>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	442b      	add	r3, r5
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	461a      	mov	r2, r3
 80036ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036cc:	609a      	str	r2, [r3, #8]
}
 80036ce:	bf00      	nop
 80036d0:	3744      	adds	r7, #68	; 0x44
 80036d2:	46bd      	mov	sp, r7
 80036d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036d8:	51eb851f 	.word	0x51eb851f

080036dc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff fe43 	bl	800337a <LL_USART_IsEnabled>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d15e      	bne.n	80037b8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003702:	f023 030c 	bic.w	r3, r3, #12
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	6851      	ldr	r1, [r2, #4]
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	68d2      	ldr	r2, [r2, #12]
 800370e:	4311      	orrs	r1, r2
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	6912      	ldr	r2, [r2, #16]
 8003714:	4311      	orrs	r1, r2
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	6992      	ldr	r2, [r2, #24]
 800371a:	430a      	orrs	r2, r1
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	4619      	mov	r1, r3
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff fe3a 	bl	80033a2 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	4619      	mov	r1, r3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff fe47 	bl	80033c8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800373a:	f107 0308 	add.w	r3, r7, #8
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff f9ae 	bl	8002aa0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <LL_USART_Init+0xe8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d102      	bne.n	8003752 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	e021      	b.n	8003796 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a1c      	ldr	r2, [pc, #112]	; (80037c8 <LL_USART_Init+0xec>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d102      	bne.n	8003760 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	e01a      	b.n	8003796 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a1a      	ldr	r2, [pc, #104]	; (80037cc <LL_USART_Init+0xf0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d102      	bne.n	800376e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	e013      	b.n	8003796 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <LL_USART_Init+0xf4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d102      	bne.n	800377c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	e00c      	b.n	8003796 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <LL_USART_Init+0xf8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d102      	bne.n	800378a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	61bb      	str	r3, [r7, #24]
 8003788:	e005      	b.n	8003796 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <LL_USART_Init+0xfc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00d      	beq.n	80037b8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d009      	beq.n	80037b8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80037a4:	2300      	movs	r3, #0
 80037a6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	699a      	ldr	r2, [r3, #24]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69b9      	ldr	r1, [r7, #24]
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff fe1c 	bl	80033f0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80037b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40011000 	.word	0x40011000
 80037c8:	40004400 	.word	0x40004400
 80037cc:	40004800 	.word	0x40004800
 80037d0:	40011400 	.word	0x40011400
 80037d4:	40004c00 	.word	0x40004c00
 80037d8:	40005000 	.word	0x40005000

080037dc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80037e4:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <LL_SetSystemCoreClock+0x1c>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6013      	str	r3, [r2, #0]
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	2000000c 	.word	0x2000000c

080037fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003812:	f3ef 8305 	mrs	r3, IPSR
 8003816:	60bb      	str	r3, [r7, #8]
  return(result);
 8003818:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10f      	bne.n	800383e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800381e:	f3ef 8310 	mrs	r3, PRIMASK
 8003822:	607b      	str	r3, [r7, #4]
  return(result);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d105      	bne.n	8003836 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800382a:	f3ef 8311 	mrs	r3, BASEPRI
 800382e:	603b      	str	r3, [r7, #0]
  return(result);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <osKernelInitialize+0x3a>
 8003836:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <osKernelInitialize+0x64>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d103      	bne.n	8003846 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800383e:	f06f 0305 	mvn.w	r3, #5
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	e00c      	b.n	8003860 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003846:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <osKernelInitialize+0x64>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d105      	bne.n	800385a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800384e:	4b08      	ldr	r3, [pc, #32]	; (8003870 <osKernelInitialize+0x64>)
 8003850:	2201      	movs	r2, #1
 8003852:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e002      	b.n	8003860 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800385a:	f04f 33ff 	mov.w	r3, #4294967295
 800385e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003860:	68fb      	ldr	r3, [r7, #12]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000648 	.word	0x20000648

08003874 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800387a:	f3ef 8305 	mrs	r3, IPSR
 800387e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003880:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10f      	bne.n	80038a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003886:	f3ef 8310 	mrs	r3, PRIMASK
 800388a:	607b      	str	r3, [r7, #4]
  return(result);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d105      	bne.n	800389e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003892:	f3ef 8311 	mrs	r3, BASEPRI
 8003896:	603b      	str	r3, [r7, #0]
  return(result);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <osKernelStart+0x3a>
 800389e:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <osKernelStart+0x68>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d103      	bne.n	80038ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80038a6:	f06f 0305 	mvn.w	r3, #5
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	e010      	b.n	80038d0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80038ae:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <osKernelStart+0x68>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d109      	bne.n	80038ca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80038b6:	f7ff ffa1 	bl	80037fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <osKernelStart+0x68>)
 80038bc:	2202      	movs	r2, #2
 80038be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80038c0:	f001 fc8a 	bl	80051d8 <vTaskStartScheduler>
      stat = osOK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e002      	b.n	80038d0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80038ca:	f04f 33ff 	mov.w	r3, #4294967295
 80038ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80038d0:	68fb      	ldr	r3, [r7, #12]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000648 	.word	0x20000648

080038e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b090      	sub	sp, #64	; 0x40
 80038e4:	af04      	add	r7, sp, #16
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038f0:	f3ef 8305 	mrs	r3, IPSR
 80038f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80038f6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f040 808f 	bne.w	8003a1c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003902:	61bb      	str	r3, [r7, #24]
  return(result);
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d105      	bne.n	8003916 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800390a:	f3ef 8311 	mrs	r3, BASEPRI
 800390e:	617b      	str	r3, [r7, #20]
  return(result);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <osThreadNew+0x3e>
 8003916:	4b44      	ldr	r3, [pc, #272]	; (8003a28 <osThreadNew+0x148>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d07e      	beq.n	8003a1c <osThreadNew+0x13c>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d07b      	beq.n	8003a1c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003928:	2318      	movs	r3, #24
 800392a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800392c:	2300      	movs	r3, #0
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003930:	f04f 33ff 	mov.w	r3, #4294967295
 8003934:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d045      	beq.n	80039c8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <osThreadNew+0x6a>
        name = attr->name;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <osThreadNew+0x90>
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	2b38      	cmp	r3, #56	; 0x38
 8003962:	d805      	bhi.n	8003970 <osThreadNew+0x90>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <osThreadNew+0x94>
        return (NULL);
 8003970:	2300      	movs	r3, #0
 8003972:	e054      	b.n	8003a1e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	089b      	lsrs	r3, r3, #2
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00e      	beq.n	80039aa <osThreadNew+0xca>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	2b5b      	cmp	r3, #91	; 0x5b
 8003992:	d90a      	bls.n	80039aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003998:	2b00      	cmp	r3, #0
 800399a:	d006      	beq.n	80039aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <osThreadNew+0xca>
        mem = 1;
 80039a4:	2301      	movs	r3, #1
 80039a6:	623b      	str	r3, [r7, #32]
 80039a8:	e010      	b.n	80039cc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10c      	bne.n	80039cc <osThreadNew+0xec>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d108      	bne.n	80039cc <osThreadNew+0xec>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d104      	bne.n	80039cc <osThreadNew+0xec>
          mem = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	623b      	str	r3, [r7, #32]
 80039c6:	e001      	b.n	80039cc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d110      	bne.n	80039f4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039da:	9202      	str	r2, [sp, #8]
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f001 fa23 	bl	8004e34 <xTaskCreateStatic>
 80039ee:	4603      	mov	r3, r0
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	e013      	b.n	8003a1c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d110      	bne.n	8003a1c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	f107 0310 	add.w	r3, r7, #16
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f001 fa6b 	bl	8004ee8 <xTaskCreate>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d001      	beq.n	8003a1c <osThreadNew+0x13c>
          hTask = NULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a1c:	693b      	ldr	r3, [r7, #16]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3730      	adds	r7, #48	; 0x30
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000648 	.word	0x20000648

08003a2c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a34:	f3ef 8305 	mrs	r3, IPSR
 8003a38:	613b      	str	r3, [r7, #16]
  return(result);
 8003a3a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10f      	bne.n	8003a60 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a40:	f3ef 8310 	mrs	r3, PRIMASK
 8003a44:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d105      	bne.n	8003a58 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a4c:	f3ef 8311 	mrs	r3, BASEPRI
 8003a50:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d007      	beq.n	8003a68 <osDelay+0x3c>
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <osDelay+0x58>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d103      	bne.n	8003a68 <osDelay+0x3c>
    stat = osErrorISR;
 8003a60:	f06f 0305 	mvn.w	r3, #5
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	e007      	b.n	8003a78 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f001 fb7c 	bl	8005170 <vTaskDelay>
    }
  }

  return (stat);
 8003a78:	697b      	ldr	r3, [r7, #20]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000648 	.word	0x20000648

08003a88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4a07      	ldr	r2, [pc, #28]	; (8003ab4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003a98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4a06      	ldr	r2, [pc, #24]	; (8003ab8 <vApplicationGetIdleTaskMemory+0x30>)
 8003a9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2280      	movs	r2, #128	; 0x80
 8003aa4:	601a      	str	r2, [r3, #0]
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	2000064c 	.word	0x2000064c
 8003ab8:	200006a8 	.word	0x200006a8

08003abc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4a07      	ldr	r2, [pc, #28]	; (8003ae8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003acc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	4a06      	ldr	r2, [pc, #24]	; (8003aec <vApplicationGetTimerTaskMemory+0x30>)
 8003ad2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ada:	601a      	str	r2, [r3, #0]
}
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	200008a8 	.word	0x200008a8
 8003aec:	20000904 	.word	0x20000904

08003af0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f103 0208 	add.w	r2, r3, #8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f04f 32ff 	mov.w	r2, #4294967295
 8003b08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f103 0208 	add.w	r2, r3, #8
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f103 0208 	add.w	r2, r3, #8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b085      	sub	sp, #20
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	601a      	str	r2, [r3, #0]
}
 8003b86:	bf00      	nop
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b92:	b480      	push	{r7}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d103      	bne.n	8003bb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	e00c      	b.n	8003bcc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e002      	b.n	8003bc0 <vListInsert+0x2e>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d9f6      	bls.n	8003bba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	601a      	str	r2, [r3, #0]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6892      	ldr	r2, [r2, #8]
 8003c1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6852      	ldr	r2, [r2, #4]
 8003c24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d103      	bne.n	8003c38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	1e5a      	subs	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3b04      	subs	r3, #4
 8003c68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3b04      	subs	r3, #4
 8003c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f023 0201 	bic.w	r2, r3, #1
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3b04      	subs	r3, #4
 8003c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c88:	4a0c      	ldr	r2, [pc, #48]	; (8003cbc <pxPortInitialiseStack+0x64>)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3b14      	subs	r3, #20
 8003c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3b04      	subs	r3, #4
 8003c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f06f 0202 	mvn.w	r2, #2
 8003ca6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3b20      	subs	r3, #32
 8003cac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003cae:	68fb      	ldr	r3, [r7, #12]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	08003cc1 	.word	0x08003cc1

08003cc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003cca:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <prvTaskExitError+0x50>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd2:	d009      	beq.n	8003ce8 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	e7fe      	b.n	8003ce6 <prvTaskExitError+0x26>
 8003ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003cfa:	bf00      	nop
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0fc      	beq.n	8003cfc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d02:	bf00      	nop
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000004 	.word	0x20000004
	...

08003d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d20:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <pxCurrentTCBConst2>)
 8003d22:	6819      	ldr	r1, [r3, #0]
 8003d24:	6808      	ldr	r0, [r1, #0]
 8003d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2a:	f380 8809 	msr	PSP, r0
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f380 8811 	msr	BASEPRI, r0
 8003d3a:	4770      	bx	lr
 8003d3c:	f3af 8000 	nop.w

08003d40 <pxCurrentTCBConst2>:
 8003d40:	20008524 	.word	0x20008524
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop

08003d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003d48:	4808      	ldr	r0, [pc, #32]	; (8003d6c <prvPortStartFirstTask+0x24>)
 8003d4a:	6800      	ldr	r0, [r0, #0]
 8003d4c:	6800      	ldr	r0, [r0, #0]
 8003d4e:	f380 8808 	msr	MSP, r0
 8003d52:	f04f 0000 	mov.w	r0, #0
 8003d56:	f380 8814 	msr	CONTROL, r0
 8003d5a:	b662      	cpsie	i
 8003d5c:	b661      	cpsie	f
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	df00      	svc	0
 8003d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d6a:	bf00      	nop
 8003d6c:	e000ed08 	.word	0xe000ed08

08003d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d76:	4b44      	ldr	r3, [pc, #272]	; (8003e88 <xPortStartScheduler+0x118>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a44      	ldr	r2, [pc, #272]	; (8003e8c <xPortStartScheduler+0x11c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d109      	bne.n	8003d94 <xPortStartScheduler+0x24>
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	e7fe      	b.n	8003d92 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d94:	4b3c      	ldr	r3, [pc, #240]	; (8003e88 <xPortStartScheduler+0x118>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a3d      	ldr	r2, [pc, #244]	; (8003e90 <xPortStartScheduler+0x120>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d109      	bne.n	8003db2 <xPortStartScheduler+0x42>
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	e7fe      	b.n	8003db0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003db2:	4b38      	ldr	r3, [pc, #224]	; (8003e94 <xPortStartScheduler+0x124>)
 8003db4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	22ff      	movs	r2, #255	; 0xff
 8003dc2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <xPortStartScheduler+0x128>)
 8003dd8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003dda:	4b30      	ldr	r3, [pc, #192]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003ddc:	2207      	movs	r2, #7
 8003dde:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003de0:	e009      	b.n	8003df6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003de2:	4b2e      	ldr	r3, [pc, #184]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	4a2c      	ldr	r2, [pc, #176]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003dea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003df6:	78fb      	ldrb	r3, [r7, #3]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfe:	2b80      	cmp	r3, #128	; 0x80
 8003e00:	d0ef      	beq.n	8003de2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e02:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f1c3 0307 	rsb	r3, r3, #7
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d009      	beq.n	8003e22 <xPortStartScheduler+0xb2>
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	e7fe      	b.n	8003e20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e22:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003e2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e2c:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e34:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003e36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e40:	4a17      	ldr	r2, [pc, #92]	; (8003ea0 <xPortStartScheduler+0x130>)
 8003e42:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <xPortStartScheduler+0x130>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e4c:	4a14      	ldr	r2, [pc, #80]	; (8003ea0 <xPortStartScheduler+0x130>)
 8003e4e:	4b14      	ldr	r3, [pc, #80]	; (8003ea0 <xPortStartScheduler+0x130>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e58:	f000 f8d6 	bl	8004008 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e5c:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <xPortStartScheduler+0x134>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003e62:	f000 f8f5 	bl	8004050 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e66:	4a10      	ldr	r2, [pc, #64]	; (8003ea8 <xPortStartScheduler+0x138>)
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <xPortStartScheduler+0x138>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e72:	f7ff ff69 	bl	8003d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e76:	f001 fb85 	bl	8005584 <vTaskSwitchContext>
	prvTaskExitError();
 8003e7a:	f7ff ff21 	bl	8003cc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	e000ed00 	.word	0xe000ed00
 8003e8c:	410fc271 	.word	0x410fc271
 8003e90:	410fc270 	.word	0x410fc270
 8003e94:	e000e400 	.word	0xe000e400
 8003e98:	20000d04 	.word	0x20000d04
 8003e9c:	20000d08 	.word	0x20000d08
 8003ea0:	e000ed20 	.word	0xe000ed20
 8003ea4:	20000004 	.word	0x20000004
 8003ea8:	e000ef34 	.word	0xe000ef34

08003eac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ec4:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <vPortEnterCritical+0x54>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	4a0d      	ldr	r2, [pc, #52]	; (8003f00 <vPortEnterCritical+0x54>)
 8003ecc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <vPortEnterCritical+0x54>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d10e      	bne.n	8003ef4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <vPortEnterCritical+0x58>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d009      	beq.n	8003ef4 <vPortEnterCritical+0x48>
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	e7fe      	b.n	8003ef2 <vPortEnterCritical+0x46>
	}
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	20000004 	.word	0x20000004
 8003f04:	e000ed04 	.word	0xe000ed04

08003f08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f0e:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <vPortExitCritical+0x4c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <vPortExitCritical+0x22>
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	e7fe      	b.n	8003f28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <vPortExitCritical+0x4c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	4a08      	ldr	r2, [pc, #32]	; (8003f54 <vPortExitCritical+0x4c>)
 8003f32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f34:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <vPortExitCritical+0x4c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d104      	bne.n	8003f46 <vPortExitCritical+0x3e>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000004 	.word	0x20000004
	...

08003f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f60:	f3ef 8009 	mrs	r0, PSP
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <pxCurrentTCBConst>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	f01e 0f10 	tst.w	lr, #16
 8003f70:	bf08      	it	eq
 8003f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f7a:	6010      	str	r0, [r2, #0]
 8003f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f84:	f380 8811 	msr	BASEPRI, r0
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f001 faf8 	bl	8005584 <vTaskSwitchContext>
 8003f94:	f04f 0000 	mov.w	r0, #0
 8003f98:	f380 8811 	msr	BASEPRI, r0
 8003f9c:	bc09      	pop	{r0, r3}
 8003f9e:	6819      	ldr	r1, [r3, #0]
 8003fa0:	6808      	ldr	r0, [r1, #0]
 8003fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa6:	f01e 0f10 	tst.w	lr, #16
 8003faa:	bf08      	it	eq
 8003fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003fb0:	f380 8809 	msr	PSP, r0
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	f3af 8000 	nop.w

08003fc0 <pxCurrentTCBConst>:
 8003fc0:	20008524 	.word	0x20008524
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop

08003fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003fe0:	f001 fa18 	bl	8005414 <xTaskIncrementTick>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <SysTick_Handler+0x3c>)
 8003fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	e000ed04 	.word	0xe000ed04

08004008 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <vPortSetupTimerInterrupt+0x34>)
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <vPortSetupTimerInterrupt+0x38>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004018:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <vPortSetupTimerInterrupt+0x3c>)
 800401a:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <vPortSetupTimerInterrupt+0x40>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	490b      	ldr	r1, [pc, #44]	; (800404c <vPortSetupTimerInterrupt+0x44>)
 8004020:	fba1 1303 	umull	r1, r3, r1, r3
 8004024:	099b      	lsrs	r3, r3, #6
 8004026:	3b01      	subs	r3, #1
 8004028:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800402a:	4b04      	ldr	r3, [pc, #16]	; (800403c <vPortSetupTimerInterrupt+0x34>)
 800402c:	2207      	movs	r2, #7
 800402e:	601a      	str	r2, [r3, #0]
}
 8004030:	bf00      	nop
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	e000e010 	.word	0xe000e010
 8004040:	e000e018 	.word	0xe000e018
 8004044:	e000e014 	.word	0xe000e014
 8004048:	2000000c 	.word	0x2000000c
 800404c:	10624dd3 	.word	0x10624dd3

08004050 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004050:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004060 <vPortEnableVFP+0x10>
 8004054:	6801      	ldr	r1, [r0, #0]
 8004056:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800405a:	6001      	str	r1, [r0, #0]
 800405c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800405e:	bf00      	nop
 8004060:	e000ed88 	.word	0xe000ed88

08004064 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800406a:	f3ef 8305 	mrs	r3, IPSR
 800406e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b0f      	cmp	r3, #15
 8004074:	d913      	bls.n	800409e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004076:	4a16      	ldr	r2, [pc, #88]	; (80040d0 <vPortValidateInterruptPriority+0x6c>)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4413      	add	r3, r2
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004080:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <vPortValidateInterruptPriority+0x70>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	7afa      	ldrb	r2, [r7, #11]
 8004086:	429a      	cmp	r2, r3
 8004088:	d209      	bcs.n	800409e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	607b      	str	r3, [r7, #4]
 800409c:	e7fe      	b.n	800409c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800409e:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <vPortValidateInterruptPriority+0x74>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040a6:	4b0d      	ldr	r3, [pc, #52]	; (80040dc <vPortValidateInterruptPriority+0x78>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d909      	bls.n	80040c2 <vPortValidateInterruptPriority+0x5e>
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	e7fe      	b.n	80040c0 <vPortValidateInterruptPriority+0x5c>
	}
 80040c2:	bf00      	nop
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	e000e3f0 	.word	0xe000e3f0
 80040d4:	20000d04 	.word	0x20000d04
 80040d8:	e000ed0c 	.word	0xe000ed0c
 80040dc:	20000d08 	.word	0x20000d08

080040e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	; 0x28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80040ec:	f001 f8d8 	bl	80052a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040f0:	4b57      	ldr	r3, [pc, #348]	; (8004250 <pvPortMalloc+0x170>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80040f8:	f000 f90c 	bl	8004314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040fc:	4b55      	ldr	r3, [pc, #340]	; (8004254 <pvPortMalloc+0x174>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4013      	ands	r3, r2
 8004104:	2b00      	cmp	r3, #0
 8004106:	f040 808c 	bne.w	8004222 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01c      	beq.n	800414a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004110:	2208      	movs	r2, #8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4413      	add	r3, r2
 8004116:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	2b00      	cmp	r3, #0
 8004120:	d013      	beq.n	800414a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f023 0307 	bic.w	r3, r3, #7
 8004128:	3308      	adds	r3, #8
 800412a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <pvPortMalloc+0x6a>
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	e7fe      	b.n	8004148 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d068      	beq.n	8004222 <pvPortMalloc+0x142>
 8004150:	4b41      	ldr	r3, [pc, #260]	; (8004258 <pvPortMalloc+0x178>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	429a      	cmp	r2, r3
 8004158:	d863      	bhi.n	8004222 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800415a:	4b40      	ldr	r3, [pc, #256]	; (800425c <pvPortMalloc+0x17c>)
 800415c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800415e:	4b3f      	ldr	r3, [pc, #252]	; (800425c <pvPortMalloc+0x17c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004164:	e004      	b.n	8004170 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	429a      	cmp	r2, r3
 8004178:	d203      	bcs.n	8004182 <pvPortMalloc+0xa2>
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f1      	bne.n	8004166 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004182:	4b33      	ldr	r3, [pc, #204]	; (8004250 <pvPortMalloc+0x170>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004188:	429a      	cmp	r2, r3
 800418a:	d04a      	beq.n	8004222 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2208      	movs	r2, #8
 8004192:	4413      	add	r3, r2
 8004194:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	1ad2      	subs	r2, r2, r3
 80041a6:	2308      	movs	r3, #8
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d91e      	bls.n	80041ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80041ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4413      	add	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d009      	beq.n	80041d4 <pvPortMalloc+0xf4>
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	e7fe      	b.n	80041d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041e6:	69b8      	ldr	r0, [r7, #24]
 80041e8:	f000 f8f6 	bl	80043d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041ec:	4b1a      	ldr	r3, [pc, #104]	; (8004258 <pvPortMalloc+0x178>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	4a18      	ldr	r2, [pc, #96]	; (8004258 <pvPortMalloc+0x178>)
 80041f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041fa:	4b17      	ldr	r3, [pc, #92]	; (8004258 <pvPortMalloc+0x178>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4b18      	ldr	r3, [pc, #96]	; (8004260 <pvPortMalloc+0x180>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d203      	bcs.n	800420e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004206:	4b14      	ldr	r3, [pc, #80]	; (8004258 <pvPortMalloc+0x178>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a15      	ldr	r2, [pc, #84]	; (8004260 <pvPortMalloc+0x180>)
 800420c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <pvPortMalloc+0x174>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	431a      	orrs	r2, r3
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004222:	f001 f84b 	bl	80052bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <pvPortMalloc+0x164>
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	e7fe      	b.n	8004242 <pvPortMalloc+0x162>
	return pvReturn;
 8004244:	69fb      	ldr	r3, [r7, #28]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3728      	adds	r7, #40	; 0x28
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20008514 	.word	0x20008514
 8004254:	20008520 	.word	0x20008520
 8004258:	20008518 	.word	0x20008518
 800425c:	2000850c 	.word	0x2000850c
 8004260:	2000851c 	.word	0x2000851c

08004264 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d046      	beq.n	8004304 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004276:	2308      	movs	r3, #8
 8004278:	425b      	negs	r3, r3
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4413      	add	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	4b20      	ldr	r3, [pc, #128]	; (800430c <vPortFree+0xa8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <vPortFree+0x42>
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	e7fe      	b.n	80042a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <vPortFree+0x5e>
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	e7fe      	b.n	80042c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <vPortFree+0xa8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d019      	beq.n	8004304 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d115      	bne.n	8004304 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <vPortFree+0xa8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	43db      	mvns	r3, r3
 80042e2:	401a      	ands	r2, r3
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80042e8:	f000 ffda 	bl	80052a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	4b07      	ldr	r3, [pc, #28]	; (8004310 <vPortFree+0xac>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4413      	add	r3, r2
 80042f6:	4a06      	ldr	r2, [pc, #24]	; (8004310 <vPortFree+0xac>)
 80042f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042fa:	6938      	ldr	r0, [r7, #16]
 80042fc:	f000 f86c 	bl	80043d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004300:	f000 ffdc 	bl	80052bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004304:	bf00      	nop
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20008520 	.word	0x20008520
 8004310:	20008518 	.word	0x20008518

08004314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800431a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800431e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004320:	4b27      	ldr	r3, [pc, #156]	; (80043c0 <prvHeapInit+0xac>)
 8004322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00c      	beq.n	8004348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3307      	adds	r3, #7
 8004332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0307 	bic.w	r3, r3, #7
 800433a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	4a1f      	ldr	r2, [pc, #124]	; (80043c0 <prvHeapInit+0xac>)
 8004344:	4413      	add	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800434c:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <prvHeapInit+0xb0>)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004352:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <prvHeapInit+0xb0>)
 8004354:	2200      	movs	r2, #0
 8004356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4413      	add	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004360:	2208      	movs	r2, #8
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1a9b      	subs	r3, r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0307 	bic.w	r3, r3, #7
 800436e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4a15      	ldr	r2, [pc, #84]	; (80043c8 <prvHeapInit+0xb4>)
 8004374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004376:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <prvHeapInit+0xb4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2200      	movs	r2, #0
 800437c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800437e:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <prvHeapInit+0xb4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	1ad2      	subs	r2, r2, r3
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004394:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <prvHeapInit+0xb4>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <prvHeapInit+0xb8>)
 80043a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <prvHeapInit+0xbc>)
 80043aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <prvHeapInit+0xc0>)
 80043ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043b2:	601a      	str	r2, [r3, #0]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	20000d0c 	.word	0x20000d0c
 80043c4:	2000850c 	.word	0x2000850c
 80043c8:	20008514 	.word	0x20008514
 80043cc:	2000851c 	.word	0x2000851c
 80043d0:	20008518 	.word	0x20008518
 80043d4:	20008520 	.word	0x20008520

080043d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043e0:	4b28      	ldr	r3, [pc, #160]	; (8004484 <prvInsertBlockIntoFreeList+0xac>)
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e002      	b.n	80043ec <prvInsertBlockIntoFreeList+0x14>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d3f7      	bcc.n	80043e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	441a      	add	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	429a      	cmp	r2, r3
 8004406:	d108      	bne.n	800441a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	441a      	add	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	441a      	add	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d118      	bne.n	8004460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4b15      	ldr	r3, [pc, #84]	; (8004488 <prvInsertBlockIntoFreeList+0xb0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d00d      	beq.n	8004456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	441a      	add	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	e008      	b.n	8004468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <prvInsertBlockIntoFreeList+0xb0>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	e003      	b.n	8004468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d002      	beq.n	8004476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004476:	bf00      	nop
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	2000850c 	.word	0x2000850c
 8004488:	20008514 	.word	0x20008514

0800448c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <xQueueGenericReset+0x28>
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	e7fe      	b.n	80044b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80044b4:	f7ff fcfa 	bl	8003eac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c0:	68f9      	ldr	r1, [r7, #12]
 80044c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	441a      	add	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e4:	3b01      	subs	r3, #1
 80044e6:	68f9      	ldr	r1, [r7, #12]
 80044e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	441a      	add	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	22ff      	movs	r2, #255	; 0xff
 80044f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	22ff      	movs	r2, #255	; 0xff
 8004500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d114      	bne.n	8004534 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d01a      	beq.n	8004548 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3310      	adds	r3, #16
 8004516:	4618      	mov	r0, r3
 8004518:	f001 f8de 	bl	80056d8 <xTaskRemoveFromEventList>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d012      	beq.n	8004548 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004522:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <xQueueGenericReset+0xcc>)
 8004524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	e009      	b.n	8004548 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3310      	adds	r3, #16
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff fad9 	bl	8003af0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3324      	adds	r3, #36	; 0x24
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fad4 	bl	8003af0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004548:	f7ff fcde 	bl	8003f08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800454c:	2301      	movs	r3, #1
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	e000ed04 	.word	0xe000ed04

0800455c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08e      	sub	sp, #56	; 0x38
 8004560:	af02      	add	r7, sp, #8
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d109      	bne.n	8004584 <xQueueGenericCreateStatic+0x28>
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	62bb      	str	r3, [r7, #40]	; 0x28
 8004582:	e7fe      	b.n	8004582 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <xQueueGenericCreateStatic+0x42>
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
 800459c:	e7fe      	b.n	800459c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <xQueueGenericCreateStatic+0x4e>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <xQueueGenericCreateStatic+0x52>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <xQueueGenericCreateStatic+0x54>
 80045ae:	2300      	movs	r3, #0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d109      	bne.n	80045c8 <xQueueGenericCreateStatic+0x6c>
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	623b      	str	r3, [r7, #32]
 80045c6:	e7fe      	b.n	80045c6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d102      	bne.n	80045d4 <xQueueGenericCreateStatic+0x78>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <xQueueGenericCreateStatic+0x7c>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <xQueueGenericCreateStatic+0x7e>
 80045d8:	2300      	movs	r3, #0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <xQueueGenericCreateStatic+0x96>
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	e7fe      	b.n	80045f0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045f2:	2350      	movs	r3, #80	; 0x50
 80045f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b50      	cmp	r3, #80	; 0x50
 80045fa:	d009      	beq.n	8004610 <xQueueGenericCreateStatic+0xb4>
 80045fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	e7fe      	b.n	800460e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004610:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00d      	beq.n	8004638 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800461c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004624:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	4613      	mov	r3, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f805 	bl	8004642 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800463a:	4618      	mov	r0, r3
 800463c:	3730      	adds	r7, #48	; 0x30
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d103      	bne.n	800465e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	e002      	b.n	8004664 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004670:	2101      	movs	r1, #1
 8004672:	69b8      	ldr	r0, [r7, #24]
 8004674:	f7ff ff0a 	bl	800448c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	78fa      	ldrb	r2, [r7, #3]
 800467c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08e      	sub	sp, #56	; 0x38
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004696:	2300      	movs	r3, #0
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d109      	bne.n	80046b8 <xQueueGenericSend+0x30>
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046b6:	e7fe      	b.n	80046b6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <xQueueGenericSend+0x3e>
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <xQueueGenericSend+0x42>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <xQueueGenericSend+0x44>
 80046ca:	2300      	movs	r3, #0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d109      	bne.n	80046e4 <xQueueGenericSend+0x5c>
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
 80046e2:	e7fe      	b.n	80046e2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d103      	bne.n	80046f2 <xQueueGenericSend+0x6a>
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <xQueueGenericSend+0x6e>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <xQueueGenericSend+0x70>
 80046f6:	2300      	movs	r3, #0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d109      	bne.n	8004710 <xQueueGenericSend+0x88>
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	623b      	str	r3, [r7, #32]
 800470e:	e7fe      	b.n	800470e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004710:	f001 f998 	bl	8005a44 <xTaskGetSchedulerState>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <xQueueGenericSend+0x98>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <xQueueGenericSend+0x9c>
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <xQueueGenericSend+0x9e>
 8004724:	2300      	movs	r3, #0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <xQueueGenericSend+0xb6>
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	61fb      	str	r3, [r7, #28]
 800473c:	e7fe      	b.n	800473c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800473e:	f7ff fbb5 	bl	8003eac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	429a      	cmp	r2, r3
 800474c:	d302      	bcc.n	8004754 <xQueueGenericSend+0xcc>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d129      	bne.n	80047a8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800475a:	f000 f9ff 	bl	8004b5c <prvCopyDataToQueue>
 800475e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	2b00      	cmp	r3, #0
 8004766:	d010      	beq.n	800478a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	3324      	adds	r3, #36	; 0x24
 800476c:	4618      	mov	r0, r3
 800476e:	f000 ffb3 	bl	80056d8 <xTaskRemoveFromEventList>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004778:	4b3f      	ldr	r3, [pc, #252]	; (8004878 <xQueueGenericSend+0x1f0>)
 800477a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	e00a      	b.n	80047a0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004790:	4b39      	ldr	r3, [pc, #228]	; (8004878 <xQueueGenericSend+0x1f0>)
 8004792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047a0:	f7ff fbb2 	bl	8003f08 <vPortExitCritical>
				return pdPASS;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e063      	b.n	8004870 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d103      	bne.n	80047b6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047ae:	f7ff fbab 	bl	8003f08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	e05c      	b.n	8004870 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d106      	bne.n	80047ca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047bc:	f107 0314 	add.w	r3, r7, #20
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 ffeb 	bl	800579c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047c6:	2301      	movs	r3, #1
 80047c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047ca:	f7ff fb9d 	bl	8003f08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047ce:	f000 fd67 	bl	80052a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047d2:	f7ff fb6b 	bl	8003eac <vPortEnterCritical>
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047dc:	b25b      	sxtb	r3, r3
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d103      	bne.n	80047ec <xQueueGenericSend+0x164>
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047f2:	b25b      	sxtb	r3, r3
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d103      	bne.n	8004802 <xQueueGenericSend+0x17a>
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004802:	f7ff fb81 	bl	8003f08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004806:	1d3a      	adds	r2, r7, #4
 8004808:	f107 0314 	add.w	r3, r7, #20
 800480c:	4611      	mov	r1, r2
 800480e:	4618      	mov	r0, r3
 8004810:	f000 ffda 	bl	80057c8 <xTaskCheckForTimeOut>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d124      	bne.n	8004864 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800481a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800481c:	f000 fa96 	bl	8004d4c <prvIsQueueFull>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d018      	beq.n	8004858 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	3310      	adds	r3, #16
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	4611      	mov	r1, r2
 800482e:	4618      	mov	r0, r3
 8004830:	f000 ff04 	bl	800563c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004836:	f000 fa21 	bl	8004c7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800483a:	f000 fd3f 	bl	80052bc <xTaskResumeAll>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	f47f af7c 	bne.w	800473e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004846:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <xQueueGenericSend+0x1f0>)
 8004848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	e772      	b.n	800473e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800485a:	f000 fa0f 	bl	8004c7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800485e:	f000 fd2d 	bl	80052bc <xTaskResumeAll>
 8004862:	e76c      	b.n	800473e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004866:	f000 fa09 	bl	8004c7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800486a:	f000 fd27 	bl	80052bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800486e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004870:	4618      	mov	r0, r3
 8004872:	3738      	adds	r7, #56	; 0x38
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08e      	sub	sp, #56	; 0x38
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	2b00      	cmp	r3, #0
 8004892:	d109      	bne.n	80048a8 <xQueueGenericSendFromISR+0x2c>
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
 80048a6:	e7fe      	b.n	80048a6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d103      	bne.n	80048b6 <xQueueGenericSendFromISR+0x3a>
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <xQueueGenericSendFromISR+0x3e>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <xQueueGenericSendFromISR+0x40>
 80048ba:	2300      	movs	r3, #0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <xQueueGenericSendFromISR+0x58>
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	623b      	str	r3, [r7, #32]
 80048d2:	e7fe      	b.n	80048d2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d103      	bne.n	80048e2 <xQueueGenericSendFromISR+0x66>
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <xQueueGenericSendFromISR+0x6a>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <xQueueGenericSendFromISR+0x6c>
 80048e6:	2300      	movs	r3, #0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d109      	bne.n	8004900 <xQueueGenericSendFromISR+0x84>
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	61fb      	str	r3, [r7, #28]
 80048fe:	e7fe      	b.n	80048fe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004900:	f7ff fbb0 	bl	8004064 <vPortValidateInterruptPriority>
	__asm volatile
 8004904:	f3ef 8211 	mrs	r2, BASEPRI
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	61ba      	str	r2, [r7, #24]
 800491a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800491c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004928:	429a      	cmp	r2, r3
 800492a:	d302      	bcc.n	8004932 <xQueueGenericSendFromISR+0xb6>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d12c      	bne.n	800498c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004942:	f000 f90b 	bl	8004b5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004946:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800494a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494e:	d112      	bne.n	8004976 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	2b00      	cmp	r3, #0
 8004956:	d016      	beq.n	8004986 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	3324      	adds	r3, #36	; 0x24
 800495c:	4618      	mov	r0, r3
 800495e:	f000 febb 	bl	80056d8 <xTaskRemoveFromEventList>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00e      	beq.n	8004986 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00b      	beq.n	8004986 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	e007      	b.n	8004986 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004976:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800497a:	3301      	adds	r3, #1
 800497c:	b2db      	uxtb	r3, r3
 800497e:	b25a      	sxtb	r2, r3
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004986:	2301      	movs	r3, #1
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800498a:	e001      	b.n	8004990 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800498c:	2300      	movs	r3, #0
 800498e:	637b      	str	r3, [r7, #52]	; 0x34
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800499a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800499c:	4618      	mov	r0, r3
 800499e:	3738      	adds	r7, #56	; 0x38
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08c      	sub	sp, #48	; 0x30
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <xQueueReceive+0x2e>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	623b      	str	r3, [r7, #32]
 80049d0:	e7fe      	b.n	80049d0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d103      	bne.n	80049e0 <xQueueReceive+0x3c>
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <xQueueReceive+0x40>
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <xQueueReceive+0x42>
 80049e4:	2300      	movs	r3, #0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <xQueueReceive+0x5a>
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	e7fe      	b.n	80049fc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049fe:	f001 f821 	bl	8005a44 <xTaskGetSchedulerState>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d102      	bne.n	8004a0e <xQueueReceive+0x6a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <xQueueReceive+0x6e>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <xQueueReceive+0x70>
 8004a12:	2300      	movs	r3, #0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <xQueueReceive+0x88>
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	61bb      	str	r3, [r7, #24]
 8004a2a:	e7fe      	b.n	8004a2a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a2c:	f7ff fa3e 	bl	8003eac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01f      	beq.n	8004a7c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a3c:	68b9      	ldr	r1, [r7, #8]
 8004a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a40:	f000 f8f6 	bl	8004c30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	1e5a      	subs	r2, r3, #1
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00f      	beq.n	8004a74 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a56:	3310      	adds	r3, #16
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fe3d 	bl	80056d8 <xTaskRemoveFromEventList>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d007      	beq.n	8004a74 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a64:	4b3c      	ldr	r3, [pc, #240]	; (8004b58 <xQueueReceive+0x1b4>)
 8004a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a74:	f7ff fa48 	bl	8003f08 <vPortExitCritical>
				return pdPASS;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e069      	b.n	8004b50 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d103      	bne.n	8004a8a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a82:	f7ff fa41 	bl	8003f08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e062      	b.n	8004b50 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d106      	bne.n	8004a9e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a90:	f107 0310 	add.w	r3, r7, #16
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fe81 	bl	800579c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a9e:	f7ff fa33 	bl	8003f08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004aa2:	f000 fbfd 	bl	80052a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004aa6:	f7ff fa01 	bl	8003eac <vPortEnterCritical>
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ab0:	b25b      	sxtb	r3, r3
 8004ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab6:	d103      	bne.n	8004ac0 <xQueueReceive+0x11c>
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ac6:	b25b      	sxtb	r3, r3
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d103      	bne.n	8004ad6 <xQueueReceive+0x132>
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ad6:	f7ff fa17 	bl	8003f08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ada:	1d3a      	adds	r2, r7, #4
 8004adc:	f107 0310 	add.w	r3, r7, #16
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fe70 	bl	80057c8 <xTaskCheckForTimeOut>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d123      	bne.n	8004b36 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af0:	f000 f916 	bl	8004d20 <prvIsQueueEmpty>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d017      	beq.n	8004b2a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	3324      	adds	r3, #36	; 0x24
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	4611      	mov	r1, r2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fd9a 	bl	800563c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b0a:	f000 f8b7 	bl	8004c7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b0e:	f000 fbd5 	bl	80052bc <xTaskResumeAll>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d189      	bne.n	8004a2c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004b18:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <xQueueReceive+0x1b4>)
 8004b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	e780      	b.n	8004a2c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b2c:	f000 f8a6 	bl	8004c7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b30:	f000 fbc4 	bl	80052bc <xTaskResumeAll>
 8004b34:	e77a      	b.n	8004a2c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b38:	f000 f8a0 	bl	8004c7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b3c:	f000 fbbe 	bl	80052bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b42:	f000 f8ed 	bl	8004d20 <prvIsQueueEmpty>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f43f af6f 	beq.w	8004a2c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3730      	adds	r7, #48	; 0x30
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	e000ed04 	.word	0xe000ed04

08004b5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10d      	bne.n	8004b96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d14d      	bne.n	8004c1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 ff7a 	bl	8005a80 <xTaskPriorityDisinherit>
 8004b8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	609a      	str	r2, [r3, #8]
 8004b94:	e043      	b.n	8004c1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d119      	bne.n	8004bd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6858      	ldr	r0, [r3, #4]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	f003 fc73 	bl	8008492 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	441a      	add	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d32b      	bcc.n	8004c1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	e026      	b.n	8004c1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	68d8      	ldr	r0, [r3, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	461a      	mov	r2, r3
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	f003 fc59 	bl	8008492 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	425b      	negs	r3, r3
 8004bea:	441a      	add	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d207      	bcs.n	8004c0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	425b      	negs	r3, r3
 8004c06:	441a      	add	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d105      	bne.n	8004c1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c26:	697b      	ldr	r3, [r7, #20]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d018      	beq.n	8004c74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	441a      	add	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d303      	bcc.n	8004c64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68d9      	ldr	r1, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6838      	ldr	r0, [r7, #0]
 8004c70:	f003 fc0f 	bl	8008492 <memcpy>
	}
}
 8004c74:	bf00      	nop
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c84:	f7ff f912 	bl	8003eac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c90:	e011      	b.n	8004cb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d012      	beq.n	8004cc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3324      	adds	r3, #36	; 0x24
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fd1a 	bl	80056d8 <xTaskRemoveFromEventList>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004caa:	f000 fded 	bl	8005888 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	dce9      	bgt.n	8004c92 <prvUnlockQueue+0x16>
 8004cbe:	e000      	b.n	8004cc2 <prvUnlockQueue+0x46>
					break;
 8004cc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	22ff      	movs	r2, #255	; 0xff
 8004cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004cca:	f7ff f91d 	bl	8003f08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004cce:	f7ff f8ed 	bl	8003eac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cda:	e011      	b.n	8004d00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d012      	beq.n	8004d0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3310      	adds	r3, #16
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fcf5 	bl	80056d8 <xTaskRemoveFromEventList>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cf4:	f000 fdc8 	bl	8005888 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cf8:	7bbb      	ldrb	r3, [r7, #14]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	dce9      	bgt.n	8004cdc <prvUnlockQueue+0x60>
 8004d08:	e000      	b.n	8004d0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	22ff      	movs	r2, #255	; 0xff
 8004d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d14:	f7ff f8f8 	bl	8003f08 <vPortExitCritical>
}
 8004d18:	bf00      	nop
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d28:	f7ff f8c0 	bl	8003eac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	e001      	b.n	8004d3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d3e:	f7ff f8e3 	bl	8003f08 <vPortExitCritical>

	return xReturn;
 8004d42:	68fb      	ldr	r3, [r7, #12]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d54:	f7ff f8aa 	bl	8003eac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d102      	bne.n	8004d6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e001      	b.n	8004d6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d6e:	f7ff f8cb 	bl	8003f08 <vPortExitCritical>

	return xReturn;
 8004d72:	68fb      	ldr	r3, [r7, #12]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	e014      	b.n	8004db6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d8c:	4a0e      	ldr	r2, [pc, #56]	; (8004dc8 <vQueueAddToRegistry+0x4c>)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10b      	bne.n	8004db0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d98:	490b      	ldr	r1, [pc, #44]	; (8004dc8 <vQueueAddToRegistry+0x4c>)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004da2:	4a09      	ldr	r2, [pc, #36]	; (8004dc8 <vQueueAddToRegistry+0x4c>)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4413      	add	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004dae:	e005      	b.n	8004dbc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	3301      	adds	r3, #1
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b07      	cmp	r3, #7
 8004dba:	d9e7      	bls.n	8004d8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004dbc:	bf00      	nop
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	2000a12c 	.word	0x2000a12c

08004dcc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ddc:	f7ff f866 	bl	8003eac <vPortEnterCritical>
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004de6:	b25b      	sxtb	r3, r3
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d103      	bne.n	8004df6 <vQueueWaitForMessageRestricted+0x2a>
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dfc:	b25b      	sxtb	r3, r3
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e02:	d103      	bne.n	8004e0c <vQueueWaitForMessageRestricted+0x40>
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e0c:	f7ff f87c 	bl	8003f08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d106      	bne.n	8004e26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	3324      	adds	r3, #36	; 0x24
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	68b9      	ldr	r1, [r7, #8]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fc2f 	bl	8005684 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e26:	6978      	ldr	r0, [r7, #20]
 8004e28:	f7ff ff28 	bl	8004c7c <prvUnlockQueue>
	}
 8004e2c:	bf00      	nop
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08e      	sub	sp, #56	; 0x38
 8004e38:	af04      	add	r7, sp, #16
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d109      	bne.n	8004e5c <xTaskCreateStatic+0x28>
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	623b      	str	r3, [r7, #32]
 8004e5a:	e7fe      	b.n	8004e5a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <xTaskCreateStatic+0x42>
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	61fb      	str	r3, [r7, #28]
 8004e74:	e7fe      	b.n	8004e74 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e76:	235c      	movs	r3, #92	; 0x5c
 8004e78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b5c      	cmp	r3, #92	; 0x5c
 8004e7e:	d009      	beq.n	8004e94 <xTaskCreateStatic+0x60>
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	e7fe      	b.n	8004e92 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01e      	beq.n	8004eda <xTaskCreateStatic+0xa6>
 8004e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01b      	beq.n	8004eda <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9303      	str	r3, [sp, #12]
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	9302      	str	r3, [sp, #8]
 8004ebc:	f107 0314 	add.w	r3, r7, #20
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 f850 	bl	8004f72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ed2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ed4:	f000 f8dc 	bl	8005090 <prvAddNewTaskToReadyList>
 8004ed8:	e001      	b.n	8004ede <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ede:	697b      	ldr	r3, [r7, #20]
	}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3728      	adds	r7, #40	; 0x28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08c      	sub	sp, #48	; 0x30
 8004eec:	af04      	add	r7, sp, #16
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ef8:	88fb      	ldrh	r3, [r7, #6]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff f8ef 	bl	80040e0 <pvPortMalloc>
 8004f02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00e      	beq.n	8004f28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f0a:	205c      	movs	r0, #92	; 0x5c
 8004f0c:	f7ff f8e8 	bl	80040e0 <pvPortMalloc>
 8004f10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30
 8004f1e:	e005      	b.n	8004f2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f20:	6978      	ldr	r0, [r7, #20]
 8004f22:	f7ff f99f 	bl	8004264 <vPortFree>
 8004f26:	e001      	b.n	8004f2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d017      	beq.n	8004f62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f3a:	88fa      	ldrh	r2, [r7, #6]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	9303      	str	r3, [sp, #12]
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	9302      	str	r3, [sp, #8]
 8004f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f80e 	bl	8004f72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f56:	69f8      	ldr	r0, [r7, #28]
 8004f58:	f000 f89a 	bl	8005090 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	61bb      	str	r3, [r7, #24]
 8004f60:	e002      	b.n	8004f68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f62:	f04f 33ff 	mov.w	r3, #4294967295
 8004f66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f68:	69bb      	ldr	r3, [r7, #24]
	}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3720      	adds	r7, #32
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b088      	sub	sp, #32
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	607a      	str	r2, [r7, #4]
 8004f7e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	461a      	mov	r2, r3
 8004f8a:	21a5      	movs	r1, #165	; 0xa5
 8004f8c:	f003 fa8c 	bl	80084a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	f023 0307 	bic.w	r3, r3, #7
 8004fa8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d009      	beq.n	8004fc8 <prvInitialiseNewTask+0x56>
 8004fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	e7fe      	b.n	8004fc6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d01f      	beq.n	800500e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	e012      	b.n	8004ffa <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	7819      	ldrb	r1, [r3, #0]
 8004fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3334      	adds	r3, #52	; 0x34
 8004fe4:	460a      	mov	r2, r1
 8004fe6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d006      	beq.n	8005002 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	61fb      	str	r3, [r7, #28]
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	2b0f      	cmp	r3, #15
 8004ffe:	d9e9      	bls.n	8004fd4 <prvInitialiseNewTask+0x62>
 8005000:	e000      	b.n	8005004 <prvInitialiseNewTask+0x92>
			{
				break;
 8005002:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800500c:	e003      	b.n	8005016 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	2b37      	cmp	r3, #55	; 0x37
 800501a:	d901      	bls.n	8005020 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800501c:	2337      	movs	r3, #55	; 0x37
 800501e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005024:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800502a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	2200      	movs	r2, #0
 8005030:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	3304      	adds	r3, #4
 8005036:	4618      	mov	r0, r3
 8005038:	f7fe fd7a 	bl	8003b30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	3318      	adds	r3, #24
 8005040:	4618      	mov	r0, r3
 8005042:	f7fe fd75 	bl	8003b30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800504a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800505a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	2200      	movs	r2, #0
 8005060:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	68f9      	ldr	r1, [r7, #12]
 800506e:	69b8      	ldr	r0, [r7, #24]
 8005070:	f7fe fdf2 	bl	8003c58 <pxPortInitialiseStack>
 8005074:	4602      	mov	r2, r0
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005086:	bf00      	nop
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005098:	f7fe ff08 	bl	8003eac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800509c:	4b2d      	ldr	r3, [pc, #180]	; (8005154 <prvAddNewTaskToReadyList+0xc4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3301      	adds	r3, #1
 80050a2:	4a2c      	ldr	r2, [pc, #176]	; (8005154 <prvAddNewTaskToReadyList+0xc4>)
 80050a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050a6:	4b2c      	ldr	r3, [pc, #176]	; (8005158 <prvAddNewTaskToReadyList+0xc8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d109      	bne.n	80050c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050ae:	4a2a      	ldr	r2, [pc, #168]	; (8005158 <prvAddNewTaskToReadyList+0xc8>)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050b4:	4b27      	ldr	r3, [pc, #156]	; (8005154 <prvAddNewTaskToReadyList+0xc4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d110      	bne.n	80050de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050bc:	f000 fc08 	bl	80058d0 <prvInitialiseTaskLists>
 80050c0:	e00d      	b.n	80050de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050c2:	4b26      	ldr	r3, [pc, #152]	; (800515c <prvAddNewTaskToReadyList+0xcc>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050ca:	4b23      	ldr	r3, [pc, #140]	; (8005158 <prvAddNewTaskToReadyList+0xc8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d802      	bhi.n	80050de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050d8:	4a1f      	ldr	r2, [pc, #124]	; (8005158 <prvAddNewTaskToReadyList+0xc8>)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050de:	4b20      	ldr	r3, [pc, #128]	; (8005160 <prvAddNewTaskToReadyList+0xd0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3301      	adds	r3, #1
 80050e4:	4a1e      	ldr	r2, [pc, #120]	; (8005160 <prvAddNewTaskToReadyList+0xd0>)
 80050e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050e8:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <prvAddNewTaskToReadyList+0xd0>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f4:	4b1b      	ldr	r3, [pc, #108]	; (8005164 <prvAddNewTaskToReadyList+0xd4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d903      	bls.n	8005104 <prvAddNewTaskToReadyList+0x74>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	4a18      	ldr	r2, [pc, #96]	; (8005164 <prvAddNewTaskToReadyList+0xd4>)
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4a15      	ldr	r2, [pc, #84]	; (8005168 <prvAddNewTaskToReadyList+0xd8>)
 8005112:	441a      	add	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f7fe fd15 	bl	8003b4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005120:	f7fe fef2 	bl	8003f08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005124:	4b0d      	ldr	r3, [pc, #52]	; (800515c <prvAddNewTaskToReadyList+0xcc>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00e      	beq.n	800514a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800512c:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <prvAddNewTaskToReadyList+0xc8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	429a      	cmp	r2, r3
 8005138:	d207      	bcs.n	800514a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800513a:	4b0c      	ldr	r3, [pc, #48]	; (800516c <prvAddNewTaskToReadyList+0xdc>)
 800513c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800514a:	bf00      	nop
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	200089f8 	.word	0x200089f8
 8005158:	20008524 	.word	0x20008524
 800515c:	20008a04 	.word	0x20008a04
 8005160:	20008a14 	.word	0x20008a14
 8005164:	20008a00 	.word	0x20008a00
 8005168:	20008528 	.word	0x20008528
 800516c:	e000ed04 	.word	0xe000ed04

08005170 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d016      	beq.n	80051b0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005182:	4b13      	ldr	r3, [pc, #76]	; (80051d0 <vTaskDelay+0x60>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d009      	beq.n	800519e <vTaskDelay+0x2e>
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	60bb      	str	r3, [r7, #8]
 800519c:	e7fe      	b.n	800519c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800519e:	f000 f87f 	bl	80052a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051a2:	2100      	movs	r1, #0
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fcd7 	bl	8005b58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051aa:	f000 f887 	bl	80052bc <xTaskResumeAll>
 80051ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d107      	bne.n	80051c6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80051b6:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <vTaskDelay+0x64>)
 80051b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051c6:	bf00      	nop
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	20008a20 	.word	0x20008a20
 80051d4:	e000ed04 	.word	0xe000ed04

080051d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051e6:	463a      	mov	r2, r7
 80051e8:	1d39      	adds	r1, r7, #4
 80051ea:	f107 0308 	add.w	r3, r7, #8
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe fc4a 	bl	8003a88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	9202      	str	r2, [sp, #8]
 80051fc:	9301      	str	r3, [sp, #4]
 80051fe:	2300      	movs	r3, #0
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	2300      	movs	r3, #0
 8005204:	460a      	mov	r2, r1
 8005206:	4920      	ldr	r1, [pc, #128]	; (8005288 <vTaskStartScheduler+0xb0>)
 8005208:	4820      	ldr	r0, [pc, #128]	; (800528c <vTaskStartScheduler+0xb4>)
 800520a:	f7ff fe13 	bl	8004e34 <xTaskCreateStatic>
 800520e:	4602      	mov	r2, r0
 8005210:	4b1f      	ldr	r3, [pc, #124]	; (8005290 <vTaskStartScheduler+0xb8>)
 8005212:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005214:	4b1e      	ldr	r3, [pc, #120]	; (8005290 <vTaskStartScheduler+0xb8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800521c:	2301      	movs	r3, #1
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	e001      	b.n	8005226 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d102      	bne.n	8005232 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800522c:	f000 fce8 	bl	8005c00 <xTimerCreateTimerTask>
 8005230:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d115      	bne.n	8005264 <vTaskStartScheduler+0x8c>
 8005238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800524a:	4b12      	ldr	r3, [pc, #72]	; (8005294 <vTaskStartScheduler+0xbc>)
 800524c:	f04f 32ff 	mov.w	r2, #4294967295
 8005250:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005252:	4b11      	ldr	r3, [pc, #68]	; (8005298 <vTaskStartScheduler+0xc0>)
 8005254:	2201      	movs	r2, #1
 8005256:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005258:	4b10      	ldr	r3, [pc, #64]	; (800529c <vTaskStartScheduler+0xc4>)
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800525e:	f7fe fd87 	bl	8003d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005262:	e00d      	b.n	8005280 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d109      	bne.n	8005280 <vTaskStartScheduler+0xa8>
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	e7fe      	b.n	800527e <vTaskStartScheduler+0xa6>
}
 8005280:	bf00      	nop
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	08009ecc 	.word	0x08009ecc
 800528c:	080058a1 	.word	0x080058a1
 8005290:	20008a1c 	.word	0x20008a1c
 8005294:	20008a18 	.word	0x20008a18
 8005298:	20008a04 	.word	0x20008a04
 800529c:	200089fc 	.word	0x200089fc

080052a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80052a4:	4b04      	ldr	r3, [pc, #16]	; (80052b8 <vTaskSuspendAll+0x18>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3301      	adds	r3, #1
 80052aa:	4a03      	ldr	r2, [pc, #12]	; (80052b8 <vTaskSuspendAll+0x18>)
 80052ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80052ae:	bf00      	nop
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	20008a20 	.word	0x20008a20

080052bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052c6:	2300      	movs	r3, #0
 80052c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052ca:	4b41      	ldr	r3, [pc, #260]	; (80053d0 <xTaskResumeAll+0x114>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <xTaskResumeAll+0x2a>
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	e7fe      	b.n	80052e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052e6:	f7fe fde1 	bl	8003eac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052ea:	4b39      	ldr	r3, [pc, #228]	; (80053d0 <xTaskResumeAll+0x114>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	4a37      	ldr	r2, [pc, #220]	; (80053d0 <xTaskResumeAll+0x114>)
 80052f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052f4:	4b36      	ldr	r3, [pc, #216]	; (80053d0 <xTaskResumeAll+0x114>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d162      	bne.n	80053c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052fc:	4b35      	ldr	r3, [pc, #212]	; (80053d4 <xTaskResumeAll+0x118>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d05e      	beq.n	80053c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005304:	e02f      	b.n	8005366 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005306:	4b34      	ldr	r3, [pc, #208]	; (80053d8 <xTaskResumeAll+0x11c>)
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3318      	adds	r3, #24
 8005312:	4618      	mov	r0, r3
 8005314:	f7fe fc76 	bl	8003c04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3304      	adds	r3, #4
 800531c:	4618      	mov	r0, r3
 800531e:	f7fe fc71 	bl	8003c04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005326:	4b2d      	ldr	r3, [pc, #180]	; (80053dc <xTaskResumeAll+0x120>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d903      	bls.n	8005336 <xTaskResumeAll+0x7a>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005332:	4a2a      	ldr	r2, [pc, #168]	; (80053dc <xTaskResumeAll+0x120>)
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4a27      	ldr	r2, [pc, #156]	; (80053e0 <xTaskResumeAll+0x124>)
 8005344:	441a      	add	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3304      	adds	r3, #4
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f7fe fbfc 	bl	8003b4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005356:	4b23      	ldr	r3, [pc, #140]	; (80053e4 <xTaskResumeAll+0x128>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	429a      	cmp	r2, r3
 800535e:	d302      	bcc.n	8005366 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005360:	4b21      	ldr	r3, [pc, #132]	; (80053e8 <xTaskResumeAll+0x12c>)
 8005362:	2201      	movs	r2, #1
 8005364:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005366:	4b1c      	ldr	r3, [pc, #112]	; (80053d8 <xTaskResumeAll+0x11c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1cb      	bne.n	8005306 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005374:	f000 fb46 	bl	8005a04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005378:	4b1c      	ldr	r3, [pc, #112]	; (80053ec <xTaskResumeAll+0x130>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d010      	beq.n	80053a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005384:	f000 f846 	bl	8005414 <xTaskIncrementTick>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800538e:	4b16      	ldr	r3, [pc, #88]	; (80053e8 <xTaskResumeAll+0x12c>)
 8005390:	2201      	movs	r2, #1
 8005392:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3b01      	subs	r3, #1
 8005398:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1f1      	bne.n	8005384 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80053a0:	4b12      	ldr	r3, [pc, #72]	; (80053ec <xTaskResumeAll+0x130>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053a6:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <xTaskResumeAll+0x12c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d009      	beq.n	80053c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053ae:	2301      	movs	r3, #1
 80053b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053b2:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <xTaskResumeAll+0x134>)
 80053b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053c2:	f7fe fda1 	bl	8003f08 <vPortExitCritical>

	return xAlreadyYielded;
 80053c6:	68bb      	ldr	r3, [r7, #8]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	20008a20 	.word	0x20008a20
 80053d4:	200089f8 	.word	0x200089f8
 80053d8:	200089b8 	.word	0x200089b8
 80053dc:	20008a00 	.word	0x20008a00
 80053e0:	20008528 	.word	0x20008528
 80053e4:	20008524 	.word	0x20008524
 80053e8:	20008a0c 	.word	0x20008a0c
 80053ec:	20008a08 	.word	0x20008a08
 80053f0:	e000ed04 	.word	0xe000ed04

080053f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <xTaskGetTickCount+0x1c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005400:	687b      	ldr	r3, [r7, #4]
}
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	200089fc 	.word	0x200089fc

08005414 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800541e:	4b4e      	ldr	r3, [pc, #312]	; (8005558 <xTaskIncrementTick+0x144>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	f040 8088 	bne.w	8005538 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005428:	4b4c      	ldr	r3, [pc, #304]	; (800555c <xTaskIncrementTick+0x148>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3301      	adds	r3, #1
 800542e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005430:	4a4a      	ldr	r2, [pc, #296]	; (800555c <xTaskIncrementTick+0x148>)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d11f      	bne.n	800547c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800543c:	4b48      	ldr	r3, [pc, #288]	; (8005560 <xTaskIncrementTick+0x14c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d009      	beq.n	800545a <xTaskIncrementTick+0x46>
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	e7fe      	b.n	8005458 <xTaskIncrementTick+0x44>
 800545a:	4b41      	ldr	r3, [pc, #260]	; (8005560 <xTaskIncrementTick+0x14c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	4b40      	ldr	r3, [pc, #256]	; (8005564 <xTaskIncrementTick+0x150>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a3e      	ldr	r2, [pc, #248]	; (8005560 <xTaskIncrementTick+0x14c>)
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	4a3e      	ldr	r2, [pc, #248]	; (8005564 <xTaskIncrementTick+0x150>)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	4b3e      	ldr	r3, [pc, #248]	; (8005568 <xTaskIncrementTick+0x154>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3301      	adds	r3, #1
 8005474:	4a3c      	ldr	r2, [pc, #240]	; (8005568 <xTaskIncrementTick+0x154>)
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	f000 fac4 	bl	8005a04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800547c:	4b3b      	ldr	r3, [pc, #236]	; (800556c <xTaskIncrementTick+0x158>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	429a      	cmp	r2, r3
 8005484:	d349      	bcc.n	800551a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005486:	4b36      	ldr	r3, [pc, #216]	; (8005560 <xTaskIncrementTick+0x14c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d104      	bne.n	800549a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005490:	4b36      	ldr	r3, [pc, #216]	; (800556c <xTaskIncrementTick+0x158>)
 8005492:	f04f 32ff 	mov.w	r2, #4294967295
 8005496:	601a      	str	r2, [r3, #0]
					break;
 8005498:	e03f      	b.n	800551a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800549a:	4b31      	ldr	r3, [pc, #196]	; (8005560 <xTaskIncrementTick+0x14c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d203      	bcs.n	80054ba <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054b2:	4a2e      	ldr	r2, [pc, #184]	; (800556c <xTaskIncrementTick+0x158>)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054b8:	e02f      	b.n	800551a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	3304      	adds	r3, #4
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fe fba0 	bl	8003c04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	3318      	adds	r3, #24
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fe fb97 	bl	8003c04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054da:	4b25      	ldr	r3, [pc, #148]	; (8005570 <xTaskIncrementTick+0x15c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d903      	bls.n	80054ea <xTaskIncrementTick+0xd6>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e6:	4a22      	ldr	r2, [pc, #136]	; (8005570 <xTaskIncrementTick+0x15c>)
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ee:	4613      	mov	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4a1f      	ldr	r2, [pc, #124]	; (8005574 <xTaskIncrementTick+0x160>)
 80054f8:	441a      	add	r2, r3
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	3304      	adds	r3, #4
 80054fe:	4619      	mov	r1, r3
 8005500:	4610      	mov	r0, r2
 8005502:	f7fe fb22 	bl	8003b4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550a:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <xTaskIncrementTick+0x164>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	429a      	cmp	r2, r3
 8005512:	d3b8      	bcc.n	8005486 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005514:	2301      	movs	r3, #1
 8005516:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005518:	e7b5      	b.n	8005486 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800551a:	4b17      	ldr	r3, [pc, #92]	; (8005578 <xTaskIncrementTick+0x164>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005520:	4914      	ldr	r1, [pc, #80]	; (8005574 <xTaskIncrementTick+0x160>)
 8005522:	4613      	mov	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d907      	bls.n	8005542 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005532:	2301      	movs	r3, #1
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	e004      	b.n	8005542 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005538:	4b10      	ldr	r3, [pc, #64]	; (800557c <xTaskIncrementTick+0x168>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3301      	adds	r3, #1
 800553e:	4a0f      	ldr	r2, [pc, #60]	; (800557c <xTaskIncrementTick+0x168>)
 8005540:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005542:	4b0f      	ldr	r3, [pc, #60]	; (8005580 <xTaskIncrementTick+0x16c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800554a:	2301      	movs	r3, #1
 800554c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800554e:	697b      	ldr	r3, [r7, #20]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	20008a20 	.word	0x20008a20
 800555c:	200089fc 	.word	0x200089fc
 8005560:	200089b0 	.word	0x200089b0
 8005564:	200089b4 	.word	0x200089b4
 8005568:	20008a10 	.word	0x20008a10
 800556c:	20008a18 	.word	0x20008a18
 8005570:	20008a00 	.word	0x20008a00
 8005574:	20008528 	.word	0x20008528
 8005578:	20008524 	.word	0x20008524
 800557c:	20008a08 	.word	0x20008a08
 8005580:	20008a0c 	.word	0x20008a0c

08005584 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800558a:	4b27      	ldr	r3, [pc, #156]	; (8005628 <vTaskSwitchContext+0xa4>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005592:	4b26      	ldr	r3, [pc, #152]	; (800562c <vTaskSwitchContext+0xa8>)
 8005594:	2201      	movs	r2, #1
 8005596:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005598:	e040      	b.n	800561c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800559a:	4b24      	ldr	r3, [pc, #144]	; (800562c <vTaskSwitchContext+0xa8>)
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055a0:	4b23      	ldr	r3, [pc, #140]	; (8005630 <vTaskSwitchContext+0xac>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	e00f      	b.n	80055c8 <vTaskSwitchContext+0x44>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <vTaskSwitchContext+0x3e>
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	607b      	str	r3, [r7, #4]
 80055c0:	e7fe      	b.n	80055c0 <vTaskSwitchContext+0x3c>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	491a      	ldr	r1, [pc, #104]	; (8005634 <vTaskSwitchContext+0xb0>)
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4613      	mov	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0e5      	beq.n	80055a8 <vTaskSwitchContext+0x24>
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4a13      	ldr	r2, [pc, #76]	; (8005634 <vTaskSwitchContext+0xb0>)
 80055e8:	4413      	add	r3, r2
 80055ea:	60bb      	str	r3, [r7, #8]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	605a      	str	r2, [r3, #4]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	3308      	adds	r3, #8
 80055fe:	429a      	cmp	r2, r3
 8005600:	d104      	bne.n	800560c <vTaskSwitchContext+0x88>
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	605a      	str	r2, [r3, #4]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	4a09      	ldr	r2, [pc, #36]	; (8005638 <vTaskSwitchContext+0xb4>)
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	4a06      	ldr	r2, [pc, #24]	; (8005630 <vTaskSwitchContext+0xac>)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6013      	str	r3, [r2, #0]
}
 800561c:	bf00      	nop
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	20008a20 	.word	0x20008a20
 800562c:	20008a0c 	.word	0x20008a0c
 8005630:	20008a00 	.word	0x20008a00
 8005634:	20008528 	.word	0x20008528
 8005638:	20008524 	.word	0x20008524

0800563c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d109      	bne.n	8005660 <vTaskPlaceOnEventList+0x24>
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	e7fe      	b.n	800565e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <vTaskPlaceOnEventList+0x44>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3318      	adds	r3, #24
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7fe fa92 	bl	8003b92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800566e:	2101      	movs	r1, #1
 8005670:	6838      	ldr	r0, [r7, #0]
 8005672:	f000 fa71 	bl	8005b58 <prvAddCurrentTaskToDelayedList>
}
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20008524 	.word	0x20008524

08005684 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <vTaskPlaceOnEventListRestricted+0x26>
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	e7fe      	b.n	80056a8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056aa:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <vTaskPlaceOnEventListRestricted+0x50>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3318      	adds	r3, #24
 80056b0:	4619      	mov	r1, r3
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f7fe fa49 	bl	8003b4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80056be:	f04f 33ff 	mov.w	r3, #4294967295
 80056c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	68b8      	ldr	r0, [r7, #8]
 80056c8:	f000 fa46 	bl	8005b58 <prvAddCurrentTaskToDelayedList>
	}
 80056cc:	bf00      	nop
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20008524 	.word	0x20008524

080056d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d109      	bne.n	8005702 <xTaskRemoveFromEventList+0x2a>
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	e7fe      	b.n	8005700 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	3318      	adds	r3, #24
 8005706:	4618      	mov	r0, r3
 8005708:	f7fe fa7c 	bl	8003c04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800570c:	4b1d      	ldr	r3, [pc, #116]	; (8005784 <xTaskRemoveFromEventList+0xac>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d11d      	bne.n	8005750 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	3304      	adds	r3, #4
 8005718:	4618      	mov	r0, r3
 800571a:	f7fe fa73 	bl	8003c04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005722:	4b19      	ldr	r3, [pc, #100]	; (8005788 <xTaskRemoveFromEventList+0xb0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d903      	bls.n	8005732 <xTaskRemoveFromEventList+0x5a>
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	4a16      	ldr	r2, [pc, #88]	; (8005788 <xTaskRemoveFromEventList+0xb0>)
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4a13      	ldr	r2, [pc, #76]	; (800578c <xTaskRemoveFromEventList+0xb4>)
 8005740:	441a      	add	r2, r3
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	3304      	adds	r3, #4
 8005746:	4619      	mov	r1, r3
 8005748:	4610      	mov	r0, r2
 800574a:	f7fe f9fe 	bl	8003b4a <vListInsertEnd>
 800574e:	e005      	b.n	800575c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	3318      	adds	r3, #24
 8005754:	4619      	mov	r1, r3
 8005756:	480e      	ldr	r0, [pc, #56]	; (8005790 <xTaskRemoveFromEventList+0xb8>)
 8005758:	f7fe f9f7 	bl	8003b4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005760:	4b0c      	ldr	r3, [pc, #48]	; (8005794 <xTaskRemoveFromEventList+0xbc>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005766:	429a      	cmp	r2, r3
 8005768:	d905      	bls.n	8005776 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800576a:	2301      	movs	r3, #1
 800576c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800576e:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <xTaskRemoveFromEventList+0xc0>)
 8005770:	2201      	movs	r2, #1
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	e001      	b.n	800577a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800577a:	697b      	ldr	r3, [r7, #20]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20008a20 	.word	0x20008a20
 8005788:	20008a00 	.word	0x20008a00
 800578c:	20008528 	.word	0x20008528
 8005790:	200089b8 	.word	0x200089b8
 8005794:	20008524 	.word	0x20008524
 8005798:	20008a0c 	.word	0x20008a0c

0800579c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80057a4:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <vTaskInternalSetTimeOutState+0x24>)
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <vTaskInternalSetTimeOutState+0x28>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	605a      	str	r2, [r3, #4]
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	20008a10 	.word	0x20008a10
 80057c4:	200089fc 	.word	0x200089fc

080057c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d109      	bne.n	80057ec <xTaskCheckForTimeOut+0x24>
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	613b      	str	r3, [r7, #16]
 80057ea:	e7fe      	b.n	80057ea <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d109      	bne.n	8005806 <xTaskCheckForTimeOut+0x3e>
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	e7fe      	b.n	8005804 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005806:	f7fe fb51 	bl	8003eac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800580a:	4b1d      	ldr	r3, [pc, #116]	; (8005880 <xTaskCheckForTimeOut+0xb8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d102      	bne.n	800582a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005824:	2300      	movs	r3, #0
 8005826:	61fb      	str	r3, [r7, #28]
 8005828:	e023      	b.n	8005872 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b15      	ldr	r3, [pc, #84]	; (8005884 <xTaskCheckForTimeOut+0xbc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d007      	beq.n	8005846 <xTaskCheckForTimeOut+0x7e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	429a      	cmp	r2, r3
 800583e:	d802      	bhi.n	8005846 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005840:	2301      	movs	r3, #1
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	e015      	b.n	8005872 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	429a      	cmp	r2, r3
 800584e:	d90b      	bls.n	8005868 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	1ad2      	subs	r2, r2, r3
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff ff9d 	bl	800579c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
 8005866:	e004      	b.n	8005872 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800586e:	2301      	movs	r3, #1
 8005870:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005872:	f7fe fb49 	bl	8003f08 <vPortExitCritical>

	return xReturn;
 8005876:	69fb      	ldr	r3, [r7, #28]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3720      	adds	r7, #32
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	200089fc 	.word	0x200089fc
 8005884:	20008a10 	.word	0x20008a10

08005888 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800588c:	4b03      	ldr	r3, [pc, #12]	; (800589c <vTaskMissedYield+0x14>)
 800588e:	2201      	movs	r2, #1
 8005890:	601a      	str	r2, [r3, #0]
}
 8005892:	bf00      	nop
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	20008a0c 	.word	0x20008a0c

080058a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058a8:	f000 f852 	bl	8005950 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <prvIdleTask+0x28>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d9f9      	bls.n	80058a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80058b4:	4b05      	ldr	r3, [pc, #20]	; (80058cc <prvIdleTask+0x2c>)
 80058b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058c4:	e7f0      	b.n	80058a8 <prvIdleTask+0x8>
 80058c6:	bf00      	nop
 80058c8:	20008528 	.word	0x20008528
 80058cc:	e000ed04 	.word	0xe000ed04

080058d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058d6:	2300      	movs	r3, #0
 80058d8:	607b      	str	r3, [r7, #4]
 80058da:	e00c      	b.n	80058f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4a12      	ldr	r2, [pc, #72]	; (8005930 <prvInitialiseTaskLists+0x60>)
 80058e8:	4413      	add	r3, r2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe f900 	bl	8003af0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3301      	adds	r3, #1
 80058f4:	607b      	str	r3, [r7, #4]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b37      	cmp	r3, #55	; 0x37
 80058fa:	d9ef      	bls.n	80058dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058fc:	480d      	ldr	r0, [pc, #52]	; (8005934 <prvInitialiseTaskLists+0x64>)
 80058fe:	f7fe f8f7 	bl	8003af0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005902:	480d      	ldr	r0, [pc, #52]	; (8005938 <prvInitialiseTaskLists+0x68>)
 8005904:	f7fe f8f4 	bl	8003af0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005908:	480c      	ldr	r0, [pc, #48]	; (800593c <prvInitialiseTaskLists+0x6c>)
 800590a:	f7fe f8f1 	bl	8003af0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800590e:	480c      	ldr	r0, [pc, #48]	; (8005940 <prvInitialiseTaskLists+0x70>)
 8005910:	f7fe f8ee 	bl	8003af0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005914:	480b      	ldr	r0, [pc, #44]	; (8005944 <prvInitialiseTaskLists+0x74>)
 8005916:	f7fe f8eb 	bl	8003af0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800591a:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <prvInitialiseTaskLists+0x78>)
 800591c:	4a05      	ldr	r2, [pc, #20]	; (8005934 <prvInitialiseTaskLists+0x64>)
 800591e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005920:	4b0a      	ldr	r3, [pc, #40]	; (800594c <prvInitialiseTaskLists+0x7c>)
 8005922:	4a05      	ldr	r2, [pc, #20]	; (8005938 <prvInitialiseTaskLists+0x68>)
 8005924:	601a      	str	r2, [r3, #0]
}
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20008528 	.word	0x20008528
 8005934:	20008988 	.word	0x20008988
 8005938:	2000899c 	.word	0x2000899c
 800593c:	200089b8 	.word	0x200089b8
 8005940:	200089cc 	.word	0x200089cc
 8005944:	200089e4 	.word	0x200089e4
 8005948:	200089b0 	.word	0x200089b0
 800594c:	200089b4 	.word	0x200089b4

08005950 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005956:	e019      	b.n	800598c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005958:	f7fe faa8 	bl	8003eac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800595c:	4b0f      	ldr	r3, [pc, #60]	; (800599c <prvCheckTasksWaitingTermination+0x4c>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3304      	adds	r3, #4
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe f94b 	bl	8003c04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800596e:	4b0c      	ldr	r3, [pc, #48]	; (80059a0 <prvCheckTasksWaitingTermination+0x50>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3b01      	subs	r3, #1
 8005974:	4a0a      	ldr	r2, [pc, #40]	; (80059a0 <prvCheckTasksWaitingTermination+0x50>)
 8005976:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005978:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <prvCheckTasksWaitingTermination+0x54>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3b01      	subs	r3, #1
 800597e:	4a09      	ldr	r2, [pc, #36]	; (80059a4 <prvCheckTasksWaitingTermination+0x54>)
 8005980:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005982:	f7fe fac1 	bl	8003f08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f80e 	bl	80059a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800598c:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <prvCheckTasksWaitingTermination+0x54>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e1      	bne.n	8005958 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	200089cc 	.word	0x200089cc
 80059a0:	200089f8 	.word	0x200089f8
 80059a4:	200089e0 	.word	0x200089e0

080059a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d108      	bne.n	80059cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fe fc50 	bl	8004264 <vPortFree>
				vPortFree( pxTCB );
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7fe fc4d 	bl	8004264 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059ca:	e017      	b.n	80059fc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d103      	bne.n	80059de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fe fc44 	bl	8004264 <vPortFree>
	}
 80059dc:	e00e      	b.n	80059fc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d009      	beq.n	80059fc <prvDeleteTCB+0x54>
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	e7fe      	b.n	80059fa <prvDeleteTCB+0x52>
	}
 80059fc:	bf00      	nop
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <prvResetNextTaskUnblockTime+0x38>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d104      	bne.n	8005a1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a14:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <prvResetNextTaskUnblockTime+0x3c>)
 8005a16:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a1c:	e008      	b.n	8005a30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a1e:	4b07      	ldr	r3, [pc, #28]	; (8005a3c <prvResetNextTaskUnblockTime+0x38>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	4a04      	ldr	r2, [pc, #16]	; (8005a40 <prvResetNextTaskUnblockTime+0x3c>)
 8005a2e:	6013      	str	r3, [r2, #0]
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	200089b0 	.word	0x200089b0
 8005a40:	20008a18 	.word	0x20008a18

08005a44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a4a:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <xTaskGetSchedulerState+0x34>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d102      	bne.n	8005a58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a52:	2301      	movs	r3, #1
 8005a54:	607b      	str	r3, [r7, #4]
 8005a56:	e008      	b.n	8005a6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a58:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <xTaskGetSchedulerState+0x38>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a60:	2302      	movs	r3, #2
 8005a62:	607b      	str	r3, [r7, #4]
 8005a64:	e001      	b.n	8005a6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a66:	2300      	movs	r3, #0
 8005a68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a6a:	687b      	ldr	r3, [r7, #4]
	}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	20008a04 	.word	0x20008a04
 8005a7c:	20008a20 	.word	0x20008a20

08005a80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d054      	beq.n	8005b40 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a96:	4b2d      	ldr	r3, [pc, #180]	; (8005b4c <xTaskPriorityDisinherit+0xcc>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d009      	beq.n	8005ab4 <xTaskPriorityDisinherit+0x34>
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	e7fe      	b.n	8005ab2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d109      	bne.n	8005ad0 <xTaskPriorityDisinherit+0x50>
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	e7fe      	b.n	8005ace <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad4:	1e5a      	subs	r2, r3, #1
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d02c      	beq.n	8005b40 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d128      	bne.n	8005b40 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	3304      	adds	r3, #4
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fe f886 	bl	8003c04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b10:	4b0f      	ldr	r3, [pc, #60]	; (8005b50 <xTaskPriorityDisinherit+0xd0>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d903      	bls.n	8005b20 <xTaskPriorityDisinherit+0xa0>
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1c:	4a0c      	ldr	r2, [pc, #48]	; (8005b50 <xTaskPriorityDisinherit+0xd0>)
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4a09      	ldr	r2, [pc, #36]	; (8005b54 <xTaskPriorityDisinherit+0xd4>)
 8005b2e:	441a      	add	r2, r3
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	3304      	adds	r3, #4
 8005b34:	4619      	mov	r1, r3
 8005b36:	4610      	mov	r0, r2
 8005b38:	f7fe f807 	bl	8003b4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b40:	697b      	ldr	r3, [r7, #20]
	}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20008524 	.word	0x20008524
 8005b50:	20008a00 	.word	0x20008a00
 8005b54:	20008528 	.word	0x20008528

08005b58 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b62:	4b21      	ldr	r3, [pc, #132]	; (8005be8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b68:	4b20      	ldr	r3, [pc, #128]	; (8005bec <prvAddCurrentTaskToDelayedList+0x94>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe f848 	bl	8003c04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d10a      	bne.n	8005b92 <prvAddCurrentTaskToDelayedList+0x3a>
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b82:	4b1a      	ldr	r3, [pc, #104]	; (8005bec <prvAddCurrentTaskToDelayedList+0x94>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3304      	adds	r3, #4
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4819      	ldr	r0, [pc, #100]	; (8005bf0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b8c:	f7fd ffdd 	bl	8003b4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b90:	e026      	b.n	8005be0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4413      	add	r3, r2
 8005b98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b9a:	4b14      	ldr	r3, [pc, #80]	; (8005bec <prvAddCurrentTaskToDelayedList+0x94>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d209      	bcs.n	8005bbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005baa:	4b12      	ldr	r3, [pc, #72]	; (8005bf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	4b0f      	ldr	r3, [pc, #60]	; (8005bec <prvAddCurrentTaskToDelayedList+0x94>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	f7fd ffeb 	bl	8003b92 <vListInsert>
}
 8005bbc:	e010      	b.n	8005be0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bbe:	4b0e      	ldr	r3, [pc, #56]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4b0a      	ldr	r3, [pc, #40]	; (8005bec <prvAddCurrentTaskToDelayedList+0x94>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4610      	mov	r0, r2
 8005bcc:	f7fd ffe1 	bl	8003b92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bd0:	4b0a      	ldr	r3, [pc, #40]	; (8005bfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d202      	bcs.n	8005be0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005bda:	4a08      	ldr	r2, [pc, #32]	; (8005bfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	6013      	str	r3, [r2, #0]
}
 8005be0:	bf00      	nop
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	200089fc 	.word	0x200089fc
 8005bec:	20008524 	.word	0x20008524
 8005bf0:	200089e4 	.word	0x200089e4
 8005bf4:	200089b4 	.word	0x200089b4
 8005bf8:	200089b0 	.word	0x200089b0
 8005bfc:	20008a18 	.word	0x20008a18

08005c00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	; 0x28
 8005c04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c0a:	f000 faff 	bl	800620c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c0e:	4b1c      	ldr	r3, [pc, #112]	; (8005c80 <xTimerCreateTimerTask+0x80>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d021      	beq.n	8005c5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c1e:	1d3a      	adds	r2, r7, #4
 8005c20:	f107 0108 	add.w	r1, r7, #8
 8005c24:	f107 030c 	add.w	r3, r7, #12
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fd ff47 	bl	8003abc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	9202      	str	r2, [sp, #8]
 8005c36:	9301      	str	r3, [sp, #4]
 8005c38:	2302      	movs	r3, #2
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	460a      	mov	r2, r1
 8005c40:	4910      	ldr	r1, [pc, #64]	; (8005c84 <xTimerCreateTimerTask+0x84>)
 8005c42:	4811      	ldr	r0, [pc, #68]	; (8005c88 <xTimerCreateTimerTask+0x88>)
 8005c44:	f7ff f8f6 	bl	8004e34 <xTaskCreateStatic>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	4b10      	ldr	r3, [pc, #64]	; (8005c8c <xTimerCreateTimerTask+0x8c>)
 8005c4c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c4e:	4b0f      	ldr	r3, [pc, #60]	; (8005c8c <xTimerCreateTimerTask+0x8c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c56:	2301      	movs	r3, #1
 8005c58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <xTimerCreateTimerTask+0x74>
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	e7fe      	b.n	8005c72 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005c74:	697b      	ldr	r3, [r7, #20]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20008a54 	.word	0x20008a54
 8005c84:	08009ed4 	.word	0x08009ed4
 8005c88:	08005dc1 	.word	0x08005dc1
 8005c8c:	20008a58 	.word	0x20008a58

08005c90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	; 0x28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <xTimerGenericCommand+0x2c>
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	623b      	str	r3, [r7, #32]
 8005cba:	e7fe      	b.n	8005cba <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005cbc:	4b19      	ldr	r3, [pc, #100]	; (8005d24 <xTimerGenericCommand+0x94>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d02a      	beq.n	8005d1a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b05      	cmp	r3, #5
 8005cd4:	dc18      	bgt.n	8005d08 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005cd6:	f7ff feb5 	bl	8005a44 <xTaskGetSchedulerState>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d109      	bne.n	8005cf4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ce0:	4b10      	ldr	r3, [pc, #64]	; (8005d24 <xTimerGenericCommand+0x94>)
 8005ce2:	6818      	ldr	r0, [r3, #0]
 8005ce4:	f107 0110 	add.w	r1, r7, #16
 8005ce8:	2300      	movs	r3, #0
 8005cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cec:	f7fe fccc 	bl	8004688 <xQueueGenericSend>
 8005cf0:	6278      	str	r0, [r7, #36]	; 0x24
 8005cf2:	e012      	b.n	8005d1a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005cf4:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <xTimerGenericCommand+0x94>)
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	f107 0110 	add.w	r1, r7, #16
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f7fe fcc2 	bl	8004688 <xQueueGenericSend>
 8005d04:	6278      	str	r0, [r7, #36]	; 0x24
 8005d06:	e008      	b.n	8005d1a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d08:	4b06      	ldr	r3, [pc, #24]	; (8005d24 <xTimerGenericCommand+0x94>)
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	f107 0110 	add.w	r1, r7, #16
 8005d10:	2300      	movs	r3, #0
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	f7fe fdb2 	bl	800487c <xQueueGenericSendFromISR>
 8005d18:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3728      	adds	r7, #40	; 0x28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	20008a54 	.word	0x20008a54

08005d28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d32:	4b22      	ldr	r3, [pc, #136]	; (8005dbc <prvProcessExpiredTimer+0x94>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	3304      	adds	r3, #4
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fd ff5f 	bl	8003c04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d021      	beq.n	8005d98 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	699a      	ldr	r2, [r3, #24]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	18d1      	adds	r1, r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	6978      	ldr	r0, [r7, #20]
 8005d62:	f000 f8d1 	bl	8005f08 <prvInsertTimerInActiveList>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01e      	beq.n	8005daa <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	2300      	movs	r3, #0
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	2100      	movs	r1, #0
 8005d76:	6978      	ldr	r0, [r7, #20]
 8005d78:	f7ff ff8a 	bl	8005c90 <xTimerGenericCommand>
 8005d7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d112      	bne.n	8005daa <prvProcessExpiredTimer+0x82>
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	e7fe      	b.n	8005d96 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d9e:	f023 0301 	bic.w	r3, r3, #1
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	6978      	ldr	r0, [r7, #20]
 8005db0:	4798      	blx	r3
}
 8005db2:	bf00      	nop
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20008a4c 	.word	0x20008a4c

08005dc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dc8:	f107 0308 	add.w	r3, r7, #8
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 f857 	bl	8005e80 <prvGetNextExpireTime>
 8005dd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 f803 	bl	8005de4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005dde:	f000 f8d5 	bl	8005f8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005de2:	e7f1      	b.n	8005dc8 <prvTimerTask+0x8>

08005de4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005dee:	f7ff fa57 	bl	80052a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005df2:	f107 0308 	add.w	r3, r7, #8
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 f866 	bl	8005ec8 <prvSampleTimeNow>
 8005dfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d130      	bne.n	8005e66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10a      	bne.n	8005e20 <prvProcessTimerOrBlockTask+0x3c>
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d806      	bhi.n	8005e20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e12:	f7ff fa53 	bl	80052bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e16:	68f9      	ldr	r1, [r7, #12]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff ff85 	bl	8005d28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e1e:	e024      	b.n	8005e6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d008      	beq.n	8005e38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e26:	4b13      	ldr	r3, [pc, #76]	; (8005e74 <prvProcessTimerOrBlockTask+0x90>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <prvProcessTimerOrBlockTask+0x50>
 8005e30:	2301      	movs	r3, #1
 8005e32:	e000      	b.n	8005e36 <prvProcessTimerOrBlockTask+0x52>
 8005e34:	2300      	movs	r3, #0
 8005e36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e38:	4b0f      	ldr	r3, [pc, #60]	; (8005e78 <prvProcessTimerOrBlockTask+0x94>)
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	4619      	mov	r1, r3
 8005e46:	f7fe ffc1 	bl	8004dcc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e4a:	f7ff fa37 	bl	80052bc <xTaskResumeAll>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e54:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <prvProcessTimerOrBlockTask+0x98>)
 8005e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	f3bf 8f6f 	isb	sy
}
 8005e64:	e001      	b.n	8005e6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e66:	f7ff fa29 	bl	80052bc <xTaskResumeAll>
}
 8005e6a:	bf00      	nop
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20008a50 	.word	0x20008a50
 8005e78:	20008a54 	.word	0x20008a54
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e88:	4b0e      	ldr	r3, [pc, #56]	; (8005ec4 <prvGetNextExpireTime+0x44>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <prvGetNextExpireTime+0x16>
 8005e92:	2201      	movs	r2, #1
 8005e94:	e000      	b.n	8005e98 <prvGetNextExpireTime+0x18>
 8005e96:	2200      	movs	r2, #0
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d105      	bne.n	8005eb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ea4:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <prvGetNextExpireTime+0x44>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	e001      	b.n	8005eb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20008a4c 	.word	0x20008a4c

08005ec8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ed0:	f7ff fa90 	bl	80053f4 <xTaskGetTickCount>
 8005ed4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <prvSampleTimeNow+0x3c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d205      	bcs.n	8005eec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ee0:	f000 f930 	bl	8006144 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	e002      	b.n	8005ef2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ef2:	4a04      	ldr	r2, [pc, #16]	; (8005f04 <prvSampleTimeNow+0x3c>)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20008a5c 	.word	0x20008a5c

08005f08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
 8005f14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f16:	2300      	movs	r3, #0
 8005f18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d812      	bhi.n	8005f54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	1ad2      	subs	r2, r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d302      	bcc.n	8005f42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	e01b      	b.n	8005f7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f42:	4b10      	ldr	r3, [pc, #64]	; (8005f84 <prvInsertTimerInActiveList+0x7c>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	f7fd fe20 	bl	8003b92 <vListInsert>
 8005f52:	e012      	b.n	8005f7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d206      	bcs.n	8005f6a <prvInsertTimerInActiveList+0x62>
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d302      	bcc.n	8005f6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f64:	2301      	movs	r3, #1
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	e007      	b.n	8005f7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f6a:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <prvInsertTimerInActiveList+0x80>)
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3304      	adds	r3, #4
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f7fd fe0c 	bl	8003b92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f7a:	697b      	ldr	r3, [r7, #20]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	20008a50 	.word	0x20008a50
 8005f88:	20008a4c 	.word	0x20008a4c

08005f8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08e      	sub	sp, #56	; 0x38
 8005f90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f92:	e0c6      	b.n	8006122 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	da17      	bge.n	8005fca <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f9a:	1d3b      	adds	r3, r7, #4
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <prvProcessReceivedCommands+0x2e>
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	61fb      	str	r3, [r7, #28]
 8005fb8:	e7fe      	b.n	8005fb8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fc0:	6850      	ldr	r0, [r2, #4]
 8005fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fc4:	6892      	ldr	r2, [r2, #8]
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f2c0 80a8 	blt.w	8006122 <prvProcessReceivedCommands+0x196>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d004      	beq.n	8005fe8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fd fe0e 	bl	8003c04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fe8:	463b      	mov	r3, r7
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff ff6c 	bl	8005ec8 <prvSampleTimeNow>
 8005ff0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b09      	cmp	r3, #9
 8005ff6:	f200 8093 	bhi.w	8006120 <prvProcessReceivedCommands+0x194>
 8005ffa:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <prvProcessReceivedCommands+0x74>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006029 	.word	0x08006029
 8006004:	08006029 	.word	0x08006029
 8006008:	08006029 	.word	0x08006029
 800600c:	0800609b 	.word	0x0800609b
 8006010:	080060af 	.word	0x080060af
 8006014:	080060f7 	.word	0x080060f7
 8006018:	08006029 	.word	0x08006029
 800601c:	08006029 	.word	0x08006029
 8006020:	0800609b 	.word	0x0800609b
 8006024:	080060af 	.word	0x080060af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800602e:	f043 0301 	orr.w	r3, r3, #1
 8006032:	b2da      	uxtb	r2, r3
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	18d1      	adds	r1, r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006048:	f7ff ff5e 	bl	8005f08 <prvInsertTimerInActiveList>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d067      	beq.n	8006122 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006058:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d05c      	beq.n	8006122 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	441a      	add	r2, r3
 8006070:	2300      	movs	r3, #0
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	2300      	movs	r3, #0
 8006076:	2100      	movs	r1, #0
 8006078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800607a:	f7ff fe09 	bl	8005c90 <xTimerGenericCommand>
 800607e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d14d      	bne.n	8006122 <prvProcessReceivedCommands+0x196>
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	61bb      	str	r3, [r7, #24]
 8006098:	e7fe      	b.n	8006098 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060a0:	f023 0301 	bic.w	r3, r3, #1
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80060ac:	e039      	b.n	8006122 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060b4:	f043 0301 	orr.w	r3, r3, #1
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <prvProcessReceivedCommands+0x156>
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	e7fe      	b.n	80060e0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	18d1      	adds	r1, r2, r3
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060f0:	f7ff ff0a 	bl	8005f08 <prvInsertTimerInActiveList>
					break;
 80060f4:	e015      	b.n	8006122 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d103      	bne.n	800610c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006106:	f7fe f8ad 	bl	8004264 <vPortFree>
 800610a:	e00a      	b.n	8006122 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006112:	f023 0301 	bic.w	r3, r3, #1
 8006116:	b2da      	uxtb	r2, r3
 8006118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800611e:	e000      	b.n	8006122 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
 8006120:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006122:	4b07      	ldr	r3, [pc, #28]	; (8006140 <prvProcessReceivedCommands+0x1b4>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	1d39      	adds	r1, r7, #4
 8006128:	2200      	movs	r2, #0
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe fc3a 	bl	80049a4 <xQueueReceive>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	f47f af2e 	bne.w	8005f94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006138:	bf00      	nop
 800613a:	3730      	adds	r7, #48	; 0x30
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20008a54 	.word	0x20008a54

08006144 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800614a:	e047      	b.n	80061dc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800614c:	4b2d      	ldr	r3, [pc, #180]	; (8006204 <prvSwitchTimerLists+0xc0>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006156:	4b2b      	ldr	r3, [pc, #172]	; (8006204 <prvSwitchTimerLists+0xc0>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	3304      	adds	r3, #4
 8006164:	4618      	mov	r0, r3
 8006166:	f7fd fd4d 	bl	8003c04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	6938      	ldr	r0, [r7, #16]
 8006170:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b00      	cmp	r3, #0
 800617e:	d02d      	beq.n	80061dc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	699a      	ldr	r2, [r3, #24]
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	4413      	add	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	429a      	cmp	r2, r3
 8006190:	d90e      	bls.n	80061b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800619e:	4b19      	ldr	r3, [pc, #100]	; (8006204 <prvSwitchTimerLists+0xc0>)
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	3304      	adds	r3, #4
 80061a6:	4619      	mov	r1, r3
 80061a8:	4610      	mov	r0, r2
 80061aa:	f7fd fcf2 	bl	8003b92 <vListInsert>
 80061ae:	e015      	b.n	80061dc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061b0:	2300      	movs	r3, #0
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	2300      	movs	r3, #0
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	2100      	movs	r1, #0
 80061ba:	6938      	ldr	r0, [r7, #16]
 80061bc:	f7ff fd68 	bl	8005c90 <xTimerGenericCommand>
 80061c0:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d109      	bne.n	80061dc <prvSwitchTimerLists+0x98>
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	603b      	str	r3, [r7, #0]
 80061da:	e7fe      	b.n	80061da <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061dc:	4b09      	ldr	r3, [pc, #36]	; (8006204 <prvSwitchTimerLists+0xc0>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1b2      	bne.n	800614c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80061e6:	4b07      	ldr	r3, [pc, #28]	; (8006204 <prvSwitchTimerLists+0xc0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80061ec:	4b06      	ldr	r3, [pc, #24]	; (8006208 <prvSwitchTimerLists+0xc4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a04      	ldr	r2, [pc, #16]	; (8006204 <prvSwitchTimerLists+0xc0>)
 80061f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80061f4:	4a04      	ldr	r2, [pc, #16]	; (8006208 <prvSwitchTimerLists+0xc4>)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6013      	str	r3, [r2, #0]
}
 80061fa:	bf00      	nop
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20008a4c 	.word	0x20008a4c
 8006208:	20008a50 	.word	0x20008a50

0800620c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006212:	f7fd fe4b 	bl	8003eac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006216:	4b15      	ldr	r3, [pc, #84]	; (800626c <prvCheckForValidListAndQueue+0x60>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d120      	bne.n	8006260 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800621e:	4814      	ldr	r0, [pc, #80]	; (8006270 <prvCheckForValidListAndQueue+0x64>)
 8006220:	f7fd fc66 	bl	8003af0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006224:	4813      	ldr	r0, [pc, #76]	; (8006274 <prvCheckForValidListAndQueue+0x68>)
 8006226:	f7fd fc63 	bl	8003af0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800622a:	4b13      	ldr	r3, [pc, #76]	; (8006278 <prvCheckForValidListAndQueue+0x6c>)
 800622c:	4a10      	ldr	r2, [pc, #64]	; (8006270 <prvCheckForValidListAndQueue+0x64>)
 800622e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006230:	4b12      	ldr	r3, [pc, #72]	; (800627c <prvCheckForValidListAndQueue+0x70>)
 8006232:	4a10      	ldr	r2, [pc, #64]	; (8006274 <prvCheckForValidListAndQueue+0x68>)
 8006234:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006236:	2300      	movs	r3, #0
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	4b11      	ldr	r3, [pc, #68]	; (8006280 <prvCheckForValidListAndQueue+0x74>)
 800623c:	4a11      	ldr	r2, [pc, #68]	; (8006284 <prvCheckForValidListAndQueue+0x78>)
 800623e:	2110      	movs	r1, #16
 8006240:	200a      	movs	r0, #10
 8006242:	f7fe f98b 	bl	800455c <xQueueGenericCreateStatic>
 8006246:	4602      	mov	r2, r0
 8006248:	4b08      	ldr	r3, [pc, #32]	; (800626c <prvCheckForValidListAndQueue+0x60>)
 800624a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800624c:	4b07      	ldr	r3, [pc, #28]	; (800626c <prvCheckForValidListAndQueue+0x60>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006254:	4b05      	ldr	r3, [pc, #20]	; (800626c <prvCheckForValidListAndQueue+0x60>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	490b      	ldr	r1, [pc, #44]	; (8006288 <prvCheckForValidListAndQueue+0x7c>)
 800625a:	4618      	mov	r0, r3
 800625c:	f7fe fd8e 	bl	8004d7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006260:	f7fd fe52 	bl	8003f08 <vPortExitCritical>
}
 8006264:	bf00      	nop
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20008a54 	.word	0x20008a54
 8006270:	20008a24 	.word	0x20008a24
 8006274:	20008a38 	.word	0x20008a38
 8006278:	20008a4c 	.word	0x20008a4c
 800627c:	20008a50 	.word	0x20008a50
 8006280:	20008b00 	.word	0x20008b00
 8006284:	20008a60 	.word	0x20008a60
 8006288:	08009edc 	.word	0x08009edc

0800628c <Get_OutValue>:
#include "task.h"

static uint16_t out_value = 0;

uint16_t Get_OutValue()
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
	return out_value;
 8006290:	4b03      	ldr	r3, [pc, #12]	; (80062a0 <Get_OutValue+0x14>)
 8006292:	881b      	ldrh	r3, [r3, #0]
}
 8006294:	4618      	mov	r0, r3
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20008b50 	.word	0x20008b50

080062a4 <update_info_from_json>:

void update_info_from_json(char* buff, struct OUTPUTS* out, uint16_t out_n)
{
 80062a4:	b590      	push	{r4, r7, lr}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	4613      	mov	r3, r2
 80062b0:	80fb      	strh	r3, [r7, #6]
	out[out_n].branch_n = -1;
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	f640 1294 	movw	r2, #2452	; 0x994
 80062b8:	fb02 f303 	mul.w	r3, r2, r3
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	4413      	add	r3, r2
 80062c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062c4:	f8a3 2990 	strh.w	r2, [r3, #2448]	; 0x990
	out[out_n].branch_n = json_get_op(buff, out[out_n].par, out[out_n].root_par, out[out_n].tim);
 80062c8:	88fb      	ldrh	r3, [r7, #6]
 80062ca:	f640 1294 	movw	r2, #2452	; 0x994
 80062ce:	fb02 f303 	mul.w	r3, r2, r3
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	18d4      	adds	r4, r2, r3
 80062d6:	88fb      	ldrh	r3, [r7, #6]
 80062d8:	f640 1294 	movw	r2, #2452	; 0x994
 80062dc:	fb02 f303 	mul.w	r3, r2, r3
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 7114 	add.w	r1, r3, #592	; 0x250
 80062e8:	88fb      	ldrh	r3, [r7, #6]
 80062ea:	f640 1294 	movw	r2, #2452	; 0x994
 80062ee:	fb02 f303 	mul.w	r3, r2, r3
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6005 	add.w	r0, r3, #2128	; 0x850
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	f640 1294 	movw	r2, #2452	; 0x994
 8006300:	fb02 f303 	mul.w	r3, r2, r3
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	4413      	add	r3, r2
 8006308:	3310      	adds	r3, #16
 800630a:	4602      	mov	r2, r0
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f7fa ffb9 	bl	8001284 <json_get_op>
 8006312:	4603      	mov	r3, r0
 8006314:	b29b      	uxth	r3, r3
 8006316:	f8a4 3990 	strh.w	r3, [r4, #2448]	; 0x990
	map_op_on_root(out[out_n].par, out[out_n].root_par, out[out_n].branch_n);
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	f640 1294 	movw	r2, #2452	; 0x994
 8006320:	fb02 f303 	mul.w	r3, r2, r3
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	4413      	add	r3, r2
 8006328:	f503 7014 	add.w	r0, r3, #592	; 0x250
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	f640 1294 	movw	r2, #2452	; 0x994
 8006332:	fb02 f303 	mul.w	r3, r2, r3
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6105 	add.w	r1, r3, #2128	; 0x850
 800633e:	88fb      	ldrh	r3, [r7, #6]
 8006340:	f640 1294 	movw	r2, #2452	; 0x994
 8006344:	fb02 f303 	mul.w	r3, r2, r3
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	4413      	add	r3, r2
 800634c:	f8b3 3990 	ldrh.w	r3, [r3, #2448]	; 0x990
 8006350:	461a      	mov	r2, r3
 8006352:	f7fa f9db 	bl	800070c <map_op_on_root>
}
 8006356:	bf00      	nop
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	bd90      	pop	{r4, r7, pc}

0800635e <clear_info>:

void clear_info(struct OUTPUTS* out, uint16_t out_n)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b082      	sub	sp, #8
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	460b      	mov	r3, r1
 8006368:	807b      	strh	r3, [r7, #2]
	out[out_n].branch_n = 0;
 800636a:	887b      	ldrh	r3, [r7, #2]
 800636c:	f640 1294 	movw	r2, #2452	; 0x994
 8006370:	fb02 f303 	mul.w	r3, r2, r3
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	4413      	add	r3, r2
 8006378:	2200      	movs	r2, #0
 800637a:	f8a3 2990 	strh.w	r2, [r3, #2448]	; 0x990
	memset(out[out_n].par, 0, sizeof(OP));
 800637e:	887b      	ldrh	r3, [r7, #2]
 8006380:	f640 1294 	movw	r2, #2452	; 0x994
 8006384:	fb02 f303 	mul.w	r3, r2, r3
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	4413      	add	r3, r2
 800638c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006390:	220c      	movs	r2, #12
 8006392:	2100      	movs	r1, #0
 8006394:	4618      	mov	r0, r3
 8006396:	f002 f887 	bl	80084a8 <memset>
	memset(out[out_n].tim, 0, sizeof(TM));
 800639a:	887b      	ldrh	r3, [r7, #2]
 800639c:	f640 1294 	movw	r2, #2452	; 0x994
 80063a0:	fb02 f303 	mul.w	r3, r2, r3
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	4413      	add	r3, r2
 80063a8:	3310      	adds	r3, #16
 80063aa:	2248      	movs	r2, #72	; 0x48
 80063ac:	2100      	movs	r1, #0
 80063ae:	4618      	mov	r0, r3
 80063b0:	f002 f87a 	bl	80084a8 <memset>
	memset(out[out_n].root_par, 0, sizeof(OP_ROOT));
 80063b4:	887b      	ldrh	r3, [r7, #2]
 80063b6:	f640 1294 	movw	r2, #2452	; 0x994
 80063ba:	fb02 f303 	mul.w	r3, r2, r3
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80063c6:	2214      	movs	r2, #20
 80063c8:	2100      	movs	r1, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f002 f86c 	bl	80084a8 <memset>
}
 80063d0:	bf00      	nop
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <BitEngine_task>:

void BitEngine_task( void * pvParameters )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d009      	beq.n	80063fa <BitEngine_task+0x22>
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	60bb      	str	r3, [r7, #8]
 80063f8:	e7fe      	b.n	80063f8 <BitEngine_task+0x20>

    INO_Init();
 80063fa:	f000 f979 	bl	80066f0 <INO_Init>

    for (uint8_t out_n = 0; out_n < 16; ++out_n)
 80063fe:	2300      	movs	r3, #0
 8006400:	73fb      	strb	r3, [r7, #15]
 8006402:	e008      	b.n	8006416 <BitEngine_task+0x3e>
    {
    	clear_info(outputs, out_n);
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	b29b      	uxth	r3, r3
 8006408:	4619      	mov	r1, r3
 800640a:	4833      	ldr	r0, [pc, #204]	; (80064d8 <BitEngine_task+0x100>)
 800640c:	f7ff ffa7 	bl	800635e <clear_info>
    for (uint8_t out_n = 0; out_n < 16; ++out_n)
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	3301      	adds	r3, #1
 8006414:	73fb      	strb	r3, [r7, #15]
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	2b0f      	cmp	r3, #15
 800641a:	d9f3      	bls.n	8006404 <BitEngine_task+0x2c>
    }

    while(1)
    {
    	for (uint8_t i = 0; i < 16; ++i)
 800641c:	2300      	movs	r3, #0
 800641e:	73bb      	strb	r3, [r7, #14]
 8006420:	e052      	b.n	80064c8 <BitEngine_task+0xf0>
    	{
			if (outputs[i].branch_n == 0 || outputs[i].branch_n > 1024)
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	4a2c      	ldr	r2, [pc, #176]	; (80064d8 <BitEngine_task+0x100>)
 8006426:	f640 1194 	movw	r1, #2452	; 0x994
 800642a:	fb01 f303 	mul.w	r3, r1, r3
 800642e:	4413      	add	r3, r2
 8006430:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d042      	beq.n	80064c0 <BitEngine_task+0xe8>
 800643a:	7bbb      	ldrb	r3, [r7, #14]
 800643c:	4a26      	ldr	r2, [pc, #152]	; (80064d8 <BitEngine_task+0x100>)
 800643e:	f640 1194 	movw	r1, #2452	; 0x994
 8006442:	fb01 f303 	mul.w	r3, r1, r3
 8006446:	4413      	add	r3, r2
 8006448:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006452:	d835      	bhi.n	80064c0 <BitEngine_task+0xe8>
			{
				continue;
			}
			start_bit_engine(outputs[i].root_par, outputs[i].branch_n, out_value);
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	f640 1294 	movw	r2, #2452	; 0x994
 800645a:	fb02 f303 	mul.w	r3, r2, r3
 800645e:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8006462:	4a1d      	ldr	r2, [pc, #116]	; (80064d8 <BitEngine_task+0x100>)
 8006464:	1898      	adds	r0, r3, r2
 8006466:	7bbb      	ldrb	r3, [r7, #14]
 8006468:	4a1b      	ldr	r2, [pc, #108]	; (80064d8 <BitEngine_task+0x100>)
 800646a:	f640 1194 	movw	r1, #2452	; 0x994
 800646e:	fb01 f303 	mul.w	r3, r1, r3
 8006472:	4413      	add	r3, r2
 8006474:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 8006478:	8819      	ldrh	r1, [r3, #0]
 800647a:	4b18      	ldr	r3, [pc, #96]	; (80064dc <BitEngine_task+0x104>)
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	f7fa f99a 	bl	80007b8 <start_bit_engine>

			if(outputs[i].root_par[0].result) {
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	4a14      	ldr	r2, [pc, #80]	; (80064d8 <BitEngine_task+0x100>)
 8006488:	f640 1194 	movw	r1, #2452	; 0x994
 800648c:	fb01 f303 	mul.w	r3, r1, r3
 8006490:	4413      	add	r3, r2
 8006492:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00d      	beq.n	80064b8 <BitEngine_task+0xe0>
				out_value |= 1 << i;
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	2201      	movs	r2, #1
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	b21a      	sxth	r2, r3
 80064a6:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <BitEngine_task+0x104>)
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	b21b      	sxth	r3, r3
 80064ac:	4313      	orrs	r3, r2
 80064ae:	b21b      	sxth	r3, r3
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <BitEngine_task+0x104>)
 80064b4:	801a      	strh	r2, [r3, #0]
 80064b6:	e004      	b.n	80064c2 <BitEngine_task+0xea>
			} else {
				out_value &= 0 << i;
 80064b8:	4b08      	ldr	r3, [pc, #32]	; (80064dc <BitEngine_task+0x104>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	e000      	b.n	80064c2 <BitEngine_task+0xea>
				continue;
 80064c0:	bf00      	nop
    	for (uint8_t i = 0; i < 16; ++i)
 80064c2:	7bbb      	ldrb	r3, [r7, #14]
 80064c4:	3301      	adds	r3, #1
 80064c6:	73bb      	strb	r3, [r7, #14]
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	2b0f      	cmp	r3, #15
 80064cc:	d9a9      	bls.n	8006422 <BitEngine_task+0x4a>
			}
		}

    	vTaskDelay(pdMS_TO_TICKS(40));
 80064ce:	2028      	movs	r0, #40	; 0x28
 80064d0:	f7fe fe4e 	bl	8005170 <vTaskDelay>
    	for (uint8_t i = 0; i < 16; ++i)
 80064d4:	e7a2      	b.n	800641c <BitEngine_task+0x44>
 80064d6:	bf00      	nop
 80064d8:	2000a16c 	.word	0x2000a16c
 80064dc:	20008b50 	.word	0x20008b50

080064e0 <BitEngine_TaskInit>:
    }
}


void BitEngine_TaskInit( void )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	607b      	str	r3, [r7, #4]
	xTaskCreate(
 80064ea:	1d3b      	adds	r3, r7, #4
 80064ec:	9301      	str	r3, [sp, #4]
 80064ee:	2304      	movs	r3, #4
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	2301      	movs	r3, #1
 80064f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064f8:	4903      	ldr	r1, [pc, #12]	; (8006508 <BitEngine_TaskInit+0x28>)
 80064fa:	4804      	ldr	r0, [pc, #16]	; (800650c <BitEngine_TaskInit+0x2c>)
 80064fc:	f7fe fcf4 	bl	8004ee8 <xTaskCreate>
					4096,	 						 /* Stack size in words, not bytes. */
                    ( void * ) 1,     			 	 /* Parameter passed into the task. */
                    4,				 				 /* Priority at which the task is created. */
                    &xHandle );   			   	     /* Used to pass out the created task's handle. */

}
 8006500:	bf00      	nop
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	08009ee4 	.word	0x08009ee4
 800650c:	080063d9 	.word	0x080063d9

08006510 <ESP_GetJson>:

const char URL[] = "192.168.1.210";
const uint16_t PORT = 5002;

void ESP_GetJson()
{
 8006510:	b5b0      	push	{r4, r5, r7, lr}
 8006512:	b094      	sub	sp, #80	; 0x50
 8006514:	af02      	add	r7, sp, #8
	const char get_t[] = "GET http://192.168.1.210/test HTTP/1.1\r\nHost: 192.168.1.210\r\n\r\n";
 8006516:	4b1a      	ldr	r3, [pc, #104]	; (8006580 <ESP_GetJson+0x70>)
 8006518:	1d3c      	adds	r4, r7, #4
 800651a:	461d      	mov	r5, r3
 800651c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800651e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006528:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800652c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ESP_SendData(URL, PORT, get_t, sizeof(get_t) - 1, 1);
 8006530:	f241 318a 	movw	r1, #5002	; 0x138a
 8006534:	1d3a      	adds	r2, r7, #4
 8006536:	2301      	movs	r3, #1
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	233f      	movs	r3, #63	; 0x3f
 800653c:	4811      	ldr	r0, [pc, #68]	; (8006584 <ESP_GetJson+0x74>)
 800653e:	f7fb fc3d 	bl	8001dbc <ESP_SendData>
	vTaskDelay(pdMS_TO_TICKS(1000));
 8006542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006546:	f7fe fe13 	bl	8005170 <vTaskDelay>

	char* ptr = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	647b      	str	r3, [r7, #68]	; 0x44
	if( (ptr = strstr(ESP_GetRxData(), "{")) != NULL )
 800654e:	f7fb fb87 	bl	8001c60 <ESP_GetRxData>
 8006552:	4603      	mov	r3, r0
 8006554:	217b      	movs	r1, #123	; 0x7b
 8006556:	4618      	mov	r0, r3
 8006558:	f001 ffd2 	bl	8008500 <strchr>
 800655c:	6478      	str	r0, [r7, #68]	; 0x44
 800655e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006560:	2b00      	cmp	r3, #0
 8006562:	d008      	beq.n	8006576 <ESP_GetJson+0x66>
	{
		clear_info(outputs, 0);
 8006564:	2100      	movs	r1, #0
 8006566:	4808      	ldr	r0, [pc, #32]	; (8006588 <ESP_GetJson+0x78>)
 8006568:	f7ff fef9 	bl	800635e <clear_info>
		update_info_from_json(ptr, outputs, 0);
 800656c:	2200      	movs	r2, #0
 800656e:	4906      	ldr	r1, [pc, #24]	; (8006588 <ESP_GetJson+0x78>)
 8006570:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006572:	f7ff fe97 	bl	80062a4 <update_info_from_json>
	}
}
 8006576:	bf00      	nop
 8006578:	3748      	adds	r7, #72	; 0x48
 800657a:	46bd      	mov	sp, r7
 800657c:	bdb0      	pop	{r4, r5, r7, pc}
 800657e:	bf00      	nop
 8006580:	08009ef4 	.word	0x08009ef4
 8006584:	0800a07c 	.word	0x0800a07c
 8006588:	2000a16c 	.word	0x2000a16c

0800658c <ESP_UpdateTime>:

void ESP_UpdateTime()
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b0a0      	sub	sp, #128	; 0x80
 8006590:	af02      	add	r7, sp, #8
	const char get_t[] = "GET http://192.168.1.210/timestamp HTTP/1.1\r\nHost: 192.168.1.210\r\n\r\n";
 8006592:	4a2b      	ldr	r2, [pc, #172]	; (8006640 <ESP_UpdateTime+0xb4>)
 8006594:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006598:	4611      	mov	r1, r2
 800659a:	2245      	movs	r2, #69	; 0x45
 800659c:	4618      	mov	r0, r3
 800659e:	f001 ff78 	bl	8008492 <memcpy>
	ESP_SendData(URL, PORT, get_t, sizeof(get_t) - 1, 1);
 80065a2:	f241 318a 	movw	r1, #5002	; 0x138a
 80065a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80065aa:	2301      	movs	r3, #1
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	2344      	movs	r3, #68	; 0x44
 80065b0:	4824      	ldr	r0, [pc, #144]	; (8006644 <ESP_UpdateTime+0xb8>)
 80065b2:	f7fb fc03 	bl	8001dbc <ESP_SendData>
	vTaskDelay(pdMS_TO_TICKS(1000));
 80065b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065ba:	f7fe fdd9 	bl	8005170 <vTaskDelay>

	char* ptr_tm = NULL;
 80065be:	2300      	movs	r3, #0
 80065c0:	677b      	str	r3, [r7, #116]	; 0x74
	char* ptr_tz = NULL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	673b      	str	r3, [r7, #112]	; 0x70
	if( (ptr_tm = strstr(ESP_GetRxData(), "\"tm:")) != NULL
 80065c6:	f7fb fb4b 	bl	8001c60 <ESP_GetRxData>
 80065ca:	4603      	mov	r3, r0
 80065cc:	491e      	ldr	r1, [pc, #120]	; (8006648 <ESP_UpdateTime+0xbc>)
 80065ce:	4618      	mov	r0, r3
 80065d0:	f001 ffbe 	bl	8008550 <strstr>
 80065d4:	6778      	str	r0, [r7, #116]	; 0x74
 80065d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d02d      	beq.n	8006638 <ESP_UpdateTime+0xac>
	 && (ptr_tz = strstr(ESP_GetRxData(),  ",tz:")) != NULL )
 80065dc:	f7fb fb40 	bl	8001c60 <ESP_GetRxData>
 80065e0:	4603      	mov	r3, r0
 80065e2:	491a      	ldr	r1, [pc, #104]	; (800664c <ESP_UpdateTime+0xc0>)
 80065e4:	4618      	mov	r0, r3
 80065e6:	f001 ffb3 	bl	8008550 <strstr>
 80065ea:	6738      	str	r0, [r7, #112]	; 0x70
 80065ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d022      	beq.n	8006638 <ESP_UpdateTime+0xac>
	{
		struct tm tmp;
		long tm = strtol(ptr_tm + 4, NULL, 10);
 80065f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065f4:	3304      	adds	r3, #4
 80065f6:	220a      	movs	r2, #10
 80065f8:	2100      	movs	r1, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f002 f856 	bl	80086ac <strtol>
 8006600:	4603      	mov	r3, r0
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
		int8_t tz = strtol(ptr_tz + 4, NULL, 10);
 8006604:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006606:	3304      	adds	r3, #4
 8006608:	220a      	movs	r2, #10
 800660a:	2100      	movs	r1, #0
 800660c:	4618      	mov	r0, r3
 800660e:	f002 f84d 	bl	80086ac <strtol>
 8006612:	4603      	mov	r3, r0
 8006614:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		(void) localtime_r((time_t *)&tm, &tmp);
 8006618:	463a      	mov	r2, r7
 800661a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800661e:	4611      	mov	r1, r2
 8006620:	4618      	mov	r0, r3
 8006622:	f001 fe43 	bl	80082ac <localtime_r>
		tmp.tm_hour += tz;
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800662c:	4413      	add	r3, r2
 800662e:	60bb      	str	r3, [r7, #8]
		RTC_SetTime(&tmp);
 8006630:	463b      	mov	r3, r7
 8006632:	4618      	mov	r0, r3
 8006634:	f001 fc86 	bl	8007f44 <RTC_SetTime>
	}
}
 8006638:	bf00      	nop
 800663a:	3778      	adds	r7, #120	; 0x78
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	08009f44 	.word	0x08009f44
 8006644:	0800a07c 	.word	0x0800a07c
 8006648:	08009f34 	.word	0x08009f34
 800664c:	08009f3c 	.word	0x08009f3c

08006650 <ESP_Task>:

	ESP_SendData(URL, PORT, buff, sizeof(buff) - 1, 1);
}

void ESP_Task( void * pvParameters )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d009      	beq.n	8006672 <ESP_Task+0x22>
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	e7fe      	b.n	8006670 <ESP_Task+0x20>

    ESP_Init(vTaskDelay);
 8006672:	480a      	ldr	r0, [pc, #40]	; (800669c <ESP_Task+0x4c>)
 8006674:	f7fb fa78 	bl	8001b68 <ESP_Init>

    ESP_SetMode(ESP_MODE_BOTH);
 8006678:	2003      	movs	r0, #3
 800667a:	f7fb fafb 	bl	8001c74 <ESP_SetMode>
    ESP_SetCipmuxZero();
 800667e:	f7fb fb39 	bl	8001cf4 <ESP_SetCipmuxZero>
    ESP_SetParamsSoftAP("DontTouchAnything", "save_809");
 8006682:	4907      	ldr	r1, [pc, #28]	; (80066a0 <ESP_Task+0x50>)
 8006684:	4807      	ldr	r0, [pc, #28]	; (80066a4 <ESP_Task+0x54>)
 8006686:	f7fb fb63 	bl	8001d50 <ESP_SetParamsSoftAP>

    ESP_UpdateTime();
 800668a:	f7ff ff7f 	bl	800658c <ESP_UpdateTime>

    while(1)
    {
    	ESP_GetJson();
 800668e:	f7ff ff3f 	bl	8006510 <ESP_GetJson>
    	vTaskDelay(pdMS_TO_TICKS(1000));
 8006692:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006696:	f7fe fd6b 	bl	8005170 <vTaskDelay>
    	ESP_GetJson();
 800669a:	e7f8      	b.n	800668e <ESP_Task+0x3e>
 800669c:	08005171 	.word	0x08005171
 80066a0:	0800a004 	.word	0x0800a004
 80066a4:	0800a010 	.word	0x0800a010

080066a8 <ESP_TaskInit>:
    }
}

void ESP_TaskInit( void )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 80066ae:	2300      	movs	r3, #0
 80066b0:	607b      	str	r3, [r7, #4]
    xTaskCreate(
 80066b2:	1d3b      	adds	r3, r7, #4
 80066b4:	9301      	str	r3, [sp, #4]
 80066b6:	2304      	movs	r3, #4
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	2301      	movs	r3, #1
 80066bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066c0:	4903      	ldr	r1, [pc, #12]	; (80066d0 <ESP_TaskInit+0x28>)
 80066c2:	4804      	ldr	r0, [pc, #16]	; (80066d4 <ESP_TaskInit+0x2c>)
 80066c4:	f7fe fc10 	bl	8004ee8 <xTaskCreate>
                    "ESP_Task",    				 /* Text name for the task. */
					2048,	 					 /* Stack size in words, not bytes. */
                    ( void * ) 1,     		 	 /* Parameter passed into the task. */
                    4,				 			 /* Priority at which the task is created. */
                    &xHandle );   		   	     /* Used to pass out the created task's handle. */
}
 80066c8:	bf00      	nop
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	0800a024 	.word	0x0800a024
 80066d4:	08006651 	.word	0x08006651

080066d8 <LL_GPIO_ReadInputPort>:
  * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	691b      	ldr	r3, [r3, #16]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <INO_Init>:
/*
 * INO - PE8-PE15 inputs pins
 */

void INO_Init()
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066f6:	463b      	mov	r3, r7
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	605a      	str	r2, [r3, #4]
 80066fe:	609a      	str	r2, [r3, #8]
 8006700:	60da      	str	r2, [r3, #12]
 8006702:	611a      	str	r2, [r3, #16]
 8006704:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_8 || LL_GPIO_PIN_9 || LL_GPIO_PIN_10 || LL_GPIO_PIN_11
 8006706:	2301      	movs	r3, #1
 8006708:	603b      	str	r3, [r7, #0]
					 || LL_GPIO_PIN_12 || LL_GPIO_PIN_13 || LL_GPIO_PIN_14 || LL_GPIO_PIN_15;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800670a:	2300      	movs	r3, #0
 800670c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800670e:	2302      	movs	r3, #2
 8006710:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006712:	463b      	mov	r3, r7
 8006714:	4619      	mov	r1, r3
 8006716:	4803      	ldr	r0, [pc, #12]	; (8006724 <INO_Init+0x34>)
 8006718:	f7fc f8df 	bl	80028da <LL_GPIO_Init>
}
 800671c:	bf00      	nop
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	40021000 	.word	0x40021000

08006728 <INO_GetValue>:

uint8_t INO_GetValue(uint8_t pin)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	4603      	mov	r3, r0
 8006730:	71fb      	strb	r3, [r7, #7]
	return LL_GPIO_ReadInputPort(GPIOE) & (1 << pin);
 8006732:	4808      	ldr	r0, [pc, #32]	; (8006754 <INO_GetValue+0x2c>)
 8006734:	f7ff ffd0 	bl	80066d8 <LL_GPIO_ReadInputPort>
 8006738:	4603      	mov	r3, r0
 800673a:	b2da      	uxtb	r2, r3
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	2101      	movs	r1, #1
 8006740:	fa01 f303 	lsl.w	r3, r1, r3
 8006744:	b2db      	uxtb	r3, r3
 8006746:	4013      	ands	r3, r2
 8006748:	b2db      	uxtb	r3, r3
}
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40021000 	.word	0x40021000

08006758 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	619a      	str	r2, [r3, #24]
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	041a      	lsls	r2, r3, #16
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	619a      	str	r2, [r3, #24]
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
	...

08006794 <BoardLED_Init>:
#include "FreeRTOSConfig.h"
#include "FreeRTOS.h"
#include "task.h"

static void BoardLED_Init()
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800679a:	463b      	mov	r3, r7
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	605a      	str	r2, [r3, #4]
 80067a2:	609a      	str	r2, [r3, #8]
 80067a4:	60da      	str	r2, [r3, #12]
 80067a6:	611a      	str	r2, [r3, #16]
 80067a8:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80067aa:	2302      	movs	r3, #2
 80067ac:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80067ae:	2301      	movs	r3, #1
 80067b0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80067b2:	2302      	movs	r3, #2
 80067b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80067b6:	2301      	movs	r3, #1
 80067b8:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067ba:	463b      	mov	r3, r7
 80067bc:	4619      	mov	r1, r3
 80067be:	4803      	ldr	r0, [pc, #12]	; (80067cc <BoardLED_Init+0x38>)
 80067c0:	f7fc f88b 	bl	80028da <LL_GPIO_Init>
}
 80067c4:	bf00      	nop
 80067c6:	3718      	adds	r7, #24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	40020000 	.word	0x40020000

080067d0 <BoardLED_Set>:

static void BoardLED_Set(uint8_t val)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	71fb      	strb	r3, [r7, #7]
	if(val) {
 80067da:	79fb      	ldrb	r3, [r7, #7]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d004      	beq.n	80067ea <BoardLED_Set+0x1a>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 80067e0:	2102      	movs	r1, #2
 80067e2:	4806      	ldr	r0, [pc, #24]	; (80067fc <BoardLED_Set+0x2c>)
 80067e4:	f7ff ffb8 	bl	8006758 <LL_GPIO_SetOutputPin>
	} else {
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
	}
}
 80067e8:	e003      	b.n	80067f2 <BoardLED_Set+0x22>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 80067ea:	2102      	movs	r1, #2
 80067ec:	4803      	ldr	r0, [pc, #12]	; (80067fc <BoardLED_Set+0x2c>)
 80067ee:	f7ff ffc1 	bl	8006774 <LL_GPIO_ResetOutputPin>
}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40020000 	.word	0x40020000

08006800 <Led_Task>:

void Led_Task( void * pvParameters )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d009      	beq.n	8006822 <Led_Task+0x22>
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	e7fe      	b.n	8006820 <Led_Task+0x20>

    BoardLED_Init();
 8006822:	f7ff ffb7 	bl	8006794 <BoardLED_Init>
    while(1)
    {
    	BoardLED_Set(1);
 8006826:	2001      	movs	r0, #1
 8006828:	f7ff ffd2 	bl	80067d0 <BoardLED_Set>
    	vTaskDelay(pdMS_TO_TICKS(500));
 800682c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006830:	f7fe fc9e 	bl	8005170 <vTaskDelay>
    	BoardLED_Set(0);
 8006834:	2000      	movs	r0, #0
 8006836:	f7ff ffcb 	bl	80067d0 <BoardLED_Set>
    	vTaskDelay(pdMS_TO_TICKS(500));
 800683a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800683e:	f7fe fc97 	bl	8005170 <vTaskDelay>
    	BoardLED_Set(1);
 8006842:	e7f0      	b.n	8006826 <Led_Task+0x26>

08006844 <Led_TaskInit>:
    }
}

void Led_TaskInit( void )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af02      	add	r7, sp, #8
	//BaseType_t xReturned;
	TaskHandle_t xHandle = NULL;
 800684a:	2300      	movs	r3, #0
 800684c:	607b      	str	r3, [r7, #4]

    //xReturned =
	xTaskCreate(
 800684e:	1d3b      	adds	r3, r7, #4
 8006850:	9301      	str	r3, [sp, #4]
 8006852:	2304      	movs	r3, #4
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	2301      	movs	r3, #1
 8006858:	2280      	movs	r2, #128	; 0x80
 800685a:	4904      	ldr	r1, [pc, #16]	; (800686c <Led_TaskInit+0x28>)
 800685c:	4804      	ldr	r0, [pc, #16]	; (8006870 <Led_TaskInit+0x2c>)
 800685e:	f7fe fb43 	bl	8004ee8 <xTaskCreate>
                    "Led_Task",    				 /* Text name for the task. */
					128,	 					 /* Stack size in words, not bytes. */
                    ( void * ) 1,     		 	 /* Parameter passed into the task. */
                    4,				 			 /* Priority at which the task is created. */
                    &xHandle );   		   	     /* Used to pass out the created task's handle. */
}
 8006862:	bf00      	nop
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	0800a030 	.word	0x0800a030
 8006870:	08006801 	.word	0x08006801

08006874 <LL_SPI_Enable>:
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	601a      	str	r2, [r3, #0]
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <LL_SPI_SetStandard>:
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f023 0210 	bic.w	r2, r3, #16
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	431a      	orrs	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	605a      	str	r2, [r3, #4]
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	330c      	adds	r3, #12
 80068ca:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	78fa      	ldrb	r2, [r7, #3]
 80068d0:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80068d2:	bf00      	nop
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <LL_GPIO_SetOutputPin>:
{
 80068de:	b480      	push	{r7}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	619a      	str	r2, [r3, #24]
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <LL_GPIO_ResetOutputPin>:
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	041a      	lsls	r2, r3, #16
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	619a      	str	r2, [r3, #24]
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <SPI2_Init>:
#include "FreeRTOS.h"
#include "task.h"


void SPI2_Init(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b090      	sub	sp, #64	; 0x40
 800691c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800691e:	f107 0318 	add.w	r3, r7, #24
 8006922:	2228      	movs	r2, #40	; 0x28
 8006924:	2100      	movs	r1, #0
 8006926:	4618      	mov	r0, r3
 8006928:	f001 fdbe 	bl	80084a8 <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800692c:	463b      	mov	r3, r7
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	605a      	str	r2, [r3, #4]
 8006934:	609a      	str	r2, [r3, #8]
 8006936:	60da      	str	r2, [r3, #12]
 8006938:	611a      	str	r2, [r3, #16]
 800693a:	615a      	str	r2, [r3, #20]
	/**SPI2 GPIO Configuration
	PC2   ------> SPI2_MISO
	PC3   ------> SPI2_MOSI
	PB13  ------> SPI2_SCK
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800693c:	230c      	movs	r3, #12
 800693e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006940:	2302      	movs	r3, #2
 8006942:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006944:	2303      	movs	r3, #3
 8006946:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006948:	2300      	movs	r3, #0
 800694a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800694c:	2300      	movs	r3, #0
 800694e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8006950:	2305      	movs	r3, #5
 8006952:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006954:	463b      	mov	r3, r7
 8006956:	4619      	mov	r1, r3
 8006958:	481d      	ldr	r0, [pc, #116]	; (80069d0 <SPI2_Init+0xb8>)
 800695a:	f7fb ffbe 	bl	80028da <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800695e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006962:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006964:	2302      	movs	r3, #2
 8006966:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006968:	2303      	movs	r3, #3
 800696a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800696c:	2300      	movs	r3, #0
 800696e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006970:	2300      	movs	r3, #0
 8006972:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8006974:	2305      	movs	r3, #5
 8006976:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006978:	463b      	mov	r3, r7
 800697a:	4619      	mov	r1, r3
 800697c:	4815      	ldr	r0, [pc, #84]	; (80069d4 <SPI2_Init+0xbc>)
 800697e:	f7fb ffac 	bl	80028da <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8006982:	2300      	movs	r3, #0
 8006984:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8006986:	f44f 7382 	mov.w	r3, #260	; 0x104
 800698a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800698c:	2300      	movs	r3, #0
 800698e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8006990:	2300      	movs	r3, #0
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8006994:	2300      	movs	r3, #0
 8006996:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8006998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800699c:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800699e:	2310      	movs	r3, #16
 80069a0:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80069a2:	2300      	movs	r3, #0
 80069a4:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80069a6:	2300      	movs	r3, #0
 80069a8:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80069aa:	230a      	movs	r3, #10
 80069ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(SPI2, &SPI_InitStruct);
 80069ae:	f107 0318 	add.w	r3, r7, #24
 80069b2:	4619      	mov	r1, r3
 80069b4:	4808      	ldr	r0, [pc, #32]	; (80069d8 <SPI2_Init+0xc0>)
 80069b6:	f7fc fc8e 	bl	80032d6 <LL_SPI_Init>
	LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80069ba:	2100      	movs	r1, #0
 80069bc:	4806      	ldr	r0, [pc, #24]	; (80069d8 <SPI2_Init+0xc0>)
 80069be:	f7ff ff69 	bl	8006894 <LL_SPI_SetStandard>
	LL_SPI_Enable(SPI2);
 80069c2:	4805      	ldr	r0, [pc, #20]	; (80069d8 <SPI2_Init+0xc0>)
 80069c4:	f7ff ff56 	bl	8006874 <LL_SPI_Enable>
}
 80069c8:	bf00      	nop
 80069ca:	3740      	adds	r7, #64	; 0x40
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	40020800 	.word	0x40020800
 80069d4:	40020400 	.word	0x40020400
 80069d8:	40003800 	.word	0x40003800

080069dc <SPI2_SendByte>:

static void SPI2_SendByte(uint8_t byte)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	71fb      	strb	r3, [r7, #7]
	while (!(SPI2->SR & SPI_SR_TXE));
 80069e6:	bf00      	nop
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <SPI2_SendByte+0x38>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0f9      	beq.n	80069e8 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(SPI2, byte);
 80069f4:	79fb      	ldrb	r3, [r7, #7]
 80069f6:	4619      	mov	r1, r3
 80069f8:	4806      	ldr	r0, [pc, #24]	; (8006a14 <SPI2_SendByte+0x38>)
 80069fa:	f7ff ff5e 	bl	80068ba <LL_SPI_TransmitData8>
	while (SPI2->SR & SPI_SR_BSY);
 80069fe:	bf00      	nop
 8006a00:	4b04      	ldr	r3, [pc, #16]	; (8006a14 <SPI2_SendByte+0x38>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1f9      	bne.n	8006a00 <SPI2_SendByte+0x24>
}
 8006a0c:	bf00      	nop
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	40003800 	.word	0x40003800

08006a18 <GPIO_Init>:

static void GPIO_Init()
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a1e:	463b      	mov	r3, r7
 8006a20:	2200      	movs	r2, #0
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	605a      	str	r2, [r3, #4]
 8006a26:	609a      	str	r2, [r3, #8]
 8006a28:	60da      	str	r2, [r3, #12]
 8006a2a:	611a      	str	r2, [r3, #16]
 8006a2c:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_1; //ST_CP latchPin
 8006a2e:	2302      	movs	r3, #2
 8006a30:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006a32:	2301      	movs	r3, #1
 8006a34:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006a36:	2301      	movs	r3, #1
 8006a38:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a3e:	463b      	mov	r3, r7
 8006a40:	4619      	mov	r1, r3
 8006a42:	4803      	ldr	r0, [pc, #12]	; (8006a50 <GPIO_Init+0x38>)
 8006a44:	f7fb ff49 	bl	80028da <LL_GPIO_Init>
}
 8006a48:	bf00      	nop
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	40020800 	.word	0x40020800

08006a54 <LATCH_Set>:

static void LATCH_Set(uint8_t val)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	71fb      	strb	r3, [r7, #7]
	if(val) {
 8006a5e:	79fb      	ldrb	r3, [r7, #7]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d004      	beq.n	8006a6e <LATCH_Set+0x1a>
		LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_1);
 8006a64:	2102      	movs	r1, #2
 8006a66:	4806      	ldr	r0, [pc, #24]	; (8006a80 <LATCH_Set+0x2c>)
 8006a68:	f7ff ff39 	bl	80068de <LL_GPIO_SetOutputPin>
	} else {
		LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1);
	}
}
 8006a6c:	e003      	b.n	8006a76 <LATCH_Set+0x22>
		LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1);
 8006a6e:	2102      	movs	r1, #2
 8006a70:	4803      	ldr	r0, [pc, #12]	; (8006a80 <LATCH_Set+0x2c>)
 8006a72:	f7ff ff42 	bl	80068fa <LL_GPIO_ResetOutputPin>
}
 8006a76:	bf00      	nop
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40020800 	.word	0x40020800

08006a84 <Relay_SetValue>:

static void Relay_SetValue(uint16_t out_value)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	80fb      	strh	r3, [r7, #6]
	LATCH_Set(0);
 8006a8e:	2000      	movs	r0, #0
 8006a90:	f7ff ffe0 	bl	8006a54 <LATCH_Set>
	SPI2_SendByte(~(uint8_t)(out_value >> 8));
 8006a94:	88fb      	ldrh	r3, [r7, #6]
 8006a96:	0a1b      	lsrs	r3, r3, #8
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff ff9b 	bl	80069dc <SPI2_SendByte>
	SPI2_SendByte(~(uint8_t)(out_value & 0xFF));
 8006aa6:	88fb      	ldrh	r3, [r7, #6]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	43db      	mvns	r3, r3
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff ff94 	bl	80069dc <SPI2_SendByte>
	LATCH_Set(1);
 8006ab4:	2001      	movs	r0, #1
 8006ab6:	f7ff ffcd 	bl	8006a54 <LATCH_Set>
}
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <Relay_Task>:

void Relay_Task( void * pvParameters )
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b086      	sub	sp, #24
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d009      	beq.n	8006ae4 <Relay_Task+0x22>
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	e7fe      	b.n	8006ae2 <Relay_Task+0x20>

    uint16_t value = 0;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	823b      	strh	r3, [r7, #16]
    uint16_t prev_value = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	82fb      	strh	r3, [r7, #22]

    SPI2_Init();
 8006aec:	f7ff ff14 	bl	8006918 <SPI2_Init>
    GPIO_Init();
 8006af0:	f7ff ff92 	bl	8006a18 <GPIO_Init>

    Relay_SetValue(0x0000);
 8006af4:	2000      	movs	r0, #0
 8006af6:	f7ff ffc5 	bl	8006a84 <Relay_SetValue>

    while(1)
    {
    	value = Get_OutValue();
 8006afa:	f7ff fbc7 	bl	800628c <Get_OutValue>
 8006afe:	4603      	mov	r3, r0
 8006b00:	823b      	strh	r3, [r7, #16]

    	if(prev_value != value)
 8006b02:	8afa      	ldrh	r2, [r7, #22]
 8006b04:	8a3b      	ldrh	r3, [r7, #16]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d03c      	beq.n	8006b84 <Relay_Task+0xc2>
    	{
    		prev_value = value;
 8006b0a:	8a3b      	ldrh	r3, [r7, #16]
 8006b0c:	82fb      	strh	r3, [r7, #22]

    		uint16_t out_value = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	82bb      	strh	r3, [r7, #20]

        	for(uint8_t i = 0; i < 8; ++i)  {
 8006b12:	2300      	movs	r3, #0
 8006b14:	74fb      	strb	r3, [r7, #19]
 8006b16:	e02a      	b.n	8006b6e <Relay_Task+0xac>

        		if( value & (1 << (i * 2) ) )
 8006b18:	8a3a      	ldrh	r2, [r7, #16]
 8006b1a:	7cfb      	ldrb	r3, [r7, #19]
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	fa42 f303 	asr.w	r3, r2, r3
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d009      	beq.n	8006b3e <Relay_Task+0x7c>
        		{
        			out_value |= ( 1 << i );
 8006b2a:	7cfb      	ldrb	r3, [r7, #19]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	b21a      	sxth	r2, r3
 8006b34:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	b21b      	sxth	r3, r3
 8006b3c:	82bb      	strh	r3, [r7, #20]
        		}

        		if( value & (1 << (i * 2 + 1) ) )
 8006b3e:	8a3a      	ldrh	r2, [r7, #16]
 8006b40:	7cfb      	ldrb	r3, [r7, #19]
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	3301      	adds	r3, #1
 8006b46:	fa42 f303 	asr.w	r3, r2, r3
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <Relay_Task+0xa6>
        		{
        			out_value |= ( 1 << (i + 8) );
 8006b52:	7cfb      	ldrb	r3, [r7, #19]
 8006b54:	3308      	adds	r3, #8
 8006b56:	2201      	movs	r2, #1
 8006b58:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5c:	b21a      	sxth	r2, r3
 8006b5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	b21b      	sxth	r3, r3
 8006b66:	82bb      	strh	r3, [r7, #20]
        	for(uint8_t i = 0; i < 8; ++i)  {
 8006b68:	7cfb      	ldrb	r3, [r7, #19]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	74fb      	strb	r3, [r7, #19]
 8006b6e:	7cfb      	ldrb	r3, [r7, #19]
 8006b70:	2b07      	cmp	r3, #7
 8006b72:	d9d1      	bls.n	8006b18 <Relay_Task+0x56>
        		}
        	}

    		taskENTER_CRITICAL();
 8006b74:	f7fd f99a 	bl	8003eac <vPortEnterCritical>
    		Relay_SetValue(out_value);
 8006b78:	8abb      	ldrh	r3, [r7, #20]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7ff ff82 	bl	8006a84 <Relay_SetValue>
    		taskEXIT_CRITICAL();
 8006b80:	f7fd f9c2 	bl	8003f08 <vPortExitCritical>
    	}

    	vTaskDelay(pdMS_TO_TICKS(40));
 8006b84:	2028      	movs	r0, #40	; 0x28
 8006b86:	f7fe faf3 	bl	8005170 <vTaskDelay>
    	value = Get_OutValue();
 8006b8a:	e7b6      	b.n	8006afa <Relay_Task+0x38>

08006b8c <Relay_TaskInit>:
    }
}

void Relay_TaskInit( void )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af02      	add	r7, sp, #8
	//BaseType_t xReturned;
	TaskHandle_t xHandle = NULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	607b      	str	r3, [r7, #4]

    //xReturned =
	xTaskCreate(
 8006b96:	1d3b      	adds	r3, r7, #4
 8006b98:	9301      	str	r3, [sp, #4]
 8006b9a:	2304      	movs	r3, #4
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	2280      	movs	r2, #128	; 0x80
 8006ba2:	4904      	ldr	r1, [pc, #16]	; (8006bb4 <Relay_TaskInit+0x28>)
 8006ba4:	4804      	ldr	r0, [pc, #16]	; (8006bb8 <Relay_TaskInit+0x2c>)
 8006ba6:	f7fe f99f 	bl	8004ee8 <xTaskCreate>
                    "Relay_Task",    				 /* Text name for the task. */
					128,	 						 /* Stack size in words, not bytes. */
                    ( void * ) 1,     			 	 /* Parameter passed into the task. */
                    4,				 				 /* Priority at which the task is created. */
                    &xHandle );   			   	     /* Used to pass out the created task's handle. */
}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	0800a03c 	.word	0x0800a03c
 8006bb8:	08006ac3 	.word	0x08006ac3

08006bbc <Sensor_ClearList>:
static uint8_t sensor_counter = 0;
static char buff[16] = { 0 };
static f_ptr delay;

void Sensor_ClearList()
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
	sensor_counter = 0;
 8006bc0:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <Sensor_ClearList+0x1c>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	701a      	strb	r2, [r3, #0]
	memset(sensor_list, 0, sizeof(struct SENSOR) * SENSOR_MAX);
 8006bc6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006bca:	2100      	movs	r1, #0
 8006bcc:	4803      	ldr	r0, [pc, #12]	; (8006bdc <Sensor_ClearList+0x20>)
 8006bce:	f001 fc6b 	bl	80084a8 <memset>
}
 8006bd2:	bf00      	nop
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20008b52 	.word	0x20008b52
 8006bdc:	20008ba4 	.word	0x20008ba4

08006be0 <Sensor_Init>:

void Sensor_Init(f_ptr delay_function)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
	UART3_Init(&UART3_rx_data);
 8006be8:	4806      	ldr	r0, [pc, #24]	; (8006c04 <Sensor_Init+0x24>)
 8006bea:	f000 fcad 	bl	8007548 <UART3_Init>
	Sensor_UpdateGpioInit();
 8006bee:	f000 fd11 	bl	8007614 <Sensor_UpdateGpioInit>
	Sensor_ClearList();
 8006bf2:	f7ff ffe3 	bl	8006bbc <Sensor_ClearList>
	delay = delay_function;
 8006bf6:	4a04      	ldr	r2, [pc, #16]	; (8006c08 <Sensor_Init+0x28>)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6013      	str	r3, [r2, #0]
}
 8006bfc:	bf00      	nop
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	20013aac 	.word	0x20013aac
 8006c08:	20008b64 	.word	0x20008b64

08006c0c <Sensor_GPIOUpdateList>:

uint8_t Sensor_GPIOUpdateList()
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
	return Sensor_GpioValue();
 8006c10:	f000 fd1c 	bl	800764c <Sensor_GpioValue>
 8006c14:	4603      	mov	r3, r0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <Sensor_UpdateList>:

void Sensor_UpdateList()
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
	Sensor_ClearList();
 8006c22:	f7ff ffcb 	bl	8006bbc <Sensor_ClearList>

	for(uint32_t addr = 0; addr <= 0xFFFF; ++addr)
 8006c26:	2300      	movs	r3, #0
 8006c28:	607b      	str	r3, [r7, #4]
 8006c2a:	e04f      	b.n	8006ccc <Sensor_UpdateList+0xb0>
	{
		RingBuffClear(&UART3_rx_data);
 8006c2c:	482b      	ldr	r0, [pc, #172]	; (8006cdc <Sensor_UpdateList+0xc0>)
 8006c2e:	f7fb f982 	bl	8001f36 <RingBuffClear>

		sprintf(buff, "%04" PRIx16 "t", (uint16_t)addr);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	461a      	mov	r2, r3
 8006c38:	4929      	ldr	r1, [pc, #164]	; (8006ce0 <Sensor_UpdateList+0xc4>)
 8006c3a:	482a      	ldr	r0, [pc, #168]	; (8006ce4 <Sensor_UpdateList+0xc8>)
 8006c3c:	f001 fc3c 	bl	80084b8 <siprintf>
		UART3_SendData(buff, 5);
 8006c40:	2105      	movs	r1, #5
 8006c42:	4828      	ldr	r0, [pc, #160]	; (8006ce4 <Sensor_UpdateList+0xc8>)
 8006c44:	f000 fd28 	bl	8007698 <UART3_SendData>

		delay(1);
 8006c48:	4b27      	ldr	r3, [pc, #156]	; (8006ce8 <Sensor_UpdateList+0xcc>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	4798      	blx	r3
		char* ptr = NULL;
 8006c50:	2300      	movs	r3, #0
 8006c52:	603b      	str	r3, [r7, #0]
		if( (ptr = strstr(RingBuffGetArray(&UART3_rx_data), "/")) != NULL )
 8006c54:	4821      	ldr	r0, [pc, #132]	; (8006cdc <Sensor_UpdateList+0xc0>)
 8006c56:	f7fb f988 	bl	8001f6a <RingBuffGetArray>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	212f      	movs	r1, #47	; 0x2f
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 fc4e 	bl	8008500 <strchr>
 8006c64:	6038      	str	r0, [r7, #0]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d029      	beq.n	8006cc0 <Sensor_UpdateList+0xa4>
		{
			sensor_list[sensor_counter].addr = addr;
 8006c6c:	4b1f      	ldr	r3, [pc, #124]	; (8006cec <Sensor_UpdateList+0xd0>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	4619      	mov	r1, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	b298      	uxth	r0, r3
 8006c76:	4a1e      	ldr	r2, [pc, #120]	; (8006cf0 <Sensor_UpdateList+0xd4>)
 8006c78:	460b      	mov	r3, r1
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	440b      	add	r3, r1
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	3302      	adds	r3, #2
 8006c84:	4602      	mov	r2, r0
 8006c86:	801a      	strh	r2, [r3, #0]
			sensor_list[sensor_counter].type = (enum SENSOR_TYPE) *(ptr + 1);
 8006c88:	4b18      	ldr	r3, [pc, #96]	; (8006cec <Sensor_UpdateList+0xd0>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	3301      	adds	r3, #1
 8006c92:	7818      	ldrb	r0, [r3, #0]
 8006c94:	4a16      	ldr	r2, [pc, #88]	; (8006cf0 <Sensor_UpdateList+0xd4>)
 8006c96:	460b      	mov	r3, r1
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	440b      	add	r3, r1
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	701a      	strb	r2, [r3, #0]
			sensor_counter++;
 8006ca4:	4b11      	ldr	r3, [pc, #68]	; (8006cec <Sensor_UpdateList+0xd0>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	4b0f      	ldr	r3, [pc, #60]	; (8006cec <Sensor_UpdateList+0xd0>)
 8006cae:	701a      	strb	r2, [r3, #0]
			if(sensor_counter >= 16)
 8006cb0:	4b0e      	ldr	r3, [pc, #56]	; (8006cec <Sensor_UpdateList+0xd0>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b0f      	cmp	r3, #15
 8006cb6:	d903      	bls.n	8006cc0 <Sensor_UpdateList+0xa4>
			{
				UART3_SendData_byte('/');
 8006cb8:	202f      	movs	r0, #47	; 0x2f
 8006cba:	f000 fcd5 	bl	8007668 <UART3_SendData_byte>
				return;
 8006cbe:	e009      	b.n	8006cd4 <Sensor_UpdateList+0xb8>
			}
		}
		UART3_SendData_byte('/');
 8006cc0:	202f      	movs	r0, #47	; 0x2f
 8006cc2:	f000 fcd1 	bl	8007668 <UART3_SendData_byte>
	for(uint32_t addr = 0; addr <= 0xFFFF; ++addr)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	607b      	str	r3, [r7, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cd2:	d3ab      	bcc.n	8006c2c <Sensor_UpdateList+0x10>
	}
}
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20013aac 	.word	0x20013aac
 8006ce0:	0800a048 	.word	0x0800a048
 8006ce4:	20008b54 	.word	0x20008b54
 8006ce8:	20008b64 	.word	0x20008b64
 8006cec:	20008b52 	.word	0x20008b52
 8006cf0:	20008ba4 	.word	0x20008ba4

08006cf4 <Sensor_UpdateValue>:

void Sensor_UpdateValue()
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	71fb      	strb	r3, [r7, #7]
 8006cfe:	e08a      	b.n	8006e16 <Sensor_UpdateValue+0x122>
	{
		if(sensor_list[i].addr == 0) {
 8006d00:	79fa      	ldrb	r2, [r7, #7]
 8006d02:	4949      	ldr	r1, [pc, #292]	; (8006e28 <Sensor_UpdateValue+0x134>)
 8006d04:	4613      	mov	r3, r2
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	4413      	add	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	440b      	add	r3, r1
 8006d0e:	3302      	adds	r3, #2
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d07b      	beq.n	8006e0e <Sensor_UpdateValue+0x11a>
			continue;
		}

		RingBuffClear(&UART3_rx_data);
 8006d16:	4845      	ldr	r0, [pc, #276]	; (8006e2c <Sensor_UpdateValue+0x138>)
 8006d18:	f7fb f90d 	bl	8001f36 <RingBuffClear>

		sprintf(buff, "%04" PRIx16 "v", sensor_list[i].addr);
 8006d1c:	79fa      	ldrb	r2, [r7, #7]
 8006d1e:	4942      	ldr	r1, [pc, #264]	; (8006e28 <Sensor_UpdateValue+0x134>)
 8006d20:	4613      	mov	r3, r2
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	4413      	add	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	440b      	add	r3, r1
 8006d2a:	3302      	adds	r3, #2
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	493f      	ldr	r1, [pc, #252]	; (8006e30 <Sensor_UpdateValue+0x13c>)
 8006d32:	4840      	ldr	r0, [pc, #256]	; (8006e34 <Sensor_UpdateValue+0x140>)
 8006d34:	f001 fbc0 	bl	80084b8 <siprintf>
		UART3_SendData(buff, 5);
 8006d38:	2105      	movs	r1, #5
 8006d3a:	483e      	ldr	r0, [pc, #248]	; (8006e34 <Sensor_UpdateValue+0x140>)
 8006d3c:	f000 fcac 	bl	8007698 <UART3_SendData>

		delay(5);
 8006d40:	4b3d      	ldr	r3, [pc, #244]	; (8006e38 <Sensor_UpdateValue+0x144>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2005      	movs	r0, #5
 8006d46:	4798      	blx	r3
		char* ptr = NULL;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	603b      	str	r3, [r7, #0]
		if( (ptr = strstr(RingBuffGetArray(&UART3_rx_data), "/")) != NULL )
 8006d4c:	4837      	ldr	r0, [pc, #220]	; (8006e2c <Sensor_UpdateValue+0x138>)
 8006d4e:	f7fb f90c 	bl	8001f6a <RingBuffGetArray>
 8006d52:	4603      	mov	r3, r0
 8006d54:	212f      	movs	r1, #47	; 0x2f
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 fbd2 	bl	8008500 <strchr>
 8006d5c:	6038      	str	r0, [r7, #0]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d01c      	beq.n	8006d9e <Sensor_UpdateValue+0xaa>
		{
			sensor_list[i].value = *(ptr + 1) << 24 | *(ptr + 2) << 16 | *(ptr + 3) << 8 | *(ptr + 4);
 8006d64:	79fa      	ldrb	r2, [r7, #7]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	0619      	lsls	r1, r3, #24
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	3302      	adds	r3, #2
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	041b      	lsls	r3, r3, #16
 8006d76:	4319      	orrs	r1, r3
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	3303      	adds	r3, #3
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	430b      	orrs	r3, r1
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	3104      	adds	r1, #4
 8006d86:	7809      	ldrb	r1, [r1, #0]
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	4926      	ldr	r1, [pc, #152]	; (8006e28 <Sensor_UpdateValue+0x134>)
 8006d8e:	4613      	mov	r3, r2
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	440b      	add	r3, r1
 8006d98:	3304      	adds	r3, #4
 8006d9a:	6018      	str	r0, [r3, #0]
 8006d9c:	e033      	b.n	8006e06 <Sensor_UpdateValue+0x112>
		} else {
			if(sensor_list[i].error_counter > REQ_TO_DISABLE)
 8006d9e:	79fa      	ldrb	r2, [r7, #7]
 8006da0:	4921      	ldr	r1, [pc, #132]	; (8006e28 <Sensor_UpdateValue+0x134>)
 8006da2:	4613      	mov	r3, r2
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	440b      	add	r3, r1
 8006dac:	3308      	adds	r3, #8
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b10      	cmp	r3, #16
 8006db2:	d90a      	bls.n	8006dca <Sensor_UpdateValue+0xd6>
			{
				sensor_list[i].addr = 0;
 8006db4:	79fa      	ldrb	r2, [r7, #7]
 8006db6:	491c      	ldr	r1, [pc, #112]	; (8006e28 <Sensor_UpdateValue+0x134>)
 8006db8:	4613      	mov	r3, r2
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	440b      	add	r3, r1
 8006dc2:	3302      	adds	r3, #2
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	801a      	strh	r2, [r3, #0]
 8006dc8:	e01d      	b.n	8006e06 <Sensor_UpdateValue+0x112>
			} else {
				sensor_list[i].value = 0;
 8006dca:	79fa      	ldrb	r2, [r7, #7]
 8006dcc:	4916      	ldr	r1, [pc, #88]	; (8006e28 <Sensor_UpdateValue+0x134>)
 8006dce:	4613      	mov	r3, r2
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	3304      	adds	r3, #4
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]
				sensor_list[i].error_counter++;
 8006dde:	79fa      	ldrb	r2, [r7, #7]
 8006de0:	4911      	ldr	r1, [pc, #68]	; (8006e28 <Sensor_UpdateValue+0x134>)
 8006de2:	4613      	mov	r3, r2
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	3308      	adds	r3, #8
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	3301      	adds	r3, #1
 8006df2:	b2d8      	uxtb	r0, r3
 8006df4:	490c      	ldr	r1, [pc, #48]	; (8006e28 <Sensor_UpdateValue+0x134>)
 8006df6:	4613      	mov	r3, r2
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	440b      	add	r3, r1
 8006e00:	3308      	adds	r3, #8
 8006e02:	4602      	mov	r2, r0
 8006e04:	701a      	strb	r2, [r3, #0]
			}
		}
		UART3_SendData_byte('/');
 8006e06:	202f      	movs	r0, #47	; 0x2f
 8006e08:	f000 fc2e 	bl	8007668 <UART3_SendData_byte>
 8006e0c:	e000      	b.n	8006e10 <Sensor_UpdateValue+0x11c>
			continue;
 8006e0e:	bf00      	nop
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	3301      	adds	r3, #1
 8006e14:	71fb      	strb	r3, [r7, #7]
 8006e16:	79fb      	ldrb	r3, [r7, #7]
 8006e18:	2b1f      	cmp	r3, #31
 8006e1a:	f67f af71 	bls.w	8006d00 <Sensor_UpdateValue+0xc>
	}
}
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20008ba4 	.word	0x20008ba4
 8006e2c:	20013aac 	.word	0x20013aac
 8006e30:	0800a050 	.word	0x0800a050
 8006e34:	20008b54 	.word	0x20008b54
 8006e38:	20008b64 	.word	0x20008b64

08006e3c <Sensor_CheckValue>:

uint8_t Sensor_CheckValue(uint16_t sen_addr, uint32_t value)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	4603      	mov	r3, r0
 8006e44:	6039      	str	r1, [r7, #0]
 8006e46:	80fb      	strh	r3, [r7, #6]
	if(sen_addr == 0xFFFE) {
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d101      	bne.n	8006e56 <Sensor_CheckValue+0x1a>
		return 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	e02c      	b.n	8006eb0 <Sensor_CheckValue+0x74>
	}

	if(sen_addr == 0xFFFF) {
 8006e56:	88fb      	ldrh	r3, [r7, #6]
 8006e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d101      	bne.n	8006e64 <Sensor_CheckValue+0x28>
		return 1;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e025      	b.n	8006eb0 <Sensor_CheckValue+0x74>
	}

	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8006e64:	2300      	movs	r3, #0
 8006e66:	73fb      	strb	r3, [r7, #15]
 8006e68:	e01e      	b.n	8006ea8 <Sensor_CheckValue+0x6c>
	{
		if(sensor_list[i].addr == sen_addr)
 8006e6a:	7bfa      	ldrb	r2, [r7, #15]
 8006e6c:	4913      	ldr	r1, [pc, #76]	; (8006ebc <Sensor_CheckValue+0x80>)
 8006e6e:	4613      	mov	r3, r2
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	4413      	add	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	440b      	add	r3, r1
 8006e78:	3302      	adds	r3, #2
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	88fa      	ldrh	r2, [r7, #6]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d10f      	bne.n	8006ea2 <Sensor_CheckValue+0x66>
		{
			return sensor_list[i].value >= value ? 1 : 0;
 8006e82:	7bfa      	ldrb	r2, [r7, #15]
 8006e84:	490d      	ldr	r1, [pc, #52]	; (8006ebc <Sensor_CheckValue+0x80>)
 8006e86:	4613      	mov	r3, r2
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	440b      	add	r3, r1
 8006e90:	3304      	adds	r3, #4
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	bf2c      	ite	cs
 8006e9a:	2301      	movcs	r3, #1
 8006e9c:	2300      	movcc	r3, #0
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	e006      	b.n	8006eb0 <Sensor_CheckValue+0x74>
	for(uint8_t i = 0; i < SENSOR_MAX; ++i)
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	73fb      	strb	r3, [r7, #15]
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	2b1f      	cmp	r3, #31
 8006eac:	d9dd      	bls.n	8006e6a <Sensor_CheckValue+0x2e>
		}
	}
	return 0;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	20008ba4 	.word	0x20008ba4

08006ec0 <Sensor_task>:
#include "FreeRTOS.h"
#include "task.h"


void Sensor_task( void * pvParameters )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d009      	beq.n	8006ee2 <Sensor_task+0x22>
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	e7fe      	b.n	8006ee0 <Sensor_task+0x20>

	Sensor_Init(vTaskDelay);
 8006ee2:	4809      	ldr	r0, [pc, #36]	; (8006f08 <Sensor_task+0x48>)
 8006ee4:	f7ff fe7c 	bl	8006be0 <Sensor_Init>
	Sensor_UpdateList();
 8006ee8:	f7ff fe98 	bl	8006c1c <Sensor_UpdateList>

	while(1)
	{
		if(Sensor_GPIOUpdateList())
 8006eec:	f7ff fe8e 	bl	8006c0c <Sensor_GPIOUpdateList>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <Sensor_task+0x3a>
		{
			Sensor_UpdateList();
 8006ef6:	f7ff fe91 	bl	8006c1c <Sensor_UpdateList>
		}

		Sensor_UpdateValue();
 8006efa:	f7ff fefb 	bl	8006cf4 <Sensor_UpdateValue>

		vTaskDelay(pdMS_TO_TICKS(40));
 8006efe:	2028      	movs	r0, #40	; 0x28
 8006f00:	f7fe f936 	bl	8005170 <vTaskDelay>
		if(Sensor_GPIOUpdateList())
 8006f04:	e7f2      	b.n	8006eec <Sensor_task+0x2c>
 8006f06:	bf00      	nop
 8006f08:	08005171 	.word	0x08005171

08006f0c <Sensor_TaskInit>:
	}
}

void Sensor_TaskInit( void )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af02      	add	r7, sp, #8
	TaskHandle_t xHandle = NULL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	603b      	str	r3, [r7, #0]

	BaseType_t xReturned =
 8006f16:	463b      	mov	r3, r7
 8006f18:	9301      	str	r3, [sp, #4]
 8006f1a:	2304      	movs	r3, #4
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	2301      	movs	r3, #1
 8006f20:	2280      	movs	r2, #128	; 0x80
 8006f22:	4904      	ldr	r1, [pc, #16]	; (8006f34 <Sensor_TaskInit+0x28>)
 8006f24:	4804      	ldr	r0, [pc, #16]	; (8006f38 <Sensor_TaskInit+0x2c>)
 8006f26:	f7fd ffdf 	bl	8004ee8 <xTaskCreate>
 8006f2a:	6078      	str	r0, [r7, #4]
					128,	 						 /* Stack size in words, not bytes. */
                    ( void * ) 1,     			 	 /* Parameter passed into the task. */
                    4,				 				 /* Priority at which the task is created. */
                    &xHandle );   			   	     /* Used to pass out the created task's handle. */

}
 8006f2c:	bf00      	nop
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	0800a058 	.word	0x0800a058
 8006f38:	08006ec1 	.word	0x08006ec1

08006f3c <__NVIC_GetPriorityGrouping>:
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f40:	4b04      	ldr	r3, [pc, #16]	; (8006f54 <__NVIC_GetPriorityGrouping+0x18>)
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	0a1b      	lsrs	r3, r3, #8
 8006f46:	f003 0307 	and.w	r3, r3, #7
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	e000ed00 	.word	0xe000ed00

08006f58 <__NVIC_EnableIRQ>:
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	db0b      	blt.n	8006f82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f6a:	4909      	ldr	r1, [pc, #36]	; (8006f90 <__NVIC_EnableIRQ+0x38>)
 8006f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f70:	095b      	lsrs	r3, r3, #5
 8006f72:	79fa      	ldrb	r2, [r7, #7]
 8006f74:	f002 021f 	and.w	r2, r2, #31
 8006f78:	2001      	movs	r0, #1
 8006f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8006f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	e000e100 	.word	0xe000e100

08006f94 <__NVIC_SetPriority>:
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	6039      	str	r1, [r7, #0]
 8006f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	db0a      	blt.n	8006fbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fa8:	490d      	ldr	r1, [pc, #52]	; (8006fe0 <__NVIC_SetPriority+0x4c>)
 8006faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	0112      	lsls	r2, r2, #4
 8006fb4:	b2d2      	uxtb	r2, r2
 8006fb6:	440b      	add	r3, r1
 8006fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006fbc:	e00a      	b.n	8006fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fbe:	4909      	ldr	r1, [pc, #36]	; (8006fe4 <__NVIC_SetPriority+0x50>)
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	f003 030f 	and.w	r3, r3, #15
 8006fc6:	3b04      	subs	r3, #4
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	b2d2      	uxtb	r2, r2
 8006fcc:	0112      	lsls	r2, r2, #4
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	440b      	add	r3, r1
 8006fd2:	761a      	strb	r2, [r3, #24]
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	e000e100 	.word	0xe000e100
 8006fe4:	e000ed00 	.word	0xe000ed00

08006fe8 <NVIC_EncodePriority>:
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b089      	sub	sp, #36	; 0x24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	f1c3 0307 	rsb	r3, r3, #7
 8007002:	2b04      	cmp	r3, #4
 8007004:	bf28      	it	cs
 8007006:	2304      	movcs	r3, #4
 8007008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	3304      	adds	r3, #4
 800700e:	2b06      	cmp	r3, #6
 8007010:	d902      	bls.n	8007018 <NVIC_EncodePriority+0x30>
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	3b03      	subs	r3, #3
 8007016:	e000      	b.n	800701a <NVIC_EncodePriority+0x32>
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800701c:	2201      	movs	r2, #1
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	fa02 f303 	lsl.w	r3, r2, r3
 8007024:	1e5a      	subs	r2, r3, #1
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	401a      	ands	r2, r3
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800702e:	2101      	movs	r1, #1
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	fa01 f303 	lsl.w	r3, r1, r3
 8007036:	1e59      	subs	r1, r3, #1
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800703c:	4313      	orrs	r3, r2
}
 800703e:	4618      	mov	r0, r3
 8007040:	3724      	adds	r7, #36	; 0x24
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <LL_USART_Enable>:
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60da      	str	r2, [r3, #12]
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	615a      	str	r2, [r3, #20]
}
 800708a:	bf00      	nop
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	bf0c      	ite	eq
 80070aa:	2301      	moveq	r3, #1
 80070ac:	2300      	movne	r3, #0
 80070ae:	b2db      	uxtb	r3, r3
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070cc:	2b40      	cmp	r3, #64	; 0x40
 80070ce:	bf0c      	ite	eq
 80070d0:	2301      	moveq	r3, #1
 80070d2:	2300      	movne	r3, #0
 80070d4:	b2db      	uxtb	r3, r3
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f06f 0220 	mvn.w	r2, #32
 80070f0:	601a      	str	r2, [r3, #0]
}
 80070f2:	bf00      	nop
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f043 0220 	orr.w	r2, r3, #32
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	60da      	str	r2, [r3, #12]
}
 8007112:	bf00      	nop
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	b2db      	uxtb	r3, r3
}
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	460b      	mov	r3, r1
 8007142:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007144:	78fa      	ldrb	r2, [r7, #3]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	605a      	str	r2, [r3, #4]
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
	...

08007158 <UART2_Init>:
#include "stm32f4xx_ll_utils.h"

static struct ring_buffer_struct* UART_rx_data;

void UART2_Init(struct ring_buffer_struct* rx_data)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b090      	sub	sp, #64	; 0x40
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8007160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	605a      	str	r2, [r3, #4]
 800716a:	609a      	str	r2, [r3, #8]
 800716c:	60da      	str	r2, [r3, #12]
 800716e:	611a      	str	r2, [r3, #16]
 8007170:	615a      	str	r2, [r3, #20]
 8007172:	619a      	str	r2, [r3, #24]
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007174:	f107 030c 	add.w	r3, r7, #12
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	605a      	str	r2, [r3, #4]
 800717e:	609a      	str	r2, [r3, #8]
 8007180:	60da      	str	r2, [r3, #12]
 8007182:	611a      	str	r2, [r3, #16]
 8007184:	615a      	str	r2, [r3, #20]

	/**USART2 GPIO Configuration
	PA3   ------> USART2_RX
	PD5   ------> USART2_TX
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8007186:	2308      	movs	r3, #8
 8007188:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800718a:	2302      	movs	r3, #2
 800718c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800718e:	2303      	movs	r3, #3
 8007190:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007192:	2300      	movs	r3, #0
 8007194:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007196:	2300      	movs	r3, #0
 8007198:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800719a:	2307      	movs	r3, #7
 800719c:	623b      	str	r3, [r7, #32]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800719e:	f107 030c 	add.w	r3, r7, #12
 80071a2:	4619      	mov	r1, r3
 80071a4:	4824      	ldr	r0, [pc, #144]	; (8007238 <UART2_Init+0xe0>)
 80071a6:	f7fb fb98 	bl	80028da <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80071aa:	2320      	movs	r3, #32
 80071ac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80071ae:	2302      	movs	r3, #2
 80071b0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80071b2:	2303      	movs	r3, #3
 80071b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80071ba:	2300      	movs	r3, #0
 80071bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80071be:	2307      	movs	r3, #7
 80071c0:	623b      	str	r3, [r7, #32]
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80071c2:	f107 030c 	add.w	r3, r7, #12
 80071c6:	4619      	mov	r1, r3
 80071c8:	481c      	ldr	r0, [pc, #112]	; (800723c <UART2_Init+0xe4>)
 80071ca:	f7fb fb86 	bl	80028da <LL_GPIO_Init>

	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80071ce:	f7ff feb5 	bl	8006f3c <__NVIC_GetPriorityGrouping>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2200      	movs	r2, #0
 80071d6:	2100      	movs	r1, #0
 80071d8:	4618      	mov	r0, r3
 80071da:	f7ff ff05 	bl	8006fe8 <NVIC_EncodePriority>
 80071de:	4603      	mov	r3, r0
 80071e0:	4619      	mov	r1, r3
 80071e2:	2026      	movs	r0, #38	; 0x26
 80071e4:	f7ff fed6 	bl	8006f94 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 80071e8:	2026      	movs	r0, #38	; 0x26
 80071ea:	f7ff feb5 	bl	8006f58 <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 115200;
 80071ee:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80071f2:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80071f4:	2300      	movs	r3, #0
 80071f6:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80071f8:	2300      	movs	r3, #0
 80071fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80071fc:	2300      	movs	r3, #0
 80071fe:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007200:	230c      	movs	r3, #12
 8007202:	637b      	str	r3, [r7, #52]	; 0x34
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007204:	2300      	movs	r3, #0
 8007206:	63bb      	str	r3, [r7, #56]	; 0x38
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007208:	2300      	movs	r3, #0
 800720a:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_USART_Init(USART2, &USART_InitStruct);
 800720c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007210:	4619      	mov	r1, r3
 8007212:	480b      	ldr	r0, [pc, #44]	; (8007240 <UART2_Init+0xe8>)
 8007214:	f7fc fa62 	bl	80036dc <LL_USART_Init>
	LL_USART_EnableIT_RXNE(USART2);
 8007218:	4809      	ldr	r0, [pc, #36]	; (8007240 <UART2_Init+0xe8>)
 800721a:	f7ff ff70 	bl	80070fe <LL_USART_EnableIT_RXNE>
	LL_USART_ConfigAsyncMode(USART2);
 800721e:	4808      	ldr	r0, [pc, #32]	; (8007240 <UART2_Init+0xe8>)
 8007220:	f7ff ff23 	bl	800706a <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART2);
 8007224:	4806      	ldr	r0, [pc, #24]	; (8007240 <UART2_Init+0xe8>)
 8007226:	f7ff ff10 	bl	800704a <LL_USART_Enable>

	UART_rx_data = rx_data;
 800722a:	4a06      	ldr	r2, [pc, #24]	; (8007244 <UART2_Init+0xec>)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6013      	str	r3, [r2, #0]
}
 8007230:	bf00      	nop
 8007232:	3740      	adds	r7, #64	; 0x40
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	40020000 	.word	0x40020000
 800723c:	40020c00 	.word	0x40020c00
 8007240:	40004400 	.word	0x40004400
 8007244:	20008b68 	.word	0x20008b68

08007248 <UART2_SendData_byte>:

void UART2_SendData_byte(char data)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	4603      	mov	r3, r0
 8007250:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART2, data);
 8007252:	79fb      	ldrb	r3, [r7, #7]
 8007254:	4619      	mov	r1, r3
 8007256:	4807      	ldr	r0, [pc, #28]	; (8007274 <UART2_SendData_byte+0x2c>)
 8007258:	f7ff ff6e 	bl	8007138 <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TC(USART2));
 800725c:	bf00      	nop
 800725e:	4805      	ldr	r0, [pc, #20]	; (8007274 <UART2_SendData_byte+0x2c>)
 8007260:	f7ff ff2c 	bl	80070bc <LL_USART_IsActiveFlag_TC>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0f9      	beq.n	800725e <UART2_SendData_byte+0x16>
}
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	40004400 	.word	0x40004400

08007278 <UART2_SendData>:

void UART2_SendData(char* data, uint32_t data_length)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < data_length; ++i)
 8007282:	2300      	movs	r3, #0
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	e009      	b.n	800729c <UART2_SendData+0x24>
	{
		UART2_SendData_byte(data[i]);
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4413      	add	r3, r2
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	4618      	mov	r0, r3
 8007292:	f7ff ffd9 	bl	8007248 <UART2_SendData_byte>
	for(uint32_t i = 0; i < data_length; ++i)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3301      	adds	r3, #1
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d3f1      	bcc.n	8007288 <UART2_SendData+0x10>
	}
}
 80072a4:	bf00      	nop
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <UART2_CharReception_Callback>:

void UART2_CharReception_Callback(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
	__IO uint8_t received_char;
	received_char = LL_USART_ReceiveData8(USART2);
 80072b2:	4808      	ldr	r0, [pc, #32]	; (80072d4 <UART2_CharReception_Callback+0x28>)
 80072b4:	f7ff ff33 	bl	800711e <LL_USART_ReceiveData8>
 80072b8:	4603      	mov	r3, r0
 80072ba:	71fb      	strb	r3, [r7, #7]

	RingBuffPush(UART_rx_data, (char)received_char);
 80072bc:	4b06      	ldr	r3, [pc, #24]	; (80072d8 <UART2_CharReception_Callback+0x2c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	79fa      	ldrb	r2, [r7, #7]
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	4611      	mov	r1, r2
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fa fe17 	bl	8001efa <RingBuffPush>
}
 80072cc:	bf00      	nop
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	40004400 	.word	0x40004400
 80072d8:	20008b68 	.word	0x20008b68

080072dc <Error_Callback>:

static void Error_Callback(void)
{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
	//dummy
}
 80072e0:	bf00      	nop
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
	...

080072ec <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART2)) {
 80072f0:	4807      	ldr	r0, [pc, #28]	; (8007310 <USART2_IRQHandler+0x24>)
 80072f2:	f7ff fed0 	bl	8007096 <LL_USART_IsActiveFlag_RXNE>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <USART2_IRQHandler+0x1c>
		UART2_CharReception_Callback();
 80072fc:	f7ff ffd6 	bl	80072ac <UART2_CharReception_Callback>
		LL_USART_ClearFlag_RXNE(USART2);
 8007300:	4803      	ldr	r0, [pc, #12]	; (8007310 <USART2_IRQHandler+0x24>)
 8007302:	f7ff feee 	bl	80070e2 <LL_USART_ClearFlag_RXNE>
	} else {
		Error_Callback();
	}
}
 8007306:	e001      	b.n	800730c <USART2_IRQHandler+0x20>
		Error_Callback();
 8007308:	f7ff ffe8 	bl	80072dc <Error_Callback>
}
 800730c:	bf00      	nop
 800730e:	bd80      	pop	{r7, pc}
 8007310:	40004400 	.word	0x40004400

08007314 <__NVIC_GetPriorityGrouping>:
{
 8007314:	b480      	push	{r7}
 8007316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007318:	4b04      	ldr	r3, [pc, #16]	; (800732c <__NVIC_GetPriorityGrouping+0x18>)
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	0a1b      	lsrs	r3, r3, #8
 800731e:	f003 0307 	and.w	r3, r3, #7
}
 8007322:	4618      	mov	r0, r3
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	e000ed00 	.word	0xe000ed00

08007330 <__NVIC_EnableIRQ>:
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	4603      	mov	r3, r0
 8007338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800733a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800733e:	2b00      	cmp	r3, #0
 8007340:	db0b      	blt.n	800735a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007342:	4909      	ldr	r1, [pc, #36]	; (8007368 <__NVIC_EnableIRQ+0x38>)
 8007344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007348:	095b      	lsrs	r3, r3, #5
 800734a:	79fa      	ldrb	r2, [r7, #7]
 800734c:	f002 021f 	and.w	r2, r2, #31
 8007350:	2001      	movs	r0, #1
 8007352:	fa00 f202 	lsl.w	r2, r0, r2
 8007356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	e000e100 	.word	0xe000e100

0800736c <__NVIC_SetPriority>:
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	4603      	mov	r3, r0
 8007374:	6039      	str	r1, [r7, #0]
 8007376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800737c:	2b00      	cmp	r3, #0
 800737e:	db0a      	blt.n	8007396 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007380:	490d      	ldr	r1, [pc, #52]	; (80073b8 <__NVIC_SetPriority+0x4c>)
 8007382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	0112      	lsls	r2, r2, #4
 800738c:	b2d2      	uxtb	r2, r2
 800738e:	440b      	add	r3, r1
 8007390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007394:	e00a      	b.n	80073ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007396:	4909      	ldr	r1, [pc, #36]	; (80073bc <__NVIC_SetPriority+0x50>)
 8007398:	79fb      	ldrb	r3, [r7, #7]
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	3b04      	subs	r3, #4
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	0112      	lsls	r2, r2, #4
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	440b      	add	r3, r1
 80073aa:	761a      	strb	r2, [r3, #24]
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	e000e100 	.word	0xe000e100
 80073bc:	e000ed00 	.word	0xe000ed00

080073c0 <NVIC_EncodePriority>:
{
 80073c0:	b480      	push	{r7}
 80073c2:	b089      	sub	sp, #36	; 0x24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	f1c3 0307 	rsb	r3, r3, #7
 80073da:	2b04      	cmp	r3, #4
 80073dc:	bf28      	it	cs
 80073de:	2304      	movcs	r3, #4
 80073e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	3304      	adds	r3, #4
 80073e6:	2b06      	cmp	r3, #6
 80073e8:	d902      	bls.n	80073f0 <NVIC_EncodePriority+0x30>
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	3b03      	subs	r3, #3
 80073ee:	e000      	b.n	80073f2 <NVIC_EncodePriority+0x32>
 80073f0:	2300      	movs	r3, #0
 80073f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073f4:	2201      	movs	r2, #1
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	fa02 f303 	lsl.w	r3, r2, r3
 80073fc:	1e5a      	subs	r2, r3, #1
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	401a      	ands	r2, r3
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007406:	2101      	movs	r1, #1
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	fa01 f303 	lsl.w	r3, r1, r3
 800740e:	1e59      	subs	r1, r3, #1
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007414:	4313      	orrs	r3, r2
}
 8007416:	4618      	mov	r0, r3
 8007418:	3724      	adds	r7, #36	; 0x24
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <LL_GPIO_ReadInputPort>:
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
}
 800742e:	4618      	mov	r0, r3
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <LL_USART_Enable>:
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	60da      	str	r2, [r3, #12]
}
 800744e:	bf00      	nop
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <LL_USART_ConfigAsyncMode>:
{
 800745a:	b480      	push	{r7}
 800745c:	b083      	sub	sp, #12
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	615a      	str	r2, [r3, #20]
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <LL_USART_IsActiveFlag_RXNE>:
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b20      	cmp	r3, #32
 8007498:	bf0c      	ite	eq
 800749a:	2301      	moveq	r3, #1
 800749c:	2300      	movne	r3, #0
 800749e:	b2db      	uxtb	r3, r3
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <LL_USART_IsActiveFlag_TC>:
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074bc:	2b40      	cmp	r3, #64	; 0x40
 80074be:	bf0c      	ite	eq
 80074c0:	2301      	moveq	r3, #1
 80074c2:	2300      	movne	r3, #0
 80074c4:	b2db      	uxtb	r3, r3
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <LL_USART_ClearFlag_RXNE>:
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f06f 0220 	mvn.w	r2, #32
 80074e0:	601a      	str	r2, [r3, #0]
}
 80074e2:	bf00      	nop
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <LL_USART_EnableIT_RXNE>:
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f043 0220 	orr.w	r2, r3, #32
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	60da      	str	r2, [r3, #12]
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <LL_USART_ReceiveData8>:
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	b2db      	uxtb	r3, r3
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <LL_USART_TransmitData8>:
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007534:	78fa      	ldrb	r2, [r7, #3]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	605a      	str	r2, [r3, #4]
}
 800753a:	bf00      	nop
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
	...

08007548 <UART3_Init>:
#include "stm32f4xx_ll_utils.h"

static struct ring_buffer_struct* UART_rx_data;

void UART3_Init(struct ring_buffer_struct* rx_data)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b090      	sub	sp, #64	; 0x40
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8007550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007554:	2200      	movs	r2, #0
 8007556:	601a      	str	r2, [r3, #0]
 8007558:	605a      	str	r2, [r3, #4]
 800755a:	609a      	str	r2, [r3, #8]
 800755c:	60da      	str	r2, [r3, #12]
 800755e:	611a      	str	r2, [r3, #16]
 8007560:	615a      	str	r2, [r3, #20]
 8007562:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007564:	f107 030c 	add.w	r3, r7, #12
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	605a      	str	r2, [r3, #4]
 800756e:	609a      	str	r2, [r3, #8]
 8007570:	60da      	str	r2, [r3, #12]
 8007572:	611a      	str	r2, [r3, #16]
 8007574:	615a      	str	r2, [r3, #20]

	/**USART3 GPIO Configuration
	PD8   ------> USART3_TX
	PD9   ------> USART3_RX
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8007576:	f44f 7340 	mov.w	r3, #768	; 0x300
 800757a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800757c:	2302      	movs	r3, #2
 800757e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007580:	2303      	movs	r3, #3
 8007582:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007584:	2300      	movs	r3, #0
 8007586:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007588:	2300      	movs	r3, #0
 800758a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800758c:	2307      	movs	r3, #7
 800758e:	623b      	str	r3, [r7, #32]
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007590:	f107 030c 	add.w	r3, r7, #12
 8007594:	4619      	mov	r1, r3
 8007596:	481c      	ldr	r0, [pc, #112]	; (8007608 <UART3_Init+0xc0>)
 8007598:	f7fb f99f 	bl	80028da <LL_GPIO_Init>

	NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800759c:	f7ff feba 	bl	8007314 <__NVIC_GetPriorityGrouping>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2200      	movs	r2, #0
 80075a4:	2100      	movs	r1, #0
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7ff ff0a 	bl	80073c0 <NVIC_EncodePriority>
 80075ac:	4603      	mov	r3, r0
 80075ae:	4619      	mov	r1, r3
 80075b0:	2027      	movs	r0, #39	; 0x27
 80075b2:	f7ff fedb 	bl	800736c <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART3_IRQn);
 80075b6:	2027      	movs	r0, #39	; 0x27
 80075b8:	f7ff feba 	bl	8007330 <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 115200;
 80075bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80075c0:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80075c2:	2300      	movs	r3, #0
 80075c4:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80075c6:	2300      	movs	r3, #0
 80075c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80075ca:	2300      	movs	r3, #0
 80075cc:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80075ce:	230c      	movs	r3, #12
 80075d0:	637b      	str	r3, [r7, #52]	; 0x34
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80075d2:	2300      	movs	r3, #0
 80075d4:	63bb      	str	r3, [r7, #56]	; 0x38
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80075d6:	2300      	movs	r3, #0
 80075d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_USART_Init(USART3, &USART_InitStruct);
 80075da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075de:	4619      	mov	r1, r3
 80075e0:	480a      	ldr	r0, [pc, #40]	; (800760c <UART3_Init+0xc4>)
 80075e2:	f7fc f87b 	bl	80036dc <LL_USART_Init>
	LL_USART_EnableIT_RXNE(USART3);
 80075e6:	4809      	ldr	r0, [pc, #36]	; (800760c <UART3_Init+0xc4>)
 80075e8:	f7ff ff81 	bl	80074ee <LL_USART_EnableIT_RXNE>
	LL_USART_ConfigAsyncMode(USART3);
 80075ec:	4807      	ldr	r0, [pc, #28]	; (800760c <UART3_Init+0xc4>)
 80075ee:	f7ff ff34 	bl	800745a <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART3);
 80075f2:	4806      	ldr	r0, [pc, #24]	; (800760c <UART3_Init+0xc4>)
 80075f4:	f7ff ff21 	bl	800743a <LL_USART_Enable>

	UART_rx_data = rx_data;
 80075f8:	4a05      	ldr	r2, [pc, #20]	; (8007610 <UART3_Init+0xc8>)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6013      	str	r3, [r2, #0]
}
 80075fe:	bf00      	nop
 8007600:	3740      	adds	r7, #64	; 0x40
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	40020c00 	.word	0x40020c00
 800760c:	40004800 	.word	0x40004800
 8007610:	20008b6c 	.word	0x20008b6c

08007614 <Sensor_UpdateGpioInit>:

void Sensor_UpdateGpioInit()
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800761a:	463b      	mov	r3, r7
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	605a      	str	r2, [r3, #4]
 8007622:	609a      	str	r2, [r3, #8]
 8007624:	60da      	str	r2, [r3, #12]
 8007626:	611a      	str	r2, [r3, #16]
 8007628:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800762a:	2301      	movs	r3, #1
 800762c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800762e:	2300      	movs	r3, #0
 8007630:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007632:	2302      	movs	r3, #2
 8007634:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007636:	463b      	mov	r3, r7
 8007638:	4619      	mov	r1, r3
 800763a:	4803      	ldr	r0, [pc, #12]	; (8007648 <Sensor_UpdateGpioInit+0x34>)
 800763c:	f7fb f94d 	bl	80028da <LL_GPIO_Init>
}
 8007640:	bf00      	nop
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	40020000 	.word	0x40020000

0800764c <Sensor_GpioValue>:

uint8_t Sensor_GpioValue()
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
	return LL_GPIO_ReadInputPort(GPIOA) & LL_GPIO_PIN_0;
 8007650:	4804      	ldr	r0, [pc, #16]	; (8007664 <Sensor_GpioValue+0x18>)
 8007652:	f7ff fee6 	bl	8007422 <LL_GPIO_ReadInputPort>
 8007656:	4603      	mov	r3, r0
 8007658:	b2db      	uxtb	r3, r3
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	b2db      	uxtb	r3, r3
}
 8007660:	4618      	mov	r0, r3
 8007662:	bd80      	pop	{r7, pc}
 8007664:	40020000 	.word	0x40020000

08007668 <UART3_SendData_byte>:

void UART3_SendData_byte(char data)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART3, data);
 8007672:	79fb      	ldrb	r3, [r7, #7]
 8007674:	4619      	mov	r1, r3
 8007676:	4807      	ldr	r0, [pc, #28]	; (8007694 <UART3_SendData_byte+0x2c>)
 8007678:	f7ff ff56 	bl	8007528 <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TC(USART3));
 800767c:	bf00      	nop
 800767e:	4805      	ldr	r0, [pc, #20]	; (8007694 <UART3_SendData_byte+0x2c>)
 8007680:	f7ff ff14 	bl	80074ac <LL_USART_IsActiveFlag_TC>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0f9      	beq.n	800767e <UART3_SendData_byte+0x16>
}
 800768a:	bf00      	nop
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	40004800 	.word	0x40004800

08007698 <UART3_SendData>:

void UART3_SendData(char* data, uint32_t data_length)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < data_length; ++i)
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	e009      	b.n	80076bc <UART3_SendData+0x24>
	{
		UART3_SendData_byte(data[i]);
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4413      	add	r3, r2
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7ff ffd9 	bl	8007668 <UART3_SendData_byte>
	for(uint32_t i = 0; i < data_length; ++i)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3301      	adds	r3, #1
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d3f1      	bcc.n	80076a8 <UART3_SendData+0x10>
	}
}
 80076c4:	bf00      	nop
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <UART3_CharReception_Callback>:

void UART3_CharReception_Callback(void)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
	__IO uint8_t received_char;
	received_char = LL_USART_ReceiveData8(USART3);
 80076d2:	4808      	ldr	r0, [pc, #32]	; (80076f4 <UART3_CharReception_Callback+0x28>)
 80076d4:	f7ff ff1b 	bl	800750e <LL_USART_ReceiveData8>
 80076d8:	4603      	mov	r3, r0
 80076da:	71fb      	strb	r3, [r7, #7]

	RingBuffPush(UART_rx_data, (char)received_char);
 80076dc:	4b06      	ldr	r3, [pc, #24]	; (80076f8 <UART3_CharReception_Callback+0x2c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	79fa      	ldrb	r2, [r7, #7]
 80076e2:	b2d2      	uxtb	r2, r2
 80076e4:	4611      	mov	r1, r2
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fa fc07 	bl	8001efa <RingBuffPush>
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	40004800 	.word	0x40004800
 80076f8:	20008b6c 	.word	0x20008b6c

080076fc <Error_Callback>:

static void Error_Callback(void)
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
	//dummy
}
 8007700:	bf00      	nop
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
	...

0800770c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART3)) {
 8007710:	4807      	ldr	r0, [pc, #28]	; (8007730 <USART3_IRQHandler+0x24>)
 8007712:	f7ff feb8 	bl	8007486 <LL_USART_IsActiveFlag_RXNE>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d005      	beq.n	8007728 <USART3_IRQHandler+0x1c>
		UART3_CharReception_Callback();
 800771c:	f7ff ffd6 	bl	80076cc <UART3_CharReception_Callback>
		LL_USART_ClearFlag_RXNE(USART3);
 8007720:	4803      	ldr	r0, [pc, #12]	; (8007730 <USART3_IRQHandler+0x24>)
 8007722:	f7ff fed6 	bl	80074d2 <LL_USART_ClearFlag_RXNE>
	} else {
		Error_Callback();
	}
}
 8007726:	e001      	b.n	800772c <USART3_IRQHandler+0x20>
		Error_Callback();
 8007728:	f7ff ffe8 	bl	80076fc <Error_Callback>
}
 800772c:	bf00      	nop
 800772e:	bd80      	pop	{r7, pc}
 8007730:	40004800 	.word	0x40004800

08007734 <MX_FREERTOS_Init>:

void StartDefaultTask(void *argument);
void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

void MX_FREERTOS_Init(void)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	af00      	add	r7, sp, #0
	Led_TaskInit();
 8007738:	f7ff f884 	bl	8006844 <Led_TaskInit>
	Relay_TaskInit();
 800773c:	f7ff fa26 	bl	8006b8c <Relay_TaskInit>

	ESP_TaskInit();
 8007740:	f7fe ffb2 	bl	80066a8 <ESP_TaskInit>

	BitEngine_TaskInit();
 8007744:	f7fe fecc 	bl	80064e0 <BitEngine_TaskInit>
	Sensor_TaskInit();
 8007748:	f7ff fbe0 	bl	8006f0c <Sensor_TaskInit>

	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800774c:	4a04      	ldr	r2, [pc, #16]	; (8007760 <MX_FREERTOS_Init+0x2c>)
 800774e:	2100      	movs	r1, #0
 8007750:	4804      	ldr	r0, [pc, #16]	; (8007764 <MX_FREERTOS_Init+0x30>)
 8007752:	f7fc f8c5 	bl	80038e0 <osThreadNew>
 8007756:	4602      	mov	r2, r0
 8007758:	4b03      	ldr	r3, [pc, #12]	; (8007768 <MX_FREERTOS_Init+0x34>)
 800775a:	601a      	str	r2, [r3, #0]
}
 800775c:	bf00      	nop
 800775e:	bd80      	pop	{r7, pc}
 8007760:	0800a08c 	.word	0x0800a08c
 8007764:	0800776d 	.word	0x0800776d
 8007768:	20014ab0 	.word	0x20014ab0

0800776c <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 8007774:	2001      	movs	r0, #1
 8007776:	f7fc f959 	bl	8003a2c <osDelay>
 800777a:	e7fb      	b.n	8007774 <StartDefaultTask+0x8>

0800777c <LL_RCC_HSI_Enable>:
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007780:	4a05      	ldr	r2, [pc, #20]	; (8007798 <LL_RCC_HSI_Enable+0x1c>)
 8007782:	4b05      	ldr	r3, [pc, #20]	; (8007798 <LL_RCC_HSI_Enable+0x1c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f043 0301 	orr.w	r3, r3, #1
 800778a:	6013      	str	r3, [r2, #0]
}
 800778c:	bf00      	nop
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	40023800 	.word	0x40023800

0800779c <LL_RCC_HSI_IsReady>:
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80077a0:	4b06      	ldr	r3, [pc, #24]	; (80077bc <LL_RCC_HSI_IsReady+0x20>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	bf0c      	ite	eq
 80077ac:	2301      	moveq	r3, #1
 80077ae:	2300      	movne	r3, #0
 80077b0:	b2db      	uxtb	r3, r3
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	40023800 	.word	0x40023800

080077c0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80077c8:	4907      	ldr	r1, [pc, #28]	; (80077e8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80077ca:	4b07      	ldr	r3, [pc, #28]	; (80077e8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	4313      	orrs	r3, r2
 80077d8:	600b      	str	r3, [r1, #0]
}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	40023800 	.word	0x40023800

080077ec <LL_RCC_LSI_Enable>:
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80077f0:	4a05      	ldr	r2, [pc, #20]	; (8007808 <LL_RCC_LSI_Enable+0x1c>)
 80077f2:	4b05      	ldr	r3, [pc, #20]	; (8007808 <LL_RCC_LSI_Enable+0x1c>)
 80077f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077f6:	f043 0301 	orr.w	r3, r3, #1
 80077fa:	6753      	str	r3, [r2, #116]	; 0x74
}
 80077fc:	bf00      	nop
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	40023800 	.word	0x40023800

0800780c <LL_RCC_LSI_IsReady>:
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8007810:	4b06      	ldr	r3, [pc, #24]	; (800782c <LL_RCC_LSI_IsReady+0x20>)
 8007812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b02      	cmp	r3, #2
 800781a:	bf0c      	ite	eq
 800781c:	2301      	moveq	r3, #1
 800781e:	2300      	movne	r3, #0
 8007820:	b2db      	uxtb	r3, r3
}
 8007822:	4618      	mov	r0, r3
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	40023800 	.word	0x40023800

08007830 <LL_RCC_SetSysClkSource>:
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007838:	4906      	ldr	r1, [pc, #24]	; (8007854 <LL_RCC_SetSysClkSource+0x24>)
 800783a:	4b06      	ldr	r3, [pc, #24]	; (8007854 <LL_RCC_SetSysClkSource+0x24>)
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f023 0203 	bic.w	r2, r3, #3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4313      	orrs	r3, r2
 8007846:	608b      	str	r3, [r1, #8]
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	40023800 	.word	0x40023800

08007858 <LL_RCC_GetSysClkSource>:
{
 8007858:	b480      	push	{r7}
 800785a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800785c:	4b04      	ldr	r3, [pc, #16]	; (8007870 <LL_RCC_GetSysClkSource+0x18>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f003 030c 	and.w	r3, r3, #12
}
 8007864:	4618      	mov	r0, r3
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	40023800 	.word	0x40023800

08007874 <LL_RCC_SetAHBPrescaler>:
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800787c:	4906      	ldr	r1, [pc, #24]	; (8007898 <LL_RCC_SetAHBPrescaler+0x24>)
 800787e:	4b06      	ldr	r3, [pc, #24]	; (8007898 <LL_RCC_SetAHBPrescaler+0x24>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4313      	orrs	r3, r2
 800788a:	608b      	str	r3, [r1, #8]
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	40023800 	.word	0x40023800

0800789c <LL_RCC_SetAPB1Prescaler>:
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80078a4:	4906      	ldr	r1, [pc, #24]	; (80078c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80078a6:	4b06      	ldr	r3, [pc, #24]	; (80078c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	608b      	str	r3, [r1, #8]
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	40023800 	.word	0x40023800

080078c4 <LL_RCC_SetAPB2Prescaler>:
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80078cc:	4906      	ldr	r1, [pc, #24]	; (80078e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80078ce:	4b06      	ldr	r3, [pc, #24]	; (80078e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4313      	orrs	r3, r2
 80078da:	608b      	str	r3, [r1, #8]
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	40023800 	.word	0x40023800

080078ec <LL_RCC_SetRTCClockSource>:
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80078f4:	4906      	ldr	r1, [pc, #24]	; (8007910 <LL_RCC_SetRTCClockSource+0x24>)
 80078f6:	4b06      	ldr	r3, [pc, #24]	; (8007910 <LL_RCC_SetRTCClockSource+0x24>)
 80078f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4313      	orrs	r3, r2
 8007902:	670b      	str	r3, [r1, #112]	; 0x70
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	40023800 	.word	0x40023800

08007914 <LL_RCC_EnableRTC>:
{
 8007914:	b480      	push	{r7}
 8007916:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8007918:	4a05      	ldr	r2, [pc, #20]	; (8007930 <LL_RCC_EnableRTC+0x1c>)
 800791a:	4b05      	ldr	r3, [pc, #20]	; (8007930 <LL_RCC_EnableRTC+0x1c>)
 800791c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007922:	6713      	str	r3, [r2, #112]	; 0x70
}
 8007924:	bf00      	nop
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	40023800 	.word	0x40023800

08007934 <LL_RCC_ForceBackupDomainReset>:
{
 8007934:	b480      	push	{r7}
 8007936:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007938:	4a05      	ldr	r2, [pc, #20]	; (8007950 <LL_RCC_ForceBackupDomainReset+0x1c>)
 800793a:	4b05      	ldr	r3, [pc, #20]	; (8007950 <LL_RCC_ForceBackupDomainReset+0x1c>)
 800793c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007942:	6713      	str	r3, [r2, #112]	; 0x70
}
 8007944:	bf00      	nop
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	40023800 	.word	0x40023800

08007954 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007954:	b480      	push	{r7}
 8007956:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007958:	4a05      	ldr	r2, [pc, #20]	; (8007970 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 800795a:	4b05      	ldr	r3, [pc, #20]	; (8007970 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 800795c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007962:	6713      	str	r3, [r2, #112]	; 0x70
}
 8007964:	bf00      	nop
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	40023800 	.word	0x40023800

08007974 <LL_RCC_PLL_Enable>:
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007978:	4a05      	ldr	r2, [pc, #20]	; (8007990 <LL_RCC_PLL_Enable+0x1c>)
 800797a:	4b05      	ldr	r3, [pc, #20]	; (8007990 <LL_RCC_PLL_Enable+0x1c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007982:	6013      	str	r3, [r2, #0]
}
 8007984:	bf00      	nop
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	40023800 	.word	0x40023800

08007994 <LL_RCC_PLL_IsReady>:
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8007998:	4b07      	ldr	r3, [pc, #28]	; (80079b8 <LL_RCC_PLL_IsReady+0x24>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079a4:	bf0c      	ite	eq
 80079a6:	2301      	moveq	r3, #1
 80079a8:	2300      	movne	r3, #0
 80079aa:	b2db      	uxtb	r3, r3
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	40023800 	.word	0x40023800

080079bc <LL_RCC_PLL_ConfigDomain_SYS>:
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80079ca:	480d      	ldr	r0, [pc, #52]	; (8007a00 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80079cc:	4b0c      	ldr	r3, [pc, #48]	; (8007a00 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80079d2:	4013      	ands	r3, r2
 80079d4:	68f9      	ldr	r1, [r7, #12]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	4311      	orrs	r1, r2
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	0192      	lsls	r2, r2, #6
 80079de:	430a      	orrs	r2, r1
 80079e0:	4313      	orrs	r3, r2
 80079e2:	6043      	str	r3, [r0, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80079e4:	4906      	ldr	r1, [pc, #24]	; (8007a00 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80079e6:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	604b      	str	r3, [r1, #4]
}
 80079f4:	bf00      	nop
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	40023800 	.word	0x40023800
 8007a04:	ffbf8000 	.word	0xffbf8000

08007a08 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007a10:	4908      	ldr	r1, [pc, #32]	; (8007a34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007a12:	4b08      	ldr	r3, [pc, #32]	; (8007a34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007a1c:	4b05      	ldr	r3, [pc, #20]	; (8007a34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4013      	ands	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007a26:	68fb      	ldr	r3, [r7, #12]
}
 8007a28:	bf00      	nop
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr
 8007a34:	40023800 	.word	0x40023800

08007a38 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8007a40:	4908      	ldr	r1, [pc, #32]	; (8007a64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007a42:	4b08      	ldr	r3, [pc, #32]	; (8007a64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8007a4c:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4013      	ands	r3, r2
 8007a54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007a56:	68fb      	ldr	r3, [r7, #12]
}
 8007a58:	bf00      	nop
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr
 8007a64:	40023800 	.word	0x40023800

08007a68 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8007a70:	4906      	ldr	r1, [pc, #24]	; (8007a8c <LL_FLASH_SetLatency+0x24>)
 8007a72:	4b06      	ldr	r3, [pc, #24]	; (8007a8c <LL_FLASH_SetLatency+0x24>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f023 020f 	bic.w	r2, r3, #15
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	600b      	str	r3, [r1, #0]
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	40023c00 	.word	0x40023c00

08007a90 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8007a94:	4b04      	ldr	r3, [pc, #16]	; (8007aa8 <LL_FLASH_GetLatency+0x18>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 030f 	and.w	r3, r3, #15
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40023c00 	.word	0x40023c00

08007aac <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8007ab4:	4906      	ldr	r1, [pc, #24]	; (8007ad0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8007ab6:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	600b      	str	r3, [r1, #0]
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	40007000 	.word	0x40007000

08007ad4 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ad8:	4a05      	ldr	r2, [pc, #20]	; (8007af0 <LL_PWR_EnableBkUpAccess+0x1c>)
 8007ada:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <LL_PWR_EnableBkUpAccess+0x1c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ae2:	6013      	str	r3, [r2, #0]
}
 8007ae4:	bf00      	nop
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	40007000 	.word	0x40007000

08007af4 <main>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);

int main(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
	HAL_Init();
 8007af8:	f7fa fa44 	bl	8001f84 <HAL_Init>
	SystemClock_Config();
 8007afc:	f000 f824 	bl	8007b48 <SystemClock_Config>

	RTC_Init();
 8007b00:	f000 f954 	bl	8007dac <RTC_Init>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8007b04:	2004      	movs	r0, #4
 8007b06:	f7ff ff7f 	bl	8007a08 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8007b0a:	2080      	movs	r0, #128	; 0x80
 8007b0c:	f7ff ff7c 	bl	8007a08 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007b10:	2001      	movs	r0, #1
 8007b12:	f7ff ff79 	bl	8007a08 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8007b16:	2002      	movs	r0, #2
 8007b18:	f7ff ff76 	bl	8007a08 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8007b1c:	2008      	movs	r0, #8
 8007b1e:	f7ff ff73 	bl	8007a08 <LL_AHB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8007b22:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007b26:	f7ff ff87 	bl	8007a38 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8007b2a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007b2e:	f7ff ff83 	bl	8007a38 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8007b32:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007b36:	f7ff ff7f 	bl	8007a38 <LL_APB1_GRP1_EnableClock>
//  MX_USART1_UART_Init();
//  MX_USART2_UART_Init();
//  MX_USART3_UART_Init();
//  MX_FATFS_Init();

	osKernelInitialize();
 8007b3a:	f7fb fe67 	bl	800380c <osKernelInitialize>
	MX_FREERTOS_Init();
 8007b3e:	f7ff fdf9 	bl	8007734 <MX_FREERTOS_Init>
	osKernelStart();
 8007b42:	f7fb fe97 	bl	8003874 <osKernelStart>

	while (1) {}
 8007b46:	e7fe      	b.n	8007b46 <main+0x52>

08007b48 <SystemClock_Config>:
}


void SystemClock_Config(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8007b4c:	2005      	movs	r0, #5
 8007b4e:	f7ff ff8b 	bl	8007a68 <LL_FLASH_SetLatency>

	if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
 8007b52:	f7ff ff9d 	bl	8007a90 <LL_FLASH_GetLatency>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b05      	cmp	r3, #5
 8007b5a:	d001      	beq.n	8007b60 <SystemClock_Config+0x18>
	{
	Error_Handler();
 8007b5c:	f000 f866 	bl	8007c2c <Error_Handler>
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8007b60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007b64:	f7ff ffa2 	bl	8007aac <LL_PWR_SetRegulVoltageScaling>
	LL_RCC_HSI_SetCalibTrimming(16);
 8007b68:	2010      	movs	r0, #16
 8007b6a:	f7ff fe29 	bl	80077c0 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_HSI_Enable();
 8007b6e:	f7ff fe05 	bl	800777c <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while(LL_RCC_HSI_IsReady() != 1) {}
 8007b72:	bf00      	nop
 8007b74:	f7ff fe12 	bl	800779c <LL_RCC_HSI_IsReady>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d1fa      	bne.n	8007b74 <SystemClock_Config+0x2c>
	LL_RCC_LSI_Enable();
 8007b7e:	f7ff fe35 	bl	80077ec <LL_RCC_LSI_Enable>

	/* Wait till LSI is ready */
	while(LL_RCC_LSI_IsReady() != 1) {}
 8007b82:	bf00      	nop
 8007b84:	f7ff fe42 	bl	800780c <LL_RCC_LSI_IsReady>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d1fa      	bne.n	8007b84 <SystemClock_Config+0x3c>
	LL_PWR_EnableBkUpAccess();
 8007b8e:	f7ff ffa1 	bl	8007ad4 <LL_PWR_EnableBkUpAccess>
	LL_RCC_ForceBackupDomainReset();
 8007b92:	f7ff fecf 	bl	8007934 <LL_RCC_ForceBackupDomainReset>
	LL_RCC_ReleaseBackupDomainReset();
 8007b96:	f7ff fedd 	bl	8007954 <LL_RCC_ReleaseBackupDomainReset>
	LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 8007b9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007b9e:	f7ff fea5 	bl	80078ec <LL_RCC_SetRTCClockSource>
	LL_RCC_EnableRTC();
 8007ba2:	f7ff feb7 	bl	8007914 <LL_RCC_EnableRTC>
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_2);
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	22a8      	movs	r2, #168	; 0xa8
 8007baa:	2108      	movs	r1, #8
 8007bac:	2000      	movs	r0, #0
 8007bae:	f7ff ff05 	bl	80079bc <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8007bb2:	f7ff fedf 	bl	8007974 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1) {}
 8007bb6:	bf00      	nop
 8007bb8:	f7ff feec 	bl	8007994 <LL_RCC_PLL_IsReady>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d1fa      	bne.n	8007bb8 <SystemClock_Config+0x70>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	f7ff fe56 	bl	8007874 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8007bc8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8007bcc:	f7ff fe66 	bl	800789c <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8007bd0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007bd4:	f7ff fe76 	bl	80078c4 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8007bd8:	2002      	movs	r0, #2
 8007bda:	f7ff fe29 	bl	8007830 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {}
 8007bde:	bf00      	nop
 8007be0:	f7ff fe3a 	bl	8007858 <LL_RCC_GetSysClkSource>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b08      	cmp	r3, #8
 8007be8:	d1fa      	bne.n	8007be0 <SystemClock_Config+0x98>
	LL_SetSystemCoreClock(168000000);
 8007bea:	4806      	ldr	r0, [pc, #24]	; (8007c04 <SystemClock_Config+0xbc>)
 8007bec:	f7fb fdf6 	bl	80037dc <LL_SetSystemCoreClock>

	/* Update the time base */
	if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	f000 fa47 	bl	8008084 <HAL_InitTick>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8007bfc:	f000 f816 	bl	8007c2c <Error_Handler>
	};
}
 8007c00:	bf00      	nop
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	0a037a00 	.word	0x0a037a00

08007c08 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a04      	ldr	r2, [pc, #16]	; (8007c28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d101      	bne.n	8007c1e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8007c1a:	f7fa f9d5 	bl	8001fc8 <HAL_IncTick>
	}
}
 8007c1e:	bf00      	nop
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	40010000 	.word	0x40010000

08007c2c <Error_Handler>:

void Error_Handler(void)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
}
 8007c30:	bf00      	nop
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
	...

08007c3c <LL_RCC_EnableRTC>:
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8007c40:	4a05      	ldr	r2, [pc, #20]	; (8007c58 <LL_RCC_EnableRTC+0x1c>)
 8007c42:	4b05      	ldr	r3, [pc, #20]	; (8007c58 <LL_RCC_EnableRTC+0x1c>)
 8007c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c4a:	6713      	str	r3, [r2, #112]	; 0x70
}
 8007c4c:	bf00      	nop
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	40023800 	.word	0x40023800

08007c5c <LL_RTC_DisableInitMode>:
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c6a:	60da      	str	r2, [r3, #12]
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <LL_RTC_SetAsynchPrescaler>:
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	041b      	lsls	r3, r3, #16
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	611a      	str	r2, [r3, #16]
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <LL_RTC_SetSynchPrescaler>:
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007cb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	611a      	str	r2, [r3, #16]
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <LL_RTC_EnableWriteProtection>:
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b083      	sub	sp, #12
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	22ff      	movs	r2, #255	; 0xff
 8007cd6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <LL_RTC_DisableWriteProtection>:
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	22ca      	movs	r2, #202	; 0xca
 8007cf0:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2253      	movs	r2, #83	; 0x53
 8007cf6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <LL_RTC_TIME_GetHour>:
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU))) >> RTC_TR_HU_Pos);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	0c1b      	lsrs	r3, r3, #16
 8007d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <LL_RTC_TIME_GetMinute>:
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU))>> RTC_TR_MNU_Pos);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	0a1b      	lsrs	r3, r3, #8
 8007d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <LL_RTC_DATE_GetWeekDay>:
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->DR, RTC_DR_WDU) >> RTC_DR_WDU_Pos);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	0b5b      	lsrs	r3, r3, #13
 8007d4e:	f003 0307 	and.w	r3, r3, #7
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <LL_RTC_BAK_SetRegister>:
{
 8007d5e:	b490      	push	{r4, r7}
 8007d60:	b084      	sub	sp, #16
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	60b9      	str	r1, [r7, #8]
 8007d68:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t)(&(RTCx->BKP0R));
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3350      	adds	r3, #80	; 0x50
 8007d6e:	461c      	mov	r4, r3
  tmp += (BackupRegister * 4U);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	441c      	add	r4, r3
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007d76:	4622      	mov	r2, r4
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6013      	str	r3, [r2, #0]
}
 8007d7c:	bf00      	nop
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bc90      	pop	{r4, r7}
 8007d84:	4770      	bx	lr

08007d86 <LL_RTC_BAK_GetRegister>:
{
 8007d86:	b490      	push	{r4, r7}
 8007d88:	b082      	sub	sp, #8
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t)(&(RTCx->BKP0R));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3350      	adds	r3, #80	; 0x50
 8007d94:	461c      	mov	r4, r3
  tmp += (BackupRegister * 4U);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	441c      	add	r4, r3
  return (*(__IO uint32_t *)tmp);
 8007d9c:	4623      	mov	r3, r4
 8007d9e:	681b      	ldr	r3, [r3, #0]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc90      	pop	{r4, r7}
 8007da8:	4770      	bx	lr
	...

08007dac <RTC_Init>:
#include "rtc.h"

void RTC_Init(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b086      	sub	sp, #24
 8007db0:	af00      	add	r7, sp, #0
	LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8007db2:	f107 030c 	add.w	r3, r7, #12
 8007db6:	2200      	movs	r2, #0
 8007db8:	601a      	str	r2, [r3, #0]
 8007dba:	605a      	str	r2, [r3, #4]
 8007dbc:	609a      	str	r2, [r3, #8]
	LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8007dbe:	1d3b      	adds	r3, r7, #4
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	605a      	str	r2, [r3, #4]
	LL_RTC_DateTypeDef RTC_DateStruct = {0};
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	603b      	str	r3, [r7, #0]

	LL_RCC_EnableRTC();
 8007dca:	f7ff ff37 	bl	8007c3c <LL_RCC_EnableRTC>

	RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60fb      	str	r3, [r7, #12]
	RTC_InitStruct.AsynchPrescaler = 127;
 8007dd2:	237f      	movs	r3, #127	; 0x7f
 8007dd4:	613b      	str	r3, [r7, #16]
	RTC_InitStruct.SynchPrescaler = 255;
 8007dd6:	23ff      	movs	r3, #255	; 0xff
 8007dd8:	617b      	str	r3, [r7, #20]
	LL_RTC_Init(RTC, &RTC_InitStruct);
 8007dda:	f107 030c 	add.w	r3, r7, #12
 8007dde:	4619      	mov	r1, r3
 8007de0:	481a      	ldr	r0, [pc, #104]	; (8007e4c <RTC_Init+0xa0>)
 8007de2:	f7fb f851 	bl	8002e88 <LL_RTC_Init>
	LL_RTC_SetAsynchPrescaler(RTC, 127);
 8007de6:	217f      	movs	r1, #127	; 0x7f
 8007de8:	4818      	ldr	r0, [pc, #96]	; (8007e4c <RTC_Init+0xa0>)
 8007dea:	f7ff ff45 	bl	8007c78 <LL_RTC_SetAsynchPrescaler>
	LL_RTC_SetSynchPrescaler(RTC, 255);
 8007dee:	21ff      	movs	r1, #255	; 0xff
 8007df0:	4816      	ldr	r0, [pc, #88]	; (8007e4c <RTC_Init+0xa0>)
 8007df2:	f7ff ff55 	bl	8007ca0 <LL_RTC_SetSynchPrescaler>

	if(LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0) != 0x32F2)
 8007df6:	2100      	movs	r1, #0
 8007df8:	4814      	ldr	r0, [pc, #80]	; (8007e4c <RTC_Init+0xa0>)
 8007dfa:	f7ff ffc4 	bl	8007d86 <LL_RTC_BAK_GetRegister>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d01d      	beq.n	8007e44 <RTC_Init+0x98>
	{
		RTC_TimeStruct.Hours = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	723b      	strb	r3, [r7, #8]
		RTC_TimeStruct.Minutes = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	727b      	strb	r3, [r7, #9]
		RTC_TimeStruct.Seconds = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	72bb      	strb	r3, [r7, #10]
		LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_TimeStruct);
 8007e14:	1d3b      	adds	r3, r7, #4
 8007e16:	461a      	mov	r2, r3
 8007e18:	2101      	movs	r1, #1
 8007e1a:	480c      	ldr	r0, [pc, #48]	; (8007e4c <RTC_Init+0xa0>)
 8007e1c:	f7fb f864 	bl	8002ee8 <LL_RTC_TIME_Init>
		RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;
 8007e20:	2301      	movs	r3, #1
 8007e22:	703b      	strb	r3, [r7, #0]
		RTC_DateStruct.Month = LL_RTC_MONTH_JANUARY;
 8007e24:	2301      	movs	r3, #1
 8007e26:	707b      	strb	r3, [r7, #1]
		RTC_DateStruct.Year = 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	70fb      	strb	r3, [r7, #3]
		LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_DateStruct);
 8007e2c:	463b      	mov	r3, r7
 8007e2e:	461a      	mov	r2, r3
 8007e30:	2101      	movs	r1, #1
 8007e32:	4806      	ldr	r0, [pc, #24]	; (8007e4c <RTC_Init+0xa0>)
 8007e34:	f7fb f900 	bl	8003038 <LL_RTC_DATE_Init>
		LL_RTC_BAK_SetRegister(RTC,LL_RTC_BKP_DR0,0x32F2);
 8007e38:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	4803      	ldr	r0, [pc, #12]	; (8007e4c <RTC_Init+0xa0>)
 8007e40:	f7ff ff8d 	bl	8007d5e <LL_RTC_BAK_SetRegister>
	}

}
 8007e44:	bf00      	nop
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	40002800 	.word	0x40002800

08007e50 <RTC_GetTime>:

void RTC_GetTime(struct tm* time)
{
 8007e50:	b590      	push	{r4, r7, lr}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
	time->tm_hour = __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8007e58:	4839      	ldr	r0, [pc, #228]	; (8007f40 <RTC_GetTime+0xf0>)
 8007e5a:	f7ff ff53 	bl	8007d04 <LL_RTC_TIME_GetHour>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	111b      	asrs	r3, r3, #4
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	f003 030f 	and.w	r3, r3, #15
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	0092      	lsls	r2, r2, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	b2dc      	uxtb	r4, r3
 8007e76:	4832      	ldr	r0, [pc, #200]	; (8007f40 <RTC_GetTime+0xf0>)
 8007e78:	f7ff ff44 	bl	8007d04 <LL_RTC_TIME_GetHour>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	f003 030f 	and.w	r3, r3, #15
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	4423      	add	r3, r4
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	609a      	str	r2, [r3, #8]
	time->tm_min = 	__LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8007e90:	482b      	ldr	r0, [pc, #172]	; (8007f40 <RTC_GetTime+0xf0>)
 8007e92:	f7ff ff46 	bl	8007d22 <LL_RTC_TIME_GetMinute>
 8007e96:	4603      	mov	r3, r0
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	111b      	asrs	r3, r3, #4
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	f003 030f 	and.w	r3, r3, #15
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	0092      	lsls	r2, r2, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	005b      	lsls	r3, r3, #1
 8007eac:	b2dc      	uxtb	r4, r3
 8007eae:	4824      	ldr	r0, [pc, #144]	; (8007f40 <RTC_GetTime+0xf0>)
 8007eb0:	f7ff ff37 	bl	8007d22 <LL_RTC_TIME_GetMinute>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	f003 030f 	and.w	r3, r3, #15
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	4423      	add	r3, r4
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	605a      	str	r2, [r3, #4]

	// RTC HAS DIF WEEK DAY MASKS
	//tm  0 - sunday 6 - saturday
	//rtc 1 - monday 7 - sunday
	switch(LL_RTC_DATE_GetWeekDay(RTC))
 8007ec8:	481d      	ldr	r0, [pc, #116]	; (8007f40 <RTC_GetTime+0xf0>)
 8007eca:	f7ff ff39 	bl	8007d40 <LL_RTC_DATE_GetWeekDay>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	2b06      	cmp	r3, #6
 8007ed4:	d82c      	bhi.n	8007f30 <RTC_GetTime+0xe0>
 8007ed6:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <RTC_GetTime+0x8c>)
 8007ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007edc:	08007ef9 	.word	0x08007ef9
 8007ee0:	08007f01 	.word	0x08007f01
 8007ee4:	08007f09 	.word	0x08007f09
 8007ee8:	08007f11 	.word	0x08007f11
 8007eec:	08007f19 	.word	0x08007f19
 8007ef0:	08007f21 	.word	0x08007f21
 8007ef4:	08007f29 	.word	0x08007f29
	{
	case LL_RTC_WEEKDAY_MONDAY: 	time->tm_wday = 1; break;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	619a      	str	r2, [r3, #24]
 8007efe:	e01b      	b.n	8007f38 <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_TUESDAY: 	time->tm_wday = 2; break;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	619a      	str	r2, [r3, #24]
 8007f06:	e017      	b.n	8007f38 <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_WEDNESDAY: 	time->tm_wday = 3; break;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2203      	movs	r2, #3
 8007f0c:	619a      	str	r2, [r3, #24]
 8007f0e:	e013      	b.n	8007f38 <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_THURSDAY: 	time->tm_wday = 4; break;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2204      	movs	r2, #4
 8007f14:	619a      	str	r2, [r3, #24]
 8007f16:	e00f      	b.n	8007f38 <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_FRIDAY: 	time->tm_wday = 5; break;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2205      	movs	r2, #5
 8007f1c:	619a      	str	r2, [r3, #24]
 8007f1e:	e00b      	b.n	8007f38 <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_SATURDAY: 	time->tm_wday = 6; break;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2206      	movs	r2, #6
 8007f24:	619a      	str	r2, [r3, #24]
 8007f26:	e007      	b.n	8007f38 <RTC_GetTime+0xe8>
	case LL_RTC_WEEKDAY_SUNDAY: 	time->tm_wday = 0; break;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	619a      	str	r2, [r3, #24]
 8007f2e:	e003      	b.n	8007f38 <RTC_GetTime+0xe8>
	default: time->tm_wday = 0; break;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	619a      	str	r2, [r3, #24]
 8007f36:	bf00      	nop
	}
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd90      	pop	{r4, r7, pc}
 8007f40:	40002800 	.word	0x40002800

08007f44 <RTC_SetTime>:

void RTC_SetTime(struct tm* time)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
	LL_RTC_DisableWriteProtection(RTC);
 8007f4c:	4836      	ldr	r0, [pc, #216]	; (8008028 <RTC_SetTime+0xe4>)
 8007f4e:	f7ff fec9 	bl	8007ce4 <LL_RTC_DisableWriteProtection>
	LL_RTC_EnterInitMode(RTC);
 8007f52:	4835      	ldr	r0, [pc, #212]	; (8008028 <RTC_SetTime+0xe4>)
 8007f54:	f7fb f916 	bl	8003184 <LL_RTC_EnterInitMode>

	LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8007f58:	f107 0310 	add.w	r3, r7, #16
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	605a      	str	r2, [r3, #4]
	LL_RTC_DateTypeDef RTC_DateStruct = {0};
 8007f62:	2300      	movs	r3, #0
 8007f64:	60fb      	str	r3, [r7, #12]

	RTC_TimeStruct.Hours = time->tm_hour;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	753b      	strb	r3, [r7, #20]
	RTC_TimeStruct.Minutes = time->tm_min;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	757b      	strb	r3, [r7, #21]
	RTC_TimeStruct.Seconds = time->tm_sec;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	75bb      	strb	r3, [r7, #22]
	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8007f7e:	f107 0310 	add.w	r3, r7, #16
 8007f82:	461a      	mov	r2, r3
 8007f84:	2100      	movs	r1, #0
 8007f86:	4828      	ldr	r0, [pc, #160]	; (8008028 <RTC_SetTime+0xe4>)
 8007f88:	f7fa ffae 	bl	8002ee8 <LL_RTC_TIME_Init>

	switch(time->tm_wday)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	2b06      	cmp	r3, #6
 8007f92:	d826      	bhi.n	8007fe2 <RTC_SetTime+0x9e>
 8007f94:	a201      	add	r2, pc, #4	; (adr r2, 8007f9c <RTC_SetTime+0x58>)
 8007f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9a:	bf00      	nop
 8007f9c:	08007fb9 	.word	0x08007fb9
 8007fa0:	08007fbf 	.word	0x08007fbf
 8007fa4:	08007fc5 	.word	0x08007fc5
 8007fa8:	08007fcb 	.word	0x08007fcb
 8007fac:	08007fd1 	.word	0x08007fd1
 8007fb0:	08007fd7 	.word	0x08007fd7
 8007fb4:	08007fdd 	.word	0x08007fdd
	{
	case 0:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_SUNDAY;		break;
 8007fb8:	2307      	movs	r3, #7
 8007fba:	733b      	strb	r3, [r7, #12]
 8007fbc:	e014      	b.n	8007fe8 <RTC_SetTime+0xa4>
	case 1:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY; 	break;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	733b      	strb	r3, [r7, #12]
 8007fc2:	e011      	b.n	8007fe8 <RTC_SetTime+0xa4>
	case 2:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_TUESDAY; 	break;
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	733b      	strb	r3, [r7, #12]
 8007fc8:	e00e      	b.n	8007fe8 <RTC_SetTime+0xa4>
	case 3: RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_WEDNESDAY; 	break;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	733b      	strb	r3, [r7, #12]
 8007fce:	e00b      	b.n	8007fe8 <RTC_SetTime+0xa4>
	case 4:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_THURSDAY; 	break;
 8007fd0:	2304      	movs	r3, #4
 8007fd2:	733b      	strb	r3, [r7, #12]
 8007fd4:	e008      	b.n	8007fe8 <RTC_SetTime+0xa4>
	case 5:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_FRIDAY; 	break;
 8007fd6:	2305      	movs	r3, #5
 8007fd8:	733b      	strb	r3, [r7, #12]
 8007fda:	e005      	b.n	8007fe8 <RTC_SetTime+0xa4>
	case 6:	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_SATURDAY;	break;
 8007fdc:	2306      	movs	r3, #6
 8007fde:	733b      	strb	r3, [r7, #12]
 8007fe0:	e002      	b.n	8007fe8 <RTC_SetTime+0xa4>
	default: RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_SUNDAY; 	break;
 8007fe2:	2307      	movs	r3, #7
 8007fe4:	733b      	strb	r3, [r7, #12]
 8007fe6:	bf00      	nop
	}

	RTC_DateStruct.Day = time->tm_mday;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	73bb      	strb	r3, [r7, #14]
	RTC_DateStruct.Month = time->tm_mon + 1;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	737b      	strb	r3, [r7, #13]
	RTC_DateStruct.Year = time->tm_year;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	b2db      	uxtb	r3, r3
 8008002:	73fb      	strb	r3, [r7, #15]
	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8008004:	f107 030c 	add.w	r3, r7, #12
 8008008:	461a      	mov	r2, r3
 800800a:	2100      	movs	r1, #0
 800800c:	4806      	ldr	r0, [pc, #24]	; (8008028 <RTC_SetTime+0xe4>)
 800800e:	f7fb f813 	bl	8003038 <LL_RTC_DATE_Init>

	LL_RTC_DisableInitMode(RTC);
 8008012:	4805      	ldr	r0, [pc, #20]	; (8008028 <RTC_SetTime+0xe4>)
 8008014:	f7ff fe22 	bl	8007c5c <LL_RTC_DisableInitMode>
	LL_RTC_EnableWriteProtection(RTC);
 8008018:	4803      	ldr	r0, [pc, #12]	; (8008028 <RTC_SetTime+0xe4>)
 800801a:	f7ff fe56 	bl	8007cca <LL_RTC_EnableWriteProtection>
}
 800801e:	bf00      	nop
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	40002800 	.word	0x40002800

0800802c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008032:	2300      	movs	r3, #0
 8008034:	607b      	str	r3, [r7, #4]
 8008036:	4a12      	ldr	r2, [pc, #72]	; (8008080 <HAL_MspInit+0x54>)
 8008038:	4b11      	ldr	r3, [pc, #68]	; (8008080 <HAL_MspInit+0x54>)
 800803a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008040:	6453      	str	r3, [r2, #68]	; 0x44
 8008042:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <HAL_MspInit+0x54>)
 8008044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800804a:	607b      	str	r3, [r7, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800804e:	2300      	movs	r3, #0
 8008050:	603b      	str	r3, [r7, #0]
 8008052:	4a0b      	ldr	r2, [pc, #44]	; (8008080 <HAL_MspInit+0x54>)
 8008054:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <HAL_MspInit+0x54>)
 8008056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800805c:	6413      	str	r3, [r2, #64]	; 0x40
 800805e:	4b08      	ldr	r3, [pc, #32]	; (8008080 <HAL_MspInit+0x54>)
 8008060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008066:	603b      	str	r3, [r7, #0]
 8008068:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800806a:	2200      	movs	r2, #0
 800806c:	210f      	movs	r1, #15
 800806e:	f06f 0001 	mvn.w	r0, #1
 8008072:	f7fa f873 	bl	800215c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	40023800 	.word	0x40023800

08008084 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b08c      	sub	sp, #48	; 0x30
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8008094:	2200      	movs	r2, #0
 8008096:	6879      	ldr	r1, [r7, #4]
 8008098:	2019      	movs	r0, #25
 800809a:	f7fa f85f 	bl	800215c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800809e:	2019      	movs	r0, #25
 80080a0:	f7fa f878 	bl	8002194 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80080a4:	2300      	movs	r3, #0
 80080a6:	60fb      	str	r3, [r7, #12]
 80080a8:	4a1f      	ldr	r2, [pc, #124]	; (8008128 <HAL_InitTick+0xa4>)
 80080aa:	4b1f      	ldr	r3, [pc, #124]	; (8008128 <HAL_InitTick+0xa4>)
 80080ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ae:	f043 0301 	orr.w	r3, r3, #1
 80080b2:	6453      	str	r3, [r2, #68]	; 0x44
 80080b4:	4b1c      	ldr	r3, [pc, #112]	; (8008128 <HAL_InitTick+0xa4>)
 80080b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b8:	f003 0301 	and.w	r3, r3, #1
 80080bc:	60fb      	str	r3, [r7, #12]
 80080be:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80080c0:	f107 0210 	add.w	r2, r7, #16
 80080c4:	f107 0314 	add.w	r3, r7, #20
 80080c8:	4611      	mov	r1, r2
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fa f890 	bl	80021f0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80080d0:	f7fa f87a 	bl	80021c8 <HAL_RCC_GetPCLK2Freq>
 80080d4:	4603      	mov	r3, r0
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	4a13      	ldr	r2, [pc, #76]	; (800812c <HAL_InitTick+0xa8>)
 80080de:	fba2 2303 	umull	r2, r3, r2, r3
 80080e2:	0c9b      	lsrs	r3, r3, #18
 80080e4:	3b01      	subs	r3, #1
 80080e6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80080e8:	4b11      	ldr	r3, [pc, #68]	; (8008130 <HAL_InitTick+0xac>)
 80080ea:	4a12      	ldr	r2, [pc, #72]	; (8008134 <HAL_InitTick+0xb0>)
 80080ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80080ee:	4b10      	ldr	r3, [pc, #64]	; (8008130 <HAL_InitTick+0xac>)
 80080f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80080f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80080f6:	4a0e      	ldr	r2, [pc, #56]	; (8008130 <HAL_InitTick+0xac>)
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80080fc:	4b0c      	ldr	r3, [pc, #48]	; (8008130 <HAL_InitTick+0xac>)
 80080fe:	2200      	movs	r2, #0
 8008100:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008102:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <HAL_InitTick+0xac>)
 8008104:	2200      	movs	r2, #0
 8008106:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8008108:	4809      	ldr	r0, [pc, #36]	; (8008130 <HAL_InitTick+0xac>)
 800810a:	f7fa f8a3 	bl	8002254 <HAL_TIM_Base_Init>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d104      	bne.n	800811e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8008114:	4806      	ldr	r0, [pc, #24]	; (8008130 <HAL_InitTick+0xac>)
 8008116:	f7fa f8d2 	bl	80022be <HAL_TIM_Base_Start_IT>
 800811a:	4603      	mov	r3, r0
 800811c:	e000      	b.n	8008120 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
}
 8008120:	4618      	mov	r0, r3
 8008122:	3730      	adds	r7, #48	; 0x30
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	40023800 	.word	0x40023800
 800812c:	431bde83 	.word	0x431bde83
 8008130:	20014ab4 	.word	0x20014ab4
 8008134:	40010000 	.word	0x40010000

08008138 <NMI_Handler>:
#include "task.h"

extern TIM_HandleTypeDef htim1;

void NMI_Handler(void)
{
 8008138:	b480      	push	{r7}
 800813a:	af00      	add	r7, sp, #0

}
 800813c:	bf00      	nop
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8008146:	b480      	push	{r7}
 8008148:	af00      	add	r7, sp, #0
	while (1)
 800814a:	e7fe      	b.n	800814a <HardFault_Handler+0x4>

0800814c <MemManage_Handler>:

	}
}

void MemManage_Handler(void)
{
 800814c:	b480      	push	{r7}
 800814e:	af00      	add	r7, sp, #0
	while (1)
 8008150:	e7fe      	b.n	8008150 <MemManage_Handler+0x4>

08008152 <BusFault_Handler>:

	}
}

void BusFault_Handler(void)
{
 8008152:	b480      	push	{r7}
 8008154:	af00      	add	r7, sp, #0
	while (1)
 8008156:	e7fe      	b.n	8008156 <BusFault_Handler+0x4>

08008158 <UsageFault_Handler>:

	}
}

void UsageFault_Handler(void)
{
 8008158:	b480      	push	{r7}
 800815a:	af00      	add	r7, sp, #0
	while (1)
 800815c:	e7fe      	b.n	800815c <UsageFault_Handler+0x4>

0800815e <DebugMon_Handler>:

	}
}

void DebugMon_Handler(void)
{
 800815e:	b480      	push	{r7}
 8008160:	af00      	add	r7, sp, #0

}
 8008162:	bf00      	nop
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim1);
 8008170:	4802      	ldr	r0, [pc, #8]	; (800817c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8008172:	f7fa f8c8 	bl	8002306 <HAL_TIM_IRQHandler>
}
 8008176:	bf00      	nop
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	20014ab4 	.word	0x20014ab4

08008180 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008188:	4b11      	ldr	r3, [pc, #68]	; (80081d0 <_sbrk+0x50>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d102      	bne.n	8008196 <_sbrk+0x16>
		heap_end = &end;
 8008190:	4b0f      	ldr	r3, [pc, #60]	; (80081d0 <_sbrk+0x50>)
 8008192:	4a10      	ldr	r2, [pc, #64]	; (80081d4 <_sbrk+0x54>)
 8008194:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008196:	4b0e      	ldr	r3, [pc, #56]	; (80081d0 <_sbrk+0x50>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800819c:	4b0c      	ldr	r3, [pc, #48]	; (80081d0 <_sbrk+0x50>)
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4413      	add	r3, r2
 80081a4:	466a      	mov	r2, sp
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d907      	bls.n	80081ba <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80081aa:	f000 f855 	bl	8008258 <__errno>
 80081ae:	4602      	mov	r2, r0
 80081b0:	230c      	movs	r3, #12
 80081b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80081b4:	f04f 33ff 	mov.w	r3, #4294967295
 80081b8:	e006      	b.n	80081c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80081ba:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <_sbrk+0x50>)
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4413      	add	r3, r2
 80081c2:	4a03      	ldr	r2, [pc, #12]	; (80081d0 <_sbrk+0x50>)
 80081c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80081c6:	68fb      	ldr	r3, [r7, #12]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	20008b74 	.word	0x20008b74
 80081d4:	20014af8 	.word	0x20014af8

080081d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80081dc:	4a08      	ldr	r2, [pc, #32]	; (8008200 <SystemInit+0x28>)
 80081de:	4b08      	ldr	r3, [pc, #32]	; (8008200 <SystemInit+0x28>)
 80081e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80081ec:	4b04      	ldr	r3, [pc, #16]	; (8008200 <SystemInit+0x28>)
 80081ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80081f2:	609a      	str	r2, [r3, #8]
#endif
}
 80081f4:	bf00      	nop
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	e000ed00 	.word	0xe000ed00

08008204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800823c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008208:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800820a:	e003      	b.n	8008214 <LoopCopyDataInit>

0800820c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800820c:	4b0c      	ldr	r3, [pc, #48]	; (8008240 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800820e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008210:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008212:	3104      	adds	r1, #4

08008214 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008214:	480b      	ldr	r0, [pc, #44]	; (8008244 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008216:	4b0c      	ldr	r3, [pc, #48]	; (8008248 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008218:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800821a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800821c:	d3f6      	bcc.n	800820c <CopyDataInit>
  ldr  r2, =_sbss
 800821e:	4a0b      	ldr	r2, [pc, #44]	; (800824c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008220:	e002      	b.n	8008228 <LoopFillZerobss>

08008222 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008222:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008224:	f842 3b04 	str.w	r3, [r2], #4

08008228 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008228:	4b09      	ldr	r3, [pc, #36]	; (8008250 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800822a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800822c:	d3f9      	bcc.n	8008222 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800822e:	f7ff ffd3 	bl	80081d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008232:	f000 f817 	bl	8008264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008236:	f7ff fc5d 	bl	8007af4 <main>
  bx  lr    
 800823a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800823c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008240:	0800a330 	.word	0x0800a330
  ldr  r0, =_sdata
 8008244:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008248:	20000228 	.word	0x20000228
  ldr  r2, =_sbss
 800824c:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 8008250:	20014af8 	.word	0x20014af8

08008254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008254:	e7fe      	b.n	8008254 <ADC_IRQHandler>
	...

08008258 <__errno>:
 8008258:	4b01      	ldr	r3, [pc, #4]	; (8008260 <__errno+0x8>)
 800825a:	6818      	ldr	r0, [r3, #0]
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	20000010 	.word	0x20000010

08008264 <__libc_init_array>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	4e0d      	ldr	r6, [pc, #52]	; (800829c <__libc_init_array+0x38>)
 8008268:	4c0d      	ldr	r4, [pc, #52]	; (80082a0 <__libc_init_array+0x3c>)
 800826a:	1ba4      	subs	r4, r4, r6
 800826c:	10a4      	asrs	r4, r4, #2
 800826e:	2500      	movs	r5, #0
 8008270:	42a5      	cmp	r5, r4
 8008272:	d109      	bne.n	8008288 <__libc_init_array+0x24>
 8008274:	4e0b      	ldr	r6, [pc, #44]	; (80082a4 <__libc_init_array+0x40>)
 8008276:	4c0c      	ldr	r4, [pc, #48]	; (80082a8 <__libc_init_array+0x44>)
 8008278:	f001 fdb2 	bl	8009de0 <_init>
 800827c:	1ba4      	subs	r4, r4, r6
 800827e:	10a4      	asrs	r4, r4, #2
 8008280:	2500      	movs	r5, #0
 8008282:	42a5      	cmp	r5, r4
 8008284:	d105      	bne.n	8008292 <__libc_init_array+0x2e>
 8008286:	bd70      	pop	{r4, r5, r6, pc}
 8008288:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800828c:	4798      	blx	r3
 800828e:	3501      	adds	r5, #1
 8008290:	e7ee      	b.n	8008270 <__libc_init_array+0xc>
 8008292:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008296:	4798      	blx	r3
 8008298:	3501      	adds	r5, #1
 800829a:	e7f2      	b.n	8008282 <__libc_init_array+0x1e>
 800829c:	0800a328 	.word	0x0800a328
 80082a0:	0800a328 	.word	0x0800a328
 80082a4:	0800a328 	.word	0x0800a328
 80082a8:	0800a32c 	.word	0x0800a32c

080082ac <localtime_r>:
 80082ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b0:	460c      	mov	r4, r1
 80082b2:	4680      	mov	r8, r0
 80082b4:	f000 fc8a 	bl	8008bcc <__gettzinfo>
 80082b8:	4621      	mov	r1, r4
 80082ba:	4607      	mov	r7, r0
 80082bc:	4640      	mov	r0, r8
 80082be:	f000 fc89 	bl	8008bd4 <gmtime_r>
 80082c2:	6946      	ldr	r6, [r0, #20]
 80082c4:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80082c8:	07b3      	lsls	r3, r6, #30
 80082ca:	4604      	mov	r4, r0
 80082cc:	d105      	bne.n	80082da <localtime_r+0x2e>
 80082ce:	2264      	movs	r2, #100	; 0x64
 80082d0:	fb96 f3f2 	sdiv	r3, r6, r2
 80082d4:	fb02 6313 	mls	r3, r2, r3, r6
 80082d8:	b9fb      	cbnz	r3, 800831a <localtime_r+0x6e>
 80082da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80082de:	fb96 f5f3 	sdiv	r5, r6, r3
 80082e2:	fb03 6515 	mls	r5, r3, r5, r6
 80082e6:	fab5 f585 	clz	r5, r5
 80082ea:	096d      	lsrs	r5, r5, #5
 80082ec:	4b5f      	ldr	r3, [pc, #380]	; (800846c <localtime_r+0x1c0>)
 80082ee:	2230      	movs	r2, #48	; 0x30
 80082f0:	fb02 3505 	mla	r5, r2, r5, r3
 80082f4:	f000 fa98 	bl	8008828 <__tz_lock>
 80082f8:	f000 fa98 	bl	800882c <_tzset_unlocked>
 80082fc:	4b5c      	ldr	r3, [pc, #368]	; (8008470 <localtime_r+0x1c4>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	b1e3      	cbz	r3, 800833c <localtime_r+0x90>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	429e      	cmp	r6, r3
 8008306:	d10a      	bne.n	800831e <localtime_r+0x72>
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	f8d8 3000 	ldr.w	r3, [r8]
 800830e:	69fa      	ldr	r2, [r7, #28]
 8008310:	b969      	cbnz	r1, 800832e <localtime_r+0x82>
 8008312:	4293      	cmp	r3, r2
 8008314:	db0d      	blt.n	8008332 <localtime_r+0x86>
 8008316:	2301      	movs	r3, #1
 8008318:	e010      	b.n	800833c <localtime_r+0x90>
 800831a:	2501      	movs	r5, #1
 800831c:	e7e6      	b.n	80082ec <localtime_r+0x40>
 800831e:	4630      	mov	r0, r6
 8008320:	f000 f9da 	bl	80086d8 <__tzcalc_limits>
 8008324:	2800      	cmp	r0, #0
 8008326:	d1ef      	bne.n	8008308 <localtime_r+0x5c>
 8008328:	f04f 33ff 	mov.w	r3, #4294967295
 800832c:	e006      	b.n	800833c <localtime_r+0x90>
 800832e:	4293      	cmp	r3, r2
 8008330:	db55      	blt.n	80083de <localtime_r+0x132>
 8008332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008334:	4293      	cmp	r3, r2
 8008336:	bfac      	ite	ge
 8008338:	2300      	movge	r3, #0
 800833a:	2301      	movlt	r3, #1
 800833c:	6223      	str	r3, [r4, #32]
 800833e:	6a23      	ldr	r3, [r4, #32]
 8008340:	2b01      	cmp	r3, #1
 8008342:	bf0c      	ite	eq
 8008344:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8008346:	6a39      	ldrne	r1, [r7, #32]
 8008348:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800834c:	203c      	movs	r0, #60	; 0x3c
 800834e:	fb91 f6f3 	sdiv	r6, r1, r3
 8008352:	fb03 1316 	mls	r3, r3, r6, r1
 8008356:	6861      	ldr	r1, [r4, #4]
 8008358:	fb93 f2f0 	sdiv	r2, r3, r0
 800835c:	fb00 3012 	mls	r0, r0, r2, r3
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	1a89      	subs	r1, r1, r2
 8008364:	68a2      	ldr	r2, [r4, #8]
 8008366:	6061      	str	r1, [r4, #4]
 8008368:	1a1b      	subs	r3, r3, r0
 800836a:	1b92      	subs	r2, r2, r6
 800836c:	2b3b      	cmp	r3, #59	; 0x3b
 800836e:	6023      	str	r3, [r4, #0]
 8008370:	60a2      	str	r2, [r4, #8]
 8008372:	dd36      	ble.n	80083e2 <localtime_r+0x136>
 8008374:	3101      	adds	r1, #1
 8008376:	6061      	str	r1, [r4, #4]
 8008378:	3b3c      	subs	r3, #60	; 0x3c
 800837a:	6023      	str	r3, [r4, #0]
 800837c:	6863      	ldr	r3, [r4, #4]
 800837e:	2b3b      	cmp	r3, #59	; 0x3b
 8008380:	dd35      	ble.n	80083ee <localtime_r+0x142>
 8008382:	3201      	adds	r2, #1
 8008384:	60a2      	str	r2, [r4, #8]
 8008386:	3b3c      	subs	r3, #60	; 0x3c
 8008388:	6063      	str	r3, [r4, #4]
 800838a:	68a3      	ldr	r3, [r4, #8]
 800838c:	2b17      	cmp	r3, #23
 800838e:	dd34      	ble.n	80083fa <localtime_r+0x14e>
 8008390:	69e2      	ldr	r2, [r4, #28]
 8008392:	3201      	adds	r2, #1
 8008394:	61e2      	str	r2, [r4, #28]
 8008396:	69a2      	ldr	r2, [r4, #24]
 8008398:	3201      	adds	r2, #1
 800839a:	2a06      	cmp	r2, #6
 800839c:	bfc8      	it	gt
 800839e:	2200      	movgt	r2, #0
 80083a0:	61a2      	str	r2, [r4, #24]
 80083a2:	68e2      	ldr	r2, [r4, #12]
 80083a4:	3b18      	subs	r3, #24
 80083a6:	3201      	adds	r2, #1
 80083a8:	60a3      	str	r3, [r4, #8]
 80083aa:	6923      	ldr	r3, [r4, #16]
 80083ac:	60e2      	str	r2, [r4, #12]
 80083ae:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80083b2:	428a      	cmp	r2, r1
 80083b4:	dd0e      	ble.n	80083d4 <localtime_r+0x128>
 80083b6:	3301      	adds	r3, #1
 80083b8:	2b0c      	cmp	r3, #12
 80083ba:	bf0c      	ite	eq
 80083bc:	6963      	ldreq	r3, [r4, #20]
 80083be:	6123      	strne	r3, [r4, #16]
 80083c0:	eba2 0201 	sub.w	r2, r2, r1
 80083c4:	60e2      	str	r2, [r4, #12]
 80083c6:	bf01      	itttt	eq
 80083c8:	3301      	addeq	r3, #1
 80083ca:	2200      	moveq	r2, #0
 80083cc:	6122      	streq	r2, [r4, #16]
 80083ce:	6163      	streq	r3, [r4, #20]
 80083d0:	bf08      	it	eq
 80083d2:	61e2      	streq	r2, [r4, #28]
 80083d4:	f000 fa29 	bl	800882a <__tz_unlock>
 80083d8:	4620      	mov	r0, r4
 80083da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083de:	2300      	movs	r3, #0
 80083e0:	e7ac      	b.n	800833c <localtime_r+0x90>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	daca      	bge.n	800837c <localtime_r+0xd0>
 80083e6:	3901      	subs	r1, #1
 80083e8:	6061      	str	r1, [r4, #4]
 80083ea:	333c      	adds	r3, #60	; 0x3c
 80083ec:	e7c5      	b.n	800837a <localtime_r+0xce>
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	dacb      	bge.n	800838a <localtime_r+0xde>
 80083f2:	3a01      	subs	r2, #1
 80083f4:	60a2      	str	r2, [r4, #8]
 80083f6:	333c      	adds	r3, #60	; 0x3c
 80083f8:	e7c6      	b.n	8008388 <localtime_r+0xdc>
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	daea      	bge.n	80083d4 <localtime_r+0x128>
 80083fe:	69e2      	ldr	r2, [r4, #28]
 8008400:	3a01      	subs	r2, #1
 8008402:	61e2      	str	r2, [r4, #28]
 8008404:	69a2      	ldr	r2, [r4, #24]
 8008406:	3a01      	subs	r2, #1
 8008408:	bf48      	it	mi
 800840a:	2206      	movmi	r2, #6
 800840c:	61a2      	str	r2, [r4, #24]
 800840e:	68e2      	ldr	r2, [r4, #12]
 8008410:	3318      	adds	r3, #24
 8008412:	3a01      	subs	r2, #1
 8008414:	60e2      	str	r2, [r4, #12]
 8008416:	60a3      	str	r3, [r4, #8]
 8008418:	2a00      	cmp	r2, #0
 800841a:	d1db      	bne.n	80083d4 <localtime_r+0x128>
 800841c:	6923      	ldr	r3, [r4, #16]
 800841e:	3b01      	subs	r3, #1
 8008420:	d405      	bmi.n	800842e <localtime_r+0x182>
 8008422:	6123      	str	r3, [r4, #16]
 8008424:	6923      	ldr	r3, [r4, #16]
 8008426:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800842a:	60e3      	str	r3, [r4, #12]
 800842c:	e7d2      	b.n	80083d4 <localtime_r+0x128>
 800842e:	230b      	movs	r3, #11
 8008430:	6123      	str	r3, [r4, #16]
 8008432:	6963      	ldr	r3, [r4, #20]
 8008434:	1e5a      	subs	r2, r3, #1
 8008436:	f012 0f03 	tst.w	r2, #3
 800843a:	6162      	str	r2, [r4, #20]
 800843c:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8008440:	d105      	bne.n	800844e <localtime_r+0x1a2>
 8008442:	2164      	movs	r1, #100	; 0x64
 8008444:	fb92 f3f1 	sdiv	r3, r2, r1
 8008448:	fb01 2313 	mls	r3, r1, r3, r2
 800844c:	b963      	cbnz	r3, 8008468 <localtime_r+0x1bc>
 800844e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008452:	fb92 f3f1 	sdiv	r3, r2, r1
 8008456:	fb01 2313 	mls	r3, r1, r3, r2
 800845a:	fab3 f383 	clz	r3, r3
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8008464:	61e3      	str	r3, [r4, #28]
 8008466:	e7dd      	b.n	8008424 <localtime_r+0x178>
 8008468:	2301      	movs	r3, #1
 800846a:	e7f9      	b.n	8008460 <localtime_r+0x1b4>
 800846c:	0800a0c8 	.word	0x0800a0c8
 8008470:	20008b94 	.word	0x20008b94

08008474 <memcmp>:
 8008474:	b510      	push	{r4, lr}
 8008476:	3901      	subs	r1, #1
 8008478:	4402      	add	r2, r0
 800847a:	4290      	cmp	r0, r2
 800847c:	d101      	bne.n	8008482 <memcmp+0xe>
 800847e:	2000      	movs	r0, #0
 8008480:	bd10      	pop	{r4, pc}
 8008482:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008486:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800848a:	42a3      	cmp	r3, r4
 800848c:	d0f5      	beq.n	800847a <memcmp+0x6>
 800848e:	1b18      	subs	r0, r3, r4
 8008490:	bd10      	pop	{r4, pc}

08008492 <memcpy>:
 8008492:	b510      	push	{r4, lr}
 8008494:	1e43      	subs	r3, r0, #1
 8008496:	440a      	add	r2, r1
 8008498:	4291      	cmp	r1, r2
 800849a:	d100      	bne.n	800849e <memcpy+0xc>
 800849c:	bd10      	pop	{r4, pc}
 800849e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084a6:	e7f7      	b.n	8008498 <memcpy+0x6>

080084a8 <memset>:
 80084a8:	4402      	add	r2, r0
 80084aa:	4603      	mov	r3, r0
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d100      	bne.n	80084b2 <memset+0xa>
 80084b0:	4770      	bx	lr
 80084b2:	f803 1b01 	strb.w	r1, [r3], #1
 80084b6:	e7f9      	b.n	80084ac <memset+0x4>

080084b8 <siprintf>:
 80084b8:	b40e      	push	{r1, r2, r3}
 80084ba:	b500      	push	{lr}
 80084bc:	b09c      	sub	sp, #112	; 0x70
 80084be:	f44f 7102 	mov.w	r1, #520	; 0x208
 80084c2:	ab1d      	add	r3, sp, #116	; 0x74
 80084c4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80084c8:	9002      	str	r0, [sp, #8]
 80084ca:	9006      	str	r0, [sp, #24]
 80084cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084d0:	480a      	ldr	r0, [pc, #40]	; (80084fc <siprintf+0x44>)
 80084d2:	9104      	str	r1, [sp, #16]
 80084d4:	9107      	str	r1, [sp, #28]
 80084d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80084da:	f853 2b04 	ldr.w	r2, [r3], #4
 80084de:	f8ad 1016 	strh.w	r1, [sp, #22]
 80084e2:	6800      	ldr	r0, [r0, #0]
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	a902      	add	r1, sp, #8
 80084e8:	f000 fd42 	bl	8008f70 <_svfiprintf_r>
 80084ec:	9b02      	ldr	r3, [sp, #8]
 80084ee:	2200      	movs	r2, #0
 80084f0:	701a      	strb	r2, [r3, #0]
 80084f2:	b01c      	add	sp, #112	; 0x70
 80084f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80084f8:	b003      	add	sp, #12
 80084fa:	4770      	bx	lr
 80084fc:	20000010 	.word	0x20000010

08008500 <strchr>:
 8008500:	b2c9      	uxtb	r1, r1
 8008502:	4603      	mov	r3, r0
 8008504:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008508:	b11a      	cbz	r2, 8008512 <strchr+0x12>
 800850a:	4291      	cmp	r1, r2
 800850c:	d1f9      	bne.n	8008502 <strchr+0x2>
 800850e:	4618      	mov	r0, r3
 8008510:	4770      	bx	lr
 8008512:	2900      	cmp	r1, #0
 8008514:	bf0c      	ite	eq
 8008516:	4618      	moveq	r0, r3
 8008518:	2000      	movne	r0, #0
 800851a:	4770      	bx	lr

0800851c <strcpy>:
 800851c:	4603      	mov	r3, r0
 800851e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008522:	f803 2b01 	strb.w	r2, [r3], #1
 8008526:	2a00      	cmp	r2, #0
 8008528:	d1f9      	bne.n	800851e <strcpy+0x2>
 800852a:	4770      	bx	lr

0800852c <strncmp>:
 800852c:	b510      	push	{r4, lr}
 800852e:	b16a      	cbz	r2, 800854c <strncmp+0x20>
 8008530:	3901      	subs	r1, #1
 8008532:	1884      	adds	r4, r0, r2
 8008534:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008538:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800853c:	4293      	cmp	r3, r2
 800853e:	d103      	bne.n	8008548 <strncmp+0x1c>
 8008540:	42a0      	cmp	r0, r4
 8008542:	d001      	beq.n	8008548 <strncmp+0x1c>
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1f5      	bne.n	8008534 <strncmp+0x8>
 8008548:	1a98      	subs	r0, r3, r2
 800854a:	bd10      	pop	{r4, pc}
 800854c:	4610      	mov	r0, r2
 800854e:	bd10      	pop	{r4, pc}

08008550 <strstr>:
 8008550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008552:	7803      	ldrb	r3, [r0, #0]
 8008554:	b133      	cbz	r3, 8008564 <strstr+0x14>
 8008556:	4603      	mov	r3, r0
 8008558:	4618      	mov	r0, r3
 800855a:	1c5e      	adds	r6, r3, #1
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	b933      	cbnz	r3, 800856e <strstr+0x1e>
 8008560:	4618      	mov	r0, r3
 8008562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008564:	780b      	ldrb	r3, [r1, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	bf18      	it	ne
 800856a:	2000      	movne	r0, #0
 800856c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800856e:	1e4d      	subs	r5, r1, #1
 8008570:	1e44      	subs	r4, r0, #1
 8008572:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8008576:	2a00      	cmp	r2, #0
 8008578:	d0f3      	beq.n	8008562 <strstr+0x12>
 800857a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800857e:	4297      	cmp	r7, r2
 8008580:	4633      	mov	r3, r6
 8008582:	d0f6      	beq.n	8008572 <strstr+0x22>
 8008584:	e7e8      	b.n	8008558 <strstr+0x8>

08008586 <_strtol_l.isra.0>:
 8008586:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858a:	4680      	mov	r8, r0
 800858c:	4689      	mov	r9, r1
 800858e:	4692      	mov	sl, r2
 8008590:	461f      	mov	r7, r3
 8008592:	468b      	mov	fp, r1
 8008594:	465d      	mov	r5, fp
 8008596:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008598:	f815 4b01 	ldrb.w	r4, [r5], #1
 800859c:	f000 fbb4 	bl	8008d08 <__locale_ctype_ptr_l>
 80085a0:	4420      	add	r0, r4
 80085a2:	7846      	ldrb	r6, [r0, #1]
 80085a4:	f016 0608 	ands.w	r6, r6, #8
 80085a8:	d10b      	bne.n	80085c2 <_strtol_l.isra.0+0x3c>
 80085aa:	2c2d      	cmp	r4, #45	; 0x2d
 80085ac:	d10b      	bne.n	80085c6 <_strtol_l.isra.0+0x40>
 80085ae:	782c      	ldrb	r4, [r5, #0]
 80085b0:	2601      	movs	r6, #1
 80085b2:	f10b 0502 	add.w	r5, fp, #2
 80085b6:	b167      	cbz	r7, 80085d2 <_strtol_l.isra.0+0x4c>
 80085b8:	2f10      	cmp	r7, #16
 80085ba:	d114      	bne.n	80085e6 <_strtol_l.isra.0+0x60>
 80085bc:	2c30      	cmp	r4, #48	; 0x30
 80085be:	d00a      	beq.n	80085d6 <_strtol_l.isra.0+0x50>
 80085c0:	e011      	b.n	80085e6 <_strtol_l.isra.0+0x60>
 80085c2:	46ab      	mov	fp, r5
 80085c4:	e7e6      	b.n	8008594 <_strtol_l.isra.0+0xe>
 80085c6:	2c2b      	cmp	r4, #43	; 0x2b
 80085c8:	bf04      	itt	eq
 80085ca:	782c      	ldrbeq	r4, [r5, #0]
 80085cc:	f10b 0502 	addeq.w	r5, fp, #2
 80085d0:	e7f1      	b.n	80085b6 <_strtol_l.isra.0+0x30>
 80085d2:	2c30      	cmp	r4, #48	; 0x30
 80085d4:	d127      	bne.n	8008626 <_strtol_l.isra.0+0xa0>
 80085d6:	782b      	ldrb	r3, [r5, #0]
 80085d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085dc:	2b58      	cmp	r3, #88	; 0x58
 80085de:	d14b      	bne.n	8008678 <_strtol_l.isra.0+0xf2>
 80085e0:	786c      	ldrb	r4, [r5, #1]
 80085e2:	2710      	movs	r7, #16
 80085e4:	3502      	adds	r5, #2
 80085e6:	2e00      	cmp	r6, #0
 80085e8:	bf0c      	ite	eq
 80085ea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80085ee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80085f2:	2200      	movs	r2, #0
 80085f4:	fbb1 fef7 	udiv	lr, r1, r7
 80085f8:	4610      	mov	r0, r2
 80085fa:	fb07 1c1e 	mls	ip, r7, lr, r1
 80085fe:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008602:	2b09      	cmp	r3, #9
 8008604:	d811      	bhi.n	800862a <_strtol_l.isra.0+0xa4>
 8008606:	461c      	mov	r4, r3
 8008608:	42a7      	cmp	r7, r4
 800860a:	dd1d      	ble.n	8008648 <_strtol_l.isra.0+0xc2>
 800860c:	1c53      	adds	r3, r2, #1
 800860e:	d007      	beq.n	8008620 <_strtol_l.isra.0+0x9a>
 8008610:	4586      	cmp	lr, r0
 8008612:	d316      	bcc.n	8008642 <_strtol_l.isra.0+0xbc>
 8008614:	d101      	bne.n	800861a <_strtol_l.isra.0+0x94>
 8008616:	45a4      	cmp	ip, r4
 8008618:	db13      	blt.n	8008642 <_strtol_l.isra.0+0xbc>
 800861a:	fb00 4007 	mla	r0, r0, r7, r4
 800861e:	2201      	movs	r2, #1
 8008620:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008624:	e7eb      	b.n	80085fe <_strtol_l.isra.0+0x78>
 8008626:	270a      	movs	r7, #10
 8008628:	e7dd      	b.n	80085e6 <_strtol_l.isra.0+0x60>
 800862a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800862e:	2b19      	cmp	r3, #25
 8008630:	d801      	bhi.n	8008636 <_strtol_l.isra.0+0xb0>
 8008632:	3c37      	subs	r4, #55	; 0x37
 8008634:	e7e8      	b.n	8008608 <_strtol_l.isra.0+0x82>
 8008636:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800863a:	2b19      	cmp	r3, #25
 800863c:	d804      	bhi.n	8008648 <_strtol_l.isra.0+0xc2>
 800863e:	3c57      	subs	r4, #87	; 0x57
 8008640:	e7e2      	b.n	8008608 <_strtol_l.isra.0+0x82>
 8008642:	f04f 32ff 	mov.w	r2, #4294967295
 8008646:	e7eb      	b.n	8008620 <_strtol_l.isra.0+0x9a>
 8008648:	1c53      	adds	r3, r2, #1
 800864a:	d108      	bne.n	800865e <_strtol_l.isra.0+0xd8>
 800864c:	2322      	movs	r3, #34	; 0x22
 800864e:	f8c8 3000 	str.w	r3, [r8]
 8008652:	4608      	mov	r0, r1
 8008654:	f1ba 0f00 	cmp.w	sl, #0
 8008658:	d107      	bne.n	800866a <_strtol_l.isra.0+0xe4>
 800865a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865e:	b106      	cbz	r6, 8008662 <_strtol_l.isra.0+0xdc>
 8008660:	4240      	negs	r0, r0
 8008662:	f1ba 0f00 	cmp.w	sl, #0
 8008666:	d00c      	beq.n	8008682 <_strtol_l.isra.0+0xfc>
 8008668:	b122      	cbz	r2, 8008674 <_strtol_l.isra.0+0xee>
 800866a:	3d01      	subs	r5, #1
 800866c:	f8ca 5000 	str.w	r5, [sl]
 8008670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008674:	464d      	mov	r5, r9
 8008676:	e7f9      	b.n	800866c <_strtol_l.isra.0+0xe6>
 8008678:	2430      	movs	r4, #48	; 0x30
 800867a:	2f00      	cmp	r7, #0
 800867c:	d1b3      	bne.n	80085e6 <_strtol_l.isra.0+0x60>
 800867e:	2708      	movs	r7, #8
 8008680:	e7b1      	b.n	80085e6 <_strtol_l.isra.0+0x60>
 8008682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008688 <_strtol_r>:
 8008688:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800868a:	4c06      	ldr	r4, [pc, #24]	; (80086a4 <_strtol_r+0x1c>)
 800868c:	4d06      	ldr	r5, [pc, #24]	; (80086a8 <_strtol_r+0x20>)
 800868e:	6824      	ldr	r4, [r4, #0]
 8008690:	6a24      	ldr	r4, [r4, #32]
 8008692:	2c00      	cmp	r4, #0
 8008694:	bf08      	it	eq
 8008696:	462c      	moveq	r4, r5
 8008698:	9400      	str	r4, [sp, #0]
 800869a:	f7ff ff74 	bl	8008586 <_strtol_l.isra.0>
 800869e:	b003      	add	sp, #12
 80086a0:	bd30      	pop	{r4, r5, pc}
 80086a2:	bf00      	nop
 80086a4:	20000010 	.word	0x20000010
 80086a8:	200000bc 	.word	0x200000bc

080086ac <strtol>:
 80086ac:	4b08      	ldr	r3, [pc, #32]	; (80086d0 <strtol+0x24>)
 80086ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086b0:	681c      	ldr	r4, [r3, #0]
 80086b2:	4d08      	ldr	r5, [pc, #32]	; (80086d4 <strtol+0x28>)
 80086b4:	6a23      	ldr	r3, [r4, #32]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	bf08      	it	eq
 80086ba:	462b      	moveq	r3, r5
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	4613      	mov	r3, r2
 80086c0:	460a      	mov	r2, r1
 80086c2:	4601      	mov	r1, r0
 80086c4:	4620      	mov	r0, r4
 80086c6:	f7ff ff5e 	bl	8008586 <_strtol_l.isra.0>
 80086ca:	b003      	add	sp, #12
 80086cc:	bd30      	pop	{r4, r5, pc}
 80086ce:	bf00      	nop
 80086d0:	20000010 	.word	0x20000010
 80086d4:	200000bc 	.word	0x200000bc

080086d8 <__tzcalc_limits>:
 80086d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086dc:	4604      	mov	r4, r0
 80086de:	f000 fa75 	bl	8008bcc <__gettzinfo>
 80086e2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80086e6:	429c      	cmp	r4, r3
 80086e8:	f340 8098 	ble.w	800881c <__tzcalc_limits+0x144>
 80086ec:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80086f0:	18e3      	adds	r3, r4, r3
 80086f2:	109b      	asrs	r3, r3, #2
 80086f4:	f240 126d 	movw	r2, #365	; 0x16d
 80086f8:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 80086fc:	fb02 3505 	mla	r5, r2, r5, r3
 8008700:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8008704:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 8008708:	fb93 f3f2 	sdiv	r3, r3, r2
 800870c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8008710:	441d      	add	r5, r3
 8008712:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008716:	18a2      	adds	r2, r4, r2
 8008718:	fb94 f7f3 	sdiv	r7, r4, r3
 800871c:	fb92 f2f3 	sdiv	r2, r2, r3
 8008720:	fb03 4717 	mls	r7, r3, r7, r4
 8008724:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8008728:	4415      	add	r5, r2
 800872a:	fab7 fe87 	clz	lr, r7
 800872e:	2264      	movs	r2, #100	; 0x64
 8008730:	9301      	str	r3, [sp, #4]
 8008732:	f004 0303 	and.w	r3, r4, #3
 8008736:	fb94 f6f2 	sdiv	r6, r4, r2
 800873a:	6044      	str	r4, [r0, #4]
 800873c:	fb02 4616 	mls	r6, r2, r6, r4
 8008740:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8008744:	4601      	mov	r1, r0
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 800874c:	7a0b      	ldrb	r3, [r1, #8]
 800874e:	2b4a      	cmp	r3, #74	; 0x4a
 8008750:	d123      	bne.n	800879a <__tzcalc_limits+0xc2>
 8008752:	694c      	ldr	r4, [r1, #20]
 8008754:	9a00      	ldr	r2, [sp, #0]
 8008756:	192b      	adds	r3, r5, r4
 8008758:	b902      	cbnz	r2, 800875c <__tzcalc_limits+0x84>
 800875a:	b906      	cbnz	r6, 800875e <__tzcalc_limits+0x86>
 800875c:	b9df      	cbnz	r7, 8008796 <__tzcalc_limits+0xbe>
 800875e:	2c3b      	cmp	r4, #59	; 0x3b
 8008760:	bfd4      	ite	le
 8008762:	2400      	movle	r4, #0
 8008764:	2401      	movgt	r4, #1
 8008766:	441c      	add	r4, r3
 8008768:	3c01      	subs	r4, #1
 800876a:	4b2d      	ldr	r3, [pc, #180]	; (8008820 <__tzcalc_limits+0x148>)
 800876c:	698a      	ldr	r2, [r1, #24]
 800876e:	fb03 2404 	mla	r4, r3, r4, r2
 8008772:	6a0b      	ldr	r3, [r1, #32]
 8008774:	441c      	add	r4, r3
 8008776:	f841 4f1c 	str.w	r4, [r1, #28]!
 800877a:	9b01      	ldr	r3, [sp, #4]
 800877c:	428b      	cmp	r3, r1
 800877e:	d1e5      	bne.n	800874c <__tzcalc_limits+0x74>
 8008780:	69c3      	ldr	r3, [r0, #28]
 8008782:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008784:	4293      	cmp	r3, r2
 8008786:	bfac      	ite	ge
 8008788:	2300      	movge	r3, #0
 800878a:	2301      	movlt	r3, #1
 800878c:	6003      	str	r3, [r0, #0]
 800878e:	2001      	movs	r0, #1
 8008790:	b003      	add	sp, #12
 8008792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008796:	2400      	movs	r4, #0
 8008798:	e7e5      	b.n	8008766 <__tzcalc_limits+0x8e>
 800879a:	2b44      	cmp	r3, #68	; 0x44
 800879c:	d102      	bne.n	80087a4 <__tzcalc_limits+0xcc>
 800879e:	694b      	ldr	r3, [r1, #20]
 80087a0:	18ec      	adds	r4, r5, r3
 80087a2:	e7e2      	b.n	800876a <__tzcalc_limits+0x92>
 80087a4:	9b00      	ldr	r3, [sp, #0]
 80087a6:	bb7b      	cbnz	r3, 8008808 <__tzcalc_limits+0x130>
 80087a8:	2e00      	cmp	r6, #0
 80087aa:	bf0c      	ite	eq
 80087ac:	46f0      	moveq	r8, lr
 80087ae:	f04f 0801 	movne.w	r8, #1
 80087b2:	4b1c      	ldr	r3, [pc, #112]	; (8008824 <__tzcalc_limits+0x14c>)
 80087b4:	68cc      	ldr	r4, [r1, #12]
 80087b6:	2230      	movs	r2, #48	; 0x30
 80087b8:	fb02 3808 	mla	r8, r2, r8, r3
 80087bc:	f1a8 0a04 	sub.w	sl, r8, #4
 80087c0:	462b      	mov	r3, r5
 80087c2:	f04f 0901 	mov.w	r9, #1
 80087c6:	45a1      	cmp	r9, r4
 80087c8:	db20      	blt.n	800880c <__tzcalc_limits+0x134>
 80087ca:	2c01      	cmp	r4, #1
 80087cc:	bfb8      	it	lt
 80087ce:	2401      	movlt	r4, #1
 80087d0:	46a1      	mov	r9, r4
 80087d2:	f103 0b04 	add.w	fp, r3, #4
 80087d6:	2207      	movs	r2, #7
 80087d8:	694c      	ldr	r4, [r1, #20]
 80087da:	fb9b faf2 	sdiv	sl, fp, r2
 80087de:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 80087e2:	ebab 0a0a 	sub.w	sl, fp, sl
 80087e6:	ebb4 0a0a 	subs.w	sl, r4, sl
 80087ea:	690c      	ldr	r4, [r1, #16]
 80087ec:	44e1      	add	r9, ip
 80087ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80087f2:	bf48      	it	mi
 80087f4:	4492      	addmi	sl, r2
 80087f6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80087fa:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 80087fe:	4454      	add	r4, sl
 8008800:	4544      	cmp	r4, r8
 8008802:	da09      	bge.n	8008818 <__tzcalc_limits+0x140>
 8008804:	441c      	add	r4, r3
 8008806:	e7b0      	b.n	800876a <__tzcalc_limits+0x92>
 8008808:	46f0      	mov	r8, lr
 800880a:	e7d2      	b.n	80087b2 <__tzcalc_limits+0xda>
 800880c:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8008810:	f109 0901 	add.w	r9, r9, #1
 8008814:	445b      	add	r3, fp
 8008816:	e7d6      	b.n	80087c6 <__tzcalc_limits+0xee>
 8008818:	3c07      	subs	r4, #7
 800881a:	e7f1      	b.n	8008800 <__tzcalc_limits+0x128>
 800881c:	2000      	movs	r0, #0
 800881e:	e7b7      	b.n	8008790 <__tzcalc_limits+0xb8>
 8008820:	00015180 	.word	0x00015180
 8008824:	0800a0c8 	.word	0x0800a0c8

08008828 <__tz_lock>:
 8008828:	4770      	bx	lr

0800882a <__tz_unlock>:
 800882a:	4770      	bx	lr

0800882c <_tzset_unlocked>:
 800882c:	4b01      	ldr	r3, [pc, #4]	; (8008834 <_tzset_unlocked+0x8>)
 800882e:	6818      	ldr	r0, [r3, #0]
 8008830:	f000 b802 	b.w	8008838 <_tzset_unlocked_r>
 8008834:	20000010 	.word	0x20000010

08008838 <_tzset_unlocked_r>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	b08d      	sub	sp, #52	; 0x34
 800883e:	4607      	mov	r7, r0
 8008840:	f000 f9c4 	bl	8008bcc <__gettzinfo>
 8008844:	49b1      	ldr	r1, [pc, #708]	; (8008b0c <_tzset_unlocked_r+0x2d4>)
 8008846:	4eb2      	ldr	r6, [pc, #712]	; (8008b10 <_tzset_unlocked_r+0x2d8>)
 8008848:	4605      	mov	r5, r0
 800884a:	4638      	mov	r0, r7
 800884c:	f000 f9b6 	bl	8008bbc <_getenv_r>
 8008850:	4604      	mov	r4, r0
 8008852:	b970      	cbnz	r0, 8008872 <_tzset_unlocked_r+0x3a>
 8008854:	4baf      	ldr	r3, [pc, #700]	; (8008b14 <_tzset_unlocked_r+0x2dc>)
 8008856:	4ab0      	ldr	r2, [pc, #704]	; (8008b18 <_tzset_unlocked_r+0x2e0>)
 8008858:	6018      	str	r0, [r3, #0]
 800885a:	4bb0      	ldr	r3, [pc, #704]	; (8008b1c <_tzset_unlocked_r+0x2e4>)
 800885c:	6018      	str	r0, [r3, #0]
 800885e:	4bb0      	ldr	r3, [pc, #704]	; (8008b20 <_tzset_unlocked_r+0x2e8>)
 8008860:	6830      	ldr	r0, [r6, #0]
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	605a      	str	r2, [r3, #4]
 8008866:	f000 fa61 	bl	8008d2c <free>
 800886a:	6034      	str	r4, [r6, #0]
 800886c:	b00d      	add	sp, #52	; 0x34
 800886e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008872:	6831      	ldr	r1, [r6, #0]
 8008874:	2900      	cmp	r1, #0
 8008876:	d160      	bne.n	800893a <_tzset_unlocked_r+0x102>
 8008878:	6830      	ldr	r0, [r6, #0]
 800887a:	f000 fa57 	bl	8008d2c <free>
 800887e:	4620      	mov	r0, r4
 8008880:	f7f7 fca6 	bl	80001d0 <strlen>
 8008884:	1c41      	adds	r1, r0, #1
 8008886:	4638      	mov	r0, r7
 8008888:	f000 fab8 	bl	8008dfc <_malloc_r>
 800888c:	6030      	str	r0, [r6, #0]
 800888e:	2800      	cmp	r0, #0
 8008890:	d158      	bne.n	8008944 <_tzset_unlocked_r+0x10c>
 8008892:	7823      	ldrb	r3, [r4, #0]
 8008894:	4aa3      	ldr	r2, [pc, #652]	; (8008b24 <_tzset_unlocked_r+0x2ec>)
 8008896:	49a4      	ldr	r1, [pc, #656]	; (8008b28 <_tzset_unlocked_r+0x2f0>)
 8008898:	2b3a      	cmp	r3, #58	; 0x3a
 800889a:	bf08      	it	eq
 800889c:	3401      	addeq	r4, #1
 800889e:	ae0a      	add	r6, sp, #40	; 0x28
 80088a0:	4633      	mov	r3, r6
 80088a2:	4620      	mov	r0, r4
 80088a4:	f000 fdfe 	bl	80094a4 <siscanf>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	dddf      	ble.n	800886c <_tzset_unlocked_r+0x34>
 80088ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ae:	18e7      	adds	r7, r4, r3
 80088b0:	5ce3      	ldrb	r3, [r4, r3]
 80088b2:	2b2d      	cmp	r3, #45	; 0x2d
 80088b4:	d14a      	bne.n	800894c <_tzset_unlocked_r+0x114>
 80088b6:	3701      	adds	r7, #1
 80088b8:	f04f 34ff 	mov.w	r4, #4294967295
 80088bc:	f10d 0a20 	add.w	sl, sp, #32
 80088c0:	f10d 0b1e 	add.w	fp, sp, #30
 80088c4:	f04f 0800 	mov.w	r8, #0
 80088c8:	9603      	str	r6, [sp, #12]
 80088ca:	f8cd a008 	str.w	sl, [sp, #8]
 80088ce:	9601      	str	r6, [sp, #4]
 80088d0:	f8cd b000 	str.w	fp, [sp]
 80088d4:	4633      	mov	r3, r6
 80088d6:	aa07      	add	r2, sp, #28
 80088d8:	4994      	ldr	r1, [pc, #592]	; (8008b2c <_tzset_unlocked_r+0x2f4>)
 80088da:	f8ad 801e 	strh.w	r8, [sp, #30]
 80088de:	4638      	mov	r0, r7
 80088e0:	f8ad 8020 	strh.w	r8, [sp, #32]
 80088e4:	f000 fdde 	bl	80094a4 <siscanf>
 80088e8:	4540      	cmp	r0, r8
 80088ea:	ddbf      	ble.n	800886c <_tzset_unlocked_r+0x34>
 80088ec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80088f0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80088f4:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8008b38 <_tzset_unlocked_r+0x300>
 80088f8:	213c      	movs	r1, #60	; 0x3c
 80088fa:	fb01 2203 	mla	r2, r1, r3, r2
 80088fe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8008902:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008906:	fb01 2303 	mla	r3, r1, r3, r2
 800890a:	435c      	muls	r4, r3
 800890c:	622c      	str	r4, [r5, #32]
 800890e:	4c84      	ldr	r4, [pc, #528]	; (8008b20 <_tzset_unlocked_r+0x2e8>)
 8008910:	4b84      	ldr	r3, [pc, #528]	; (8008b24 <_tzset_unlocked_r+0x2ec>)
 8008912:	6023      	str	r3, [r4, #0]
 8008914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008916:	4984      	ldr	r1, [pc, #528]	; (8008b28 <_tzset_unlocked_r+0x2f0>)
 8008918:	441f      	add	r7, r3
 800891a:	464a      	mov	r2, r9
 800891c:	4633      	mov	r3, r6
 800891e:	4638      	mov	r0, r7
 8008920:	f000 fdc0 	bl	80094a4 <siscanf>
 8008924:	4540      	cmp	r0, r8
 8008926:	dc16      	bgt.n	8008956 <_tzset_unlocked_r+0x11e>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	6063      	str	r3, [r4, #4]
 800892c:	4b79      	ldr	r3, [pc, #484]	; (8008b14 <_tzset_unlocked_r+0x2dc>)
 800892e:	6a2a      	ldr	r2, [r5, #32]
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	4b7a      	ldr	r3, [pc, #488]	; (8008b1c <_tzset_unlocked_r+0x2e4>)
 8008934:	f8c3 8000 	str.w	r8, [r3]
 8008938:	e798      	b.n	800886c <_tzset_unlocked_r+0x34>
 800893a:	f7f7 fc51 	bl	80001e0 <strcmp>
 800893e:	2800      	cmp	r0, #0
 8008940:	d094      	beq.n	800886c <_tzset_unlocked_r+0x34>
 8008942:	e799      	b.n	8008878 <_tzset_unlocked_r+0x40>
 8008944:	4621      	mov	r1, r4
 8008946:	f7ff fde9 	bl	800851c <strcpy>
 800894a:	e7a2      	b.n	8008892 <_tzset_unlocked_r+0x5a>
 800894c:	2b2b      	cmp	r3, #43	; 0x2b
 800894e:	bf08      	it	eq
 8008950:	3701      	addeq	r7, #1
 8008952:	2401      	movs	r4, #1
 8008954:	e7b2      	b.n	80088bc <_tzset_unlocked_r+0x84>
 8008956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008958:	f8c4 9004 	str.w	r9, [r4, #4]
 800895c:	18fc      	adds	r4, r7, r3
 800895e:	5cfb      	ldrb	r3, [r7, r3]
 8008960:	2b2d      	cmp	r3, #45	; 0x2d
 8008962:	f040 8092 	bne.w	8008a8a <_tzset_unlocked_r+0x252>
 8008966:	3401      	adds	r4, #1
 8008968:	f04f 37ff 	mov.w	r7, #4294967295
 800896c:	2300      	movs	r3, #0
 800896e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008972:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008976:	f8ad 3020 	strh.w	r3, [sp, #32]
 800897a:	930a      	str	r3, [sp, #40]	; 0x28
 800897c:	9603      	str	r6, [sp, #12]
 800897e:	f8cd a008 	str.w	sl, [sp, #8]
 8008982:	9601      	str	r6, [sp, #4]
 8008984:	f8cd b000 	str.w	fp, [sp]
 8008988:	4633      	mov	r3, r6
 800898a:	aa07      	add	r2, sp, #28
 800898c:	4967      	ldr	r1, [pc, #412]	; (8008b2c <_tzset_unlocked_r+0x2f4>)
 800898e:	4620      	mov	r0, r4
 8008990:	f000 fd88 	bl	80094a4 <siscanf>
 8008994:	2800      	cmp	r0, #0
 8008996:	dc7d      	bgt.n	8008a94 <_tzset_unlocked_r+0x25c>
 8008998:	6a2b      	ldr	r3, [r5, #32]
 800899a:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800899e:	63eb      	str	r3, [r5, #60]	; 0x3c
 80089a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a2:	462f      	mov	r7, r5
 80089a4:	441c      	add	r4, r3
 80089a6:	f04f 0900 	mov.w	r9, #0
 80089aa:	7823      	ldrb	r3, [r4, #0]
 80089ac:	2b2c      	cmp	r3, #44	; 0x2c
 80089ae:	bf08      	it	eq
 80089b0:	3401      	addeq	r4, #1
 80089b2:	f894 8000 	ldrb.w	r8, [r4]
 80089b6:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80089ba:	d17b      	bne.n	8008ab4 <_tzset_unlocked_r+0x27c>
 80089bc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80089c0:	9302      	str	r3, [sp, #8]
 80089c2:	ab09      	add	r3, sp, #36	; 0x24
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	9603      	str	r6, [sp, #12]
 80089c8:	9601      	str	r6, [sp, #4]
 80089ca:	4633      	mov	r3, r6
 80089cc:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80089d0:	4957      	ldr	r1, [pc, #348]	; (8008b30 <_tzset_unlocked_r+0x2f8>)
 80089d2:	4620      	mov	r0, r4
 80089d4:	f000 fd66 	bl	80094a4 <siscanf>
 80089d8:	2803      	cmp	r0, #3
 80089da:	f47f af47 	bne.w	800886c <_tzset_unlocked_r+0x34>
 80089de:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80089e2:	1e4b      	subs	r3, r1, #1
 80089e4:	2b0b      	cmp	r3, #11
 80089e6:	f63f af41 	bhi.w	800886c <_tzset_unlocked_r+0x34>
 80089ea:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80089ee:	1e53      	subs	r3, r2, #1
 80089f0:	2b04      	cmp	r3, #4
 80089f2:	f63f af3b 	bhi.w	800886c <_tzset_unlocked_r+0x34>
 80089f6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80089fa:	2b06      	cmp	r3, #6
 80089fc:	f63f af36 	bhi.w	800886c <_tzset_unlocked_r+0x34>
 8008a00:	f887 8008 	strb.w	r8, [r7, #8]
 8008a04:	60f9      	str	r1, [r7, #12]
 8008a06:	613a      	str	r2, [r7, #16]
 8008a08:	617b      	str	r3, [r7, #20]
 8008a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a0c:	eb04 0803 	add.w	r8, r4, r3
 8008a10:	2302      	movs	r3, #2
 8008a12:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008a16:	2300      	movs	r3, #0
 8008a18:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008a1c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008a20:	930a      	str	r3, [sp, #40]	; 0x28
 8008a22:	f898 3000 	ldrb.w	r3, [r8]
 8008a26:	2b2f      	cmp	r3, #47	; 0x2f
 8008a28:	d10b      	bne.n	8008a42 <_tzset_unlocked_r+0x20a>
 8008a2a:	9603      	str	r6, [sp, #12]
 8008a2c:	f8cd a008 	str.w	sl, [sp, #8]
 8008a30:	9601      	str	r6, [sp, #4]
 8008a32:	f8cd b000 	str.w	fp, [sp]
 8008a36:	4633      	mov	r3, r6
 8008a38:	aa07      	add	r2, sp, #28
 8008a3a:	493e      	ldr	r1, [pc, #248]	; (8008b34 <_tzset_unlocked_r+0x2fc>)
 8008a3c:	4640      	mov	r0, r8
 8008a3e:	f000 fd31 	bl	80094a4 <siscanf>
 8008a42:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8008a46:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8008a4a:	213c      	movs	r1, #60	; 0x3c
 8008a4c:	fb01 2203 	mla	r2, r1, r3, r2
 8008a50:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8008a54:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008a58:	fb01 2303 	mla	r3, r1, r3, r2
 8008a5c:	61bb      	str	r3, [r7, #24]
 8008a5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a60:	f109 0901 	add.w	r9, r9, #1
 8008a64:	f1b9 0f02 	cmp.w	r9, #2
 8008a68:	4444      	add	r4, r8
 8008a6a:	f107 071c 	add.w	r7, r7, #28
 8008a6e:	d19c      	bne.n	80089aa <_tzset_unlocked_r+0x172>
 8008a70:	6868      	ldr	r0, [r5, #4]
 8008a72:	f7ff fe31 	bl	80086d8 <__tzcalc_limits>
 8008a76:	4b27      	ldr	r3, [pc, #156]	; (8008b14 <_tzset_unlocked_r+0x2dc>)
 8008a78:	6a2a      	ldr	r2, [r5, #32]
 8008a7a:	601a      	str	r2, [r3, #0]
 8008a7c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008a7e:	1a9b      	subs	r3, r3, r2
 8008a80:	4a26      	ldr	r2, [pc, #152]	; (8008b1c <_tzset_unlocked_r+0x2e4>)
 8008a82:	bf18      	it	ne
 8008a84:	2301      	movne	r3, #1
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	e6f0      	b.n	800886c <_tzset_unlocked_r+0x34>
 8008a8a:	2b2b      	cmp	r3, #43	; 0x2b
 8008a8c:	bf08      	it	eq
 8008a8e:	3401      	addeq	r4, #1
 8008a90:	2701      	movs	r7, #1
 8008a92:	e76b      	b.n	800896c <_tzset_unlocked_r+0x134>
 8008a94:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8008a98:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8008a9c:	213c      	movs	r1, #60	; 0x3c
 8008a9e:	fb01 2203 	mla	r2, r1, r3, r2
 8008aa2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8008aa6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008aaa:	fb01 2303 	mla	r3, r1, r3, r2
 8008aae:	435f      	muls	r7, r3
 8008ab0:	63ef      	str	r7, [r5, #60]	; 0x3c
 8008ab2:	e775      	b.n	80089a0 <_tzset_unlocked_r+0x168>
 8008ab4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8008ab8:	bf06      	itte	eq
 8008aba:	3401      	addeq	r4, #1
 8008abc:	4643      	moveq	r3, r8
 8008abe:	2344      	movne	r3, #68	; 0x44
 8008ac0:	220a      	movs	r2, #10
 8008ac2:	a90b      	add	r1, sp, #44	; 0x2c
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	9305      	str	r3, [sp, #20]
 8008ac8:	f000 fda8 	bl	800961c <strtoul>
 8008acc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8008ad0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8008ad4:	4544      	cmp	r4, r8
 8008ad6:	9b05      	ldr	r3, [sp, #20]
 8008ad8:	d114      	bne.n	8008b04 <_tzset_unlocked_r+0x2cc>
 8008ada:	234d      	movs	r3, #77	; 0x4d
 8008adc:	f1b9 0f00 	cmp.w	r9, #0
 8008ae0:	d107      	bne.n	8008af2 <_tzset_unlocked_r+0x2ba>
 8008ae2:	722b      	strb	r3, [r5, #8]
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	60eb      	str	r3, [r5, #12]
 8008ae8:	2302      	movs	r3, #2
 8008aea:	612b      	str	r3, [r5, #16]
 8008aec:	f8c5 9014 	str.w	r9, [r5, #20]
 8008af0:	e78e      	b.n	8008a10 <_tzset_unlocked_r+0x1d8>
 8008af2:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8008af6:	230b      	movs	r3, #11
 8008af8:	62ab      	str	r3, [r5, #40]	; 0x28
 8008afa:	2301      	movs	r3, #1
 8008afc:	62eb      	str	r3, [r5, #44]	; 0x2c
 8008afe:	2300      	movs	r3, #0
 8008b00:	632b      	str	r3, [r5, #48]	; 0x30
 8008b02:	e785      	b.n	8008a10 <_tzset_unlocked_r+0x1d8>
 8008b04:	b280      	uxth	r0, r0
 8008b06:	723b      	strb	r3, [r7, #8]
 8008b08:	6178      	str	r0, [r7, #20]
 8008b0a:	e781      	b.n	8008a10 <_tzset_unlocked_r+0x1d8>
 8008b0c:	0800a128 	.word	0x0800a128
 8008b10:	20008b90 	.word	0x20008b90
 8008b14:	20008b98 	.word	0x20008b98
 8008b18:	0800a12b 	.word	0x0800a12b
 8008b1c:	20008b94 	.word	0x20008b94
 8008b20:	20000074 	.word	0x20000074
 8008b24:	20008b83 	.word	0x20008b83
 8008b28:	0800a12f 	.word	0x0800a12f
 8008b2c:	0800a152 	.word	0x0800a152
 8008b30:	0800a13e 	.word	0x0800a13e
 8008b34:	0800a151 	.word	0x0800a151
 8008b38:	20008b78 	.word	0x20008b78

08008b3c <_findenv_r>:
 8008b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b40:	4606      	mov	r6, r0
 8008b42:	468a      	mov	sl, r1
 8008b44:	4617      	mov	r7, r2
 8008b46:	f000 fd8c 	bl	8009662 <__env_lock>
 8008b4a:	4b1b      	ldr	r3, [pc, #108]	; (8008bb8 <_findenv_r+0x7c>)
 8008b4c:	f8d3 8000 	ldr.w	r8, [r3]
 8008b50:	4699      	mov	r9, r3
 8008b52:	f1b8 0f00 	cmp.w	r8, #0
 8008b56:	d007      	beq.n	8008b68 <_findenv_r+0x2c>
 8008b58:	4654      	mov	r4, sl
 8008b5a:	4623      	mov	r3, r4
 8008b5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b60:	b332      	cbz	r2, 8008bb0 <_findenv_r+0x74>
 8008b62:	2a3d      	cmp	r2, #61	; 0x3d
 8008b64:	461c      	mov	r4, r3
 8008b66:	d1f8      	bne.n	8008b5a <_findenv_r+0x1e>
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f000 fd7b 	bl	8009664 <__env_unlock>
 8008b6e:	2000      	movs	r0, #0
 8008b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b74:	f108 0804 	add.w	r8, r8, #4
 8008b78:	f8d8 0000 	ldr.w	r0, [r8]
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d0f3      	beq.n	8008b68 <_findenv_r+0x2c>
 8008b80:	4622      	mov	r2, r4
 8008b82:	4651      	mov	r1, sl
 8008b84:	f7ff fcd2 	bl	800852c <strncmp>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d1f3      	bne.n	8008b74 <_findenv_r+0x38>
 8008b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b90:	191d      	adds	r5, r3, r4
 8008b92:	5d1b      	ldrb	r3, [r3, r4]
 8008b94:	2b3d      	cmp	r3, #61	; 0x3d
 8008b96:	d1ed      	bne.n	8008b74 <_findenv_r+0x38>
 8008b98:	f8d9 3000 	ldr.w	r3, [r9]
 8008b9c:	eba8 0303 	sub.w	r3, r8, r3
 8008ba0:	109b      	asrs	r3, r3, #2
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	603b      	str	r3, [r7, #0]
 8008ba6:	f000 fd5d 	bl	8009664 <__env_unlock>
 8008baa:	1c68      	adds	r0, r5, #1
 8008bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb0:	eba4 040a 	sub.w	r4, r4, sl
 8008bb4:	e7e0      	b.n	8008b78 <_findenv_r+0x3c>
 8008bb6:	bf00      	nop
 8008bb8:	20000008 	.word	0x20000008

08008bbc <_getenv_r>:
 8008bbc:	b507      	push	{r0, r1, r2, lr}
 8008bbe:	aa01      	add	r2, sp, #4
 8008bc0:	f7ff ffbc 	bl	8008b3c <_findenv_r>
 8008bc4:	b003      	add	sp, #12
 8008bc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008bcc <__gettzinfo>:
 8008bcc:	4800      	ldr	r0, [pc, #0]	; (8008bd0 <__gettzinfo+0x4>)
 8008bce:	4770      	bx	lr
 8008bd0:	2000007c 	.word	0x2000007c

08008bd4 <gmtime_r>:
 8008bd4:	6802      	ldr	r2, [r0, #0]
 8008bd6:	4848      	ldr	r0, [pc, #288]	; (8008cf8 <gmtime_r+0x124>)
 8008bd8:	fb92 f3f0 	sdiv	r3, r2, r0
 8008bdc:	fb00 2013 	mls	r0, r0, r3, r2
 8008be0:	2800      	cmp	r0, #0
 8008be2:	bfb8      	it	lt
 8008be4:	f500 30a8 	addlt.w	r0, r0, #86016	; 0x15000
 8008be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bea:	bfb8      	it	lt
 8008bec:	f500 70c0 	addlt.w	r0, r0, #384	; 0x180
 8008bf0:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8008bf4:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8008bf8:	fb90 f2f4 	sdiv	r2, r0, r4
 8008bfc:	fb04 0012 	mls	r0, r4, r2, r0
 8008c00:	f04f 043c 	mov.w	r4, #60	; 0x3c
 8008c04:	bfac      	ite	ge
 8008c06:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 8008c0a:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 8008c0e:	608a      	str	r2, [r1, #8]
 8008c10:	fb90 f2f4 	sdiv	r2, r0, r4
 8008c14:	fb04 0012 	mls	r0, r4, r2, r0
 8008c18:	604a      	str	r2, [r1, #4]
 8008c1a:	6008      	str	r0, [r1, #0]
 8008c1c:	2207      	movs	r2, #7
 8008c1e:	1cd8      	adds	r0, r3, #3
 8008c20:	fb90 f2f2 	sdiv	r2, r0, r2
 8008c24:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8008c28:	1a82      	subs	r2, r0, r2
 8008c2a:	618a      	str	r2, [r1, #24]
 8008c2c:	4a33      	ldr	r2, [pc, #204]	; (8008cfc <gmtime_r+0x128>)
 8008c2e:	4c34      	ldr	r4, [pc, #208]	; (8008d00 <gmtime_r+0x12c>)
 8008c30:	fb93 f4f4 	sdiv	r4, r3, r4
 8008c34:	fb02 3304 	mla	r3, r2, r4, r3
 8008c38:	f648 60ac 	movw	r0, #36524	; 0x8eac
 8008c3c:	fbb3 f0f0 	udiv	r0, r3, r0
 8008c40:	4418      	add	r0, r3
 8008c42:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8008c46:	fbb3 f2f7 	udiv	r2, r3, r7
 8008c4a:	1a80      	subs	r0, r0, r2
 8008c4c:	4a2d      	ldr	r2, [pc, #180]	; (8008d04 <gmtime_r+0x130>)
 8008c4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c52:	1a82      	subs	r2, r0, r2
 8008c54:	f648 6094 	movw	r0, #36500	; 0x8e94
 8008c58:	fbb2 f0f0 	udiv	r0, r2, r0
 8008c5c:	4403      	add	r3, r0
 8008c5e:	f240 166d 	movw	r6, #365	; 0x16d
 8008c62:	fbb2 f5f6 	udiv	r5, r2, r6
 8008c66:	fbb2 f2f7 	udiv	r2, r2, r7
 8008c6a:	1a9a      	subs	r2, r3, r2
 8008c6c:	fb06 2315 	mls	r3, r6, r5, r2
 8008c70:	2099      	movs	r0, #153	; 0x99
 8008c72:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008c76:	1c5e      	adds	r6, r3, #1
 8008c78:	3202      	adds	r2, #2
 8008c7a:	fbb2 f2f0 	udiv	r2, r2, r0
 8008c7e:	2a0a      	cmp	r2, #10
 8008c80:	fb00 f002 	mul.w	r0, r0, r2
 8008c84:	f100 0002 	add.w	r0, r0, #2
 8008c88:	f04f 0705 	mov.w	r7, #5
 8008c8c:	fbb0 f0f7 	udiv	r0, r0, r7
 8008c90:	eba6 0000 	sub.w	r0, r6, r0
 8008c94:	bf34      	ite	cc
 8008c96:	2602      	movcc	r6, #2
 8008c98:	f06f 0609 	mvncs.w	r6, #9
 8008c9c:	4416      	add	r6, r2
 8008c9e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008ca2:	fb02 5404 	mla	r4, r2, r4, r5
 8008ca6:	2e01      	cmp	r6, #1
 8008ca8:	bf98      	it	ls
 8008caa:	3401      	addls	r4, #1
 8008cac:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8008cb0:	d30b      	bcc.n	8008cca <gmtime_r+0xf6>
 8008cb2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008cb6:	61cb      	str	r3, [r1, #28]
 8008cb8:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60c8      	str	r0, [r1, #12]
 8008cc0:	614c      	str	r4, [r1, #20]
 8008cc2:	610e      	str	r6, [r1, #16]
 8008cc4:	620b      	str	r3, [r1, #32]
 8008cc6:	4608      	mov	r0, r1
 8008cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cca:	07aa      	lsls	r2, r5, #30
 8008ccc:	d105      	bne.n	8008cda <gmtime_r+0x106>
 8008cce:	2764      	movs	r7, #100	; 0x64
 8008cd0:	fbb5 f2f7 	udiv	r2, r5, r7
 8008cd4:	fb07 5212 	mls	r2, r7, r2, r5
 8008cd8:	b95a      	cbnz	r2, 8008cf2 <gmtime_r+0x11e>
 8008cda:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8008cde:	fbb5 f2f7 	udiv	r2, r5, r7
 8008ce2:	fb07 5212 	mls	r2, r7, r2, r5
 8008ce6:	fab2 f282 	clz	r2, r2
 8008cea:	0952      	lsrs	r2, r2, #5
 8008cec:	333b      	adds	r3, #59	; 0x3b
 8008cee:	4413      	add	r3, r2
 8008cf0:	e7e1      	b.n	8008cb6 <gmtime_r+0xe2>
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	e7fa      	b.n	8008cec <gmtime_r+0x118>
 8008cf6:	bf00      	nop
 8008cf8:	00015180 	.word	0x00015180
 8008cfc:	fffdc54f 	.word	0xfffdc54f
 8008d00:	00023ab1 	.word	0x00023ab1
 8008d04:	00023ab0 	.word	0x00023ab0

08008d08 <__locale_ctype_ptr_l>:
 8008d08:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008d0c:	4770      	bx	lr
	...

08008d10 <__locale_ctype_ptr>:
 8008d10:	4b04      	ldr	r3, [pc, #16]	; (8008d24 <__locale_ctype_ptr+0x14>)
 8008d12:	4a05      	ldr	r2, [pc, #20]	; (8008d28 <__locale_ctype_ptr+0x18>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	6a1b      	ldr	r3, [r3, #32]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	bf08      	it	eq
 8008d1c:	4613      	moveq	r3, r2
 8008d1e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008d22:	4770      	bx	lr
 8008d24:	20000010 	.word	0x20000010
 8008d28:	200000bc 	.word	0x200000bc

08008d2c <free>:
 8008d2c:	4b02      	ldr	r3, [pc, #8]	; (8008d38 <free+0xc>)
 8008d2e:	4601      	mov	r1, r0
 8008d30:	6818      	ldr	r0, [r3, #0]
 8008d32:	f000 b815 	b.w	8008d60 <_free_r>
 8008d36:	bf00      	nop
 8008d38:	20000010 	.word	0x20000010

08008d3c <__ascii_mbtowc>:
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	b901      	cbnz	r1, 8008d42 <__ascii_mbtowc+0x6>
 8008d40:	a901      	add	r1, sp, #4
 8008d42:	b142      	cbz	r2, 8008d56 <__ascii_mbtowc+0x1a>
 8008d44:	b14b      	cbz	r3, 8008d5a <__ascii_mbtowc+0x1e>
 8008d46:	7813      	ldrb	r3, [r2, #0]
 8008d48:	600b      	str	r3, [r1, #0]
 8008d4a:	7812      	ldrb	r2, [r2, #0]
 8008d4c:	1c10      	adds	r0, r2, #0
 8008d4e:	bf18      	it	ne
 8008d50:	2001      	movne	r0, #1
 8008d52:	b002      	add	sp, #8
 8008d54:	4770      	bx	lr
 8008d56:	4610      	mov	r0, r2
 8008d58:	e7fb      	b.n	8008d52 <__ascii_mbtowc+0x16>
 8008d5a:	f06f 0001 	mvn.w	r0, #1
 8008d5e:	e7f8      	b.n	8008d52 <__ascii_mbtowc+0x16>

08008d60 <_free_r>:
 8008d60:	b538      	push	{r3, r4, r5, lr}
 8008d62:	4605      	mov	r5, r0
 8008d64:	2900      	cmp	r1, #0
 8008d66:	d045      	beq.n	8008df4 <_free_r+0x94>
 8008d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d6c:	1f0c      	subs	r4, r1, #4
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	bfb8      	it	lt
 8008d72:	18e4      	addlt	r4, r4, r3
 8008d74:	f000 fc91 	bl	800969a <__malloc_lock>
 8008d78:	4a1f      	ldr	r2, [pc, #124]	; (8008df8 <_free_r+0x98>)
 8008d7a:	6813      	ldr	r3, [r2, #0]
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	b933      	cbnz	r3, 8008d8e <_free_r+0x2e>
 8008d80:	6063      	str	r3, [r4, #4]
 8008d82:	6014      	str	r4, [r2, #0]
 8008d84:	4628      	mov	r0, r5
 8008d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d8a:	f000 bc87 	b.w	800969c <__malloc_unlock>
 8008d8e:	42a3      	cmp	r3, r4
 8008d90:	d90c      	bls.n	8008dac <_free_r+0x4c>
 8008d92:	6821      	ldr	r1, [r4, #0]
 8008d94:	1862      	adds	r2, r4, r1
 8008d96:	4293      	cmp	r3, r2
 8008d98:	bf04      	itt	eq
 8008d9a:	681a      	ldreq	r2, [r3, #0]
 8008d9c:	685b      	ldreq	r3, [r3, #4]
 8008d9e:	6063      	str	r3, [r4, #4]
 8008da0:	bf04      	itt	eq
 8008da2:	1852      	addeq	r2, r2, r1
 8008da4:	6022      	streq	r2, [r4, #0]
 8008da6:	6004      	str	r4, [r0, #0]
 8008da8:	e7ec      	b.n	8008d84 <_free_r+0x24>
 8008daa:	4613      	mov	r3, r2
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	b10a      	cbz	r2, 8008db4 <_free_r+0x54>
 8008db0:	42a2      	cmp	r2, r4
 8008db2:	d9fa      	bls.n	8008daa <_free_r+0x4a>
 8008db4:	6819      	ldr	r1, [r3, #0]
 8008db6:	1858      	adds	r0, r3, r1
 8008db8:	42a0      	cmp	r0, r4
 8008dba:	d10b      	bne.n	8008dd4 <_free_r+0x74>
 8008dbc:	6820      	ldr	r0, [r4, #0]
 8008dbe:	4401      	add	r1, r0
 8008dc0:	1858      	adds	r0, r3, r1
 8008dc2:	4282      	cmp	r2, r0
 8008dc4:	6019      	str	r1, [r3, #0]
 8008dc6:	d1dd      	bne.n	8008d84 <_free_r+0x24>
 8008dc8:	6810      	ldr	r0, [r2, #0]
 8008dca:	6852      	ldr	r2, [r2, #4]
 8008dcc:	605a      	str	r2, [r3, #4]
 8008dce:	4401      	add	r1, r0
 8008dd0:	6019      	str	r1, [r3, #0]
 8008dd2:	e7d7      	b.n	8008d84 <_free_r+0x24>
 8008dd4:	d902      	bls.n	8008ddc <_free_r+0x7c>
 8008dd6:	230c      	movs	r3, #12
 8008dd8:	602b      	str	r3, [r5, #0]
 8008dda:	e7d3      	b.n	8008d84 <_free_r+0x24>
 8008ddc:	6820      	ldr	r0, [r4, #0]
 8008dde:	1821      	adds	r1, r4, r0
 8008de0:	428a      	cmp	r2, r1
 8008de2:	bf04      	itt	eq
 8008de4:	6811      	ldreq	r1, [r2, #0]
 8008de6:	6852      	ldreq	r2, [r2, #4]
 8008de8:	6062      	str	r2, [r4, #4]
 8008dea:	bf04      	itt	eq
 8008dec:	1809      	addeq	r1, r1, r0
 8008dee:	6021      	streq	r1, [r4, #0]
 8008df0:	605c      	str	r4, [r3, #4]
 8008df2:	e7c7      	b.n	8008d84 <_free_r+0x24>
 8008df4:	bd38      	pop	{r3, r4, r5, pc}
 8008df6:	bf00      	nop
 8008df8:	20008b9c 	.word	0x20008b9c

08008dfc <_malloc_r>:
 8008dfc:	b570      	push	{r4, r5, r6, lr}
 8008dfe:	1ccd      	adds	r5, r1, #3
 8008e00:	f025 0503 	bic.w	r5, r5, #3
 8008e04:	3508      	adds	r5, #8
 8008e06:	2d0c      	cmp	r5, #12
 8008e08:	bf38      	it	cc
 8008e0a:	250c      	movcc	r5, #12
 8008e0c:	2d00      	cmp	r5, #0
 8008e0e:	4606      	mov	r6, r0
 8008e10:	db01      	blt.n	8008e16 <_malloc_r+0x1a>
 8008e12:	42a9      	cmp	r1, r5
 8008e14:	d903      	bls.n	8008e1e <_malloc_r+0x22>
 8008e16:	230c      	movs	r3, #12
 8008e18:	6033      	str	r3, [r6, #0]
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	bd70      	pop	{r4, r5, r6, pc}
 8008e1e:	f000 fc3c 	bl	800969a <__malloc_lock>
 8008e22:	4a23      	ldr	r2, [pc, #140]	; (8008eb0 <_malloc_r+0xb4>)
 8008e24:	6814      	ldr	r4, [r2, #0]
 8008e26:	4621      	mov	r1, r4
 8008e28:	b991      	cbnz	r1, 8008e50 <_malloc_r+0x54>
 8008e2a:	4c22      	ldr	r4, [pc, #136]	; (8008eb4 <_malloc_r+0xb8>)
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	b91b      	cbnz	r3, 8008e38 <_malloc_r+0x3c>
 8008e30:	4630      	mov	r0, r6
 8008e32:	f000 fb27 	bl	8009484 <_sbrk_r>
 8008e36:	6020      	str	r0, [r4, #0]
 8008e38:	4629      	mov	r1, r5
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f000 fb22 	bl	8009484 <_sbrk_r>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d126      	bne.n	8008e92 <_malloc_r+0x96>
 8008e44:	230c      	movs	r3, #12
 8008e46:	6033      	str	r3, [r6, #0]
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f000 fc27 	bl	800969c <__malloc_unlock>
 8008e4e:	e7e4      	b.n	8008e1a <_malloc_r+0x1e>
 8008e50:	680b      	ldr	r3, [r1, #0]
 8008e52:	1b5b      	subs	r3, r3, r5
 8008e54:	d41a      	bmi.n	8008e8c <_malloc_r+0x90>
 8008e56:	2b0b      	cmp	r3, #11
 8008e58:	d90f      	bls.n	8008e7a <_malloc_r+0x7e>
 8008e5a:	600b      	str	r3, [r1, #0]
 8008e5c:	50cd      	str	r5, [r1, r3]
 8008e5e:	18cc      	adds	r4, r1, r3
 8008e60:	4630      	mov	r0, r6
 8008e62:	f000 fc1b 	bl	800969c <__malloc_unlock>
 8008e66:	f104 000b 	add.w	r0, r4, #11
 8008e6a:	1d23      	adds	r3, r4, #4
 8008e6c:	f020 0007 	bic.w	r0, r0, #7
 8008e70:	1ac3      	subs	r3, r0, r3
 8008e72:	d01b      	beq.n	8008eac <_malloc_r+0xb0>
 8008e74:	425a      	negs	r2, r3
 8008e76:	50e2      	str	r2, [r4, r3]
 8008e78:	bd70      	pop	{r4, r5, r6, pc}
 8008e7a:	428c      	cmp	r4, r1
 8008e7c:	bf0d      	iteet	eq
 8008e7e:	6863      	ldreq	r3, [r4, #4]
 8008e80:	684b      	ldrne	r3, [r1, #4]
 8008e82:	6063      	strne	r3, [r4, #4]
 8008e84:	6013      	streq	r3, [r2, #0]
 8008e86:	bf18      	it	ne
 8008e88:	460c      	movne	r4, r1
 8008e8a:	e7e9      	b.n	8008e60 <_malloc_r+0x64>
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	6849      	ldr	r1, [r1, #4]
 8008e90:	e7ca      	b.n	8008e28 <_malloc_r+0x2c>
 8008e92:	1cc4      	adds	r4, r0, #3
 8008e94:	f024 0403 	bic.w	r4, r4, #3
 8008e98:	42a0      	cmp	r0, r4
 8008e9a:	d005      	beq.n	8008ea8 <_malloc_r+0xac>
 8008e9c:	1a21      	subs	r1, r4, r0
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f000 faf0 	bl	8009484 <_sbrk_r>
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	d0cd      	beq.n	8008e44 <_malloc_r+0x48>
 8008ea8:	6025      	str	r5, [r4, #0]
 8008eaa:	e7d9      	b.n	8008e60 <_malloc_r+0x64>
 8008eac:	bd70      	pop	{r4, r5, r6, pc}
 8008eae:	bf00      	nop
 8008eb0:	20008b9c 	.word	0x20008b9c
 8008eb4:	20008ba0 	.word	0x20008ba0

08008eb8 <__ssputs_r>:
 8008eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ebc:	688e      	ldr	r6, [r1, #8]
 8008ebe:	429e      	cmp	r6, r3
 8008ec0:	4682      	mov	sl, r0
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	4691      	mov	r9, r2
 8008ec6:	4698      	mov	r8, r3
 8008ec8:	d835      	bhi.n	8008f36 <__ssputs_r+0x7e>
 8008eca:	898a      	ldrh	r2, [r1, #12]
 8008ecc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ed0:	d031      	beq.n	8008f36 <__ssputs_r+0x7e>
 8008ed2:	6825      	ldr	r5, [r4, #0]
 8008ed4:	6909      	ldr	r1, [r1, #16]
 8008ed6:	1a6f      	subs	r7, r5, r1
 8008ed8:	6965      	ldr	r5, [r4, #20]
 8008eda:	2302      	movs	r3, #2
 8008edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ee0:	fb95 f5f3 	sdiv	r5, r5, r3
 8008ee4:	f108 0301 	add.w	r3, r8, #1
 8008ee8:	443b      	add	r3, r7
 8008eea:	429d      	cmp	r5, r3
 8008eec:	bf38      	it	cc
 8008eee:	461d      	movcc	r5, r3
 8008ef0:	0553      	lsls	r3, r2, #21
 8008ef2:	d531      	bpl.n	8008f58 <__ssputs_r+0xa0>
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	f7ff ff81 	bl	8008dfc <_malloc_r>
 8008efa:	4606      	mov	r6, r0
 8008efc:	b950      	cbnz	r0, 8008f14 <__ssputs_r+0x5c>
 8008efe:	230c      	movs	r3, #12
 8008f00:	f8ca 3000 	str.w	r3, [sl]
 8008f04:	89a3      	ldrh	r3, [r4, #12]
 8008f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f0a:	81a3      	strh	r3, [r4, #12]
 8008f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f14:	463a      	mov	r2, r7
 8008f16:	6921      	ldr	r1, [r4, #16]
 8008f18:	f7ff fabb 	bl	8008492 <memcpy>
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f26:	81a3      	strh	r3, [r4, #12]
 8008f28:	6126      	str	r6, [r4, #16]
 8008f2a:	6165      	str	r5, [r4, #20]
 8008f2c:	443e      	add	r6, r7
 8008f2e:	1bed      	subs	r5, r5, r7
 8008f30:	6026      	str	r6, [r4, #0]
 8008f32:	60a5      	str	r5, [r4, #8]
 8008f34:	4646      	mov	r6, r8
 8008f36:	4546      	cmp	r6, r8
 8008f38:	bf28      	it	cs
 8008f3a:	4646      	movcs	r6, r8
 8008f3c:	4632      	mov	r2, r6
 8008f3e:	4649      	mov	r1, r9
 8008f40:	6820      	ldr	r0, [r4, #0]
 8008f42:	f000 fb90 	bl	8009666 <memmove>
 8008f46:	68a3      	ldr	r3, [r4, #8]
 8008f48:	1b9b      	subs	r3, r3, r6
 8008f4a:	60a3      	str	r3, [r4, #8]
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	441e      	add	r6, r3
 8008f50:	6026      	str	r6, [r4, #0]
 8008f52:	2000      	movs	r0, #0
 8008f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f58:	462a      	mov	r2, r5
 8008f5a:	f000 fba0 	bl	800969e <_realloc_r>
 8008f5e:	4606      	mov	r6, r0
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d1e1      	bne.n	8008f28 <__ssputs_r+0x70>
 8008f64:	6921      	ldr	r1, [r4, #16]
 8008f66:	4650      	mov	r0, sl
 8008f68:	f7ff fefa 	bl	8008d60 <_free_r>
 8008f6c:	e7c7      	b.n	8008efe <__ssputs_r+0x46>
	...

08008f70 <_svfiprintf_r>:
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	b09d      	sub	sp, #116	; 0x74
 8008f76:	4680      	mov	r8, r0
 8008f78:	9303      	str	r3, [sp, #12]
 8008f7a:	898b      	ldrh	r3, [r1, #12]
 8008f7c:	061c      	lsls	r4, r3, #24
 8008f7e:	460d      	mov	r5, r1
 8008f80:	4616      	mov	r6, r2
 8008f82:	d50f      	bpl.n	8008fa4 <_svfiprintf_r+0x34>
 8008f84:	690b      	ldr	r3, [r1, #16]
 8008f86:	b96b      	cbnz	r3, 8008fa4 <_svfiprintf_r+0x34>
 8008f88:	2140      	movs	r1, #64	; 0x40
 8008f8a:	f7ff ff37 	bl	8008dfc <_malloc_r>
 8008f8e:	6028      	str	r0, [r5, #0]
 8008f90:	6128      	str	r0, [r5, #16]
 8008f92:	b928      	cbnz	r0, 8008fa0 <_svfiprintf_r+0x30>
 8008f94:	230c      	movs	r3, #12
 8008f96:	f8c8 3000 	str.w	r3, [r8]
 8008f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9e:	e0c5      	b.n	800912c <_svfiprintf_r+0x1bc>
 8008fa0:	2340      	movs	r3, #64	; 0x40
 8008fa2:	616b      	str	r3, [r5, #20]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fa8:	2320      	movs	r3, #32
 8008faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fae:	2330      	movs	r3, #48	; 0x30
 8008fb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fb4:	f04f 0b01 	mov.w	fp, #1
 8008fb8:	4637      	mov	r7, r6
 8008fba:	463c      	mov	r4, r7
 8008fbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d13c      	bne.n	800903e <_svfiprintf_r+0xce>
 8008fc4:	ebb7 0a06 	subs.w	sl, r7, r6
 8008fc8:	d00b      	beq.n	8008fe2 <_svfiprintf_r+0x72>
 8008fca:	4653      	mov	r3, sl
 8008fcc:	4632      	mov	r2, r6
 8008fce:	4629      	mov	r1, r5
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	f7ff ff71 	bl	8008eb8 <__ssputs_r>
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	f000 80a3 	beq.w	8009122 <_svfiprintf_r+0x1b2>
 8008fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fde:	4453      	add	r3, sl
 8008fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe2:	783b      	ldrb	r3, [r7, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f000 809c 	beq.w	8009122 <_svfiprintf_r+0x1b2>
 8008fea:	2300      	movs	r3, #0
 8008fec:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff0:	9304      	str	r3, [sp, #16]
 8008ff2:	9307      	str	r3, [sp, #28]
 8008ff4:	9205      	str	r2, [sp, #20]
 8008ff6:	9306      	str	r3, [sp, #24]
 8008ff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ffc:	931a      	str	r3, [sp, #104]	; 0x68
 8008ffe:	2205      	movs	r2, #5
 8009000:	7821      	ldrb	r1, [r4, #0]
 8009002:	4850      	ldr	r0, [pc, #320]	; (8009144 <_svfiprintf_r+0x1d4>)
 8009004:	f7f7 f8fc 	bl	8000200 <memchr>
 8009008:	1c67      	adds	r7, r4, #1
 800900a:	9b04      	ldr	r3, [sp, #16]
 800900c:	b9d8      	cbnz	r0, 8009046 <_svfiprintf_r+0xd6>
 800900e:	06d9      	lsls	r1, r3, #27
 8009010:	bf44      	itt	mi
 8009012:	2220      	movmi	r2, #32
 8009014:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009018:	071a      	lsls	r2, r3, #28
 800901a:	bf44      	itt	mi
 800901c:	222b      	movmi	r2, #43	; 0x2b
 800901e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009022:	7822      	ldrb	r2, [r4, #0]
 8009024:	2a2a      	cmp	r2, #42	; 0x2a
 8009026:	d016      	beq.n	8009056 <_svfiprintf_r+0xe6>
 8009028:	9a07      	ldr	r2, [sp, #28]
 800902a:	2100      	movs	r1, #0
 800902c:	200a      	movs	r0, #10
 800902e:	4627      	mov	r7, r4
 8009030:	3401      	adds	r4, #1
 8009032:	783b      	ldrb	r3, [r7, #0]
 8009034:	3b30      	subs	r3, #48	; 0x30
 8009036:	2b09      	cmp	r3, #9
 8009038:	d951      	bls.n	80090de <_svfiprintf_r+0x16e>
 800903a:	b1c9      	cbz	r1, 8009070 <_svfiprintf_r+0x100>
 800903c:	e011      	b.n	8009062 <_svfiprintf_r+0xf2>
 800903e:	2b25      	cmp	r3, #37	; 0x25
 8009040:	d0c0      	beq.n	8008fc4 <_svfiprintf_r+0x54>
 8009042:	4627      	mov	r7, r4
 8009044:	e7b9      	b.n	8008fba <_svfiprintf_r+0x4a>
 8009046:	4a3f      	ldr	r2, [pc, #252]	; (8009144 <_svfiprintf_r+0x1d4>)
 8009048:	1a80      	subs	r0, r0, r2
 800904a:	fa0b f000 	lsl.w	r0, fp, r0
 800904e:	4318      	orrs	r0, r3
 8009050:	9004      	str	r0, [sp, #16]
 8009052:	463c      	mov	r4, r7
 8009054:	e7d3      	b.n	8008ffe <_svfiprintf_r+0x8e>
 8009056:	9a03      	ldr	r2, [sp, #12]
 8009058:	1d11      	adds	r1, r2, #4
 800905a:	6812      	ldr	r2, [r2, #0]
 800905c:	9103      	str	r1, [sp, #12]
 800905e:	2a00      	cmp	r2, #0
 8009060:	db01      	blt.n	8009066 <_svfiprintf_r+0xf6>
 8009062:	9207      	str	r2, [sp, #28]
 8009064:	e004      	b.n	8009070 <_svfiprintf_r+0x100>
 8009066:	4252      	negs	r2, r2
 8009068:	f043 0302 	orr.w	r3, r3, #2
 800906c:	9207      	str	r2, [sp, #28]
 800906e:	9304      	str	r3, [sp, #16]
 8009070:	783b      	ldrb	r3, [r7, #0]
 8009072:	2b2e      	cmp	r3, #46	; 0x2e
 8009074:	d10e      	bne.n	8009094 <_svfiprintf_r+0x124>
 8009076:	787b      	ldrb	r3, [r7, #1]
 8009078:	2b2a      	cmp	r3, #42	; 0x2a
 800907a:	f107 0101 	add.w	r1, r7, #1
 800907e:	d132      	bne.n	80090e6 <_svfiprintf_r+0x176>
 8009080:	9b03      	ldr	r3, [sp, #12]
 8009082:	1d1a      	adds	r2, r3, #4
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	9203      	str	r2, [sp, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	bfb8      	it	lt
 800908c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009090:	3702      	adds	r7, #2
 8009092:	9305      	str	r3, [sp, #20]
 8009094:	4c2c      	ldr	r4, [pc, #176]	; (8009148 <_svfiprintf_r+0x1d8>)
 8009096:	7839      	ldrb	r1, [r7, #0]
 8009098:	2203      	movs	r2, #3
 800909a:	4620      	mov	r0, r4
 800909c:	f7f7 f8b0 	bl	8000200 <memchr>
 80090a0:	b138      	cbz	r0, 80090b2 <_svfiprintf_r+0x142>
 80090a2:	2340      	movs	r3, #64	; 0x40
 80090a4:	1b00      	subs	r0, r0, r4
 80090a6:	fa03 f000 	lsl.w	r0, r3, r0
 80090aa:	9b04      	ldr	r3, [sp, #16]
 80090ac:	4303      	orrs	r3, r0
 80090ae:	9304      	str	r3, [sp, #16]
 80090b0:	3701      	adds	r7, #1
 80090b2:	7839      	ldrb	r1, [r7, #0]
 80090b4:	4825      	ldr	r0, [pc, #148]	; (800914c <_svfiprintf_r+0x1dc>)
 80090b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090ba:	2206      	movs	r2, #6
 80090bc:	1c7e      	adds	r6, r7, #1
 80090be:	f7f7 f89f 	bl	8000200 <memchr>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d035      	beq.n	8009132 <_svfiprintf_r+0x1c2>
 80090c6:	4b22      	ldr	r3, [pc, #136]	; (8009150 <_svfiprintf_r+0x1e0>)
 80090c8:	b9fb      	cbnz	r3, 800910a <_svfiprintf_r+0x19a>
 80090ca:	9b03      	ldr	r3, [sp, #12]
 80090cc:	3307      	adds	r3, #7
 80090ce:	f023 0307 	bic.w	r3, r3, #7
 80090d2:	3308      	adds	r3, #8
 80090d4:	9303      	str	r3, [sp, #12]
 80090d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d8:	444b      	add	r3, r9
 80090da:	9309      	str	r3, [sp, #36]	; 0x24
 80090dc:	e76c      	b.n	8008fb8 <_svfiprintf_r+0x48>
 80090de:	fb00 3202 	mla	r2, r0, r2, r3
 80090e2:	2101      	movs	r1, #1
 80090e4:	e7a3      	b.n	800902e <_svfiprintf_r+0xbe>
 80090e6:	2300      	movs	r3, #0
 80090e8:	9305      	str	r3, [sp, #20]
 80090ea:	4618      	mov	r0, r3
 80090ec:	240a      	movs	r4, #10
 80090ee:	460f      	mov	r7, r1
 80090f0:	3101      	adds	r1, #1
 80090f2:	783a      	ldrb	r2, [r7, #0]
 80090f4:	3a30      	subs	r2, #48	; 0x30
 80090f6:	2a09      	cmp	r2, #9
 80090f8:	d903      	bls.n	8009102 <_svfiprintf_r+0x192>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0ca      	beq.n	8009094 <_svfiprintf_r+0x124>
 80090fe:	9005      	str	r0, [sp, #20]
 8009100:	e7c8      	b.n	8009094 <_svfiprintf_r+0x124>
 8009102:	fb04 2000 	mla	r0, r4, r0, r2
 8009106:	2301      	movs	r3, #1
 8009108:	e7f1      	b.n	80090ee <_svfiprintf_r+0x17e>
 800910a:	ab03      	add	r3, sp, #12
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	462a      	mov	r2, r5
 8009110:	4b10      	ldr	r3, [pc, #64]	; (8009154 <_svfiprintf_r+0x1e4>)
 8009112:	a904      	add	r1, sp, #16
 8009114:	4640      	mov	r0, r8
 8009116:	f3af 8000 	nop.w
 800911a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800911e:	4681      	mov	r9, r0
 8009120:	d1d9      	bne.n	80090d6 <_svfiprintf_r+0x166>
 8009122:	89ab      	ldrh	r3, [r5, #12]
 8009124:	065b      	lsls	r3, r3, #25
 8009126:	f53f af38 	bmi.w	8008f9a <_svfiprintf_r+0x2a>
 800912a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800912c:	b01d      	add	sp, #116	; 0x74
 800912e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009132:	ab03      	add	r3, sp, #12
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	462a      	mov	r2, r5
 8009138:	4b06      	ldr	r3, [pc, #24]	; (8009154 <_svfiprintf_r+0x1e4>)
 800913a:	a904      	add	r1, sp, #16
 800913c:	4640      	mov	r0, r8
 800913e:	f000 f881 	bl	8009244 <_printf_i>
 8009142:	e7ea      	b.n	800911a <_svfiprintf_r+0x1aa>
 8009144:	0800a1ce 	.word	0x0800a1ce
 8009148:	0800a1d4 	.word	0x0800a1d4
 800914c:	0800a1d8 	.word	0x0800a1d8
 8009150:	00000000 	.word	0x00000000
 8009154:	08008eb9 	.word	0x08008eb9

08009158 <_printf_common>:
 8009158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800915c:	4691      	mov	r9, r2
 800915e:	461f      	mov	r7, r3
 8009160:	688a      	ldr	r2, [r1, #8]
 8009162:	690b      	ldr	r3, [r1, #16]
 8009164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009168:	4293      	cmp	r3, r2
 800916a:	bfb8      	it	lt
 800916c:	4613      	movlt	r3, r2
 800916e:	f8c9 3000 	str.w	r3, [r9]
 8009172:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009176:	4606      	mov	r6, r0
 8009178:	460c      	mov	r4, r1
 800917a:	b112      	cbz	r2, 8009182 <_printf_common+0x2a>
 800917c:	3301      	adds	r3, #1
 800917e:	f8c9 3000 	str.w	r3, [r9]
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	0699      	lsls	r1, r3, #26
 8009186:	bf42      	ittt	mi
 8009188:	f8d9 3000 	ldrmi.w	r3, [r9]
 800918c:	3302      	addmi	r3, #2
 800918e:	f8c9 3000 	strmi.w	r3, [r9]
 8009192:	6825      	ldr	r5, [r4, #0]
 8009194:	f015 0506 	ands.w	r5, r5, #6
 8009198:	d107      	bne.n	80091aa <_printf_common+0x52>
 800919a:	f104 0a19 	add.w	sl, r4, #25
 800919e:	68e3      	ldr	r3, [r4, #12]
 80091a0:	f8d9 2000 	ldr.w	r2, [r9]
 80091a4:	1a9b      	subs	r3, r3, r2
 80091a6:	429d      	cmp	r5, r3
 80091a8:	db29      	blt.n	80091fe <_printf_common+0xa6>
 80091aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80091ae:	6822      	ldr	r2, [r4, #0]
 80091b0:	3300      	adds	r3, #0
 80091b2:	bf18      	it	ne
 80091b4:	2301      	movne	r3, #1
 80091b6:	0692      	lsls	r2, r2, #26
 80091b8:	d42e      	bmi.n	8009218 <_printf_common+0xc0>
 80091ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091be:	4639      	mov	r1, r7
 80091c0:	4630      	mov	r0, r6
 80091c2:	47c0      	blx	r8
 80091c4:	3001      	adds	r0, #1
 80091c6:	d021      	beq.n	800920c <_printf_common+0xb4>
 80091c8:	6823      	ldr	r3, [r4, #0]
 80091ca:	68e5      	ldr	r5, [r4, #12]
 80091cc:	f8d9 2000 	ldr.w	r2, [r9]
 80091d0:	f003 0306 	and.w	r3, r3, #6
 80091d4:	2b04      	cmp	r3, #4
 80091d6:	bf08      	it	eq
 80091d8:	1aad      	subeq	r5, r5, r2
 80091da:	68a3      	ldr	r3, [r4, #8]
 80091dc:	6922      	ldr	r2, [r4, #16]
 80091de:	bf0c      	ite	eq
 80091e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091e4:	2500      	movne	r5, #0
 80091e6:	4293      	cmp	r3, r2
 80091e8:	bfc4      	itt	gt
 80091ea:	1a9b      	subgt	r3, r3, r2
 80091ec:	18ed      	addgt	r5, r5, r3
 80091ee:	f04f 0900 	mov.w	r9, #0
 80091f2:	341a      	adds	r4, #26
 80091f4:	454d      	cmp	r5, r9
 80091f6:	d11b      	bne.n	8009230 <_printf_common+0xd8>
 80091f8:	2000      	movs	r0, #0
 80091fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fe:	2301      	movs	r3, #1
 8009200:	4652      	mov	r2, sl
 8009202:	4639      	mov	r1, r7
 8009204:	4630      	mov	r0, r6
 8009206:	47c0      	blx	r8
 8009208:	3001      	adds	r0, #1
 800920a:	d103      	bne.n	8009214 <_printf_common+0xbc>
 800920c:	f04f 30ff 	mov.w	r0, #4294967295
 8009210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009214:	3501      	adds	r5, #1
 8009216:	e7c2      	b.n	800919e <_printf_common+0x46>
 8009218:	18e1      	adds	r1, r4, r3
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	2030      	movs	r0, #48	; 0x30
 800921e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009222:	4422      	add	r2, r4
 8009224:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009228:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800922c:	3302      	adds	r3, #2
 800922e:	e7c4      	b.n	80091ba <_printf_common+0x62>
 8009230:	2301      	movs	r3, #1
 8009232:	4622      	mov	r2, r4
 8009234:	4639      	mov	r1, r7
 8009236:	4630      	mov	r0, r6
 8009238:	47c0      	blx	r8
 800923a:	3001      	adds	r0, #1
 800923c:	d0e6      	beq.n	800920c <_printf_common+0xb4>
 800923e:	f109 0901 	add.w	r9, r9, #1
 8009242:	e7d7      	b.n	80091f4 <_printf_common+0x9c>

08009244 <_printf_i>:
 8009244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009248:	4617      	mov	r7, r2
 800924a:	7e0a      	ldrb	r2, [r1, #24]
 800924c:	b085      	sub	sp, #20
 800924e:	2a6e      	cmp	r2, #110	; 0x6e
 8009250:	4698      	mov	r8, r3
 8009252:	4606      	mov	r6, r0
 8009254:	460c      	mov	r4, r1
 8009256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009258:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800925c:	f000 80bc 	beq.w	80093d8 <_printf_i+0x194>
 8009260:	d81a      	bhi.n	8009298 <_printf_i+0x54>
 8009262:	2a63      	cmp	r2, #99	; 0x63
 8009264:	d02e      	beq.n	80092c4 <_printf_i+0x80>
 8009266:	d80a      	bhi.n	800927e <_printf_i+0x3a>
 8009268:	2a00      	cmp	r2, #0
 800926a:	f000 80c8 	beq.w	80093fe <_printf_i+0x1ba>
 800926e:	2a58      	cmp	r2, #88	; 0x58
 8009270:	f000 808a 	beq.w	8009388 <_printf_i+0x144>
 8009274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009278:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800927c:	e02a      	b.n	80092d4 <_printf_i+0x90>
 800927e:	2a64      	cmp	r2, #100	; 0x64
 8009280:	d001      	beq.n	8009286 <_printf_i+0x42>
 8009282:	2a69      	cmp	r2, #105	; 0x69
 8009284:	d1f6      	bne.n	8009274 <_printf_i+0x30>
 8009286:	6821      	ldr	r1, [r4, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800928e:	d023      	beq.n	80092d8 <_printf_i+0x94>
 8009290:	1d11      	adds	r1, r2, #4
 8009292:	6019      	str	r1, [r3, #0]
 8009294:	6813      	ldr	r3, [r2, #0]
 8009296:	e027      	b.n	80092e8 <_printf_i+0xa4>
 8009298:	2a73      	cmp	r2, #115	; 0x73
 800929a:	f000 80b4 	beq.w	8009406 <_printf_i+0x1c2>
 800929e:	d808      	bhi.n	80092b2 <_printf_i+0x6e>
 80092a0:	2a6f      	cmp	r2, #111	; 0x6f
 80092a2:	d02a      	beq.n	80092fa <_printf_i+0xb6>
 80092a4:	2a70      	cmp	r2, #112	; 0x70
 80092a6:	d1e5      	bne.n	8009274 <_printf_i+0x30>
 80092a8:	680a      	ldr	r2, [r1, #0]
 80092aa:	f042 0220 	orr.w	r2, r2, #32
 80092ae:	600a      	str	r2, [r1, #0]
 80092b0:	e003      	b.n	80092ba <_printf_i+0x76>
 80092b2:	2a75      	cmp	r2, #117	; 0x75
 80092b4:	d021      	beq.n	80092fa <_printf_i+0xb6>
 80092b6:	2a78      	cmp	r2, #120	; 0x78
 80092b8:	d1dc      	bne.n	8009274 <_printf_i+0x30>
 80092ba:	2278      	movs	r2, #120	; 0x78
 80092bc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80092c0:	496e      	ldr	r1, [pc, #440]	; (800947c <_printf_i+0x238>)
 80092c2:	e064      	b.n	800938e <_printf_i+0x14a>
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80092ca:	1d11      	adds	r1, r2, #4
 80092cc:	6019      	str	r1, [r3, #0]
 80092ce:	6813      	ldr	r3, [r2, #0]
 80092d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092d4:	2301      	movs	r3, #1
 80092d6:	e0a3      	b.n	8009420 <_printf_i+0x1dc>
 80092d8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80092dc:	f102 0104 	add.w	r1, r2, #4
 80092e0:	6019      	str	r1, [r3, #0]
 80092e2:	d0d7      	beq.n	8009294 <_printf_i+0x50>
 80092e4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	da03      	bge.n	80092f4 <_printf_i+0xb0>
 80092ec:	222d      	movs	r2, #45	; 0x2d
 80092ee:	425b      	negs	r3, r3
 80092f0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80092f4:	4962      	ldr	r1, [pc, #392]	; (8009480 <_printf_i+0x23c>)
 80092f6:	220a      	movs	r2, #10
 80092f8:	e017      	b.n	800932a <_printf_i+0xe6>
 80092fa:	6820      	ldr	r0, [r4, #0]
 80092fc:	6819      	ldr	r1, [r3, #0]
 80092fe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009302:	d003      	beq.n	800930c <_printf_i+0xc8>
 8009304:	1d08      	adds	r0, r1, #4
 8009306:	6018      	str	r0, [r3, #0]
 8009308:	680b      	ldr	r3, [r1, #0]
 800930a:	e006      	b.n	800931a <_printf_i+0xd6>
 800930c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009310:	f101 0004 	add.w	r0, r1, #4
 8009314:	6018      	str	r0, [r3, #0]
 8009316:	d0f7      	beq.n	8009308 <_printf_i+0xc4>
 8009318:	880b      	ldrh	r3, [r1, #0]
 800931a:	4959      	ldr	r1, [pc, #356]	; (8009480 <_printf_i+0x23c>)
 800931c:	2a6f      	cmp	r2, #111	; 0x6f
 800931e:	bf14      	ite	ne
 8009320:	220a      	movne	r2, #10
 8009322:	2208      	moveq	r2, #8
 8009324:	2000      	movs	r0, #0
 8009326:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800932a:	6865      	ldr	r5, [r4, #4]
 800932c:	60a5      	str	r5, [r4, #8]
 800932e:	2d00      	cmp	r5, #0
 8009330:	f2c0 809c 	blt.w	800946c <_printf_i+0x228>
 8009334:	6820      	ldr	r0, [r4, #0]
 8009336:	f020 0004 	bic.w	r0, r0, #4
 800933a:	6020      	str	r0, [r4, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d13f      	bne.n	80093c0 <_printf_i+0x17c>
 8009340:	2d00      	cmp	r5, #0
 8009342:	f040 8095 	bne.w	8009470 <_printf_i+0x22c>
 8009346:	4675      	mov	r5, lr
 8009348:	2a08      	cmp	r2, #8
 800934a:	d10b      	bne.n	8009364 <_printf_i+0x120>
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	07da      	lsls	r2, r3, #31
 8009350:	d508      	bpl.n	8009364 <_printf_i+0x120>
 8009352:	6923      	ldr	r3, [r4, #16]
 8009354:	6862      	ldr	r2, [r4, #4]
 8009356:	429a      	cmp	r2, r3
 8009358:	bfde      	ittt	le
 800935a:	2330      	movle	r3, #48	; 0x30
 800935c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009360:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009364:	ebae 0305 	sub.w	r3, lr, r5
 8009368:	6123      	str	r3, [r4, #16]
 800936a:	f8cd 8000 	str.w	r8, [sp]
 800936e:	463b      	mov	r3, r7
 8009370:	aa03      	add	r2, sp, #12
 8009372:	4621      	mov	r1, r4
 8009374:	4630      	mov	r0, r6
 8009376:	f7ff feef 	bl	8009158 <_printf_common>
 800937a:	3001      	adds	r0, #1
 800937c:	d155      	bne.n	800942a <_printf_i+0x1e6>
 800937e:	f04f 30ff 	mov.w	r0, #4294967295
 8009382:	b005      	add	sp, #20
 8009384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009388:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800938c:	493c      	ldr	r1, [pc, #240]	; (8009480 <_printf_i+0x23c>)
 800938e:	6822      	ldr	r2, [r4, #0]
 8009390:	6818      	ldr	r0, [r3, #0]
 8009392:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009396:	f100 0504 	add.w	r5, r0, #4
 800939a:	601d      	str	r5, [r3, #0]
 800939c:	d001      	beq.n	80093a2 <_printf_i+0x15e>
 800939e:	6803      	ldr	r3, [r0, #0]
 80093a0:	e002      	b.n	80093a8 <_printf_i+0x164>
 80093a2:	0655      	lsls	r5, r2, #25
 80093a4:	d5fb      	bpl.n	800939e <_printf_i+0x15a>
 80093a6:	8803      	ldrh	r3, [r0, #0]
 80093a8:	07d0      	lsls	r0, r2, #31
 80093aa:	bf44      	itt	mi
 80093ac:	f042 0220 	orrmi.w	r2, r2, #32
 80093b0:	6022      	strmi	r2, [r4, #0]
 80093b2:	b91b      	cbnz	r3, 80093bc <_printf_i+0x178>
 80093b4:	6822      	ldr	r2, [r4, #0]
 80093b6:	f022 0220 	bic.w	r2, r2, #32
 80093ba:	6022      	str	r2, [r4, #0]
 80093bc:	2210      	movs	r2, #16
 80093be:	e7b1      	b.n	8009324 <_printf_i+0xe0>
 80093c0:	4675      	mov	r5, lr
 80093c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80093c6:	fb02 3310 	mls	r3, r2, r0, r3
 80093ca:	5ccb      	ldrb	r3, [r1, r3]
 80093cc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80093d0:	4603      	mov	r3, r0
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d1f5      	bne.n	80093c2 <_printf_i+0x17e>
 80093d6:	e7b7      	b.n	8009348 <_printf_i+0x104>
 80093d8:	6808      	ldr	r0, [r1, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	6949      	ldr	r1, [r1, #20]
 80093de:	f010 0f80 	tst.w	r0, #128	; 0x80
 80093e2:	d004      	beq.n	80093ee <_printf_i+0x1aa>
 80093e4:	1d10      	adds	r0, r2, #4
 80093e6:	6018      	str	r0, [r3, #0]
 80093e8:	6813      	ldr	r3, [r2, #0]
 80093ea:	6019      	str	r1, [r3, #0]
 80093ec:	e007      	b.n	80093fe <_printf_i+0x1ba>
 80093ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093f2:	f102 0004 	add.w	r0, r2, #4
 80093f6:	6018      	str	r0, [r3, #0]
 80093f8:	6813      	ldr	r3, [r2, #0]
 80093fa:	d0f6      	beq.n	80093ea <_printf_i+0x1a6>
 80093fc:	8019      	strh	r1, [r3, #0]
 80093fe:	2300      	movs	r3, #0
 8009400:	6123      	str	r3, [r4, #16]
 8009402:	4675      	mov	r5, lr
 8009404:	e7b1      	b.n	800936a <_printf_i+0x126>
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	1d11      	adds	r1, r2, #4
 800940a:	6019      	str	r1, [r3, #0]
 800940c:	6815      	ldr	r5, [r2, #0]
 800940e:	6862      	ldr	r2, [r4, #4]
 8009410:	2100      	movs	r1, #0
 8009412:	4628      	mov	r0, r5
 8009414:	f7f6 fef4 	bl	8000200 <memchr>
 8009418:	b108      	cbz	r0, 800941e <_printf_i+0x1da>
 800941a:	1b40      	subs	r0, r0, r5
 800941c:	6060      	str	r0, [r4, #4]
 800941e:	6863      	ldr	r3, [r4, #4]
 8009420:	6123      	str	r3, [r4, #16]
 8009422:	2300      	movs	r3, #0
 8009424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009428:	e79f      	b.n	800936a <_printf_i+0x126>
 800942a:	6923      	ldr	r3, [r4, #16]
 800942c:	462a      	mov	r2, r5
 800942e:	4639      	mov	r1, r7
 8009430:	4630      	mov	r0, r6
 8009432:	47c0      	blx	r8
 8009434:	3001      	adds	r0, #1
 8009436:	d0a2      	beq.n	800937e <_printf_i+0x13a>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	079b      	lsls	r3, r3, #30
 800943c:	d507      	bpl.n	800944e <_printf_i+0x20a>
 800943e:	2500      	movs	r5, #0
 8009440:	f104 0919 	add.w	r9, r4, #25
 8009444:	68e3      	ldr	r3, [r4, #12]
 8009446:	9a03      	ldr	r2, [sp, #12]
 8009448:	1a9b      	subs	r3, r3, r2
 800944a:	429d      	cmp	r5, r3
 800944c:	db05      	blt.n	800945a <_printf_i+0x216>
 800944e:	68e0      	ldr	r0, [r4, #12]
 8009450:	9b03      	ldr	r3, [sp, #12]
 8009452:	4298      	cmp	r0, r3
 8009454:	bfb8      	it	lt
 8009456:	4618      	movlt	r0, r3
 8009458:	e793      	b.n	8009382 <_printf_i+0x13e>
 800945a:	2301      	movs	r3, #1
 800945c:	464a      	mov	r2, r9
 800945e:	4639      	mov	r1, r7
 8009460:	4630      	mov	r0, r6
 8009462:	47c0      	blx	r8
 8009464:	3001      	adds	r0, #1
 8009466:	d08a      	beq.n	800937e <_printf_i+0x13a>
 8009468:	3501      	adds	r5, #1
 800946a:	e7eb      	b.n	8009444 <_printf_i+0x200>
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1a7      	bne.n	80093c0 <_printf_i+0x17c>
 8009470:	780b      	ldrb	r3, [r1, #0]
 8009472:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009476:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800947a:	e765      	b.n	8009348 <_printf_i+0x104>
 800947c:	0800a1f0 	.word	0x0800a1f0
 8009480:	0800a1df 	.word	0x0800a1df

08009484 <_sbrk_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	4c06      	ldr	r4, [pc, #24]	; (80094a0 <_sbrk_r+0x1c>)
 8009488:	2300      	movs	r3, #0
 800948a:	4605      	mov	r5, r0
 800948c:	4608      	mov	r0, r1
 800948e:	6023      	str	r3, [r4, #0]
 8009490:	f7fe fe76 	bl	8008180 <_sbrk>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	d102      	bne.n	800949e <_sbrk_r+0x1a>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	b103      	cbz	r3, 800949e <_sbrk_r+0x1a>
 800949c:	602b      	str	r3, [r5, #0]
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	20014af4 	.word	0x20014af4

080094a4 <siscanf>:
 80094a4:	b40e      	push	{r1, r2, r3}
 80094a6:	b530      	push	{r4, r5, lr}
 80094a8:	b09c      	sub	sp, #112	; 0x70
 80094aa:	ac1f      	add	r4, sp, #124	; 0x7c
 80094ac:	f44f 7201 	mov.w	r2, #516	; 0x204
 80094b0:	f854 5b04 	ldr.w	r5, [r4], #4
 80094b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80094b8:	9002      	str	r0, [sp, #8]
 80094ba:	9006      	str	r0, [sp, #24]
 80094bc:	f7f6 fe88 	bl	80001d0 <strlen>
 80094c0:	4b0b      	ldr	r3, [pc, #44]	; (80094f0 <siscanf+0x4c>)
 80094c2:	9003      	str	r0, [sp, #12]
 80094c4:	9007      	str	r0, [sp, #28]
 80094c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80094c8:	480a      	ldr	r0, [pc, #40]	; (80094f4 <siscanf+0x50>)
 80094ca:	9401      	str	r4, [sp, #4]
 80094cc:	2300      	movs	r3, #0
 80094ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80094d0:	9314      	str	r3, [sp, #80]	; 0x50
 80094d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80094da:	462a      	mov	r2, r5
 80094dc:	4623      	mov	r3, r4
 80094de:	a902      	add	r1, sp, #8
 80094e0:	6800      	ldr	r0, [r0, #0]
 80094e2:	f000 f95d 	bl	80097a0 <__ssvfiscanf_r>
 80094e6:	b01c      	add	sp, #112	; 0x70
 80094e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094ec:	b003      	add	sp, #12
 80094ee:	4770      	bx	lr
 80094f0:	080094f9 	.word	0x080094f9
 80094f4:	20000010 	.word	0x20000010

080094f8 <__seofread>:
 80094f8:	2000      	movs	r0, #0
 80094fa:	4770      	bx	lr

080094fc <_strtoul_l.isra.0>:
 80094fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009500:	4680      	mov	r8, r0
 8009502:	4689      	mov	r9, r1
 8009504:	4692      	mov	sl, r2
 8009506:	461e      	mov	r6, r3
 8009508:	460f      	mov	r7, r1
 800950a:	463d      	mov	r5, r7
 800950c:	9808      	ldr	r0, [sp, #32]
 800950e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009512:	f7ff fbf9 	bl	8008d08 <__locale_ctype_ptr_l>
 8009516:	4420      	add	r0, r4
 8009518:	7843      	ldrb	r3, [r0, #1]
 800951a:	f013 0308 	ands.w	r3, r3, #8
 800951e:	d10a      	bne.n	8009536 <_strtoul_l.isra.0+0x3a>
 8009520:	2c2d      	cmp	r4, #45	; 0x2d
 8009522:	d10a      	bne.n	800953a <_strtoul_l.isra.0+0x3e>
 8009524:	782c      	ldrb	r4, [r5, #0]
 8009526:	2301      	movs	r3, #1
 8009528:	1cbd      	adds	r5, r7, #2
 800952a:	b15e      	cbz	r6, 8009544 <_strtoul_l.isra.0+0x48>
 800952c:	2e10      	cmp	r6, #16
 800952e:	d113      	bne.n	8009558 <_strtoul_l.isra.0+0x5c>
 8009530:	2c30      	cmp	r4, #48	; 0x30
 8009532:	d009      	beq.n	8009548 <_strtoul_l.isra.0+0x4c>
 8009534:	e010      	b.n	8009558 <_strtoul_l.isra.0+0x5c>
 8009536:	462f      	mov	r7, r5
 8009538:	e7e7      	b.n	800950a <_strtoul_l.isra.0+0xe>
 800953a:	2c2b      	cmp	r4, #43	; 0x2b
 800953c:	bf04      	itt	eq
 800953e:	782c      	ldrbeq	r4, [r5, #0]
 8009540:	1cbd      	addeq	r5, r7, #2
 8009542:	e7f2      	b.n	800952a <_strtoul_l.isra.0+0x2e>
 8009544:	2c30      	cmp	r4, #48	; 0x30
 8009546:	d125      	bne.n	8009594 <_strtoul_l.isra.0+0x98>
 8009548:	782a      	ldrb	r2, [r5, #0]
 800954a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800954e:	2a58      	cmp	r2, #88	; 0x58
 8009550:	d14a      	bne.n	80095e8 <_strtoul_l.isra.0+0xec>
 8009552:	786c      	ldrb	r4, [r5, #1]
 8009554:	2610      	movs	r6, #16
 8009556:	3502      	adds	r5, #2
 8009558:	f04f 31ff 	mov.w	r1, #4294967295
 800955c:	2700      	movs	r7, #0
 800955e:	fbb1 f1f6 	udiv	r1, r1, r6
 8009562:	fb06 fe01 	mul.w	lr, r6, r1
 8009566:	ea6f 0e0e 	mvn.w	lr, lr
 800956a:	4638      	mov	r0, r7
 800956c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8009570:	2a09      	cmp	r2, #9
 8009572:	d811      	bhi.n	8009598 <_strtoul_l.isra.0+0x9c>
 8009574:	4614      	mov	r4, r2
 8009576:	42a6      	cmp	r6, r4
 8009578:	dd1d      	ble.n	80095b6 <_strtoul_l.isra.0+0xba>
 800957a:	2f00      	cmp	r7, #0
 800957c:	db18      	blt.n	80095b0 <_strtoul_l.isra.0+0xb4>
 800957e:	4281      	cmp	r1, r0
 8009580:	d316      	bcc.n	80095b0 <_strtoul_l.isra.0+0xb4>
 8009582:	d101      	bne.n	8009588 <_strtoul_l.isra.0+0x8c>
 8009584:	45a6      	cmp	lr, r4
 8009586:	db13      	blt.n	80095b0 <_strtoul_l.isra.0+0xb4>
 8009588:	fb00 4006 	mla	r0, r0, r6, r4
 800958c:	2701      	movs	r7, #1
 800958e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009592:	e7eb      	b.n	800956c <_strtoul_l.isra.0+0x70>
 8009594:	260a      	movs	r6, #10
 8009596:	e7df      	b.n	8009558 <_strtoul_l.isra.0+0x5c>
 8009598:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800959c:	2a19      	cmp	r2, #25
 800959e:	d801      	bhi.n	80095a4 <_strtoul_l.isra.0+0xa8>
 80095a0:	3c37      	subs	r4, #55	; 0x37
 80095a2:	e7e8      	b.n	8009576 <_strtoul_l.isra.0+0x7a>
 80095a4:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 80095a8:	2a19      	cmp	r2, #25
 80095aa:	d804      	bhi.n	80095b6 <_strtoul_l.isra.0+0xba>
 80095ac:	3c57      	subs	r4, #87	; 0x57
 80095ae:	e7e2      	b.n	8009576 <_strtoul_l.isra.0+0x7a>
 80095b0:	f04f 37ff 	mov.w	r7, #4294967295
 80095b4:	e7eb      	b.n	800958e <_strtoul_l.isra.0+0x92>
 80095b6:	2f00      	cmp	r7, #0
 80095b8:	da09      	bge.n	80095ce <_strtoul_l.isra.0+0xd2>
 80095ba:	2322      	movs	r3, #34	; 0x22
 80095bc:	f8c8 3000 	str.w	r3, [r8]
 80095c0:	f04f 30ff 	mov.w	r0, #4294967295
 80095c4:	f1ba 0f00 	cmp.w	sl, #0
 80095c8:	d107      	bne.n	80095da <_strtoul_l.isra.0+0xde>
 80095ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ce:	b103      	cbz	r3, 80095d2 <_strtoul_l.isra.0+0xd6>
 80095d0:	4240      	negs	r0, r0
 80095d2:	f1ba 0f00 	cmp.w	sl, #0
 80095d6:	d00c      	beq.n	80095f2 <_strtoul_l.isra.0+0xf6>
 80095d8:	b127      	cbz	r7, 80095e4 <_strtoul_l.isra.0+0xe8>
 80095da:	3d01      	subs	r5, #1
 80095dc:	f8ca 5000 	str.w	r5, [sl]
 80095e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e4:	464d      	mov	r5, r9
 80095e6:	e7f9      	b.n	80095dc <_strtoul_l.isra.0+0xe0>
 80095e8:	2430      	movs	r4, #48	; 0x30
 80095ea:	2e00      	cmp	r6, #0
 80095ec:	d1b4      	bne.n	8009558 <_strtoul_l.isra.0+0x5c>
 80095ee:	2608      	movs	r6, #8
 80095f0:	e7b2      	b.n	8009558 <_strtoul_l.isra.0+0x5c>
 80095f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080095f8 <_strtoul_r>:
 80095f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095fa:	4c06      	ldr	r4, [pc, #24]	; (8009614 <_strtoul_r+0x1c>)
 80095fc:	4d06      	ldr	r5, [pc, #24]	; (8009618 <_strtoul_r+0x20>)
 80095fe:	6824      	ldr	r4, [r4, #0]
 8009600:	6a24      	ldr	r4, [r4, #32]
 8009602:	2c00      	cmp	r4, #0
 8009604:	bf08      	it	eq
 8009606:	462c      	moveq	r4, r5
 8009608:	9400      	str	r4, [sp, #0]
 800960a:	f7ff ff77 	bl	80094fc <_strtoul_l.isra.0>
 800960e:	b003      	add	sp, #12
 8009610:	bd30      	pop	{r4, r5, pc}
 8009612:	bf00      	nop
 8009614:	20000010 	.word	0x20000010
 8009618:	200000bc 	.word	0x200000bc

0800961c <strtoul>:
 800961c:	4b08      	ldr	r3, [pc, #32]	; (8009640 <strtoul+0x24>)
 800961e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009620:	681c      	ldr	r4, [r3, #0]
 8009622:	4d08      	ldr	r5, [pc, #32]	; (8009644 <strtoul+0x28>)
 8009624:	6a23      	ldr	r3, [r4, #32]
 8009626:	2b00      	cmp	r3, #0
 8009628:	bf08      	it	eq
 800962a:	462b      	moveq	r3, r5
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	4613      	mov	r3, r2
 8009630:	460a      	mov	r2, r1
 8009632:	4601      	mov	r1, r0
 8009634:	4620      	mov	r0, r4
 8009636:	f7ff ff61 	bl	80094fc <_strtoul_l.isra.0>
 800963a:	b003      	add	sp, #12
 800963c:	bd30      	pop	{r4, r5, pc}
 800963e:	bf00      	nop
 8009640:	20000010 	.word	0x20000010
 8009644:	200000bc 	.word	0x200000bc

08009648 <__ascii_wctomb>:
 8009648:	b149      	cbz	r1, 800965e <__ascii_wctomb+0x16>
 800964a:	2aff      	cmp	r2, #255	; 0xff
 800964c:	bf85      	ittet	hi
 800964e:	238a      	movhi	r3, #138	; 0x8a
 8009650:	6003      	strhi	r3, [r0, #0]
 8009652:	700a      	strbls	r2, [r1, #0]
 8009654:	f04f 30ff 	movhi.w	r0, #4294967295
 8009658:	bf98      	it	ls
 800965a:	2001      	movls	r0, #1
 800965c:	4770      	bx	lr
 800965e:	4608      	mov	r0, r1
 8009660:	4770      	bx	lr

08009662 <__env_lock>:
 8009662:	4770      	bx	lr

08009664 <__env_unlock>:
 8009664:	4770      	bx	lr

08009666 <memmove>:
 8009666:	4288      	cmp	r0, r1
 8009668:	b510      	push	{r4, lr}
 800966a:	eb01 0302 	add.w	r3, r1, r2
 800966e:	d803      	bhi.n	8009678 <memmove+0x12>
 8009670:	1e42      	subs	r2, r0, #1
 8009672:	4299      	cmp	r1, r3
 8009674:	d10c      	bne.n	8009690 <memmove+0x2a>
 8009676:	bd10      	pop	{r4, pc}
 8009678:	4298      	cmp	r0, r3
 800967a:	d2f9      	bcs.n	8009670 <memmove+0xa>
 800967c:	1881      	adds	r1, r0, r2
 800967e:	1ad2      	subs	r2, r2, r3
 8009680:	42d3      	cmn	r3, r2
 8009682:	d100      	bne.n	8009686 <memmove+0x20>
 8009684:	bd10      	pop	{r4, pc}
 8009686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800968a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800968e:	e7f7      	b.n	8009680 <memmove+0x1a>
 8009690:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009694:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009698:	e7eb      	b.n	8009672 <memmove+0xc>

0800969a <__malloc_lock>:
 800969a:	4770      	bx	lr

0800969c <__malloc_unlock>:
 800969c:	4770      	bx	lr

0800969e <_realloc_r>:
 800969e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a0:	4607      	mov	r7, r0
 80096a2:	4614      	mov	r4, r2
 80096a4:	460e      	mov	r6, r1
 80096a6:	b921      	cbnz	r1, 80096b2 <_realloc_r+0x14>
 80096a8:	4611      	mov	r1, r2
 80096aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80096ae:	f7ff bba5 	b.w	8008dfc <_malloc_r>
 80096b2:	b922      	cbnz	r2, 80096be <_realloc_r+0x20>
 80096b4:	f7ff fb54 	bl	8008d60 <_free_r>
 80096b8:	4625      	mov	r5, r4
 80096ba:	4628      	mov	r0, r5
 80096bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096be:	f000 fb86 	bl	8009dce <_malloc_usable_size_r>
 80096c2:	4284      	cmp	r4, r0
 80096c4:	d90f      	bls.n	80096e6 <_realloc_r+0x48>
 80096c6:	4621      	mov	r1, r4
 80096c8:	4638      	mov	r0, r7
 80096ca:	f7ff fb97 	bl	8008dfc <_malloc_r>
 80096ce:	4605      	mov	r5, r0
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d0f2      	beq.n	80096ba <_realloc_r+0x1c>
 80096d4:	4631      	mov	r1, r6
 80096d6:	4622      	mov	r2, r4
 80096d8:	f7fe fedb 	bl	8008492 <memcpy>
 80096dc:	4631      	mov	r1, r6
 80096de:	4638      	mov	r0, r7
 80096e0:	f7ff fb3e 	bl	8008d60 <_free_r>
 80096e4:	e7e9      	b.n	80096ba <_realloc_r+0x1c>
 80096e6:	4635      	mov	r5, r6
 80096e8:	e7e7      	b.n	80096ba <_realloc_r+0x1c>

080096ea <_sungetc_r>:
 80096ea:	b538      	push	{r3, r4, r5, lr}
 80096ec:	1c4b      	adds	r3, r1, #1
 80096ee:	4614      	mov	r4, r2
 80096f0:	d103      	bne.n	80096fa <_sungetc_r+0x10>
 80096f2:	f04f 35ff 	mov.w	r5, #4294967295
 80096f6:	4628      	mov	r0, r5
 80096f8:	bd38      	pop	{r3, r4, r5, pc}
 80096fa:	8993      	ldrh	r3, [r2, #12]
 80096fc:	f023 0320 	bic.w	r3, r3, #32
 8009700:	8193      	strh	r3, [r2, #12]
 8009702:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009704:	6852      	ldr	r2, [r2, #4]
 8009706:	b2cd      	uxtb	r5, r1
 8009708:	b18b      	cbz	r3, 800972e <_sungetc_r+0x44>
 800970a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800970c:	429a      	cmp	r2, r3
 800970e:	da08      	bge.n	8009722 <_sungetc_r+0x38>
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	1e5a      	subs	r2, r3, #1
 8009714:	6022      	str	r2, [r4, #0]
 8009716:	f803 5c01 	strb.w	r5, [r3, #-1]
 800971a:	6863      	ldr	r3, [r4, #4]
 800971c:	3301      	adds	r3, #1
 800971e:	6063      	str	r3, [r4, #4]
 8009720:	e7e9      	b.n	80096f6 <_sungetc_r+0xc>
 8009722:	4621      	mov	r1, r4
 8009724:	f000 fb18 	bl	8009d58 <__submore>
 8009728:	2800      	cmp	r0, #0
 800972a:	d0f1      	beq.n	8009710 <_sungetc_r+0x26>
 800972c:	e7e1      	b.n	80096f2 <_sungetc_r+0x8>
 800972e:	6921      	ldr	r1, [r4, #16]
 8009730:	6823      	ldr	r3, [r4, #0]
 8009732:	b151      	cbz	r1, 800974a <_sungetc_r+0x60>
 8009734:	4299      	cmp	r1, r3
 8009736:	d208      	bcs.n	800974a <_sungetc_r+0x60>
 8009738:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800973c:	428d      	cmp	r5, r1
 800973e:	d104      	bne.n	800974a <_sungetc_r+0x60>
 8009740:	3b01      	subs	r3, #1
 8009742:	3201      	adds	r2, #1
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	6062      	str	r2, [r4, #4]
 8009748:	e7d5      	b.n	80096f6 <_sungetc_r+0xc>
 800974a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800974c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009750:	6363      	str	r3, [r4, #52]	; 0x34
 8009752:	2303      	movs	r3, #3
 8009754:	63a3      	str	r3, [r4, #56]	; 0x38
 8009756:	4623      	mov	r3, r4
 8009758:	6422      	str	r2, [r4, #64]	; 0x40
 800975a:	f803 5f46 	strb.w	r5, [r3, #70]!
 800975e:	6023      	str	r3, [r4, #0]
 8009760:	2301      	movs	r3, #1
 8009762:	e7dc      	b.n	800971e <_sungetc_r+0x34>

08009764 <__ssrefill_r>:
 8009764:	b510      	push	{r4, lr}
 8009766:	460c      	mov	r4, r1
 8009768:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800976a:	b169      	cbz	r1, 8009788 <__ssrefill_r+0x24>
 800976c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009770:	4299      	cmp	r1, r3
 8009772:	d001      	beq.n	8009778 <__ssrefill_r+0x14>
 8009774:	f7ff faf4 	bl	8008d60 <_free_r>
 8009778:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800977a:	6063      	str	r3, [r4, #4]
 800977c:	2000      	movs	r0, #0
 800977e:	6360      	str	r0, [r4, #52]	; 0x34
 8009780:	b113      	cbz	r3, 8009788 <__ssrefill_r+0x24>
 8009782:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009784:	6023      	str	r3, [r4, #0]
 8009786:	bd10      	pop	{r4, pc}
 8009788:	6923      	ldr	r3, [r4, #16]
 800978a:	6023      	str	r3, [r4, #0]
 800978c:	2300      	movs	r3, #0
 800978e:	6063      	str	r3, [r4, #4]
 8009790:	89a3      	ldrh	r3, [r4, #12]
 8009792:	f043 0320 	orr.w	r3, r3, #32
 8009796:	81a3      	strh	r3, [r4, #12]
 8009798:	f04f 30ff 	mov.w	r0, #4294967295
 800979c:	bd10      	pop	{r4, pc}
	...

080097a0 <__ssvfiscanf_r>:
 80097a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a4:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 80097a8:	f10d 080c 	add.w	r8, sp, #12
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	2300      	movs	r3, #0
 80097b0:	9346      	str	r3, [sp, #280]	; 0x118
 80097b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80097b4:	4ba0      	ldr	r3, [pc, #640]	; (8009a38 <__ssvfiscanf_r+0x298>)
 80097b6:	93a2      	str	r3, [sp, #648]	; 0x288
 80097b8:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8009a40 <__ssvfiscanf_r+0x2a0>
 80097bc:	4b9f      	ldr	r3, [pc, #636]	; (8009a3c <__ssvfiscanf_r+0x29c>)
 80097be:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 80097c2:	4606      	mov	r6, r0
 80097c4:	460c      	mov	r4, r1
 80097c6:	93a3      	str	r3, [sp, #652]	; 0x28c
 80097c8:	4692      	mov	sl, r2
 80097ca:	270a      	movs	r7, #10
 80097cc:	f89a 3000 	ldrb.w	r3, [sl]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 812f 	beq.w	8009a34 <__ssvfiscanf_r+0x294>
 80097d6:	f7ff fa9b 	bl	8008d10 <__locale_ctype_ptr>
 80097da:	f89a b000 	ldrb.w	fp, [sl]
 80097de:	4458      	add	r0, fp
 80097e0:	7843      	ldrb	r3, [r0, #1]
 80097e2:	f013 0308 	ands.w	r3, r3, #8
 80097e6:	d143      	bne.n	8009870 <__ssvfiscanf_r+0xd0>
 80097e8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80097ec:	f10a 0501 	add.w	r5, sl, #1
 80097f0:	f040 8099 	bne.w	8009926 <__ssvfiscanf_r+0x186>
 80097f4:	9345      	str	r3, [sp, #276]	; 0x114
 80097f6:	9343      	str	r3, [sp, #268]	; 0x10c
 80097f8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80097fc:	2b2a      	cmp	r3, #42	; 0x2a
 80097fe:	d103      	bne.n	8009808 <__ssvfiscanf_r+0x68>
 8009800:	2310      	movs	r3, #16
 8009802:	9343      	str	r3, [sp, #268]	; 0x10c
 8009804:	f10a 0502 	add.w	r5, sl, #2
 8009808:	7829      	ldrb	r1, [r5, #0]
 800980a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800980e:	2a09      	cmp	r2, #9
 8009810:	46aa      	mov	sl, r5
 8009812:	f105 0501 	add.w	r5, r5, #1
 8009816:	d941      	bls.n	800989c <__ssvfiscanf_r+0xfc>
 8009818:	2203      	movs	r2, #3
 800981a:	4889      	ldr	r0, [pc, #548]	; (8009a40 <__ssvfiscanf_r+0x2a0>)
 800981c:	f7f6 fcf0 	bl	8000200 <memchr>
 8009820:	b138      	cbz	r0, 8009832 <__ssvfiscanf_r+0x92>
 8009822:	eba0 0309 	sub.w	r3, r0, r9
 8009826:	2001      	movs	r0, #1
 8009828:	4098      	lsls	r0, r3
 800982a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800982c:	4318      	orrs	r0, r3
 800982e:	9043      	str	r0, [sp, #268]	; 0x10c
 8009830:	46aa      	mov	sl, r5
 8009832:	f89a 3000 	ldrb.w	r3, [sl]
 8009836:	2b67      	cmp	r3, #103	; 0x67
 8009838:	f10a 0501 	add.w	r5, sl, #1
 800983c:	d84a      	bhi.n	80098d4 <__ssvfiscanf_r+0x134>
 800983e:	2b65      	cmp	r3, #101	; 0x65
 8009840:	f080 80b7 	bcs.w	80099b2 <__ssvfiscanf_r+0x212>
 8009844:	2b47      	cmp	r3, #71	; 0x47
 8009846:	d82f      	bhi.n	80098a8 <__ssvfiscanf_r+0x108>
 8009848:	2b45      	cmp	r3, #69	; 0x45
 800984a:	f080 80b2 	bcs.w	80099b2 <__ssvfiscanf_r+0x212>
 800984e:	2b00      	cmp	r3, #0
 8009850:	f000 8082 	beq.w	8009958 <__ssvfiscanf_r+0x1b8>
 8009854:	2b25      	cmp	r3, #37	; 0x25
 8009856:	d066      	beq.n	8009926 <__ssvfiscanf_r+0x186>
 8009858:	2303      	movs	r3, #3
 800985a:	9349      	str	r3, [sp, #292]	; 0x124
 800985c:	9744      	str	r7, [sp, #272]	; 0x110
 800985e:	e045      	b.n	80098ec <__ssvfiscanf_r+0x14c>
 8009860:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8009862:	3101      	adds	r1, #1
 8009864:	9147      	str	r1, [sp, #284]	; 0x11c
 8009866:	6861      	ldr	r1, [r4, #4]
 8009868:	3301      	adds	r3, #1
 800986a:	3901      	subs	r1, #1
 800986c:	6061      	str	r1, [r4, #4]
 800986e:	6023      	str	r3, [r4, #0]
 8009870:	6863      	ldr	r3, [r4, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	dd0b      	ble.n	800988e <__ssvfiscanf_r+0xee>
 8009876:	f7ff fa4b 	bl	8008d10 <__locale_ctype_ptr>
 800987a:	6823      	ldr	r3, [r4, #0]
 800987c:	7819      	ldrb	r1, [r3, #0]
 800987e:	4408      	add	r0, r1
 8009880:	7841      	ldrb	r1, [r0, #1]
 8009882:	070d      	lsls	r5, r1, #28
 8009884:	d4ec      	bmi.n	8009860 <__ssvfiscanf_r+0xc0>
 8009886:	f10a 0501 	add.w	r5, sl, #1
 800988a:	46aa      	mov	sl, r5
 800988c:	e79e      	b.n	80097cc <__ssvfiscanf_r+0x2c>
 800988e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009890:	4621      	mov	r1, r4
 8009892:	4630      	mov	r0, r6
 8009894:	4798      	blx	r3
 8009896:	2800      	cmp	r0, #0
 8009898:	d0ed      	beq.n	8009876 <__ssvfiscanf_r+0xd6>
 800989a:	e7f4      	b.n	8009886 <__ssvfiscanf_r+0xe6>
 800989c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800989e:	fb07 1303 	mla	r3, r7, r3, r1
 80098a2:	3b30      	subs	r3, #48	; 0x30
 80098a4:	9345      	str	r3, [sp, #276]	; 0x114
 80098a6:	e7af      	b.n	8009808 <__ssvfiscanf_r+0x68>
 80098a8:	2b5b      	cmp	r3, #91	; 0x5b
 80098aa:	d061      	beq.n	8009970 <__ssvfiscanf_r+0x1d0>
 80098ac:	d80c      	bhi.n	80098c8 <__ssvfiscanf_r+0x128>
 80098ae:	2b58      	cmp	r3, #88	; 0x58
 80098b0:	d1d2      	bne.n	8009858 <__ssvfiscanf_r+0xb8>
 80098b2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80098b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098b8:	9243      	str	r2, [sp, #268]	; 0x10c
 80098ba:	2210      	movs	r2, #16
 80098bc:	9244      	str	r2, [sp, #272]	; 0x110
 80098be:	2b6f      	cmp	r3, #111	; 0x6f
 80098c0:	bfb4      	ite	lt
 80098c2:	2303      	movlt	r3, #3
 80098c4:	2304      	movge	r3, #4
 80098c6:	e010      	b.n	80098ea <__ssvfiscanf_r+0x14a>
 80098c8:	2b63      	cmp	r3, #99	; 0x63
 80098ca:	d05c      	beq.n	8009986 <__ssvfiscanf_r+0x1e6>
 80098cc:	2b64      	cmp	r3, #100	; 0x64
 80098ce:	d1c3      	bne.n	8009858 <__ssvfiscanf_r+0xb8>
 80098d0:	9744      	str	r7, [sp, #272]	; 0x110
 80098d2:	e7f4      	b.n	80098be <__ssvfiscanf_r+0x11e>
 80098d4:	2b70      	cmp	r3, #112	; 0x70
 80098d6:	d042      	beq.n	800995e <__ssvfiscanf_r+0x1be>
 80098d8:	d81d      	bhi.n	8009916 <__ssvfiscanf_r+0x176>
 80098da:	2b6e      	cmp	r3, #110	; 0x6e
 80098dc:	d059      	beq.n	8009992 <__ssvfiscanf_r+0x1f2>
 80098de:	d843      	bhi.n	8009968 <__ssvfiscanf_r+0x1c8>
 80098e0:	2b69      	cmp	r3, #105	; 0x69
 80098e2:	d1b9      	bne.n	8009858 <__ssvfiscanf_r+0xb8>
 80098e4:	2300      	movs	r3, #0
 80098e6:	9344      	str	r3, [sp, #272]	; 0x110
 80098e8:	2303      	movs	r3, #3
 80098ea:	9349      	str	r3, [sp, #292]	; 0x124
 80098ec:	6863      	ldr	r3, [r4, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	dd61      	ble.n	80099b6 <__ssvfiscanf_r+0x216>
 80098f2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80098f4:	0659      	lsls	r1, r3, #25
 80098f6:	d56f      	bpl.n	80099d8 <__ssvfiscanf_r+0x238>
 80098f8:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	dc7c      	bgt.n	80099f8 <__ssvfiscanf_r+0x258>
 80098fe:	ab01      	add	r3, sp, #4
 8009900:	4622      	mov	r2, r4
 8009902:	a943      	add	r1, sp, #268	; 0x10c
 8009904:	4630      	mov	r0, r6
 8009906:	f000 f89f 	bl	8009a48 <_scanf_chars>
 800990a:	2801      	cmp	r0, #1
 800990c:	f000 8092 	beq.w	8009a34 <__ssvfiscanf_r+0x294>
 8009910:	2802      	cmp	r0, #2
 8009912:	d1ba      	bne.n	800988a <__ssvfiscanf_r+0xea>
 8009914:	e01d      	b.n	8009952 <__ssvfiscanf_r+0x1b2>
 8009916:	2b75      	cmp	r3, #117	; 0x75
 8009918:	d0da      	beq.n	80098d0 <__ssvfiscanf_r+0x130>
 800991a:	2b78      	cmp	r3, #120	; 0x78
 800991c:	d0c9      	beq.n	80098b2 <__ssvfiscanf_r+0x112>
 800991e:	2b73      	cmp	r3, #115	; 0x73
 8009920:	d19a      	bne.n	8009858 <__ssvfiscanf_r+0xb8>
 8009922:	2302      	movs	r3, #2
 8009924:	e7e1      	b.n	80098ea <__ssvfiscanf_r+0x14a>
 8009926:	6863      	ldr	r3, [r4, #4]
 8009928:	2b00      	cmp	r3, #0
 800992a:	dd0c      	ble.n	8009946 <__ssvfiscanf_r+0x1a6>
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	781a      	ldrb	r2, [r3, #0]
 8009930:	4593      	cmp	fp, r2
 8009932:	d17f      	bne.n	8009a34 <__ssvfiscanf_r+0x294>
 8009934:	3301      	adds	r3, #1
 8009936:	6862      	ldr	r2, [r4, #4]
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800993c:	3a01      	subs	r2, #1
 800993e:	3301      	adds	r3, #1
 8009940:	6062      	str	r2, [r4, #4]
 8009942:	9347      	str	r3, [sp, #284]	; 0x11c
 8009944:	e7a1      	b.n	800988a <__ssvfiscanf_r+0xea>
 8009946:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009948:	4621      	mov	r1, r4
 800994a:	4630      	mov	r0, r6
 800994c:	4798      	blx	r3
 800994e:	2800      	cmp	r0, #0
 8009950:	d0ec      	beq.n	800992c <__ssvfiscanf_r+0x18c>
 8009952:	9846      	ldr	r0, [sp, #280]	; 0x118
 8009954:	2800      	cmp	r0, #0
 8009956:	d163      	bne.n	8009a20 <__ssvfiscanf_r+0x280>
 8009958:	f04f 30ff 	mov.w	r0, #4294967295
 800995c:	e066      	b.n	8009a2c <__ssvfiscanf_r+0x28c>
 800995e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8009960:	f042 0220 	orr.w	r2, r2, #32
 8009964:	9243      	str	r2, [sp, #268]	; 0x10c
 8009966:	e7a4      	b.n	80098b2 <__ssvfiscanf_r+0x112>
 8009968:	2308      	movs	r3, #8
 800996a:	9344      	str	r3, [sp, #272]	; 0x110
 800996c:	2304      	movs	r3, #4
 800996e:	e7bc      	b.n	80098ea <__ssvfiscanf_r+0x14a>
 8009970:	4629      	mov	r1, r5
 8009972:	4640      	mov	r0, r8
 8009974:	f000 f9c0 	bl	8009cf8 <__sccl>
 8009978:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800997a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800997e:	9343      	str	r3, [sp, #268]	; 0x10c
 8009980:	4605      	mov	r5, r0
 8009982:	2301      	movs	r3, #1
 8009984:	e7b1      	b.n	80098ea <__ssvfiscanf_r+0x14a>
 8009986:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800998c:	9343      	str	r3, [sp, #268]	; 0x10c
 800998e:	2300      	movs	r3, #0
 8009990:	e7ab      	b.n	80098ea <__ssvfiscanf_r+0x14a>
 8009992:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8009994:	06d0      	lsls	r0, r2, #27
 8009996:	f53f af78 	bmi.w	800988a <__ssvfiscanf_r+0xea>
 800999a:	f012 0f01 	tst.w	r2, #1
 800999e:	9a01      	ldr	r2, [sp, #4]
 80099a0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80099a2:	f102 0104 	add.w	r1, r2, #4
 80099a6:	9101      	str	r1, [sp, #4]
 80099a8:	6812      	ldr	r2, [r2, #0]
 80099aa:	bf14      	ite	ne
 80099ac:	8013      	strhne	r3, [r2, #0]
 80099ae:	6013      	streq	r3, [r2, #0]
 80099b0:	e76b      	b.n	800988a <__ssvfiscanf_r+0xea>
 80099b2:	2305      	movs	r3, #5
 80099b4:	e799      	b.n	80098ea <__ssvfiscanf_r+0x14a>
 80099b6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80099b8:	4621      	mov	r1, r4
 80099ba:	4630      	mov	r0, r6
 80099bc:	4798      	blx	r3
 80099be:	2800      	cmp	r0, #0
 80099c0:	d097      	beq.n	80098f2 <__ssvfiscanf_r+0x152>
 80099c2:	e7c6      	b.n	8009952 <__ssvfiscanf_r+0x1b2>
 80099c4:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80099c6:	3201      	adds	r2, #1
 80099c8:	9247      	str	r2, [sp, #284]	; 0x11c
 80099ca:	6862      	ldr	r2, [r4, #4]
 80099cc:	3a01      	subs	r2, #1
 80099ce:	2a00      	cmp	r2, #0
 80099d0:	6062      	str	r2, [r4, #4]
 80099d2:	dd0a      	ble.n	80099ea <__ssvfiscanf_r+0x24a>
 80099d4:	3301      	adds	r3, #1
 80099d6:	6023      	str	r3, [r4, #0]
 80099d8:	f7ff f99a 	bl	8008d10 <__locale_ctype_ptr>
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	781a      	ldrb	r2, [r3, #0]
 80099e0:	4410      	add	r0, r2
 80099e2:	7842      	ldrb	r2, [r0, #1]
 80099e4:	0712      	lsls	r2, r2, #28
 80099e6:	d4ed      	bmi.n	80099c4 <__ssvfiscanf_r+0x224>
 80099e8:	e786      	b.n	80098f8 <__ssvfiscanf_r+0x158>
 80099ea:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80099ec:	4621      	mov	r1, r4
 80099ee:	4630      	mov	r0, r6
 80099f0:	4798      	blx	r3
 80099f2:	2800      	cmp	r0, #0
 80099f4:	d0f0      	beq.n	80099d8 <__ssvfiscanf_r+0x238>
 80099f6:	e7ac      	b.n	8009952 <__ssvfiscanf_r+0x1b2>
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	dc06      	bgt.n	8009a0a <__ssvfiscanf_r+0x26a>
 80099fc:	ab01      	add	r3, sp, #4
 80099fe:	4622      	mov	r2, r4
 8009a00:	a943      	add	r1, sp, #268	; 0x10c
 8009a02:	4630      	mov	r0, r6
 8009a04:	f000 f884 	bl	8009b10 <_scanf_i>
 8009a08:	e77f      	b.n	800990a <__ssvfiscanf_r+0x16a>
 8009a0a:	4b0e      	ldr	r3, [pc, #56]	; (8009a44 <__ssvfiscanf_r+0x2a4>)
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f43f af3c 	beq.w	800988a <__ssvfiscanf_r+0xea>
 8009a12:	ab01      	add	r3, sp, #4
 8009a14:	4622      	mov	r2, r4
 8009a16:	a943      	add	r1, sp, #268	; 0x10c
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f3af 8000 	nop.w
 8009a1e:	e774      	b.n	800990a <__ssvfiscanf_r+0x16a>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009a26:	bf18      	it	ne
 8009a28:	f04f 30ff 	movne.w	r0, #4294967295
 8009a2c:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8009a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a34:	9846      	ldr	r0, [sp, #280]	; 0x118
 8009a36:	e7f9      	b.n	8009a2c <__ssvfiscanf_r+0x28c>
 8009a38:	080096eb 	.word	0x080096eb
 8009a3c:	08009765 	.word	0x08009765
 8009a40:	0800a1d4 	.word	0x0800a1d4
 8009a44:	00000000 	.word	0x00000000

08009a48 <_scanf_chars>:
 8009a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a4c:	4615      	mov	r5, r2
 8009a4e:	688a      	ldr	r2, [r1, #8]
 8009a50:	4680      	mov	r8, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	b932      	cbnz	r2, 8009a64 <_scanf_chars+0x1c>
 8009a56:	698a      	ldr	r2, [r1, #24]
 8009a58:	2a00      	cmp	r2, #0
 8009a5a:	bf0c      	ite	eq
 8009a5c:	2201      	moveq	r2, #1
 8009a5e:	f04f 32ff 	movne.w	r2, #4294967295
 8009a62:	608a      	str	r2, [r1, #8]
 8009a64:	6822      	ldr	r2, [r4, #0]
 8009a66:	06d1      	lsls	r1, r2, #27
 8009a68:	bf5f      	itttt	pl
 8009a6a:	681a      	ldrpl	r2, [r3, #0]
 8009a6c:	1d11      	addpl	r1, r2, #4
 8009a6e:	6019      	strpl	r1, [r3, #0]
 8009a70:	6817      	ldrpl	r7, [r2, #0]
 8009a72:	2600      	movs	r6, #0
 8009a74:	69a3      	ldr	r3, [r4, #24]
 8009a76:	b1db      	cbz	r3, 8009ab0 <_scanf_chars+0x68>
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d107      	bne.n	8009a8c <_scanf_chars+0x44>
 8009a7c:	682b      	ldr	r3, [r5, #0]
 8009a7e:	6962      	ldr	r2, [r4, #20]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	5cd3      	ldrb	r3, [r2, r3]
 8009a84:	b9a3      	cbnz	r3, 8009ab0 <_scanf_chars+0x68>
 8009a86:	2e00      	cmp	r6, #0
 8009a88:	d132      	bne.n	8009af0 <_scanf_chars+0xa8>
 8009a8a:	e006      	b.n	8009a9a <_scanf_chars+0x52>
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	d007      	beq.n	8009aa0 <_scanf_chars+0x58>
 8009a90:	2e00      	cmp	r6, #0
 8009a92:	d12d      	bne.n	8009af0 <_scanf_chars+0xa8>
 8009a94:	69a3      	ldr	r3, [r4, #24]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d12a      	bne.n	8009af0 <_scanf_chars+0xa8>
 8009a9a:	2001      	movs	r0, #1
 8009a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa0:	f7ff f936 	bl	8008d10 <__locale_ctype_ptr>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	4418      	add	r0, r3
 8009aaa:	7843      	ldrb	r3, [r0, #1]
 8009aac:	071b      	lsls	r3, r3, #28
 8009aae:	d4ef      	bmi.n	8009a90 <_scanf_chars+0x48>
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	06da      	lsls	r2, r3, #27
 8009ab4:	bf5e      	ittt	pl
 8009ab6:	682b      	ldrpl	r3, [r5, #0]
 8009ab8:	781b      	ldrbpl	r3, [r3, #0]
 8009aba:	703b      	strbpl	r3, [r7, #0]
 8009abc:	682a      	ldr	r2, [r5, #0]
 8009abe:	686b      	ldr	r3, [r5, #4]
 8009ac0:	f102 0201 	add.w	r2, r2, #1
 8009ac4:	602a      	str	r2, [r5, #0]
 8009ac6:	68a2      	ldr	r2, [r4, #8]
 8009ac8:	f103 33ff 	add.w	r3, r3, #4294967295
 8009acc:	f102 32ff 	add.w	r2, r2, #4294967295
 8009ad0:	606b      	str	r3, [r5, #4]
 8009ad2:	f106 0601 	add.w	r6, r6, #1
 8009ad6:	bf58      	it	pl
 8009ad8:	3701      	addpl	r7, #1
 8009ada:	60a2      	str	r2, [r4, #8]
 8009adc:	b142      	cbz	r2, 8009af0 <_scanf_chars+0xa8>
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	dcc8      	bgt.n	8009a74 <_scanf_chars+0x2c>
 8009ae2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	4640      	mov	r0, r8
 8009aea:	4798      	blx	r3
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d0c1      	beq.n	8009a74 <_scanf_chars+0x2c>
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	f013 0310 	ands.w	r3, r3, #16
 8009af6:	d105      	bne.n	8009b04 <_scanf_chars+0xbc>
 8009af8:	68e2      	ldr	r2, [r4, #12]
 8009afa:	3201      	adds	r2, #1
 8009afc:	60e2      	str	r2, [r4, #12]
 8009afe:	69a2      	ldr	r2, [r4, #24]
 8009b00:	b102      	cbz	r2, 8009b04 <_scanf_chars+0xbc>
 8009b02:	703b      	strb	r3, [r7, #0]
 8009b04:	6923      	ldr	r3, [r4, #16]
 8009b06:	441e      	add	r6, r3
 8009b08:	6126      	str	r6, [r4, #16]
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009b10 <_scanf_i>:
 8009b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	469a      	mov	sl, r3
 8009b16:	4b74      	ldr	r3, [pc, #464]	; (8009ce8 <_scanf_i+0x1d8>)
 8009b18:	460c      	mov	r4, r1
 8009b1a:	4683      	mov	fp, r0
 8009b1c:	4616      	mov	r6, r2
 8009b1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b22:	b087      	sub	sp, #28
 8009b24:	ab03      	add	r3, sp, #12
 8009b26:	68a7      	ldr	r7, [r4, #8]
 8009b28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009b2c:	4b6f      	ldr	r3, [pc, #444]	; (8009cec <_scanf_i+0x1dc>)
 8009b2e:	69a1      	ldr	r1, [r4, #24]
 8009b30:	4a6f      	ldr	r2, [pc, #444]	; (8009cf0 <_scanf_i+0x1e0>)
 8009b32:	2903      	cmp	r1, #3
 8009b34:	bf18      	it	ne
 8009b36:	461a      	movne	r2, r3
 8009b38:	1e7b      	subs	r3, r7, #1
 8009b3a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8009b3e:	bf84      	itt	hi
 8009b40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009b44:	60a3      	strhi	r3, [r4, #8]
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	9200      	str	r2, [sp, #0]
 8009b4a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009b4e:	bf88      	it	hi
 8009b50:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009b54:	f104 091c 	add.w	r9, r4, #28
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	bf8c      	ite	hi
 8009b5c:	197f      	addhi	r7, r7, r5
 8009b5e:	2700      	movls	r7, #0
 8009b60:	464b      	mov	r3, r9
 8009b62:	f04f 0800 	mov.w	r8, #0
 8009b66:	9301      	str	r3, [sp, #4]
 8009b68:	6831      	ldr	r1, [r6, #0]
 8009b6a:	ab03      	add	r3, sp, #12
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009b72:	7809      	ldrb	r1, [r1, #0]
 8009b74:	f7f6 fb44 	bl	8000200 <memchr>
 8009b78:	9b01      	ldr	r3, [sp, #4]
 8009b7a:	b328      	cbz	r0, 8009bc8 <_scanf_i+0xb8>
 8009b7c:	f1b8 0f01 	cmp.w	r8, #1
 8009b80:	d156      	bne.n	8009c30 <_scanf_i+0x120>
 8009b82:	6862      	ldr	r2, [r4, #4]
 8009b84:	b92a      	cbnz	r2, 8009b92 <_scanf_i+0x82>
 8009b86:	2208      	movs	r2, #8
 8009b88:	6062      	str	r2, [r4, #4]
 8009b8a:	6822      	ldr	r2, [r4, #0]
 8009b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b90:	6022      	str	r2, [r4, #0]
 8009b92:	6822      	ldr	r2, [r4, #0]
 8009b94:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009b98:	6022      	str	r2, [r4, #0]
 8009b9a:	68a2      	ldr	r2, [r4, #8]
 8009b9c:	1e51      	subs	r1, r2, #1
 8009b9e:	60a1      	str	r1, [r4, #8]
 8009ba0:	b192      	cbz	r2, 8009bc8 <_scanf_i+0xb8>
 8009ba2:	6832      	ldr	r2, [r6, #0]
 8009ba4:	1c51      	adds	r1, r2, #1
 8009ba6:	6031      	str	r1, [r6, #0]
 8009ba8:	7812      	ldrb	r2, [r2, #0]
 8009baa:	701a      	strb	r2, [r3, #0]
 8009bac:	1c5d      	adds	r5, r3, #1
 8009bae:	6873      	ldr	r3, [r6, #4]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	6073      	str	r3, [r6, #4]
 8009bb6:	dc06      	bgt.n	8009bc6 <_scanf_i+0xb6>
 8009bb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009bbc:	4631      	mov	r1, r6
 8009bbe:	4658      	mov	r0, fp
 8009bc0:	4798      	blx	r3
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	d176      	bne.n	8009cb4 <_scanf_i+0x1a4>
 8009bc6:	462b      	mov	r3, r5
 8009bc8:	f108 0801 	add.w	r8, r8, #1
 8009bcc:	f1b8 0f03 	cmp.w	r8, #3
 8009bd0:	d1c9      	bne.n	8009b66 <_scanf_i+0x56>
 8009bd2:	6862      	ldr	r2, [r4, #4]
 8009bd4:	b90a      	cbnz	r2, 8009bda <_scanf_i+0xca>
 8009bd6:	220a      	movs	r2, #10
 8009bd8:	6062      	str	r2, [r4, #4]
 8009bda:	6862      	ldr	r2, [r4, #4]
 8009bdc:	4945      	ldr	r1, [pc, #276]	; (8009cf4 <_scanf_i+0x1e4>)
 8009bde:	6960      	ldr	r0, [r4, #20]
 8009be0:	9301      	str	r3, [sp, #4]
 8009be2:	1a89      	subs	r1, r1, r2
 8009be4:	f000 f888 	bl	8009cf8 <__sccl>
 8009be8:	9b01      	ldr	r3, [sp, #4]
 8009bea:	f04f 0800 	mov.w	r8, #0
 8009bee:	461d      	mov	r5, r3
 8009bf0:	68a3      	ldr	r3, [r4, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d038      	beq.n	8009c68 <_scanf_i+0x158>
 8009bf6:	6831      	ldr	r1, [r6, #0]
 8009bf8:	6960      	ldr	r0, [r4, #20]
 8009bfa:	780a      	ldrb	r2, [r1, #0]
 8009bfc:	5c80      	ldrb	r0, [r0, r2]
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d032      	beq.n	8009c68 <_scanf_i+0x158>
 8009c02:	2a30      	cmp	r2, #48	; 0x30
 8009c04:	6822      	ldr	r2, [r4, #0]
 8009c06:	d121      	bne.n	8009c4c <_scanf_i+0x13c>
 8009c08:	0510      	lsls	r0, r2, #20
 8009c0a:	d51f      	bpl.n	8009c4c <_scanf_i+0x13c>
 8009c0c:	f108 0801 	add.w	r8, r8, #1
 8009c10:	b117      	cbz	r7, 8009c18 <_scanf_i+0x108>
 8009c12:	3301      	adds	r3, #1
 8009c14:	3f01      	subs	r7, #1
 8009c16:	60a3      	str	r3, [r4, #8]
 8009c18:	6873      	ldr	r3, [r6, #4]
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	6073      	str	r3, [r6, #4]
 8009c20:	dd1b      	ble.n	8009c5a <_scanf_i+0x14a>
 8009c22:	6833      	ldr	r3, [r6, #0]
 8009c24:	3301      	adds	r3, #1
 8009c26:	6033      	str	r3, [r6, #0]
 8009c28:	68a3      	ldr	r3, [r4, #8]
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	60a3      	str	r3, [r4, #8]
 8009c2e:	e7df      	b.n	8009bf0 <_scanf_i+0xe0>
 8009c30:	f1b8 0f02 	cmp.w	r8, #2
 8009c34:	d1b1      	bne.n	8009b9a <_scanf_i+0x8a>
 8009c36:	6822      	ldr	r2, [r4, #0]
 8009c38:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009c3c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009c40:	d1c2      	bne.n	8009bc8 <_scanf_i+0xb8>
 8009c42:	2110      	movs	r1, #16
 8009c44:	6061      	str	r1, [r4, #4]
 8009c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c4a:	e7a5      	b.n	8009b98 <_scanf_i+0x88>
 8009c4c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009c50:	6022      	str	r2, [r4, #0]
 8009c52:	780b      	ldrb	r3, [r1, #0]
 8009c54:	702b      	strb	r3, [r5, #0]
 8009c56:	3501      	adds	r5, #1
 8009c58:	e7de      	b.n	8009c18 <_scanf_i+0x108>
 8009c5a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009c5e:	4631      	mov	r1, r6
 8009c60:	4658      	mov	r0, fp
 8009c62:	4798      	blx	r3
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d0df      	beq.n	8009c28 <_scanf_i+0x118>
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	05d9      	lsls	r1, r3, #23
 8009c6c:	d50c      	bpl.n	8009c88 <_scanf_i+0x178>
 8009c6e:	454d      	cmp	r5, r9
 8009c70:	d908      	bls.n	8009c84 <_scanf_i+0x174>
 8009c72:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009c76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c7a:	4632      	mov	r2, r6
 8009c7c:	4658      	mov	r0, fp
 8009c7e:	4798      	blx	r3
 8009c80:	1e6f      	subs	r7, r5, #1
 8009c82:	463d      	mov	r5, r7
 8009c84:	454d      	cmp	r5, r9
 8009c86:	d02c      	beq.n	8009ce2 <_scanf_i+0x1d2>
 8009c88:	6822      	ldr	r2, [r4, #0]
 8009c8a:	f012 0210 	ands.w	r2, r2, #16
 8009c8e:	d11e      	bne.n	8009cce <_scanf_i+0x1be>
 8009c90:	702a      	strb	r2, [r5, #0]
 8009c92:	6863      	ldr	r3, [r4, #4]
 8009c94:	9e00      	ldr	r6, [sp, #0]
 8009c96:	4649      	mov	r1, r9
 8009c98:	4658      	mov	r0, fp
 8009c9a:	47b0      	blx	r6
 8009c9c:	6822      	ldr	r2, [r4, #0]
 8009c9e:	f8da 3000 	ldr.w	r3, [sl]
 8009ca2:	f012 0f20 	tst.w	r2, #32
 8009ca6:	d008      	beq.n	8009cba <_scanf_i+0x1aa>
 8009ca8:	1d1a      	adds	r2, r3, #4
 8009caa:	f8ca 2000 	str.w	r2, [sl]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6018      	str	r0, [r3, #0]
 8009cb2:	e009      	b.n	8009cc8 <_scanf_i+0x1b8>
 8009cb4:	f04f 0800 	mov.w	r8, #0
 8009cb8:	e7d6      	b.n	8009c68 <_scanf_i+0x158>
 8009cba:	07d2      	lsls	r2, r2, #31
 8009cbc:	d5f4      	bpl.n	8009ca8 <_scanf_i+0x198>
 8009cbe:	1d1a      	adds	r2, r3, #4
 8009cc0:	f8ca 2000 	str.w	r2, [sl]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	8018      	strh	r0, [r3, #0]
 8009cc8:	68e3      	ldr	r3, [r4, #12]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	60e3      	str	r3, [r4, #12]
 8009cce:	eba5 0509 	sub.w	r5, r5, r9
 8009cd2:	44a8      	add	r8, r5
 8009cd4:	6925      	ldr	r5, [r4, #16]
 8009cd6:	4445      	add	r5, r8
 8009cd8:	6125      	str	r5, [r4, #16]
 8009cda:	2000      	movs	r0, #0
 8009cdc:	b007      	add	sp, #28
 8009cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce2:	2001      	movs	r0, #1
 8009ce4:	e7fa      	b.n	8009cdc <_scanf_i+0x1cc>
 8009ce6:	bf00      	nop
 8009ce8:	0800a070 	.word	0x0800a070
 8009cec:	080095f9 	.word	0x080095f9
 8009cf0:	08008689 	.word	0x08008689
 8009cf4:	0800a312 	.word	0x0800a312

08009cf8 <__sccl>:
 8009cf8:	b570      	push	{r4, r5, r6, lr}
 8009cfa:	780b      	ldrb	r3, [r1, #0]
 8009cfc:	2b5e      	cmp	r3, #94	; 0x5e
 8009cfe:	bf13      	iteet	ne
 8009d00:	1c4a      	addne	r2, r1, #1
 8009d02:	1c8a      	addeq	r2, r1, #2
 8009d04:	784b      	ldrbeq	r3, [r1, #1]
 8009d06:	2100      	movne	r1, #0
 8009d08:	bf08      	it	eq
 8009d0a:	2101      	moveq	r1, #1
 8009d0c:	1e44      	subs	r4, r0, #1
 8009d0e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8009d12:	f804 1f01 	strb.w	r1, [r4, #1]!
 8009d16:	42a5      	cmp	r5, r4
 8009d18:	d1fb      	bne.n	8009d12 <__sccl+0x1a>
 8009d1a:	b913      	cbnz	r3, 8009d22 <__sccl+0x2a>
 8009d1c:	3a01      	subs	r2, #1
 8009d1e:	4610      	mov	r0, r2
 8009d20:	bd70      	pop	{r4, r5, r6, pc}
 8009d22:	f081 0401 	eor.w	r4, r1, #1
 8009d26:	54c4      	strb	r4, [r0, r3]
 8009d28:	4611      	mov	r1, r2
 8009d2a:	780d      	ldrb	r5, [r1, #0]
 8009d2c:	2d2d      	cmp	r5, #45	; 0x2d
 8009d2e:	f101 0201 	add.w	r2, r1, #1
 8009d32:	d006      	beq.n	8009d42 <__sccl+0x4a>
 8009d34:	2d5d      	cmp	r5, #93	; 0x5d
 8009d36:	d0f2      	beq.n	8009d1e <__sccl+0x26>
 8009d38:	b90d      	cbnz	r5, 8009d3e <__sccl+0x46>
 8009d3a:	460a      	mov	r2, r1
 8009d3c:	e7ef      	b.n	8009d1e <__sccl+0x26>
 8009d3e:	462b      	mov	r3, r5
 8009d40:	e7f1      	b.n	8009d26 <__sccl+0x2e>
 8009d42:	784e      	ldrb	r6, [r1, #1]
 8009d44:	2e5d      	cmp	r6, #93	; 0x5d
 8009d46:	d0fa      	beq.n	8009d3e <__sccl+0x46>
 8009d48:	42b3      	cmp	r3, r6
 8009d4a:	dcf8      	bgt.n	8009d3e <__sccl+0x46>
 8009d4c:	3102      	adds	r1, #2
 8009d4e:	3301      	adds	r3, #1
 8009d50:	429e      	cmp	r6, r3
 8009d52:	54c4      	strb	r4, [r0, r3]
 8009d54:	dcfb      	bgt.n	8009d4e <__sccl+0x56>
 8009d56:	e7e8      	b.n	8009d2a <__sccl+0x32>

08009d58 <__submore>:
 8009d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d5c:	460c      	mov	r4, r1
 8009d5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d64:	4299      	cmp	r1, r3
 8009d66:	d11e      	bne.n	8009da6 <__submore+0x4e>
 8009d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009d6c:	f7ff f846 	bl	8008dfc <_malloc_r>
 8009d70:	b918      	cbnz	r0, 8009d7a <__submore+0x22>
 8009d72:	f04f 30ff 	mov.w	r0, #4294967295
 8009d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d7e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009d80:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009d84:	6360      	str	r0, [r4, #52]	; 0x34
 8009d86:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009d8a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009d8e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009d92:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009d96:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009d9a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009d9e:	6020      	str	r0, [r4, #0]
 8009da0:	2000      	movs	r0, #0
 8009da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009da6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009da8:	0077      	lsls	r7, r6, #1
 8009daa:	463a      	mov	r2, r7
 8009dac:	f7ff fc77 	bl	800969e <_realloc_r>
 8009db0:	4605      	mov	r5, r0
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d0dd      	beq.n	8009d72 <__submore+0x1a>
 8009db6:	eb00 0806 	add.w	r8, r0, r6
 8009dba:	4601      	mov	r1, r0
 8009dbc:	4632      	mov	r2, r6
 8009dbe:	4640      	mov	r0, r8
 8009dc0:	f7fe fb67 	bl	8008492 <memcpy>
 8009dc4:	f8c4 8000 	str.w	r8, [r4]
 8009dc8:	6365      	str	r5, [r4, #52]	; 0x34
 8009dca:	63a7      	str	r7, [r4, #56]	; 0x38
 8009dcc:	e7e8      	b.n	8009da0 <__submore+0x48>

08009dce <_malloc_usable_size_r>:
 8009dce:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	f1a0 0004 	sub.w	r0, r0, #4
 8009dd8:	bfbc      	itt	lt
 8009dda:	580b      	ldrlt	r3, [r1, r0]
 8009ddc:	18c0      	addlt	r0, r0, r3
 8009dde:	4770      	bx	lr

08009de0 <_init>:
 8009de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de2:	bf00      	nop
 8009de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009de6:	bc08      	pop	{r3}
 8009de8:	469e      	mov	lr, r3
 8009dea:	4770      	bx	lr

08009dec <_fini>:
 8009dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dee:	bf00      	nop
 8009df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009df2:	bc08      	pop	{r3}
 8009df4:	469e      	mov	lr, r3
 8009df6:	4770      	bx	lr
